{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/gifs/1.gif","path":"gifs/1.gif","modified":0,"renderable":0},{"_id":"source/images/1.png","path":"images/1.png","modified":0,"renderable":0},{"_id":"source/images/2.png","path":"images/2.png","modified":0,"renderable":0},{"_id":"source/images/3.png","path":"images/3.png","modified":0,"renderable":0},{"_id":"source/images/4.png","path":"images/4.png","modified":0,"renderable":0},{"_id":"source/images/5.png","path":"images/5.png","modified":0,"renderable":0},{"_id":"source/images/7.png","path":"images/7.png","modified":0,"renderable":0},{"_id":"source/images/8.png","path":"images/8.png","modified":0,"renderable":0},{"_id":"source/images/21.png","path":"images/21.png","modified":0,"renderable":0},{"_id":"source/images/22.png","path":"images/22.png","modified":0,"renderable":0},{"_id":"source/images/23.png","path":"images/23.png","modified":0,"renderable":0},{"_id":"source/images/24.png","path":"images/24.png","modified":0,"renderable":0},{"_id":"source/images/25.png","path":"images/25.png","modified":0,"renderable":0},{"_id":"source/images/26.png","path":"images/26.png","modified":0,"renderable":0},{"_id":"source/images/27.png","path":"images/27.png","modified":0,"renderable":0},{"_id":"source/images/28.png","path":"images/28.png","modified":0,"renderable":0},{"_id":"source/images/29.png","path":"images/29.png","modified":0,"renderable":0},{"_id":"source/images/31.png","path":"images/31.png","modified":0,"renderable":0},{"_id":"source/images/33.png","path":"images/33.png","modified":0,"renderable":0},{"_id":"source/images/6.png","path":"images/6.png","modified":0,"renderable":0},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"source/images/19.png","path":"images/19.png","modified":0,"renderable":0},{"_id":"source/images/20.png","path":"images/20.png","modified":0,"renderable":0},{"_id":"source/images/30.png","path":"images/30.png","modified":0,"renderable":0},{"_id":"source/images/32.png","path":"images/32.png","modified":0,"renderable":0},{"_id":"source/images/34.png","path":"images/34.png","modified":0,"renderable":0},{"_id":"source/images/46.png","path":"images/46.png","modified":0,"renderable":0},{"_id":"source/images/47.png","path":"images/47.png","modified":0,"renderable":0},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"source/images/40.png","path":"images/40.png","modified":0,"renderable":0},{"_id":"source/images/45.png","path":"images/45.png","modified":0,"renderable":0},{"_id":"source/images/48.png","path":"images/48.png","modified":0,"renderable":0},{"_id":"source/images/49.png","path":"images/49.png","modified":0,"renderable":0},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1},{"_id":"source/images/35.png","path":"images/35.png","modified":0,"renderable":0},{"_id":"source/images/36.png","path":"images/36.png","modified":0,"renderable":0},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"source/images/10.png","path":"images/10.png","modified":0,"renderable":0},{"_id":"source/images/12.png","path":"images/12.png","modified":0,"renderable":0},{"_id":"source/images/17.png","path":"images/17.png","modified":0,"renderable":0},{"_id":"source/images/37.png","path":"images/37.png","modified":0,"renderable":0},{"_id":"source/images/38.png","path":"images/38.png","modified":0,"renderable":0},{"_id":"source/images/50.png","path":"images/50.png","modified":0,"renderable":0},{"_id":"source/images/11.png","path":"images/11.png","modified":0,"renderable":0},{"_id":"source/images/39.png","path":"images/39.png","modified":0,"renderable":0},{"_id":"source/images/14.png","path":"images/14.png","modified":0,"renderable":0},{"_id":"source/images/16.png","path":"images/16.png","modified":0,"renderable":0},{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"source/images/13.png","path":"images/13.png","modified":0,"renderable":0},{"_id":"source/images/18.png","path":"images/18.png","modified":0,"renderable":0},{"_id":"source/images/42.png","path":"images/42.png","modified":0,"renderable":0},{"_id":"source/images/43.png","path":"images/43.png","modified":0,"renderable":0},{"_id":"source/images/15.png","path":"images/15.png","modified":0,"renderable":0},{"_id":"source/images/41.png","path":"images/41.png","modified":0,"renderable":0},{"_id":"source/images/9.png","path":"images/9.png","modified":0,"renderable":0},{"_id":"source/images/44.png","path":"images/44.png","modified":0,"renderable":0},{"_id":"themes/yelee/source/favicon.png","path":"favicon.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"4e59803ac66be6b51cc021fb7cb103447f874a0c","modified":1491012897000},{"_id":"themes/yelee/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1483523809000},{"_id":"themes/yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1475237595000},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1475237595000},{"_id":"themes/yelee/_config.yml","hash":"3517f958e31063e8b47c05b27fe32c3310878ae0","modified":1491026993000},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1475237595000},{"_id":"source/_posts/.DS_Store","hash":"0c75046d912fd2bc55768298c4c2532b922742df","modified":1491012884000},{"_id":"source/about/index.md","hash":"b4495a2e08513e96dc397e9f88254178babc6b2a","modified":1476091630000},{"_id":"source/gifs/1.gif","hash":"8d1cb3464a5dafea531315829eace519ceed1659","modified":1490951226000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1476265072000},{"_id":"source/images/1.png","hash":"9eccb833079203c9879d21dab04fe1766c623797","modified":1476087003000},{"_id":"source/images/2.png","hash":"eabc211a16f897452174663e465b36b79cd38efe","modified":1476087175000},{"_id":"source/images/3.png","hash":"b1dd59f0e8c4ab3cc8034b8f8a502d268c818d29","modified":1476087700000},{"_id":"source/images/4.png","hash":"05a1cfa6bd68fec27e405f4278e09a4e32e213ca","modified":1476088008000},{"_id":"source/images/5.png","hash":"28459d75e302b2b955c4fd9f9a6968a686ebaa6d","modified":1476088123000},{"_id":"source/images/7.png","hash":"fff223f231959b3c1ff8920d62ae0537aa3f623e","modified":1476263705000},{"_id":"source/images/8.png","hash":"317b48be2f0071526232d8003557f9dbb5523063","modified":1476264337000},{"_id":"source/tags/index.md","hash":"8b6d9d279d10ac240ec1299c0e1b3a92f585a416","modified":1475902045000},{"_id":"themes/yelee/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1475237595000},{"_id":"themes/yelee/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1475237088000},{"_id":"themes/yelee/.git/index","hash":"6826ebc670c4f0ddf728b8bf8eb62b7bec662907","modified":1491026539000},{"_id":"themes/yelee/.github/ISSUE_TEMPLATE.md","hash":"09e2580d457ce93b4d7d554b75618036b45f8717","modified":1475237595000},{"_id":"themes/yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1475237595000},{"_id":"themes/yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1475237595000},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1475237595000},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1475237595000},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1475237595000},{"_id":"themes/yelee/.git/config","hash":"900873b633dea689f1f85eb22fdcad2ff83c0a23","modified":1475237595000},{"_id":"themes/yelee/.git/packed-refs","hash":"d08588971d930bf5475f69fe4a0190a203dee104","modified":1475237595000},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1475237595000},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1475237595000},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1475237595000},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1475237595000},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1475237595000},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1475237595000},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1475237595000},{"_id":"themes/yelee/source/.DS_Store","hash":"8983992a301632f377142eb0de9b7125c7a7c97a","modified":1483523682000},{"_id":"themes/yelee/source/favicon.ico","hash":"d0f7b201b55fa0e903c449de1c69a505edd008e1","modified":1483523823000},{"_id":"source/_posts/docker/docker.md","hash":"5dcb21541a559c6df5e16142870dc035e8831f4f","modified":1479266850000},{"_id":"source/_posts/html/bootstrap.md","hash":"303e05d46ae316a21739879c3a811ad13ca17927","modified":1479178529000},{"_id":"source/_posts/html/html字符实体.md","hash":"c609f0e4c9384b77d4f4c988704288e7b2f86631","modified":1476262236000},{"_id":"source/_posts/java/java中的spring.md","hash":"95571d79c1057c69b3636f0a42f5705711538d2a","modified":1478071444000},{"_id":"source/_posts/markdown/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1491012357000},{"_id":"source/_posts/markdown/hello-world.md","hash":"75c73f941e9cfa3ba1a3ac75ed2ad9d7e2407970","modified":1475895970000},{"_id":"source/_posts/markdown/markdown转义字符.md","hash":"e8d30506c9ba83b3c46447734d4b87148080d8e8","modified":1476242669000},{"_id":"source/_posts/oc/APP间的调用.md","hash":"0bd0c9327fc5caa4b0d79d9f46c2ef28c4d85a98","modified":1475918331000},{"_id":"source/_posts/oc/AVAudioPlayer.md","hash":"4354a9f7a3e9d1c4f3e06cfa06cd58e15f278787","modified":1475906154000},{"_id":"source/_posts/oc/BOOL  bool  Boolean  NSCFBoolean.md","hash":"fb1f865cce3f5e3301df51244dead417d7977d77","modified":1478918177000},{"_id":"source/_posts/oc/Core Animation 3D介绍(第1部分).md","hash":"519543cd0c6d4975c72b1e9e0177a7684292012c","modified":1478918054000},{"_id":"source/_posts/oc/Core Animation 3D介绍(第2部分).md","hash":"f9ca1b87022fdfab03529cda6421e2c8c7c832c2","modified":1478918177000},{"_id":"source/_posts/oc/Core Data.md","hash":"5bcbccb46eaaa2a450010245a20eb289e292b6fd","modified":1475920208000},{"_id":"source/_posts/oc/IOS7使用原生API进行二维码和条形码的扫描.md","hash":"7b395f6ec7f1cfb97f96c799562447986d6d01d6","modified":1475919934000},{"_id":"source/_posts/oc/MPMoviePlayerViewController和MPMoviePlayerController.md","hash":"f5422c5f882709eebdee7931c91ed2e3072b8563","modified":1475906295000},{"_id":"source/_posts/oc/Masonry介绍与使用实践：快速上手Autolayout.md","hash":"a51031ed45a03d3b59a26b199c9e07dd52713603","modified":1475918131000},{"_id":"source/_posts/oc/MessageUI.framework发短信.md","hash":"23ea37250aea370fb661696074f82711f3b5e588","modified":1475918315000},{"_id":"source/_posts/oc/NSHTTPCookieStorage.md","hash":"f656c03da029768879b3cff9b41f47175da4520e","modified":1475917760000},{"_id":"source/_posts/oc/NSString.md","hash":"d107b6a5eb7f80c0178b7a8c26f41f0971c3a6df","modified":1475920299000},{"_id":"source/_posts/oc/NSTimer.md","hash":"ac5a72e3714755f578708783b38d5608b523fd7a","modified":1475920373000},{"_id":"source/_posts/oc/NSUserDefaults 简介，使用 NSUserDefaults 存储自定义对象.md","hash":"cb9db809cd98d8bcf95449d43196409f0fd606a2","modified":1475919886000},{"_id":"source/_posts/oc/NSUserDefaults.md","hash":"908af2a1b09e49a3e2c7fd20a298a0eb3ebfd483","modified":1475906253000},{"_id":"source/_posts/oc/OC 函数库方法.md","hash":"7d69c976cfd0c509a2b9d2f138b757951cc823f6","modified":1475917811000},{"_id":"source/_posts/oc/UIAlertController.md","hash":"fe3395fc2b50e8ee7601d6088cf541b7b536ef78","modified":1475919814000},{"_id":"source/_posts/oc/UIBarMetrics.md","hash":"e4306d47882d3d775a441fe355e1803c8046959b","modified":1475917627000},{"_id":"source/_posts/oc/UIBlurEffect系统自带毛玻璃效果.md","hash":"e7780fbdac12bdb3df20f423398be46f56673d3b","modified":1475917225000},{"_id":"source/_posts/oc/UIColor和TintColor.md","hash":"2707a20d7a63d0157006e87b14ec8fde00d00c88","modified":1475918348000},{"_id":"source/_posts/oc/UIControlEvents.md","hash":"de449f16f07ccf1ab825689407a5b8d29b48c038","modified":1475906901000},{"_id":"source/_posts/oc/UIDatePicker.md","hash":"5a6f5782ba6a2033fce5ccecca37aba4d68fef5a","modified":1475906213000},{"_id":"source/_posts/oc/UIDevice.md","hash":"21b49b5afd1deba68bd0f61a53fd5d7236586eb1","modified":1475906037000},{"_id":"source/_posts/oc/UIGestureRecognizerState.md","hash":"517ba704b8b0590f2e2871689a7c1e2cc3fdcca6","modified":1475917670000},{"_id":"source/_posts/oc/UIImagePickerController从本地相册加载图片.md","hash":"31436ddb3b46e26c75c960091cf3c694f0e06e08","modified":1475906713000},{"_id":"source/_posts/oc/UINavigationController.md","hash":"2f4b78926572a606010945f8039c1a925eb9e8f5","modified":1475918275000},{"_id":"source/_posts/oc/UIPageControl.md","hash":"29cb8f8f276fa0729ba56aa51657beec8c00558e","modified":1475906837000},{"_id":"source/_posts/oc/UIProgressView进度条.md","hash":"d4b3c0b2a87a65287f8619cf8328ad38aabd3083","modified":1475906637000},{"_id":"source/_posts/oc/UISearchController.md","hash":"22f63540a81d4ec1f17c3d443af0e81851322e9d","modified":1475906136000},{"_id":"source/_posts/oc/UISlider滑条.md","hash":"5fa85d21b2164a8e6e876e4b7743ccc149a35047","modified":1475906066000},{"_id":"source/_posts/oc/UISwitch 圆点按钮.md","hash":"b73ce3b2fe64522ea4c80269b86d10f6bd02f532","modified":1475906433000},{"_id":"source/_posts/oc/UITextField.md","hash":"a3338cc389ecb0bec1a735955931c360335adee8","modified":1475906395000},{"_id":"source/_posts/oc/UITextView.md","hash":"cb50f2e43af9a42e4ec42ad142957db063fa2380","modified":1475906177000},{"_id":"source/_posts/oc/UIWebView.md","hash":"10fd426c1dac505054572f2ff06af1f2015d8014","modified":1475917495000},{"_id":"source/_posts/oc/UIWindow.h详解.md","hash":"554b3e28114cd437b1313063c72d4b8da99bec84","modified":1475917652000},{"_id":"source/_posts/oc/UIscrollView滚动时调用的方法.md","hash":"1f3732a079e951e21cd305c0a5442ba1325bcac8","modified":1475906616000},{"_id":"source/_posts/oc/UTF-8 和 GBK 的 NSString 相互转化的方法.md","hash":"af56adcb98a0ae69d61f32dcffd8473b076c0730","modified":1475917971000},{"_id":"source/_posts/oc/assert.md","hash":"d8cb7a8dec8e870ee6cb1ccce768108d6370bd6c","modified":1475917689000},{"_id":"source/_posts/oc/category extension.md","hash":"ad8531a637ef6bd26e07a9242b490e31584d6c90","modified":1475918008000},{"_id":"source/_posts/oc/cell的几种style.md","hash":"66561cf2fcc02476361c5365a22a191acf357120","modified":1475906349000},{"_id":"source/_posts/oc/double 型转换成 金额.md","hash":"66bd302391aa6dd4344cc2a3bbdb212ecaa2f9a0","modified":1475917886000},{"_id":"source/_posts/oc/iOS 使用纯代码或xib创建圆角视图.md","hash":"fb165fae15c1feda7af2aa009ac1bb390fe2bc82","modified":1475917413000},{"_id":"source/_posts/oc/iOS 打电话.md","hash":"1048ede555c009b45c5e2223f869c34bb160a669","modified":1475917831000},{"_id":"source/_posts/oc/iOS 网络编程模式总结.md","hash":"74f242d312bb45932712265f71f18753c6c47190","modified":1475918218000},{"_id":"source/_posts/oc/iOS-使用AudioServices相关接口的连续震动.md","hash":"eca2e3981b3fd50c30bf7ca9e11deb93dd453cc2","modified":1475918415000},{"_id":"source/_posts/oc/iOS之 CoreMotion 框架.md","hash":"fe9990cd80bf45bf603c537d50ce90ace721e936","modified":1475920059000},{"_id":"source/_posts/oc/iOS实现一个颜色渐变的弧形进度条.md","hash":"4ead166b9be5e56ecdcb97e61660b4ddc9652436","modified":1475917338000},{"_id":"source/_posts/oc/iOS开发拓展篇—CoreLocation简单介绍.md","hash":"91b4d3804b5d4130c143eadb818b77ece1ed3e95","modified":1475917903000},{"_id":"source/_posts/oc/iOS之CF和OC之间类型转换.md","hash":"e791dbf945d0d8a4c8f82b5a2f68e6d29eef6b5f","modified":1475918203000},{"_id":"source/_posts/oc/iOS开发系列--Swift语言.md","hash":"2323d11b97b9d2b3199fb5ae2bc43f20342bc2b1","modified":1475905788000},{"_id":"source/_posts/oc/iOS开发系列--通知与消息机制.md","hash":"e76453dae4bf16c28e7646a851c3cb0068711365","modified":1475905960000},{"_id":"source/_posts/oc/iOS隐藏状态栏.md","hash":"755c810116af84407a30b29304914846e9f3b8b0","modified":1475906522000},{"_id":"source/_posts/oc/iPhone尺寸.md","hash":"740899948af24a5db69223583a605c51c57ae52e","modified":1475906770000},{"_id":"source/_posts/oc/model归档.md","hash":"a078916667f1f4b094b477487e9db2fc040309fb","modified":1475906273000},{"_id":"source/_posts/oc/oc 播放gif动画.md","hash":"c10e41dab21bfb280e7a7241aabfd2c315279f2c","modified":1475917742000},{"_id":"source/_posts/oc/runtime 运行时机制 完全解读.md","hash":"7904629328b67a5a3a6d3b54fab75d19d7c8a070","modified":1475917945000},{"_id":"source/_posts/oc/scrollView加约束.md","hash":"6d61b94a35605e3d82e2a17eb2e878acbb8165af","modified":1475917394000},{"_id":"source/_posts/oc/storyboard传值.md","hash":"e5975037295ef03d744e1d0220255874e8f71a29","modified":1475906492000},{"_id":"source/_posts/oc/tableview 下拉图片放大.md","hash":"fac93b8f63f1c2119f64813ffb1421bf623e2a74","modified":1475918297000},{"_id":"source/_posts/oc/target action.md","hash":"cbb4581d24698625d7bb2e7d43a273257c9554dd","modified":1475906858000},{"_id":"source/_posts/oc/view 的 clipsToBounds属性.md","hash":"0762526c9782b410602c7daf53ebc273fbd525e3","modified":1475917723000},{"_id":"source/_posts/oc/不同数据类型转换.md","hash":"7f12b4a580f996e6c802b331774505d2c8bba3ec","modified":1475920101000},{"_id":"source/_posts/oc/不规则瀑布流.md","hash":"5d2b6648e75ee4c9b67ea945c9ac231b8539bb65","modified":1475918155000},{"_id":"source/_posts/oc/协议.md","hash":"1f0d4a1842e5d09777344bf8c972a21d90741ba7","modified":1475915823000},{"_id":"source/_posts/oc/单例模式.md","hash":"96c8d508dca5da74552b873e848ddb2c0c05cc86","modified":1475906583000},{"_id":"source/_posts/oc/和CFStringRef相关的CFSTR与和NSString相关的@.md","hash":"97fca4ec594e2b66d0ed2e6cca741f1a035ef2b5","modified":1475918183000},{"_id":"source/_posts/oc/在c的函数中调用oc的方法.md","hash":"6a95e6018d5439d87f4b43171bbf300f28855913","modified":1475918169000},{"_id":"source/_posts/oc/夜间模式.md","hash":"fb4a27f03d0a9f134271d4e2d28112fbe521d869","modified":1475906678000},{"_id":"source/_posts/oc/屏幕横屏竖屏转换.md","hash":"50e694a034dc7ac247707edd762378e651ce8a17","modified":1475906323000},{"_id":"source/_posts/oc/按照时间排序.md","hash":"49714c2a050fc1669fc5597fd786a534e35b84d1","modified":1475917793000},{"_id":"source/_posts/oc/推送通知.md","hash":"b50046a3c607ee2e09c57a0715552647b58c3768","modified":1475905288000},{"_id":"source/_posts/oc/数组 基本用法和排序.md","hash":"ac90a8dfb93397f09f453261c305489f10b8e56a","modified":1475906472000},{"_id":"source/_posts/oc/标题自动旋转滚动效果.md","hash":"6d85c61d7f806e8fb9aad8094483b4ad41aadf99","modified":1490951792000},{"_id":"source/_posts/oc/模态.md","hash":"639ff58fe7eb43078ea5deeb2cad49955435127b","modified":1475917119000},{"_id":"source/_posts/oc/汉字转拼音.md","hash":"924811847e49745628b8448665ef39dde8f7b256","modified":1475917138000},{"_id":"source/_posts/oc/获取当前时间.md","hash":"ecc324ef9cf651f74723b4c6a65bc46384d3ee79","modified":1475906368000},{"_id":"source/_posts/oc/计算字符串的宽或者高.md","hash":"5fb471cf670ea404ee43426887defd4bc98f958e","modified":1475917317000},{"_id":"source/_posts/oc/让超出自己视图范围的子视图响应事件.md","hash":"cbad8c27def294dad291bf51e2151f8c62217e66","modified":1475917577000},{"_id":"source/_posts/oc/进程和线程.md","hash":"832c8af099f0cf022de532e59ec39a16e59eb9c2","modified":1475917991000},{"_id":"source/_posts/oc/通知.md","hash":"9c09a4021d1d2ae593a03ae13fb9eddbf7c6dc3d","modified":1475906803000},{"_id":"source/_posts/oc/通讯录.md","hash":"099281ea841a2470b41e52b50a22d7bf9de30f2b","modified":1475918115000},{"_id":"source/_posts/oc/长按保存图片到本地.md","hash":"7482aebd31e0f117a447114a46a88631603a3e3d","modified":1475917245000},{"_id":"source/_posts/oc/音乐播放器时间.md","hash":"1ad75e015c9e00410c7cc37d851718e2d0ebd988","modified":1475917196000},{"_id":"source/_posts/php/mac下的php环境配置.md","hash":"a3e2325dd03477d0416e38a6b0e25deb11614287","modified":1476089229000},{"_id":"source/_posts/php/php函数.md","hash":"9a604ec19ba9add22d4b2bd769557d9c48fcae4a","modified":1476420294000},{"_id":"source/_posts/php/php变量.md","hash":"c7d436c6b80bbbd7bb26aaf9e54ebe26055057ce","modified":1476260918000},{"_id":"source/_posts/php/php图形操作.md","hash":"f7c9bed542850ca8e5c186927f3e3439f3cc4700","modified":1476693232000},{"_id":"source/_posts/php/php基本语法格式.md","hash":"dc80a06cdb82845e32c7a1c61155a2c6b7a1cbb5","modified":1476241648000},{"_id":"source/_posts/php/php字符串.md","hash":"6ff719cb2d6419e3ce7b254420c7541335882eaf","modified":1476670403000},{"_id":"source/_posts/php/php常量.md","hash":"b6d24496593927f4dc4d76aa1044c2d46079365c","modified":1476329588000},{"_id":"source/_posts/php/php数组.md","hash":"4570b186f30d28a8d36ea770c73909ddb12298d3","modified":1476416636000},{"_id":"source/_posts/php/php文件系统.md","hash":"5f348d46e6a0dd885fbbf4972263fe3a3fd84976","modified":1476680447000},{"_id":"source/_posts/php/php日期和时间.md","hash":"fa555c59cb5e79574ece9876ecaa12ceb2071a7c","modified":1476683888000},{"_id":"source/_posts/php/php类.md","hash":"dc0636bdba6f13ab4cb354e94788c8911313803b","modified":1476669236000},{"_id":"source/_posts/php/php结构语句.md","hash":"83426cb39c3e38b0e074450cf90caf9f1d425a7e","modified":1476415158000},{"_id":"source/_posts/php/php运算符.md","hash":"d9b5c9bcde29ddb56a41010185b511fe79cc6ef0","modified":1476409724000},{"_id":"source/_posts/php/php静态关键字static.md","hash":"5324cd9f2e5cefb378b00fbbac17cb8f71f5e958","modified":1476669253000},{"_id":"source/_posts/php/会话控制（session与cookie）.md","hash":"23783b1d291f447ce829d5f770d6a2ad093c73dc","modified":1476680457000},{"_id":"source/_posts/php/正则表达式.md","hash":"853dede6277e7056b3b2c6ac8ad39b22a92efd89","modified":1476674267000},{"_id":"source/_posts/ruby/ActiveRecord(一).md","hash":"63ed72600525464369a67584408e1e24d06ebb4a","modified":1490073286000},{"_id":"source/_posts/ruby/ActiveRecord(三).md","hash":"54350fda0fcda483bb8e03ddf195118215995454","modified":1483523029000},{"_id":"source/_posts/ruby/ActiveRecord(二).md","hash":"99e0586c0ed3172243c5a71c38dce7ed5bbc851c","modified":1483523029000},{"_id":"source/_posts/ruby/ActiveRecord(四).md","hash":"c21190dd60ed610d9d485b4f8ada721360328338","modified":1483523029000},{"_id":"source/_posts/ruby/I18n.md","hash":"fa18a963e3f9b82ec8ed1d448f3c90e22399f77a","modified":1481003042000},{"_id":"source/_posts/ruby/gem.md","hash":"fc9ad96d965cfafbbdcddca4501e5ad90d6e1de0","modified":1479451386000},{"_id":"source/_posts/ruby/grape.md","hash":"85e663f9ba093dec7c80d2e8ea98df87df1d9c4c","modified":1479808646000},{"_id":"source/_posts/ruby/rails.md","hash":"3e878cf15b57eb7eafe0d24dbd486d310787883d","modified":1481699094000},{"_id":"source/_posts/ruby/rails下信鸽推送.md","hash":"59353713511490d3e765a80db6641577e7815321","modified":1483523029000},{"_id":"source/_posts/ruby/rake.md","hash":"247f74497016c490eb2d51ad07a80f3c6347259d","modified":1483523029000},{"_id":"source/_posts/ruby/rake任务.md","hash":"ae6b9a6adc1dbedd0000b7efb13e90753c1350fe","modified":1483523030000},{"_id":"source/_posts/ruby/rspec.md","hash":"1f9b5fa0bd4b19aa271814287b7f0a9c8f9282e9","modified":1483523029000},{"_id":"source/_posts/ruby/ruby基本语法1.md","hash":"fda70536c5d34f85b0eceb7264b469806d448b3f","modified":1487569602000},{"_id":"source/_posts/ruby/ruby基本语法2.md","hash":"ace6811352452254c631106681452ca4505552d8","modified":1483584201000},{"_id":"source/_posts/ruby/ruby基本语法3.md","hash":"64134d10234fa9c855c7df90f88d1c22791bc563","modified":1487911202000},{"_id":"source/_posts/ruby/ruby属性.md","hash":"87433ab8fd0bf5a54aabece083eac75a436bb8df","modified":1487906664000},{"_id":"source/_posts/ruby/ruby常用命令.md","hash":"1049769e7468e02684c4f013210f8965a46b333a","modified":1483584201000},{"_id":"source/_posts/ruby/ruby正则.md","hash":"f172cbc094bc903310d5d2baee0b3273a4371152","modified":1483523217000},{"_id":"source/_posts/ruby/ruby调试.md","hash":"19f3370d8c1dff0dcc6ccd67589cf0e5f31ac6fd","modified":1483584201000},{"_id":"source/_posts/ruby/rvm.md","hash":"58ea40baadaa4731f7d52ce669c3df9db8a11fc5","modified":1486187773000},{"_id":"source/_posts/ruby/用string或symbol访问hash.md","hash":"a6bf85ec847097e3f5e20042d189327b59f5afa0","modified":1487751042000},{"_id":"source/_posts/security/wifi.md","hash":"38a64a906d25d9b2c170f1a5c7314d89625acc7f","modified":1490685629000},{"_id":"source/_posts/shell/判断文件是否存在的脚本语法.md","hash":"34fda3c1a73394ac209c6743ca50fd20b1d7371d","modified":1482833349000},{"_id":"source/_posts/swift/swift类型.md","hash":"7348e7568b5189cb75c5dc4087cff0dafd35ce8c","modified":1487557823000},{"_id":"source/_posts/system/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1491012795000},{"_id":"source/_posts/system/Ubuntu网络管理.md","hash":"c56514e85440e7fc71b886cd1897acc595f800a0","modified":1477286537000},{"_id":"source/_posts/system/apt.md","hash":"c593c6ebf925fe49ec58b9f246a8ea5234a38305","modified":1483523030000},{"_id":"source/_posts/system/centos与ubuntu不同.md","hash":"d9b80ae99cfbca2087d6c2bc88bdf8b2f358b112","modified":1477209021000},{"_id":"source/_posts/system/debian安装sudo.md","hash":"c1fd2fbedd2ef9477b65884e25106b96f528a35f","modified":1476952355000},{"_id":"source/_posts/system/linux命令.md","hash":"d497b85e39aee9a99a04af0619bad5a96387b74e","modified":1479192953000},{"_id":"source/_posts/system/linux文件权限.md","hash":"ca331b177d2437eb71ac3ef15c12c393676153ff","modified":1490940343000},{"_id":"source/_posts/system/linux环境变量.md","hash":"c03a995163fb594385d2cb4dfeb362c462d46ac0","modified":1490155827000},{"_id":"source/_posts/system/linux用户管理.md","hash":"6caef222dd226c2ef7429fcb351d415377260d17","modified":1477055684000},{"_id":"source/_posts/system/linux系统目录结构.md","hash":"2c7195079cc2481c15066cb5b3a145deb2c50b21","modified":1476943192000},{"_id":"source/_posts/system/mac显示隐藏文件夹.md","hash":"e25069c8e8732dabcd9a9e787be0133feed0b052","modified":1475917780000},{"_id":"source/_posts/system/nginx.md","hash":"f27e24fcaad27071af36535e39d9a8aa512910c0","modified":1480045000000},{"_id":"source/_posts/system/postgresql.md","hash":"cbd3fc558e53d76909cbcc4cdbde013ab1d7743b","modified":1479873970000},{"_id":"source/_posts/system/ssh.md","hash":"ea3e550f9223a7aee737fe4c3cc4bdc594107c8d","modified":1490173219000},{"_id":"source/_posts/system/supervisor.md","hash":"8bc6c54c590313c628618533a4781bfab053b69d","modified":1479363874000},{"_id":"source/_posts/system/sublime text3.md","hash":"aa8b84d462033472fcebb4a7b5953d4c96cd1f2e","modified":1476156583000},{"_id":"source/_posts/system/virtualbox共享文件夹.md","hash":"743e9a03ba412858443a58513c84a9756d0d04c0","modified":1480241576000},{"_id":"source/_posts/system/virtualbox安装debian.md","hash":"1fbb2199a856f31f545d5a44771346a464854816","modified":1476920040000},{"_id":"source/_posts/system/删除Xcode插件.md","hash":"693447b403184910106a2dda96a183b06c37e347","modified":1475917473000},{"_id":"source/_posts/system/欢迎使用CSDN-markdown编辑器.md","hash":"e321ea5938120af68e8bc5ef49c9b60b761d5241","modified":1475917929000},{"_id":"source/_posts/system/移动UIUX设计师和PM使用的原型工具.md","hash":"c2ba5e749a2dd40cd97e3afa5e90ae58933731cb","modified":1475918032000},{"_id":"source/_posts/system/编程思想.md","hash":"3635b2090ca904427cd6d51aa4160586ed627025","modified":1478923888000},{"_id":"source/images/21.png","hash":"477db05e78ab5d4c2f5b124358118500d3774b39","modified":1476866944000},{"_id":"source/images/22.png","hash":"ab6c4ab0e12f7ad3824d712ece4936aed51d9c3c","modified":1476867037000},{"_id":"source/images/23.png","hash":"294e5ddb530761c9643d33d37c61c8a74b53b5a2","modified":1476867048000},{"_id":"source/images/24.png","hash":"e098c07036ae50349862bc8f87e6d0a73b3274e3","modified":1476867357000},{"_id":"source/images/25.png","hash":"e07ee2306a0f7fde34b2687a782402033703642b","modified":1476867470000},{"_id":"source/images/26.png","hash":"e347a2619fa73d65fc923a3101ec0633fb6fee82","modified":1476867601000},{"_id":"source/images/27.png","hash":"757f706f74c2a5a809ba3feb935591dbda04690b","modified":1476867697000},{"_id":"source/images/28.png","hash":"3f0d4c2867bf686a7b0b2d95c968bc8b86f25cc8","modified":1476867750000},{"_id":"source/images/29.png","hash":"117421b3fa71c28e5734007ad076e0ba95133546","modified":1476867765000},{"_id":"source/images/31.png","hash":"6825da5e6cd42cc625f8792ec3bd69338564c412","modified":1476867790000},{"_id":"source/images/33.png","hash":"589056bc465c2d954be8a934258c10d18b70cd4c","modified":1476868355000},{"_id":"source/images/6.png","hash":"12963305c7ac24e6ba81cb174b8d2b4d5294dc13","modified":1476156011000},{"_id":"themes/yelee/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1475237088000},{"_id":"themes/yelee/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1475237088000},{"_id":"themes/yelee/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1475237088000},{"_id":"themes/yelee/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1475237088000},{"_id":"themes/yelee/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1475237088000},{"_id":"themes/yelee/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1475237088000},{"_id":"themes/yelee/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1475237088000},{"_id":"themes/yelee/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1475237088000},{"_id":"themes/yelee/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1475237088000},{"_id":"themes/yelee/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1475237088000},{"_id":"themes/yelee/.git/logs/HEAD","hash":"64b130d718ea55c56583fb1ea743507bea6d39b9","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"d173717b94d9ae67f841e22cf676a11467723d99","modified":1483509046000},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1475237595000},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1475237595000},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1475237595000},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1475237595000},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1475237595000},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1475237595000},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1475237595000},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1475237595000},{"_id":"themes/yelee/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1483523809000},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1475237595000},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1475237595000},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1475237595000},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1475237595000},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1475237595000},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1475237595000},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1475237595000},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1475237595000},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1475237595000},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1475237595000},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1475237595000},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1475237595000},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1475237595000},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1475237595000},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1475237595000},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1475237595000},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1475237595000},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1475237595000},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1475237595000},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1475237595000},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1475237595000},{"_id":"themes/yelee/source/js/main.js","hash":"8eb285e890a515890757513d7dde429551dcb43f","modified":1491028537000},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1475237595000},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1475237595000},{"_id":"themes/yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1475237595000},{"_id":"themes/yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1475237595000},{"_id":"source/_posts/oc/iOS开发系列--音频播放、录音、视频播放、拍照、视频录制.md","hash":"26b80c4d87135c057ec314dd47b2028107d39534","modified":1475920617000},{"_id":"source/images/19.png","hash":"45d73d90677896e6e5ff31e5a14e7363803fdc4c","modified":1476866686000},{"_id":"source/images/20.png","hash":"3b43e0cd2d8cdc7f2d1965b45500f09e7d9bfa22","modified":1476866818000},{"_id":"source/images/30.png","hash":"b641c886a3d9bb4452585f0392e58c5bf7baf6ed","modified":1476867775000},{"_id":"source/images/32.png","hash":"318a1b896ba1192efca9cbde43badeb94e8b1b9a","modified":1476867975000},{"_id":"source/images/34.png","hash":"fedaf28288bfc824e80c32c37a21b1e3784b1101","modified":1476868659000},{"_id":"source/images/46.png","hash":"f343f74301e5729c55b4b1a45d09e32f539876e4","modified":1480824984000},{"_id":"source/images/47.png","hash":"6915643ed6db708d5d22469a19b5a6d1834ce194","modified":1490075430000},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1475237595000},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1475237595000},{"_id":"source/images/40.png","hash":"1ce48284e0cd958a4dd2453eaf0a16d4ffa369bb","modified":1477215579000},{"_id":"source/images/45.png","hash":"49876316c64d14ba313b4898d0a4ef035204a83b","modified":1480822142000},{"_id":"source/images/48.png","hash":"45f69a18deaa4d97158c60a08ad772e609d44160","modified":1490075877000},{"_id":"source/images/49.png","hash":"912801a9eeb587337f933e96eac85e089dbf2b25","modified":1490075853000},{"_id":"themes/yelee/.git/refs/heads/master","hash":"90d1524cfb6be4f69288b5fc30341e44f06e8427","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1475237595000},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1475237595000},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1475237595000},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1475237595000},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1475237595000},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"371770b054ca345d53d92cea08e977ac1a495fa2","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1475237595000},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1475237595000},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1475237595000},{"_id":"source/images/35.png","hash":"e8001c8d3d7dbcc77a90cdde46ea340cb666e9c8","modified":1476942308000},{"_id":"source/images/36.png","hash":"4025f507ccaac0a32227c7ff2b1905c867929212","modified":1477213108000},{"_id":"themes/yelee/.git/objects/pack/pack-8733f308eb76c19bab39f0183b95c71d1384f006.idx","hash":"3fee17e82f2bf705676410082f447e83049ddb18","modified":1475237595000},{"_id":"themes/yelee/source/img/avatar.png","hash":"1cdebc8db239c67cfb66d68f7c1850343a500914","modified":1491025801000},{"_id":"source/images/10.png","hash":"b6ec6cc9580f32efa34a6bd951b77c9aec0732c0","modified":1476863722000},{"_id":"source/images/12.png","hash":"abb6f77b6f96e85b575542a37062bbe13ac36fa7","modified":1476864225000},{"_id":"source/images/17.png","hash":"79d94a0604052fb1254cb62a807d6c6b4c00a750","modified":1476865916000},{"_id":"source/images/37.png","hash":"cfd1df4d2e8d2f8c35d17bb84bac219dd22f0248","modified":1477213240000},{"_id":"source/images/38.png","hash":"6945fe060f48b823bdea310a417f096334706204","modified":1477213482000},{"_id":"source/images/50.png","hash":"54486bc8d44be6c476f3db8725753645c630ed85","modified":1490090217000},{"_id":"themes/yelee/.git/logs/refs/heads/master","hash":"64b130d718ea55c56583fb1ea743507bea6d39b9","modified":1475237595000},{"_id":"themes/yelee/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"5b4e32c0706424df9adce222631f61e8365a3067","modified":1476237093000},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1475237595000},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1475237595000},{"_id":"source/images/11.png","hash":"620a50e9a40aee54cba867a1cae6d06df559df81","modified":1476864055000},{"_id":"source/images/39.png","hash":"ee614b46d8e7fddfe5e73d7bcd535027ab576f76","modified":1477215518000},{"_id":"source/images/14.png","hash":"482cf118a498435c23e33bf118d0850820392c46","modified":1476864243000},{"_id":"source/images/16.png","hash":"7d3647d82c7fd588d5610614c0222b047c75bd67","modified":1476864259000},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"3b24fb905f93674138d21210b5473f1aed494d10","modified":1475732041000},{"_id":"source/images/13.png","hash":"d57053b7ba4118f6e8c7b4c4c8cdff4501817047","modified":1476864234000},{"_id":"source/images/18.png","hash":"bcbc00b073da509961c118921d78fda0762eca1c","modified":1476866488000},{"_id":"source/images/42.png","hash":"558c59c815f1c05b359334333dd235b9c1aa1ef6","modified":1480596795000},{"_id":"source/images/43.png","hash":"c0ec359f0cc937e5f53820b33b8e3eb4b9854208","modified":1480597095000},{"_id":"source/images/15.png","hash":"237000be2343dbea99db4d933104e6508bbaeabf","modified":1476864251000},{"_id":"themes/yelee/.git/logs/refs/remotes/origin/HEAD","hash":"64b130d718ea55c56583fb1ea743507bea6d39b9","modified":1475237595000},{"_id":"source/images/41.png","hash":"73de2bfd30fb5303fb589b3561616e4d33656915","modified":1477215670000},{"_id":"source/images/9.png","hash":"b71c7bde4c412c2791641fe15f58dc4d0e116a3b","modified":1476863707000},{"_id":"source/images/44.png","hash":"7d7884a14eb861a8ea5191ddd904326ebeb407be","modified":1480597212000},{"_id":"themes/yelee/.git/objects/pack/pack-8733f308eb76c19bab39f0183b95c71d1384f006.pack","hash":"475084718ab1d225f25a024cdb849de41c662ccf","modified":1475237595000},{"_id":"public/search.xml","hash":"205d23c669c0b0e3ccd310bf0d39f48244724de5","modified":1491013242278},{"_id":"public/about/index.html","hash":"9ba448ff3d926097d21c59dccdaa53a954b8cb40","modified":1491013243801},{"_id":"public/archives/page/16/index.html","hash":"8f7f5fd00f2332ddb4a993b5fa567973134861cc","modified":1491013243801},{"_id":"public/archives/2015/index.html","hash":"7cbccdc55fdeec3ac45e6e7e7a8131ca2a6ef654","modified":1491013243801},{"_id":"public/archives/2015/09/index.html","hash":"0f709f5e03642fdbf5c22a7add4ca92218c8a871","modified":1491013243801},{"_id":"public/archives/2015/10/index.html","hash":"e58067f4a44dc22b81729137a530005577473b38","modified":1491013243801},{"_id":"public/archives/2016/07/index.html","hash":"c82102a78e808f87c5b2fdeb1ecb6152356e937c","modified":1491013243801},{"_id":"public/archives/2016/09/index.html","hash":"aa373bf6315126c3673e1407af5372460d31ba88","modified":1491013243802},{"_id":"public/archives/2016/10/page/12/index.html","hash":"46ad9a520b870fe84a2672f5ff83f3dc1d45c0fe","modified":1491013243802},{"_id":"public/archives/2016/12/index.html","hash":"16c2c0a91fbe87a0d2bb9ac2843b27e59c6efce5","modified":1491013243802},{"_id":"public/archives/2017/01/index.html","hash":"1cf9a282d206679ddfadabba09d4b1af4b6d33d4","modified":1491013243802},{"_id":"public/archives/2017/02/index.html","hash":"3c8dfd7ba4164dbb8e4281cacd137ab1fb73b3d1","modified":1491013243802},{"_id":"public/archives/2017/03/index.html","hash":"3456e75af7f0c316de5f356ec662ba77d65fc57c","modified":1491013243802},{"_id":"public/categories/html/index.html","hash":"506ad42cfdbbb2636c9a0adbfa128be126d4a083","modified":1491013243802},{"_id":"public/categories/java/index.html","hash":"597645c8011c732d6eefbd095099905c5e2f8706","modified":1491013243802},{"_id":"public/categories/markdown/index.html","hash":"1ac9d8d8a1222c8ff8ef61a56eec81342e4d7c7c","modified":1491013243802},{"_id":"public/categories/ios端效果/index.html","hash":"d8a7d565619261e6db0fd0d5eb36eedaaec305d7","modified":1491013243802},{"_id":"public/categories/php/page/2/index.html","hash":"92793b67cb8dc19ce7915d51c33ab499b024b565","modified":1491013243802},{"_id":"public/categories/Security/index.html","hash":"82db38ed3fc006318d98addf714ac455fb0686a9","modified":1491013243802},{"_id":"public/categories/linux/page/2/index.html","hash":"e1c9f51a55895ede00ce687d2f0904831c88026f","modified":1491013243802},{"_id":"public/categories/swift/index.html","hash":"6b4352965ac66c00db6267fee50032d1bb012a02","modified":1491013243802},{"_id":"public/categories/sublime-text/index.html","hash":"554bdda65db87720faecc93d0df2b074ca023881","modified":1491013243802},{"_id":"public/tags/oc/index.html","hash":"743db565215d8281ae513f033731ddf0af278f36","modified":1491013243802},{"_id":"public/tags/rake/index.html","hash":"21299e9e7262d0cbcfc5c6c9838e54b7e2a1a147","modified":1491013243802},{"_id":"public/tags/rspec/index.html","hash":"5c9290254f31a7d2e78f4d1aca534f830bf0c690","modified":1491013243802},{"_id":"public/tags/rvm/index.html","hash":"d11f2d20c7588cd445cb703b4289af5f883dfac6","modified":1491013243802},{"_id":"public/tags/Security/index.html","hash":"532dfb90189f021c9f8617448687915d3e790734","modified":1491013243802},{"_id":"public/tags/swift/index.html","hash":"15e4bdebb2a38db7df9e229b36e7c686fb86b27e","modified":1491013243802},{"_id":"public/tags/linux/index.html","hash":"dfa83b2dbf617dde2bb690da16a708a43afbbd48","modified":1491013243802},{"_id":"public/tags/apt/index.html","hash":"78fe280e25d13f700de393e41b8755837c703094","modified":1491013243802},{"_id":"public/tags/index.html","hash":"34db82c1c27d02e42f1bd384086cf26ae0d28897","modified":1491013243802},{"_id":"public/2017/03/31/oc/标题自动旋转滚动效果/index.html","hash":"7bd4cd36824341dca37b8658b3736984edaa3938","modified":1491013243802},{"_id":"public/2017/03/22/security/wifi/index.html","hash":"9b215870c5f6bc5e8b4b5cc2b1bce251ae965e62","modified":1491013243802},{"_id":"public/2017/03/21/system/linux环境变量/index.html","hash":"06b218bb75be9f9b663496a50ecf2c97934f9e87","modified":1491013243802},{"_id":"public/2017/02/24/ruby/ruby属性/index.html","hash":"e9b4c7f35617a8d09da65d6be17b76a5c080983c","modified":1491013243802},{"_id":"public/2017/02/04/ruby/rvm/index.html","hash":"79e5ec6eda7e65bb06faa249913b439a6c671065","modified":1491013243802},{"_id":"public/2017/01/04/ruby/用string或symbol访问hash/index.html","hash":"dfe01f7c3766f18a1b61a47ad8c46a4ae337bac4","modified":1491013243803},{"_id":"public/2016/12/20/ruby/rails下信鸽推送/index.html","hash":"38bb94bdcd227544ba4625b807eaaec2a0596ef9","modified":1491013243803},{"_id":"public/2016/12/20/ruby/rake任务/index.html","hash":"9c86f76e3789330329abeb404af38c19710e3c73","modified":1491013243803},{"_id":"public/2016/11/27/system/virtualbox共享文件夹/index.html","hash":"38148bb27382289b3271a9354b4fce03dcc628fa","modified":1491013243803},{"_id":"public/2016/11/25/system/nginx/index.html","hash":"31a08e601daa67d0b788e5aa17cceb5ece7d7ab4","modified":1491013243803},{"_id":"public/2016/11/23/ruby/I18n/index.html","hash":"b3eeff437a5dcbe96f18cbb9ed16b24941dcf03d","modified":1491013243803},{"_id":"public/2016/11/22/ruby/rspec/index.html","hash":"d5be8b45a1a89656488d880b151df2b9666f4906","modified":1491013243803},{"_id":"public/2016/11/22/ruby/grape/index.html","hash":"4032a0fe15cba7b2ac7520efdc2a57f9ee94d6f8","modified":1491013243803},{"_id":"public/2016/11/18/system/postgresql/index.html","hash":"86d0896e5d70f5caac297ba2d444fc180ad0bca4","modified":1491013243803},{"_id":"public/2016/11/18/ruby/rails/index.html","hash":"0080372b75540496947eaee990a64839352eacb3","modified":1491013243803},{"_id":"public/2016/11/17/ruby/gem/index.html","hash":"222245765b989a1746f39a66c6af846ceb2b6453","modified":1491013243803},{"_id":"public/2016/11/17/system/supervisor/index.html","hash":"75a41d2bf0d47277fa5241dc20c1152578c47b9c","modified":1491013243803},{"_id":"public/2016/11/15/docker/docker/index.html","hash":"8ca4d9321606034c4c32e1a9b218e4f43a3b09e5","modified":1491013243803},{"_id":"public/2016/11/15/system/apt/index.html","hash":"2bb6b03211d71ea76d6f70fc3971bf8114de1326","modified":1491013243803},{"_id":"public/2016/11/15/system/ssh/index.html","hash":"4ef489b27d7688a75cf9d483aaabc8309b2e4b45","modified":1491013243803},{"_id":"public/2016/11/14/html/bootstrap/index.html","hash":"2b70a4ab35dbce40e7ce2a68975b1f9bd600f1b1","modified":1491013243803},{"_id":"public/2016/11/14/ruby/rake/index.html","hash":"09c6a55fa6b07c3853cbf96919eb2a9ceaf465e1","modified":1491013243803},{"_id":"public/2016/11/12/system/编程思想/index.html","hash":"944bdc886907ee01a600359d00a4d7a2aadf51c4","modified":1491013243803},{"_id":"public/2016/11/02/java/java中的spring/index.html","hash":"b29c1bfc5c3f9c1b7ac8beaed95783e48a01f158","modified":1491013243803},{"_id":"public/2016/10/23/system/centos与ubuntu不同/index.html","hash":"38ad094ae4476433c15516a3902929ee46afdd64","modified":1491013243803},{"_id":"public/2016/10/23/system/Ubuntu网络管理/index.html","hash":"3e43f6af7af7133a6449b961e3b671448311e3f7","modified":1491013243803},{"_id":"public/2016/10/20/system/linux文件权限/index.html","hash":"7bfdd9b29659cf8c707afce10eca64c2588ca674","modified":1491013243804},{"_id":"public/2016/10/20/system/debian安装sudo/index.html","hash":"711843f1f1507dd8da208a9ab201a8fcd34896e7","modified":1491013243804},{"_id":"public/2016/10/20/system/linux用户管理/index.html","hash":"8f50f295c4bba0ae2156a20d558f9b424de15e78","modified":1491013243804},{"_id":"public/2016/10/20/system/linux系统目录结构/index.html","hash":"3969c1668ce5da03e94019c5e8863611004c8ea9","modified":1491013243804},{"_id":"public/2016/10/20/system/linux命令/index.html","hash":"3980421730cb85b353a8ee188d743f6c4ff8b160","modified":1491013243804},{"_id":"public/2016/10/19/system/virtualbox安装debian/index.html","hash":"763365b5e7230197e6406cdc9ed4f926477faa98","modified":1491013243805},{"_id":"public/2016/10/17/php/php图形操作/index.html","hash":"82a288d9fc976695727d188c134f30a6586a4114","modified":1491013243805},{"_id":"public/2016/10/17/php/php日期和时间/index.html","hash":"ab0aac9302232d0d19e1cbf379ffc9fa6376d467","modified":1491013243805},{"_id":"public/2016/10/17/php/php文件系统/index.html","hash":"0102dd218cbd760ea1240935274320ec14c72bbf","modified":1491013243805},{"_id":"public/2016/10/17/php/会话控制（session与cookie）/index.html","hash":"d4f86914c017e52d52aeef61f8723b6f2f58e8be","modified":1491013243805},{"_id":"public/2016/10/17/php/正则表达式/index.html","hash":"24c7752e0b145afd75e4191164f2d8a3822c2c30","modified":1491013243805},{"_id":"public/2016/10/14/php/php字符串/index.html","hash":"77863f8483c995d942643a1dd0ee6381e042b2f9","modified":1491013243805},{"_id":"public/2016/10/14/php/php静态关键字static/index.html","hash":"309fefd002d4c6537251709a2246326ad49c66ca","modified":1491013243805},{"_id":"public/2016/10/14/php/php类/index.html","hash":"56275798b4852c902968e2b3c38076a4dd06562e","modified":1491013243805},{"_id":"public/2016/10/14/php/php函数/index.html","hash":"402d336331ba44dc3318f37a0c51cb4c9b29d5f1","modified":1491013243805},{"_id":"public/2016/10/14/php/php数组/index.html","hash":"4cadcebcc3f626f979e921b976e68435e859e3e6","modified":1491013243805},{"_id":"public/2016/10/14/php/php结构语句/index.html","hash":"9dbf98d8fa4ef40c9c1612e5eff1fc06d5fdd257","modified":1491013243806},{"_id":"public/2016/10/12/php/php运算符/index.html","hash":"034dea2244ecb33df42da96c0abae019d8f5ce7a","modified":1491013243806},{"_id":"public/2016/10/12/php/php常量/index.html","hash":"8badde7a216a4681265d8928a6a47c94d08b5482","modified":1491013243806},{"_id":"public/2016/10/12/html/html字符实体/index.html","hash":"09ac06b546276b0694e3c9a7fc0cef59fc0615a5","modified":1491013243806},{"_id":"public/2016/10/12/markdown/markdown转义字符/index.html","hash":"40f1b1dbd12ecb49ee2949ffc7fb1d8915946fe5","modified":1491013243806},{"_id":"public/2016/10/12/php/php变量/index.html","hash":"aa68f1cf90003245e41ee01fe25044484d01e7cb","modified":1491013243806},{"_id":"public/2016/10/11/php/php基本语法格式/index.html","hash":"639a1ec77195ad552e3ab66ddc061c465b69d937","modified":1491013243806},{"_id":"public/2016/10/11/system/sublime text3/index.html","hash":"ae32e55931202021cb3ca0c46572e2dbc78f1064","modified":1491013243807},{"_id":"public/2016/10/10/php/mac下的php环境配置/index.html","hash":"5d1c3a4c370de73f413926c67d0c5e4914ead3ed","modified":1491013243807},{"_id":"public/2016/10/08/oc/Core Data/index.html","hash":"3f964b237b154d0438b799d09ffd2c69714ea727","modified":1491013243807},{"_id":"public/2016/10/08/shell/判断文件是否存在的脚本语法/index.html","hash":"b65173227af7bffc2eeee989ba1644b630a44a97","modified":1491013243807},{"_id":"public/2016/10/08/oc/IOS7使用原生API进行二维码和条形码的扫描/index.html","hash":"eb302bb00e0476b9780122197820206b500ac3c2","modified":1491013243807},{"_id":"public/2016/10/08/oc/NSUserDefaults 简介，使用 NSUserDefaults 存储自定义对象/index.html","hash":"4d53cf97853eda568c6dc2c534f3b9876fa8b831","modified":1491013243807},{"_id":"public/2016/10/08/oc/iOS开发系列--通知与消息机制/index.html","hash":"a67f2d56d2cc0c30df7d6cdcef2acf2f117557cc","modified":1491013243807},{"_id":"public/2016/10/08/oc/BOOL  bool  Boolean  NSCFBoolean/index.html","hash":"0a5e750fdacf81e412684b13cb9b53b452ce41ac","modified":1491013243807},{"_id":"public/2016/10/08/oc/iOS隐藏状态栏/index.html","hash":"971646753e4ca6e77dddd4dbeb867e17443effde","modified":1491013243807},{"_id":"public/2016/10/08/oc/iPhone尺寸/index.html","hash":"e4ff1f3aacd3679d8646a82b8264edf67d683fc3","modified":1491013243807},{"_id":"public/2016/10/08/oc/model归档/index.html","hash":"35e2e3973961cf142b820e53cbab77dc71798869","modified":1491013243807},{"_id":"public/2016/10/08/oc/oc 播放gif动画/index.html","hash":"72f39c45036262b0e495049db49f75e39e5808a2","modified":1491013243807},{"_id":"public/2016/10/08/oc/runtime 运行时机制 完全解读/index.html","hash":"559930bf18e8d03839cf1e1fd820475d556926ac","modified":1491013243807},{"_id":"public/2016/10/08/oc/scrollView加约束/index.html","hash":"cd6a5f491d40674e2ae12164b401ec9779b5fa9a","modified":1491013243807},{"_id":"public/2016/10/08/oc/storyboard传值/index.html","hash":"3b895218be200e3124bc5dd131132b866c734b55","modified":1491013243807},{"_id":"public/2016/10/08/oc/tableview 下拉图片放大/index.html","hash":"e47856e2c2aea8aa89b9a74aeee726e76f71f826","modified":1491013243807},{"_id":"public/2016/10/08/oc/target action/index.html","hash":"864f4ffa5c86849fe811361acdf96f058bce413c","modified":1491013243807},{"_id":"public/2016/10/08/oc/view 的 clipsToBounds属性/index.html","hash":"2b95793f32843e761300e9dcad06e6910283f692","modified":1491013243807},{"_id":"public/2016/10/08/oc/不同数据类型转换/index.html","hash":"0df903d18e89e96b5b35f9c2ae2bc892430dcfed","modified":1491013243807},{"_id":"public/2016/10/08/oc/不规则瀑布流/index.html","hash":"bb57c104e1fd69c13074d6afbba77e373d13bd2f","modified":1491013243807},{"_id":"public/2016/10/08/oc/协议/index.html","hash":"50569a3823cd63bf0cbf7842ed9e1cc9a336d187","modified":1491013243807},{"_id":"public/2016/10/08/oc/单例模式/index.html","hash":"3bf07f960c5ed9d49964ac2b63d3f9305a483d46","modified":1491013243808},{"_id":"public/2016/10/08/oc/和CFStringRef相关的CFSTR与和NSString相关的@/index.html","hash":"74a46a3824500ce68b49041a6f55410c317b6aee","modified":1491013243808},{"_id":"public/2016/10/08/oc/在c的函数中调用oc的方法/index.html","hash":"24a281b3bdaa15543f0d662dbd216b3a0ffc0854","modified":1491013243808},{"_id":"public/2016/10/08/oc/夜间模式/index.html","hash":"d42e3e6eb4967a945cd5d13228fbb142bcca0f16","modified":1491013243808},{"_id":"public/2016/10/08/oc/屏幕横屏竖屏转换/index.html","hash":"84f5dc0cda5d856416589178387b7270c71ed626","modified":1491013243808},{"_id":"public/2016/10/08/oc/Core Animation 3D介绍(第1部分)/index.html","hash":"5e3cb395b762961359c2d19d45c8b5d8c2ec9d7a","modified":1491013243808},{"_id":"public/2016/10/08/system/欢迎使用CSDN-markdown编辑器/index.html","hash":"5561f607ef5c4980a4c9d4841fd433c74526ebb2","modified":1491013243808},{"_id":"public/2016/10/08/oc/数组 基本用法和排序/index.html","hash":"1d622c919afe7ea96e46fc986897f11a029a60c8","modified":1491013243808},{"_id":"public/2016/10/08/oc/Core Animation 3D介绍(第2部分)/index.html","hash":"02c4cef9503ee239319a07e2f76d41550035530c","modified":1491013243808},{"_id":"public/2016/10/08/oc/模态/index.html","hash":"bffa1f17137d824608cd8c317a9cfd097e06e57c","modified":1491013243808},{"_id":"public/2016/10/08/oc/汉字转拼音/index.html","hash":"91707c1926b87a25c1e88029ae1027ebc656c7ae","modified":1491013243808},{"_id":"public/2016/10/08/oc/获取当前时间/index.html","hash":"0e0a16b57b5012756cf726ed6a3a5ee3c3005e9e","modified":1491013243808},{"_id":"public/2016/10/08/oc/计算字符串的宽或者高/index.html","hash":"7ec51838f34a7d4e6fbda893376085caf174dd20","modified":1491013243808},{"_id":"public/2016/10/08/oc/让超出自己视图范围的子视图响应事件/index.html","hash":"a05d1fe1f91af0b277eec6a1d772cfbeb0929ec6","modified":1491013243808},{"_id":"public/2016/10/08/oc/进程和线程/index.html","hash":"4e9cad276766d0b57ebca0717514f160570b4e51","modified":1491013243808},{"_id":"public/2016/10/08/oc/通知/index.html","hash":"ab73e302c7e627937930094273b577ab8ee7048c","modified":1491013243808},{"_id":"public/2016/10/08/oc/通讯录/index.html","hash":"c823f0a55ba345aeb259d6161ade639afd09a9c3","modified":1491013243808},{"_id":"public/2016/10/08/oc/长按保存图片到本地/index.html","hash":"95e001e462c51a683871f8b5e7577edbff2bd1d5","modified":1491013243808},{"_id":"public/2016/10/08/oc/音乐播放器时间/index.html","hash":"53e769ee29585fa95585559616e16784e5ccfed9","modified":1491013243808},{"_id":"public/2016/10/08/oc/iOS开发系列--音频播放、录音、视频播放、拍照、视频录制/index.html","hash":"4d3b6c5ab607e0f924c404de61278a7b39befa3f","modified":1491013243808},{"_id":"public/2016/10/08/oc/APP间的调用/index.html","hash":"4a3b08b00ab9ab671711b5a2f312a663f834924c","modified":1491013243809},{"_id":"public/2016/10/08/oc/MPMoviePlayerViewController和MPMoviePlayerController/index.html","hash":"08d508168858e4dec0c1441a06d34fae63dbbdd8","modified":1491013243809},{"_id":"public/2016/10/08/oc/Masonry介绍与使用实践：快速上手Autolayout/index.html","hash":"01259a3a0bb8af9cda40e78699a38be343721e84","modified":1491013243809},{"_id":"public/2016/10/08/oc/MessageUI.framework发短信/index.html","hash":"fe79ff4246d2094cbf8661b8449baf5a8511de64","modified":1491013243809},{"_id":"public/2016/10/08/oc/NSHTTPCookieStorage/index.html","hash":"e13afbe2fc44e1db7b919db7bbde4f9f42f200b0","modified":1491013243809},{"_id":"public/2016/10/08/oc/NSString/index.html","hash":"2a9bff188e7203db7937e43df9070cbca40d9e42","modified":1491013243809},{"_id":"public/2016/10/08/oc/NSTimer/index.html","hash":"454e334e59bc1323e37952daef411e166fb993c2","modified":1491013243809},{"_id":"public/2016/10/08/oc/AVAudioPlayer/index.html","hash":"124a3d9af6e70f86283f2c3607480627fa4958a0","modified":1491013243809},{"_id":"public/2016/10/08/oc/NSUserDefaults/index.html","hash":"d4533171b58bfe3c604774d71bac449d986e3617","modified":1491013243809},{"_id":"public/2016/10/08/oc/OC 函数库方法/index.html","hash":"3a0ebe20dd1c6a760941ed512b53430cea31a95a","modified":1491013243809},{"_id":"public/2016/10/08/oc/UIAlertController/index.html","hash":"fdfafc9838d54ea2fe579f945ce2e907907ef2fd","modified":1491013243809},{"_id":"public/2016/10/08/oc/UIBarMetrics/index.html","hash":"bae1e0e72536a0b454a2bc47222a8fbb69a10ee1","modified":1491013243809},{"_id":"public/2016/10/08/oc/UIColor和TintColor/index.html","hash":"979fed2d97a3857dc243d125d66528fc132c43b8","modified":1491013243810},{"_id":"public/2016/10/08/oc/UIBlurEffect系统自带毛玻璃效果/index.html","hash":"c1716fb2aa06268d5728ba5697d053349ec2a241","modified":1491013243810},{"_id":"public/2016/10/08/oc/UIControlEvents/index.html","hash":"5cd65fa96e5c35032bb8ca157a85883a0a8f4771","modified":1491013243810},{"_id":"public/2016/10/08/system/删除Xcode插件/index.html","hash":"354c812a7e08808424b4cdbb55ea625b061c2569","modified":1491013243810},{"_id":"public/2016/10/08/oc/UIDatePicker/index.html","hash":"272a687c66445603e6acf275f752a127391b023c","modified":1491013243810},{"_id":"public/2016/10/08/oc/UIDevice/index.html","hash":"2e15bd69b714c6e1e20534e97710de9616af0ea4","modified":1491013243810},{"_id":"public/2016/10/08/oc/UIGestureRecognizerState/index.html","hash":"768a4105f54967d234803399e9ff1250d1883bfc","modified":1491013243810},{"_id":"public/2016/10/08/oc/UIImagePickerController从本地相册加载图片/index.html","hash":"541dcbec4ee0d5b924ed22ca01c9a2bc034f37c7","modified":1491013243810},{"_id":"public/2016/10/08/oc/UINavigationController/index.html","hash":"da95d90c3ce2e283e26a7d8be905a3590c51cf29","modified":1491013243810},{"_id":"public/2016/10/08/oc/UIPageControl/index.html","hash":"a720dcfe4878936ae171d733988da057860148ae","modified":1491013243810},{"_id":"public/2016/10/08/oc/UIProgressView进度条/index.html","hash":"f8bdcb04130e897587cb94ee1099f6d5b96ea190","modified":1491013243810},{"_id":"public/2016/10/08/oc/UISearchController/index.html","hash":"61aec89e19bc276fe4f0c1bddaf5333862e3912b","modified":1491013243810},{"_id":"public/2016/10/08/oc/UISlider滑条/index.html","hash":"b77672262125596edd95ae09b002b2bcb63ed1c3","modified":1491013243810},{"_id":"public/2016/10/08/oc/UISwitch 圆点按钮/index.html","hash":"d132442a9218650cef3e6dbb48f79e75d4874a77","modified":1491013243810},{"_id":"public/2016/10/08/oc/UITextField/index.html","hash":"79ac8a18103c8e15883fd8474dcaf0745041b293","modified":1491013243810},{"_id":"public/2016/10/08/oc/UITextView/index.html","hash":"ca010944a71005cfadbc7a6b28a9a41a69cd6579","modified":1491013243810},{"_id":"public/2016/10/08/oc/UIWebView/index.html","hash":"51f48055bc635f36863ee5a00176100bab4fb048","modified":1491013243810},{"_id":"public/2016/10/08/oc/UIWindow.h详解/index.html","hash":"e74d4ef3b0528d2c7891249b0cd80e02e5d4e587","modified":1491013243810},{"_id":"public/2016/10/08/oc/UIscrollView滚动时调用的方法/index.html","hash":"336793222b3f5769feee126f06c9b3b9b653a7c0","modified":1491013243811},{"_id":"public/2016/10/08/oc/UTF-8 和 GBK 的 NSString 相互转化的方法/index.html","hash":"a42b8daa21a012a38ac3d7f90528db4caef1b4eb","modified":1491013243811},{"_id":"public/2016/10/08/system/mac显示隐藏文件夹/index.html","hash":"0ad187ca499bb92fa0ef0b1ae48dc93a63a2738b","modified":1491013243811},{"_id":"public/2016/10/08/oc/assert/index.html","hash":"dd95ac14a489d30627a42a1cef4a19f7bc30a85f","modified":1491013243811},{"_id":"public/2016/10/08/oc/category extension/index.html","hash":"f21259553c45e42e61d888d324f22ca620dcdd61","modified":1491013243811},{"_id":"public/2016/10/08/oc/cell的几种style/index.html","hash":"f4c1570e8328fda9091879cb91277226d00e59f8","modified":1491013243811},{"_id":"public/2016/10/08/oc/double 型转换成 金额/index.html","hash":"6386fd5479d47c7e080a50f343e344dcec7fe68f","modified":1491013243811},{"_id":"public/2016/10/08/oc/iOS 使用纯代码或xib创建圆角视图/index.html","hash":"3e54a44ff9a8a56f6d9f06622b5464032837d809","modified":1491013243811},{"_id":"public/2016/10/08/oc/iOS 打电话/index.html","hash":"079b071e677e948ec01ea4106c8dc300bdf58b3f","modified":1491013243811},{"_id":"public/2016/10/08/oc/iOS 网络编程模式总结/index.html","hash":"a26a0c76b974e161b1ff2533b62a5160695962de","modified":1491013243811},{"_id":"public/2016/10/08/oc/iOS-使用AudioServices相关接口的连续震动/index.html","hash":"a941a75dfb76e0e91256ae421e495a3536eafe02","modified":1491013243811},{"_id":"public/2016/10/08/system/移动UIUX设计师和PM使用的原型工具/index.html","hash":"c70b9c7c566d3091574a65183aecfa080a38fdee","modified":1491013243811},{"_id":"public/2016/10/08/oc/iOS实现一个颜色渐变的弧形进度条/index.html","hash":"69185236bb9e88b739d6501eb191b471dd19d5de","modified":1491013243811},{"_id":"public/2016/10/08/oc/iOS开发拓展篇—CoreLocation简单介绍/index.html","hash":"f63565764690de8bd57293240f141d2673f5d307","modified":1491013243811},{"_id":"public/2016/10/08/oc/iOS之CF和OC之间类型转换/index.html","hash":"fae646dce61e8b51d55bdab441ed3b53b23524d7","modified":1491013243811},{"_id":"public/2016/10/08/oc/iOS开发系列--Swift语言/index.html","hash":"08dfda2de630222fdc6a17d18d0c1e87f4adee36","modified":1491013243811},{"_id":"public/2016/10/08/oc/按照时间排序/index.html","hash":"a7c7d3fcbef4dd926cbdefedc9e792186b041c8a","modified":1491013243812},{"_id":"public/2016/09/30/markdown/hello-world/index.html","hash":"281fd100e10ef563ff4658641406c91e6449b6d5","modified":1491013243812},{"_id":"public/2016/07/20/swift/swift类型/index.html","hash":"d10c8bffff86d1e76f72f8d94b7fd275079290d1","modified":1491013243812},{"_id":"public/2016/04/17/ruby/ruby常用命令/index.html","hash":"186d3140ea90118111b1e6cf3c3651cd398cdba8","modified":1491013243812},{"_id":"public/2016/04/14/ruby/ruby调试/index.html","hash":"17395667d50a767b7d8f477b9f186abebb7d3636","modified":1491013243812},{"_id":"public/2016/04/06/ruby/ActiveRecord(四)/index.html","hash":"8e6ded544ab3e3f0045e619c98239811f6fad5bf","modified":1491013243812},{"_id":"public/2016/04/05/ruby/ActiveRecord(三)/index.html","hash":"ff089413a7f920e46bb87b04b2c607a30bc3246f","modified":1491013243812},{"_id":"public/2016/04/04/ruby/ActiveRecord(二)/index.html","hash":"694964101ab6832eafd43f60f394441b805c1c5c","modified":1491013243812},{"_id":"public/2016/04/01/ruby/ActiveRecord(一)/index.html","hash":"405b7f0cfa4dc67521956f910ebdfbfbca252ace","modified":1491013243812},{"_id":"public/2016/03/17/ruby/ruby基本语法3/index.html","hash":"d3d7ff93bfc006dbaf501adfe547ee5a67bddf6e","modified":1491013243812},{"_id":"public/2016/03/14/ruby/ruby正则/index.html","hash":"25a78772a22ae67f6126ed8542ffbbe3fb42b9ba","modified":1491013243812},{"_id":"public/2016/03/13/ruby/ruby基本语法2/index.html","hash":"b9d337cbc22e5c605ed4a3c61506e2a7a9124d54","modified":1491013243812},{"_id":"public/2016/03/11/ruby/ruby基本语法1/index.html","hash":"0937907916a9a8af5e8b55d560c7b63685c8b8f4","modified":1491013243812},{"_id":"public/2015/10/08/oc/iOS之 CoreMotion 框架/index.html","hash":"926da9de32ea31a8e921918dcd63e7436b357be0","modified":1491013243812},{"_id":"public/2015/09/08/oc/推送通知/index.html","hash":"bb402411946e054d4bca4ce8163667ab98fec2f1","modified":1491013243812},{"_id":"public/archives/index.html","hash":"ff9b3c5c1158e42efe3103cec647fa591826ef64","modified":1491013243812},{"_id":"public/archives/page/2/index.html","hash":"4c69cbf3db4f5f0d99c32bdbec05a563d751e01f","modified":1491013243812},{"_id":"public/archives/page/3/index.html","hash":"41b787aee0569fbcd772ea5208fb772e953e7478","modified":1491013243812},{"_id":"public/archives/page/4/index.html","hash":"eb69bc54b12896f551139c09f240967038189e5c","modified":1491013243812},{"_id":"public/archives/page/5/index.html","hash":"41dea1567dbe222d044d2e4bee1e2c4e1dd65b66","modified":1491013243812},{"_id":"public/archives/page/6/index.html","hash":"c8cb3cd0c8fdcb3b4b811e75ce8d18c5da3a04d6","modified":1491013243812},{"_id":"public/archives/page/7/index.html","hash":"1b94abb7efaa827b804246ea424a7892f2d7ac1e","modified":1491013243812},{"_id":"public/archives/page/8/index.html","hash":"5482f11a28f3e881789b3d8820b5922eab720205","modified":1491013243812},{"_id":"public/archives/page/9/index.html","hash":"311705b38dcc148d20d42bc47ebffa38a84a9009","modified":1491013243812},{"_id":"public/archives/page/10/index.html","hash":"6bdb37dc4e7f28081f1caea36ef3a72234f82209","modified":1491013243812},{"_id":"public/archives/page/11/index.html","hash":"48f4b6862e2e8da42ea913abbf20690855a2a693","modified":1491013243812},{"_id":"public/archives/page/12/index.html","hash":"34450258ac6e1f5ae2161bc7a62c1724b221f9d6","modified":1491013243813},{"_id":"public/archives/page/13/index.html","hash":"f63d7f48baff3426062e6a163440ac611898758a","modified":1491013243813},{"_id":"public/archives/page/14/index.html","hash":"93dfc5b241e901e55cd372ea04781534487a3eb1","modified":1491013243813},{"_id":"public/archives/page/15/index.html","hash":"041818e5299f7559b0552a0ddaa6d450fdab9ba0","modified":1491013243813},{"_id":"public/archives/2016/index.html","hash":"c6fda9b6e2d5248e6f410e9bc33a06523b39bad2","modified":1491013243813},{"_id":"public/archives/2016/page/2/index.html","hash":"ec49b14c89c2ca0f4b1a3e07acede2955f854135","modified":1491013243813},{"_id":"public/archives/2016/page/3/index.html","hash":"25f9331324c96895b11c7fc75a9c48e2965ea358","modified":1491013243813},{"_id":"public/archives/2016/page/4/index.html","hash":"95309caaa78a93adc64d6d1dcb438d3f6fb36fad","modified":1491013243813},{"_id":"public/archives/2016/page/5/index.html","hash":"256b68c3cd5f2c38cb5c33c5b452e73741606e17","modified":1491013243813},{"_id":"public/archives/2016/page/6/index.html","hash":"b0cd4f65dbb806e10367b62fcb478d8719dad29f","modified":1491013243813},{"_id":"public/archives/2016/page/7/index.html","hash":"8fca4849d7fbc10cfbf8c93959a8fb093276a947","modified":1491013243813},{"_id":"public/archives/2016/page/8/index.html","hash":"6bfa6119c82f8884c4b0b48c84de794e159e2915","modified":1491013243813},{"_id":"public/archives/2016/page/9/index.html","hash":"97636a53d69759726416c6eed236a246a1593ef3","modified":1491013243813},{"_id":"public/archives/2016/page/10/index.html","hash":"e630436ac779ece1fa03a8aadf5f0387625a01ed","modified":1491013243813},{"_id":"public/archives/2016/page/11/index.html","hash":"d59453e542506a3df78c3d2a80f643f8037d0851","modified":1491013243813},{"_id":"public/archives/2016/page/12/index.html","hash":"c4aa836dd777fe0f68f04fea7345f493f0cd1d0f","modified":1491013243813},{"_id":"public/archives/2016/page/13/index.html","hash":"007d39570f8b326243639c1f98826bc07e09c2ea","modified":1491013243813},{"_id":"public/archives/2016/page/14/index.html","hash":"448ff4d8bc47a0eeedf7d138d7fc39fd2f8d0729","modified":1491013243813},{"_id":"public/archives/2016/page/15/index.html","hash":"5e3e9e191574ee556578683b4a8a9a36a1bb294f","modified":1491013243813},{"_id":"public/archives/2016/03/index.html","hash":"34605d4e0bf6099db6f0b8f86e0a2acb613bd1e2","modified":1491013243813},{"_id":"public/archives/2016/04/index.html","hash":"d00e4e4fa9411f2a77285ba81f18166756cf505b","modified":1491013243813},{"_id":"public/archives/2016/10/index.html","hash":"a1d9142bc5afdf8662e33114ea4dfa0d44ec5c5d","modified":1491013243814},{"_id":"public/archives/2016/10/page/2/index.html","hash":"c5e55da1e4cc2c7ac5ee7b8000cd9dc6dbf85b16","modified":1491013243814},{"_id":"public/archives/2016/10/page/3/index.html","hash":"10bfd0b4606fa090a2982fddb31fc3c670bd09dc","modified":1491013243814},{"_id":"public/archives/2016/10/page/4/index.html","hash":"537c19fb8c2163724c00205548a320d724e429a6","modified":1491013243814},{"_id":"public/archives/2016/10/page/5/index.html","hash":"b8500703e4da4894b2024063b5715183eb9752ec","modified":1491013243814},{"_id":"public/archives/2016/10/page/6/index.html","hash":"addeaa07d962d5a861727f007a222a2205d68b65","modified":1491013243814},{"_id":"public/archives/2016/10/page/7/index.html","hash":"1641d951c87008bc95ecb1d593ad9995bd79947c","modified":1491013243814},{"_id":"public/archives/2016/10/page/8/index.html","hash":"0139c4c22198a0789fb74c1cdf74522681982ab9","modified":1491013243814},{"_id":"public/archives/2016/10/page/9/index.html","hash":"6763e833aaea40e6f349840b934adb051f0d9b98","modified":1491013243814},{"_id":"public/archives/2016/10/page/10/index.html","hash":"4943da5748362df0c86a46f44ed2cafe57b7cf13","modified":1491013243814},{"_id":"public/archives/2016/10/page/11/index.html","hash":"afcf4c6f48ef73d0b954c1b538cf51d4ab2be35d","modified":1491013243814},{"_id":"public/archives/2016/11/index.html","hash":"e7963f601d6f00c2e23a385cc210a042aaeb8f65","modified":1491013243814},{"_id":"public/archives/2016/11/page/2/index.html","hash":"c5543f7c4054dd9c6a998c298d82dbd16e9eccc2","modified":1491013243814},{"_id":"public/archives/2017/index.html","hash":"ba08781cab2b05388c609400461d5a944b9b4784","modified":1491013243814},{"_id":"public/categories/objective-c/index.html","hash":"7ed7d4dc79f2168f1212baf9dc07ef003a032ef3","modified":1491013243814},{"_id":"public/categories/objective-c/page/2/index.html","hash":"051d00da2db34c782a6b5bd8ec8061d0e61fda1f","modified":1491013243814},{"_id":"public/categories/objective-c/page/3/index.html","hash":"3140b160bcd0ffef56f65f94de50ca7ad6def180","modified":1491013243814},{"_id":"public/categories/objective-c/page/4/index.html","hash":"edadada23d502e2c818030295b50df9eb73f92cf","modified":1491013243814},{"_id":"public/categories/objective-c/page/5/index.html","hash":"ba7cd54c5f112e4e141ec2e1c0d67b5b1001b9ab","modified":1491013243814},{"_id":"public/categories/objective-c/page/6/index.html","hash":"5648b5c31754f6f0c1bffb187eb9dac711e41a49","modified":1491013243814},{"_id":"public/categories/objective-c/page/7/index.html","hash":"6724467727e77f3f9352f328924108cfcb286636","modified":1491013243814},{"_id":"public/categories/objective-c/page/8/index.html","hash":"d6ace0366bb0d0186136e2ac844dd423b407999f","modified":1491013243814},{"_id":"public/categories/objective-c/page/9/index.html","hash":"6f7040d243291b370a258998f0ba8b3654351cbb","modified":1491013243815},{"_id":"public/categories/php/index.html","hash":"162a49a7c0e0de448cd69832cd3fbde0f2801486","modified":1491013243815},{"_id":"public/categories/ruby/index.html","hash":"ee7395903cc455a8d25297c2900c35fb8dae7da2","modified":1491013243815},{"_id":"public/categories/ruby/page/2/index.html","hash":"a41e826b0bf858094aede3dbc36aa10ff309fdf1","modified":1491013243815},{"_id":"public/categories/linux/index.html","hash":"2583564dd46f9794034d351d72a5b29c548e26e2","modified":1491013243815},{"_id":"public/index.html","hash":"8f4f07afc0231926c620eec87b47d4d585dcc509","modified":1491013243815},{"_id":"public/page/2/index.html","hash":"054cf150e1bd49e662e24f68aab00b0653618084","modified":1491013243815},{"_id":"public/page/3/index.html","hash":"8a27b20d2dff02bae59fd6b6c9950f270168c5a9","modified":1491013243815},{"_id":"public/page/4/index.html","hash":"fa5d08385043aa6c2ea95a9ee04dfb0244b9ca87","modified":1491013243815},{"_id":"public/page/5/index.html","hash":"2b4fe335d016f22de35f421c9312b8e6929416fe","modified":1491013243815},{"_id":"public/page/6/index.html","hash":"acd8e260a0af1f638e077d1985ab5260af556648","modified":1491013243815},{"_id":"public/page/7/index.html","hash":"3b8529dd7cb1452b5d75e35d24df168a5eba5c91","modified":1491013243815},{"_id":"public/page/8/index.html","hash":"96ce74b69c64ba795242b2806a1546891417d8c6","modified":1491013243815},{"_id":"public/page/9/index.html","hash":"1e88ec77d0c62d95579c8baed8563b1a89ebe2b6","modified":1491013243815},{"_id":"public/page/10/index.html","hash":"b286b895f9f6ae39859f712a4beedcca668115b9","modified":1491013243815},{"_id":"public/page/11/index.html","hash":"61ea6c3091b5dc82c1c0901252503be7eb943cef","modified":1491013243815},{"_id":"public/page/12/index.html","hash":"8750aa077780d3c4e519791949786d976b918b94","modified":1491013243815},{"_id":"public/page/13/index.html","hash":"dc424672e451f884558b83d38f5679f2bfdb7b00","modified":1491013243815},{"_id":"public/page/14/index.html","hash":"c871e12f87cf4b5efc3cffb7733f40728f651379","modified":1491013243816},{"_id":"public/page/15/index.html","hash":"343ce3a429e3376756978abd144f07c3ba28429d","modified":1491013243816},{"_id":"public/page/16/index.html","hash":"e773976cbe8129f57c3bda65746c138bbf1f87b6","modified":1491013243816},{"_id":"public/tags/ruby/index.html","hash":"18f80ea599eca359c5a8a7f8f236f320e9c346ce","modified":1491013243816},{"_id":"public/tags/ruby/page/2/index.html","hash":"026c784a82518425789ea097857edf6bf4228356","modified":1491013243816},{"_id":"public/tags/rails/index.html","hash":"e31f2f46e1fbdc78f769611960b93c868af99446","modified":1491013243816},{"_id":"public/gifs/1.gif","hash":"8d1cb3464a5dafea531315829eace519ceed1659","modified":1491013243834},{"_id":"public/images/1.png","hash":"9eccb833079203c9879d21dab04fe1766c623797","modified":1491013243834},{"_id":"public/images/2.png","hash":"eabc211a16f897452174663e465b36b79cd38efe","modified":1491013243835},{"_id":"public/images/3.png","hash":"b1dd59f0e8c4ab3cc8034b8f8a502d268c818d29","modified":1491013243835},{"_id":"public/images/4.png","hash":"05a1cfa6bd68fec27e405f4278e09a4e32e213ca","modified":1491013243835},{"_id":"public/images/5.png","hash":"28459d75e302b2b955c4fd9f9a6968a686ebaa6d","modified":1491013243835},{"_id":"public/images/7.png","hash":"fff223f231959b3c1ff8920d62ae0537aa3f623e","modified":1491013243835},{"_id":"public/images/8.png","hash":"317b48be2f0071526232d8003557f9dbb5523063","modified":1491013243835},{"_id":"public/favicon.ico","hash":"d0f7b201b55fa0e903c449de1c69a505edd008e1","modified":1491013243835},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1491013243835},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1491013243835},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1491013243835},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1491013243835},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1491013243835},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1491013243835},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1491013243835},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1491013243835},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1491013243835},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1491013243835},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1491013243835},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1491013243835},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1491013243835},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1491013243836},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1491013243836},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1491013243836},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1491013243836},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1491013243836},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1491013243836},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1491013243836},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1491013243836},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1491013243836},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1491013243836},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1491013243836},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1491013243836},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1491013243836},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1491013243836},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1491013244872},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1491013244878},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1491013244904},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1491013244904},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1491013244904},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1491013244904},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1491013244904},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1491013244904},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1491013244905},{"_id":"public/css/style.css","hash":"ccd14739500611c93203f386908b364a6a2d0801","modified":1491013244905},{"_id":"public/images/21.png","hash":"477db05e78ab5d4c2f5b124358118500d3774b39","modified":1491013244905},{"_id":"public/images/22.png","hash":"ab6c4ab0e12f7ad3824d712ece4936aed51d9c3c","modified":1491013244905},{"_id":"public/images/23.png","hash":"294e5ddb530761c9643d33d37c61c8a74b53b5a2","modified":1491013244905},{"_id":"public/images/24.png","hash":"e098c07036ae50349862bc8f87e6d0a73b3274e3","modified":1491013244905},{"_id":"public/images/25.png","hash":"e07ee2306a0f7fde34b2687a782402033703642b","modified":1491013244905},{"_id":"public/images/26.png","hash":"e347a2619fa73d65fc923a3101ec0633fb6fee82","modified":1491013244905},{"_id":"public/images/27.png","hash":"757f706f74c2a5a809ba3feb935591dbda04690b","modified":1491013244905},{"_id":"public/images/28.png","hash":"3f0d4c2867bf686a7b0b2d95c968bc8b86f25cc8","modified":1491013244905},{"_id":"public/images/29.png","hash":"117421b3fa71c28e5734007ad076e0ba95133546","modified":1491013244905},{"_id":"public/images/31.png","hash":"6825da5e6cd42cc625f8792ec3bd69338564c412","modified":1491013244906},{"_id":"public/images/33.png","hash":"589056bc465c2d954be8a934258c10d18b70cd4c","modified":1491013244906},{"_id":"public/images/6.png","hash":"12963305c7ac24e6ba81cb174b8d2b4d5294dc13","modified":1491013244907},{"_id":"public/images/19.png","hash":"45d73d90677896e6e5ff31e5a14e7363803fdc4c","modified":1491013244926},{"_id":"public/images/20.png","hash":"3b43e0cd2d8cdc7f2d1965b45500f09e7d9bfa22","modified":1491013244926},{"_id":"public/images/30.png","hash":"b641c886a3d9bb4452585f0392e58c5bf7baf6ed","modified":1491013244927},{"_id":"public/images/32.png","hash":"318a1b896ba1192efca9cbde43badeb94e8b1b9a","modified":1491013244929},{"_id":"public/images/34.png","hash":"fedaf28288bfc824e80c32c37a21b1e3784b1101","modified":1491013244930},{"_id":"public/images/46.png","hash":"f343f74301e5729c55b4b1a45d09e32f539876e4","modified":1491013244930},{"_id":"public/images/47.png","hash":"6915643ed6db708d5d22469a19b5a6d1834ce194","modified":1491013244930},{"_id":"public/img/avatar.png","hash":"e11c69fdb75c3a89f5c3c7b47ea1182f785b7c82","modified":1491013244931},{"_id":"public/images/40.png","hash":"1ce48284e0cd958a4dd2453eaf0a16d4ffa369bb","modified":1491013244946},{"_id":"public/images/45.png","hash":"49876316c64d14ba313b4898d0a4ef035204a83b","modified":1491013244946},{"_id":"public/images/48.png","hash":"45f69a18deaa4d97158c60a08ad772e609d44160","modified":1491013244946},{"_id":"public/images/49.png","hash":"912801a9eeb587337f933e96eac85e089dbf2b25","modified":1491013244946},{"_id":"public/images/35.png","hash":"e8001c8d3d7dbcc77a90cdde46ea340cb666e9c8","modified":1491013244962},{"_id":"public/images/36.png","hash":"4025f507ccaac0a32227c7ff2b1905c867929212","modified":1491013244962},{"_id":"public/images/10.png","hash":"b6ec6cc9580f32efa34a6bd951b77c9aec0732c0","modified":1491013244984},{"_id":"public/images/12.png","hash":"abb6f77b6f96e85b575542a37062bbe13ac36fa7","modified":1491013244984},{"_id":"public/images/17.png","hash":"79d94a0604052fb1254cb62a807d6c6b4c00a750","modified":1491013244985},{"_id":"public/images/37.png","hash":"cfd1df4d2e8d2f8c35d17bb84bac219dd22f0248","modified":1491013244986},{"_id":"public/images/38.png","hash":"6945fe060f48b823bdea310a417f096334706204","modified":1491013244987},{"_id":"public/images/50.png","hash":"54486bc8d44be6c476f3db8725753645c630ed85","modified":1491013244987},{"_id":"public/images/11.png","hash":"620a50e9a40aee54cba867a1cae6d06df559df81","modified":1491013245029},{"_id":"public/images/39.png","hash":"ee614b46d8e7fddfe5e73d7bcd535027ab576f76","modified":1491013245030},{"_id":"public/images/14.png","hash":"482cf118a498435c23e33bf118d0850820392c46","modified":1491013245032},{"_id":"public/apple-touch-icon.png","hash":"3b24fb905f93674138d21210b5473f1aed494d10","modified":1491013245033},{"_id":"public/images/16.png","hash":"7d3647d82c7fd588d5610614c0222b047c75bd67","modified":1491013245033},{"_id":"public/images/13.png","hash":"d57053b7ba4118f6e8c7b4c4c8cdff4501817047","modified":1491013245057},{"_id":"public/images/18.png","hash":"bcbc00b073da509961c118921d78fda0762eca1c","modified":1491013245057},{"_id":"public/images/42.png","hash":"558c59c815f1c05b359334333dd235b9c1aa1ef6","modified":1491013245057},{"_id":"public/images/43.png","hash":"c0ec359f0cc937e5f53820b33b8e3eb4b9854208","modified":1491013245058},{"_id":"public/images/15.png","hash":"237000be2343dbea99db4d933104e6508bbaeabf","modified":1491013245058},{"_id":"public/images/41.png","hash":"73de2bfd30fb5303fb589b3561616e4d33656915","modified":1491013245091},{"_id":"public/images/9.png","hash":"b71c7bde4c412c2791641fe15f58dc4d0e116a3b","modified":1491013245103},{"_id":"public/images/44.png","hash":"7d7884a14eb861a8ea5191ddd904326ebeb407be","modified":1491013245105},{"_id":"themes/yelee/.git/FETCH_HEAD","hash":"e916aa588361a657c380988cbf17a455263b1825","modified":1491014626000},{"_id":"themes/yelee/.git/ORIG_HEAD","hash":"90d1524cfb6be4f69288b5fc30341e44f06e8427","modified":1491014626000},{"_id":"themes/yelee/.git/objects/14/8122a3b9804298b2f7608c76539fb9e7a7fd7e","hash":"4cce3f237a573db1cbbbbe745a0d4d11f8dc0d1c","modified":1491014626000},{"_id":"themes/yelee/.git/objects/6f/2891e5347381677c2825a210b830dfea415298","hash":"1a0757ecedc6a7b56121f6a09455ce6608b89742","modified":1491014626000},{"_id":"themes/yelee/.git/objects/15/f7a854f4363c7bcaf66f6e84ad7839775dbc86","hash":"6eabe351de5ee3ffa654a3c5d345fc89edd86d75","modified":1491014626000},{"_id":"themes/yelee/.git/objects/c1/f8181f890c63a72c22fd37988227a2ff0b2b8d","hash":"cc23446c682a41f3b1c21cf5d4157897c5ca8ced","modified":1491014626000},{"_id":"themes/yelee/.git/objects/c8/5f338d3349848e53daf9eaac916f4bd85adc2d","hash":"3081cb1bded7713288e4a3036ff9cc0349b8cd6f","modified":1491014626000},{"_id":"themes/yelee/.git/objects/e3/cc5a12d49fe56669bb480db7f908884a037712","hash":"372fae36dea911225479b22347ff956c78ced261","modified":1491014626000},{"_id":"themes/yelee/.git/objects/e7/0d146029b4ba366faebf73f44d98fcff1bd3a9","hash":"88cd16c3d2650ae8d4b36951ab4cab33246c1a53","modified":1491014626000},{"_id":"themes/yelee/.git/refs/remotes/origin/master","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1491014626000},{"_id":"themes/yelee/.git/logs/refs/remotes/origin/master","hash":"9e65284765cd28f77d5b8514f3e5335fca2a9ae5","modified":1491014626000},{"_id":"themes/yelee/.git/objects/34/6eafa43f45c459a514c294e0cc5f1d17e53f40","hash":"52cfca4a01a9303d93523414c2363e63f22f9c12","modified":1491025754000},{"_id":"themes/yelee/.git/objects/7f/f9e5579a41421cedc15c8d1aaddb50eb9fe7e5","hash":"a46780c2529af7ad9f03dcd9c204b0249d163718","modified":1491026539000},{"_id":"themes/yelee/source/favicon.png","hash":"aef264993366c38c95b3669c6d6d1f409bb0105c","modified":1491026599000}],"Category":[{"name":"html","_id":"cj0yms95u000521xw4qk3e8gj"},{"name":"java","_id":"cj0yms966000d21xwoks97xd6"},{"name":"markdown","_id":"cj0yms969000h21xw7c4mim9v"},{"name":"objective-c","_id":"cj0yms96r000l21xwl36a8zfs"},{"name":"ios端效果","_id":"cj0yms996004h21xwi2xftzny"},{"name":"php","_id":"cj0yms99j005621xwarx25w66"},{"name":"ruby","_id":"cj0yms99y006421xwhy1nf90p"},{"name":"Security","_id":"cj0yms9ak008221xwnntxgli3"},{"name":"linux","_id":"cj0yms9am008c21xwjc6tx5ws"},{"name":"swift","_id":"cj0yms9aq008j21xwd7rxi3jk"},{"name":"sublime text","_id":"cj0yms9b6009n21xw7dgobg42"}],"Data":[],"Page":[{"title":"about","date":"2016-10-10T09:27:10.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-10-10 17:27:10\n---\n","updated":"2016-10-10T09:27:10.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj0yms943000021xwwoc2xijj","content":"","excerpt":"","more":""},{"title":"category","date":"2016-10-08T03:17:50.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: category\ndate: 2016-10-08 11:17:50\n---\n","updated":"2016-10-08T04:47:25.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj0yms946000121xwx11uxtw0","content":"","excerpt":"","more":""}],"Post":[{"title":"docker","date":"2016-11-15T05:52:31.000Z","_content":"docker\n<!-- more -->\ndocker是一个容器引擎，提供了一套完整的容器解决方案\n基于linux容器技术，操作系统级别的虚拟化，依赖于linux内核的Namespace和Cgroups\n\n[Docker官网](http://www.docker.com)\n<h3>安装docker</h3>\n安装\n```markdown\n# apt-get install curl\n\n# curl -sSL https://get.docker.com/ | sh\n\n# usermod -aG docker deploy\n\n```\n查看信息\n```markdown\n\n# docker version\n\n# ps axf |grep docker\n```\n\n<h3>docker命令</h3>\n停止\n```markdown\nservice docker stop\n```\n启动\n```markdown\nservice docker start\n```\n运行容器\n```markdown\ndocker run \n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/docker/docker.md","raw":"---\ntitle: docker\ndate: 2016-11-15 13:52:31\ncategories:\n---\ndocker\n<!-- more -->\ndocker是一个容器引擎，提供了一套完整的容器解决方案\n基于linux容器技术，操作系统级别的虚拟化，依赖于linux内核的Namespace和Cgroups\n\n[Docker官网](http://www.docker.com)\n<h3>安装docker</h3>\n安装\n```markdown\n# apt-get install curl\n\n# curl -sSL https://get.docker.com/ | sh\n\n# usermod -aG docker deploy\n\n```\n查看信息\n```markdown\n\n# docker version\n\n# ps axf |grep docker\n```\n\n<h3>docker命令</h3>\n停止\n```markdown\nservice docker stop\n```\n启动\n```markdown\nservice docker start\n```\n运行容器\n```markdown\ndocker run \n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"docker/docker","published":1,"updated":"2016-11-16T03:27:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms95m000221xwvb9v2xsg","content":"<p>docker<br><a id=\"more\"></a><br>docker是一个容器引擎，提供了一套完整的容器解决方案<br>基于linux容器技术，操作系统级别的虚拟化，依赖于linux内核的Namespace和Cgroups</p>\n<p><a href=\"http://www.docker.com\" target=\"_blank\" rel=\"external\">Docker官网</a></p>\n<p></p><h3>安装docker</h3><br>安装<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># apt-get install curl</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\"># curl -sSL https://get.docker.com/ | sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\"># usermod -aG docker deploy</span></div></pre></td></tr></table></figure><p></p>\n<p>查看信息<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"section\"># docker version</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\"># ps axf |grep docker</span></div></pre></td></tr></table></figure></p>\n<p></p><h3>docker命令</h3><br>停止<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service docker stop</div></pre></td></tr></table></figure><p></p>\n<p>启动<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service docker start</div></pre></td></tr></table></figure></p>\n<p>运行容器<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>docker<br>","more":"<br>docker是一个容器引擎，提供了一套完整的容器解决方案<br>基于linux容器技术，操作系统级别的虚拟化，依赖于linux内核的Namespace和Cgroups</p>\n<p><a href=\"http://www.docker.com\">Docker官网</a></p>\n<p><h3>安装docker</h3><br>安装<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># apt-get install curl</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\"># curl -sSL https://get.docker.com/ | sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\"># usermod -aG docker deploy</span></div></pre></td></tr></table></figure></p>\n<p>查看信息<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"section\"># docker version</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\"># ps axf |grep docker</span></div></pre></td></tr></table></figure></p>\n<p><h3>docker命令</h3><br>停止<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service docker stop</div></pre></td></tr></table></figure></p>\n<p>启动<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service docker start</div></pre></td></tr></table></figure></p>\n<p>运行容器<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"bootstrap","date":"2016-11-14T08:28:22.000Z","_content":"bootstrap\n<!-- more -->\n[bootstrap官网](http://getbootstrap.com/)\n[bootstrap中文文档](http://v3.bootcss.com/)\n\n\n[bootswatch官网](http://bootswatch.com)\n\ngemfile中加\n```markdown\ngem 'therubyracer'\ngem 'bootstrap-sass'\ngem 'bootswatch-rails'\n```\n\napplication.js加\n```markdown\n//= require bootstrap\n```\n改application.css为application.css.scss，内容改为\n```markdown\n// 示例：使用bootswatch免费主题： 'Cerulean' bootswatch\n// 首先导入变量\n@import \"bootswatch/cerulean/variables\";\n\n// 导入bootstrap\n@import \"bootstrap\";\n\n// 最后导入需要的bootswatch主题\n@import \"bootswatch/cerulean/bootswatch\";\n```\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/html/bootstrap.md","raw":"---\ntitle: bootstrap\ndate: 2016-11-14 16:28:22\ncategories: html\n---\nbootstrap\n<!-- more -->\n[bootstrap官网](http://getbootstrap.com/)\n[bootstrap中文文档](http://v3.bootcss.com/)\n\n\n[bootswatch官网](http://bootswatch.com)\n\ngemfile中加\n```markdown\ngem 'therubyracer'\ngem 'bootstrap-sass'\ngem 'bootswatch-rails'\n```\n\napplication.js加\n```markdown\n//= require bootstrap\n```\n改application.css为application.css.scss，内容改为\n```markdown\n// 示例：使用bootswatch免费主题： 'Cerulean' bootswatch\n// 首先导入变量\n@import \"bootswatch/cerulean/variables\";\n\n// 导入bootstrap\n@import \"bootstrap\";\n\n// 最后导入需要的bootswatch主题\n@import \"bootswatch/cerulean/bootswatch\";\n```\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"html/bootstrap","published":1,"updated":"2016-11-15T02:55:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms95r000321xw61s80edz","content":"<p>bootstrap<br><a id=\"more\"></a><br><a href=\"http://getbootstrap.com/\" target=\"_blank\" rel=\"external\">bootstrap官网</a><br><a href=\"http://v3.bootcss.com/\" target=\"_blank\" rel=\"external\">bootstrap中文文档</a></p>\n<p><a href=\"http://bootswatch.com\" target=\"_blank\" rel=\"external\">bootswatch官网</a></p>\n<p>gemfile中加<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem 'therubyracer'</div><div class=\"line\">gem 'bootstrap-sass'</div><div class=\"line\">gem 'bootswatch-rails'</div></pre></td></tr></table></figure></p>\n<p>application.js加<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">//= require bootstrap</div></pre></td></tr></table></figure></p>\n<p>改application.css为application.css.scss，内容改为<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 示例：使用bootswatch免费主题： 'Cerulean' bootswatch</div><div class=\"line\">// 首先导入变量</div><div class=\"line\">@import \"bootswatch/cerulean/variables\";</div><div class=\"line\"></div><div class=\"line\">// 导入bootstrap</div><div class=\"line\">@import \"bootstrap\";</div><div class=\"line\"></div><div class=\"line\">// 最后导入需要的bootswatch主题</div><div class=\"line\">@import \"bootswatch/cerulean/bootswatch\";</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>bootstrap<br>","more":"<br><a href=\"http://getbootstrap.com/\">bootstrap官网</a><br><a href=\"http://v3.bootcss.com/\">bootstrap中文文档</a></p>\n<p><a href=\"http://bootswatch.com\">bootswatch官网</a></p>\n<p>gemfile中加<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem 'therubyracer'</div><div class=\"line\">gem 'bootstrap-sass'</div><div class=\"line\">gem 'bootswatch-rails'</div></pre></td></tr></table></figure></p>\n<p>application.js加<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">//= require bootstrap</div></pre></td></tr></table></figure></p>\n<p>改application.css为application.css.scss，内容改为<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 示例：使用bootswatch免费主题： 'Cerulean' bootswatch</div><div class=\"line\">// 首先导入变量</div><div class=\"line\">@import \"bootswatch/cerulean/variables\";</div><div class=\"line\"></div><div class=\"line\">// 导入bootstrap</div><div class=\"line\">@import \"bootstrap\";</div><div class=\"line\"></div><div class=\"line\">// 最后导入需要的bootswatch主题</div><div class=\"line\">@import \"bootswatch/cerulean/bootswatch\";</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"html字符实体","date":"2016-10-12T06:38:49.000Z","_content":"html中的字符实体对应的实体名称和对应的实体编号\n<!-- more -->\n\n|显示结果\t|描述     |实体名称           |实体编号     |\n|:-----:|:------:|:----------------:|:----------:|\n|       |空格     |&amp;nbsp;        |&amp;\\#160; |\n|<\t    |小于号   |&amp;lt;\t        |&amp;\\#60; |\n|>\t    |大于号   |&amp;gt;\t        |&amp;\\#62; |\n|&\t    |和号\t |&amp;amp;         |&amp;\\#38; |\n|\"\t    |引号\t |&amp;quot;        |&amp;\\#34; |\n|'      |撇号     |&amp;apos;(IE不支持)|&amp;\\#39;|\n|￠    \t|分\t     |&amp;cent;\t    |&amp;\\#162; |\n|£   \t|镑\t     |&amp;pound;\t    |&amp;\\#163; |\n|¥\t    |日圆\t |&amp;yen;  \t    |&amp;\\#165; |\n|€\t    |欧元     |&amp;euro;\t    |&amp;\\#8364;|\n|§\t    |小节     |&amp;sect;\t    |&amp;\\#167; |\n|©\t    |版权     |&amp;copy;\t    |&amp;\\#169; |\n|®\t    |注册商标\t |&amp;reg;\t        |&amp;\\#174; |\n|™\t    |商标     |&amp;trade;\t    |&amp;\\#8482;|\n|×\t    |乘号     |&amp;times;\t    |&amp;\\#215; |\n|÷\t    |除号     |&amp;divide;\t    |&amp;\\#247; |\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/html/html字符实体.md","raw":"---\ntitle: html字符实体\ndate: 2016-10-12 14:38:49\ncategories: html\n---\nhtml中的字符实体对应的实体名称和对应的实体编号\n<!-- more -->\n\n|显示结果\t|描述     |实体名称           |实体编号     |\n|:-----:|:------:|:----------------:|:----------:|\n|       |空格     |&amp;nbsp;        |&amp;\\#160; |\n|<\t    |小于号   |&amp;lt;\t        |&amp;\\#60; |\n|>\t    |大于号   |&amp;gt;\t        |&amp;\\#62; |\n|&\t    |和号\t |&amp;amp;         |&amp;\\#38; |\n|\"\t    |引号\t |&amp;quot;        |&amp;\\#34; |\n|'      |撇号     |&amp;apos;(IE不支持)|&amp;\\#39;|\n|￠    \t|分\t     |&amp;cent;\t    |&amp;\\#162; |\n|£   \t|镑\t     |&amp;pound;\t    |&amp;\\#163; |\n|¥\t    |日圆\t |&amp;yen;  \t    |&amp;\\#165; |\n|€\t    |欧元     |&amp;euro;\t    |&amp;\\#8364;|\n|§\t    |小节     |&amp;sect;\t    |&amp;\\#167; |\n|©\t    |版权     |&amp;copy;\t    |&amp;\\#169; |\n|®\t    |注册商标\t |&amp;reg;\t        |&amp;\\#174; |\n|™\t    |商标     |&amp;trade;\t    |&amp;\\#8482;|\n|×\t    |乘号     |&amp;times;\t    |&amp;\\#215; |\n|÷\t    |除号     |&amp;divide;\t    |&amp;\\#247; |\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"html/html字符实体","published":1,"updated":"2016-10-12T08:50:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms95t000421xwow5xdi94","content":"<p>html中的字符实体对应的实体名称和对应的实体编号<br><a id=\"more\"></a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">显示结果</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">实体名称</th>\n<th style=\"text-align:center\">实体编号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">空格</td>\n<td style=\"text-align:center\">&amp;nbsp;</td>\n<td style=\"text-align:center\">&amp;#160;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\">小于号</td>\n<td style=\"text-align:center\">&amp;lt;</td>\n<td style=\"text-align:center\">&amp;#60;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\">大于号</td>\n<td style=\"text-align:center\">&amp;gt;</td>\n<td style=\"text-align:center\">&amp;#62;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&amp;</td>\n<td style=\"text-align:center\">和号</td>\n<td style=\"text-align:center\">&amp;amp;</td>\n<td style=\"text-align:center\">&amp;#38;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">“</td>\n<td style=\"text-align:center\">引号</td>\n<td style=\"text-align:center\">&amp;quot;</td>\n<td style=\"text-align:center\">&amp;#34;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘</td>\n<td style=\"text-align:center\">撇号</td>\n<td style=\"text-align:center\">&amp;apos;(IE不支持)</td>\n<td style=\"text-align:center\">&amp;#39;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￠</td>\n<td style=\"text-align:center\">分</td>\n<td style=\"text-align:center\">&amp;cent;</td>\n<td style=\"text-align:center\">&amp;#162;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">£</td>\n<td style=\"text-align:center\">镑</td>\n<td style=\"text-align:center\">&amp;pound;</td>\n<td style=\"text-align:center\">&amp;#163;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">¥</td>\n<td style=\"text-align:center\">日圆</td>\n<td style=\"text-align:center\">&amp;yen;</td>\n<td style=\"text-align:center\">&amp;#165;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">€</td>\n<td style=\"text-align:center\">欧元</td>\n<td style=\"text-align:center\">&amp;euro;</td>\n<td style=\"text-align:center\">&amp;#8364;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">§</td>\n<td style=\"text-align:center\">小节</td>\n<td style=\"text-align:center\">&amp;sect;</td>\n<td style=\"text-align:center\">&amp;#167;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">©</td>\n<td style=\"text-align:center\">版权</td>\n<td style=\"text-align:center\">&amp;copy;</td>\n<td style=\"text-align:center\">&amp;#169;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">®</td>\n<td style=\"text-align:center\">注册商标</td>\n<td style=\"text-align:center\">&amp;reg;</td>\n<td style=\"text-align:center\">&amp;#174;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">™</td>\n<td style=\"text-align:center\">商标</td>\n<td style=\"text-align:center\">&amp;trade;</td>\n<td style=\"text-align:center\">&amp;#8482;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">乘号</td>\n<td style=\"text-align:center\">&amp;times;</td>\n<td style=\"text-align:center\">&amp;#215;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">÷</td>\n<td style=\"text-align:center\">除号</td>\n<td style=\"text-align:center\">&amp;divide;</td>\n<td style=\"text-align:center\">&amp;#247;</td>\n</tr>\n</tbody>\n</table>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>html中的字符实体对应的实体名称和对应的实体编号<br>","more":"</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">显示结果</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">实体名称</th>\n<th style=\"text-align:center\">实体编号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">空格</td>\n<td style=\"text-align:center\">&amp;nbsp;</td>\n<td style=\"text-align:center\">&amp;#160;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\">小于号</td>\n<td style=\"text-align:center\">&amp;lt;</td>\n<td style=\"text-align:center\">&amp;#60;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\">大于号</td>\n<td style=\"text-align:center\">&amp;gt;</td>\n<td style=\"text-align:center\">&amp;#62;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&amp;</td>\n<td style=\"text-align:center\">和号</td>\n<td style=\"text-align:center\">&amp;amp;</td>\n<td style=\"text-align:center\">&amp;#38;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">“</td>\n<td style=\"text-align:center\">引号</td>\n<td style=\"text-align:center\">&amp;quot;</td>\n<td style=\"text-align:center\">&amp;#34;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘</td>\n<td style=\"text-align:center\">撇号</td>\n<td style=\"text-align:center\">&amp;apos;(IE不支持)</td>\n<td style=\"text-align:center\">&amp;#39;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">￠</td>\n<td style=\"text-align:center\">分</td>\n<td style=\"text-align:center\">&amp;cent;</td>\n<td style=\"text-align:center\">&amp;#162;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">£</td>\n<td style=\"text-align:center\">镑</td>\n<td style=\"text-align:center\">&amp;pound;</td>\n<td style=\"text-align:center\">&amp;#163;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">¥</td>\n<td style=\"text-align:center\">日圆</td>\n<td style=\"text-align:center\">&amp;yen;</td>\n<td style=\"text-align:center\">&amp;#165;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">€</td>\n<td style=\"text-align:center\">欧元</td>\n<td style=\"text-align:center\">&amp;euro;</td>\n<td style=\"text-align:center\">&amp;#8364;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">§</td>\n<td style=\"text-align:center\">小节</td>\n<td style=\"text-align:center\">&amp;sect;</td>\n<td style=\"text-align:center\">&amp;#167;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">©</td>\n<td style=\"text-align:center\">版权</td>\n<td style=\"text-align:center\">&amp;copy;</td>\n<td style=\"text-align:center\">&amp;#169;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">®</td>\n<td style=\"text-align:center\">注册商标</td>\n<td style=\"text-align:center\">&amp;reg;</td>\n<td style=\"text-align:center\">&amp;#174;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">™</td>\n<td style=\"text-align:center\">商标</td>\n<td style=\"text-align:center\">&amp;trade;</td>\n<td style=\"text-align:center\">&amp;#8482;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">乘号</td>\n<td style=\"text-align:center\">&amp;times;</td>\n<td style=\"text-align:center\">&amp;#215;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">÷</td>\n<td style=\"text-align:center\">除号</td>\n<td style=\"text-align:center\">&amp;divide;</td>\n<td style=\"text-align:center\">&amp;#247;</td>\n</tr>\n</tbody>\n</table>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"java中的spring","date":"2016-11-02T06:51:20.000Z","_content":"\n<!-- more -->\n\n<h3>资源</h3>\nhttp://spring.io/\nhttp://projects.spring.io/spring-framework/\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/java/java中的spring.md","raw":"---\ntitle: java中的spring\ndate: 2016-11-02 14:51:20\ncategories: java\n---\n\n<!-- more -->\n\n<h3>资源</h3>\nhttp://spring.io/\nhttp://projects.spring.io/spring-framework/\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"java/java中的spring","published":1,"updated":"2016-11-02T07:24:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms95w000621xwb9nrjvsj","content":"<a id=\"more\"></a>\n<p></p><h3>资源</h3><br><a href=\"http://spring.io/\" target=\"_blank\" rel=\"external\">http://spring.io/</a><br><a href=\"http://projects.spring.io/spring-framework/\" target=\"_blank\" rel=\"external\">http://projects.spring.io/spring-framework/</a><p></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"","more":"<p><h3>资源</h3><br><a href=\"http://spring.io/\">http://spring.io/</a><br><a href=\"http://projects.spring.io/spring-framework/\">http://projects.spring.io/spring-framework/</a></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\n\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/markdown/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\n\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"markdown/hello-world","published":1,"date":"2016-09-30T11:56:27.000Z","updated":"2016-10-08T03:06:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms95z000721xw0ewhjao1","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"markdown转义字符","date":"2016-10-12T03:09:33.000Z","_content":"markdown中显示反斜杠 反引号 星号 下划线等 需要使用转义字符\n<!-- more -->\nMarkdown中的转义字符为\\，可以转义的有：\n\n```markdown\n\\\\ 反斜杠\n\\` 反引号\n\\* 星号\n\\_ 下划线\n\\{\\} 大括号\n\\[\\] 中括号\n\\(\\) 小括号\n\\# 井号\n\\+ 加号\n\\- 减号\n\\. 英文句号\n\\! 感叹号\n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/markdown/markdown转义字符.md","raw":"---\ntitle: markdown转义字符\ndate: 2016-10-12 11:09:33\ncategories: markdown\n---\nmarkdown中显示反斜杠 反引号 星号 下划线等 需要使用转义字符\n<!-- more -->\nMarkdown中的转义字符为\\，可以转义的有：\n\n```markdown\n\\\\ 反斜杠\n\\` 反引号\n\\* 星号\n\\_ 下划线\n\\{\\} 大括号\n\\[\\] 中括号\n\\(\\) 小括号\n\\# 井号\n\\+ 加号\n\\- 减号\n\\. 英文句号\n\\! 感叹号\n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"markdown/markdown转义字符","published":1,"updated":"2016-10-12T03:24:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms960000821xwimnpsxp1","content":"<p>markdown中显示反斜杠 反引号 星号 下划线等 需要使用转义字符<br><a id=\"more\"></a><br>Markdown中的转义字符为\\，可以转义的有：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\\\ 反斜杠</div><div class=\"line\">\\` 反引号</div><div class=\"line\">\\* 星号</div><div class=\"line\">\\_ 下划线</div><div class=\"line\">\\&#123;\\&#125; 大括号</div><div class=\"line\">\\[\\] 中括号</div><div class=\"line\">\\(\\) 小括号</div><div class=\"line\">\\# 井号</div><div class=\"line\">\\+ 加号</div><div class=\"line\">\\- 减号</div><div class=\"line\">\\. 英文句号</div><div class=\"line\">\\! 感叹号</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>markdown中显示反斜杠 反引号 星号 下划线等 需要使用转义字符<br>","more":"<br>Markdown中的转义字符为\\，可以转义的有：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\\\ 反斜杠</div><div class=\"line\">\\` 反引号</div><div class=\"line\">\\* 星号</div><div class=\"line\">\\_ 下划线</div><div class=\"line\">\\&#123;\\&#125; 大括号</div><div class=\"line\">\\[\\] 中括号</div><div class=\"line\">\\(\\) 小括号</div><div class=\"line\">\\# 井号</div><div class=\"line\">\\+ 加号</div><div class=\"line\">\\- 减号</div><div class=\"line\">\\. 英文句号</div><div class=\"line\">\\! 感叹号</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"APP间的调用","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n被调用的App：\n1.在appdelegate里实现方法\n\n-(BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<NSString *,id> *)options\n{\n    NSLog(@\"%@\",app);\n    NSLog(@\"%@\",url);\n    NSLog(@\"%@\",options);\n    return  YES;\n}\n\n2.配置Info.plist文件\n\n\n\n调用方法：\n\n    //打开另一个APP的方法\n    //a另一个APP的openurl\n    //aaaaaaaaa参数\n    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@\"a:aaaaaaa\"]];\n\n```\n\n","source":"_posts/oc/APP间的调用.md","raw":"---\ntitle: APP间的调用\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n被调用的App：\n1.在appdelegate里实现方法\n\n-(BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<NSString *,id> *)options\n{\n    NSLog(@\"%@\",app);\n    NSLog(@\"%@\",url);\n    NSLog(@\"%@\",options);\n    return  YES;\n}\n\n2.配置Info.plist文件\n\n\n\n调用方法：\n\n    //打开另一个APP的方法\n    //a另一个APP的openurl\n    //aaaaaaaaa参数\n    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@\"a:aaaaaaa\"]];\n\n```\n\n","slug":"oc/APP间的调用","published":1,"updated":"2016-10-08T09:18:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms963000a21xwv62ngfye","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">被调用的App：</div><div class=\"line\"><span class=\"number\">1.</span>在appdelegate里实现方法</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)app openURL:(<span class=\"built_in\">NSURL</span> *)url options:(<span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSString</span> *,<span class=\"keyword\">id</span>&gt; *)options</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,app);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,url);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,options);</div><div class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2.</span>配置Info.plist文件</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">调用方法：</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//打开另一个APP的方法</span></div><div class=\"line\">    <span class=\"comment\">//a另一个APP的openurl</span></div><div class=\"line\">    <span class=\"comment\">//aaaaaaaaa参数</span></div><div class=\"line\">    [[<span class=\"built_in\">UIApplication</span> sharedApplication] openURL:[<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"a:aaaaaaa\"</span>]];</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">被调用的App：</div><div class=\"line\"><span class=\"number\">1.</span>在appdelegate里实现方法</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)app openURL:(<span class=\"built_in\">NSURL</span> *)url options:(<span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSString</span> *,<span class=\"keyword\">id</span>&gt; *)options</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,app);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,url);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,options);</div><div class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2.</span>配置Info.plist文件</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">调用方法：</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//打开另一个APP的方法</span></div><div class=\"line\">    <span class=\"comment\">//a另一个APP的openurl</span></div><div class=\"line\">    <span class=\"comment\">//aaaaaaaaa参数</span></div><div class=\"line\">    [[<span class=\"built_in\">UIApplication</span> sharedApplication] openURL:[<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"a:aaaaaaa\"</span>]];</div></pre></td></tr></table></figure>"},{"title":"AVAudioPlayer","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n#import <AVFoundation/AVFoundation.h>\n\n    //初始化三个按钮\n   \n    //play\n    UIButton * button = [UIButton buttonWithType:UIButtonTypeCustom];\n    [self.view addSubview:button];\n    button.backgroundColor = [UIColor yellowColor];\n    [button setFrame:CGRectMake(100, 100 + 64, 60, 40)];\n    [button setTitle:@\"play\" forState:UIControlStateNormal];\n    [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n    [button addTarget:self action:@selector(play) forControlEvents:UIControlEventTouchUpInside];\n\n   \n   \n    //pause暂停\n    UIButton * button1 = [UIButton buttonWithType:UIButtonTypeCustom];\n    [self.view addSubview:button1];\n    button1.backgroundColor = [UIColor yellowColor];\n    [button1 setFrame:CGRectMake(100, 150 + 64, 60, 40)];\n    [button1 setTitle:@\"pause\" forState:UIControlStateNormal];\n    [button1 setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n    [button1 addTarget:self action:@selector(pause) forControlEvents:UIControlEventTouchUpInside];\n\n   \n   \n    //stop\n    UIButton * button2 = [UIButton buttonWithType:UIButtonTypeCustom];\n    [self.view addSubview:button1];\n    button2.backgroundColor = [UIColor yellowColor];\n    [button2 setFrame:CGRectMake(100, 200 + 64, 60, 40)];\n    [button2 setTitle:@\"stop\" forState:UIControlStateNormal];\n    [button2 setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n    [button2 addTarget:self action:@selector(stop) forControlEvents:UIControlEventTouchUpInside];\n    [self.view addSubview:button2];\n\n   \n   \n   \n    // 从bundle路径下读取音频文件\n    NSString * string = [[NSBundle mainBundle] pathForResource:@\"凭什么说-刘心\" ofType:@\"mp3\"];\n    // 把音频文件转换成url格式\n    NSURL * url = [NSURL fileURLWithPath:string];\n    // 初始化音频类 并且添加播放文件\n    self.avAudioPlayer = [[AVAudioPlayer alloc] initWithContentsOfURL:url error:nil];\n    // 设置代理\n    [self.avAudioPlayer setDelegate:self];\n    // 设置初始音量大小\n    [self.avAudioPlayer setVolume:1];\n    // 设置音乐播放次数 -1为一直循环\n    [self.avAudioPlayer setNumberOfLoops:-1];\n    // 预播放\n    [self.avAudioPlayer prepareToPlay];\n   \n   \n   \n    // 初始化一个播放进度条\n    self.progressV = [[UIProgressView alloc] initWithFrame:CGRectMake(80, 100, 200, 20)];\n    [self.progressV setProgressTintColor:[UIColor redColor]];\n    [self.progressV setTrackTintColor:[UIColor blueColor]];\n    [self.view addSubview:self.progressV];\n    [self.progressV release];\n   \n    // 用NSTimer来监控音频播放进度\n    self.timer = [NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(playProgress) userInfo:nil repeats:YES];\n   \n   \n   \n    // 初始化音量控制\n    self.volumeSlider = [[UISlider alloc] initWithFrame:CGRectMake(80, 130, 200, 20)];\n    [self.volumeSlider addTarget:self action:@selector(volumeChange) forControlEvents:UIControlEventValueChanged];\n    // 设置最小音量\n    [self.volumeSlider setMinimumValue:0.0f];\n    // 设置最大音量\n    [self.volumeSlider setMaximumValue:10.0f];\n    // 初始化音量为多少\n    [self.volumeSlider setValue:5.0f];\n    [self.view addSubview:self.volumeSlider];\n    [self.volumeSlider release];\n   \n   \n    //声音开关控件(静音)\n    UISwitch *swith = [[UISwitch alloc] initWithFrame:CGRectMake(100, 500, 60, 40)];\n    [self.view addSubview:swith];\n    [swith addTarget:self action:@selector(onOrOff:) forControlEvents:UIControlEventValueChanged];\n    //默认状态为打开\n    swith.on = YES;\n    [swith release];\n\n/********************AVAudioPlayer***************/\n//播放\n- (void)play\n{\n    [self.avAudioPlayer play];\n}\n//暂停\n- (void)pause\n{\n    [self.avAudioPlayer pause];\n}\n//停止\n- (void)stop\n{\n    self.avAudioPlayer.currentTime = 0;  //当前播放时间设置为0\n    [self.avAudioPlayer stop];\n}\n//播放进度条\n- (void)playProgress\n{\n    //通过音频播放时长的百分比,给progressview进行赋值;\n    self.progressV.progress = self.avAudioPlayer.currentTime/self.avAudioPlayer.duration;\n}\n//声音开关(是否静音)\n- (void)onOrOff:(UISwitch *)sender\n{\n    self.avAudioPlayer.volume = sender.on;\n}\n\n//播放音量控制\n- (void)volumeChange\n{\n    self.avAudioPlayer.volume = self.volumeSlider.value;\n}\n\n//播放完成时调用的方法  (代理里的方法),需要设置代理才可以调用\n- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer *)player successfully:(BOOL)flag\n{\n    [self.timer invalidate]; //NSTimer暂停  invalidate  使...无效;\n}\n/********************AVAudioPlayer***************/\n```\n\n","source":"_posts/oc/AVAudioPlayer.md","raw":"---\ntitle: AVAudioPlayer\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n#import <AVFoundation/AVFoundation.h>\n\n    //初始化三个按钮\n   \n    //play\n    UIButton * button = [UIButton buttonWithType:UIButtonTypeCustom];\n    [self.view addSubview:button];\n    button.backgroundColor = [UIColor yellowColor];\n    [button setFrame:CGRectMake(100, 100 + 64, 60, 40)];\n    [button setTitle:@\"play\" forState:UIControlStateNormal];\n    [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n    [button addTarget:self action:@selector(play) forControlEvents:UIControlEventTouchUpInside];\n\n   \n   \n    //pause暂停\n    UIButton * button1 = [UIButton buttonWithType:UIButtonTypeCustom];\n    [self.view addSubview:button1];\n    button1.backgroundColor = [UIColor yellowColor];\n    [button1 setFrame:CGRectMake(100, 150 + 64, 60, 40)];\n    [button1 setTitle:@\"pause\" forState:UIControlStateNormal];\n    [button1 setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n    [button1 addTarget:self action:@selector(pause) forControlEvents:UIControlEventTouchUpInside];\n\n   \n   \n    //stop\n    UIButton * button2 = [UIButton buttonWithType:UIButtonTypeCustom];\n    [self.view addSubview:button1];\n    button2.backgroundColor = [UIColor yellowColor];\n    [button2 setFrame:CGRectMake(100, 200 + 64, 60, 40)];\n    [button2 setTitle:@\"stop\" forState:UIControlStateNormal];\n    [button2 setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n    [button2 addTarget:self action:@selector(stop) forControlEvents:UIControlEventTouchUpInside];\n    [self.view addSubview:button2];\n\n   \n   \n   \n    // 从bundle路径下读取音频文件\n    NSString * string = [[NSBundle mainBundle] pathForResource:@\"凭什么说-刘心\" ofType:@\"mp3\"];\n    // 把音频文件转换成url格式\n    NSURL * url = [NSURL fileURLWithPath:string];\n    // 初始化音频类 并且添加播放文件\n    self.avAudioPlayer = [[AVAudioPlayer alloc] initWithContentsOfURL:url error:nil];\n    // 设置代理\n    [self.avAudioPlayer setDelegate:self];\n    // 设置初始音量大小\n    [self.avAudioPlayer setVolume:1];\n    // 设置音乐播放次数 -1为一直循环\n    [self.avAudioPlayer setNumberOfLoops:-1];\n    // 预播放\n    [self.avAudioPlayer prepareToPlay];\n   \n   \n   \n    // 初始化一个播放进度条\n    self.progressV = [[UIProgressView alloc] initWithFrame:CGRectMake(80, 100, 200, 20)];\n    [self.progressV setProgressTintColor:[UIColor redColor]];\n    [self.progressV setTrackTintColor:[UIColor blueColor]];\n    [self.view addSubview:self.progressV];\n    [self.progressV release];\n   \n    // 用NSTimer来监控音频播放进度\n    self.timer = [NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(playProgress) userInfo:nil repeats:YES];\n   \n   \n   \n    // 初始化音量控制\n    self.volumeSlider = [[UISlider alloc] initWithFrame:CGRectMake(80, 130, 200, 20)];\n    [self.volumeSlider addTarget:self action:@selector(volumeChange) forControlEvents:UIControlEventValueChanged];\n    // 设置最小音量\n    [self.volumeSlider setMinimumValue:0.0f];\n    // 设置最大音量\n    [self.volumeSlider setMaximumValue:10.0f];\n    // 初始化音量为多少\n    [self.volumeSlider setValue:5.0f];\n    [self.view addSubview:self.volumeSlider];\n    [self.volumeSlider release];\n   \n   \n    //声音开关控件(静音)\n    UISwitch *swith = [[UISwitch alloc] initWithFrame:CGRectMake(100, 500, 60, 40)];\n    [self.view addSubview:swith];\n    [swith addTarget:self action:@selector(onOrOff:) forControlEvents:UIControlEventValueChanged];\n    //默认状态为打开\n    swith.on = YES;\n    [swith release];\n\n/********************AVAudioPlayer***************/\n//播放\n- (void)play\n{\n    [self.avAudioPlayer play];\n}\n//暂停\n- (void)pause\n{\n    [self.avAudioPlayer pause];\n}\n//停止\n- (void)stop\n{\n    self.avAudioPlayer.currentTime = 0;  //当前播放时间设置为0\n    [self.avAudioPlayer stop];\n}\n//播放进度条\n- (void)playProgress\n{\n    //通过音频播放时长的百分比,给progressview进行赋值;\n    self.progressV.progress = self.avAudioPlayer.currentTime/self.avAudioPlayer.duration;\n}\n//声音开关(是否静音)\n- (void)onOrOff:(UISwitch *)sender\n{\n    self.avAudioPlayer.volume = sender.on;\n}\n\n//播放音量控制\n- (void)volumeChange\n{\n    self.avAudioPlayer.volume = self.volumeSlider.value;\n}\n\n//播放完成时调用的方法  (代理里的方法),需要设置代理才可以调用\n- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer *)player successfully:(BOOL)flag\n{\n    [self.timer invalidate]; //NSTimer暂停  invalidate  使...无效;\n}\n/********************AVAudioPlayer***************/\n```\n\n","slug":"oc/AVAudioPlayer","published":1,"updated":"2016-10-08T05:55:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms965000c21xwb9y53jya","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//初始化三个按钮</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//play</span></div><div class=\"line\">    <span class=\"built_in\">UIButton</span> * button = [<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeCustom</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:button];</div><div class=\"line\">    button.backgroundColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">    [button setFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">100</span>, <span class=\"number\">100</span> + <span class=\"number\">64</span>, <span class=\"number\">60</span>, <span class=\"number\">40</span>)];</div><div class=\"line\">    [button setTitle:<span class=\"string\">@\"play\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [button setTitleColor:[<span class=\"built_in\">UIColor</span> blackColor] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [button addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(play) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//pause暂停</span></div><div class=\"line\">    <span class=\"built_in\">UIButton</span> * button1 = [<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeCustom</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:button1];</div><div class=\"line\">    button1.backgroundColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">    [button1 setFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">100</span>, <span class=\"number\">150</span> + <span class=\"number\">64</span>, <span class=\"number\">60</span>, <span class=\"number\">40</span>)];</div><div class=\"line\">    [button1 setTitle:<span class=\"string\">@\"pause\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [button1 setTitleColor:[<span class=\"built_in\">UIColor</span> blackColor] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [button1 addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(pause) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//stop</span></div><div class=\"line\">    <span class=\"built_in\">UIButton</span> * button2 = [<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeCustom</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:button1];</div><div class=\"line\">    button2.backgroundColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">    [button2 setFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">100</span>, <span class=\"number\">200</span> + <span class=\"number\">64</span>, <span class=\"number\">60</span>, <span class=\"number\">40</span>)];</div><div class=\"line\">    [button2 setTitle:<span class=\"string\">@\"stop\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [button2 setTitleColor:[<span class=\"built_in\">UIColor</span> blackColor] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [button2 addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(stop) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:button2];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 从bundle路径下读取音频文件</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> * string = [[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"凭什么说-刘心\"</span> ofType:<span class=\"string\">@\"mp3\"</span>];</div><div class=\"line\">    <span class=\"comment\">// 把音频文件转换成url格式</span></div><div class=\"line\">    <span class=\"built_in\">NSURL</span> * url = [<span class=\"built_in\">NSURL</span> fileURLWithPath:string];</div><div class=\"line\">    <span class=\"comment\">// 初始化音频类 并且添加播放文件</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.avAudioPlayer = [[<span class=\"built_in\">AVAudioPlayer</span> alloc] initWithContentsOfURL:url error:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"comment\">// 设置代理</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.avAudioPlayer setDelegate:<span class=\"keyword\">self</span>];</div><div class=\"line\">    <span class=\"comment\">// 设置初始音量大小</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.avAudioPlayer setVolume:<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"comment\">// 设置音乐播放次数 -1为一直循环</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.avAudioPlayer setNumberOfLoops:<span class=\"number\">-1</span>];</div><div class=\"line\">    <span class=\"comment\">// 预播放</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.avAudioPlayer prepareToPlay];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 初始化一个播放进度条</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.progressV = [[<span class=\"built_in\">UIProgressView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">80</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">20</span>)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.progressV setProgressTintColor:[<span class=\"built_in\">UIColor</span> redColor]];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.progressV setTrackTintColor:[<span class=\"built_in\">UIColor</span> blueColor]];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.progressV];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.progressV release];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 用NSTimer来监控音频播放进度</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.timer = [<span class=\"built_in\">NSTimer</span> scheduledTimerWithTimeInterval:<span class=\"number\">0.1</span> target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(playProgress) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">YES</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 初始化音量控制</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.volumeSlider = [[<span class=\"built_in\">UISlider</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">80</span>, <span class=\"number\">130</span>, <span class=\"number\">200</span>, <span class=\"number\">20</span>)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.volumeSlider addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(volumeChange) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</div><div class=\"line\">    <span class=\"comment\">// 设置最小音量</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.volumeSlider setMinimumValue:<span class=\"number\">0.0</span>f];</div><div class=\"line\">    <span class=\"comment\">// 设置最大音量</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.volumeSlider setMaximumValue:<span class=\"number\">10.0</span>f];</div><div class=\"line\">    <span class=\"comment\">// 初始化音量为多少</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.volumeSlider setValue:<span class=\"number\">5.0</span>f];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.volumeSlider];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.volumeSlider release];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//声音开关控件(静音)</span></div><div class=\"line\">    <span class=\"built_in\">UISwitch</span> *swith = [[<span class=\"built_in\">UISwitch</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">100</span>, <span class=\"number\">500</span>, <span class=\"number\">60</span>, <span class=\"number\">40</span>)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:swith];</div><div class=\"line\">    [swith addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(onOrOff:) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</div><div class=\"line\">    <span class=\"comment\">//默认状态为打开</span></div><div class=\"line\">    swith.on = <span class=\"literal\">YES</span>;</div><div class=\"line\">    [swith release];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/********************AVAudioPlayer***************/</span></div><div class=\"line\"><span class=\"comment\">//播放</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)play</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.avAudioPlayer play];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//暂停</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)pause</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.avAudioPlayer pause];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//停止</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)stop</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.avAudioPlayer.currentTime = <span class=\"number\">0</span>;  <span class=\"comment\">//当前播放时间设置为0</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.avAudioPlayer stop];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//播放进度条</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)playProgress</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//通过音频播放时长的百分比,给progressview进行赋值;</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.progressV.progress = <span class=\"keyword\">self</span>.avAudioPlayer.currentTime/<span class=\"keyword\">self</span>.avAudioPlayer.duration;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//声音开关(是否静音)</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)onOrOff:(<span class=\"built_in\">UISwitch</span> *)sender</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.avAudioPlayer.volume = sender.on;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//播放音量控制</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)volumeChange</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.avAudioPlayer.volume = <span class=\"keyword\">self</span>.volumeSlider.value;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//播放完成时调用的方法  (代理里的方法),需要设置代理才可以调用</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)audioPlayerDidFinishPlaying:(<span class=\"built_in\">AVAudioPlayer</span> *)player successfully:(<span class=\"built_in\">BOOL</span>)flag</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.timer invalidate]; <span class=\"comment\">//NSTimer暂停  invalidate  使...无效;</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/********************AVAudioPlayer***************/</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//初始化三个按钮</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//play</span></div><div class=\"line\">    <span class=\"built_in\">UIButton</span> * button = [<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeCustom</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:button];</div><div class=\"line\">    button.backgroundColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">    [button setFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">100</span>, <span class=\"number\">100</span> + <span class=\"number\">64</span>, <span class=\"number\">60</span>, <span class=\"number\">40</span>)];</div><div class=\"line\">    [button setTitle:<span class=\"string\">@\"play\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [button setTitleColor:[<span class=\"built_in\">UIColor</span> blackColor] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [button addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(play) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//pause暂停</span></div><div class=\"line\">    <span class=\"built_in\">UIButton</span> * button1 = [<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeCustom</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:button1];</div><div class=\"line\">    button1.backgroundColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">    [button1 setFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">100</span>, <span class=\"number\">150</span> + <span class=\"number\">64</span>, <span class=\"number\">60</span>, <span class=\"number\">40</span>)];</div><div class=\"line\">    [button1 setTitle:<span class=\"string\">@\"pause\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [button1 setTitleColor:[<span class=\"built_in\">UIColor</span> blackColor] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [button1 addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(pause) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//stop</span></div><div class=\"line\">    <span class=\"built_in\">UIButton</span> * button2 = [<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeCustom</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:button1];</div><div class=\"line\">    button2.backgroundColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">    [button2 setFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">100</span>, <span class=\"number\">200</span> + <span class=\"number\">64</span>, <span class=\"number\">60</span>, <span class=\"number\">40</span>)];</div><div class=\"line\">    [button2 setTitle:<span class=\"string\">@\"stop\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [button2 setTitleColor:[<span class=\"built_in\">UIColor</span> blackColor] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [button2 addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(stop) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:button2];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 从bundle路径下读取音频文件</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> * string = [[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"凭什么说-刘心\"</span> ofType:<span class=\"string\">@\"mp3\"</span>];</div><div class=\"line\">    <span class=\"comment\">// 把音频文件转换成url格式</span></div><div class=\"line\">    <span class=\"built_in\">NSURL</span> * url = [<span class=\"built_in\">NSURL</span> fileURLWithPath:string];</div><div class=\"line\">    <span class=\"comment\">// 初始化音频类 并且添加播放文件</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.avAudioPlayer = [[<span class=\"built_in\">AVAudioPlayer</span> alloc] initWithContentsOfURL:url error:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"comment\">// 设置代理</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.avAudioPlayer setDelegate:<span class=\"keyword\">self</span>];</div><div class=\"line\">    <span class=\"comment\">// 设置初始音量大小</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.avAudioPlayer setVolume:<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"comment\">// 设置音乐播放次数 -1为一直循环</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.avAudioPlayer setNumberOfLoops:<span class=\"number\">-1</span>];</div><div class=\"line\">    <span class=\"comment\">// 预播放</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.avAudioPlayer prepareToPlay];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 初始化一个播放进度条</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.progressV = [[<span class=\"built_in\">UIProgressView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">80</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">20</span>)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.progressV setProgressTintColor:[<span class=\"built_in\">UIColor</span> redColor]];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.progressV setTrackTintColor:[<span class=\"built_in\">UIColor</span> blueColor]];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.progressV];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.progressV release];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 用NSTimer来监控音频播放进度</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.timer = [<span class=\"built_in\">NSTimer</span> scheduledTimerWithTimeInterval:<span class=\"number\">0.1</span> target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(playProgress) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">YES</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 初始化音量控制</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.volumeSlider = [[<span class=\"built_in\">UISlider</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">80</span>, <span class=\"number\">130</span>, <span class=\"number\">200</span>, <span class=\"number\">20</span>)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.volumeSlider addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(volumeChange) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</div><div class=\"line\">    <span class=\"comment\">// 设置最小音量</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.volumeSlider setMinimumValue:<span class=\"number\">0.0</span>f];</div><div class=\"line\">    <span class=\"comment\">// 设置最大音量</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.volumeSlider setMaximumValue:<span class=\"number\">10.0</span>f];</div><div class=\"line\">    <span class=\"comment\">// 初始化音量为多少</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.volumeSlider setValue:<span class=\"number\">5.0</span>f];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.volumeSlider];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.volumeSlider release];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//声音开关控件(静音)</span></div><div class=\"line\">    <span class=\"built_in\">UISwitch</span> *swith = [[<span class=\"built_in\">UISwitch</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">100</span>, <span class=\"number\">500</span>, <span class=\"number\">60</span>, <span class=\"number\">40</span>)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:swith];</div><div class=\"line\">    [swith addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(onOrOff:) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</div><div class=\"line\">    <span class=\"comment\">//默认状态为打开</span></div><div class=\"line\">    swith.on = <span class=\"literal\">YES</span>;</div><div class=\"line\">    [swith release];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/********************AVAudioPlayer***************/</span></div><div class=\"line\"><span class=\"comment\">//播放</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)play</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.avAudioPlayer play];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//暂停</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)pause</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.avAudioPlayer pause];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//停止</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)stop</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.avAudioPlayer.currentTime = <span class=\"number\">0</span>;  <span class=\"comment\">//当前播放时间设置为0</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.avAudioPlayer stop];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//播放进度条</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)playProgress</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//通过音频播放时长的百分比,给progressview进行赋值;</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.progressV.progress = <span class=\"keyword\">self</span>.avAudioPlayer.currentTime/<span class=\"keyword\">self</span>.avAudioPlayer.duration;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//声音开关(是否静音)</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)onOrOff:(<span class=\"built_in\">UISwitch</span> *)sender</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.avAudioPlayer.volume = sender.on;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//播放音量控制</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)volumeChange</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.avAudioPlayer.volume = <span class=\"keyword\">self</span>.volumeSlider.value;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//播放完成时调用的方法  (代理里的方法),需要设置代理才可以调用</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)audioPlayerDidFinishPlaying:(<span class=\"built_in\">AVAudioPlayer</span> *)player successfully:(<span class=\"built_in\">BOOL</span>)flag</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.timer invalidate]; <span class=\"comment\">//NSTimer暂停  invalidate  使...无效;</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/********************AVAudioPlayer***************/</span></div></pre></td></tr></table></figure>"},{"title":"BOOL / bool / Boolean / NSCFBoolean","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\nNameTypedefHeaderTrue ValueFalse ValueBOOLsigned charobjc.hYESNObool_Bool (int)stdbool.htruefalseBooleanunsigned charMacTypes.hTRUEFALSENSNumber__NSCFBooleanFoundation.h@(YES)@(NO)CFBooleanRefstructCoreFoundation.hkCFBooleanTruekCFBooleanFalse\n```","source":"_posts/oc/BOOL  bool  Boolean  NSCFBoolean.md","raw":"---\ntitle: BOOL / bool / Boolean / NSCFBoolean\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\nNameTypedefHeaderTrue ValueFalse ValueBOOLsigned charobjc.hYESNObool_Bool (int)stdbool.htruefalseBooleanunsigned charMacTypes.hTRUEFALSENSNumber__NSCFBooleanFoundation.h@(YES)@(NO)CFBooleanRefstructCoreFoundation.hkCFBooleanTruekCFBooleanFalse\n```","slug":"oc/BOOL  bool  Boolean  NSCFBoolean","published":1,"updated":"2016-11-12T02:36:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms967000e21xwovpnwc7t","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">NameTypedefHeaderTrue ValueFalse ValueBOOLsigned charobjc.hYESNObool_Bool (<span class=\"keyword\">int</span>)stdbool.htruefalseBooleanunsigned charMacTypes.hTRUEFALSENSNumber__NSCFBooleanFoundation.h@(<span class=\"literal\">YES</span>)@(<span class=\"literal\">NO</span>)<span class=\"built_in\">CFBooleanRefstructCoreFoundation</span>.hkCFBooleanTruekCFBooleanFalse</div></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">NameTypedefHeaderTrue ValueFalse ValueBOOLsigned charobjc.hYESNObool_Bool (<span class=\"keyword\">int</span>)stdbool.htruefalseBooleanunsigned charMacTypes.hTRUEFALSENSNumber__NSCFBooleanFoundation.h@(<span class=\"literal\">YES</span>)@(<span class=\"literal\">NO</span>)<span class=\"built_in\">CFBooleanRefstructCoreFoundation</span>.hkCFBooleanTruekCFBooleanFalse</div></pre></td></tr></table></figure>"},{"title":"Core Animation 3D介绍(第1部分)","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n尊重原创 转自：http://codingobjc.com/blog/2013/06/11/core-animation-3djie-shao-di-1bu-fen/\n\n在本教程中，我将向你介绍Core Animation中用于绘制3D图形的一些技术。\n我要告诉你的好消息是：我们不必直接使用OpenGL，仅仅用Core Animation就可以很容易的实现一些3D效果。但是，也别太高兴了，因为”用Core Animation来制作一个复杂的3D游戏”也并不是一个好主意。\n这个教程分两部分。第一部分，我们先讨论下一些3D原理知识，然后运用这些概念来创建一些简单的3D场景。然后在第二部分中，我们将使用Core Animation来制作一个类似于旋转木马的3D场景特效。\n最终app的预览效果如下：(译注: 原文中这里的视频被墙，因此这里只简单的提供一个图片预览，你可以直接下载例子代码运行即可以看到最终app的效果)\n![](http://codingobjc.com/images/posts/2013_06_11_core_animation_3d_app_preview.png)\n好，准备好了吗？我们开始写代码吧！\n首先，下载文章后面的代码。如果你要自己创建项目的话，要记得添加QuartzCore框架。\n###3D和矩阵相关的数学知识(一点点…别担心，只有一点点)\n要在一个3D空间中绘图，除了标准2D坐标(X和Y)概念外，我们还需要引入一个深度(depth)的概念，也就是要加入第三个坐标轴–Z轴。\n这样，在空间中，我们只需要简单的改变物体的X、Y和Z坐标，就可以在垂直方向、水平方向或深度方向上移动物体。\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/handed.png)\n在2D或3D空间中，对一个物体执行平移、缩放或旋转这些操作时需要使用矩阵运算。\n你可以将矩阵想象成一个多维数组。比如，在3D空间中我们使用一个像下面这种格式的4X4矩阵：\n\t\n\t\n\t[X][0][0][0][0][Y][0][0][0][0][Z][0][0][0][0][1]\n把这个矩阵和物体的每一个坐标点(又称顶点)相乘，我们可以得到物体的一个变换(transformation)效果。\n严格点讲，前面这个矩阵是用来执行缩放操作的。其中的X、Y、Z值代表每个轴上的缩放值。\n如果你要进行其他的变换操作，比如旋转或者平移，你需要将矩阵换成其他矩阵格式(scheme)。\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/Screen-Shot-2013-03-20-at-11.02.03-AM.png)\n不要紧张！你不需要知道其他更多原理知识，而且也不必直接进行这些操作。Core Animation会为你完成这些操作，虽然你不知道它是如何做到的，但是它确实会为你完成这些操作，所以不必害怕。\n当然，就我个人来说，如果我知道它背后是如何工作的(至少知道一些它的基本原理)，我会对我的代码更有自信。因此，如果你想了解更多矩阵相关的知识，建议你读一读这篇[文章](http://www.matrix44.net/cms/notes/opengl-3d-graphics/basic-3d-math-matrices)。\n###3D变换(Transformations)\n现在基本上，你已经知道矩阵的作用了，也知道了3D空间是如何构成的。来，我们用Core Animation做一些3D的东西吧。\n打开TB_3DIntro->viewController.m文件。\n我在里面列出了6个分别以A、B、C、D、E、F开头的函数。每一个函数对应了一种不同的3D场景效果。\n我们先来看看由`A_singlePlan`函数创造的场景吧。\n用这个函数，我们画了一个平面，平面绕Y轴旋转了45度。\n首先，我们创建了一个CALayer，用它来作容器层(当然，并不是一定要这样做，只是我更喜欢不直接在self.view的layer上进行工作)。\n\t\n\t\n\t-(void)A_singlePlane{//Create the containerCALayer*container=[CALayerlayer];container.frame=CGRectMake(0,0,640,300);[self.view.layeraddSublayer:container];\n然后我们创建了另一个CALayer，用它代表一个平面。\n\t\n\t\n\t//Create a PlaneCALayer*purplePlane=[selfaddPlaneToLayer:containersize:CGSizeMake(100,100)position:CGPointMake(250,150)color:[UIColorpurpleColor]];\n我写了一个简单的辅助函数，用它将平面直接添加到容器层上，然后返回这个新建的平面层。代码非常简单：\n\t\n\t\n\t-(CALayer*)addPlaneToLayer:(CALayer*)containersize:(CGSize)sizeposition:(CGPoint)pointcolor:(UIColor*)color{//Initialize the layerCALayer*plane=[CALayerlayer];//Define position,size and colorsplane.backgroundColor=[colorCGColor];plane.opacity=0.6;plane.frame=CGRectMake(0,0,size.width,size.height);plane.position=point;plane.anchorPoint=CGPointMake(0.5,0.5);plane.borderColor=[[UIColorcolorWithWhite:1.0alpha:0.5]CGColor];plane.borderWidth=3;plane.cornerRadius=10;//Add the layer to the container layer[containeraddSublayer:plane];returnplane;}\n最后，我们用CATransform3D来添加变换。\n啊？？？你一定又想问CATransform3D是什么东西？按住Cmd键点击这个类型名称，你可以发现它是一个结构体，使用了一种很”火星”的语法来表示一个矩阵。![](http://www.thinkandbuild.it/wp-includes/images/smilies/icon_razz.gif)\n\t\n\tstructCATransform3D{CGFloatm11,m12,m13,m14;CGFloatm21,m22,m23,m24;CGFloatm31,m32,m33,m34;CGFloatm41,m42,m43,m44;};typedefstructCATransform3DCATransform3D;\n旋转变换部分的代码也相当简单：\n\t\n\t\n\t//Apply transform to the PLANECATransform3Dt=CATransform3DIdentity;t=CATransform3DRotate(t,45.00f*M_PI/180.0f,0,1,0);purplePlane.transform=t;}\n先用单位矩阵`CATransform3DIdentity`来初始化一个变换(transformation)，然后用`CATransform3DRotate`函数给变换乘上一个旋转矩阵。\nCATransform3DRotate这个函数的参数分别表示矩阵，旋转的角度(以弧度为单位)和3个坐标轴上的变换系数。这个例子中，X和Z轴都没受到影响，只对Y轴有影响，物体会在Y轴上旋转45度。\n下图是运行结果。\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/pa1.png)\n呃……你可以看到，它还不是3D的！我们只是在X轴方向上将一个正方形压扁了。\n这是由于我们还没有设置视点的值(perspective value)。通常，在绘制3D场景的时候会将场景进行正射投影(Orthographic projection)处理，由此会产生一个扁平的场景。换句话说，在正射投影后你无法看到Z轴上的深度感。\n要给我们的场景加上空间深度感，我们必须修改变换矩阵的`m34`参数。这个参数决定了视点的值。\n现在，来看看`B_singlePlanePerspective`这个函数，这函数展示了视点的作用。\n这个函数和前一个函数只有变换部分的代码有所不同：\n\t\n\t\n\t//Apply transform to the PLANECATransform3Dt=CATransform3DIdentity;//Add perspective!!!t.m34=1.0/-500;t=CATransform3DRotate(t,degToRad(45.0),0,1,0);purplePlane.transform=t;}\n你可以看到，我们直接给矩阵的m34属性赋了一个值。在这里，我不会深入的从数学上解释这个值是如何起作用的。但是我可以告诉你的是，这个值越接近0，视点就越深。\n下面是两种不同视点值的效果：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/pa_2.png)\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/pa_21.png)\n###3D变换的顺序问题(Transformations chain)\n我们可以将多个矩阵相乘从而将多种变换应用到一个物体上。比如，如果我们想将平移和旋转变换应用到一个物体上，我们可以直接将两个变换矩阵相乘：\n\t\n\tTransformMatrix=TranslateMtx*RotateMtx\n数学上，一般情况下乘法都可以使用交换律：\n\t\n\tTranslateMtx*RotateMxt=RotateMtx*TranslateMtx\n但是矩阵乘法不适用于交换律。AxB的结果可能和BxA的结果不一样。要记住这一点！\n接下来`C_transformationsChain`这个例子中，我们会将2个变换效果按不同的先后顺序应用到2个不同的物体上。\n以下是主要代码：\n\t\n\t\n\t//Apply transformation to the PLANESCATransform3Dt=CATransform3DIdentity;//Purple plane: Perform a rotation and then a translationt=CATransform3DRotate(t,45.0f*M_PI/180.0f,0,0,1);t=CATransform3DTranslate(t,100,0,0);purplePlane.transform=t;//reset the transform matrixt=CATransform3DIdentity;//Red plane: Perform translation first and then the rotationt=CATransform3DTranslate(t,100,0,0);t=CATransform3DRotate(t,45.0f*M_PI/180.0f,0,0,1);redPlane.transform=t;\n运行结果如下：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/Screen-Shot-2013-03-20-at-11.47.15-AM.png)\n看到了吗，不同的变换顺序完全导致了不同的效果。\n我们重点下看一下紫色的那块。旋转变换改变了它的坐标轴方向，然后我们又将它沿X轴进行了平移，此时它的X轴方向已经和红色平面的X轴方向不一致了。\n变换步骤示意图如下：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/p_r.png)\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/p_r2.png)\n###图层层次(layer hierarchies)\n到目前为止，我们都是将变换直接应用在这些平面上。在3D场景中，经常需要创建一些相互之间有层次结构的物体。这个时候，只需要将变换应用到根层次上，就可以使整个层次结构中的物体整体具有这个变换效果。这种做法非常有用。\n接下来，我们来看看`D_multiplePlanes`这个例子。\n我们在容器层上添加了4个平面。\n当没有任何变换效果时看起来是这样的：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/p5.png)\n如果我们给每一个平面都加上一个Y轴上的旋转变换，我们会得到4个独立的旋转效果：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/p5_2.png)\n但是，如果我们只是在容器层上应用旋转变换，我们会得到一个完全不同的场景效果：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/p5_1.png)\n这种效果，是相机(camera)位置发生改变带来的结果。我们没有移动每个平面，只是改变了视点的位置。\n此函数主要的变换部分代码如下，包含了分别应用于各个平面和应用于容器层的两种变换效果的代码：\n\n\t\n\t//Transformation CATransform3Dt=CATransform3DIdentity;BOOLapplyToContainer=NO;//Apply the transformation to each PLANEif(!applyToContainer){t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);purplePlane.transform=t;t=CATransform3DIdentity;t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);redPlane.transform=t;t=CATransform3DIdentity;t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);orangePlane.transform=t;t=CATransform3DIdentity;t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);yellowPlane.transform=t;}//Apply the transformation to the CONTAINERelse{CATransform3Dt=CATransform3DIdentity;t.m34=1.0/-500;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);container.transform=t;}\n###CATransformLayer\n到目前为止我们所见到的代码都能正常工作，但说实话，作为3D层次结构的根，CALayer不是正确的选择。\n函数`E_multiplePlanesZAxis`展示了为什么。\n这个例子中，我们创建4个XY坐标相同只有Z坐标不同的平面。紫色平面最近，黄色平面最远。\n\t\n\t\n\t//Apply transforms to the PLANESt=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-10);purplePlane.transform=t;t=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-50);redPlane.transform=t;t=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-90);orangePlane.transform=t;t=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-130);yellowPlane.transform=t;\n在旋转这些平面前，我们先让容器层执行了一个旋转变换。\n\t\n\t\n\t//Apply transform to the CONTAINERCATransform3Dt=CATransform3DIdentity;t.m34=1.0/-500;t=CATransform3DRotate(t,80.0f*M_PI/180.0f,0,1,0);container.transform=t;\n你也许希望看到下面这种结果：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/p6_1.png)\n但是，实际上会得到这种结果：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/p6.png)\n这是因为CALayer不能处理3D层次结构的深度，它只能将场景处理成相同的Z层次。\n为了修正这个问题，我们需要用一个`CATransformLayers`来做根层对象。\n函数`F_multiplePlanesZAxis`修正了这个问题：\n\t\n\t\n\t//Create the container as a CATransformLayerCATransformLayer*container=[CATransformLayerlayer];container.frame=CGRectMake(0,0,640,300);[self.view.layeraddSublayer:container];\nCATransformLayer是一个特殊的layer。与CALayer的不同之处在于，CATransformLayer本身不会被渲染到屏幕上，只有它的子图层才会被渲染到屏幕上。所以它的一些属性，比如backgroundColor、contents、border等等都没有什么用。要记住这点。\n到这里，这个教程的第一部分就完了。建议你实际运行一下这些函数，也可以试试我没有讲到的`CATransform3DScale`，试试用它做一个缩放变换看。\n如果你有任何问题，可以在twitter上找到我([@bitwaker](http://www.twitter.com/bitwaker))。\n[本教程代码下载](https://github.com/ariok/TB_3DCoreAnimation)\n译自：[Think\n & Build](http://www.thinkandbuild.it/introduction-to-3d-drawing-in-core-animation-part-1/)\n","source":"_posts/oc/Core Animation 3D介绍(第1部分).md","raw":"---\ntitle: Core Animation 3D介绍(第1部分)\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n尊重原创 转自：http://codingobjc.com/blog/2013/06/11/core-animation-3djie-shao-di-1bu-fen/\n\n在本教程中，我将向你介绍Core Animation中用于绘制3D图形的一些技术。\n我要告诉你的好消息是：我们不必直接使用OpenGL，仅仅用Core Animation就可以很容易的实现一些3D效果。但是，也别太高兴了，因为”用Core Animation来制作一个复杂的3D游戏”也并不是一个好主意。\n这个教程分两部分。第一部分，我们先讨论下一些3D原理知识，然后运用这些概念来创建一些简单的3D场景。然后在第二部分中，我们将使用Core Animation来制作一个类似于旋转木马的3D场景特效。\n最终app的预览效果如下：(译注: 原文中这里的视频被墙，因此这里只简单的提供一个图片预览，你可以直接下载例子代码运行即可以看到最终app的效果)\n![](http://codingobjc.com/images/posts/2013_06_11_core_animation_3d_app_preview.png)\n好，准备好了吗？我们开始写代码吧！\n首先，下载文章后面的代码。如果你要自己创建项目的话，要记得添加QuartzCore框架。\n###3D和矩阵相关的数学知识(一点点…别担心，只有一点点)\n要在一个3D空间中绘图，除了标准2D坐标(X和Y)概念外，我们还需要引入一个深度(depth)的概念，也就是要加入第三个坐标轴–Z轴。\n这样，在空间中，我们只需要简单的改变物体的X、Y和Z坐标，就可以在垂直方向、水平方向或深度方向上移动物体。\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/handed.png)\n在2D或3D空间中，对一个物体执行平移、缩放或旋转这些操作时需要使用矩阵运算。\n你可以将矩阵想象成一个多维数组。比如，在3D空间中我们使用一个像下面这种格式的4X4矩阵：\n\t\n\t\n\t[X][0][0][0][0][Y][0][0][0][0][Z][0][0][0][0][1]\n把这个矩阵和物体的每一个坐标点(又称顶点)相乘，我们可以得到物体的一个变换(transformation)效果。\n严格点讲，前面这个矩阵是用来执行缩放操作的。其中的X、Y、Z值代表每个轴上的缩放值。\n如果你要进行其他的变换操作，比如旋转或者平移，你需要将矩阵换成其他矩阵格式(scheme)。\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/Screen-Shot-2013-03-20-at-11.02.03-AM.png)\n不要紧张！你不需要知道其他更多原理知识，而且也不必直接进行这些操作。Core Animation会为你完成这些操作，虽然你不知道它是如何做到的，但是它确实会为你完成这些操作，所以不必害怕。\n当然，就我个人来说，如果我知道它背后是如何工作的(至少知道一些它的基本原理)，我会对我的代码更有自信。因此，如果你想了解更多矩阵相关的知识，建议你读一读这篇[文章](http://www.matrix44.net/cms/notes/opengl-3d-graphics/basic-3d-math-matrices)。\n###3D变换(Transformations)\n现在基本上，你已经知道矩阵的作用了，也知道了3D空间是如何构成的。来，我们用Core Animation做一些3D的东西吧。\n打开TB_3DIntro->viewController.m文件。\n我在里面列出了6个分别以A、B、C、D、E、F开头的函数。每一个函数对应了一种不同的3D场景效果。\n我们先来看看由`A_singlePlan`函数创造的场景吧。\n用这个函数，我们画了一个平面，平面绕Y轴旋转了45度。\n首先，我们创建了一个CALayer，用它来作容器层(当然，并不是一定要这样做，只是我更喜欢不直接在self.view的layer上进行工作)。\n\t\n\t\n\t-(void)A_singlePlane{//Create the containerCALayer*container=[CALayerlayer];container.frame=CGRectMake(0,0,640,300);[self.view.layeraddSublayer:container];\n然后我们创建了另一个CALayer，用它代表一个平面。\n\t\n\t\n\t//Create a PlaneCALayer*purplePlane=[selfaddPlaneToLayer:containersize:CGSizeMake(100,100)position:CGPointMake(250,150)color:[UIColorpurpleColor]];\n我写了一个简单的辅助函数，用它将平面直接添加到容器层上，然后返回这个新建的平面层。代码非常简单：\n\t\n\t\n\t-(CALayer*)addPlaneToLayer:(CALayer*)containersize:(CGSize)sizeposition:(CGPoint)pointcolor:(UIColor*)color{//Initialize the layerCALayer*plane=[CALayerlayer];//Define position,size and colorsplane.backgroundColor=[colorCGColor];plane.opacity=0.6;plane.frame=CGRectMake(0,0,size.width,size.height);plane.position=point;plane.anchorPoint=CGPointMake(0.5,0.5);plane.borderColor=[[UIColorcolorWithWhite:1.0alpha:0.5]CGColor];plane.borderWidth=3;plane.cornerRadius=10;//Add the layer to the container layer[containeraddSublayer:plane];returnplane;}\n最后，我们用CATransform3D来添加变换。\n啊？？？你一定又想问CATransform3D是什么东西？按住Cmd键点击这个类型名称，你可以发现它是一个结构体，使用了一种很”火星”的语法来表示一个矩阵。![](http://www.thinkandbuild.it/wp-includes/images/smilies/icon_razz.gif)\n\t\n\tstructCATransform3D{CGFloatm11,m12,m13,m14;CGFloatm21,m22,m23,m24;CGFloatm31,m32,m33,m34;CGFloatm41,m42,m43,m44;};typedefstructCATransform3DCATransform3D;\n旋转变换部分的代码也相当简单：\n\t\n\t\n\t//Apply transform to the PLANECATransform3Dt=CATransform3DIdentity;t=CATransform3DRotate(t,45.00f*M_PI/180.0f,0,1,0);purplePlane.transform=t;}\n先用单位矩阵`CATransform3DIdentity`来初始化一个变换(transformation)，然后用`CATransform3DRotate`函数给变换乘上一个旋转矩阵。\nCATransform3DRotate这个函数的参数分别表示矩阵，旋转的角度(以弧度为单位)和3个坐标轴上的变换系数。这个例子中，X和Z轴都没受到影响，只对Y轴有影响，物体会在Y轴上旋转45度。\n下图是运行结果。\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/pa1.png)\n呃……你可以看到，它还不是3D的！我们只是在X轴方向上将一个正方形压扁了。\n这是由于我们还没有设置视点的值(perspective value)。通常，在绘制3D场景的时候会将场景进行正射投影(Orthographic projection)处理，由此会产生一个扁平的场景。换句话说，在正射投影后你无法看到Z轴上的深度感。\n要给我们的场景加上空间深度感，我们必须修改变换矩阵的`m34`参数。这个参数决定了视点的值。\n现在，来看看`B_singlePlanePerspective`这个函数，这函数展示了视点的作用。\n这个函数和前一个函数只有变换部分的代码有所不同：\n\t\n\t\n\t//Apply transform to the PLANECATransform3Dt=CATransform3DIdentity;//Add perspective!!!t.m34=1.0/-500;t=CATransform3DRotate(t,degToRad(45.0),0,1,0);purplePlane.transform=t;}\n你可以看到，我们直接给矩阵的m34属性赋了一个值。在这里，我不会深入的从数学上解释这个值是如何起作用的。但是我可以告诉你的是，这个值越接近0，视点就越深。\n下面是两种不同视点值的效果：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/pa_2.png)\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/pa_21.png)\n###3D变换的顺序问题(Transformations chain)\n我们可以将多个矩阵相乘从而将多种变换应用到一个物体上。比如，如果我们想将平移和旋转变换应用到一个物体上，我们可以直接将两个变换矩阵相乘：\n\t\n\tTransformMatrix=TranslateMtx*RotateMtx\n数学上，一般情况下乘法都可以使用交换律：\n\t\n\tTranslateMtx*RotateMxt=RotateMtx*TranslateMtx\n但是矩阵乘法不适用于交换律。AxB的结果可能和BxA的结果不一样。要记住这一点！\n接下来`C_transformationsChain`这个例子中，我们会将2个变换效果按不同的先后顺序应用到2个不同的物体上。\n以下是主要代码：\n\t\n\t\n\t//Apply transformation to the PLANESCATransform3Dt=CATransform3DIdentity;//Purple plane: Perform a rotation and then a translationt=CATransform3DRotate(t,45.0f*M_PI/180.0f,0,0,1);t=CATransform3DTranslate(t,100,0,0);purplePlane.transform=t;//reset the transform matrixt=CATransform3DIdentity;//Red plane: Perform translation first and then the rotationt=CATransform3DTranslate(t,100,0,0);t=CATransform3DRotate(t,45.0f*M_PI/180.0f,0,0,1);redPlane.transform=t;\n运行结果如下：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/Screen-Shot-2013-03-20-at-11.47.15-AM.png)\n看到了吗，不同的变换顺序完全导致了不同的效果。\n我们重点下看一下紫色的那块。旋转变换改变了它的坐标轴方向，然后我们又将它沿X轴进行了平移，此时它的X轴方向已经和红色平面的X轴方向不一致了。\n变换步骤示意图如下：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/p_r.png)\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/p_r2.png)\n###图层层次(layer hierarchies)\n到目前为止，我们都是将变换直接应用在这些平面上。在3D场景中，经常需要创建一些相互之间有层次结构的物体。这个时候，只需要将变换应用到根层次上，就可以使整个层次结构中的物体整体具有这个变换效果。这种做法非常有用。\n接下来，我们来看看`D_multiplePlanes`这个例子。\n我们在容器层上添加了4个平面。\n当没有任何变换效果时看起来是这样的：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/p5.png)\n如果我们给每一个平面都加上一个Y轴上的旋转变换，我们会得到4个独立的旋转效果：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/p5_2.png)\n但是，如果我们只是在容器层上应用旋转变换，我们会得到一个完全不同的场景效果：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/p5_1.png)\n这种效果，是相机(camera)位置发生改变带来的结果。我们没有移动每个平面，只是改变了视点的位置。\n此函数主要的变换部分代码如下，包含了分别应用于各个平面和应用于容器层的两种变换效果的代码：\n\n\t\n\t//Transformation CATransform3Dt=CATransform3DIdentity;BOOLapplyToContainer=NO;//Apply the transformation to each PLANEif(!applyToContainer){t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);purplePlane.transform=t;t=CATransform3DIdentity;t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);redPlane.transform=t;t=CATransform3DIdentity;t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);orangePlane.transform=t;t=CATransform3DIdentity;t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);yellowPlane.transform=t;}//Apply the transformation to the CONTAINERelse{CATransform3Dt=CATransform3DIdentity;t.m34=1.0/-500;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);container.transform=t;}\n###CATransformLayer\n到目前为止我们所见到的代码都能正常工作，但说实话，作为3D层次结构的根，CALayer不是正确的选择。\n函数`E_multiplePlanesZAxis`展示了为什么。\n这个例子中，我们创建4个XY坐标相同只有Z坐标不同的平面。紫色平面最近，黄色平面最远。\n\t\n\t\n\t//Apply transforms to the PLANESt=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-10);purplePlane.transform=t;t=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-50);redPlane.transform=t;t=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-90);orangePlane.transform=t;t=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-130);yellowPlane.transform=t;\n在旋转这些平面前，我们先让容器层执行了一个旋转变换。\n\t\n\t\n\t//Apply transform to the CONTAINERCATransform3Dt=CATransform3DIdentity;t.m34=1.0/-500;t=CATransform3DRotate(t,80.0f*M_PI/180.0f,0,1,0);container.transform=t;\n你也许希望看到下面这种结果：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/p6_1.png)\n但是，实际上会得到这种结果：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/03/p6.png)\n这是因为CALayer不能处理3D层次结构的深度，它只能将场景处理成相同的Z层次。\n为了修正这个问题，我们需要用一个`CATransformLayers`来做根层对象。\n函数`F_multiplePlanesZAxis`修正了这个问题：\n\t\n\t\n\t//Create the container as a CATransformLayerCATransformLayer*container=[CATransformLayerlayer];container.frame=CGRectMake(0,0,640,300);[self.view.layeraddSublayer:container];\nCATransformLayer是一个特殊的layer。与CALayer的不同之处在于，CATransformLayer本身不会被渲染到屏幕上，只有它的子图层才会被渲染到屏幕上。所以它的一些属性，比如backgroundColor、contents、border等等都没有什么用。要记住这点。\n到这里，这个教程的第一部分就完了。建议你实际运行一下这些函数，也可以试试我没有讲到的`CATransform3DScale`，试试用它做一个缩放变换看。\n如果你有任何问题，可以在twitter上找到我([@bitwaker](http://www.twitter.com/bitwaker))。\n[本教程代码下载](https://github.com/ariok/TB_3DCoreAnimation)\n译自：[Think\n & Build](http://www.thinkandbuild.it/introduction-to-3d-drawing-in-core-animation-part-1/)\n","slug":"oc/Core Animation 3D介绍(第1部分)","published":1,"updated":"2016-11-12T02:34:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms968000g21xwsea3b0g3","content":"<a id=\"more\"></a>\n<p>尊重原创 转自：<a href=\"http://codingobjc.com/blog/2013/06/11/core-animation-3djie-shao-di-1bu-fen/\" target=\"_blank\" rel=\"external\">http://codingobjc.com/blog/2013/06/11/core-animation-3djie-shao-di-1bu-fen/</a></p>\n<p>在本教程中，我将向你介绍Core Animation中用于绘制3D图形的一些技术。<br>我要告诉你的好消息是：我们不必直接使用OpenGL，仅仅用Core Animation就可以很容易的实现一些3D效果。但是，也别太高兴了，因为”用Core Animation来制作一个复杂的3D游戏”也并不是一个好主意。<br>这个教程分两部分。第一部分，我们先讨论下一些3D原理知识，然后运用这些概念来创建一些简单的3D场景。然后在第二部分中，我们将使用Core Animation来制作一个类似于旋转木马的3D场景特效。<br>最终app的预览效果如下：(译注: 原文中这里的视频被墙，因此这里只简单的提供一个图片预览，你可以直接下载例子代码运行即可以看到最终app的效果)<br><img src=\"http://codingobjc.com/images/posts/2013_06_11_core_animation_3d_app_preview.png\" alt=\"\"><br>好，准备好了吗？我们开始写代码吧！<br>首先，下载文章后面的代码。如果你要自己创建项目的话，要记得添加QuartzCore框架。</p>\n<p>###3D和矩阵相关的数学知识(一点点…别担心，只有一点点)<br>要在一个3D空间中绘图，除了标准2D坐标(X和Y)概念外，我们还需要引入一个深度(depth)的概念，也就是要加入第三个坐标轴–Z轴。<br>这样，在空间中，我们只需要简单的改变物体的X、Y和Z坐标，就可以在垂直方向、水平方向或深度方向上移动物体。<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/handed.png\" alt=\"\"><br>在2D或3D空间中，对一个物体执行平移、缩放或旋转这些操作时需要使用矩阵运算。<br>你可以将矩阵想象成一个多维数组。比如，在3D空间中我们使用一个像下面这种格式的4X4矩阵：</p>\n<pre><code>[X][0][0][0][0][Y][0][0][0][0][Z][0][0][0][0][1]\n</code></pre><p>把这个矩阵和物体的每一个坐标点(又称顶点)相乘，我们可以得到物体的一个变换(transformation)效果。<br>严格点讲，前面这个矩阵是用来执行缩放操作的。其中的X、Y、Z值代表每个轴上的缩放值。<br>如果你要进行其他的变换操作，比如旋转或者平移，你需要将矩阵换成其他矩阵格式(scheme)。<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/Screen-Shot-2013-03-20-at-11.02.03-AM.png\" alt=\"\"><br>不要紧张！你不需要知道其他更多原理知识，而且也不必直接进行这些操作。Core Animation会为你完成这些操作，虽然你不知道它是如何做到的，但是它确实会为你完成这些操作，所以不必害怕。<br>当然，就我个人来说，如果我知道它背后是如何工作的(至少知道一些它的基本原理)，我会对我的代码更有自信。因此，如果你想了解更多矩阵相关的知识，建议你读一读这篇<a href=\"http://www.matrix44.net/cms/notes/opengl-3d-graphics/basic-3d-math-matrices\" target=\"_blank\" rel=\"external\">文章</a>。</p>\n<p>###3D变换(Transformations)<br>现在基本上，你已经知道矩阵的作用了，也知道了3D空间是如何构成的。来，我们用Core Animation做一些3D的东西吧。<br>打开TB_3DIntro-&gt;viewController.m文件。<br>我在里面列出了6个分别以A、B、C、D、E、F开头的函数。每一个函数对应了一种不同的3D场景效果。<br>我们先来看看由<code>A_singlePlan</code>函数创造的场景吧。<br>用这个函数，我们画了一个平面，平面绕Y轴旋转了45度。<br>首先，我们创建了一个CALayer，用它来作容器层(当然，并不是一定要这样做，只是我更喜欢不直接在self.view的layer上进行工作)。</p>\n<pre><code>-(void)A_singlePlane{//Create the containerCALayer*container=[CALayerlayer];container.frame=CGRectMake(0,0,640,300);[self.view.layeraddSublayer:container];\n</code></pre><p>然后我们创建了另一个CALayer，用它代表一个平面。</p>\n<pre><code>//Create a PlaneCALayer*purplePlane=[selfaddPlaneToLayer:containersize:CGSizeMake(100,100)position:CGPointMake(250,150)color:[UIColorpurpleColor]];\n</code></pre><p>我写了一个简单的辅助函数，用它将平面直接添加到容器层上，然后返回这个新建的平面层。代码非常简单：</p>\n<pre><code>-(CALayer*)addPlaneToLayer:(CALayer*)containersize:(CGSize)sizeposition:(CGPoint)pointcolor:(UIColor*)color{//Initialize the layerCALayer*plane=[CALayerlayer];//Define position,size and colorsplane.backgroundColor=[colorCGColor];plane.opacity=0.6;plane.frame=CGRectMake(0,0,size.width,size.height);plane.position=point;plane.anchorPoint=CGPointMake(0.5,0.5);plane.borderColor=[[UIColorcolorWithWhite:1.0alpha:0.5]CGColor];plane.borderWidth=3;plane.cornerRadius=10;//Add the layer to the container layer[containeraddSublayer:plane];returnplane;}\n</code></pre><p>最后，我们用CATransform3D来添加变换。<br>啊？？？你一定又想问CATransform3D是什么东西？按住Cmd键点击这个类型名称，你可以发现它是一个结构体，使用了一种很”火星”的语法来表示一个矩阵。<img src=\"http://www.thinkandbuild.it/wp-includes/images/smilies/icon_razz.gif\" alt=\"\"></p>\n<pre><code>structCATransform3D{CGFloatm11,m12,m13,m14;CGFloatm21,m22,m23,m24;CGFloatm31,m32,m33,m34;CGFloatm41,m42,m43,m44;};typedefstructCATransform3DCATransform3D;\n</code></pre><p>旋转变换部分的代码也相当简单：</p>\n<pre><code>//Apply transform to the PLANECATransform3Dt=CATransform3DIdentity;t=CATransform3DRotate(t,45.00f*M_PI/180.0f,0,1,0);purplePlane.transform=t;}\n</code></pre><p>先用单位矩阵<code>CATransform3DIdentity</code>来初始化一个变换(transformation)，然后用<code>CATransform3DRotate</code>函数给变换乘上一个旋转矩阵。<br>CATransform3DRotate这个函数的参数分别表示矩阵，旋转的角度(以弧度为单位)和3个坐标轴上的变换系数。这个例子中，X和Z轴都没受到影响，只对Y轴有影响，物体会在Y轴上旋转45度。<br>下图是运行结果。<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/pa1.png\" alt=\"\"><br>呃……你可以看到，它还不是3D的！我们只是在X轴方向上将一个正方形压扁了。<br>这是由于我们还没有设置视点的值(perspective value)。通常，在绘制3D场景的时候会将场景进行正射投影(Orthographic projection)处理，由此会产生一个扁平的场景。换句话说，在正射投影后你无法看到Z轴上的深度感。<br>要给我们的场景加上空间深度感，我们必须修改变换矩阵的<code>m34</code>参数。这个参数决定了视点的值。<br>现在，来看看<code>B_singlePlanePerspective</code>这个函数，这函数展示了视点的作用。<br>这个函数和前一个函数只有变换部分的代码有所不同：</p>\n<pre><code>//Apply transform to the PLANECATransform3Dt=CATransform3DIdentity;//Add perspective!!!t.m34=1.0/-500;t=CATransform3DRotate(t,degToRad(45.0),0,1,0);purplePlane.transform=t;}\n</code></pre><p>你可以看到，我们直接给矩阵的m34属性赋了一个值。在这里，我不会深入的从数学上解释这个值是如何起作用的。但是我可以告诉你的是，这个值越接近0，视点就越深。<br>下面是两种不同视点值的效果：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/pa_2.png\" alt=\"\"><br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/pa_21.png\" alt=\"\"></p>\n<p>###3D变换的顺序问题(Transformations chain)<br>我们可以将多个矩阵相乘从而将多种变换应用到一个物体上。比如，如果我们想将平移和旋转变换应用到一个物体上，我们可以直接将两个变换矩阵相乘：</p>\n<pre><code>TransformMatrix=TranslateMtx*RotateMtx\n</code></pre><p>数学上，一般情况下乘法都可以使用交换律：</p>\n<pre><code>TranslateMtx*RotateMxt=RotateMtx*TranslateMtx\n</code></pre><p>但是矩阵乘法不适用于交换律。AxB的结果可能和BxA的结果不一样。要记住这一点！<br>接下来<code>C_transformationsChain</code>这个例子中，我们会将2个变换效果按不同的先后顺序应用到2个不同的物体上。<br>以下是主要代码：</p>\n<pre><code>//Apply transformation to the PLANESCATransform3Dt=CATransform3DIdentity;//Purple plane: Perform a rotation and then a translationt=CATransform3DRotate(t,45.0f*M_PI/180.0f,0,0,1);t=CATransform3DTranslate(t,100,0,0);purplePlane.transform=t;//reset the transform matrixt=CATransform3DIdentity;//Red plane: Perform translation first and then the rotationt=CATransform3DTranslate(t,100,0,0);t=CATransform3DRotate(t,45.0f*M_PI/180.0f,0,0,1);redPlane.transform=t;\n</code></pre><p>运行结果如下：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/Screen-Shot-2013-03-20-at-11.47.15-AM.png\" alt=\"\"><br>看到了吗，不同的变换顺序完全导致了不同的效果。<br>我们重点下看一下紫色的那块。旋转变换改变了它的坐标轴方向，然后我们又将它沿X轴进行了平移，此时它的X轴方向已经和红色平面的X轴方向不一致了。<br>变换步骤示意图如下：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/p_r.png\" alt=\"\"><br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/p_r2.png\" alt=\"\"></p>\n<p>###图层层次(layer hierarchies)<br>到目前为止，我们都是将变换直接应用在这些平面上。在3D场景中，经常需要创建一些相互之间有层次结构的物体。这个时候，只需要将变换应用到根层次上，就可以使整个层次结构中的物体整体具有这个变换效果。这种做法非常有用。<br>接下来，我们来看看<code>D_multiplePlanes</code>这个例子。<br>我们在容器层上添加了4个平面。<br>当没有任何变换效果时看起来是这样的：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/p5.png\" alt=\"\"><br>如果我们给每一个平面都加上一个Y轴上的旋转变换，我们会得到4个独立的旋转效果：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/p5_2.png\" alt=\"\"><br>但是，如果我们只是在容器层上应用旋转变换，我们会得到一个完全不同的场景效果：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/p5_1.png\" alt=\"\"><br>这种效果，是相机(camera)位置发生改变带来的结果。我们没有移动每个平面，只是改变了视点的位置。<br>此函数主要的变换部分代码如下，包含了分别应用于各个平面和应用于容器层的两种变换效果的代码：</p>\n<pre><code>//Transformation CATransform3Dt=CATransform3DIdentity;BOOLapplyToContainer=NO;//Apply the transformation to each PLANEif(!applyToContainer){t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);purplePlane.transform=t;t=CATransform3DIdentity;t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);redPlane.transform=t;t=CATransform3DIdentity;t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);orangePlane.transform=t;t=CATransform3DIdentity;t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);yellowPlane.transform=t;}//Apply the transformation to the CONTAINERelse{CATransform3Dt=CATransform3DIdentity;t.m34=1.0/-500;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);container.transform=t;}\n</code></pre><p>###CATransformLayer<br>到目前为止我们所见到的代码都能正常工作，但说实话，作为3D层次结构的根，CALayer不是正确的选择。<br>函数<code>E_multiplePlanesZAxis</code>展示了为什么。<br>这个例子中，我们创建4个XY坐标相同只有Z坐标不同的平面。紫色平面最近，黄色平面最远。</p>\n<pre><code>//Apply transforms to the PLANESt=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-10);purplePlane.transform=t;t=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-50);redPlane.transform=t;t=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-90);orangePlane.transform=t;t=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-130);yellowPlane.transform=t;\n</code></pre><p>在旋转这些平面前，我们先让容器层执行了一个旋转变换。</p>\n<pre><code>//Apply transform to the CONTAINERCATransform3Dt=CATransform3DIdentity;t.m34=1.0/-500;t=CATransform3DRotate(t,80.0f*M_PI/180.0f,0,1,0);container.transform=t;\n</code></pre><p>你也许希望看到下面这种结果：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/p6_1.png\" alt=\"\"><br>但是，实际上会得到这种结果：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/p6.png\" alt=\"\"><br>这是因为CALayer不能处理3D层次结构的深度，它只能将场景处理成相同的Z层次。<br>为了修正这个问题，我们需要用一个<code>CATransformLayers</code>来做根层对象。<br>函数<code>F_multiplePlanesZAxis</code>修正了这个问题：</p>\n<pre><code>//Create the container as a CATransformLayerCATransformLayer*container=[CATransformLayerlayer];container.frame=CGRectMake(0,0,640,300);[self.view.layeraddSublayer:container];\n</code></pre><p>CATransformLayer是一个特殊的layer。与CALayer的不同之处在于，CATransformLayer本身不会被渲染到屏幕上，只有它的子图层才会被渲染到屏幕上。所以它的一些属性，比如backgroundColor、contents、border等等都没有什么用。要记住这点。<br>到这里，这个教程的第一部分就完了。建议你实际运行一下这些函数，也可以试试我没有讲到的<code>CATransform3DScale</code>，试试用它做一个缩放变换看。<br>如果你有任何问题，可以在twitter上找到我(<a href=\"http://www.twitter.com/bitwaker\" target=\"_blank\" rel=\"external\">@bitwaker</a>)。<br><a href=\"https://github.com/ariok/TB_3DCoreAnimation\" target=\"_blank\" rel=\"external\">本教程代码下载</a><br>译自：<a href=\"http://www.thinkandbuild.it/introduction-to-3d-drawing-in-core-animation-part-1/\" target=\"_blank\" rel=\"external\">Think<br> &amp; Build</a></p>\n","excerpt":"","more":"<p>尊重原创 转自：<a href=\"http://codingobjc.com/blog/2013/06/11/core-animation-3djie-shao-di-1bu-fen/\">http://codingobjc.com/blog/2013/06/11/core-animation-3djie-shao-di-1bu-fen/</a></p>\n<p>在本教程中，我将向你介绍Core Animation中用于绘制3D图形的一些技术。<br>我要告诉你的好消息是：我们不必直接使用OpenGL，仅仅用Core Animation就可以很容易的实现一些3D效果。但是，也别太高兴了，因为”用Core Animation来制作一个复杂的3D游戏”也并不是一个好主意。<br>这个教程分两部分。第一部分，我们先讨论下一些3D原理知识，然后运用这些概念来创建一些简单的3D场景。然后在第二部分中，我们将使用Core Animation来制作一个类似于旋转木马的3D场景特效。<br>最终app的预览效果如下：(译注: 原文中这里的视频被墙，因此这里只简单的提供一个图片预览，你可以直接下载例子代码运行即可以看到最终app的效果)<br><img src=\"http://codingobjc.com/images/posts/2013_06_11_core_animation_3d_app_preview.png\" alt=\"\"><br>好，准备好了吗？我们开始写代码吧！<br>首先，下载文章后面的代码。如果你要自己创建项目的话，要记得添加QuartzCore框架。</p>\n<p>###3D和矩阵相关的数学知识(一点点…别担心，只有一点点)<br>要在一个3D空间中绘图，除了标准2D坐标(X和Y)概念外，我们还需要引入一个深度(depth)的概念，也就是要加入第三个坐标轴–Z轴。<br>这样，在空间中，我们只需要简单的改变物体的X、Y和Z坐标，就可以在垂直方向、水平方向或深度方向上移动物体。<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/handed.png\" alt=\"\"><br>在2D或3D空间中，对一个物体执行平移、缩放或旋转这些操作时需要使用矩阵运算。<br>你可以将矩阵想象成一个多维数组。比如，在3D空间中我们使用一个像下面这种格式的4X4矩阵：</p>\n<pre><code>[X][0][0][0][0][Y][0][0][0][0][Z][0][0][0][0][1]\n</code></pre><p>把这个矩阵和物体的每一个坐标点(又称顶点)相乘，我们可以得到物体的一个变换(transformation)效果。<br>严格点讲，前面这个矩阵是用来执行缩放操作的。其中的X、Y、Z值代表每个轴上的缩放值。<br>如果你要进行其他的变换操作，比如旋转或者平移，你需要将矩阵换成其他矩阵格式(scheme)。<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/Screen-Shot-2013-03-20-at-11.02.03-AM.png\" alt=\"\"><br>不要紧张！你不需要知道其他更多原理知识，而且也不必直接进行这些操作。Core Animation会为你完成这些操作，虽然你不知道它是如何做到的，但是它确实会为你完成这些操作，所以不必害怕。<br>当然，就我个人来说，如果我知道它背后是如何工作的(至少知道一些它的基本原理)，我会对我的代码更有自信。因此，如果你想了解更多矩阵相关的知识，建议你读一读这篇<a href=\"http://www.matrix44.net/cms/notes/opengl-3d-graphics/basic-3d-math-matrices\">文章</a>。</p>\n<p>###3D变换(Transformations)<br>现在基本上，你已经知道矩阵的作用了，也知道了3D空间是如何构成的。来，我们用Core Animation做一些3D的东西吧。<br>打开TB_3DIntro-&gt;viewController.m文件。<br>我在里面列出了6个分别以A、B、C、D、E、F开头的函数。每一个函数对应了一种不同的3D场景效果。<br>我们先来看看由<code>A_singlePlan</code>函数创造的场景吧。<br>用这个函数，我们画了一个平面，平面绕Y轴旋转了45度。<br>首先，我们创建了一个CALayer，用它来作容器层(当然，并不是一定要这样做，只是我更喜欢不直接在self.view的layer上进行工作)。</p>\n<pre><code>-(void)A_singlePlane{//Create the containerCALayer*container=[CALayerlayer];container.frame=CGRectMake(0,0,640,300);[self.view.layeraddSublayer:container];\n</code></pre><p>然后我们创建了另一个CALayer，用它代表一个平面。</p>\n<pre><code>//Create a PlaneCALayer*purplePlane=[selfaddPlaneToLayer:containersize:CGSizeMake(100,100)position:CGPointMake(250,150)color:[UIColorpurpleColor]];\n</code></pre><p>我写了一个简单的辅助函数，用它将平面直接添加到容器层上，然后返回这个新建的平面层。代码非常简单：</p>\n<pre><code>-(CALayer*)addPlaneToLayer:(CALayer*)containersize:(CGSize)sizeposition:(CGPoint)pointcolor:(UIColor*)color{//Initialize the layerCALayer*plane=[CALayerlayer];//Define position,size and colorsplane.backgroundColor=[colorCGColor];plane.opacity=0.6;plane.frame=CGRectMake(0,0,size.width,size.height);plane.position=point;plane.anchorPoint=CGPointMake(0.5,0.5);plane.borderColor=[[UIColorcolorWithWhite:1.0alpha:0.5]CGColor];plane.borderWidth=3;plane.cornerRadius=10;//Add the layer to the container layer[containeraddSublayer:plane];returnplane;}\n</code></pre><p>最后，我们用CATransform3D来添加变换。<br>啊？？？你一定又想问CATransform3D是什么东西？按住Cmd键点击这个类型名称，你可以发现它是一个结构体，使用了一种很”火星”的语法来表示一个矩阵。<img src=\"http://www.thinkandbuild.it/wp-includes/images/smilies/icon_razz.gif\" alt=\"\"></p>\n<pre><code>structCATransform3D{CGFloatm11,m12,m13,m14;CGFloatm21,m22,m23,m24;CGFloatm31,m32,m33,m34;CGFloatm41,m42,m43,m44;};typedefstructCATransform3DCATransform3D;\n</code></pre><p>旋转变换部分的代码也相当简单：</p>\n<pre><code>//Apply transform to the PLANECATransform3Dt=CATransform3DIdentity;t=CATransform3DRotate(t,45.00f*M_PI/180.0f,0,1,0);purplePlane.transform=t;}\n</code></pre><p>先用单位矩阵<code>CATransform3DIdentity</code>来初始化一个变换(transformation)，然后用<code>CATransform3DRotate</code>函数给变换乘上一个旋转矩阵。<br>CATransform3DRotate这个函数的参数分别表示矩阵，旋转的角度(以弧度为单位)和3个坐标轴上的变换系数。这个例子中，X和Z轴都没受到影响，只对Y轴有影响，物体会在Y轴上旋转45度。<br>下图是运行结果。<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/pa1.png\" alt=\"\"><br>呃……你可以看到，它还不是3D的！我们只是在X轴方向上将一个正方形压扁了。<br>这是由于我们还没有设置视点的值(perspective value)。通常，在绘制3D场景的时候会将场景进行正射投影(Orthographic projection)处理，由此会产生一个扁平的场景。换句话说，在正射投影后你无法看到Z轴上的深度感。<br>要给我们的场景加上空间深度感，我们必须修改变换矩阵的<code>m34</code>参数。这个参数决定了视点的值。<br>现在，来看看<code>B_singlePlanePerspective</code>这个函数，这函数展示了视点的作用。<br>这个函数和前一个函数只有变换部分的代码有所不同：</p>\n<pre><code>//Apply transform to the PLANECATransform3Dt=CATransform3DIdentity;//Add perspective!!!t.m34=1.0/-500;t=CATransform3DRotate(t,degToRad(45.0),0,1,0);purplePlane.transform=t;}\n</code></pre><p>你可以看到，我们直接给矩阵的m34属性赋了一个值。在这里，我不会深入的从数学上解释这个值是如何起作用的。但是我可以告诉你的是，这个值越接近0，视点就越深。<br>下面是两种不同视点值的效果：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/pa_2.png\" alt=\"\"><br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/pa_21.png\" alt=\"\"></p>\n<p>###3D变换的顺序问题(Transformations chain)<br>我们可以将多个矩阵相乘从而将多种变换应用到一个物体上。比如，如果我们想将平移和旋转变换应用到一个物体上，我们可以直接将两个变换矩阵相乘：</p>\n<pre><code>TransformMatrix=TranslateMtx*RotateMtx\n</code></pre><p>数学上，一般情况下乘法都可以使用交换律：</p>\n<pre><code>TranslateMtx*RotateMxt=RotateMtx*TranslateMtx\n</code></pre><p>但是矩阵乘法不适用于交换律。AxB的结果可能和BxA的结果不一样。要记住这一点！<br>接下来<code>C_transformationsChain</code>这个例子中，我们会将2个变换效果按不同的先后顺序应用到2个不同的物体上。<br>以下是主要代码：</p>\n<pre><code>//Apply transformation to the PLANESCATransform3Dt=CATransform3DIdentity;//Purple plane: Perform a rotation and then a translationt=CATransform3DRotate(t,45.0f*M_PI/180.0f,0,0,1);t=CATransform3DTranslate(t,100,0,0);purplePlane.transform=t;//reset the transform matrixt=CATransform3DIdentity;//Red plane: Perform translation first and then the rotationt=CATransform3DTranslate(t,100,0,0);t=CATransform3DRotate(t,45.0f*M_PI/180.0f,0,0,1);redPlane.transform=t;\n</code></pre><p>运行结果如下：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/Screen-Shot-2013-03-20-at-11.47.15-AM.png\" alt=\"\"><br>看到了吗，不同的变换顺序完全导致了不同的效果。<br>我们重点下看一下紫色的那块。旋转变换改变了它的坐标轴方向，然后我们又将它沿X轴进行了平移，此时它的X轴方向已经和红色平面的X轴方向不一致了。<br>变换步骤示意图如下：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/p_r.png\" alt=\"\"><br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/p_r2.png\" alt=\"\"></p>\n<p>###图层层次(layer hierarchies)<br>到目前为止，我们都是将变换直接应用在这些平面上。在3D场景中，经常需要创建一些相互之间有层次结构的物体。这个时候，只需要将变换应用到根层次上，就可以使整个层次结构中的物体整体具有这个变换效果。这种做法非常有用。<br>接下来，我们来看看<code>D_multiplePlanes</code>这个例子。<br>我们在容器层上添加了4个平面。<br>当没有任何变换效果时看起来是这样的：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/p5.png\" alt=\"\"><br>如果我们给每一个平面都加上一个Y轴上的旋转变换，我们会得到4个独立的旋转效果：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/p5_2.png\" alt=\"\"><br>但是，如果我们只是在容器层上应用旋转变换，我们会得到一个完全不同的场景效果：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/p5_1.png\" alt=\"\"><br>这种效果，是相机(camera)位置发生改变带来的结果。我们没有移动每个平面，只是改变了视点的位置。<br>此函数主要的变换部分代码如下，包含了分别应用于各个平面和应用于容器层的两种变换效果的代码：</p>\n<pre><code>//Transformation CATransform3Dt=CATransform3DIdentity;BOOLapplyToContainer=NO;//Apply the transformation to each PLANEif(!applyToContainer){t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);purplePlane.transform=t;t=CATransform3DIdentity;t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);redPlane.transform=t;t=CATransform3DIdentity;t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);orangePlane.transform=t;t=CATransform3DIdentity;t.m34=1.0/-500.0;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);yellowPlane.transform=t;}//Apply the transformation to the CONTAINERelse{CATransform3Dt=CATransform3DIdentity;t.m34=1.0/-500;t=CATransform3DRotate(t,degToRad(60.0),0,1,0);container.transform=t;}\n</code></pre><p>###CATransformLayer<br>到目前为止我们所见到的代码都能正常工作，但说实话，作为3D层次结构的根，CALayer不是正确的选择。<br>函数<code>E_multiplePlanesZAxis</code>展示了为什么。<br>这个例子中，我们创建4个XY坐标相同只有Z坐标不同的平面。紫色平面最近，黄色平面最远。</p>\n<pre><code>//Apply transforms to the PLANESt=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-10);purplePlane.transform=t;t=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-50);redPlane.transform=t;t=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-90);orangePlane.transform=t;t=CATransform3DIdentity;t=CATransform3DTranslate(t,0,0,-130);yellowPlane.transform=t;\n</code></pre><p>在旋转这些平面前，我们先让容器层执行了一个旋转变换。</p>\n<pre><code>//Apply transform to the CONTAINERCATransform3Dt=CATransform3DIdentity;t.m34=1.0/-500;t=CATransform3DRotate(t,80.0f*M_PI/180.0f,0,1,0);container.transform=t;\n</code></pre><p>你也许希望看到下面这种结果：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/p6_1.png\" alt=\"\"><br>但是，实际上会得到这种结果：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/03/p6.png\" alt=\"\"><br>这是因为CALayer不能处理3D层次结构的深度，它只能将场景处理成相同的Z层次。<br>为了修正这个问题，我们需要用一个<code>CATransformLayers</code>来做根层对象。<br>函数<code>F_multiplePlanesZAxis</code>修正了这个问题：</p>\n<pre><code>//Create the container as a CATransformLayerCATransformLayer*container=[CATransformLayerlayer];container.frame=CGRectMake(0,0,640,300);[self.view.layeraddSublayer:container];\n</code></pre><p>CATransformLayer是一个特殊的layer。与CALayer的不同之处在于，CATransformLayer本身不会被渲染到屏幕上，只有它的子图层才会被渲染到屏幕上。所以它的一些属性，比如backgroundColor、contents、border等等都没有什么用。要记住这点。<br>到这里，这个教程的第一部分就完了。建议你实际运行一下这些函数，也可以试试我没有讲到的<code>CATransform3DScale</code>，试试用它做一个缩放变换看。<br>如果你有任何问题，可以在twitter上找到我(<a href=\"http://www.twitter.com/bitwaker\">@bitwaker</a>)。<br><a href=\"https://github.com/ariok/TB_3DCoreAnimation\">本教程代码下载</a><br>译自：<a href=\"http://www.thinkandbuild.it/introduction-to-3d-drawing-in-core-animation-part-1/\">Think<br> &amp; Build</a></p>"},{"title":"Core Animation 3D介绍(第2部分)","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n尊重原创 转自：http://codingobjc.com/blog/2013/06/24/core-animation-3djie-shao-di-2bu-fen/\n\n在[上一篇](http://rockonmycode.com/blog/2013/06/11/core-animation-3djie-shao-di-1bu-fen/)教程中，我们已经学习了Core\n Animation中3D绘图的基本方法。这篇教程，我们准备深入一些，讲讲如何创建一个可交互的3D场景。我们将会创建一个类似于旋转木马的3D场景界面，用户可以通过拖拽手势来旋转界面。\n可能你已经在上一篇教程中见过最终APP的样子了，但是，让我们再来看一次吧：\n![](http://codingobjc.com/images/posts/2013_06_11_core_animation_3d_app_preview.png)\n你可以直接下载教程的[源代码](https://github.com/ariok/TB_3DCoreAnimation)。本篇教程的源代码和上一篇教程中的源代码在同一个代码仓库里面，但是我做了一些修改，为这篇教程建立了一个新的target。\n###概述\n这个程序，我们把工作分成了以下几个部分。\n####3D\n因为我们需要3D效果，所以我们需要使用一个透视视图来进行绘制工作。为了构造旋转木马效果，我们将会建立一个3D层次体系。正如前一篇教程中介绍过的，用CATransformLayer来做层次体系中的根是不错的选择。\n####平面\n旋转木马效果由一系列平面构成。我们将使用CAGradientLayer来表示这些平面。CAGradientLayer是CALayer的一个子类，用它可以制作渐变背景色，会比纯色背景要好看一些。\n我们会对这些平面进行一些平移和旋转操作，使它们沿着旋转木马的圆周排列。\n####手势\n获取用户的手势非常简单。我们只需要使用一个手势识别器(Gesture Recognizer)就可以了。然后，我们追踪用户的动作，将手势数据转换成角度值，用这个角度值来旋转界面。\n好了，现在你应该已经知道这个项目有哪些东西要完成了吧？启动XCode吧！\n###写代码吧\n展开项目中的TB_3DPlanes文件夹，然后打开ViewController.m文件。\n我们从viewDidLoad这个函数开始：\n\t1\n\t2\n\t3\n\t4\n\t5\n\t6\n\t7\n\t8\n\t9\n\t10\n\t11\n\t12\n\t13\n\t14\n\t15\n\t16\n\t17\n\t18\n\t19\n\t20\n\t21\n\t22\n\t23\n\t24\n\t25\n\t26\n\t\n\t-(void)viewDidLoad{[superviewDidLoad];//Initialize the TransformLayertransformLayer=[CATransformLayerlayer];transformLayer.frame=self.view.bounds;[self.view.layeraddSublayer:transformLayer];angle=0;XPanOffset=0;//Create 5 planes[selfaddPlane];[selfaddPlane];[selfaddPlane];[selfaddPlane];[selfaddPlane];//Force the first animation to set the planes in place[selfanimate];//Initialize the Pan gesture recognizerUIPanGestureRecognizer*panGesture=[[UIPanGestureRecognizeralloc]initWithTarget:selfaction:@selector(pan:)];[self.viewaddGestureRecognizer:panGesture];}\n或许这个函数中有许多东西你还不完全明白是什么意思。但是，确实从这里开始就是核心部分的代码了。你可以暂时不用在这里纠结，继续阅读，后面会解释这些代码的意思的。![](http://www.thinkandbuild.it/wp-includes/images/smilies/icon_smile.gif)\n很显然，我们先用CATransformLayer创建了一个根图层对象(transformLayer)，然后我们用addPlane函数向场景中添加了5个平面，并且我们将用pan:函数来处理拖拽手势。\n###绘制平面\naddPlane函数的代码也是相当直观的。它只是用CAGradientLayer和一些参数创建了一个图层罢了。然后将图层添加到了transformLayer上.\n\t1\n\t2\n\t3\n\t4\n\t5\n\t6\n\t7\n\t8\n\t9\n\t10\n\t11\n\t12\n\t13\n\t14\n\t15\n\t16\n\t17\n\t18\n\t19\n\t20\n\t21\n\t22\n\t23\n\t24\n\t25\n\t26\n\t27\n\t28\n\t29\n\t30\n\t31\n\t32\n\t33\n\t34\n\t35\n\t36\n\t37\n\t38\n\t\n\t/** A simple function to create a CAGradientLayer **/-(void)addPlane{CGSizeplaneSize=CGSizeMake(250,150);//Initialize the layerCAGradientLayer*layer=[CAGradientLayerlayer];//Set the frame and the anchorPointlayer.frame=CGRectMake(480/2-planeSize.width/2,320/2-planeSize.height/2-20,planeSize.width,planeSize.height);layer.anchorPoint=CGPointMake(0.5,0.5);//Set borders and cornerRadiuslayer.borderColor=[[UIColorcolorWithWhite:1.0alpha:0.3]CGColor];layer.cornerRadius=10;layer.borderWidth=4;//Set the gradient color for the plane backgroundlayer.colors=[NSArrayarrayWithObjects:(id)[UIColorpurpleColor].CGColor,(id)[UIColorredColor].CGColor,nil];layer.locations=[NSArrayarrayWithObjects:[NSNumbernumberWithFloat:0.0f],[NSNumbernumberWithFloat:1.0f],nil];//Set the shadowlayer.shadowColor=[[UIColorblackColor]CGColor];layer.shadowOpacity=1;layer.shadowRadius=20;//The double side has to be setted if we want to see the plane when its face is turned backlayer.doubleSided=YES;//Add the plane to the transformLayer[transformLayeraddSublayer:layer];}\n这里唯一需要解释一下的是doubleSide属性。将它设置成YES，表示我们希望图层的背面也被绘制出来。当一个平面在Y轴上旋转接近180度的时候，我们仍然可以在场景中看到它，只是它旋转到了相反的方向。\n为了更形象地说明这个问题，可以看看下图doubleSide为NO和YES时的对比。\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/04/double_side.png)\n看了图，一下就明白了吧？设置成NO的时候，被旋转到背对着我们的那些平面都不会被绘制出来。\n也许你已经注意到了，在viewDidLoad函数中我们添加了5个平面，但是这些平面并不是按位置排列在场景中的。在addPlane函数中，它们被添加到了同一个位置(参见frame属性)。\n###更新平面位置\n在viewDidLoad函数里，平面被创建后，我们调用了animate方法。这个函数的主要作用是更新各个平面的位置。这里是我们第一次调用这个函数，这个时候并没有发生任何触摸事件，这里调用它只是为了让各个平面沿着旋转木马的圆周排列好。\n我们来看看这个函数的代码：\n\t1\n\t2\n\t3\n\t4\n\t5\n\t6\n\t7\n\t8\n\t9\n\t10\n\t11\n\t12\n\t13\n\t14\n\t15\n\t16\n\t17\n\t18\n\t19\n\t20\n\t21\n\t22\n\t23\n\t24\n\t25\n\t26\n\t27\n\t28\n\t29\n\t30\n\t31\n\t32\n\t\n\t/** This function performs the transformation on each plane **/-(void)animate{//Define the degrees needed for each plane to create a circlefloatdegForPlane=360/[[transformLayersublayers]count];//The current angle offset (initially it is 0... it will change through the pan function)floatdegX=angle;for(CALayer*layerin[transformLayersublayers]){//Create the Matrix identityCATransform3Dt=CATransform3DIdentity;//Setup the perspective modifying the matrix elementat [3][4]t.m34=1.0f/-1000.0f;//Perform rotate on the matrix identityt=CATransform3DRotate(t,degToRad(degX),0.0f,1.0f,0.0f);//Perform translate on the current transform matrix (identity + rotate)t=CATransform3DTranslate(t,0.0f,0.0f,250.0f);//Avoid animations[CATransactionsetAnimationDuration:0.0];//apply the transoform on the current layerlayer.transform=t;//Add the degree needed for the next planedegX+=degForPlane;}}\n其中，defForPlane变量是指沿着360度圆周上每个平面需要旋转的角度。看下图会容易理解一些：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/04/planes_circle_1.png)\n圆周上的5个平面需要旋转一定的角度。这个角度从0开始，每个平面增加”360/平面总数”度。\nangle变量的值目前还是零，我们稍后会详细解释它的作用。\nanimate函数循环遍历transformLayer的所有子图层(5个平面)，为每一个平面加上一些变换效果：\n第一个变换效果是改变视点，和我们在上一篇教程中的做法一样，直接给m34属性赋一个值，从而可以绘制出平面的3D空间深度。\n另外2个变换效果需要一点点数值计算。我们前面已经谈到了，每个平面需要一个旋转角度。但是我们跳过了一个关键点，还没讲。\n如果我们只是给每个平面加上一个旋转角度，我们只会得到下面这种效果：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/04/planes_center.png)\n你可以看到，这种效果不行，我们还需要给每个平面加上平移变换，使让它们沿着圆周排列。\n最后一步是将这些变换应用到各个平面上。只需要将变换赋值给当前平面的transform属性就可以了，赋值后，下一个平面的degX值会增加”degForPlane”度。\n###拖拽手势\npan:函数是拖拽手势的处理函数。下面是该函数的代码：\n\t1\n\t2\n\t3\n\t4\n\t5\n\t6\n\t7\n\t8\n\t9\n\t10\n\t11\n\t12\n\t13\n\t14\n\t15\n\t16\n\t17\n\t18\n\t19\n\t20\n\t21\n\t22\n\t23\n\t\n\t-(void)pan:(UIPanGestureRecognizer*)gesture{//Get the current translation on the XfloatxOffset=[gesturetranslationInView:self.view].x;//When gesture begin, reset the offsetif(gesture.state==UIGestureRecognizerStateBegan){XPanOffset=0;}//the distance covered since the last gesture event (I slow down a bit the final rotation multiplying by 0.5)floatmovedBy=xOffset*0.5-XPanOffset;//Calculate the offset from the previous gesture eventXPanOffset+=movedBy;//Add the offset to the current angleangle+=movedBy;//Update the plane[selfanimate];}\n拖拽手势是一个连续性的手势。从手势开始，直到所有手指离开屏幕之前，只要手指一移动，pan函数就会被调用。\n为了将这些手势数据转换成对旋转木马动画有用的数据，我们需要获得每次移动前的X坐标值。\n这里我们使用了XPanOffset这个变量来存储位置信息。当手势发生移动后，我们会计算出本次移动的距离(movedBy变量)。这个移动距离会被加到XPanOffset中，也会被加到当前的angle变量上。\n然后调用animate函数就可以将所有平面旋转到新角度。\n就这样，完成了！![](http://www.thinkandbuild.it/wp-includes/images/smilies/icon_smile.gif)\n这个简单的例子展示了只需用Core Animation就可以做出来的一些3D效果。\n祝你玩的愉快！有任何疑问或建议，请随时在[twitter](http://twitter.com/bitwaker)上联系我。\n[教程源代码下载](https://github.com/ariok/TB_3DCoreAnimation)\n译自：[Think\n & Build](http://www.thinkandbuild.it/introduction-to-3d-drawing-in-core-animation-part-2/)\n","source":"_posts/oc/Core Animation 3D介绍(第2部分).md","raw":"---\ntitle: Core Animation 3D介绍(第2部分)\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n尊重原创 转自：http://codingobjc.com/blog/2013/06/24/core-animation-3djie-shao-di-2bu-fen/\n\n在[上一篇](http://rockonmycode.com/blog/2013/06/11/core-animation-3djie-shao-di-1bu-fen/)教程中，我们已经学习了Core\n Animation中3D绘图的基本方法。这篇教程，我们准备深入一些，讲讲如何创建一个可交互的3D场景。我们将会创建一个类似于旋转木马的3D场景界面，用户可以通过拖拽手势来旋转界面。\n可能你已经在上一篇教程中见过最终APP的样子了，但是，让我们再来看一次吧：\n![](http://codingobjc.com/images/posts/2013_06_11_core_animation_3d_app_preview.png)\n你可以直接下载教程的[源代码](https://github.com/ariok/TB_3DCoreAnimation)。本篇教程的源代码和上一篇教程中的源代码在同一个代码仓库里面，但是我做了一些修改，为这篇教程建立了一个新的target。\n###概述\n这个程序，我们把工作分成了以下几个部分。\n####3D\n因为我们需要3D效果，所以我们需要使用一个透视视图来进行绘制工作。为了构造旋转木马效果，我们将会建立一个3D层次体系。正如前一篇教程中介绍过的，用CATransformLayer来做层次体系中的根是不错的选择。\n####平面\n旋转木马效果由一系列平面构成。我们将使用CAGradientLayer来表示这些平面。CAGradientLayer是CALayer的一个子类，用它可以制作渐变背景色，会比纯色背景要好看一些。\n我们会对这些平面进行一些平移和旋转操作，使它们沿着旋转木马的圆周排列。\n####手势\n获取用户的手势非常简单。我们只需要使用一个手势识别器(Gesture Recognizer)就可以了。然后，我们追踪用户的动作，将手势数据转换成角度值，用这个角度值来旋转界面。\n好了，现在你应该已经知道这个项目有哪些东西要完成了吧？启动XCode吧！\n###写代码吧\n展开项目中的TB_3DPlanes文件夹，然后打开ViewController.m文件。\n我们从viewDidLoad这个函数开始：\n\t1\n\t2\n\t3\n\t4\n\t5\n\t6\n\t7\n\t8\n\t9\n\t10\n\t11\n\t12\n\t13\n\t14\n\t15\n\t16\n\t17\n\t18\n\t19\n\t20\n\t21\n\t22\n\t23\n\t24\n\t25\n\t26\n\t\n\t-(void)viewDidLoad{[superviewDidLoad];//Initialize the TransformLayertransformLayer=[CATransformLayerlayer];transformLayer.frame=self.view.bounds;[self.view.layeraddSublayer:transformLayer];angle=0;XPanOffset=0;//Create 5 planes[selfaddPlane];[selfaddPlane];[selfaddPlane];[selfaddPlane];[selfaddPlane];//Force the first animation to set the planes in place[selfanimate];//Initialize the Pan gesture recognizerUIPanGestureRecognizer*panGesture=[[UIPanGestureRecognizeralloc]initWithTarget:selfaction:@selector(pan:)];[self.viewaddGestureRecognizer:panGesture];}\n或许这个函数中有许多东西你还不完全明白是什么意思。但是，确实从这里开始就是核心部分的代码了。你可以暂时不用在这里纠结，继续阅读，后面会解释这些代码的意思的。![](http://www.thinkandbuild.it/wp-includes/images/smilies/icon_smile.gif)\n很显然，我们先用CATransformLayer创建了一个根图层对象(transformLayer)，然后我们用addPlane函数向场景中添加了5个平面，并且我们将用pan:函数来处理拖拽手势。\n###绘制平面\naddPlane函数的代码也是相当直观的。它只是用CAGradientLayer和一些参数创建了一个图层罢了。然后将图层添加到了transformLayer上.\n\t1\n\t2\n\t3\n\t4\n\t5\n\t6\n\t7\n\t8\n\t9\n\t10\n\t11\n\t12\n\t13\n\t14\n\t15\n\t16\n\t17\n\t18\n\t19\n\t20\n\t21\n\t22\n\t23\n\t24\n\t25\n\t26\n\t27\n\t28\n\t29\n\t30\n\t31\n\t32\n\t33\n\t34\n\t35\n\t36\n\t37\n\t38\n\t\n\t/** A simple function to create a CAGradientLayer **/-(void)addPlane{CGSizeplaneSize=CGSizeMake(250,150);//Initialize the layerCAGradientLayer*layer=[CAGradientLayerlayer];//Set the frame and the anchorPointlayer.frame=CGRectMake(480/2-planeSize.width/2,320/2-planeSize.height/2-20,planeSize.width,planeSize.height);layer.anchorPoint=CGPointMake(0.5,0.5);//Set borders and cornerRadiuslayer.borderColor=[[UIColorcolorWithWhite:1.0alpha:0.3]CGColor];layer.cornerRadius=10;layer.borderWidth=4;//Set the gradient color for the plane backgroundlayer.colors=[NSArrayarrayWithObjects:(id)[UIColorpurpleColor].CGColor,(id)[UIColorredColor].CGColor,nil];layer.locations=[NSArrayarrayWithObjects:[NSNumbernumberWithFloat:0.0f],[NSNumbernumberWithFloat:1.0f],nil];//Set the shadowlayer.shadowColor=[[UIColorblackColor]CGColor];layer.shadowOpacity=1;layer.shadowRadius=20;//The double side has to be setted if we want to see the plane when its face is turned backlayer.doubleSided=YES;//Add the plane to the transformLayer[transformLayeraddSublayer:layer];}\n这里唯一需要解释一下的是doubleSide属性。将它设置成YES，表示我们希望图层的背面也被绘制出来。当一个平面在Y轴上旋转接近180度的时候，我们仍然可以在场景中看到它，只是它旋转到了相反的方向。\n为了更形象地说明这个问题，可以看看下图doubleSide为NO和YES时的对比。\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/04/double_side.png)\n看了图，一下就明白了吧？设置成NO的时候，被旋转到背对着我们的那些平面都不会被绘制出来。\n也许你已经注意到了，在viewDidLoad函数中我们添加了5个平面，但是这些平面并不是按位置排列在场景中的。在addPlane函数中，它们被添加到了同一个位置(参见frame属性)。\n###更新平面位置\n在viewDidLoad函数里，平面被创建后，我们调用了animate方法。这个函数的主要作用是更新各个平面的位置。这里是我们第一次调用这个函数，这个时候并没有发生任何触摸事件，这里调用它只是为了让各个平面沿着旋转木马的圆周排列好。\n我们来看看这个函数的代码：\n\t1\n\t2\n\t3\n\t4\n\t5\n\t6\n\t7\n\t8\n\t9\n\t10\n\t11\n\t12\n\t13\n\t14\n\t15\n\t16\n\t17\n\t18\n\t19\n\t20\n\t21\n\t22\n\t23\n\t24\n\t25\n\t26\n\t27\n\t28\n\t29\n\t30\n\t31\n\t32\n\t\n\t/** This function performs the transformation on each plane **/-(void)animate{//Define the degrees needed for each plane to create a circlefloatdegForPlane=360/[[transformLayersublayers]count];//The current angle offset (initially it is 0... it will change through the pan function)floatdegX=angle;for(CALayer*layerin[transformLayersublayers]){//Create the Matrix identityCATransform3Dt=CATransform3DIdentity;//Setup the perspective modifying the matrix elementat [3][4]t.m34=1.0f/-1000.0f;//Perform rotate on the matrix identityt=CATransform3DRotate(t,degToRad(degX),0.0f,1.0f,0.0f);//Perform translate on the current transform matrix (identity + rotate)t=CATransform3DTranslate(t,0.0f,0.0f,250.0f);//Avoid animations[CATransactionsetAnimationDuration:0.0];//apply the transoform on the current layerlayer.transform=t;//Add the degree needed for the next planedegX+=degForPlane;}}\n其中，defForPlane变量是指沿着360度圆周上每个平面需要旋转的角度。看下图会容易理解一些：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/04/planes_circle_1.png)\n圆周上的5个平面需要旋转一定的角度。这个角度从0开始，每个平面增加”360/平面总数”度。\nangle变量的值目前还是零，我们稍后会详细解释它的作用。\nanimate函数循环遍历transformLayer的所有子图层(5个平面)，为每一个平面加上一些变换效果：\n第一个变换效果是改变视点，和我们在上一篇教程中的做法一样，直接给m34属性赋一个值，从而可以绘制出平面的3D空间深度。\n另外2个变换效果需要一点点数值计算。我们前面已经谈到了，每个平面需要一个旋转角度。但是我们跳过了一个关键点，还没讲。\n如果我们只是给每个平面加上一个旋转角度，我们只会得到下面这种效果：\n![](http://www.thinkandbuild.it/wp-content/uploads/2013/04/planes_center.png)\n你可以看到，这种效果不行，我们还需要给每个平面加上平移变换，使让它们沿着圆周排列。\n最后一步是将这些变换应用到各个平面上。只需要将变换赋值给当前平面的transform属性就可以了，赋值后，下一个平面的degX值会增加”degForPlane”度。\n###拖拽手势\npan:函数是拖拽手势的处理函数。下面是该函数的代码：\n\t1\n\t2\n\t3\n\t4\n\t5\n\t6\n\t7\n\t8\n\t9\n\t10\n\t11\n\t12\n\t13\n\t14\n\t15\n\t16\n\t17\n\t18\n\t19\n\t20\n\t21\n\t22\n\t23\n\t\n\t-(void)pan:(UIPanGestureRecognizer*)gesture{//Get the current translation on the XfloatxOffset=[gesturetranslationInView:self.view].x;//When gesture begin, reset the offsetif(gesture.state==UIGestureRecognizerStateBegan){XPanOffset=0;}//the distance covered since the last gesture event (I slow down a bit the final rotation multiplying by 0.5)floatmovedBy=xOffset*0.5-XPanOffset;//Calculate the offset from the previous gesture eventXPanOffset+=movedBy;//Add the offset to the current angleangle+=movedBy;//Update the plane[selfanimate];}\n拖拽手势是一个连续性的手势。从手势开始，直到所有手指离开屏幕之前，只要手指一移动，pan函数就会被调用。\n为了将这些手势数据转换成对旋转木马动画有用的数据，我们需要获得每次移动前的X坐标值。\n这里我们使用了XPanOffset这个变量来存储位置信息。当手势发生移动后，我们会计算出本次移动的距离(movedBy变量)。这个移动距离会被加到XPanOffset中，也会被加到当前的angle变量上。\n然后调用animate函数就可以将所有平面旋转到新角度。\n就这样，完成了！![](http://www.thinkandbuild.it/wp-includes/images/smilies/icon_smile.gif)\n这个简单的例子展示了只需用Core Animation就可以做出来的一些3D效果。\n祝你玩的愉快！有任何疑问或建议，请随时在[twitter](http://twitter.com/bitwaker)上联系我。\n[教程源代码下载](https://github.com/ariok/TB_3DCoreAnimation)\n译自：[Think\n & Build](http://www.thinkandbuild.it/introduction-to-3d-drawing-in-core-animation-part-2/)\n","slug":"oc/Core Animation 3D介绍(第2部分)","published":1,"updated":"2016-11-12T02:36:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms96a000i21xwcj4iom5c","content":"<a id=\"more\"></a>\n<p>尊重原创 转自：<a href=\"http://codingobjc.com/blog/2013/06/24/core-animation-3djie-shao-di-2bu-fen/\" target=\"_blank\" rel=\"external\">http://codingobjc.com/blog/2013/06/24/core-animation-3djie-shao-di-2bu-fen/</a></p>\n<p>在<a href=\"http://rockonmycode.com/blog/2013/06/11/core-animation-3djie-shao-di-1bu-fen/\" target=\"_blank\" rel=\"external\">上一篇</a>教程中，我们已经学习了Core<br> Animation中3D绘图的基本方法。这篇教程，我们准备深入一些，讲讲如何创建一个可交互的3D场景。我们将会创建一个类似于旋转木马的3D场景界面，用户可以通过拖拽手势来旋转界面。<br>可能你已经在上一篇教程中见过最终APP的样子了，但是，让我们再来看一次吧：<br><img src=\"http://codingobjc.com/images/posts/2013_06_11_core_animation_3d_app_preview.png\" alt=\"\"><br>你可以直接下载教程的<a href=\"https://github.com/ariok/TB_3DCoreAnimation\" target=\"_blank\" rel=\"external\">源代码</a>。本篇教程的源代码和上一篇教程中的源代码在同一个代码仓库里面，但是我做了一些修改，为这篇教程建立了一个新的target。</p>\n<p>###概述<br>这个程序，我们把工作分成了以下几个部分。</p>\n<p>####3D<br>因为我们需要3D效果，所以我们需要使用一个透视视图来进行绘制工作。为了构造旋转木马效果，我们将会建立一个3D层次体系。正如前一篇教程中介绍过的，用CATransformLayer来做层次体系中的根是不错的选择。</p>\n<p>####平面<br>旋转木马效果由一系列平面构成。我们将使用CAGradientLayer来表示这些平面。CAGradientLayer是CALayer的一个子类，用它可以制作渐变背景色，会比纯色背景要好看一些。<br>我们会对这些平面进行一些平移和旋转操作，使它们沿着旋转木马的圆周排列。</p>\n<p>####手势<br>获取用户的手势非常简单。我们只需要使用一个手势识别器(Gesture Recognizer)就可以了。然后，我们追踪用户的动作，将手势数据转换成角度值，用这个角度值来旋转界面。<br>好了，现在你应该已经知道这个项目有哪些东西要完成了吧？启动XCode吧！</p>\n<p>###写代码吧<br>展开项目中的TB_3DPlanes文件夹，然后打开ViewController.m文件。<br>我们从viewDidLoad这个函数开始：<br>    1<br>    2<br>    3<br>    4<br>    5<br>    6<br>    7<br>    8<br>    9<br>    10<br>    11<br>    12<br>    13<br>    14<br>    15<br>    16<br>    17<br>    18<br>    19<br>    20<br>    21<br>    22<br>    23<br>    24<br>    25<br>    26</p>\n<pre><code>-(void)viewDidLoad{[superviewDidLoad];//Initialize the TransformLayertransformLayer=[CATransformLayerlayer];transformLayer.frame=self.view.bounds;[self.view.layeraddSublayer:transformLayer];angle=0;XPanOffset=0;//Create 5 planes[selfaddPlane];[selfaddPlane];[selfaddPlane];[selfaddPlane];[selfaddPlane];//Force the first animation to set the planes in place[selfanimate];//Initialize the Pan gesture recognizerUIPanGestureRecognizer*panGesture=[[UIPanGestureRecognizeralloc]initWithTarget:selfaction:@selector(pan:)];[self.viewaddGestureRecognizer:panGesture];}\n</code></pre><p>或许这个函数中有许多东西你还不完全明白是什么意思。但是，确实从这里开始就是核心部分的代码了。你可以暂时不用在这里纠结，继续阅读，后面会解释这些代码的意思的。<img src=\"http://www.thinkandbuild.it/wp-includes/images/smilies/icon_smile.gif\" alt=\"\"><br>很显然，我们先用CATransformLayer创建了一个根图层对象(transformLayer)，然后我们用addPlane函数向场景中添加了5个平面，并且我们将用pan:函数来处理拖拽手势。</p>\n<p>###绘制平面<br>addPlane函数的代码也是相当直观的。它只是用CAGradientLayer和一些参数创建了一个图层罢了。然后将图层添加到了transformLayer上.<br>    1<br>    2<br>    3<br>    4<br>    5<br>    6<br>    7<br>    8<br>    9<br>    10<br>    11<br>    12<br>    13<br>    14<br>    15<br>    16<br>    17<br>    18<br>    19<br>    20<br>    21<br>    22<br>    23<br>    24<br>    25<br>    26<br>    27<br>    28<br>    29<br>    30<br>    31<br>    32<br>    33<br>    34<br>    35<br>    36<br>    37<br>    38</p>\n<pre><code>/** A simple function to create a CAGradientLayer **/-(void)addPlane{CGSizeplaneSize=CGSizeMake(250,150);//Initialize the layerCAGradientLayer*layer=[CAGradientLayerlayer];//Set the frame and the anchorPointlayer.frame=CGRectMake(480/2-planeSize.width/2,320/2-planeSize.height/2-20,planeSize.width,planeSize.height);layer.anchorPoint=CGPointMake(0.5,0.5);//Set borders and cornerRadiuslayer.borderColor=[[UIColorcolorWithWhite:1.0alpha:0.3]CGColor];layer.cornerRadius=10;layer.borderWidth=4;//Set the gradient color for the plane backgroundlayer.colors=[NSArrayarrayWithObjects:(id)[UIColorpurpleColor].CGColor,(id)[UIColorredColor].CGColor,nil];layer.locations=[NSArrayarrayWithObjects:[NSNumbernumberWithFloat:0.0f],[NSNumbernumberWithFloat:1.0f],nil];//Set the shadowlayer.shadowColor=[[UIColorblackColor]CGColor];layer.shadowOpacity=1;layer.shadowRadius=20;//The double side has to be setted if we want to see the plane when its face is turned backlayer.doubleSided=YES;//Add the plane to the transformLayer[transformLayeraddSublayer:layer];}\n</code></pre><p>这里唯一需要解释一下的是doubleSide属性。将它设置成YES，表示我们希望图层的背面也被绘制出来。当一个平面在Y轴上旋转接近180度的时候，我们仍然可以在场景中看到它，只是它旋转到了相反的方向。<br>为了更形象地说明这个问题，可以看看下图doubleSide为NO和YES时的对比。<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/04/double_side.png\" alt=\"\"><br>看了图，一下就明白了吧？设置成NO的时候，被旋转到背对着我们的那些平面都不会被绘制出来。<br>也许你已经注意到了，在viewDidLoad函数中我们添加了5个平面，但是这些平面并不是按位置排列在场景中的。在addPlane函数中，它们被添加到了同一个位置(参见frame属性)。</p>\n<p>###更新平面位置<br>在viewDidLoad函数里，平面被创建后，我们调用了animate方法。这个函数的主要作用是更新各个平面的位置。这里是我们第一次调用这个函数，这个时候并没有发生任何触摸事件，这里调用它只是为了让各个平面沿着旋转木马的圆周排列好。<br>我们来看看这个函数的代码：<br>    1<br>    2<br>    3<br>    4<br>    5<br>    6<br>    7<br>    8<br>    9<br>    10<br>    11<br>    12<br>    13<br>    14<br>    15<br>    16<br>    17<br>    18<br>    19<br>    20<br>    21<br>    22<br>    23<br>    24<br>    25<br>    26<br>    27<br>    28<br>    29<br>    30<br>    31<br>    32</p>\n<pre><code>/** This function performs the transformation on each plane **/-(void)animate{//Define the degrees needed for each plane to create a circlefloatdegForPlane=360/[[transformLayersublayers]count];//The current angle offset (initially it is 0... it will change through the pan function)floatdegX=angle;for(CALayer*layerin[transformLayersublayers]){//Create the Matrix identityCATransform3Dt=CATransform3DIdentity;//Setup the perspective modifying the matrix elementat [3][4]t.m34=1.0f/-1000.0f;//Perform rotate on the matrix identityt=CATransform3DRotate(t,degToRad(degX),0.0f,1.0f,0.0f);//Perform translate on the current transform matrix (identity + rotate)t=CATransform3DTranslate(t,0.0f,0.0f,250.0f);//Avoid animations[CATransactionsetAnimationDuration:0.0];//apply the transoform on the current layerlayer.transform=t;//Add the degree needed for the next planedegX+=degForPlane;}}\n</code></pre><p>其中，defForPlane变量是指沿着360度圆周上每个平面需要旋转的角度。看下图会容易理解一些：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/04/planes_circle_1.png\" alt=\"\"><br>圆周上的5个平面需要旋转一定的角度。这个角度从0开始，每个平面增加”360/平面总数”度。<br>angle变量的值目前还是零，我们稍后会详细解释它的作用。<br>animate函数循环遍历transformLayer的所有子图层(5个平面)，为每一个平面加上一些变换效果：<br>第一个变换效果是改变视点，和我们在上一篇教程中的做法一样，直接给m34属性赋一个值，从而可以绘制出平面的3D空间深度。<br>另外2个变换效果需要一点点数值计算。我们前面已经谈到了，每个平面需要一个旋转角度。但是我们跳过了一个关键点，还没讲。<br>如果我们只是给每个平面加上一个旋转角度，我们只会得到下面这种效果：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/04/planes_center.png\" alt=\"\"><br>你可以看到，这种效果不行，我们还需要给每个平面加上平移变换，使让它们沿着圆周排列。<br>最后一步是将这些变换应用到各个平面上。只需要将变换赋值给当前平面的transform属性就可以了，赋值后，下一个平面的degX值会增加”degForPlane”度。</p>\n<p>###拖拽手势<br>pan:函数是拖拽手势的处理函数。下面是该函数的代码：<br>    1<br>    2<br>    3<br>    4<br>    5<br>    6<br>    7<br>    8<br>    9<br>    10<br>    11<br>    12<br>    13<br>    14<br>    15<br>    16<br>    17<br>    18<br>    19<br>    20<br>    21<br>    22<br>    23</p>\n<pre><code>-(void)pan:(UIPanGestureRecognizer*)gesture{//Get the current translation on the XfloatxOffset=[gesturetranslationInView:self.view].x;//When gesture begin, reset the offsetif(gesture.state==UIGestureRecognizerStateBegan){XPanOffset=0;}//the distance covered since the last gesture event (I slow down a bit the final rotation multiplying by 0.5)floatmovedBy=xOffset*0.5-XPanOffset;//Calculate the offset from the previous gesture eventXPanOffset+=movedBy;//Add the offset to the current angleangle+=movedBy;//Update the plane[selfanimate];}\n</code></pre><p>拖拽手势是一个连续性的手势。从手势开始，直到所有手指离开屏幕之前，只要手指一移动，pan函数就会被调用。<br>为了将这些手势数据转换成对旋转木马动画有用的数据，我们需要获得每次移动前的X坐标值。<br>这里我们使用了XPanOffset这个变量来存储位置信息。当手势发生移动后，我们会计算出本次移动的距离(movedBy变量)。这个移动距离会被加到XPanOffset中，也会被加到当前的angle变量上。<br>然后调用animate函数就可以将所有平面旋转到新角度。<br>就这样，完成了！<img src=\"http://www.thinkandbuild.it/wp-includes/images/smilies/icon_smile.gif\" alt=\"\"><br>这个简单的例子展示了只需用Core Animation就可以做出来的一些3D效果。<br>祝你玩的愉快！有任何疑问或建议，请随时在<a href=\"http://twitter.com/bitwaker\" target=\"_blank\" rel=\"external\">twitter</a>上联系我。<br><a href=\"https://github.com/ariok/TB_3DCoreAnimation\" target=\"_blank\" rel=\"external\">教程源代码下载</a><br>译自：<a href=\"http://www.thinkandbuild.it/introduction-to-3d-drawing-in-core-animation-part-2/\" target=\"_blank\" rel=\"external\">Think<br> &amp; Build</a></p>\n","excerpt":"","more":"<p>尊重原创 转自：<a href=\"http://codingobjc.com/blog/2013/06/24/core-animation-3djie-shao-di-2bu-fen/\">http://codingobjc.com/blog/2013/06/24/core-animation-3djie-shao-di-2bu-fen/</a></p>\n<p>在<a href=\"http://rockonmycode.com/blog/2013/06/11/core-animation-3djie-shao-di-1bu-fen/\">上一篇</a>教程中，我们已经学习了Core<br> Animation中3D绘图的基本方法。这篇教程，我们准备深入一些，讲讲如何创建一个可交互的3D场景。我们将会创建一个类似于旋转木马的3D场景界面，用户可以通过拖拽手势来旋转界面。<br>可能你已经在上一篇教程中见过最终APP的样子了，但是，让我们再来看一次吧：<br><img src=\"http://codingobjc.com/images/posts/2013_06_11_core_animation_3d_app_preview.png\" alt=\"\"><br>你可以直接下载教程的<a href=\"https://github.com/ariok/TB_3DCoreAnimation\">源代码</a>。本篇教程的源代码和上一篇教程中的源代码在同一个代码仓库里面，但是我做了一些修改，为这篇教程建立了一个新的target。</p>\n<p>###概述<br>这个程序，我们把工作分成了以下几个部分。</p>\n<p>####3D<br>因为我们需要3D效果，所以我们需要使用一个透视视图来进行绘制工作。为了构造旋转木马效果，我们将会建立一个3D层次体系。正如前一篇教程中介绍过的，用CATransformLayer来做层次体系中的根是不错的选择。</p>\n<p>####平面<br>旋转木马效果由一系列平面构成。我们将使用CAGradientLayer来表示这些平面。CAGradientLayer是CALayer的一个子类，用它可以制作渐变背景色，会比纯色背景要好看一些。<br>我们会对这些平面进行一些平移和旋转操作，使它们沿着旋转木马的圆周排列。</p>\n<p>####手势<br>获取用户的手势非常简单。我们只需要使用一个手势识别器(Gesture Recognizer)就可以了。然后，我们追踪用户的动作，将手势数据转换成角度值，用这个角度值来旋转界面。<br>好了，现在你应该已经知道这个项目有哪些东西要完成了吧？启动XCode吧！</p>\n<p>###写代码吧<br>展开项目中的TB_3DPlanes文件夹，然后打开ViewController.m文件。<br>我们从viewDidLoad这个函数开始：<br>    1<br>    2<br>    3<br>    4<br>    5<br>    6<br>    7<br>    8<br>    9<br>    10<br>    11<br>    12<br>    13<br>    14<br>    15<br>    16<br>    17<br>    18<br>    19<br>    20<br>    21<br>    22<br>    23<br>    24<br>    25<br>    26</p>\n<pre><code>-(void)viewDidLoad{[superviewDidLoad];//Initialize the TransformLayertransformLayer=[CATransformLayerlayer];transformLayer.frame=self.view.bounds;[self.view.layeraddSublayer:transformLayer];angle=0;XPanOffset=0;//Create 5 planes[selfaddPlane];[selfaddPlane];[selfaddPlane];[selfaddPlane];[selfaddPlane];//Force the first animation to set the planes in place[selfanimate];//Initialize the Pan gesture recognizerUIPanGestureRecognizer*panGesture=[[UIPanGestureRecognizeralloc]initWithTarget:selfaction:@selector(pan:)];[self.viewaddGestureRecognizer:panGesture];}\n</code></pre><p>或许这个函数中有许多东西你还不完全明白是什么意思。但是，确实从这里开始就是核心部分的代码了。你可以暂时不用在这里纠结，继续阅读，后面会解释这些代码的意思的。<img src=\"http://www.thinkandbuild.it/wp-includes/images/smilies/icon_smile.gif\" alt=\"\"><br>很显然，我们先用CATransformLayer创建了一个根图层对象(transformLayer)，然后我们用addPlane函数向场景中添加了5个平面，并且我们将用pan:函数来处理拖拽手势。</p>\n<p>###绘制平面<br>addPlane函数的代码也是相当直观的。它只是用CAGradientLayer和一些参数创建了一个图层罢了。然后将图层添加到了transformLayer上.<br>    1<br>    2<br>    3<br>    4<br>    5<br>    6<br>    7<br>    8<br>    9<br>    10<br>    11<br>    12<br>    13<br>    14<br>    15<br>    16<br>    17<br>    18<br>    19<br>    20<br>    21<br>    22<br>    23<br>    24<br>    25<br>    26<br>    27<br>    28<br>    29<br>    30<br>    31<br>    32<br>    33<br>    34<br>    35<br>    36<br>    37<br>    38</p>\n<pre><code>/** A simple function to create a CAGradientLayer **/-(void)addPlane{CGSizeplaneSize=CGSizeMake(250,150);//Initialize the layerCAGradientLayer*layer=[CAGradientLayerlayer];//Set the frame and the anchorPointlayer.frame=CGRectMake(480/2-planeSize.width/2,320/2-planeSize.height/2-20,planeSize.width,planeSize.height);layer.anchorPoint=CGPointMake(0.5,0.5);//Set borders and cornerRadiuslayer.borderColor=[[UIColorcolorWithWhite:1.0alpha:0.3]CGColor];layer.cornerRadius=10;layer.borderWidth=4;//Set the gradient color for the plane backgroundlayer.colors=[NSArrayarrayWithObjects:(id)[UIColorpurpleColor].CGColor,(id)[UIColorredColor].CGColor,nil];layer.locations=[NSArrayarrayWithObjects:[NSNumbernumberWithFloat:0.0f],[NSNumbernumberWithFloat:1.0f],nil];//Set the shadowlayer.shadowColor=[[UIColorblackColor]CGColor];layer.shadowOpacity=1;layer.shadowRadius=20;//The double side has to be setted if we want to see the plane when its face is turned backlayer.doubleSided=YES;//Add the plane to the transformLayer[transformLayeraddSublayer:layer];}\n</code></pre><p>这里唯一需要解释一下的是doubleSide属性。将它设置成YES，表示我们希望图层的背面也被绘制出来。当一个平面在Y轴上旋转接近180度的时候，我们仍然可以在场景中看到它，只是它旋转到了相反的方向。<br>为了更形象地说明这个问题，可以看看下图doubleSide为NO和YES时的对比。<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/04/double_side.png\" alt=\"\"><br>看了图，一下就明白了吧？设置成NO的时候，被旋转到背对着我们的那些平面都不会被绘制出来。<br>也许你已经注意到了，在viewDidLoad函数中我们添加了5个平面，但是这些平面并不是按位置排列在场景中的。在addPlane函数中，它们被添加到了同一个位置(参见frame属性)。</p>\n<p>###更新平面位置<br>在viewDidLoad函数里，平面被创建后，我们调用了animate方法。这个函数的主要作用是更新各个平面的位置。这里是我们第一次调用这个函数，这个时候并没有发生任何触摸事件，这里调用它只是为了让各个平面沿着旋转木马的圆周排列好。<br>我们来看看这个函数的代码：<br>    1<br>    2<br>    3<br>    4<br>    5<br>    6<br>    7<br>    8<br>    9<br>    10<br>    11<br>    12<br>    13<br>    14<br>    15<br>    16<br>    17<br>    18<br>    19<br>    20<br>    21<br>    22<br>    23<br>    24<br>    25<br>    26<br>    27<br>    28<br>    29<br>    30<br>    31<br>    32</p>\n<pre><code>/** This function performs the transformation on each plane **/-(void)animate{//Define the degrees needed for each plane to create a circlefloatdegForPlane=360/[[transformLayersublayers]count];//The current angle offset (initially it is 0... it will change through the pan function)floatdegX=angle;for(CALayer*layerin[transformLayersublayers]){//Create the Matrix identityCATransform3Dt=CATransform3DIdentity;//Setup the perspective modifying the matrix elementat [3][4]t.m34=1.0f/-1000.0f;//Perform rotate on the matrix identityt=CATransform3DRotate(t,degToRad(degX),0.0f,1.0f,0.0f);//Perform translate on the current transform matrix (identity + rotate)t=CATransform3DTranslate(t,0.0f,0.0f,250.0f);//Avoid animations[CATransactionsetAnimationDuration:0.0];//apply the transoform on the current layerlayer.transform=t;//Add the degree needed for the next planedegX+=degForPlane;}}\n</code></pre><p>其中，defForPlane变量是指沿着360度圆周上每个平面需要旋转的角度。看下图会容易理解一些：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/04/planes_circle_1.png\" alt=\"\"><br>圆周上的5个平面需要旋转一定的角度。这个角度从0开始，每个平面增加”360/平面总数”度。<br>angle变量的值目前还是零，我们稍后会详细解释它的作用。<br>animate函数循环遍历transformLayer的所有子图层(5个平面)，为每一个平面加上一些变换效果：<br>第一个变换效果是改变视点，和我们在上一篇教程中的做法一样，直接给m34属性赋一个值，从而可以绘制出平面的3D空间深度。<br>另外2个变换效果需要一点点数值计算。我们前面已经谈到了，每个平面需要一个旋转角度。但是我们跳过了一个关键点，还没讲。<br>如果我们只是给每个平面加上一个旋转角度，我们只会得到下面这种效果：<br><img src=\"http://www.thinkandbuild.it/wp-content/uploads/2013/04/planes_center.png\" alt=\"\"><br>你可以看到，这种效果不行，我们还需要给每个平面加上平移变换，使让它们沿着圆周排列。<br>最后一步是将这些变换应用到各个平面上。只需要将变换赋值给当前平面的transform属性就可以了，赋值后，下一个平面的degX值会增加”degForPlane”度。</p>\n<p>###拖拽手势<br>pan:函数是拖拽手势的处理函数。下面是该函数的代码：<br>    1<br>    2<br>    3<br>    4<br>    5<br>    6<br>    7<br>    8<br>    9<br>    10<br>    11<br>    12<br>    13<br>    14<br>    15<br>    16<br>    17<br>    18<br>    19<br>    20<br>    21<br>    22<br>    23</p>\n<pre><code>-(void)pan:(UIPanGestureRecognizer*)gesture{//Get the current translation on the XfloatxOffset=[gesturetranslationInView:self.view].x;//When gesture begin, reset the offsetif(gesture.state==UIGestureRecognizerStateBegan){XPanOffset=0;}//the distance covered since the last gesture event (I slow down a bit the final rotation multiplying by 0.5)floatmovedBy=xOffset*0.5-XPanOffset;//Calculate the offset from the previous gesture eventXPanOffset+=movedBy;//Add the offset to the current angleangle+=movedBy;//Update the plane[selfanimate];}\n</code></pre><p>拖拽手势是一个连续性的手势。从手势开始，直到所有手指离开屏幕之前，只要手指一移动，pan函数就会被调用。<br>为了将这些手势数据转换成对旋转木马动画有用的数据，我们需要获得每次移动前的X坐标值。<br>这里我们使用了XPanOffset这个变量来存储位置信息。当手势发生移动后，我们会计算出本次移动的距离(movedBy变量)。这个移动距离会被加到XPanOffset中，也会被加到当前的angle变量上。<br>然后调用animate函数就可以将所有平面旋转到新角度。<br>就这样，完成了！<img src=\"http://www.thinkandbuild.it/wp-includes/images/smilies/icon_smile.gif\" alt=\"\"><br>这个简单的例子展示了只需用Core Animation就可以做出来的一些3D效果。<br>祝你玩的愉快！有任何疑问或建议，请随时在<a href=\"http://twitter.com/bitwaker\">twitter</a>上联系我。<br><a href=\"https://github.com/ariok/TB_3DCoreAnimation\">教程源代码下载</a><br>译自：<a href=\"http://www.thinkandbuild.it/introduction-to-3d-drawing-in-core-animation-part-2/\">Think<br> &amp; Build</a></p>"},{"title":"Core Data","date":"2016-10-08T03:39:50.000Z","_content":"Core Data是iOS5之后才出现的一个框架，它提供了对象-关系映射(ORM)的功能，即能够将OC对象转化成数据，保存在SQLite数据库文件中，也能够将保存在数据库中的数据还原成OC对象。\n<!-- more -->\n在此数据操作期间，我们不需要编写任何SQL语句，这个有点类似于著名的Hibernate持久化框架，不过功能肯定是没有Hibernate强大的。简单地用下图描述下它的作用：\n![abc](http://img.my.csdn.net/uploads/201302/01/1359705997_4313.png)\n左边是关系模型，即数据库，数据库里面有张person表，person表里面有id、name、age三个字段，而且有2条记录；\n右边是对象模型，可以看到，有2个OC对象；\n利用Core Data框架，我们就可以轻松地将数据库里面的2条记录转换成2个OC对象，也可以轻松地将2个OC对象保存到数据库中，变成2条表记录，而且不用写一条SQL语句。\n\n#[]()模型文件\n  在Core Data，需要进行映射的对象称为实体(entity)，而且需要使用Core\n Data的模型文件来描述app中的所有实体和实体属性。这里以Person(人)和Card(身份证)2个实体为例子，先看看实体属性和实体之间的关联关系：\n![abc](http://img.my.csdn.net/uploads/201302/01/1359707024_5895.png)\nPerson实体中有：name（姓名）、age（年龄）、card（身份证）三个属性\nCard实体中有：no（号码）、person（人）两个属性\n\n接下来看看创建模型文件的过程：\n1.选择模板\n![abc](http://img.my.csdn.net/uploads/201302/01/1359707426_5763.png)![abc](http://img.my.csdn.net/uploads/201302/01/1359707501_8695.png)\n\n2.添加实体\n![](http://img.my.csdn.net/uploads/201302/01/1359707563_9302.png)\n\n3.添加Person的2个基本属性\n![](http://img.my.csdn.net/uploads/201302/01/1359707773_7614.png)\n\n4.添加Card的1个基本属性\n![](http://img.my.csdn.net/uploads/201302/01/1359707796_4561.png)\n\n\n5.建立Card和Person的关联关系![](http://img.my.csdn.net/uploads/201302/01/1359708105_6064.png)        ![](http://img.my.csdn.net/uploads/201302/01/1359708115_5772.png)\n右图中的![](http://img.my.csdn.net/uploads/201302/01/1359708186_1349.png)表示Card中有个Person类型的person属性，目的就是建立Card跟Person之间的一对一关联关系(建议补上这一项)，在Person中加上Inverse属性后，你会发现Card中Inverse属性也自动补上了\n![](http://img.my.csdn.net/uploads/201302/01/1359708436_2378.png)\n\n\n\n****\n#[]()了解NSManagedObject\n\n1.通过Core Data从数据库取出的对象，默认情况下都是NSManagedObject对象\n![](http://img.my.csdn.net/uploads/201302/01/1359708744_9527.png)  ![](http://img.my.csdn.net/uploads/201302/01/1359708756_9809.png)\n\n2.NSManagedObject的工作模式有点类似于NSDictionary对象，通过键-值对来存取所有的实体属性1> setValue:forKey:存储属性值(属性名为key)\n2> valueForKey:获取属性值(属性名为key)\n\n\n****#[]()CoreData中的核心对象\n\n![](http://img.my.csdn.net/uploads/201302/01/1359708878_8041.png)\n注：黑色表示类名，红色表示类里面的一个属性\n开发步骤总结：\n1.初始化NSManagedObjectModel对象，加载模型文件，读取app中的所有实体信息\n2.初始化NSPersistentStoreCoordinator对象，添加持久化库(这里采取SQLite数据库)\n3.初始化NSManagedObjectContext对象，拿到这个上下文对象操作实体，进行CRUD操作\n\n****#[]()代码实现\n先添加CoreData.framework和导入主头文件<CoreData/CoreData.h>\n![](http://img.my.csdn.net/uploads/201302/01/1359710937_3208.png)\n\n1.搭建上下文环境\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. // 从应用程序包中加载模型文件  \n2. NSManagedObjectModel *model = [NSManagedObjectModel mergedModelFromBundles:nil];  \n3. // 传入模型对象，初始化NSPersistentStoreCoordinator  \n4. NSPersistentStoreCoordinator *psc = [[[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:model] autorelease];  \n5. // 构建SQLite数据库文件的路径  \n6. NSString *docs = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];  \n7. NSURL *url = [NSURL fileURLWithPath:[docs stringByAppendingPathComponent:@\"person.data\"]];  \n8. // 添加持久化存储库，这里使用SQLite作为存储库  \n9. NSError *error = nil;  \n10. NSPersistentStore *store = [psc addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:url options:nil error:&error];  \n11. if (store == nil) { // 直接抛异常  \n12.     [NSException raise:@\"添加数据库错误\" format:@\"%@\", [error localizedDescription]];  \n13. }  \n14. // 初始化上下文，设置persistentStoreCoordinator属性  \n15. NSManagedObjectContext *context = [[NSManagedObjectContext alloc] init];  \n16. context.persistentStoreCoordinator = psc;  \n17. // 用完之后，记得要[context release];  \n\n\n2.添加数据到数据库\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. // 传入上下文，创建一个Person实体对象  \n2. NSManagedObject *person = [NSEntityDescription insertNewObjectForEntityForName:@\"Person\" inManagedObjectContext:context];  \n3. // 设置Person的简单属性  \n4. [person setValue:@\"MJ\" forKey:@\"name\"];  \n5. [person setValue:[NSNumber numberWithInt:27] forKey:@\"age\"];  \n6. // 传入上下文，创建一个Card实体对象  \n7. NSManagedObject *card = [NSEntityDescription insertNewObjectForEntityForName:@\"Card\" inManagedObjectContext:context];  \n8. [card setValue:@\"4414241933432\" forKey:@\"no\"];  \n9. // 设置Person和Card之间的关联关系  \n10. [person setValue:card forKey:@\"card\"];  \n11. // 利用上下文对象，将数据同步到持久化存储库  \n12. NSError *error = nil;  \n13. BOOL success = [context save:&error];  \n14. if (!success) {  \n15.     [NSException raise:@\"访问数据库错误\" format:@\"%@\", [error localizedDescription]];  \n16. }  \n17. // 如果是想做更新操作：只要在更改了实体对象的属性后调用[context save:&error]，就能将更改的数据同步到数据库  \n\n\n3.从数据库中查询数据\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. // 初始化一个查询请求  \n2. NSFetchRequest *request = [[[NSFetchRequest alloc] init] autorelease];  \n3. // 设置要查询的实体  \n4. request.entity = [NSEntityDescription entityForName:@\"Person\" inManagedObjectContext:context];  \n5. // 设置排序（按照age降序）  \n6. NSSortDescriptor *sort = [NSSortDescriptor sortDescriptorWithKey:@\"age\" ascending:NO];  \n7. request.sortDescriptors = [NSArray arrayWithObject:sort];  \n8. // 设置条件过滤(搜索name中包含字符串\"Itcast-1\"的记录，注意：设置条件过滤时，数据库SQL语句中的%要用*来代替，所以%Itcast-1%应该写成*Itcast-1*)  \n9. NSPredicate *predicate = [NSPredicate predicateWithFormat:@\"name like %@\", @\"*Itcast-1*\"];  \n10. request.predicate = predicate;  \n11. // 执行请求  \n12. NSError *error = nil;  \n13. NSArray *objs = [context executeFetchRequest:request error:&error];  \n14. if (error) {  \n15.     [NSException raise:@\"查询错误\" format:@\"%@\", [error localizedDescription]];  \n16. }  \n17. // 遍历数据  \n18. for (NSManagedObject *obj in objs) {  \n19.     NSLog(@\"name=%@\", [obj valueForKey:@\"name\"]  \n20. }  \n\n注：Core Data不会根据实体中的关联关系立即获取相应的关联对象，比如通过Core Data取出Person实体时，并不会立即查询相关联的Card实体；当应用真的需要使用Card时，才会再次查询数据库，加载Card实体的信息。这个就是Core Data的延迟加载机制\n\n4.删除数据库中的数据\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. // 传入需要删除的实体对象  \n2. [context deleteObject:managedObject];  \n3. // 将结果同步到数据库  \n4. NSError *error = nil;  \n5. [context save:&error];  \n6. if (error) {  \n7.     [NSException raise:@\"删除错误\" format:@\"%@\", [error localizedDescription]];  \n8. }  \n\n\n********#[]()打开CoreData的SQL语句输出开关\n1.打开Product，点击EditScheme...\n2.点击Arguments，在ArgumentsPassed On Launch中添加2项\n1> -com.apple.CoreData.SQLDebug\n2> 1\n![](http://img.my.csdn.net/uploads/201302/01/1359711942_1857.png)![](http://img.my.csdn.net/uploads/201302/01/1359711964_1550.png)\n\n\n********#[]()创建NSManagedObject的子类\n默认情况下，利用Core Data取出的实体都是NSManagedObject类型的，能够利用键-值对来存取数据。但是一般情况下，实体在存取数据的基础上，有时还需要添加一些业务方法来完成一些其他任务，那么就必须创建NSManagedObject的子类\n![](http://img.my.csdn.net/uploads/201302/01/1359712054_3978.png)\n\n选择模型文件 \n![](http://img.my.csdn.net/uploads/201302/01/1359712079_5045.png)\n\n选择需要创建子类的实体 \n![](http://img.my.csdn.net/uploads/201302/01/1359712094_5888.png)\n\n创建完毕后，多了2个子类 \n![](http://img.my.csdn.net/uploads/201302/01/1359712116_3772.png)\n\n文件内容展示：\nPerson.h\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. #import <Foundation/Foundation.h>  \n2. #import <CoreData/CoreData.h>  \n3.   \n4. @class Card;  \n5.   \n6. @interface Person : NSManagedObject  \n7.   \n8. @property (nonatomic, retain) NSString * name;  \n9. @property (nonatomic, retain) NSNumber * age;  \n10. @property (nonatomic, retain) Card *card;  \n11.   \n12. @end  \n\n\nPerson.m\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. #import \"Person.h\"  \n2.   \n3. @implementation Person  \n4.   \n5. @dynamic name;  \n6. @dynamic age;  \n7. @dynamic card;  \n8.   \n9. @end  \n\n\nCard.h\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. #import <Foundation/Foundation.h>  \n2. #import <CoreData/CoreData.h>  \n3.   \n4. @class Person;  \n5.   \n6. @interface Card : NSManagedObject  \n7.   \n8. @property (nonatomic, retain) NSString * no;  \n9. @property (nonatomic, retain) Person *person;  \n10.   \n11. @end  \n\n\nCard.m\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. #import \"Card.h\"  \n2. #import \"Person.h\"  \n3.   \n4. @implementation Card  \n5.   \n6. @dynamic no;  \n7. @dynamic person;  \n8.   \n9. @end  \n\n\n那么往数据库中添加数据的时候就应该写了：\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. Person *person = [NSEntityDescription insertNewObjectForEntityForName:@\"Person\" inManagedObjectContext:context];  \n2. person.name = @\"MJ\";  \n3. person.age = [NSNumber numberWithInt:27];  \n4.   \n5. Card *card = [NSEntityDescription insertNewObjectForEntityForName:@”Card\" inManagedObjectContext:context];  \n6. card.no = @”4414245465656\";  \n7. person.card = card;  \n8. // 最后调用[context save&error];保存数据  \n\n\n\n说到这里，整个Core Data框架的入门就结束了，其实Core Data还远不止这些功能，它还支持自动撤销机制，一对多关联等，这里就不一一介绍了","source":"_posts/oc/Core Data.md","raw":"---\ntitle: Core Data\ndate: 2016-10-08 11:39:50\ncategories: objective-c\n---\nCore Data是iOS5之后才出现的一个框架，它提供了对象-关系映射(ORM)的功能，即能够将OC对象转化成数据，保存在SQLite数据库文件中，也能够将保存在数据库中的数据还原成OC对象。\n<!-- more -->\n在此数据操作期间，我们不需要编写任何SQL语句，这个有点类似于著名的Hibernate持久化框架，不过功能肯定是没有Hibernate强大的。简单地用下图描述下它的作用：\n![abc](http://img.my.csdn.net/uploads/201302/01/1359705997_4313.png)\n左边是关系模型，即数据库，数据库里面有张person表，person表里面有id、name、age三个字段，而且有2条记录；\n右边是对象模型，可以看到，有2个OC对象；\n利用Core Data框架，我们就可以轻松地将数据库里面的2条记录转换成2个OC对象，也可以轻松地将2个OC对象保存到数据库中，变成2条表记录，而且不用写一条SQL语句。\n\n#[]()模型文件\n  在Core Data，需要进行映射的对象称为实体(entity)，而且需要使用Core\n Data的模型文件来描述app中的所有实体和实体属性。这里以Person(人)和Card(身份证)2个实体为例子，先看看实体属性和实体之间的关联关系：\n![abc](http://img.my.csdn.net/uploads/201302/01/1359707024_5895.png)\nPerson实体中有：name（姓名）、age（年龄）、card（身份证）三个属性\nCard实体中有：no（号码）、person（人）两个属性\n\n接下来看看创建模型文件的过程：\n1.选择模板\n![abc](http://img.my.csdn.net/uploads/201302/01/1359707426_5763.png)![abc](http://img.my.csdn.net/uploads/201302/01/1359707501_8695.png)\n\n2.添加实体\n![](http://img.my.csdn.net/uploads/201302/01/1359707563_9302.png)\n\n3.添加Person的2个基本属性\n![](http://img.my.csdn.net/uploads/201302/01/1359707773_7614.png)\n\n4.添加Card的1个基本属性\n![](http://img.my.csdn.net/uploads/201302/01/1359707796_4561.png)\n\n\n5.建立Card和Person的关联关系![](http://img.my.csdn.net/uploads/201302/01/1359708105_6064.png)        ![](http://img.my.csdn.net/uploads/201302/01/1359708115_5772.png)\n右图中的![](http://img.my.csdn.net/uploads/201302/01/1359708186_1349.png)表示Card中有个Person类型的person属性，目的就是建立Card跟Person之间的一对一关联关系(建议补上这一项)，在Person中加上Inverse属性后，你会发现Card中Inverse属性也自动补上了\n![](http://img.my.csdn.net/uploads/201302/01/1359708436_2378.png)\n\n\n\n****\n#[]()了解NSManagedObject\n\n1.通过Core Data从数据库取出的对象，默认情况下都是NSManagedObject对象\n![](http://img.my.csdn.net/uploads/201302/01/1359708744_9527.png)  ![](http://img.my.csdn.net/uploads/201302/01/1359708756_9809.png)\n\n2.NSManagedObject的工作模式有点类似于NSDictionary对象，通过键-值对来存取所有的实体属性1> setValue:forKey:存储属性值(属性名为key)\n2> valueForKey:获取属性值(属性名为key)\n\n\n****#[]()CoreData中的核心对象\n\n![](http://img.my.csdn.net/uploads/201302/01/1359708878_8041.png)\n注：黑色表示类名，红色表示类里面的一个属性\n开发步骤总结：\n1.初始化NSManagedObjectModel对象，加载模型文件，读取app中的所有实体信息\n2.初始化NSPersistentStoreCoordinator对象，添加持久化库(这里采取SQLite数据库)\n3.初始化NSManagedObjectContext对象，拿到这个上下文对象操作实体，进行CRUD操作\n\n****#[]()代码实现\n先添加CoreData.framework和导入主头文件<CoreData/CoreData.h>\n![](http://img.my.csdn.net/uploads/201302/01/1359710937_3208.png)\n\n1.搭建上下文环境\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. // 从应用程序包中加载模型文件  \n2. NSManagedObjectModel *model = [NSManagedObjectModel mergedModelFromBundles:nil];  \n3. // 传入模型对象，初始化NSPersistentStoreCoordinator  \n4. NSPersistentStoreCoordinator *psc = [[[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:model] autorelease];  \n5. // 构建SQLite数据库文件的路径  \n6. NSString *docs = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];  \n7. NSURL *url = [NSURL fileURLWithPath:[docs stringByAppendingPathComponent:@\"person.data\"]];  \n8. // 添加持久化存储库，这里使用SQLite作为存储库  \n9. NSError *error = nil;  \n10. NSPersistentStore *store = [psc addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:url options:nil error:&error];  \n11. if (store == nil) { // 直接抛异常  \n12.     [NSException raise:@\"添加数据库错误\" format:@\"%@\", [error localizedDescription]];  \n13. }  \n14. // 初始化上下文，设置persistentStoreCoordinator属性  \n15. NSManagedObjectContext *context = [[NSManagedObjectContext alloc] init];  \n16. context.persistentStoreCoordinator = psc;  \n17. // 用完之后，记得要[context release];  \n\n\n2.添加数据到数据库\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. // 传入上下文，创建一个Person实体对象  \n2. NSManagedObject *person = [NSEntityDescription insertNewObjectForEntityForName:@\"Person\" inManagedObjectContext:context];  \n3. // 设置Person的简单属性  \n4. [person setValue:@\"MJ\" forKey:@\"name\"];  \n5. [person setValue:[NSNumber numberWithInt:27] forKey:@\"age\"];  \n6. // 传入上下文，创建一个Card实体对象  \n7. NSManagedObject *card = [NSEntityDescription insertNewObjectForEntityForName:@\"Card\" inManagedObjectContext:context];  \n8. [card setValue:@\"4414241933432\" forKey:@\"no\"];  \n9. // 设置Person和Card之间的关联关系  \n10. [person setValue:card forKey:@\"card\"];  \n11. // 利用上下文对象，将数据同步到持久化存储库  \n12. NSError *error = nil;  \n13. BOOL success = [context save:&error];  \n14. if (!success) {  \n15.     [NSException raise:@\"访问数据库错误\" format:@\"%@\", [error localizedDescription]];  \n16. }  \n17. // 如果是想做更新操作：只要在更改了实体对象的属性后调用[context save:&error]，就能将更改的数据同步到数据库  \n\n\n3.从数据库中查询数据\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. // 初始化一个查询请求  \n2. NSFetchRequest *request = [[[NSFetchRequest alloc] init] autorelease];  \n3. // 设置要查询的实体  \n4. request.entity = [NSEntityDescription entityForName:@\"Person\" inManagedObjectContext:context];  \n5. // 设置排序（按照age降序）  \n6. NSSortDescriptor *sort = [NSSortDescriptor sortDescriptorWithKey:@\"age\" ascending:NO];  \n7. request.sortDescriptors = [NSArray arrayWithObject:sort];  \n8. // 设置条件过滤(搜索name中包含字符串\"Itcast-1\"的记录，注意：设置条件过滤时，数据库SQL语句中的%要用*来代替，所以%Itcast-1%应该写成*Itcast-1*)  \n9. NSPredicate *predicate = [NSPredicate predicateWithFormat:@\"name like %@\", @\"*Itcast-1*\"];  \n10. request.predicate = predicate;  \n11. // 执行请求  \n12. NSError *error = nil;  \n13. NSArray *objs = [context executeFetchRequest:request error:&error];  \n14. if (error) {  \n15.     [NSException raise:@\"查询错误\" format:@\"%@\", [error localizedDescription]];  \n16. }  \n17. // 遍历数据  \n18. for (NSManagedObject *obj in objs) {  \n19.     NSLog(@\"name=%@\", [obj valueForKey:@\"name\"]  \n20. }  \n\n注：Core Data不会根据实体中的关联关系立即获取相应的关联对象，比如通过Core Data取出Person实体时，并不会立即查询相关联的Card实体；当应用真的需要使用Card时，才会再次查询数据库，加载Card实体的信息。这个就是Core Data的延迟加载机制\n\n4.删除数据库中的数据\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. // 传入需要删除的实体对象  \n2. [context deleteObject:managedObject];  \n3. // 将结果同步到数据库  \n4. NSError *error = nil;  \n5. [context save:&error];  \n6. if (error) {  \n7.     [NSException raise:@\"删除错误\" format:@\"%@\", [error localizedDescription]];  \n8. }  \n\n\n********#[]()打开CoreData的SQL语句输出开关\n1.打开Product，点击EditScheme...\n2.点击Arguments，在ArgumentsPassed On Launch中添加2项\n1> -com.apple.CoreData.SQLDebug\n2> 1\n![](http://img.my.csdn.net/uploads/201302/01/1359711942_1857.png)![](http://img.my.csdn.net/uploads/201302/01/1359711964_1550.png)\n\n\n********#[]()创建NSManagedObject的子类\n默认情况下，利用Core Data取出的实体都是NSManagedObject类型的，能够利用键-值对来存取数据。但是一般情况下，实体在存取数据的基础上，有时还需要添加一些业务方法来完成一些其他任务，那么就必须创建NSManagedObject的子类\n![](http://img.my.csdn.net/uploads/201302/01/1359712054_3978.png)\n\n选择模型文件 \n![](http://img.my.csdn.net/uploads/201302/01/1359712079_5045.png)\n\n选择需要创建子类的实体 \n![](http://img.my.csdn.net/uploads/201302/01/1359712094_5888.png)\n\n创建完毕后，多了2个子类 \n![](http://img.my.csdn.net/uploads/201302/01/1359712116_3772.png)\n\n文件内容展示：\nPerson.h\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. #import <Foundation/Foundation.h>  \n2. #import <CoreData/CoreData.h>  \n3.   \n4. @class Card;  \n5.   \n6. @interface Person : NSManagedObject  \n7.   \n8. @property (nonatomic, retain) NSString * name;  \n9. @property (nonatomic, retain) NSNumber * age;  \n10. @property (nonatomic, retain) Card *card;  \n11.   \n12. @end  \n\n\nPerson.m\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. #import \"Person.h\"  \n2.   \n3. @implementation Person  \n4.   \n5. @dynamic name;  \n6. @dynamic age;  \n7. @dynamic card;  \n8.   \n9. @end  \n\n\nCard.h\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. #import <Foundation/Foundation.h>  \n2. #import <CoreData/CoreData.h>  \n3.   \n4. @class Person;  \n5.   \n6. @interface Card : NSManagedObject  \n7.   \n8. @property (nonatomic, retain) NSString * no;  \n9. @property (nonatomic, retain) Person *person;  \n10.   \n11. @end  \n\n\nCard.m\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. #import \"Card.h\"  \n2. #import \"Person.h\"  \n3.   \n4. @implementation Card  \n5.   \n6. @dynamic no;  \n7. @dynamic person;  \n8.   \n9. @end  \n\n\n那么往数据库中添加数据的时候就应该写了：\n**[java]** [view\n plain](http://blog.csdn.net/q199109106q/article/details/8563438/# \"view plain\")[copy](http://blog.csdn.net/q199109106q/article/details/8563438/# \"copy\")1. Person *person = [NSEntityDescription insertNewObjectForEntityForName:@\"Person\" inManagedObjectContext:context];  \n2. person.name = @\"MJ\";  \n3. person.age = [NSNumber numberWithInt:27];  \n4.   \n5. Card *card = [NSEntityDescription insertNewObjectForEntityForName:@”Card\" inManagedObjectContext:context];  \n6. card.no = @”4414245465656\";  \n7. person.card = card;  \n8. // 最后调用[context save&error];保存数据  \n\n\n\n说到这里，整个Core Data框架的入门就结束了，其实Core Data还远不止这些功能，它还支持自动撤销机制，一对多关联等，这里就不一一介绍了","slug":"oc/Core Data","published":1,"updated":"2016-10-08T09:50:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms96c000j21xwvxqplq3m","content":"<p>Core Data是iOS5之后才出现的一个框架，它提供了对象-关系映射(ORM)的功能，即能够将OC对象转化成数据，保存在SQLite数据库文件中，也能够将保存在数据库中的数据还原成OC对象。<br><a id=\"more\"></a><br>在此数据操作期间，我们不需要编写任何SQL语句，这个有点类似于著名的Hibernate持久化框架，不过功能肯定是没有Hibernate强大的。简单地用下图描述下它的作用：<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359705997_4313.png\" alt=\"abc\"><br>左边是关系模型，即数据库，数据库里面有张person表，person表里面有id、name、age三个字段，而且有2条记录；<br>右边是对象模型，可以看到，有2个OC对象；<br>利用Core Data框架，我们就可以轻松地将数据库里面的2条记录转换成2个OC对象，也可以轻松地将2个OC对象保存到数据库中，变成2条表记录，而且不用写一条SQL语句。</p>\n<p>#<a href=\"\"></a>模型文件<br>  在Core Data，需要进行映射的对象称为实体(entity)，而且需要使用Core<br> Data的模型文件来描述app中的所有实体和实体属性。这里以Person(人)和Card(身份证)2个实体为例子，先看看实体属性和实体之间的关联关系：<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359707024_5895.png\" alt=\"abc\"><br>Person实体中有：name（姓名）、age（年龄）、card（身份证）三个属性<br>Card实体中有：no（号码）、person（人）两个属性</p>\n<p>接下来看看创建模型文件的过程：<br>1.选择模板<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359707426_5763.png\" alt=\"abc\"><img src=\"http://img.my.csdn.net/uploads/201302/01/1359707501_8695.png\" alt=\"abc\"></p>\n<p>2.添加实体<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359707563_9302.png\" alt=\"\"></p>\n<p>3.添加Person的2个基本属性<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359707773_7614.png\" alt=\"\"></p>\n<p>4.添加Card的1个基本属性<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359707796_4561.png\" alt=\"\"></p>\n<p>5.建立Card和Person的关联关系<img src=\"http://img.my.csdn.net/uploads/201302/01/1359708105_6064.png\" alt=\"\">        <img src=\"http://img.my.csdn.net/uploads/201302/01/1359708115_5772.png\" alt=\"\"><br>右图中的<img src=\"http://img.my.csdn.net/uploads/201302/01/1359708186_1349.png\" alt=\"\">表示Card中有个Person类型的person属性，目的就是建立Card跟Person之间的一对一关联关系(建议补上这一项)，在Person中加上Inverse属性后，你会发现Card中Inverse属性也自动补上了<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359708436_2378.png\" alt=\"\"></p>\n<hr>\n<p>#<a href=\"\"></a>了解NSManagedObject</p>\n<p>1.通过Core Data从数据库取出的对象，默认情况下都是NSManagedObject对象<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359708744_9527.png\" alt=\"\">  <img src=\"http://img.my.csdn.net/uploads/201302/01/1359708756_9809.png\" alt=\"\"></p>\n<p>2.NSManagedObject的工作模式有点类似于NSDictionary对象，通过键-值对来存取所有的实体属性1&gt; setValue:forKey:存储属性值(属性名为key)<br>2&gt; valueForKey:获取属性值(属性名为key)</p>\n<p><em>**</em>#<a href=\"\"></a>CoreData中的核心对象</p>\n<p><img src=\"http://img.my.csdn.net/uploads/201302/01/1359708878_8041.png\" alt=\"\"><br>注：黑色表示类名，红色表示类里面的一个属性<br>开发步骤总结：<br>1.初始化NSManagedObjectModel对象，加载模型文件，读取app中的所有实体信息<br>2.初始化NSPersistentStoreCoordinator对象，添加持久化库(这里采取SQLite数据库)<br>3.初始化NSManagedObjectContext对象，拿到这个上下文对象操作实体，进行CRUD操作</p>\n<p><em>**</em>#<a href=\"\"></a>代码实现<br>先添加CoreData.framework和导入主头文件<coredata coredata.h=\"\"><br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359710937_3208.png\" alt=\"\"></coredata></p>\n<p>1.搭建上下文环境<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a>1. // 从应用程序包中加载模型文件  </p>\n<ol>\n<li>NSManagedObjectModel *model = [NSManagedObjectModel mergedModelFromBundles:nil];  </li>\n<li>// 传入模型对象，初始化NSPersistentStoreCoordinator  </li>\n<li>NSPersistentStoreCoordinator *psc = [[[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:model] autorelease];  </li>\n<li>// 构建SQLite数据库文件的路径  </li>\n<li>NSString *docs = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];  </li>\n<li>NSURL *url = [NSURL fileURLWithPath:[docs stringByAppendingPathComponent:@”person.data”]];  </li>\n<li>// 添加持久化存储库，这里使用SQLite作为存储库  </li>\n<li>NSError *error = nil;  </li>\n<li>NSPersistentStore *store = [psc addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:url options:nil error:&amp;error];  </li>\n<li>if (store == nil) { // 直接抛异常  </li>\n<li>[NSException raise:@”添加数据库错误” format:@”%@”, [error localizedDescription]];  </li>\n<li>}  </li>\n<li>// 初始化上下文，设置persistentStoreCoordinator属性  </li>\n<li>NSManagedObjectContext *context = [[NSManagedObjectContext alloc] init];  </li>\n<li>context.persistentStoreCoordinator = psc;  </li>\n<li>// 用完之后，记得要[context release];  </li>\n</ol>\n<p>2.添加数据到数据库<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a>1. // 传入上下文，创建一个Person实体对象  </p>\n<ol>\n<li>NSManagedObject *person = [NSEntityDescription insertNewObjectForEntityForName:@”Person” inManagedObjectContext:context];  </li>\n<li>// 设置Person的简单属性  </li>\n<li>[person setValue:@”MJ” forKey:@”name”];  </li>\n<li>[person setValue:[NSNumber numberWithInt:27] forKey:@”age”];  </li>\n<li>// 传入上下文，创建一个Card实体对象  </li>\n<li>NSManagedObject *card = [NSEntityDescription insertNewObjectForEntityForName:@”Card” inManagedObjectContext:context];  </li>\n<li>[card setValue:@”4414241933432” forKey:@”no”];  </li>\n<li>// 设置Person和Card之间的关联关系  </li>\n<li>[person setValue:card forKey:@”card”];  </li>\n<li>// 利用上下文对象，将数据同步到持久化存储库  </li>\n<li>NSError *error = nil;  </li>\n<li>BOOL success = [context save:&amp;error];  </li>\n<li>if (!success) {  </li>\n<li>[NSException raise:@”访问数据库错误” format:@”%@”, [error localizedDescription]];  </li>\n<li>}  </li>\n<li>// 如果是想做更新操作：只要在更改了实体对象的属性后调用[context save:&amp;error]，就能将更改的数据同步到数据库  </li>\n</ol>\n<p>3.从数据库中查询数据<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a>1. // 初始化一个查询请求  </p>\n<ol>\n<li>NSFetchRequest *request = [[[NSFetchRequest alloc] init] autorelease];  </li>\n<li>// 设置要查询的实体  </li>\n<li>request.entity = [NSEntityDescription entityForName:@”Person” inManagedObjectContext:context];  </li>\n<li>// 设置排序（按照age降序）  </li>\n<li>NSSortDescriptor *sort = [NSSortDescriptor sortDescriptorWithKey:@”age” ascending:NO];  </li>\n<li>request.sortDescriptors = [NSArray arrayWithObject:sort];  </li>\n<li>// 设置条件过滤(搜索name中包含字符串”Itcast-1”的记录，注意：设置条件过滤时，数据库SQL语句中的%要用<em>来代替，所以%Itcast-1%应该写成</em>Itcast-1*)  </li>\n<li>NSPredicate <em>predicate = [NSPredicate predicateWithFormat:@”name like %@”, @”</em>Itcast-1*”];  </li>\n<li>request.predicate = predicate;  </li>\n<li>// 执行请求  </li>\n<li>NSError *error = nil;  </li>\n<li>NSArray *objs = [context executeFetchRequest:request error:&amp;error];  </li>\n<li>if (error) {  </li>\n<li>[NSException raise:@”查询错误” format:@”%@”, [error localizedDescription]];  </li>\n<li>}  </li>\n<li>// 遍历数据  </li>\n<li>for (NSManagedObject *obj in objs) {  </li>\n<li>NSLog(@”name=%@”, [obj valueForKey:@”name”]  </li>\n<li>}  </li>\n</ol>\n<p>注：Core Data不会根据实体中的关联关系立即获取相应的关联对象，比如通过Core Data取出Person实体时，并不会立即查询相关联的Card实体；当应用真的需要使用Card时，才会再次查询数据库，加载Card实体的信息。这个就是Core Data的延迟加载机制</p>\n<p>4.删除数据库中的数据<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a>1. // 传入需要删除的实体对象  </p>\n<ol>\n<li>[context deleteObject:managedObject];  </li>\n<li>// 将结果同步到数据库  </li>\n<li>NSError *error = nil;  </li>\n<li>[context save:&amp;error];  </li>\n<li>if (error) {  </li>\n<li>[NSException raise:@”删除错误” format:@”%@”, [error localizedDescription]];  </li>\n<li>}  </li>\n</ol>\n<p><strong><em>**</em></strong>#<a href=\"\"></a>打开CoreData的SQL语句输出开关<br>1.打开Product，点击EditScheme…<br>2.点击Arguments，在ArgumentsPassed On Launch中添加2项<br>1&gt; -com.apple.CoreData.SQLDebug<br>2&gt; 1<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359711942_1857.png\" alt=\"\"><img src=\"http://img.my.csdn.net/uploads/201302/01/1359711964_1550.png\" alt=\"\"></p>\n<p><strong><em>**</em></strong>#<a href=\"\"></a>创建NSManagedObject的子类<br>默认情况下，利用Core Data取出的实体都是NSManagedObject类型的，能够利用键-值对来存取数据。但是一般情况下，实体在存取数据的基础上，有时还需要添加一些业务方法来完成一些其他任务，那么就必须创建NSManagedObject的子类<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359712054_3978.png\" alt=\"\"></p>\n<p>选择模型文件<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359712079_5045.png\" alt=\"\"></p>\n<p>选择需要创建子类的实体<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359712094_5888.png\" alt=\"\"></p>\n<p>创建完毕后，多了2个子类<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359712116_3772.png\" alt=\"\"></p>\n<p>文件内容展示：<br>Person.h<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a>1. #import <foundation foundation.h=\"\">  </foundation></p>\n<ol>\n<li>#import <coredata coredata.h=\"\">  </coredata></li>\n<li></li>\n<li>@class Card;  </li>\n<li></li>\n<li>@interface Person : NSManagedObject  </li>\n<li></li>\n<li>@property (nonatomic, retain) NSString * name;  </li>\n<li>@property (nonatomic, retain) NSNumber * age;  </li>\n<li>@property (nonatomic, retain) Card *card;  </li>\n<li></li>\n<li>@end  </li>\n</ol>\n<p>Person.m<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a>1. #import “Person.h”  </p>\n<ol>\n<li></li>\n<li>@implementation Person  </li>\n<li></li>\n<li>@dynamic name;  </li>\n<li>@dynamic age;  </li>\n<li>@dynamic card;  </li>\n<li></li>\n<li>@end  </li>\n</ol>\n<p>Card.h<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a>1. #import <foundation foundation.h=\"\">  </foundation></p>\n<ol>\n<li>#import <coredata coredata.h=\"\">  </coredata></li>\n<li></li>\n<li>@class Person;  </li>\n<li></li>\n<li>@interface Card : NSManagedObject  </li>\n<li></li>\n<li>@property (nonatomic, retain) NSString * no;  </li>\n<li>@property (nonatomic, retain) Person *person;  </li>\n<li></li>\n<li>@end  </li>\n</ol>\n<p>Card.m<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a>1. #import “Card.h”  </p>\n<ol>\n<li>#import “Person.h”  </li>\n<li></li>\n<li>@implementation Card  </li>\n<li></li>\n<li>@dynamic no;  </li>\n<li>@dynamic person;  </li>\n<li></li>\n<li>@end  </li>\n</ol>\n<p>那么往数据库中添加数据的时候就应该写了：<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a>1. Person *person = [NSEntityDescription insertNewObjectForEntityForName:@”Person” inManagedObjectContext:context];  </p>\n<ol>\n<li>person.name = @”MJ”;  </li>\n<li>person.age = [NSNumber numberWithInt:27];  </li>\n<li></li>\n<li>Card *card = [NSEntityDescription insertNewObjectForEntityForName:@”Card” inManagedObjectContext:context];  </li>\n<li>card.no = @”4414245465656”;  </li>\n<li>person.card = card;  </li>\n<li>// 最后调用[context save&amp;error];保存数据  </li>\n</ol>\n<p>说到这里，整个Core Data框架的入门就结束了，其实Core Data还远不止这些功能，它还支持自动撤销机制，一对多关联等，这里就不一一介绍了</p>\n","excerpt":"<p>Core Data是iOS5之后才出现的一个框架，它提供了对象-关系映射(ORM)的功能，即能够将OC对象转化成数据，保存在SQLite数据库文件中，也能够将保存在数据库中的数据还原成OC对象。<br>","more":"<br>在此数据操作期间，我们不需要编写任何SQL语句，这个有点类似于著名的Hibernate持久化框架，不过功能肯定是没有Hibernate强大的。简单地用下图描述下它的作用：<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359705997_4313.png\" alt=\"abc\"><br>左边是关系模型，即数据库，数据库里面有张person表，person表里面有id、name、age三个字段，而且有2条记录；<br>右边是对象模型，可以看到，有2个OC对象；<br>利用Core Data框架，我们就可以轻松地将数据库里面的2条记录转换成2个OC对象，也可以轻松地将2个OC对象保存到数据库中，变成2条表记录，而且不用写一条SQL语句。</p>\n<p>#<a href=\"\"></a>模型文件<br>  在Core Data，需要进行映射的对象称为实体(entity)，而且需要使用Core<br> Data的模型文件来描述app中的所有实体和实体属性。这里以Person(人)和Card(身份证)2个实体为例子，先看看实体属性和实体之间的关联关系：<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359707024_5895.png\" alt=\"abc\"><br>Person实体中有：name（姓名）、age（年龄）、card（身份证）三个属性<br>Card实体中有：no（号码）、person（人）两个属性</p>\n<p>接下来看看创建模型文件的过程：<br>1.选择模板<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359707426_5763.png\" alt=\"abc\"><img src=\"http://img.my.csdn.net/uploads/201302/01/1359707501_8695.png\" alt=\"abc\"></p>\n<p>2.添加实体<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359707563_9302.png\" alt=\"\"></p>\n<p>3.添加Person的2个基本属性<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359707773_7614.png\" alt=\"\"></p>\n<p>4.添加Card的1个基本属性<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359707796_4561.png\" alt=\"\"></p>\n<p>5.建立Card和Person的关联关系<img src=\"http://img.my.csdn.net/uploads/201302/01/1359708105_6064.png\" alt=\"\">        <img src=\"http://img.my.csdn.net/uploads/201302/01/1359708115_5772.png\" alt=\"\"><br>右图中的<img src=\"http://img.my.csdn.net/uploads/201302/01/1359708186_1349.png\" alt=\"\">表示Card中有个Person类型的person属性，目的就是建立Card跟Person之间的一对一关联关系(建议补上这一项)，在Person中加上Inverse属性后，你会发现Card中Inverse属性也自动补上了<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359708436_2378.png\" alt=\"\"></p>\n<hr>\n<p>#<a href=\"\"></a>了解NSManagedObject</p>\n<p>1.通过Core Data从数据库取出的对象，默认情况下都是NSManagedObject对象<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359708744_9527.png\" alt=\"\">  <img src=\"http://img.my.csdn.net/uploads/201302/01/1359708756_9809.png\" alt=\"\"></p>\n<p>2.NSManagedObject的工作模式有点类似于NSDictionary对象，通过键-值对来存取所有的实体属性1&gt; setValue:forKey:存储属性值(属性名为key)<br>2&gt; valueForKey:获取属性值(属性名为key)</p>\n<p><em>**</em>#<a href=\"\"></a>CoreData中的核心对象</p>\n<p><img src=\"http://img.my.csdn.net/uploads/201302/01/1359708878_8041.png\" alt=\"\"><br>注：黑色表示类名，红色表示类里面的一个属性<br>开发步骤总结：<br>1.初始化NSManagedObjectModel对象，加载模型文件，读取app中的所有实体信息<br>2.初始化NSPersistentStoreCoordinator对象，添加持久化库(这里采取SQLite数据库)<br>3.初始化NSManagedObjectContext对象，拿到这个上下文对象操作实体，进行CRUD操作</p>\n<p><em>**</em>#<a href=\"\"></a>代码实现<br>先添加CoreData.framework和导入主头文件<CoreData/CoreData.h><br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359710937_3208.png\" alt=\"\"></p>\n<p>1.搭建上下文环境<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\">copy</a>1. // 从应用程序包中加载模型文件  </p>\n<ol>\n<li>NSManagedObjectModel *model = [NSManagedObjectModel mergedModelFromBundles:nil];  </li>\n<li>// 传入模型对象，初始化NSPersistentStoreCoordinator  </li>\n<li>NSPersistentStoreCoordinator *psc = [[[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:model] autorelease];  </li>\n<li>// 构建SQLite数据库文件的路径  </li>\n<li>NSString *docs = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];  </li>\n<li>NSURL *url = [NSURL fileURLWithPath:[docs stringByAppendingPathComponent:@”person.data”]];  </li>\n<li>// 添加持久化存储库，这里使用SQLite作为存储库  </li>\n<li>NSError *error = nil;  </li>\n<li>NSPersistentStore *store = [psc addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:url options:nil error:&amp;error];  </li>\n<li>if (store == nil) { // 直接抛异常  </li>\n<li>[NSException raise:@”添加数据库错误” format:@”%@”, [error localizedDescription]];  </li>\n<li>}  </li>\n<li>// 初始化上下文，设置persistentStoreCoordinator属性  </li>\n<li>NSManagedObjectContext *context = [[NSManagedObjectContext alloc] init];  </li>\n<li>context.persistentStoreCoordinator = psc;  </li>\n<li>// 用完之后，记得要[context release];  </li>\n</ol>\n<p>2.添加数据到数据库<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\">copy</a>1. // 传入上下文，创建一个Person实体对象  </p>\n<ol>\n<li>NSManagedObject *person = [NSEntityDescription insertNewObjectForEntityForName:@”Person” inManagedObjectContext:context];  </li>\n<li>// 设置Person的简单属性  </li>\n<li>[person setValue:@”MJ” forKey:@”name”];  </li>\n<li>[person setValue:[NSNumber numberWithInt:27] forKey:@”age”];  </li>\n<li>// 传入上下文，创建一个Card实体对象  </li>\n<li>NSManagedObject *card = [NSEntityDescription insertNewObjectForEntityForName:@”Card” inManagedObjectContext:context];  </li>\n<li>[card setValue:@”4414241933432” forKey:@”no”];  </li>\n<li>// 设置Person和Card之间的关联关系  </li>\n<li>[person setValue:card forKey:@”card”];  </li>\n<li>// 利用上下文对象，将数据同步到持久化存储库  </li>\n<li>NSError *error = nil;  </li>\n<li>BOOL success = [context save:&amp;error];  </li>\n<li>if (!success) {  </li>\n<li>[NSException raise:@”访问数据库错误” format:@”%@”, [error localizedDescription]];  </li>\n<li>}  </li>\n<li>// 如果是想做更新操作：只要在更改了实体对象的属性后调用[context save:&amp;error]，就能将更改的数据同步到数据库  </li>\n</ol>\n<p>3.从数据库中查询数据<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\">copy</a>1. // 初始化一个查询请求  </p>\n<ol>\n<li>NSFetchRequest *request = [[[NSFetchRequest alloc] init] autorelease];  </li>\n<li>// 设置要查询的实体  </li>\n<li>request.entity = [NSEntityDescription entityForName:@”Person” inManagedObjectContext:context];  </li>\n<li>// 设置排序（按照age降序）  </li>\n<li>NSSortDescriptor *sort = [NSSortDescriptor sortDescriptorWithKey:@”age” ascending:NO];  </li>\n<li>request.sortDescriptors = [NSArray arrayWithObject:sort];  </li>\n<li>// 设置条件过滤(搜索name中包含字符串”Itcast-1”的记录，注意：设置条件过滤时，数据库SQL语句中的%要用<em>来代替，所以%Itcast-1%应该写成</em>Itcast-1*)  </li>\n<li>NSPredicate <em>predicate = [NSPredicate predicateWithFormat:@”name like %@”, @”</em>Itcast-1*”];  </li>\n<li>request.predicate = predicate;  </li>\n<li>// 执行请求  </li>\n<li>NSError *error = nil;  </li>\n<li>NSArray *objs = [context executeFetchRequest:request error:&amp;error];  </li>\n<li>if (error) {  </li>\n<li>[NSException raise:@”查询错误” format:@”%@”, [error localizedDescription]];  </li>\n<li>}  </li>\n<li>// 遍历数据  </li>\n<li>for (NSManagedObject *obj in objs) {  </li>\n<li>NSLog(@”name=%@”, [obj valueForKey:@”name”]  </li>\n<li>}  </li>\n</ol>\n<p>注：Core Data不会根据实体中的关联关系立即获取相应的关联对象，比如通过Core Data取出Person实体时，并不会立即查询相关联的Card实体；当应用真的需要使用Card时，才会再次查询数据库，加载Card实体的信息。这个就是Core Data的延迟加载机制</p>\n<p>4.删除数据库中的数据<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\">copy</a>1. // 传入需要删除的实体对象  </p>\n<ol>\n<li>[context deleteObject:managedObject];  </li>\n<li>// 将结果同步到数据库  </li>\n<li>NSError *error = nil;  </li>\n<li>[context save:&amp;error];  </li>\n<li>if (error) {  </li>\n<li>[NSException raise:@”删除错误” format:@”%@”, [error localizedDescription]];  </li>\n<li>}  </li>\n</ol>\n<p><strong><em>**</em></strong>#<a href=\"\"></a>打开CoreData的SQL语句输出开关<br>1.打开Product，点击EditScheme…<br>2.点击Arguments，在ArgumentsPassed On Launch中添加2项<br>1&gt; -com.apple.CoreData.SQLDebug<br>2&gt; 1<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359711942_1857.png\" alt=\"\"><img src=\"http://img.my.csdn.net/uploads/201302/01/1359711964_1550.png\" alt=\"\"></p>\n<p><strong><em>**</em></strong>#<a href=\"\"></a>创建NSManagedObject的子类<br>默认情况下，利用Core Data取出的实体都是NSManagedObject类型的，能够利用键-值对来存取数据。但是一般情况下，实体在存取数据的基础上，有时还需要添加一些业务方法来完成一些其他任务，那么就必须创建NSManagedObject的子类<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359712054_3978.png\" alt=\"\"></p>\n<p>选择模型文件<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359712079_5045.png\" alt=\"\"></p>\n<p>选择需要创建子类的实体<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359712094_5888.png\" alt=\"\"></p>\n<p>创建完毕后，多了2个子类<br><img src=\"http://img.my.csdn.net/uploads/201302/01/1359712116_3772.png\" alt=\"\"></p>\n<p>文件内容展示：<br>Person.h<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\">copy</a>1. #import <Foundation/Foundation.h>  </p>\n<ol>\n<li>#import <CoreData/CoreData.h>  </li>\n<li></li>\n<li>@class Card;  </li>\n<li></li>\n<li>@interface Person : NSManagedObject  </li>\n<li></li>\n<li>@property (nonatomic, retain) NSString * name;  </li>\n<li>@property (nonatomic, retain) NSNumber * age;  </li>\n<li>@property (nonatomic, retain) Card *card;  </li>\n<li></li>\n<li>@end  </li>\n</ol>\n<p>Person.m<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\">copy</a>1. #import “Person.h”  </p>\n<ol>\n<li></li>\n<li>@implementation Person  </li>\n<li></li>\n<li>@dynamic name;  </li>\n<li>@dynamic age;  </li>\n<li>@dynamic card;  </li>\n<li></li>\n<li>@end  </li>\n</ol>\n<p>Card.h<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\">copy</a>1. #import <Foundation/Foundation.h>  </p>\n<ol>\n<li>#import <CoreData/CoreData.h>  </li>\n<li></li>\n<li>@class Person;  </li>\n<li></li>\n<li>@interface Card : NSManagedObject  </li>\n<li></li>\n<li>@property (nonatomic, retain) NSString * no;  </li>\n<li>@property (nonatomic, retain) Person *person;  </li>\n<li></li>\n<li>@end  </li>\n</ol>\n<p>Card.m<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\">copy</a>1. #import “Card.h”  </p>\n<ol>\n<li>#import “Person.h”  </li>\n<li></li>\n<li>@implementation Card  </li>\n<li></li>\n<li>@dynamic no;  </li>\n<li>@dynamic person;  </li>\n<li></li>\n<li>@end  </li>\n</ol>\n<p>那么往数据库中添加数据的时候就应该写了：<br><strong>[java]</strong> <a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/q199109106q/article/details/8563438/#\" title=\"copy\">copy</a>1. Person *person = [NSEntityDescription insertNewObjectForEntityForName:@”Person” inManagedObjectContext:context];  </p>\n<ol>\n<li>person.name = @”MJ”;  </li>\n<li>person.age = [NSNumber numberWithInt:27];  </li>\n<li></li>\n<li>Card *card = [NSEntityDescription insertNewObjectForEntityForName:@”Card” inManagedObjectContext:context];  </li>\n<li>card.no = @”4414245465656”;  </li>\n<li>person.card = card;  </li>\n<li>// 最后调用[context save&amp;error];保存数据  </li>\n</ol>\n<p>说到这里，整个Core Data框架的入门就结束了，其实Core Data还远不止这些功能，它还支持自动撤销机制，一对多关联等，这里就不一一介绍了</p>"},{"title":"iOS7使用原生API进行二维码和条形码的扫描","date":"2016-10-08T03:39:45.000Z","_content":"iOS7之前，开发者进行扫码编程时，一般会借助第三方库。常用的是ZBarSDK，IOS7之后，系统的AVMetadataObject类中，为我们提供了解析二维码的接口。经过测试，使用原生API扫描和处理的效率非常高，远远高于第三方库。\n<!-- more -->\n\n#转自：http://my.oschina.net/u/2340880/blog/405847\n##使用IOS7原生API进行二维码条形码的扫描\n###一、使用方法示例\n\n官方提供的接口非常简单，代码如下：\n\n[?](http://my.oschina.net/u/2340880/blog/405847#)123456789101112131415161718192021222324252627282930313233343536`@interface ViewController ()<AVCaptureMetadataOutputObjectsDelegate>``//用于处理采集信息的代理``{``    ``AVCaptureSession * session;``//输入输出的中间桥梁``}``@end``@implementation ViewController` `- (``void``)viewDidLoad {``    ``[super viewDidLoad];``    ``// Do any additional setup after loading the view, typically from a nib.``    ``//获取摄像设备``    ``AVCaptureDevice * device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];``    ``//创建输入流``    ``AVCaptureDeviceInput * input = [AVCaptureDeviceInput deviceInputWithDevice:device error:nil];``    ``//创建输出流``    ``AVCaptureMetadataOutput * output = [[AVCaptureMetadataOutput alloc]init];``    ``//设置代理 在主线程里刷新``    ``[output setMetadataObjectsDelegate:self queue:dispatch_get_main_queue()];``    ` `    ``//初始化链接对象``    ``session = [[AVCaptureSession alloc]init];``    ``//高质量采集率``    ``[session setSessionPreset:AVCaptureSessionPresetHigh];``    ` `    ``[session addInput:input];``    ``[session addOutput:output];``    ``//设置扫码支持的编码格式(如下设置条形码和二维码兼容)``    ``output.metadataObjectTypes=@[AVMetadataObjectTypeQRCode,AVMetadataObjectTypeEAN13Code, AVMetadataObjectTypeEAN8Code, AVMetadataObjectTypeCode128Code];``       ` `    ``AVCaptureVideoPreviewLayer * layer = [AVCaptureVideoPreviewLayer layerWithSession:session];``    ``layer.videoGravity=AVLayerVideoGravityResizeAspectFill;``    ``layer.frame=self.view.layer.bounds;``    ``[self.view.layer insertSublayer:layer atIndex:0];``    ``//开始捕获``    ``[session startRunning];``}`之后我们的UI上已经可以看到摄像头捕获的内容，只要实现代理中的方法，就可以完成二维码条形码的扫描：\n\n[?](http://my.oschina.net/u/2340880/blog/405847#)12345678`-(``void``)captureOutput:(AVCaptureOutput *)captureOutput didOutputMetadataObjects:(NSArray *)metadataObjects fromConnection:(AVCaptureConnection *)connection{``    ``if` `(metadataObjects.count>0) {``        ``//[session stopRunning];``        ``AVMetadataMachineReadableCodeObject * metadataObject = [metadataObjects objectAtIndex : 0 ];``        ``//输出扫描字符串``        ``NSLog(@``\"%@\"``,metadataObject.stringValue);``    ``}``}`###二、一些优化\n\n通过上面的代码测试，我们可以发现系统的解析处理效率是相当的高，IOS官方提供的API也确实非常强大，然而，我们可以做进一步的优化，将效率更加提高：\n\n首先，AVCaptureMetadataOutput类中有一个这样的属性(在IOS7.0之后可用)：\n@property(nonatomic) CGRect rectOfInterest;\n这个属性大致意思就是告诉系统它需要注意的区域，大部分APP的扫码UI中都会有一个框，提醒你将条形码放入那个区域，这个属性的作用就在这里，它可以设置一个范围，只处理在这个范围内捕获到的图像的信息。如此一来，可想而知，我们代码的效率又会得到很大的提高，在使用这个属性的时候。需要几点注意：\n\n1、这个CGRect参数和普通的Rect范围不太一样，它的四个值的范围都是0-1，表示比例。\n2、经过测试发现，这个参数里面的x对应的恰恰是距离左上角的垂直距离，y对应的是距离左上角的水平距离。\n3、宽度和高度设置的情况也是类似。\n3、举个例子如果我们想让扫描的处理区域是屏幕的下半部分，我们这样设置\n[?](http://my.oschina.net/u/2340880/blog/405847#)1`output.rectOfInterest=CGRectMake(0.5,0,0.5, 1);`具体apple为什么要设计成这样，或者是这个参数我的用法那里不对，还需要了解的朋友给个指导。\n","source":"_posts/oc/IOS7使用原生API进行二维码和条形码的扫描.md","raw":"---\ntitle: iOS7使用原生API进行二维码和条形码的扫描\ndate: 2016-10-08 11:39:45\ncategories: objective-c\n---\niOS7之前，开发者进行扫码编程时，一般会借助第三方库。常用的是ZBarSDK，IOS7之后，系统的AVMetadataObject类中，为我们提供了解析二维码的接口。经过测试，使用原生API扫描和处理的效率非常高，远远高于第三方库。\n<!-- more -->\n\n#转自：http://my.oschina.net/u/2340880/blog/405847\n##使用IOS7原生API进行二维码条形码的扫描\n###一、使用方法示例\n\n官方提供的接口非常简单，代码如下：\n\n[?](http://my.oschina.net/u/2340880/blog/405847#)123456789101112131415161718192021222324252627282930313233343536`@interface ViewController ()<AVCaptureMetadataOutputObjectsDelegate>``//用于处理采集信息的代理``{``    ``AVCaptureSession * session;``//输入输出的中间桥梁``}``@end``@implementation ViewController` `- (``void``)viewDidLoad {``    ``[super viewDidLoad];``    ``// Do any additional setup after loading the view, typically from a nib.``    ``//获取摄像设备``    ``AVCaptureDevice * device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];``    ``//创建输入流``    ``AVCaptureDeviceInput * input = [AVCaptureDeviceInput deviceInputWithDevice:device error:nil];``    ``//创建输出流``    ``AVCaptureMetadataOutput * output = [[AVCaptureMetadataOutput alloc]init];``    ``//设置代理 在主线程里刷新``    ``[output setMetadataObjectsDelegate:self queue:dispatch_get_main_queue()];``    ` `    ``//初始化链接对象``    ``session = [[AVCaptureSession alloc]init];``    ``//高质量采集率``    ``[session setSessionPreset:AVCaptureSessionPresetHigh];``    ` `    ``[session addInput:input];``    ``[session addOutput:output];``    ``//设置扫码支持的编码格式(如下设置条形码和二维码兼容)``    ``output.metadataObjectTypes=@[AVMetadataObjectTypeQRCode,AVMetadataObjectTypeEAN13Code, AVMetadataObjectTypeEAN8Code, AVMetadataObjectTypeCode128Code];``       ` `    ``AVCaptureVideoPreviewLayer * layer = [AVCaptureVideoPreviewLayer layerWithSession:session];``    ``layer.videoGravity=AVLayerVideoGravityResizeAspectFill;``    ``layer.frame=self.view.layer.bounds;``    ``[self.view.layer insertSublayer:layer atIndex:0];``    ``//开始捕获``    ``[session startRunning];``}`之后我们的UI上已经可以看到摄像头捕获的内容，只要实现代理中的方法，就可以完成二维码条形码的扫描：\n\n[?](http://my.oschina.net/u/2340880/blog/405847#)12345678`-(``void``)captureOutput:(AVCaptureOutput *)captureOutput didOutputMetadataObjects:(NSArray *)metadataObjects fromConnection:(AVCaptureConnection *)connection{``    ``if` `(metadataObjects.count>0) {``        ``//[session stopRunning];``        ``AVMetadataMachineReadableCodeObject * metadataObject = [metadataObjects objectAtIndex : 0 ];``        ``//输出扫描字符串``        ``NSLog(@``\"%@\"``,metadataObject.stringValue);``    ``}``}`###二、一些优化\n\n通过上面的代码测试，我们可以发现系统的解析处理效率是相当的高，IOS官方提供的API也确实非常强大，然而，我们可以做进一步的优化，将效率更加提高：\n\n首先，AVCaptureMetadataOutput类中有一个这样的属性(在IOS7.0之后可用)：\n@property(nonatomic) CGRect rectOfInterest;\n这个属性大致意思就是告诉系统它需要注意的区域，大部分APP的扫码UI中都会有一个框，提醒你将条形码放入那个区域，这个属性的作用就在这里，它可以设置一个范围，只处理在这个范围内捕获到的图像的信息。如此一来，可想而知，我们代码的效率又会得到很大的提高，在使用这个属性的时候。需要几点注意：\n\n1、这个CGRect参数和普通的Rect范围不太一样，它的四个值的范围都是0-1，表示比例。\n2、经过测试发现，这个参数里面的x对应的恰恰是距离左上角的垂直距离，y对应的是距离左上角的水平距离。\n3、宽度和高度设置的情况也是类似。\n3、举个例子如果我们想让扫描的处理区域是屏幕的下半部分，我们这样设置\n[?](http://my.oschina.net/u/2340880/blog/405847#)1`output.rectOfInterest=CGRectMake(0.5,0,0.5, 1);`具体apple为什么要设计成这样，或者是这个参数我的用法那里不对，还需要了解的朋友给个指导。\n","slug":"oc/IOS7使用原生API进行二维码和条形码的扫描","published":1,"updated":"2016-10-08T09:45:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms96s000m21xwg3hffc9l","content":"<p>iOS7之前，开发者进行扫码编程时，一般会借助第三方库。常用的是ZBarSDK，IOS7之后，系统的AVMetadataObject类中，为我们提供了解析二维码的接口。经过测试，使用原生API扫描和处理的效率非常高，远远高于第三方库。<br><a id=\"more\"></a></p>\n<p>#转自：<a href=\"http://my.oschina.net/u/2340880/blog/405847\" target=\"_blank\" rel=\"external\">http://my.oschina.net/u/2340880/blog/405847</a></p>\n<p>##使用IOS7原生API进行二维码条形码的扫描</p>\n<p>###一、使用方法示例</p>\n<p>官方提供的接口非常简单，代码如下：</p>\n<p><a href=\"http://my.oschina.net/u/2340880/blog/405847#\" target=\"_blank\" rel=\"external\">?</a>123456789101112131415161718192021222324252627282930313233343536<code>@interface ViewController ()&lt;AVCaptureMetadataOutputObjectsDelegate&gt;``//用于处理采集信息的代理``{``    ``AVCaptureSession * session;``//输入输出的中间桥梁``}``@end``@implementation ViewController</code> <code>- (``void``)viewDidLoad {``    ``[super viewDidLoad];``    ``// Do any additional setup after loading the view, typically from a nib.``    ``//获取摄像设备``    ``AVCaptureDevice * device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];``    ``//创建输入流``    ``AVCaptureDeviceInput * input = [AVCaptureDeviceInput deviceInputWithDevice:device error:nil];``    ``//创建输出流``    ``AVCaptureMetadataOutput * output = [[AVCaptureMetadataOutput alloc]init];``    ``//设置代理 在主线程里刷新``    ``[output setMetadataObjectsDelegate:self queue:dispatch_get_main_queue()];`` </code> <code>``//初始化链接对象``    ``session = [[AVCaptureSession alloc]init];``    ``//高质量采集率``    ``[session setSessionPreset:AVCaptureSessionPresetHigh];`` </code> <code>``[session addInput:input];``    ``[session addOutput:output];``    ``//设置扫码支持的编码格式(如下设置条形码和二维码兼容)``    ``output.metadataObjectTypes=@[AVMetadataObjectTypeQRCode,AVMetadataObjectTypeEAN13Code, AVMetadataObjectTypeEAN8Code, AVMetadataObjectTypeCode128Code];`` </code> <code>``AVCaptureVideoPreviewLayer * layer = [AVCaptureVideoPreviewLayer layerWithSession:session];``    ``layer.videoGravity=AVLayerVideoGravityResizeAspectFill;``    ``layer.frame=self.view.layer.bounds;``    ``[self.view.layer insertSublayer:layer atIndex:0];``    ``//开始捕获``    ``[session startRunning];``}</code>之后我们的UI上已经可以看到摄像头捕获的内容，只要实现代理中的方法，就可以完成二维码条形码的扫描：</p>\n<p><a href=\"http://my.oschina.net/u/2340880/blog/405847#\" target=\"_blank\" rel=\"external\">?</a>12345678<code>-(``void``)captureOutput:(AVCaptureOutput *)captureOutput didOutputMetadataObjects:(NSArray *)metadataObjects fromConnection:(AVCaptureConnection *)connection{``    ``if</code> <code>(metadataObjects.count&gt;0) {``        ``//[session stopRunning];``        ``AVMetadataMachineReadableCodeObject * metadataObject = [metadataObjects objectAtIndex : 0 ];``        ``//输出扫描字符串``        ``NSLog(@``&quot;%@&quot;``,metadataObject.stringValue);``    ``}``}</code>###二、一些优化</p>\n<p>通过上面的代码测试，我们可以发现系统的解析处理效率是相当的高，IOS官方提供的API也确实非常强大，然而，我们可以做进一步的优化，将效率更加提高：</p>\n<p>首先，AVCaptureMetadataOutput类中有一个这样的属性(在IOS7.0之后可用)：<br>@property(nonatomic) CGRect rectOfInterest;<br>这个属性大致意思就是告诉系统它需要注意的区域，大部分APP的扫码UI中都会有一个框，提醒你将条形码放入那个区域，这个属性的作用就在这里，它可以设置一个范围，只处理在这个范围内捕获到的图像的信息。如此一来，可想而知，我们代码的效率又会得到很大的提高，在使用这个属性的时候。需要几点注意：</p>\n<p>1、这个CGRect参数和普通的Rect范围不太一样，它的四个值的范围都是0-1，表示比例。<br>2、经过测试发现，这个参数里面的x对应的恰恰是距离左上角的垂直距离，y对应的是距离左上角的水平距离。<br>3、宽度和高度设置的情况也是类似。<br>3、举个例子如果我们想让扫描的处理区域是屏幕的下半部分，我们这样设置<br><a href=\"http://my.oschina.net/u/2340880/blog/405847#\" target=\"_blank\" rel=\"external\">?</a>1<code>output.rectOfInterest=CGRectMake(0.5,0,0.5, 1);</code>具体apple为什么要设计成这样，或者是这个参数我的用法那里不对，还需要了解的朋友给个指导。</p>\n","excerpt":"<p>iOS7之前，开发者进行扫码编程时，一般会借助第三方库。常用的是ZBarSDK，IOS7之后，系统的AVMetadataObject类中，为我们提供了解析二维码的接口。经过测试，使用原生API扫描和处理的效率非常高，远远高于第三方库。<br>","more":"</p>\n<p>#转自：<a href=\"http://my.oschina.net/u/2340880/blog/405847\">http://my.oschina.net/u/2340880/blog/405847</a></p>\n<p>##使用IOS7原生API进行二维码条形码的扫描</p>\n<p>###一、使用方法示例</p>\n<p>官方提供的接口非常简单，代码如下：</p>\n<p><a href=\"http://my.oschina.net/u/2340880/blog/405847#\">?</a>123456789101112131415161718192021222324252627282930313233343536<code>@interface ViewController ()&lt;AVCaptureMetadataOutputObjectsDelegate&gt;``//用于处理采集信息的代理``{``    ``AVCaptureSession * session;``//输入输出的中间桥梁``}``@end``@implementation ViewController</code> <code>- (``void``)viewDidLoad {``    ``[super viewDidLoad];``    ``// Do any additional setup after loading the view, typically from a nib.``    ``//获取摄像设备``    ``AVCaptureDevice * device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];``    ``//创建输入流``    ``AVCaptureDeviceInput * input = [AVCaptureDeviceInput deviceInputWithDevice:device error:nil];``    ``//创建输出流``    ``AVCaptureMetadataOutput * output = [[AVCaptureMetadataOutput alloc]init];``    ``//设置代理 在主线程里刷新``    ``[output setMetadataObjectsDelegate:self queue:dispatch_get_main_queue()];`` </code> <code>``//初始化链接对象``    ``session = [[AVCaptureSession alloc]init];``    ``//高质量采集率``    ``[session setSessionPreset:AVCaptureSessionPresetHigh];`` </code> <code>``[session addInput:input];``    ``[session addOutput:output];``    ``//设置扫码支持的编码格式(如下设置条形码和二维码兼容)``    ``output.metadataObjectTypes=@[AVMetadataObjectTypeQRCode,AVMetadataObjectTypeEAN13Code, AVMetadataObjectTypeEAN8Code, AVMetadataObjectTypeCode128Code];`` </code> <code>``AVCaptureVideoPreviewLayer * layer = [AVCaptureVideoPreviewLayer layerWithSession:session];``    ``layer.videoGravity=AVLayerVideoGravityResizeAspectFill;``    ``layer.frame=self.view.layer.bounds;``    ``[self.view.layer insertSublayer:layer atIndex:0];``    ``//开始捕获``    ``[session startRunning];``}</code>之后我们的UI上已经可以看到摄像头捕获的内容，只要实现代理中的方法，就可以完成二维码条形码的扫描：</p>\n<p><a href=\"http://my.oschina.net/u/2340880/blog/405847#\">?</a>12345678<code>-(``void``)captureOutput:(AVCaptureOutput *)captureOutput didOutputMetadataObjects:(NSArray *)metadataObjects fromConnection:(AVCaptureConnection *)connection{``    ``if</code> <code>(metadataObjects.count&gt;0) {``        ``//[session stopRunning];``        ``AVMetadataMachineReadableCodeObject * metadataObject = [metadataObjects objectAtIndex : 0 ];``        ``//输出扫描字符串``        ``NSLog(@``&quot;%@&quot;``,metadataObject.stringValue);``    ``}``}</code>###二、一些优化</p>\n<p>通过上面的代码测试，我们可以发现系统的解析处理效率是相当的高，IOS官方提供的API也确实非常强大，然而，我们可以做进一步的优化，将效率更加提高：</p>\n<p>首先，AVCaptureMetadataOutput类中有一个这样的属性(在IOS7.0之后可用)：<br>@property(nonatomic) CGRect rectOfInterest;<br>这个属性大致意思就是告诉系统它需要注意的区域，大部分APP的扫码UI中都会有一个框，提醒你将条形码放入那个区域，这个属性的作用就在这里，它可以设置一个范围，只处理在这个范围内捕获到的图像的信息。如此一来，可想而知，我们代码的效率又会得到很大的提高，在使用这个属性的时候。需要几点注意：</p>\n<p>1、这个CGRect参数和普通的Rect范围不太一样，它的四个值的范围都是0-1，表示比例。<br>2、经过测试发现，这个参数里面的x对应的恰恰是距离左上角的垂直距离，y对应的是距离左上角的水平距离。<br>3、宽度和高度设置的情况也是类似。<br>3、举个例子如果我们想让扫描的处理区域是屏幕的下半部分，我们这样设置<br><a href=\"http://my.oschina.net/u/2340880/blog/405847#\">?</a>1<code>output.rectOfInterest=CGRectMake(0.5,0,0.5, 1);</code>具体apple为什么要设计成这样，或者是这个参数我的用法那里不对，还需要了解的朋友给个指导。</p>"},{"title":"MPMoviePlayerViewController和MPMoviePlayerController","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    [self playVideo:[NSURL URLWithString:self.playURL]];\n\n}\n//根据视频url播放视频\n- (void) playVideo:(NSURL *) movieURL\n{\n    MPMoviePlayerViewController *playerViewController = [[MPMoviePlayerViewController alloc]     initWithContentURL:movieURL];\n    self.playerViewController = playerViewController;\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(playVideoFinished:) name:MPMoviePlayerPlaybackDidFinishNotification object:[playerViewController moviePlayer]];\n    playerViewController.modalTransitionStyle = UIModalTransitionStyleFlipHorizontal;\n    [self.view addSubview:playerViewController.view];\n    MPMoviePlayerController *player = [playerViewController moviePlayer];\n    [player play];\n}\n\n//当点击Done按键或者播放完毕时调用此函数\n- (void) playVideoFinished:(NSNotification *)theNotification\n{\n    MPMoviePlayerController *player = [theNotification object];\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:MPMoviePlayerPlaybackDidFinishNotification object:player];\n    [player stop];\n\n    [self dismissViewControllerAnimated:YES completion:^{\n       \n       \n    }];\n}\n```\n\nMPMoviePlayerViewController和MPMoviePlayerController 使用场合不一样MPMoviePlayerViewController是在iOS3.2以后的平台上使用。MPMoviePlayerController在3.2之前使用，虽然在3.2之后也能使用，但是使用方法略有改变，建议3.2之后使用MPMoviePlayerViewController。\n3.2之后,MPMoviePlayerController作为MPMoviePlayerViewController的一个属性存在。\n\n以下是使用MPMoviePlayerViewController播放视频的代码:\n\n\n去掉系统上的按钮导航条 self.play.controlStyle = MPMovieControlStyleNone;","source":"_posts/oc/MPMoviePlayerViewController和MPMoviePlayerController.md","raw":"---\ntitle: MPMoviePlayerViewController和MPMoviePlayerController\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    [self playVideo:[NSURL URLWithString:self.playURL]];\n\n}\n//根据视频url播放视频\n- (void) playVideo:(NSURL *) movieURL\n{\n    MPMoviePlayerViewController *playerViewController = [[MPMoviePlayerViewController alloc]     initWithContentURL:movieURL];\n    self.playerViewController = playerViewController;\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(playVideoFinished:) name:MPMoviePlayerPlaybackDidFinishNotification object:[playerViewController moviePlayer]];\n    playerViewController.modalTransitionStyle = UIModalTransitionStyleFlipHorizontal;\n    [self.view addSubview:playerViewController.view];\n    MPMoviePlayerController *player = [playerViewController moviePlayer];\n    [player play];\n}\n\n//当点击Done按键或者播放完毕时调用此函数\n- (void) playVideoFinished:(NSNotification *)theNotification\n{\n    MPMoviePlayerController *player = [theNotification object];\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:MPMoviePlayerPlaybackDidFinishNotification object:player];\n    [player stop];\n\n    [self dismissViewControllerAnimated:YES completion:^{\n       \n       \n    }];\n}\n```\n\nMPMoviePlayerViewController和MPMoviePlayerController 使用场合不一样MPMoviePlayerViewController是在iOS3.2以后的平台上使用。MPMoviePlayerController在3.2之前使用，虽然在3.2之后也能使用，但是使用方法略有改变，建议3.2之后使用MPMoviePlayerViewController。\n3.2之后,MPMoviePlayerController作为MPMoviePlayerViewController的一个属性存在。\n\n以下是使用MPMoviePlayerViewController播放视频的代码:\n\n\n去掉系统上的按钮导航条 self.play.controlStyle = MPMovieControlStyleNone;","slug":"oc/MPMoviePlayerViewController和MPMoviePlayerController","published":1,"updated":"2016-10-08T05:58:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms96v000n21xw9ncy0tst","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">    [<span class=\"keyword\">self</span> playVideo:[<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"keyword\">self</span>.playURL]];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//根据视频url播放视频</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>) playVideo:(<span class=\"built_in\">NSURL</span> *) movieURL</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">MPMoviePlayerViewController</span> *playerViewController = [[<span class=\"built_in\">MPMoviePlayerViewController</span> alloc]     initWithContentURL:movieURL];</div><div class=\"line\">    <span class=\"keyword\">self</span>.playerViewController = playerViewController;</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(playVideoFinished:) name:<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span> object:[playerViewController moviePlayer]];</div><div class=\"line\">    playerViewController.modalTransitionStyle = <span class=\"built_in\">UIModalTransitionStyleFlipHorizontal</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:playerViewController.view];</div><div class=\"line\">    <span class=\"built_in\">MPMoviePlayerController</span> *player = [playerViewController moviePlayer];</div><div class=\"line\">    [player play];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//当点击Done按键或者播放完毕时调用此函数</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>) playVideoFinished:(<span class=\"built_in\">NSNotification</span> *)theNotification</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">MPMoviePlayerController</span> *player = [theNotification object];</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span> name:<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span> object:player];</div><div class=\"line\">    [player stop];</div><div class=\"line\"></div><div class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:^&#123;</div><div class=\"line\">       </div><div class=\"line\">       </div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>MPMoviePlayerViewController和MPMoviePlayerController 使用场合不一样MPMoviePlayerViewController是在iOS3.2以后的平台上使用。MPMoviePlayerController在3.2之前使用，虽然在3.2之后也能使用，但是使用方法略有改变，建议3.2之后使用MPMoviePlayerViewController。<br>3.2之后,MPMoviePlayerController作为MPMoviePlayerViewController的一个属性存在。</p>\n<p>以下是使用MPMoviePlayerViewController播放视频的代码:</p>\n<p>去掉系统上的按钮导航条 self.play.controlStyle = MPMovieControlStyleNone;</p>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">    [<span class=\"keyword\">self</span> playVideo:[<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"keyword\">self</span>.playURL]];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//根据视频url播放视频</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>) playVideo:(<span class=\"built_in\">NSURL</span> *) movieURL</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">MPMoviePlayerViewController</span> *playerViewController = [[<span class=\"built_in\">MPMoviePlayerViewController</span> alloc]     initWithContentURL:movieURL];</div><div class=\"line\">    <span class=\"keyword\">self</span>.playerViewController = playerViewController;</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(playVideoFinished:) name:<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span> object:[playerViewController moviePlayer]];</div><div class=\"line\">    playerViewController.modalTransitionStyle = <span class=\"built_in\">UIModalTransitionStyleFlipHorizontal</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:playerViewController.view];</div><div class=\"line\">    <span class=\"built_in\">MPMoviePlayerController</span> *player = [playerViewController moviePlayer];</div><div class=\"line\">    [player play];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//当点击Done按键或者播放完毕时调用此函数</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>) playVideoFinished:(<span class=\"built_in\">NSNotification</span> *)theNotification</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">MPMoviePlayerController</span> *player = [theNotification object];</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span> name:<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span> object:player];</div><div class=\"line\">    [player stop];</div><div class=\"line\"></div><div class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:^&#123;</div><div class=\"line\">       </div><div class=\"line\">       </div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>MPMoviePlayerViewController和MPMoviePlayerController 使用场合不一样MPMoviePlayerViewController是在iOS3.2以后的平台上使用。MPMoviePlayerController在3.2之前使用，虽然在3.2之后也能使用，但是使用方法略有改变，建议3.2之后使用MPMoviePlayerViewController。<br>3.2之后,MPMoviePlayerController作为MPMoviePlayerViewController的一个属性存在。</p>\n<p>以下是使用MPMoviePlayerViewController播放视频的代码:</p>\n<p>去掉系统上的按钮导航条 self.play.controlStyle = MPMovieControlStyleNone;</p>"},{"title":"Masonry介绍与使用实践：快速上手Autolayout","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n转自：http://www.cocoachina.com/ios/20141219/10702.html\n前言\n\tMagicNumber -> autoresizingMask -> autolayou\n以上是纯手写代码所经历的关于页面布局的三个时期\n在iphone1-iphone3gs时代 window的size固定为(320,480) 我们只需要简单计算一下相对位置就好了\n在iphone4-iphone4s时代 苹果推出了retina屏 但是给了码农们非常大的福利:window的size不变\n在iphone5-iphone5s时代 window的size变了(320,568) 这时autoresizingMask派上了用场(为啥这时候不用Autolayout? 因为还要支持ios5呗) 简单的适配一下即可\n在iphone6+时代 window的width也发生了变化(相对5和5s的屏幕比例没有变化) 终于是时候抛弃autoresizingMask改用autolayout了(不用支持ios5了 相对于屏幕适配的多样性来说autoresizingMask也已经过时了)\n那如何快速的上手autolayout呢? 说实话 当年ios6推出的同时新增了autolayout的特性 我看了一下官方文档和demo 就立马抛弃到一边了 因为实在过于的繁琐和啰嗦(有过经验的朋友肯定有同感)\n直到iPhone6发布之后 我知道使用autolayout势在必行了 这时想起了以前在浏览Github看到过的一个第三方库Masonry 在花了几个小时的研究使用后 我就将autolayout掌握了(重点是我并没有学习任何的官方文档或者其他的关于autolayout的知识) 这就是我为什么要写下这篇文章来推荐它的原因.\n**介绍**\nMasonry 源码：[https://github.com/Masonry/Masonry](https://github.com/Masonry/Masonry)\nMasonry是一个轻量级的布局框架 拥有自己的描述语法 采用更优雅的链式语法封装自动布局 简洁明了 并具有高可读性 而且同时支持 iOS 和 Max OS X。\n我们先来看一段官方的sample code来认识一下Masonry\n\t[view1 mas_makeConstraints:^(MASConstraintMaker *make) {\n\t    make.edges.equalTo(superview).with.insets(padding);\n\t}];\n看到block里面的那句话: make edges equalTo superview with insets\n通过链式的自然语言 就把view1给autolayout好了 是不是简单易懂?\n**使用**\n看一下Masonry支持哪一些属性\n\t@property (nonatomic, strong, readonly) MASConstraint *left;\n\t@property (nonatomic, strong, readonly) MASConstraint *top;\n\t@property (nonatomic, strong, readonly) MASConstraint *right;\n\t@property (nonatomic, strong, readonly) MASConstraint *bottom;\n\t@property (nonatomic, strong, readonly) MASConstraint *leading;\n\t@property (nonatomic, strong, readonly) MASConstraint *trailing;\n\t@property (nonatomic, strong, readonly) MASConstraint *width;\n\t@property (nonatomic, strong, readonly) MASConstraint *height;\n\t@property (nonatomic, strong, readonly) MASConstraint *centerX;\n\t@property (nonatomic, strong, readonly) MASConstraint *centerY;\n\t@property (nonatomic, strong, readonly) MASConstraint *baseline;\n这些属性与NSLayoutAttrubute的对照表如下\n\n\n其中leading与left trailing与right 在正常情况下是等价的 但是当一些布局是从右至左时(比如阿拉伯文?没有类似的经验) 则会对调 换句话说就是基本可以不理不用 用left和right就好了\n在ios8发布后 又新增了一堆奇奇怪怪的属性(有兴趣的朋友可以去瞅瞅) Masonry暂时还不支持(不过你要支持ios6,ios7 就没必要去管那么多了)\n在讲实例之前 先介绍一个MACRO\n1`#define WS(weakSelf)  __weak __typeof(&*self)weakSelf = self;`快速的定义一个weakSelf 当然是用于block里面啦 下面进入正题(为了方便 我们测试的superView都是一个size为(300,300)的UIView)\n下面 通过一些简单的实例来简单介绍如何轻松愉快的使用Masonry:\n1. [基础] 居中显示一个view\n1234567891011121314151617`- (void)viewDidLoad``{``    ``[``super` `viewDidLoad];``    ``// Do any additional setup after loading the view.``    ` `    ``WS(ws);``    ` `    ``UIView *sv = [UIView ``new``];``    ``[sv showPlaceHolder];``    ``sv.backgroundColor = [UIColor blackColor];``    ``[self.view addSubview:sv];``    ``[sv mas_makeConstraints:^(MASConstraintMaker *make) {``        ``make.center.equalTo(ws.view);``        ``make.size.mas_equalTo(CGSizeMake(300, 300));``    ``}];``    ` `}`\n","source":"_posts/oc/Masonry介绍与使用实践：快速上手Autolayout.md","raw":"---\ntitle: Masonry介绍与使用实践：快速上手Autolayout\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n转自：http://www.cocoachina.com/ios/20141219/10702.html\n前言\n\tMagicNumber -> autoresizingMask -> autolayou\n以上是纯手写代码所经历的关于页面布局的三个时期\n在iphone1-iphone3gs时代 window的size固定为(320,480) 我们只需要简单计算一下相对位置就好了\n在iphone4-iphone4s时代 苹果推出了retina屏 但是给了码农们非常大的福利:window的size不变\n在iphone5-iphone5s时代 window的size变了(320,568) 这时autoresizingMask派上了用场(为啥这时候不用Autolayout? 因为还要支持ios5呗) 简单的适配一下即可\n在iphone6+时代 window的width也发生了变化(相对5和5s的屏幕比例没有变化) 终于是时候抛弃autoresizingMask改用autolayout了(不用支持ios5了 相对于屏幕适配的多样性来说autoresizingMask也已经过时了)\n那如何快速的上手autolayout呢? 说实话 当年ios6推出的同时新增了autolayout的特性 我看了一下官方文档和demo 就立马抛弃到一边了 因为实在过于的繁琐和啰嗦(有过经验的朋友肯定有同感)\n直到iPhone6发布之后 我知道使用autolayout势在必行了 这时想起了以前在浏览Github看到过的一个第三方库Masonry 在花了几个小时的研究使用后 我就将autolayout掌握了(重点是我并没有学习任何的官方文档或者其他的关于autolayout的知识) 这就是我为什么要写下这篇文章来推荐它的原因.\n**介绍**\nMasonry 源码：[https://github.com/Masonry/Masonry](https://github.com/Masonry/Masonry)\nMasonry是一个轻量级的布局框架 拥有自己的描述语法 采用更优雅的链式语法封装自动布局 简洁明了 并具有高可读性 而且同时支持 iOS 和 Max OS X。\n我们先来看一段官方的sample code来认识一下Masonry\n\t[view1 mas_makeConstraints:^(MASConstraintMaker *make) {\n\t    make.edges.equalTo(superview).with.insets(padding);\n\t}];\n看到block里面的那句话: make edges equalTo superview with insets\n通过链式的自然语言 就把view1给autolayout好了 是不是简单易懂?\n**使用**\n看一下Masonry支持哪一些属性\n\t@property (nonatomic, strong, readonly) MASConstraint *left;\n\t@property (nonatomic, strong, readonly) MASConstraint *top;\n\t@property (nonatomic, strong, readonly) MASConstraint *right;\n\t@property (nonatomic, strong, readonly) MASConstraint *bottom;\n\t@property (nonatomic, strong, readonly) MASConstraint *leading;\n\t@property (nonatomic, strong, readonly) MASConstraint *trailing;\n\t@property (nonatomic, strong, readonly) MASConstraint *width;\n\t@property (nonatomic, strong, readonly) MASConstraint *height;\n\t@property (nonatomic, strong, readonly) MASConstraint *centerX;\n\t@property (nonatomic, strong, readonly) MASConstraint *centerY;\n\t@property (nonatomic, strong, readonly) MASConstraint *baseline;\n这些属性与NSLayoutAttrubute的对照表如下\n\n\n其中leading与left trailing与right 在正常情况下是等价的 但是当一些布局是从右至左时(比如阿拉伯文?没有类似的经验) 则会对调 换句话说就是基本可以不理不用 用left和right就好了\n在ios8发布后 又新增了一堆奇奇怪怪的属性(有兴趣的朋友可以去瞅瞅) Masonry暂时还不支持(不过你要支持ios6,ios7 就没必要去管那么多了)\n在讲实例之前 先介绍一个MACRO\n1`#define WS(weakSelf)  __weak __typeof(&*self)weakSelf = self;`快速的定义一个weakSelf 当然是用于block里面啦 下面进入正题(为了方便 我们测试的superView都是一个size为(300,300)的UIView)\n下面 通过一些简单的实例来简单介绍如何轻松愉快的使用Masonry:\n1. [基础] 居中显示一个view\n1234567891011121314151617`- (void)viewDidLoad``{``    ``[``super` `viewDidLoad];``    ``// Do any additional setup after loading the view.``    ` `    ``WS(ws);``    ` `    ``UIView *sv = [UIView ``new``];``    ``[sv showPlaceHolder];``    ``sv.backgroundColor = [UIColor blackColor];``    ``[self.view addSubview:sv];``    ``[sv mas_makeConstraints:^(MASConstraintMaker *make) {``        ``make.center.equalTo(ws.view);``        ``make.size.mas_equalTo(CGSizeMake(300, 300));``    ``}];``    ` `}`\n","slug":"oc/Masonry介绍与使用实践：快速上手Autolayout","published":1,"updated":"2016-10-08T09:15:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms96y000q21xwaookor9p","content":"<a id=\"more\"></a>\n<p>转自：<a href=\"http://www.cocoachina.com/ios/20141219/10702.html\" target=\"_blank\" rel=\"external\">http://www.cocoachina.com/ios/20141219/10702.html</a><br>前言<br>    MagicNumber -&gt; autoresizingMask -&gt; autolayou<br>以上是纯手写代码所经历的关于页面布局的三个时期<br>在iphone1-iphone3gs时代 window的size固定为(320,480) 我们只需要简单计算一下相对位置就好了<br>在iphone4-iphone4s时代 苹果推出了retina屏 但是给了码农们非常大的福利:window的size不变<br>在iphone5-iphone5s时代 window的size变了(320,568) 这时autoresizingMask派上了用场(为啥这时候不用Autolayout? 因为还要支持ios5呗) 简单的适配一下即可<br>在iphone6+时代 window的width也发生了变化(相对5和5s的屏幕比例没有变化) 终于是时候抛弃autoresizingMask改用autolayout了(不用支持ios5了 相对于屏幕适配的多样性来说autoresizingMask也已经过时了)<br>那如何快速的上手autolayout呢? 说实话 当年ios6推出的同时新增了autolayout的特性 我看了一下官方文档和demo 就立马抛弃到一边了 因为实在过于的繁琐和啰嗦(有过经验的朋友肯定有同感)<br>直到iPhone6发布之后 我知道使用autolayout势在必行了 这时想起了以前在浏览Github看到过的一个第三方库Masonry 在花了几个小时的研究使用后 我就将autolayout掌握了(重点是我并没有学习任何的官方文档或者其他的关于autolayout的知识) 这就是我为什么要写下这篇文章来推荐它的原因.<br><strong>介绍</strong><br>Masonry 源码：<a href=\"https://github.com/Masonry/Masonry\" target=\"_blank\" rel=\"external\">https://github.com/Masonry/Masonry</a><br>Masonry是一个轻量级的布局框架 拥有自己的描述语法 采用更优雅的链式语法封装自动布局 简洁明了 并具有高可读性 而且同时支持 iOS 和 Max OS X。<br>我们先来看一段官方的sample code来认识一下Masonry<br>    [view1 mas_makeConstraints:^(MASConstraintMaker <em>make) {<br>        make.edges.equalTo(superview).with.insets(padding);<br>    }];<br>看到block里面的那句话: make edges equalTo superview with insets<br>通过链式的自然语言 就把view1给autolayout好了 是不是简单易懂?<br><strong>使用</strong><br>看一下Masonry支持哪一些属性<br>    @property (nonatomic, strong, readonly) MASConstraint </em>left;<br>    @property (nonatomic, strong, readonly) MASConstraint <em>top;<br>    @property (nonatomic, strong, readonly) MASConstraint </em>right;<br>    @property (nonatomic, strong, readonly) MASConstraint <em>bottom;<br>    @property (nonatomic, strong, readonly) MASConstraint </em>leading;<br>    @property (nonatomic, strong, readonly) MASConstraint <em>trailing;<br>    @property (nonatomic, strong, readonly) MASConstraint </em>width;<br>    @property (nonatomic, strong, readonly) MASConstraint <em>height;<br>    @property (nonatomic, strong, readonly) MASConstraint </em>centerX;<br>    @property (nonatomic, strong, readonly) MASConstraint <em>centerY;<br>    @property (nonatomic, strong, readonly) MASConstraint </em>baseline;<br>这些属性与NSLayoutAttrubute的对照表如下</p>\n<p>其中leading与left trailing与right 在正常情况下是等价的 但是当一些布局是从右至左时(比如阿拉伯文?没有类似的经验) 则会对调 换句话说就是基本可以不理不用 用left和right就好了<br>在ios8发布后 又新增了一堆奇奇怪怪的属性(有兴趣的朋友可以去瞅瞅) Masonry暂时还不支持(不过你要支持ios6,ios7 就没必要去管那么多了)<br>在讲实例之前 先介绍一个MACRO<br>1<code>#define WS(weakSelf)  __weak __typeof(&amp;*self)weakSelf = self;</code>快速的定义一个weakSelf 当然是用于block里面啦 下面进入正题(为了方便 我们测试的superView都是一个size为(300,300)的UIView)<br>下面 通过一些简单的实例来简单介绍如何轻松愉快的使用Masonry:</p>\n<ol>\n<li>[基础] 居中显示一个view<br>1234567891011121314151617<code>- (void)viewDidLoad``{``    ``[``super</code> <code>viewDidLoad];``    ``// Do any additional setup after loading the view.`` </code> <code>``WS(ws);`` </code> <code>``UIView *sv = [UIView ``new``];``    ``[sv showPlaceHolder];``    ``sv.backgroundColor = [UIColor blackColor];``    ``[self.view addSubview:sv];``    ``[sv mas_makeConstraints:^(MASConstraintMaker *make) {``        ``make.center.equalTo(ws.view);``        ``make.size.mas_equalTo(CGSizeMake(300, 300));``    ``}];`` </code> <code>}</code></li>\n</ol>\n","excerpt":"","more":"<p>转自：<a href=\"http://www.cocoachina.com/ios/20141219/10702.html\">http://www.cocoachina.com/ios/20141219/10702.html</a><br>前言<br>    MagicNumber -&gt; autoresizingMask -&gt; autolayou<br>以上是纯手写代码所经历的关于页面布局的三个时期<br>在iphone1-iphone3gs时代 window的size固定为(320,480) 我们只需要简单计算一下相对位置就好了<br>在iphone4-iphone4s时代 苹果推出了retina屏 但是给了码农们非常大的福利:window的size不变<br>在iphone5-iphone5s时代 window的size变了(320,568) 这时autoresizingMask派上了用场(为啥这时候不用Autolayout? 因为还要支持ios5呗) 简单的适配一下即可<br>在iphone6+时代 window的width也发生了变化(相对5和5s的屏幕比例没有变化) 终于是时候抛弃autoresizingMask改用autolayout了(不用支持ios5了 相对于屏幕适配的多样性来说autoresizingMask也已经过时了)<br>那如何快速的上手autolayout呢? 说实话 当年ios6推出的同时新增了autolayout的特性 我看了一下官方文档和demo 就立马抛弃到一边了 因为实在过于的繁琐和啰嗦(有过经验的朋友肯定有同感)<br>直到iPhone6发布之后 我知道使用autolayout势在必行了 这时想起了以前在浏览Github看到过的一个第三方库Masonry 在花了几个小时的研究使用后 我就将autolayout掌握了(重点是我并没有学习任何的官方文档或者其他的关于autolayout的知识) 这就是我为什么要写下这篇文章来推荐它的原因.<br><strong>介绍</strong><br>Masonry 源码：<a href=\"https://github.com/Masonry/Masonry\">https://github.com/Masonry/Masonry</a><br>Masonry是一个轻量级的布局框架 拥有自己的描述语法 采用更优雅的链式语法封装自动布局 简洁明了 并具有高可读性 而且同时支持 iOS 和 Max OS X。<br>我们先来看一段官方的sample code来认识一下Masonry<br>    [view1 mas_makeConstraints:^(MASConstraintMaker <em>make) {<br>        make.edges.equalTo(superview).with.insets(padding);<br>    }];<br>看到block里面的那句话: make edges equalTo superview with insets<br>通过链式的自然语言 就把view1给autolayout好了 是不是简单易懂?<br><strong>使用</strong><br>看一下Masonry支持哪一些属性<br>    @property (nonatomic, strong, readonly) MASConstraint </em>left;<br>    @property (nonatomic, strong, readonly) MASConstraint <em>top;<br>    @property (nonatomic, strong, readonly) MASConstraint </em>right;<br>    @property (nonatomic, strong, readonly) MASConstraint <em>bottom;<br>    @property (nonatomic, strong, readonly) MASConstraint </em>leading;<br>    @property (nonatomic, strong, readonly) MASConstraint <em>trailing;<br>    @property (nonatomic, strong, readonly) MASConstraint </em>width;<br>    @property (nonatomic, strong, readonly) MASConstraint <em>height;<br>    @property (nonatomic, strong, readonly) MASConstraint </em>centerX;<br>    @property (nonatomic, strong, readonly) MASConstraint <em>centerY;<br>    @property (nonatomic, strong, readonly) MASConstraint </em>baseline;<br>这些属性与NSLayoutAttrubute的对照表如下</p>\n<p>其中leading与left trailing与right 在正常情况下是等价的 但是当一些布局是从右至左时(比如阿拉伯文?没有类似的经验) 则会对调 换句话说就是基本可以不理不用 用left和right就好了<br>在ios8发布后 又新增了一堆奇奇怪怪的属性(有兴趣的朋友可以去瞅瞅) Masonry暂时还不支持(不过你要支持ios6,ios7 就没必要去管那么多了)<br>在讲实例之前 先介绍一个MACRO<br>1<code>#define WS(weakSelf)  __weak __typeof(&amp;*self)weakSelf = self;</code>快速的定义一个weakSelf 当然是用于block里面啦 下面进入正题(为了方便 我们测试的superView都是一个size为(300,300)的UIView)<br>下面 通过一些简单的实例来简单介绍如何轻松愉快的使用Masonry:</p>\n<ol>\n<li>[基础] 居中显示一个view<br>1234567891011121314151617<code>- (void)viewDidLoad``{``    ``[``super</code> <code>viewDidLoad];``    ``// Do any additional setup after loading the view.`` </code> <code>``WS(ws);`` </code> <code>``UIView *sv = [UIView ``new``];``    ``[sv showPlaceHolder];``    ``sv.backgroundColor = [UIColor blackColor];``    ``[self.view addSubview:sv];``    ``[sv mas_makeConstraints:^(MASConstraintMaker *make) {``        ``make.center.equalTo(ws.view);``        ``make.size.mas_equalTo(CGSizeMake(300, 300));``    ``}];`` </code> <code>}</code></li>\n</ol>"},{"title":"MessageUI.framework发短信","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n#import \"ViewController.h\"\n#import <MessageUI/MessageUI.h>\n@interface ViewController ()<MFMessageComposeViewControllerDelegate>\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n   \n   \n   \n    UIButton *b = [UIButton buttonWithType:UIButtonTypeCustom];\n    [self.view addSubview:b];\n    b.frame = CGRectMake(100, 100, 200, 100);\n    b.backgroundColor = [UIColor blackColor];\n    [b setTitle:@\"sendMessage\" forState:UIControlStateNormal];\n    [b addTarget:self action:@selector(buttonAction) forControlEvents:UIControlEventTouchUpInside];\n   \n}\n-(void)buttonAction\n{\n\n    if (![MFMessageComposeViewController canSendText])\n    {\n        NSLog(@\"当前设备不能发短信\");\n        return;\n       \n    }else\n    {\n   \n    MFMessageComposeViewController *messageVC = [[MFMessageComposeViewController alloc]init];\n   \n    messageVC.recipients = @[@\"10086\",@\"10010\"];\n    messageVC.body = @\"大水杯\";\n    messageVC.messageComposeDelegate = self;\n   \n    [self presentViewController:messageVC animated:YES completion:^{\n       \n       \n    }];\n    }\n}\n\n-(void)messageComposeViewController:(MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result\n{\n   \n    [self dismissViewControllerAnimated:YES completion:^{\n       \n       \n    }];\n   \n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n@end\n\n```\n\n","source":"_posts/oc/MessageUI.framework发短信.md","raw":"---\ntitle: MessageUI.framework发短信\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n#import \"ViewController.h\"\n#import <MessageUI/MessageUI.h>\n@interface ViewController ()<MFMessageComposeViewControllerDelegate>\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n   \n   \n   \n    UIButton *b = [UIButton buttonWithType:UIButtonTypeCustom];\n    [self.view addSubview:b];\n    b.frame = CGRectMake(100, 100, 200, 100);\n    b.backgroundColor = [UIColor blackColor];\n    [b setTitle:@\"sendMessage\" forState:UIControlStateNormal];\n    [b addTarget:self action:@selector(buttonAction) forControlEvents:UIControlEventTouchUpInside];\n   \n}\n-(void)buttonAction\n{\n\n    if (![MFMessageComposeViewController canSendText])\n    {\n        NSLog(@\"当前设备不能发短信\");\n        return;\n       \n    }else\n    {\n   \n    MFMessageComposeViewController *messageVC = [[MFMessageComposeViewController alloc]init];\n   \n    messageVC.recipients = @[@\"10086\",@\"10010\"];\n    messageVC.body = @\"大水杯\";\n    messageVC.messageComposeDelegate = self;\n   \n    [self presentViewController:messageVC animated:YES completion:^{\n       \n       \n    }];\n    }\n}\n\n-(void)messageComposeViewController:(MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result\n{\n   \n    [self dismissViewControllerAnimated:YES completion:^{\n       \n       \n    }];\n   \n}\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n@end\n\n```\n\n","slug":"oc/MessageUI.framework发短信","published":1,"updated":"2016-10-08T09:18:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms96z000s21xwga1rsjbi","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;MessageUI/MessageUI.h&gt;</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()&lt;<span class=\"title\">MFMessageComposeViewControllerDelegate</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">UIButton</span> *b = [<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeCustom</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:b];</div><div class=\"line\">    b.frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>);</div><div class=\"line\">    b.backgroundColor = [<span class=\"built_in\">UIColor</span> blackColor];</div><div class=\"line\">    [b setTitle:<span class=\"string\">@\"sendMessage\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [b addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(buttonAction) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)buttonAction</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (![MFMessageComposeViewController canSendText])</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"当前设备不能发短信\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">       </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">   </div><div class=\"line\">    MFMessageComposeViewController *messageVC = [[MFMessageComposeViewController alloc]init];</div><div class=\"line\">   </div><div class=\"line\">    messageVC.recipients = @[<span class=\"string\">@\"10086\"</span>,<span class=\"string\">@\"10010\"</span>];</div><div class=\"line\">    messageVC.body = <span class=\"string\">@\"大水杯\"</span>;</div><div class=\"line\">    messageVC.messageComposeDelegate = <span class=\"keyword\">self</span>;</div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"keyword\">self</span> presentViewController:messageVC animated:<span class=\"literal\">YES</span> completion:^&#123;</div><div class=\"line\">       </div><div class=\"line\">       </div><div class=\"line\">    &#125;];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)messageComposeViewController:(MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result</div><div class=\"line\">&#123;</div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:^&#123;</div><div class=\"line\">       </div><div class=\"line\">       </div><div class=\"line\">    &#125;];</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)didReceiveMemoryWarning &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> didReceiveMemoryWarning];</div><div class=\"line\">    <span class=\"comment\">// Dispose of any resources that can be recreated.</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;MessageUI/MessageUI.h&gt;</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()&lt;<span class=\"title\">MFMessageComposeViewControllerDelegate</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">UIButton</span> *b = [<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeCustom</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:b];</div><div class=\"line\">    b.frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>);</div><div class=\"line\">    b.backgroundColor = [<span class=\"built_in\">UIColor</span> blackColor];</div><div class=\"line\">    [b setTitle:<span class=\"string\">@\"sendMessage\"</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    [b addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(buttonAction) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)buttonAction</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (![MFMessageComposeViewController canSendText])</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"当前设备不能发短信\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">       </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">   </div><div class=\"line\">    MFMessageComposeViewController *messageVC = [[MFMessageComposeViewController alloc]init];</div><div class=\"line\">   </div><div class=\"line\">    messageVC.recipients = @[<span class=\"string\">@\"10086\"</span>,<span class=\"string\">@\"10010\"</span>];</div><div class=\"line\">    messageVC.body = <span class=\"string\">@\"大水杯\"</span>;</div><div class=\"line\">    messageVC.messageComposeDelegate = <span class=\"keyword\">self</span>;</div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"keyword\">self</span> presentViewController:messageVC animated:<span class=\"literal\">YES</span> completion:^&#123;</div><div class=\"line\">       </div><div class=\"line\">       </div><div class=\"line\">    &#125;];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)messageComposeViewController:(MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result</div><div class=\"line\">&#123;</div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:^&#123;</div><div class=\"line\">       </div><div class=\"line\">       </div><div class=\"line\">    &#125;];</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)didReceiveMemoryWarning &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> didReceiveMemoryWarning];</div><div class=\"line\">    <span class=\"comment\">// Dispose of any resources that can be recreated.</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>"},{"title":"NSHTTPCookieStorage","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n//保存cookie\n+ (void)saveCookies {\n    NSData *cookiesData = [NSKeyedArchiver archivedDataWithRootObject: [[NSHTTPCookieStorage sharedHTTPCookieStorage] cookies]];\n    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n    [defaults setObject: cookiesData forKey:kCookie];\n    [defaults synchronize];\n}\n\n//加载cookie\n+ (void)loadCookies {\n   \n    NSArray *cookies = [NSKeyedUnarchiver unarchiveObjectWithData: [[NSUserDefaults standardUserDefaults] objectForKey: kCookie]];\n    NSHTTPCookieStorage *cookieStorage = [NSHTTPCookieStorage sharedHTTPCookieStorage];\n   \n    for (NSHTTPCookie *cookie in cookies){\n        [cookieStorage setCookie: cookie];\n    }\n   \n}\n\n//删除cookie\n+ (void)clearCookies {\n   \n    NSArray *cookies = [[NSHTTPCookieStorage sharedHTTPCookieStorage] cookies];\n    for (NSHTTPCookie *cookie in cookies)\n    {\n        [[NSHTTPCookieStorage sharedHTTPCookieStorage] deleteCookie:cookie];\n    }\n}\n```\n\n","source":"_posts/oc/NSHTTPCookieStorage.md","raw":"---\ntitle: NSHTTPCookieStorage\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n//保存cookie\n+ (void)saveCookies {\n    NSData *cookiesData = [NSKeyedArchiver archivedDataWithRootObject: [[NSHTTPCookieStorage sharedHTTPCookieStorage] cookies]];\n    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n    [defaults setObject: cookiesData forKey:kCookie];\n    [defaults synchronize];\n}\n\n//加载cookie\n+ (void)loadCookies {\n   \n    NSArray *cookies = [NSKeyedUnarchiver unarchiveObjectWithData: [[NSUserDefaults standardUserDefaults] objectForKey: kCookie]];\n    NSHTTPCookieStorage *cookieStorage = [NSHTTPCookieStorage sharedHTTPCookieStorage];\n   \n    for (NSHTTPCookie *cookie in cookies){\n        [cookieStorage setCookie: cookie];\n    }\n   \n}\n\n//删除cookie\n+ (void)clearCookies {\n   \n    NSArray *cookies = [[NSHTTPCookieStorage sharedHTTPCookieStorage] cookies];\n    for (NSHTTPCookie *cookie in cookies)\n    {\n        [[NSHTTPCookieStorage sharedHTTPCookieStorage] deleteCookie:cookie];\n    }\n}\n```\n\n","slug":"oc/NSHTTPCookieStorage","published":1,"updated":"2016-10-08T09:09:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms970000v21xwt65xxqs7","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//保存cookie</span></div><div class=\"line\">+ (<span class=\"keyword\">void</span>)saveCookies &#123;</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *cookiesData = [<span class=\"built_in\">NSKeyedArchiver</span> archivedDataWithRootObject: [[<span class=\"built_in\">NSHTTPCookieStorage</span> sharedHTTPCookieStorage] cookies]];</div><div class=\"line\">    <span class=\"built_in\">NSUserDefaults</span> *defaults = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\">    [defaults setObject: cookiesData forKey:kCookie];</div><div class=\"line\">    [defaults synchronize];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载cookie</span></div><div class=\"line\">+ (<span class=\"keyword\">void</span>)loadCookies &#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *cookies = [<span class=\"built_in\">NSKeyedUnarchiver</span> unarchiveObjectWithData: [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults] objectForKey: kCookie]];</div><div class=\"line\">    <span class=\"built_in\">NSHTTPCookieStorage</span> *cookieStorage = [<span class=\"built_in\">NSHTTPCookieStorage</span> sharedHTTPCookieStorage];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSHTTPCookie</span> *cookie <span class=\"keyword\">in</span> cookies)&#123;</div><div class=\"line\">        [cookieStorage setCookie: cookie];</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//删除cookie</span></div><div class=\"line\">+ (<span class=\"keyword\">void</span>)clearCookies &#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *cookies = [[<span class=\"built_in\">NSHTTPCookieStorage</span> sharedHTTPCookieStorage] cookies];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSHTTPCookie</span> *cookie <span class=\"keyword\">in</span> cookies)</div><div class=\"line\">    &#123;</div><div class=\"line\">        [[<span class=\"built_in\">NSHTTPCookieStorage</span> sharedHTTPCookieStorage] deleteCookie:cookie];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//保存cookie</span></div><div class=\"line\">+ (<span class=\"keyword\">void</span>)saveCookies &#123;</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *cookiesData = [<span class=\"built_in\">NSKeyedArchiver</span> archivedDataWithRootObject: [[<span class=\"built_in\">NSHTTPCookieStorage</span> sharedHTTPCookieStorage] cookies]];</div><div class=\"line\">    <span class=\"built_in\">NSUserDefaults</span> *defaults = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\">    [defaults setObject: cookiesData forKey:kCookie];</div><div class=\"line\">    [defaults synchronize];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载cookie</span></div><div class=\"line\">+ (<span class=\"keyword\">void</span>)loadCookies &#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *cookies = [<span class=\"built_in\">NSKeyedUnarchiver</span> unarchiveObjectWithData: [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults] objectForKey: kCookie]];</div><div class=\"line\">    <span class=\"built_in\">NSHTTPCookieStorage</span> *cookieStorage = [<span class=\"built_in\">NSHTTPCookieStorage</span> sharedHTTPCookieStorage];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSHTTPCookie</span> *cookie <span class=\"keyword\">in</span> cookies)&#123;</div><div class=\"line\">        [cookieStorage setCookie: cookie];</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//删除cookie</span></div><div class=\"line\">+ (<span class=\"keyword\">void</span>)clearCookies &#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *cookies = [[<span class=\"built_in\">NSHTTPCookieStorage</span> sharedHTTPCookieStorage] cookies];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSHTTPCookie</span> *cookie <span class=\"keyword\">in</span> cookies)</div><div class=\"line\">    &#123;</div><div class=\"line\">        [[<span class=\"built_in\">NSHTTPCookieStorage</span> sharedHTTPCookieStorage] deleteCookie:cookie];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"NSString","date":"2016-10-08T03:39:43.000Z","_content":"NSString\n<!-- more -->\n\n```objc\n/***********************NSString***********************/\n#pragma mark 获取字符串长度 string.length\n    NSString *string = @\"12345678\";\n    NSLog(@\"%ld\",string.length);\n\n#pragma mark 获取子字符串，调用系统方法 substringFromIndex:\n    NSString *string = @\"www.lanou.com\";\n   \n    NSString *str1 =  [string substringFromIndex:4];\n   \n    NSLog(@\"%@\",str1);\n\n   \n#pragma mark 截取指定范围的字符串 substringWithRange:\n    //NSRange表示范围的结构体\n    NSRange a = {4,5};\n\n    NSString *str3 = [string substringWithRange:a];\n   \n\n    NSLog(@\"%@\",str3);\n   \n#pragma mark 拼接字符串 stringByAppendingString:\n    NSString *string = @\"I love\";\n    NSString *string1 = @\" Kitty\";\n   \n    //appand是拼接的意思\n    NSString *string2 =  [string stringByAppendingString:string1];\n    NSLog(@\"%@\",string2);\n   \n   \n   \n#pragma mark 替换字符串 stringByReplacingOccurrencesOfString:@\"I\" withString:\n    NSString *string = @\"I love You\";\n    NSString *string1 = @\" Kitty\";\n    NSString *string2 =\n    [string stringByReplacingOccurrencesOfString:@\"I\" withString:@\"You\"];\n    NSLog(@\"%@\",string2);\n   \n   \n#pragma mark 判断字符串是否相等 isEqualToString:\n    NSString *string = @\"abcd\";\n    NSString *string1 = @\"abc\";\n    if ([string isEqualToString:string1]) {\n        NSLog(@\"字符串相等\");\n    }else\n    {\n        NSLog(@\"字符串不相等\");\n    }\n   \n   \n   \n#pragma mark 字符串是否一一个字符开头 hasPrefix:\n    NSString *string = @\"abcdefg\";\n    if ([string hasPrefix:@\"a\"]) {\n        NSLog(@\"字符串以a开头\");\n    }else\n    {\n        NSLog(@\"字符串不以a开头\");\n    }\n   \n#pragma mark 字符串是否一一个字符结尾 hasSuffix:  \n    if ([string hasSuffix:@\"efg\"]) {\n        NSLog(@\"是以efg结尾\");\n    }else\n    {\n        NSLog(@\"不是以efg结尾\");\n    }\n   \n    给定一个图片文件名，判断字符串中是否以“png”结尾，如果是就替换成“jpg”如果不是，就拼接“.jpg”\n    NSString *string = @\"abc.png\";\n   \n    if ([string hasSuffix:@\"png\"]) {\n        string = [string stringByReplacingOccurrencesOfString:@\"png\" withString:@\"jpg\"];\n\n    } else {\n         string =  [string stringByAppendingString:@\".jpg\"];\n    }\n   \n   \n    NSLog(@\"%@\",string);\n/***********************NSString************************/\n\n\n\n\n/***********************NSMutableString******************/\n#pragma mark - 可变字符串\n    //可变字符串本身是可以修改的\n    NSMutableString *mutString = [NSMutableString stringWithFormat:@\"张三\"];\n\n\n#pragma mark 插入字符串 insertString: atIndex:\n    [mutString insertString:@\"大\" atIndex:1];\n    NSLog(@\"mutString = %@\",mutString);\n\n\n#pragma mark 删除字符串 deleteCharactersInRange:\n    NSRange a = {1,2};\n    [mutString deleteCharactersInRange:a];\n    NSLog(@\"mutString = %@\",mutString);\n   \n#pragma mark 拼接 appendString:\n    NSMutableString *mutString = [NSMutableString stringWithFormat:@\"张三\"];\n    [mutString appendString:@\"好\"];\n    NSLog(@\"mutString = %@\",mutString);   \n\n/***********************NSMutableString******************/\n\n```\n\n","source":"_posts/oc/NSString.md","raw":"---\ntitle: NSString\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\nNSString\n<!-- more -->\n\n```objc\n/***********************NSString***********************/\n#pragma mark 获取字符串长度 string.length\n    NSString *string = @\"12345678\";\n    NSLog(@\"%ld\",string.length);\n\n#pragma mark 获取子字符串，调用系统方法 substringFromIndex:\n    NSString *string = @\"www.lanou.com\";\n   \n    NSString *str1 =  [string substringFromIndex:4];\n   \n    NSLog(@\"%@\",str1);\n\n   \n#pragma mark 截取指定范围的字符串 substringWithRange:\n    //NSRange表示范围的结构体\n    NSRange a = {4,5};\n\n    NSString *str3 = [string substringWithRange:a];\n   \n\n    NSLog(@\"%@\",str3);\n   \n#pragma mark 拼接字符串 stringByAppendingString:\n    NSString *string = @\"I love\";\n    NSString *string1 = @\" Kitty\";\n   \n    //appand是拼接的意思\n    NSString *string2 =  [string stringByAppendingString:string1];\n    NSLog(@\"%@\",string2);\n   \n   \n   \n#pragma mark 替换字符串 stringByReplacingOccurrencesOfString:@\"I\" withString:\n    NSString *string = @\"I love You\";\n    NSString *string1 = @\" Kitty\";\n    NSString *string2 =\n    [string stringByReplacingOccurrencesOfString:@\"I\" withString:@\"You\"];\n    NSLog(@\"%@\",string2);\n   \n   \n#pragma mark 判断字符串是否相等 isEqualToString:\n    NSString *string = @\"abcd\";\n    NSString *string1 = @\"abc\";\n    if ([string isEqualToString:string1]) {\n        NSLog(@\"字符串相等\");\n    }else\n    {\n        NSLog(@\"字符串不相等\");\n    }\n   \n   \n   \n#pragma mark 字符串是否一一个字符开头 hasPrefix:\n    NSString *string = @\"abcdefg\";\n    if ([string hasPrefix:@\"a\"]) {\n        NSLog(@\"字符串以a开头\");\n    }else\n    {\n        NSLog(@\"字符串不以a开头\");\n    }\n   \n#pragma mark 字符串是否一一个字符结尾 hasSuffix:  \n    if ([string hasSuffix:@\"efg\"]) {\n        NSLog(@\"是以efg结尾\");\n    }else\n    {\n        NSLog(@\"不是以efg结尾\");\n    }\n   \n    给定一个图片文件名，判断字符串中是否以“png”结尾，如果是就替换成“jpg”如果不是，就拼接“.jpg”\n    NSString *string = @\"abc.png\";\n   \n    if ([string hasSuffix:@\"png\"]) {\n        string = [string stringByReplacingOccurrencesOfString:@\"png\" withString:@\"jpg\"];\n\n    } else {\n         string =  [string stringByAppendingString:@\".jpg\"];\n    }\n   \n   \n    NSLog(@\"%@\",string);\n/***********************NSString************************/\n\n\n\n\n/***********************NSMutableString******************/\n#pragma mark - 可变字符串\n    //可变字符串本身是可以修改的\n    NSMutableString *mutString = [NSMutableString stringWithFormat:@\"张三\"];\n\n\n#pragma mark 插入字符串 insertString: atIndex:\n    [mutString insertString:@\"大\" atIndex:1];\n    NSLog(@\"mutString = %@\",mutString);\n\n\n#pragma mark 删除字符串 deleteCharactersInRange:\n    NSRange a = {1,2};\n    [mutString deleteCharactersInRange:a];\n    NSLog(@\"mutString = %@\",mutString);\n   \n#pragma mark 拼接 appendString:\n    NSMutableString *mutString = [NSMutableString stringWithFormat:@\"张三\"];\n    [mutString appendString:@\"好\"];\n    NSLog(@\"mutString = %@\",mutString);   \n\n/***********************NSMutableString******************/\n\n```\n\n","slug":"oc/NSString","published":1,"updated":"2016-10-08T09:51:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms971000x21xw4jqee7vg","content":"<p>NSString<br><a id=\"more\"></a></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/***********************NSString***********************/</span></div><div class=\"line\"><span class=\"meta\">#pragma mark 获取字符串长度 string.length</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"12345678\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%ld\"</span>,string.length);</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark 获取子字符串，调用系统方法 substringFromIndex:</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"www.lanou.com\"</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSString</span> *str1 =  [string substringFromIndex:<span class=\"number\">4</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,str1);</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#pragma mark 截取指定范围的字符串 substringWithRange:</span></div><div class=\"line\">    <span class=\"comment\">//NSRange表示范围的结构体</span></div><div class=\"line\">    <span class=\"built_in\">NSRange</span> a = &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *str3 = [string substringWithRange:a];</div><div class=\"line\">   </div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,str3);</div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#pragma mark 拼接字符串 stringByAppendingString:</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"I love\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string1 = <span class=\"string\">@\" Kitty\"</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//appand是拼接的意思</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string2 =  [string stringByAppendingString:string1];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,string2);</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#pragma mark 替换字符串 stringByReplacingOccurrencesOfString:@<span class=\"meta-string\">\"I\"</span> withString:</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"I love You\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string1 = <span class=\"string\">@\" Kitty\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string2 =</div><div class=\"line\">    [string stringByReplacingOccurrencesOfString:<span class=\"string\">@\"I\"</span> withString:<span class=\"string\">@\"You\"</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,string2);</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#pragma mark 判断字符串是否相等 isEqualToString:</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"abcd\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string1 = <span class=\"string\">@\"abc\"</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([string isEqualToString:string1]) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"字符串相等\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"字符串不相等\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#pragma mark 字符串是否一一个字符开头 hasPrefix:</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"abcdefg\"</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([string hasPrefix:<span class=\"string\">@\"a\"</span>]) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"字符串以a开头\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"字符串不以a开头\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#pragma mark 字符串是否一一个字符结尾 hasSuffix:  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> ([string hasSuffix:<span class=\"string\">@\"efg\"</span>]) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"是以efg结尾\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"不是以efg结尾\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">    给定一个图片文件名，判断字符串中是否以“png”结尾，如果是就替换成“jpg”如果不是，就拼接“.jpg”</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"abc.png\"</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">if</span> ([string hasSuffix:<span class=\"string\">@\"png\"</span>]) &#123;</div><div class=\"line\">        string = [string stringByReplacingOccurrencesOfString:<span class=\"string\">@\"png\"</span> withString:<span class=\"string\">@\"jpg\"</span>];</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         string =  [string stringByAppendingString:<span class=\"string\">@\".jpg\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,string);</div><div class=\"line\"><span class=\"comment\">/***********************NSString************************/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************NSMutableString******************/</span></div><div class=\"line\"><span class=\"meta\">#pragma mark - 可变字符串</span></div><div class=\"line\">    <span class=\"comment\">//可变字符串本身是可以修改的</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableString</span> *mutString = [<span class=\"built_in\">NSMutableString</span> stringWithFormat:<span class=\"string\">@\"张三\"</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark 插入字符串 insertString: atIndex:</span></div><div class=\"line\">    [mutString insertString:<span class=\"string\">@\"大\"</span> atIndex:<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"mutString = %@\"</span>,mutString);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark 删除字符串 deleteCharactersInRange:</span></div><div class=\"line\">    <span class=\"built_in\">NSRange</span> a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</div><div class=\"line\">    [mutString deleteCharactersInRange:a];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"mutString = %@\"</span>,mutString);</div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#pragma mark 拼接 appendString:</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableString</span> *mutString = [<span class=\"built_in\">NSMutableString</span> stringWithFormat:<span class=\"string\">@\"张三\"</span>];</div><div class=\"line\">    [mutString appendString:<span class=\"string\">@\"好\"</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"mutString = %@\"</span>,mutString);   </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************NSMutableString******************/</span></div></pre></td></tr></table></figure>\n","excerpt":"<p>NSString<br>","more":"</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/***********************NSString***********************/</span></div><div class=\"line\"><span class=\"meta\">#pragma mark 获取字符串长度 string.length</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"12345678\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%ld\"</span>,string.length);</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark 获取子字符串，调用系统方法 substringFromIndex:</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"www.lanou.com\"</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSString</span> *str1 =  [string substringFromIndex:<span class=\"number\">4</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,str1);</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#pragma mark 截取指定范围的字符串 substringWithRange:</span></div><div class=\"line\">    <span class=\"comment\">//NSRange表示范围的结构体</span></div><div class=\"line\">    <span class=\"built_in\">NSRange</span> a = &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *str3 = [string substringWithRange:a];</div><div class=\"line\">   </div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,str3);</div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#pragma mark 拼接字符串 stringByAppendingString:</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"I love\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string1 = <span class=\"string\">@\" Kitty\"</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//appand是拼接的意思</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string2 =  [string stringByAppendingString:string1];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,string2);</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#pragma mark 替换字符串 stringByReplacingOccurrencesOfString:@<span class=\"meta-string\">\"I\"</span> withString:</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"I love You\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string1 = <span class=\"string\">@\" Kitty\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string2 =</div><div class=\"line\">    [string stringByReplacingOccurrencesOfString:<span class=\"string\">@\"I\"</span> withString:<span class=\"string\">@\"You\"</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,string2);</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#pragma mark 判断字符串是否相等 isEqualToString:</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"abcd\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string1 = <span class=\"string\">@\"abc\"</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([string isEqualToString:string1]) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"字符串相等\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"字符串不相等\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#pragma mark 字符串是否一一个字符开头 hasPrefix:</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"abcdefg\"</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([string hasPrefix:<span class=\"string\">@\"a\"</span>]) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"字符串以a开头\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"字符串不以a开头\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#pragma mark 字符串是否一一个字符结尾 hasSuffix:  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> ([string hasSuffix:<span class=\"string\">@\"efg\"</span>]) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"是以efg结尾\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"不是以efg结尾\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">    给定一个图片文件名，判断字符串中是否以“png”结尾，如果是就替换成“jpg”如果不是，就拼接“.jpg”</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"abc.png\"</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">if</span> ([string hasSuffix:<span class=\"string\">@\"png\"</span>]) &#123;</div><div class=\"line\">        string = [string stringByReplacingOccurrencesOfString:<span class=\"string\">@\"png\"</span> withString:<span class=\"string\">@\"jpg\"</span>];</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">         string =  [string stringByAppendingString:<span class=\"string\">@\".jpg\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,string);</div><div class=\"line\"><span class=\"comment\">/***********************NSString************************/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************NSMutableString******************/</span></div><div class=\"line\"><span class=\"meta\">#pragma mark - 可变字符串</span></div><div class=\"line\">    <span class=\"comment\">//可变字符串本身是可以修改的</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableString</span> *mutString = [<span class=\"built_in\">NSMutableString</span> stringWithFormat:<span class=\"string\">@\"张三\"</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark 插入字符串 insertString: atIndex:</span></div><div class=\"line\">    [mutString insertString:<span class=\"string\">@\"大\"</span> atIndex:<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"mutString = %@\"</span>,mutString);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark 删除字符串 deleteCharactersInRange:</span></div><div class=\"line\">    <span class=\"built_in\">NSRange</span> a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</div><div class=\"line\">    [mutString deleteCharactersInRange:a];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"mutString = %@\"</span>,mutString);</div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#pragma mark 拼接 appendString:</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableString</span> *mutString = [<span class=\"built_in\">NSMutableString</span> stringWithFormat:<span class=\"string\">@\"张三\"</span>];</div><div class=\"line\">    [mutString appendString:<span class=\"string\">@\"好\"</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"mutString = %@\"</span>,mutString);   </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************NSMutableString******************/</span></div></pre></td></tr></table></figure>"},{"title":"NSTimer","date":"2016-10-08T03:39:43.000Z","_content":"NSTimer\n<!-- more -->\n\n```objc\n    //创建NSTimerNSTimer*timer = [[NSTimeralloc]init];      //每1秒运行一次function方法。    timer =  [NSTimer scheduledTimerWithTimeInterval:1.0target:selfselector:@selector(function:) userInfo:nilrepeats:YES];   //TimeInterval:调用的时间间隔   //repeats:决定是否重复调NSTimer   //注意：将计数器的repeats设置为YES的时候，self的引用计数会加1。因此可能会导致self（即viewController）不能release，所以，必须在viewWillAppear的时候，将计数器timer停止，否则可能会导致内存泄露。   //停止timer的运行，但这个是永久的停止：（注意：停止后，一定要将timer赋空，否则还是没有释放。\n   //取消定时器\n    [timer invalidate];    timer =nil;\n   //要想实现：先停止，然后再某种情况下再次开启运行timer，可以使用下面的方法：\n   //暂时关闭定时器    [myTimer setFireDate:[NSDatedistantFuture]];\n   //开启定时器    [myTimer setFireDate:[NSDatedistantPast]];\n\n   //设置启动页面时间    NSThread sleepForTimeInterval:<#(NSTimeInterval)#>\n/* NSTimer.hCopyright (c) 1994-2014, Apple Inc. All rights reserved.\n*/\n\n#import<Foundation/NSObject.h>\n#import<Foundation/NSDate.h>\n\n@interfaceNSTimer :NSObject\n\n+ (NSTimer*)timerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation*)invocation repeats:(BOOL)yesOrNo;\n+ (NSTimer*)scheduledTimerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation*)invocation repeats:(BOOL)yesOrNo;\n\n+ (NSTimer*)timerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget\n selector:(SEL)aSelector userInfo:(id)userInfo\n repeats:(BOOL)yesOrNo;\n+ (NSTimer*)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget\n selector:(SEL)aSelector userInfo:(id)userInfo\n repeats:(BOOL)yesOrNo;\n\n- (instancetype)initWithFireDate:(NSDate*)date interval:(NSTimeInterval)ti target:(id)t\n selector:(SEL)s userInfo:(id)ui\n repeats:(BOOL)repNS_DESIGNATED_INITIALIZER;\n\n- (void)fire;\n\n@property(copy)NSDate*fireDate;\n@property(readonly)NSTimeIntervaltimeInterval;\n\n// Setting a tolerance for a timer allows it to fire later than the scheduled fire date, improving the ability of the system to optimize for increased power savings and responsiveness.\n The timer may fire at any time between its scheduled fire date and the scheduled fire date plus the tolerance. The timer will not fire before the scheduled fire date. For repeating timers, the next fire date is calculated from the original fire date regardless\n of tolerance applied at individual fire times, to avoid drift. The default value is zero, which means no additional tolerance is applied. The system reserves the right to apply a small amount of tolerance to certain timers regardless of the value of this property.\n// As the user of the timer, you will have the best idea of what an appropriate tolerance for a timer may be. A general rule of thumb, though, is to set the tolerance to at least 10%\n of the interval, for a repeating timer. Even a small amount of tolerance will have a significant positive impact on the power usage of your application. The system may put a maximum value of the tolerance.\n@propertyNSTimeIntervaltoleranceNS_AVAILABLE(10_9,7_0);\n\n- (void)invalidate;\n@property(readonly,getter=isValid)BOOLvalid;\n\n@property(readonly,retain)iduserInfo;\n\n@end","source":"_posts/oc/NSTimer.md","raw":"---\ntitle: NSTimer\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\nNSTimer\n<!-- more -->\n\n```objc\n    //创建NSTimerNSTimer*timer = [[NSTimeralloc]init];      //每1秒运行一次function方法。    timer =  [NSTimer scheduledTimerWithTimeInterval:1.0target:selfselector:@selector(function:) userInfo:nilrepeats:YES];   //TimeInterval:调用的时间间隔   //repeats:决定是否重复调NSTimer   //注意：将计数器的repeats设置为YES的时候，self的引用计数会加1。因此可能会导致self（即viewController）不能release，所以，必须在viewWillAppear的时候，将计数器timer停止，否则可能会导致内存泄露。   //停止timer的运行，但这个是永久的停止：（注意：停止后，一定要将timer赋空，否则还是没有释放。\n   //取消定时器\n    [timer invalidate];    timer =nil;\n   //要想实现：先停止，然后再某种情况下再次开启运行timer，可以使用下面的方法：\n   //暂时关闭定时器    [myTimer setFireDate:[NSDatedistantFuture]];\n   //开启定时器    [myTimer setFireDate:[NSDatedistantPast]];\n\n   //设置启动页面时间    NSThread sleepForTimeInterval:<#(NSTimeInterval)#>\n/* NSTimer.hCopyright (c) 1994-2014, Apple Inc. All rights reserved.\n*/\n\n#import<Foundation/NSObject.h>\n#import<Foundation/NSDate.h>\n\n@interfaceNSTimer :NSObject\n\n+ (NSTimer*)timerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation*)invocation repeats:(BOOL)yesOrNo;\n+ (NSTimer*)scheduledTimerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation*)invocation repeats:(BOOL)yesOrNo;\n\n+ (NSTimer*)timerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget\n selector:(SEL)aSelector userInfo:(id)userInfo\n repeats:(BOOL)yesOrNo;\n+ (NSTimer*)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget\n selector:(SEL)aSelector userInfo:(id)userInfo\n repeats:(BOOL)yesOrNo;\n\n- (instancetype)initWithFireDate:(NSDate*)date interval:(NSTimeInterval)ti target:(id)t\n selector:(SEL)s userInfo:(id)ui\n repeats:(BOOL)repNS_DESIGNATED_INITIALIZER;\n\n- (void)fire;\n\n@property(copy)NSDate*fireDate;\n@property(readonly)NSTimeIntervaltimeInterval;\n\n// Setting a tolerance for a timer allows it to fire later than the scheduled fire date, improving the ability of the system to optimize for increased power savings and responsiveness.\n The timer may fire at any time between its scheduled fire date and the scheduled fire date plus the tolerance. The timer will not fire before the scheduled fire date. For repeating timers, the next fire date is calculated from the original fire date regardless\n of tolerance applied at individual fire times, to avoid drift. The default value is zero, which means no additional tolerance is applied. The system reserves the right to apply a small amount of tolerance to certain timers regardless of the value of this property.\n// As the user of the timer, you will have the best idea of what an appropriate tolerance for a timer may be. A general rule of thumb, though, is to set the tolerance to at least 10%\n of the interval, for a repeating timer. Even a small amount of tolerance will have a significant positive impact on the power usage of your application. The system may put a maximum value of the tolerance.\n@propertyNSTimeIntervaltoleranceNS_AVAILABLE(10_9,7_0);\n\n- (void)invalidate;\n@property(readonly,getter=isValid)BOOLvalid;\n\n@property(readonly,retain)iduserInfo;\n\n@end","slug":"oc/NSTimer","published":1,"updated":"2016-10-08T09:52:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms973001021xwmppz19xx","content":"<p>NSTimer<br><a id=\"more\"></a></p>\n<p>```objc<br>    //创建NSTimerNSTimer*timer = [[NSTimeralloc]init];      //每1秒运行一次function方法。    timer =  [NSTimer scheduledTimerWithTimeInterval:1.0target:selfselector:@selector(function:) userInfo:nilrepeats:YES];   //TimeInterval:调用的时间间隔   //repeats:决定是否重复调NSTimer   //注意：将计数器的repeats设置为YES的时候，self的引用计数会加1。因此可能会导致self（即viewController）不能release，所以，必须在viewWillAppear的时候，将计数器timer停止，否则可能会导致内存泄露。   //停止timer的运行，但这个是永久的停止：（注意：停止后，一定要将timer赋空，否则还是没有释放。<br>   //取消定时器<br>    [timer invalidate];    timer =nil;<br>   //要想实现：先停止，然后再某种情况下再次开启运行timer，可以使用下面的方法：<br>   //暂时关闭定时器    [myTimer setFireDate:[NSDatedistantFuture]];<br>   //开启定时器    [myTimer setFireDate:[NSDatedistantPast]];</p>\n<p>   //设置启动页面时间    NSThread sleepForTimeInterval:&lt;#(NSTimeInterval)#&gt;<br>/<em> NSTimer.hCopyright (c) 1994-2014, Apple Inc. All rights reserved.\n</em>/</p>\n<p>#import<foundation nsobject.h=\"\"></foundation></p>\n<p>#import<foundation nsdate.h=\"\"></foundation></p>\n<p>@interfaceNSTimer :NSObject</p>\n<ul>\n<li>(NSTimer<em>)timerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation</em>)invocation repeats:(BOOL)yesOrNo;</li>\n<li><p>(NSTimer<em>)scheduledTimerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation</em>)invocation repeats:(BOOL)yesOrNo;</p>\n</li>\n<li><p>(NSTimer*)timerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget<br>selector:(SEL)aSelector userInfo:(id)userInfo<br>repeats:(BOOL)yesOrNo;</p>\n</li>\n<li>(NSTimer*)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget<br>selector:(SEL)aSelector userInfo:(id)userInfo<br>repeats:(BOOL)yesOrNo;</li>\n</ul>\n<ul>\n<li><p>(instancetype)initWithFireDate:(NSDate*)date interval:(NSTimeInterval)ti target:(id)t<br>selector:(SEL)s userInfo:(id)ui<br>repeats:(BOOL)repNS_DESIGNATED_INITIALIZER;</p>\n</li>\n<li><p>(void)fire;</p>\n</li>\n</ul>\n<p>@property(copy)NSDate*fireDate;<br>@property(readonly)NSTimeIntervaltimeInterval;</p>\n<p>// Setting a tolerance for a timer allows it to fire later than the scheduled fire date, improving the ability of the system to optimize for increased power savings and responsiveness.<br> The timer may fire at any time between its scheduled fire date and the scheduled fire date plus the tolerance. The timer will not fire before the scheduled fire date. For repeating timers, the next fire date is calculated from the original fire date regardless<br> of tolerance applied at individual fire times, to avoid drift. The default value is zero, which means no additional tolerance is applied. The system reserves the right to apply a small amount of tolerance to certain timers regardless of the value of this property.<br>// As the user of the timer, you will have the best idea of what an appropriate tolerance for a timer may be. A general rule of thumb, though, is to set the tolerance to at least 10%<br> of the interval, for a repeating timer. Even a small amount of tolerance will have a significant positive impact on the power usage of your application. The system may put a maximum value of the tolerance.<br>@propertyNSTimeIntervaltoleranceNS_AVAILABLE(10_9,7_0);</p>\n<ul>\n<li>(void)invalidate;<br>@property(readonly,getter=isValid)BOOLvalid;</li>\n</ul>\n<p>@property(readonly,retain)iduserInfo;</p>\n<p>@end</p>\n","excerpt":"<p>NSTimer<br>","more":"</p>\n<p>```objc<br>    //创建NSTimerNSTimer*timer = [[NSTimeralloc]init];      //每1秒运行一次function方法。    timer =  [NSTimer scheduledTimerWithTimeInterval:1.0target:selfselector:@selector(function:) userInfo:nilrepeats:YES];   //TimeInterval:调用的时间间隔   //repeats:决定是否重复调NSTimer   //注意：将计数器的repeats设置为YES的时候，self的引用计数会加1。因此可能会导致self（即viewController）不能release，所以，必须在viewWillAppear的时候，将计数器timer停止，否则可能会导致内存泄露。   //停止timer的运行，但这个是永久的停止：（注意：停止后，一定要将timer赋空，否则还是没有释放。<br>   //取消定时器<br>    [timer invalidate];    timer =nil;<br>   //要想实现：先停止，然后再某种情况下再次开启运行timer，可以使用下面的方法：<br>   //暂时关闭定时器    [myTimer setFireDate:[NSDatedistantFuture]];<br>   //开启定时器    [myTimer setFireDate:[NSDatedistantPast]];</p>\n<p>   //设置启动页面时间    NSThread sleepForTimeInterval:&lt;#(NSTimeInterval)#&gt;<br>/<em> NSTimer.hCopyright (c) 1994-2014, Apple Inc. All rights reserved.\n</em>/</p>\n<p>#import<Foundation/NSObject.h></p>\n<p>#import<Foundation/NSDate.h></p>\n<p>@interfaceNSTimer :NSObject</p>\n<ul>\n<li>(NSTimer<em>)timerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation</em>)invocation repeats:(BOOL)yesOrNo;</li>\n<li><p>(NSTimer<em>)scheduledTimerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation</em>)invocation repeats:(BOOL)yesOrNo;</p>\n</li>\n<li><p>(NSTimer*)timerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget<br>selector:(SEL)aSelector userInfo:(id)userInfo<br>repeats:(BOOL)yesOrNo;</p>\n</li>\n<li>(NSTimer*)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget<br>selector:(SEL)aSelector userInfo:(id)userInfo<br>repeats:(BOOL)yesOrNo;</li>\n</ul>\n<ul>\n<li><p>(instancetype)initWithFireDate:(NSDate*)date interval:(NSTimeInterval)ti target:(id)t<br>selector:(SEL)s userInfo:(id)ui<br>repeats:(BOOL)repNS_DESIGNATED_INITIALIZER;</p>\n</li>\n<li><p>(void)fire;</p>\n</li>\n</ul>\n<p>@property(copy)NSDate*fireDate;<br>@property(readonly)NSTimeIntervaltimeInterval;</p>\n<p>// Setting a tolerance for a timer allows it to fire later than the scheduled fire date, improving the ability of the system to optimize for increased power savings and responsiveness.<br> The timer may fire at any time between its scheduled fire date and the scheduled fire date plus the tolerance. The timer will not fire before the scheduled fire date. For repeating timers, the next fire date is calculated from the original fire date regardless<br> of tolerance applied at individual fire times, to avoid drift. The default value is zero, which means no additional tolerance is applied. The system reserves the right to apply a small amount of tolerance to certain timers regardless of the value of this property.<br>// As the user of the timer, you will have the best idea of what an appropriate tolerance for a timer may be. A general rule of thumb, though, is to set the tolerance to at least 10%<br> of the interval, for a repeating timer. Even a small amount of tolerance will have a significant positive impact on the power usage of your application. The system may put a maximum value of the tolerance.<br>@propertyNSTimeIntervaltoleranceNS_AVAILABLE(10_9,7_0);</p>\n<ul>\n<li>(void)invalidate;<br>@property(readonly,getter=isValid)BOOLvalid;</li>\n</ul>\n<p>@property(readonly,retain)iduserInfo;</p>\n<p>@end</p>"},{"title":"NSUserDefaults 简介，使用 NSUserDefaults 存储自定义对象","date":"2016-10-08T03:39:44.000Z","_content":"NSUserDefaults适合存储轻量级的本地数据，一些简单的数据（NSString类型的）例如密码，网址等，NSUserDefaults肯定是首选，但是如果我们自定义了一个对象，对象保存的是一些信息，这时候就不能直接存储到NSUserDefaults了\n<!-- more -->\n一、了解NSUserDefaults以及它可以直接存储的类型\n\n\n      NSUserDefaults是一个单例，在整个程序中只有一个实例对象，他可以用于数据的永久保存，而且简单实用，这是它可以让数据自由传递的一个前提，也是大家喜欢用它保存简单数据的一个主要原因。     \n\n      使用 NSUserDefaults 存储自定义对象的最初，我们必须认识NSUserDefaults可以存储哪一些类型的数据，下面一一列出：\n\nNSUserDefaults支持的数据类型有：NSNumber（NSInteger、float、double），NSString，NSDate，NSArray，NSDictionary，BOOL.\n如果想要将上述数据类型的数据永久保存到NSUserDefaults中去，只需要简单的操作(一个Value 一个Key ),例如，想要保存一个NSString的对象，代码实现为：\n\n\n\n    //将NSString 对象存储到 NSUserDefaults 中\n    NSString *passWord = @\"1234567\";\n    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n    [user setObject:passWord forKey:@\"userPassWord\"];\n\n\n    将数据取出也很简单，只需要取出key 对应的值就好了，代码如下：\n\n    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n    NSString *passWord = [ user objectForKey:@\"userPassWord\"];\n\n\n注意：对相同的Key赋值约等于一次覆盖，要保证每一个Key的唯一性\n\n值得注意的是：\n\n        NSUserDefaults 存储的对象全是不可变的（这一点非常关键，弄错的话程序会出bug），例如，如果我想要存储一个 NSMutableArray 对象，我必须先创建一个不可变数组（NSArray）再将它存入NSUserDefaults中去，代码如下：\n\n\n\n    NSMutableArray *mutableArray = [NSMutableArray arrayWithObjects:@\"123\",@\"234\", nil];\n    NSArray * array = [NSArray arrayWithArray:mutableArray];\n    \n    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n    [user setObject:array forKey:@\"记住存放的一定是不可变的\"];\n\n\n取出数据是一样的，想要用NSUserDefaults中的数据给可变数组赋值\n\n先给出一个错误的写法：\n\n```objc\n    /*-------------------------错误的赋值方法-------------------*/\n    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n    \n    //这样写后，mutableArray 就变成了不可变数组了，如果你要在数组中添加或删除数据就会出现bug\n    NSMutableArray *mutableArray = [user objectForKey:@\"记住存放的一定是不可变的\"];\n\n\n\n正确的写法：\n\n    /*-------------------------正确的赋值方法-------------------*/\n    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n    \n    //可以用alloc 方法代替\n    NSMutableArray *mutableArray = [NSMutableArray arrayWithArray:[user objectForKey:@\"记住存放的一定是不可变的\"]];\n\n\n二、使用 NSUserDefaults 存储自定义对象\n\n1、将自定义类型转换为NSData类型\n\n      当数据重复而且多的时候（例如想存储全班同学的学号，姓名，性别（这个数据量可能太大了 ）），如果不用SQLite 存储 （多数据最好还是用这个），你可以选择使用归档，再将文件写入本地，但是这种方式和 NSUserDefaults 比起来麻烦多了（因为NSFileManage 本来就挺复杂） ，但是问题是，NSUserDefaults 本身不支持自定义对象的存储，不过它支持NSData的类型，下面举一个例子来介绍。\n\n\n\n我们先建立一个叫Student 的类，这个类里有三个属性（学号，姓名，性别）,如图：\n\n\n\n我们要做的就是将Student类型变成NSData类型 ，那么就必须实现归档：\n\n这里要实现 在.h 文件中申明 NSCoding 协议，再 在 .m 中实现 encodeWithCoder 方法 和 \n\ninitWithCoder 方法就可以了 ： \n\n.h 中修改文件如图 ：\n\n\n\n.m中加入代码 ：\n\n\n\n这样做就可以将自定义类型转变为NSData类型了\n\n\n\n2、将自定义类型数据存入 NSUserDefaults 中\n\n    如果要存储全班同学的信息，我们可以建一个NSMutableArray 来存放全班同学的信息（里面存储的全是NSData对象）在需要存储的地方加入代码：\n\n//首先，要建立一个可变数组来存储 NSDate对象\n\n     Student *student = [[Student alloc] ini];\n     \n    //下面进行的是对student对象的 name ， studentNumber ，sex 的赋值\n    student.name = @\"lady-奕奕\";\n    student.studentNumber = @\"3100104006\";\n    student.sex = @\"女\";\n    \n    //这是一个存放全班同学的数组\n    NSMutableArray * dataArray = [NSMutableArray arrayWithCapacity:50];\n    \n    //将student类型变为NSData类型\n    NSData *data = [NSKeyedArchiver archivedDataWithRootObject:student];\n    \n    //存放数据的数组将data加入进去\n    [dataArray addObject:data];\n\n\n如果你只想存一个人的信息，你可以直接将NSData存入NSUserDefaults中 :\n\n    NSData *data = [NSKeyedArchiver archivedDataWithRootObject:student];   \n    \n    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n    [user setObject:data forKey:@\"oneStudent\"];\n\n\n如果你想存储全班同学的信息，你还要用一个for循环将data 放入 dataArray中，这里具体的操作就不实现了，只给出存放的代码：\n\n   //记住要转换成不可变数组类型\n    NSArray * array = [NSArray arrayWithArray:dataArray];\n    \n    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n    [user setObject:array forKey:@\"allStudent\"];\n\n\n从NSUserDefaults中取出数据在还原也很简单\n\n例如还原一个学生的数据：\n\nNSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n \n NSdData *data = [user objectForKey:@\"oneStudent\"];\n    \n Student *student = [NSKeyedUnarchiver unarchiveObjectWithData:data];\n\n\n总之，NSUserDefaults 在我们编写代码中是最常用的一个永久保存数据的方法，也是最简单的。\n```\n\n\n","source":"_posts/oc/NSUserDefaults 简介，使用 NSUserDefaults 存储自定义对象.md","raw":"---\ntitle: NSUserDefaults 简介，使用 NSUserDefaults 存储自定义对象\ndate: 2016-10-08 11:39:44\ncategories: objective-c\n---\nNSUserDefaults适合存储轻量级的本地数据，一些简单的数据（NSString类型的）例如密码，网址等，NSUserDefaults肯定是首选，但是如果我们自定义了一个对象，对象保存的是一些信息，这时候就不能直接存储到NSUserDefaults了\n<!-- more -->\n一、了解NSUserDefaults以及它可以直接存储的类型\n\n\n      NSUserDefaults是一个单例，在整个程序中只有一个实例对象，他可以用于数据的永久保存，而且简单实用，这是它可以让数据自由传递的一个前提，也是大家喜欢用它保存简单数据的一个主要原因。     \n\n      使用 NSUserDefaults 存储自定义对象的最初，我们必须认识NSUserDefaults可以存储哪一些类型的数据，下面一一列出：\n\nNSUserDefaults支持的数据类型有：NSNumber（NSInteger、float、double），NSString，NSDate，NSArray，NSDictionary，BOOL.\n如果想要将上述数据类型的数据永久保存到NSUserDefaults中去，只需要简单的操作(一个Value 一个Key ),例如，想要保存一个NSString的对象，代码实现为：\n\n\n\n    //将NSString 对象存储到 NSUserDefaults 中\n    NSString *passWord = @\"1234567\";\n    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n    [user setObject:passWord forKey:@\"userPassWord\"];\n\n\n    将数据取出也很简单，只需要取出key 对应的值就好了，代码如下：\n\n    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n    NSString *passWord = [ user objectForKey:@\"userPassWord\"];\n\n\n注意：对相同的Key赋值约等于一次覆盖，要保证每一个Key的唯一性\n\n值得注意的是：\n\n        NSUserDefaults 存储的对象全是不可变的（这一点非常关键，弄错的话程序会出bug），例如，如果我想要存储一个 NSMutableArray 对象，我必须先创建一个不可变数组（NSArray）再将它存入NSUserDefaults中去，代码如下：\n\n\n\n    NSMutableArray *mutableArray = [NSMutableArray arrayWithObjects:@\"123\",@\"234\", nil];\n    NSArray * array = [NSArray arrayWithArray:mutableArray];\n    \n    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n    [user setObject:array forKey:@\"记住存放的一定是不可变的\"];\n\n\n取出数据是一样的，想要用NSUserDefaults中的数据给可变数组赋值\n\n先给出一个错误的写法：\n\n```objc\n    /*-------------------------错误的赋值方法-------------------*/\n    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n    \n    //这样写后，mutableArray 就变成了不可变数组了，如果你要在数组中添加或删除数据就会出现bug\n    NSMutableArray *mutableArray = [user objectForKey:@\"记住存放的一定是不可变的\"];\n\n\n\n正确的写法：\n\n    /*-------------------------正确的赋值方法-------------------*/\n    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n    \n    //可以用alloc 方法代替\n    NSMutableArray *mutableArray = [NSMutableArray arrayWithArray:[user objectForKey:@\"记住存放的一定是不可变的\"]];\n\n\n二、使用 NSUserDefaults 存储自定义对象\n\n1、将自定义类型转换为NSData类型\n\n      当数据重复而且多的时候（例如想存储全班同学的学号，姓名，性别（这个数据量可能太大了 ）），如果不用SQLite 存储 （多数据最好还是用这个），你可以选择使用归档，再将文件写入本地，但是这种方式和 NSUserDefaults 比起来麻烦多了（因为NSFileManage 本来就挺复杂） ，但是问题是，NSUserDefaults 本身不支持自定义对象的存储，不过它支持NSData的类型，下面举一个例子来介绍。\n\n\n\n我们先建立一个叫Student 的类，这个类里有三个属性（学号，姓名，性别）,如图：\n\n\n\n我们要做的就是将Student类型变成NSData类型 ，那么就必须实现归档：\n\n这里要实现 在.h 文件中申明 NSCoding 协议，再 在 .m 中实现 encodeWithCoder 方法 和 \n\ninitWithCoder 方法就可以了 ： \n\n.h 中修改文件如图 ：\n\n\n\n.m中加入代码 ：\n\n\n\n这样做就可以将自定义类型转变为NSData类型了\n\n\n\n2、将自定义类型数据存入 NSUserDefaults 中\n\n    如果要存储全班同学的信息，我们可以建一个NSMutableArray 来存放全班同学的信息（里面存储的全是NSData对象）在需要存储的地方加入代码：\n\n//首先，要建立一个可变数组来存储 NSDate对象\n\n     Student *student = [[Student alloc] ini];\n     \n    //下面进行的是对student对象的 name ， studentNumber ，sex 的赋值\n    student.name = @\"lady-奕奕\";\n    student.studentNumber = @\"3100104006\";\n    student.sex = @\"女\";\n    \n    //这是一个存放全班同学的数组\n    NSMutableArray * dataArray = [NSMutableArray arrayWithCapacity:50];\n    \n    //将student类型变为NSData类型\n    NSData *data = [NSKeyedArchiver archivedDataWithRootObject:student];\n    \n    //存放数据的数组将data加入进去\n    [dataArray addObject:data];\n\n\n如果你只想存一个人的信息，你可以直接将NSData存入NSUserDefaults中 :\n\n    NSData *data = [NSKeyedArchiver archivedDataWithRootObject:student];   \n    \n    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n    [user setObject:data forKey:@\"oneStudent\"];\n\n\n如果你想存储全班同学的信息，你还要用一个for循环将data 放入 dataArray中，这里具体的操作就不实现了，只给出存放的代码：\n\n   //记住要转换成不可变数组类型\n    NSArray * array = [NSArray arrayWithArray:dataArray];\n    \n    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n    [user setObject:array forKey:@\"allStudent\"];\n\n\n从NSUserDefaults中取出数据在还原也很简单\n\n例如还原一个学生的数据：\n\nNSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n \n NSdData *data = [user objectForKey:@\"oneStudent\"];\n    \n Student *student = [NSKeyedUnarchiver unarchiveObjectWithData:data];\n\n\n总之，NSUserDefaults 在我们编写代码中是最常用的一个永久保存数据的方法，也是最简单的。\n```\n\n\n","slug":"oc/NSUserDefaults 简介，使用 NSUserDefaults 存储自定义对象","published":1,"updated":"2016-10-08T09:44:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms975001221xw517xhpjn","content":"<p>NSUserDefaults适合存储轻量级的本地数据，一些简单的数据（NSString类型的）例如密码，网址等，NSUserDefaults肯定是首选，但是如果我们自定义了一个对象，对象保存的是一些信息，这时候就不能直接存储到NSUserDefaults了<br><a id=\"more\"></a><br>一、了解NSUserDefaults以及它可以直接存储的类型</p>\n<pre><code>NSUserDefaults是一个单例，在整个程序中只有一个实例对象，他可以用于数据的永久保存，而且简单实用，这是它可以让数据自由传递的一个前提，也是大家喜欢用它保存简单数据的一个主要原因。     \n\n使用 NSUserDefaults 存储自定义对象的最初，我们必须认识NSUserDefaults可以存储哪一些类型的数据，下面一一列出：\n</code></pre><p>NSUserDefaults支持的数据类型有：NSNumber（NSInteger、float、double），NSString，NSDate，NSArray，NSDictionary，BOOL.<br>如果想要将上述数据类型的数据永久保存到NSUserDefaults中去，只需要简单的操作(一个Value 一个Key ),例如，想要保存一个NSString的对象，代码实现为：</p>\n<pre><code>//将NSString 对象存储到 NSUserDefaults 中\nNSString *passWord = @&quot;1234567&quot;;\nNSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n[user setObject:passWord forKey:@&quot;userPassWord&quot;];\n\n\n将数据取出也很简单，只需要取出key 对应的值就好了，代码如下：\n\nNSUserDefaults *user = [NSUserDefaults standardUserDefaults];\nNSString *passWord = [ user objectForKey:@&quot;userPassWord&quot;];\n</code></pre><p>注意：对相同的Key赋值约等于一次覆盖，要保证每一个Key的唯一性</p>\n<p>值得注意的是：</p>\n<pre><code>    NSUserDefaults 存储的对象全是不可变的（这一点非常关键，弄错的话程序会出bug），例如，如果我想要存储一个 NSMutableArray 对象，我必须先创建一个不可变数组（NSArray）再将它存入NSUserDefaults中去，代码如下：\n\n\n\nNSMutableArray *mutableArray = [NSMutableArray arrayWithObjects:@&quot;123&quot;,@&quot;234&quot;, nil];\nNSArray * array = [NSArray arrayWithArray:mutableArray];\n\nNSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n[user setObject:array forKey:@&quot;记住存放的一定是不可变的&quot;];\n</code></pre><p>取出数据是一样的，想要用NSUserDefaults中的数据给可变数组赋值</p>\n<p>先给出一个错误的写法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\">/*-------------------------错误的赋值方法-------------------*/</span></div><div class=\"line\">    <span class=\"built_in\">NSUserDefaults</span> *user = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//这样写后，mutableArray 就变成了不可变数组了，如果你要在数组中添加或删除数据就会出现bug</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *mutableArray = [user objectForKey:<span class=\"string\">@\"记住存放的一定是不可变的\"</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">正确的写法：</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*-------------------------正确的赋值方法-------------------*/</span></div><div class=\"line\">    <span class=\"built_in\">NSUserDefaults</span> *user = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//可以用alloc 方法代替</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *mutableArray = [<span class=\"built_in\">NSMutableArray</span> arrayWithArray:[user objectForKey:<span class=\"string\">@\"记住存放的一定是不可变的\"</span>]];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">二、使用 <span class=\"built_in\">NSUserDefaults</span> 存储自定义对象</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1</span>、将自定义类型转换为<span class=\"built_in\">NSData</span>类型</div><div class=\"line\"></div><div class=\"line\">      当数据重复而且多的时候（例如想存储全班同学的学号，姓名，性别（这个数据量可能太大了 ）），如果不用SQLite 存储 （多数据最好还是用这个），你可以选择使用归档，再将文件写入本地，但是这种方式和 <span class=\"built_in\">NSUserDefaults</span> 比起来麻烦多了（因为<span class=\"built_in\">NSFileManage</span> 本来就挺复杂） ，但是问题是，<span class=\"built_in\">NSUserDefaults</span> 本身不支持自定义对象的存储，不过它支持<span class=\"built_in\">NSData</span>的类型，下面举一个例子来介绍。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">我们先建立一个叫Student 的类，这个类里有三个属性（学号，姓名，性别）,如图：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">我们要做的就是将Student类型变成<span class=\"built_in\">NSData</span>类型 ，那么就必须实现归档：</div><div class=\"line\"></div><div class=\"line\">这里要实现 在.h 文件中申明 <span class=\"built_in\">NSCoding</span> 协议，再 在 .m 中实现 encodeWithCoder 方法 和 </div><div class=\"line\"></div><div class=\"line\">initWithCoder 方法就可以了 ： </div><div class=\"line\"></div><div class=\"line\">.h 中修改文件如图 ：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">.m中加入代码 ：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">这样做就可以将自定义类型转变为<span class=\"built_in\">NSData</span>类型了</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2</span>、将自定义类型数据存入 <span class=\"built_in\">NSUserDefaults</span> 中</div><div class=\"line\"></div><div class=\"line\">    如果要存储全班同学的信息，我们可以建一个<span class=\"built_in\">NSMutableArray</span> 来存放全班同学的信息（里面存储的全是<span class=\"built_in\">NSData</span>对象）在需要存储的地方加入代码：</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//首先，要建立一个可变数组来存储 NSDate对象</span></div><div class=\"line\"></div><div class=\"line\">     Student *student = [[Student alloc] ini];</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">//下面进行的是对student对象的 name ， studentNumber ，sex 的赋值</span></div><div class=\"line\">    student.name = <span class=\"string\">@\"lady-奕奕\"</span>;</div><div class=\"line\">    student.studentNumber = <span class=\"string\">@\"3100104006\"</span>;</div><div class=\"line\">    student.sex = <span class=\"string\">@\"女\"</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//这是一个存放全班同学的数组</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> * dataArray = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity:<span class=\"number\">50</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//将student类型变为NSData类型</span></div><div class=\"line\">    <span class=\"built_in\">NSData</span> *data = [<span class=\"built_in\">NSKeyedArchiver</span> archivedDataWithRootObject:student];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//存放数据的数组将data加入进去</span></div><div class=\"line\">    [dataArray addObject:data];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">如果你只想存一个人的信息，你可以直接将<span class=\"built_in\">NSData</span>存入<span class=\"built_in\">NSUserDefaults</span>中 :</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSData</span> *data = [<span class=\"built_in\">NSKeyedArchiver</span> archivedDataWithRootObject:student];   </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSUserDefaults</span> *user = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\">    [user setObject:data forKey:<span class=\"string\">@\"oneStudent\"</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">如果你想存储全班同学的信息，你还要用一个<span class=\"keyword\">for</span>循环将data 放入 dataArray中，这里具体的操作就不实现了，只给出存放的代码：</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//记住要转换成不可变数组类型</span></div><div class=\"line\">    <span class=\"built_in\">NSArray</span> * array = [<span class=\"built_in\">NSArray</span> arrayWithArray:dataArray];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSUserDefaults</span> *user = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\">    [user setObject:array forKey:<span class=\"string\">@\"allStudent\"</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">从<span class=\"built_in\">NSUserDefaults</span>中取出数据在还原也很简单</div><div class=\"line\"></div><div class=\"line\">例如还原一个学生的数据：</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NSUserDefaults</span> *user = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"built_in\">NSdData</span> *data = [user objectForKey:<span class=\"string\">@\"oneStudent\"</span>];</div><div class=\"line\">    </div><div class=\"line\"> Student *student = [<span class=\"built_in\">NSKeyedUnarchiver</span> unarchiveObjectWithData:data];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">总之，<span class=\"built_in\">NSUserDefaults</span> 在我们编写代码中是最常用的一个永久保存数据的方法，也是最简单的。</div></pre></td></tr></table></figure>\n","excerpt":"<p>NSUserDefaults适合存储轻量级的本地数据，一些简单的数据（NSString类型的）例如密码，网址等，NSUserDefaults肯定是首选，但是如果我们自定义了一个对象，对象保存的是一些信息，这时候就不能直接存储到NSUserDefaults了<br>","more":"<br>一、了解NSUserDefaults以及它可以直接存储的类型</p>\n<pre><code>NSUserDefaults是一个单例，在整个程序中只有一个实例对象，他可以用于数据的永久保存，而且简单实用，这是它可以让数据自由传递的一个前提，也是大家喜欢用它保存简单数据的一个主要原因。     \n\n使用 NSUserDefaults 存储自定义对象的最初，我们必须认识NSUserDefaults可以存储哪一些类型的数据，下面一一列出：\n</code></pre><p>NSUserDefaults支持的数据类型有：NSNumber（NSInteger、float、double），NSString，NSDate，NSArray，NSDictionary，BOOL.<br>如果想要将上述数据类型的数据永久保存到NSUserDefaults中去，只需要简单的操作(一个Value 一个Key ),例如，想要保存一个NSString的对象，代码实现为：</p>\n<pre><code>//将NSString 对象存储到 NSUserDefaults 中\nNSString *passWord = @&quot;1234567&quot;;\nNSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n[user setObject:passWord forKey:@&quot;userPassWord&quot;];\n\n\n将数据取出也很简单，只需要取出key 对应的值就好了，代码如下：\n\nNSUserDefaults *user = [NSUserDefaults standardUserDefaults];\nNSString *passWord = [ user objectForKey:@&quot;userPassWord&quot;];\n</code></pre><p>注意：对相同的Key赋值约等于一次覆盖，要保证每一个Key的唯一性</p>\n<p>值得注意的是：</p>\n<pre><code>    NSUserDefaults 存储的对象全是不可变的（这一点非常关键，弄错的话程序会出bug），例如，如果我想要存储一个 NSMutableArray 对象，我必须先创建一个不可变数组（NSArray）再将它存入NSUserDefaults中去，代码如下：\n\n\n\nNSMutableArray *mutableArray = [NSMutableArray arrayWithObjects:@&quot;123&quot;,@&quot;234&quot;, nil];\nNSArray * array = [NSArray arrayWithArray:mutableArray];\n\nNSUserDefaults *user = [NSUserDefaults standardUserDefaults];\n[user setObject:array forKey:@&quot;记住存放的一定是不可变的&quot;];\n</code></pre><p>取出数据是一样的，想要用NSUserDefaults中的数据给可变数组赋值</p>\n<p>先给出一个错误的写法：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\">/*-------------------------错误的赋值方法-------------------*/</span></div><div class=\"line\">    <span class=\"built_in\">NSUserDefaults</span> *user = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//这样写后，mutableArray 就变成了不可变数组了，如果你要在数组中添加或删除数据就会出现bug</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *mutableArray = [user objectForKey:<span class=\"string\">@\"记住存放的一定是不可变的\"</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">正确的写法：</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*-------------------------正确的赋值方法-------------------*/</span></div><div class=\"line\">    <span class=\"built_in\">NSUserDefaults</span> *user = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//可以用alloc 方法代替</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *mutableArray = [<span class=\"built_in\">NSMutableArray</span> arrayWithArray:[user objectForKey:<span class=\"string\">@\"记住存放的一定是不可变的\"</span>]];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">二、使用 <span class=\"built_in\">NSUserDefaults</span> 存储自定义对象</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1</span>、将自定义类型转换为<span class=\"built_in\">NSData</span>类型</div><div class=\"line\"></div><div class=\"line\">      当数据重复而且多的时候（例如想存储全班同学的学号，姓名，性别（这个数据量可能太大了 ）），如果不用SQLite 存储 （多数据最好还是用这个），你可以选择使用归档，再将文件写入本地，但是这种方式和 <span class=\"built_in\">NSUserDefaults</span> 比起来麻烦多了（因为<span class=\"built_in\">NSFileManage</span> 本来就挺复杂） ，但是问题是，<span class=\"built_in\">NSUserDefaults</span> 本身不支持自定义对象的存储，不过它支持<span class=\"built_in\">NSData</span>的类型，下面举一个例子来介绍。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">我们先建立一个叫Student 的类，这个类里有三个属性（学号，姓名，性别）,如图：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">我们要做的就是将Student类型变成<span class=\"built_in\">NSData</span>类型 ，那么就必须实现归档：</div><div class=\"line\"></div><div class=\"line\">这里要实现 在.h 文件中申明 <span class=\"built_in\">NSCoding</span> 协议，再 在 .m 中实现 encodeWithCoder 方法 和 </div><div class=\"line\"></div><div class=\"line\">initWithCoder 方法就可以了 ： </div><div class=\"line\"></div><div class=\"line\">.h 中修改文件如图 ：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">.m中加入代码 ：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">这样做就可以将自定义类型转变为<span class=\"built_in\">NSData</span>类型了</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2</span>、将自定义类型数据存入 <span class=\"built_in\">NSUserDefaults</span> 中</div><div class=\"line\"></div><div class=\"line\">    如果要存储全班同学的信息，我们可以建一个<span class=\"built_in\">NSMutableArray</span> 来存放全班同学的信息（里面存储的全是<span class=\"built_in\">NSData</span>对象）在需要存储的地方加入代码：</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//首先，要建立一个可变数组来存储 NSDate对象</span></div><div class=\"line\"></div><div class=\"line\">     Student *student = [[Student alloc] ini];</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">//下面进行的是对student对象的 name ， studentNumber ，sex 的赋值</span></div><div class=\"line\">    student.name = <span class=\"string\">@\"lady-奕奕\"</span>;</div><div class=\"line\">    student.studentNumber = <span class=\"string\">@\"3100104006\"</span>;</div><div class=\"line\">    student.sex = <span class=\"string\">@\"女\"</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//这是一个存放全班同学的数组</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> * dataArray = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity:<span class=\"number\">50</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//将student类型变为NSData类型</span></div><div class=\"line\">    <span class=\"built_in\">NSData</span> *data = [<span class=\"built_in\">NSKeyedArchiver</span> archivedDataWithRootObject:student];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//存放数据的数组将data加入进去</span></div><div class=\"line\">    [dataArray addObject:data];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">如果你只想存一个人的信息，你可以直接将<span class=\"built_in\">NSData</span>存入<span class=\"built_in\">NSUserDefaults</span>中 :</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSData</span> *data = [<span class=\"built_in\">NSKeyedArchiver</span> archivedDataWithRootObject:student];   </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSUserDefaults</span> *user = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\">    [user setObject:data forKey:<span class=\"string\">@\"oneStudent\"</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">如果你想存储全班同学的信息，你还要用一个<span class=\"keyword\">for</span>循环将data 放入 dataArray中，这里具体的操作就不实现了，只给出存放的代码：</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//记住要转换成不可变数组类型</span></div><div class=\"line\">    <span class=\"built_in\">NSArray</span> * array = [<span class=\"built_in\">NSArray</span> arrayWithArray:dataArray];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSUserDefaults</span> *user = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\">    [user setObject:array forKey:<span class=\"string\">@\"allStudent\"</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">从<span class=\"built_in\">NSUserDefaults</span>中取出数据在还原也很简单</div><div class=\"line\"></div><div class=\"line\">例如还原一个学生的数据：</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NSUserDefaults</span> *user = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"built_in\">NSdData</span> *data = [user objectForKey:<span class=\"string\">@\"oneStudent\"</span>];</div><div class=\"line\">    </div><div class=\"line\"> Student *student = [<span class=\"built_in\">NSKeyedUnarchiver</span> unarchiveObjectWithData:data];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">总之，<span class=\"built_in\">NSUserDefaults</span> 在我们编写代码中是最常用的一个永久保存数据的方法，也是最简单的。</div></pre></td></tr></table></figure>"},{"title":"NSUserDefaults","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n/*NSUserDefaults通常用于存储用户偏好设置和登陆注册等信息*/\n\n    //取值\n    [[NSUserDefaults standardUserDefaults]objectForKey:@\"night\"];\n    //存值\n    [[NSUserDefaults standardUserDefaults] setObject:@\"yes\" forKey:@\"night\"];\n\n\n//存储数据\n    NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];\n   \n    [userDefault setObject:@\"张三\" forKey:@\"name\"];\n    [userDefault setInteger:23 forKey:@\"age\"];  \n  \n//取出数据\n    self.navigationItem.title = [[NSUserDefaults standardUserDefaults]objectForKey:@\"name\"];\n    NSLog(@\"%ld\",[[NSUserDefaults standardUserDefaults]integerForKey:@\"age\" ]);\n\n//修改数据\n    [[NSUserDefaults standardUserDefaults]setObject:@\"李四\" forKey:@\"name\"];\n\n //强制存储\n    /*原因：NSUserDefaults存储数据会发生延迟现象，把数据存储到本地文件中，不是马上就生效，所以会出现娶不到数据现象*/\n    [[NSUserDefaults standardUserDefaults]synchronize];\n\n```\n\n","source":"_posts/oc/NSUserDefaults.md","raw":"---\ntitle: NSUserDefaults\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n/*NSUserDefaults通常用于存储用户偏好设置和登陆注册等信息*/\n\n    //取值\n    [[NSUserDefaults standardUserDefaults]objectForKey:@\"night\"];\n    //存值\n    [[NSUserDefaults standardUserDefaults] setObject:@\"yes\" forKey:@\"night\"];\n\n\n//存储数据\n    NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];\n   \n    [userDefault setObject:@\"张三\" forKey:@\"name\"];\n    [userDefault setInteger:23 forKey:@\"age\"];  \n  \n//取出数据\n    self.navigationItem.title = [[NSUserDefaults standardUserDefaults]objectForKey:@\"name\"];\n    NSLog(@\"%ld\",[[NSUserDefaults standardUserDefaults]integerForKey:@\"age\" ]);\n\n//修改数据\n    [[NSUserDefaults standardUserDefaults]setObject:@\"李四\" forKey:@\"name\"];\n\n //强制存储\n    /*原因：NSUserDefaults存储数据会发生延迟现象，把数据存储到本地文件中，不是马上就生效，所以会出现娶不到数据现象*/\n    [[NSUserDefaults standardUserDefaults]synchronize];\n\n```\n\n","slug":"oc/NSUserDefaults","published":1,"updated":"2016-10-08T05:57:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms976001521xwlckgxybg","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*NSUserDefaults通常用于存储用户偏好设置和登陆注册等信息*/</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//取值</span></div><div class=\"line\">    [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults]objectForKey:<span class=\"string\">@\"night\"</span>];</div><div class=\"line\">    <span class=\"comment\">//存值</span></div><div class=\"line\">    [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults] setObject:<span class=\"string\">@\"yes\"</span> forKey:<span class=\"string\">@\"night\"</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//存储数据</span></div><div class=\"line\">    <span class=\"built_in\">NSUserDefaults</span> *userDefault = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\">   </div><div class=\"line\">    [userDefault setObject:<span class=\"string\">@\"张三\"</span> forKey:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\">    [userDefault setInteger:<span class=\"number\">23</span> forKey:<span class=\"string\">@\"age\"</span>];  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//取出数据</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.title = [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults]objectForKey:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%ld\"</span>,[[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults]integerForKey:<span class=\"string\">@\"age\"</span> ]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//修改数据</span></div><div class=\"line\">    [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults]setObject:<span class=\"string\">@\"李四\"</span> forKey:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//强制存储</span></div><div class=\"line\">    <span class=\"comment\">/*原因：NSUserDefaults存储数据会发生延迟现象，把数据存储到本地文件中，不是马上就生效，所以会出现娶不到数据现象*/</span></div><div class=\"line\">    [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults]synchronize];</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*NSUserDefaults通常用于存储用户偏好设置和登陆注册等信息*/</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//取值</span></div><div class=\"line\">    [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults]objectForKey:<span class=\"string\">@\"night\"</span>];</div><div class=\"line\">    <span class=\"comment\">//存值</span></div><div class=\"line\">    [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults] setObject:<span class=\"string\">@\"yes\"</span> forKey:<span class=\"string\">@\"night\"</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//存储数据</span></div><div class=\"line\">    <span class=\"built_in\">NSUserDefaults</span> *userDefault = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\">   </div><div class=\"line\">    [userDefault setObject:<span class=\"string\">@\"张三\"</span> forKey:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\">    [userDefault setInteger:<span class=\"number\">23</span> forKey:<span class=\"string\">@\"age\"</span>];  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//取出数据</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.title = [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults]objectForKey:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%ld\"</span>,[[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults]integerForKey:<span class=\"string\">@\"age\"</span> ]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//修改数据</span></div><div class=\"line\">    [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults]setObject:<span class=\"string\">@\"李四\"</span> forKey:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">//强制存储</span></div><div class=\"line\">    <span class=\"comment\">/*原因：NSUserDefaults存储数据会发生延迟现象，把数据存储到本地文件中，不是马上就生效，所以会出现娶不到数据现象*/</span></div><div class=\"line\">    [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults]synchronize];</div></pre></td></tr></table></figure>"},{"title":"OC 函数库方法","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n　　2.1.1　rand()函数：产生随机数　\n　　2.1.2　abs()函数/labs()函数：整数的绝对值　\n　　2.1.3　fabs()/fabsf()/fabsl()函数：浮点数的绝对值　\n　　2.1.4　floor()/floorf()/floorl()函数：向下取整　\n　　2.1.5　ceil()/ceilf()/ceill()函数：向上取整　\n　　2.1.6　round()/roundf()/roundl()函数：四舍五入　\n　　2.1.7　sqrt()/sqrtf()/sqrtl()函数：求平方根　\n　　2.1.8　fmax()/fmaxf()/fmaxl()函数：求最大值　\n　　2.1.9　fmin()/fminf()/fminl()函数：求最小值　\n　　2.1.10　hypot()/hypotf()/hypotl()函数：求直角三角形斜边的长度　\n　　2.1.11　fmod()/fmodf()/fmodl()函数：求两数整除后的余数　\n　　2.1.12　modf()/modff()/modfl()函数：浮点数分解为整数和小数　\n　　2.1.13　frexp()/frexpf()/frexpl()函数：浮点数分解尾数和以二为底的指数　\n　　2.2　三角运算函数　\n　　2.2.1　sin()/sinf()/sinl()/函数：求正弦值　\n　　2.2.2　sinh()/sinhf()/sinhl()函数：求双曲正弦值　\n　　2.2.3　cos()/cosf()/cosl()函数：求余弦值　\n　　2.2.4　cosh()/coshf()/coshl()函数：求双曲余弦值　\n　　2.2.5　tan()/tanf()/tanl()函数：求正切值　\n　　2.2.6　tanh()/tanhf()/tanhl()函数：求双曲正切值　\n　　2.3　反三角运算　\n　　2.3.1　asin()/asinf()/asinl()函数：求反正弦值　\n　　2.3.2　asinh()/asinhf()/asinhl()函数：求反双曲正弦值　\n　　2.3.3　acos()/acosf()/acosl()函数：求反余弦值　\n　　2.3.4　acosh()/acoshf()/acoshl()函数：求反双曲余弦值　\n　　2.3.5　atan()/atanf()/atanl()函数：求反正切值　\n　　2.3.6　atan2()/atan2f()/atanl()函数：求坐标值的反正切值　\n　　2.3.7　atanh()/atanhf()/atanhl()函数：求反双曲正切值　\n　　2.4　指数和对数运算　\n　　2.4.1　pow()/powf()/powl函数：求n的m次方的值　\n　　2.4.2　exp()/expf()/expl()函数：求e的x次方的值　\n　　2.4.3　exp2()/exp2f()/exp2l()函数：2的x的次方的值　\n　　2.4.4　log()/logf()/logl()函数：求以e为底的对数值　\n　　2.4.5　log10()/log10f()/log10l()函数：求以10为底的对数值\n```\n\n","source":"_posts/oc/OC 函数库方法.md","raw":"---\ntitle: OC 函数库方法\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n　　2.1.1　rand()函数：产生随机数　\n　　2.1.2　abs()函数/labs()函数：整数的绝对值　\n　　2.1.3　fabs()/fabsf()/fabsl()函数：浮点数的绝对值　\n　　2.1.4　floor()/floorf()/floorl()函数：向下取整　\n　　2.1.5　ceil()/ceilf()/ceill()函数：向上取整　\n　　2.1.6　round()/roundf()/roundl()函数：四舍五入　\n　　2.1.7　sqrt()/sqrtf()/sqrtl()函数：求平方根　\n　　2.1.8　fmax()/fmaxf()/fmaxl()函数：求最大值　\n　　2.1.9　fmin()/fminf()/fminl()函数：求最小值　\n　　2.1.10　hypot()/hypotf()/hypotl()函数：求直角三角形斜边的长度　\n　　2.1.11　fmod()/fmodf()/fmodl()函数：求两数整除后的余数　\n　　2.1.12　modf()/modff()/modfl()函数：浮点数分解为整数和小数　\n　　2.1.13　frexp()/frexpf()/frexpl()函数：浮点数分解尾数和以二为底的指数　\n　　2.2　三角运算函数　\n　　2.2.1　sin()/sinf()/sinl()/函数：求正弦值　\n　　2.2.2　sinh()/sinhf()/sinhl()函数：求双曲正弦值　\n　　2.2.3　cos()/cosf()/cosl()函数：求余弦值　\n　　2.2.4　cosh()/coshf()/coshl()函数：求双曲余弦值　\n　　2.2.5　tan()/tanf()/tanl()函数：求正切值　\n　　2.2.6　tanh()/tanhf()/tanhl()函数：求双曲正切值　\n　　2.3　反三角运算　\n　　2.3.1　asin()/asinf()/asinl()函数：求反正弦值　\n　　2.3.2　asinh()/asinhf()/asinhl()函数：求反双曲正弦值　\n　　2.3.3　acos()/acosf()/acosl()函数：求反余弦值　\n　　2.3.4　acosh()/acoshf()/acoshl()函数：求反双曲余弦值　\n　　2.3.5　atan()/atanf()/atanl()函数：求反正切值　\n　　2.3.6　atan2()/atan2f()/atanl()函数：求坐标值的反正切值　\n　　2.3.7　atanh()/atanhf()/atanhl()函数：求反双曲正切值　\n　　2.4　指数和对数运算　\n　　2.4.1　pow()/powf()/powl函数：求n的m次方的值　\n　　2.4.2　exp()/expf()/expl()函数：求e的x次方的值　\n　　2.4.3　exp2()/exp2f()/exp2l()函数：2的x的次方的值　\n　　2.4.4　log()/logf()/logl()函数：求以e为底的对数值　\n　　2.4.5　log10()/log10f()/log10l()函数：求以10为底的对数值\n```\n\n","slug":"oc/OC 函数库方法","published":1,"updated":"2016-10-08T09:10:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms977001721xwjnc82ix1","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.1</span>　rand()函数：产生随机数　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.2</span>　abs()函数/labs()函数：整数的绝对值　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.3</span>　fabs()/fabsf()/fabsl()函数：浮点数的绝对值　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.4</span>　floor()/floorf()/floorl()函数：向下取整　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.5</span>　ceil()/ceilf()/ceill()函数：向上取整　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.6</span>　round()/roundf()/roundl()函数：四舍五入　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.7</span>　sqrt()/sqrtf()/sqrtl()函数：求平方根　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.8</span>　fmax()/fmaxf()/fmaxl()函数：求最大值　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.9</span>　fmin()/fminf()/fminl()函数：求最小值　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.10</span>　hypot()/hypotf()/hypotl()函数：求直角三角形斜边的长度　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.11</span>　fmod()/fmodf()/fmodl()函数：求两数整除后的余数　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.12</span>　modf()/modff()/modfl()函数：浮点数分解为整数和小数　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.13</span>　frexp()/frexpf()/frexpl()函数：浮点数分解尾数和以二为底的指数　</div><div class=\"line\">　　<span class=\"number\">2.2</span>　三角运算函数　</div><div class=\"line\">　　<span class=\"number\">2.2</span><span class=\"number\">.1</span>　sin()/sinf()/sinl()/函数：求正弦值　</div><div class=\"line\">　　<span class=\"number\">2.2</span><span class=\"number\">.2</span>　sinh()/sinhf()/sinhl()函数：求双曲正弦值　</div><div class=\"line\">　　<span class=\"number\">2.2</span><span class=\"number\">.3</span>　cos()/cosf()/cosl()函数：求余弦值　</div><div class=\"line\">　　<span class=\"number\">2.2</span><span class=\"number\">.4</span>　cosh()/coshf()/coshl()函数：求双曲余弦值　</div><div class=\"line\">　　<span class=\"number\">2.2</span><span class=\"number\">.5</span>　tan()/tanf()/tanl()函数：求正切值　</div><div class=\"line\">　　<span class=\"number\">2.2</span><span class=\"number\">.6</span>　tanh()/tanhf()/tanhl()函数：求双曲正切值　</div><div class=\"line\">　　<span class=\"number\">2.3</span>　反三角运算　</div><div class=\"line\">　　<span class=\"number\">2.3</span><span class=\"number\">.1</span>　asin()/asinf()/asinl()函数：求反正弦值　</div><div class=\"line\">　　<span class=\"number\">2.3</span><span class=\"number\">.2</span>　asinh()/asinhf()/asinhl()函数：求反双曲正弦值　</div><div class=\"line\">　　<span class=\"number\">2.3</span><span class=\"number\">.3</span>　acos()/acosf()/acosl()函数：求反余弦值　</div><div class=\"line\">　　<span class=\"number\">2.3</span><span class=\"number\">.4</span>　acosh()/acoshf()/acoshl()函数：求反双曲余弦值　</div><div class=\"line\">　　<span class=\"number\">2.3</span><span class=\"number\">.5</span>　atan()/atanf()/atanl()函数：求反正切值　</div><div class=\"line\">　　<span class=\"number\">2.3</span><span class=\"number\">.6</span>　atan2()/atan2f()/atanl()函数：求坐标值的反正切值　</div><div class=\"line\">　　<span class=\"number\">2.3</span><span class=\"number\">.7</span>　atanh()/atanhf()/atanhl()函数：求反双曲正切值　</div><div class=\"line\">　　<span class=\"number\">2.4</span>　指数和对数运算　</div><div class=\"line\">　　<span class=\"number\">2.4</span><span class=\"number\">.1</span>　pow()/powf()/powl函数：求n的m次方的值　</div><div class=\"line\">　　<span class=\"number\">2.4</span><span class=\"number\">.2</span>　exp()/expf()/expl()函数：求e的x次方的值　</div><div class=\"line\">　　<span class=\"number\">2.4</span><span class=\"number\">.3</span>　exp2()/exp2f()/exp2l()函数：<span class=\"number\">2</span>的x的次方的值　</div><div class=\"line\">　　<span class=\"number\">2.4</span><span class=\"number\">.4</span>　log()/logf()/logl()函数：求以e为底的对数值　</div><div class=\"line\">　　<span class=\"number\">2.4</span><span class=\"number\">.5</span>　log10()/log10f()/log10l()函数：求以<span class=\"number\">10</span>为底的对数值</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.1</span>　rand()函数：产生随机数　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.2</span>　abs()函数/labs()函数：整数的绝对值　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.3</span>　fabs()/fabsf()/fabsl()函数：浮点数的绝对值　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.4</span>　floor()/floorf()/floorl()函数：向下取整　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.5</span>　ceil()/ceilf()/ceill()函数：向上取整　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.6</span>　round()/roundf()/roundl()函数：四舍五入　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.7</span>　sqrt()/sqrtf()/sqrtl()函数：求平方根　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.8</span>　fmax()/fmaxf()/fmaxl()函数：求最大值　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.9</span>　fmin()/fminf()/fminl()函数：求最小值　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.10</span>　hypot()/hypotf()/hypotl()函数：求直角三角形斜边的长度　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.11</span>　fmod()/fmodf()/fmodl()函数：求两数整除后的余数　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.12</span>　modf()/modff()/modfl()函数：浮点数分解为整数和小数　</div><div class=\"line\">　　<span class=\"number\">2.1</span><span class=\"number\">.13</span>　frexp()/frexpf()/frexpl()函数：浮点数分解尾数和以二为底的指数　</div><div class=\"line\">　　<span class=\"number\">2.2</span>　三角运算函数　</div><div class=\"line\">　　<span class=\"number\">2.2</span><span class=\"number\">.1</span>　sin()/sinf()/sinl()/函数：求正弦值　</div><div class=\"line\">　　<span class=\"number\">2.2</span><span class=\"number\">.2</span>　sinh()/sinhf()/sinhl()函数：求双曲正弦值　</div><div class=\"line\">　　<span class=\"number\">2.2</span><span class=\"number\">.3</span>　cos()/cosf()/cosl()函数：求余弦值　</div><div class=\"line\">　　<span class=\"number\">2.2</span><span class=\"number\">.4</span>　cosh()/coshf()/coshl()函数：求双曲余弦值　</div><div class=\"line\">　　<span class=\"number\">2.2</span><span class=\"number\">.5</span>　tan()/tanf()/tanl()函数：求正切值　</div><div class=\"line\">　　<span class=\"number\">2.2</span><span class=\"number\">.6</span>　tanh()/tanhf()/tanhl()函数：求双曲正切值　</div><div class=\"line\">　　<span class=\"number\">2.3</span>　反三角运算　</div><div class=\"line\">　　<span class=\"number\">2.3</span><span class=\"number\">.1</span>　asin()/asinf()/asinl()函数：求反正弦值　</div><div class=\"line\">　　<span class=\"number\">2.3</span><span class=\"number\">.2</span>　asinh()/asinhf()/asinhl()函数：求反双曲正弦值　</div><div class=\"line\">　　<span class=\"number\">2.3</span><span class=\"number\">.3</span>　acos()/acosf()/acosl()函数：求反余弦值　</div><div class=\"line\">　　<span class=\"number\">2.3</span><span class=\"number\">.4</span>　acosh()/acoshf()/acoshl()函数：求反双曲余弦值　</div><div class=\"line\">　　<span class=\"number\">2.3</span><span class=\"number\">.5</span>　atan()/atanf()/atanl()函数：求反正切值　</div><div class=\"line\">　　<span class=\"number\">2.3</span><span class=\"number\">.6</span>　atan2()/atan2f()/atanl()函数：求坐标值的反正切值　</div><div class=\"line\">　　<span class=\"number\">2.3</span><span class=\"number\">.7</span>　atanh()/atanhf()/atanhl()函数：求反双曲正切值　</div><div class=\"line\">　　<span class=\"number\">2.4</span>　指数和对数运算　</div><div class=\"line\">　　<span class=\"number\">2.4</span><span class=\"number\">.1</span>　pow()/powf()/powl函数：求n的m次方的值　</div><div class=\"line\">　　<span class=\"number\">2.4</span><span class=\"number\">.2</span>　exp()/expf()/expl()函数：求e的x次方的值　</div><div class=\"line\">　　<span class=\"number\">2.4</span><span class=\"number\">.3</span>　exp2()/exp2f()/exp2l()函数：<span class=\"number\">2</span>的x的次方的值　</div><div class=\"line\">　　<span class=\"number\">2.4</span><span class=\"number\">.4</span>　log()/logf()/logl()函数：求以e为底的对数值　</div><div class=\"line\">　　<span class=\"number\">2.4</span><span class=\"number\">.5</span>　log10()/log10f()/log10l()函数：求以<span class=\"number\">10</span>为底的对数值</div></pre></td></tr></table></figure>"},{"title":"UIAlertController","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n   //初始化方法\n    + (instancetype)alertControllerWithTitle:(nullableNSString *)title message:(nullableNSString *)message preferredStyle:(UIAlertControllerStyle)preferredStyle;\n   \n   //UIAlertControllerStyle\n   typedefNS_ENUM(NSInteger, UIAlertControllerStyle) {\n            UIAlertControllerStyleActionSheet =0,            UIAlertControllerStyleAlert     }\n   /**************自动消失的UIAlertController*********/   //创建UIAlertController\n   UIAlertController*alertController = [UIAlertControlleralertControllerWithTitle:@\"标题\"message:@\"UIAlertController\"preferredStyle:UIAlertControllerStyleAlert];\n\n    [selfpresentViewController:alertControlleranimated:YEScompletion:nil];\n\n   //线程2秒后执行\n   dispatch_after(dispatch_time(DISPATCH_TIME_NOW,\n (int64_t)(2.f*NSEC_PER_SEC)),dispatch_get_main_queue(), ^{\n       \n        [alertControllerdismissViewControllerAnimated:YEScompletion:^{\n           \n           \n        }];\n    });   /**************自动消失的UIAlertController*********/ \n /*\n     ******添加按钮******\n     Title :标题名称\n     style :样式[Cancle(取消)\n Default(默认的) destructive(重置)]\n     handler:处理程序(点击按钮执行的代码)\n     */\n   \n   /**************带按钮的的UIAlertController*********/\n   //创建UIAlertController\n   UIAlertController*alertController = [UIAlertControlleralertControllerWithTitle:@\"标题\"message:@\"UIAlertController\"preferredStyle:UIAlertControllerStyleAlert];\n   \n   //创建\"取消\"样式按钮\n   UIAlertAction*cancelAction = [UIAlertActionactionWithTitle:@\"取消\"style:UIAlertActionStyleCancelhandler:^(UIAlertAction*action) {\n       //添加点击事件\n       self.view.backgroundColor= [UIColoryellowColor];\n       \n    }];\n   \n   //创建\"默认\"样式按钮\n   UIAlertAction*defaultAction = [UIAlertActionactionWithTitle:@\"默认default\"style:UIAlertActionStyleDefaulthandler:^(UIAlertAction*_Nonnullaction) {\n       \n       \n    }];\n   \n   //创建“警示”样式按钮\n   UIAlertAction*destructiveAction = [UIAlertActionactionWithTitle:@\"重置deatructive\" style:UIAlertActionStyleDestructivehandler:^(UIAlertAction*_Nonnullaction) {\n       \n       \n    }];\n\n   //将按钮添加到alertController上\n    [alertControlleraddAction:cancelAction];\n    [alertControlleraddAction:defaultAction];\n    [alertControlleraddAction:destructiveAction];\n\n   \n    [selfpresentViewController:alertControlleranimated:YEScompletion:nil];\n   /**************带按钮的的UIAlertController*********/\n\n\n/**************带输入框的UIAlertController*********/   //创建UIAlertController\n   UIAlertController*alertController = [UIAlertControlleralertControllerWithTitle:@\"文本对话框\"message:@\"登录和密码对话框示例\"preferredStyle:UIAlertControllerStyleAlert];\n   \n   //添加输入框\n    [alertControlleraddTextFieldWithConfigurationHandler:^(UITextField*textField){\n        textField.placeholder=@\"登录\";\n       \n       //添加通知，监听输入框的变化\n        [[NSNotificationCenterdefaultCenter]addObserver:selfselector:@selector(alertTextFieldDidChange:)name:UITextFieldTextDidChangeNotificationobject:textField];\n    }];\n   \n    [alertControlleraddTextFieldWithConfigurationHandler:^(UITextField*textField) {\n        textField.placeholder=@\"密码\";\n        textField.secureTextEntry=YES;\n    }];\n   \n   //添加按钮\n   UIAlertAction*okAction = [UIAlertActionactionWithTitle:@\"好的\"style:UIAlertActionStyleDefaulthandler:^(UIAlertAction*action) {\n       \n       //获取到输入框的内容\n       UITextField*login = alertController.textFields.firstObject;\n       UITextField*password = alertController.textFields.lastObject;\n       \n       //移除通知\n        [[NSNotificationCenterdefaultCenter]removeObserver:selfname:UITextFieldTextDidChangeNotificationobject:nil];\n       \n    }];\n   \n   //冻结按钮\n    okAction.enabled=NO;\n    [alertControlleraddAction:okAction];\n   \n    [selfpresentViewController:alertControlleranimated:YEScompletion:^{\n       \n       \n    }];\n   /**************带输入框的UIAlertController*********/\n}\n//通知触发的方法\n- (void)alertTextFieldDidChange:(NSNotification*)notification{\n   UIAlertController*alertController = (UIAlertController*)self.presentedViewController;\n   \n   if(alertController) {\n       UITextField*login = alertController.textFields.firstObject;\n       UIAlertAction*okAction = alertController.actions.lastObject;\n       \n       //当输入的字数大于2时解冻\n        okAction.enabled= login.text.length>2;\n    }\n}\n","source":"_posts/oc/UIAlertController.md","raw":"---\ntitle: UIAlertController\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n   //初始化方法\n    + (instancetype)alertControllerWithTitle:(nullableNSString *)title message:(nullableNSString *)message preferredStyle:(UIAlertControllerStyle)preferredStyle;\n   \n   //UIAlertControllerStyle\n   typedefNS_ENUM(NSInteger, UIAlertControllerStyle) {\n            UIAlertControllerStyleActionSheet =0,            UIAlertControllerStyleAlert     }\n   /**************自动消失的UIAlertController*********/   //创建UIAlertController\n   UIAlertController*alertController = [UIAlertControlleralertControllerWithTitle:@\"标题\"message:@\"UIAlertController\"preferredStyle:UIAlertControllerStyleAlert];\n\n    [selfpresentViewController:alertControlleranimated:YEScompletion:nil];\n\n   //线程2秒后执行\n   dispatch_after(dispatch_time(DISPATCH_TIME_NOW,\n (int64_t)(2.f*NSEC_PER_SEC)),dispatch_get_main_queue(), ^{\n       \n        [alertControllerdismissViewControllerAnimated:YEScompletion:^{\n           \n           \n        }];\n    });   /**************自动消失的UIAlertController*********/ \n /*\n     ******添加按钮******\n     Title :标题名称\n     style :样式[Cancle(取消)\n Default(默认的) destructive(重置)]\n     handler:处理程序(点击按钮执行的代码)\n     */\n   \n   /**************带按钮的的UIAlertController*********/\n   //创建UIAlertController\n   UIAlertController*alertController = [UIAlertControlleralertControllerWithTitle:@\"标题\"message:@\"UIAlertController\"preferredStyle:UIAlertControllerStyleAlert];\n   \n   //创建\"取消\"样式按钮\n   UIAlertAction*cancelAction = [UIAlertActionactionWithTitle:@\"取消\"style:UIAlertActionStyleCancelhandler:^(UIAlertAction*action) {\n       //添加点击事件\n       self.view.backgroundColor= [UIColoryellowColor];\n       \n    }];\n   \n   //创建\"默认\"样式按钮\n   UIAlertAction*defaultAction = [UIAlertActionactionWithTitle:@\"默认default\"style:UIAlertActionStyleDefaulthandler:^(UIAlertAction*_Nonnullaction) {\n       \n       \n    }];\n   \n   //创建“警示”样式按钮\n   UIAlertAction*destructiveAction = [UIAlertActionactionWithTitle:@\"重置deatructive\" style:UIAlertActionStyleDestructivehandler:^(UIAlertAction*_Nonnullaction) {\n       \n       \n    }];\n\n   //将按钮添加到alertController上\n    [alertControlleraddAction:cancelAction];\n    [alertControlleraddAction:defaultAction];\n    [alertControlleraddAction:destructiveAction];\n\n   \n    [selfpresentViewController:alertControlleranimated:YEScompletion:nil];\n   /**************带按钮的的UIAlertController*********/\n\n\n/**************带输入框的UIAlertController*********/   //创建UIAlertController\n   UIAlertController*alertController = [UIAlertControlleralertControllerWithTitle:@\"文本对话框\"message:@\"登录和密码对话框示例\"preferredStyle:UIAlertControllerStyleAlert];\n   \n   //添加输入框\n    [alertControlleraddTextFieldWithConfigurationHandler:^(UITextField*textField){\n        textField.placeholder=@\"登录\";\n       \n       //添加通知，监听输入框的变化\n        [[NSNotificationCenterdefaultCenter]addObserver:selfselector:@selector(alertTextFieldDidChange:)name:UITextFieldTextDidChangeNotificationobject:textField];\n    }];\n   \n    [alertControlleraddTextFieldWithConfigurationHandler:^(UITextField*textField) {\n        textField.placeholder=@\"密码\";\n        textField.secureTextEntry=YES;\n    }];\n   \n   //添加按钮\n   UIAlertAction*okAction = [UIAlertActionactionWithTitle:@\"好的\"style:UIAlertActionStyleDefaulthandler:^(UIAlertAction*action) {\n       \n       //获取到输入框的内容\n       UITextField*login = alertController.textFields.firstObject;\n       UITextField*password = alertController.textFields.lastObject;\n       \n       //移除通知\n        [[NSNotificationCenterdefaultCenter]removeObserver:selfname:UITextFieldTextDidChangeNotificationobject:nil];\n       \n    }];\n   \n   //冻结按钮\n    okAction.enabled=NO;\n    [alertControlleraddAction:okAction];\n   \n    [selfpresentViewController:alertControlleranimated:YEScompletion:^{\n       \n       \n    }];\n   /**************带输入框的UIAlertController*********/\n}\n//通知触发的方法\n- (void)alertTextFieldDidChange:(NSNotification*)notification{\n   UIAlertController*alertController = (UIAlertController*)self.presentedViewController;\n   \n   if(alertController) {\n       UITextField*login = alertController.textFields.firstObject;\n       UIAlertAction*okAction = alertController.actions.lastObject;\n       \n       //当输入的字数大于2时解冻\n        okAction.enabled= login.text.length>2;\n    }\n}\n","slug":"oc/UIAlertController","published":1,"updated":"2016-10-08T09:43:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms978001a21xw7rrbuhqm","content":"<a id=\"more\"></a>\n<p>   //初始化方法</p>\n<pre><code>+ (instancetype)alertControllerWithTitle:(nullableNSString *)title message:(nullableNSString *)message preferredStyle:(UIAlertControllerStyle)preferredStyle;\n</code></pre><p>   //UIAlertControllerStyle<br>   typedefNS_ENUM(NSInteger, UIAlertControllerStyle) {<br>            UIAlertControllerStyleActionSheet =0,            UIAlertControllerStyleAlert     }<br>   /<strong><strong><strong>**</strong></strong></strong>自动消失的UIAlertController<strong><strong>*</strong></strong>/   //创建UIAlertController<br>   UIAlertController*alertController = [UIAlertControlleralertControllerWithTitle:@”标题”message:@”UIAlertController”preferredStyle:UIAlertControllerStyleAlert];</p>\n<pre><code>[selfpresentViewController:alertControlleranimated:YEScompletion:nil];\n</code></pre><p>   //线程2秒后执行<br>   dispatch_after(dispatch_time(DISPATCH_TIME_NOW,<br> (int64_t)(2.f*NSEC_PER_SEC)),dispatch_get_main_queue(), ^{</p>\n<pre><code>    [alertControllerdismissViewControllerAnimated:YEScompletion:^{\n\n\n    }];\n});   /**************自动消失的UIAlertController*********/ \n</code></pre><p> /<em><br>     <strong>**</strong>添加按钮<strong>**</strong><br>     Title :标题名称<br>     style :样式[Cancle(取消)<br> Default(默认的) destructive(重置)]<br>     handler:处理程序(点击按钮执行的代码)\n     </em>/</p>\n<p>   /<strong><strong><strong>**</strong></strong></strong>带按钮的的UIAlertController<strong><strong>*</strong></strong>/<br>   //创建UIAlertController<br>   UIAlertController*alertController = [UIAlertControlleralertControllerWithTitle:@”标题”message:@”UIAlertController”preferredStyle:UIAlertControllerStyleAlert];</p>\n<p>   //创建”取消”样式按钮<br>   UIAlertAction<em>cancelAction = [UIAlertActionactionWithTitle:@”取消”style:UIAlertActionStyleCancelhandler:^(UIAlertAction</em>action) {<br>       //添加点击事件<br>       self.view.backgroundColor= [UIColoryellowColor];</p>\n<pre><code>}];\n</code></pre><p>   //创建”默认”样式按钮<br>   UIAlertAction<em>defaultAction = [UIAlertActionactionWithTitle:@”默认default”style:UIAlertActionStyleDefaulthandler:^(UIAlertAction</em>_Nonnullaction) {</p>\n<pre><code>}];\n</code></pre><p>   //创建“警示”样式按钮<br>   UIAlertAction<em>destructiveAction = [UIAlertActionactionWithTitle:@”重置deatructive” style:UIAlertActionStyleDestructivehandler:^(UIAlertAction</em>_Nonnullaction) {</p>\n<pre><code>}];\n</code></pre><p>   //将按钮添加到alertController上<br>    [alertControlleraddAction:cancelAction];<br>    [alertControlleraddAction:defaultAction];<br>    [alertControlleraddAction:destructiveAction];</p>\n<pre><code>[selfpresentViewController:alertControlleranimated:YEScompletion:nil];\n</code></pre><p>   /<strong><strong><strong>**</strong></strong></strong>带按钮的的UIAlertController<strong><strong>*</strong></strong>/</p>\n<p>/<strong><strong><strong>**</strong></strong></strong>带输入框的UIAlertController<strong><strong>*</strong></strong>/   //创建UIAlertController<br>   UIAlertController*alertController = [UIAlertControlleralertControllerWithTitle:@”文本对话框”message:@”登录和密码对话框示例”preferredStyle:UIAlertControllerStyleAlert];</p>\n<p>   //添加输入框<br>    [alertControlleraddTextFieldWithConfigurationHandler:^(UITextField*textField){<br>        textField.placeholder=@”登录”;</p>\n<pre><code>   //添加通知，监听输入框的变化\n    [[NSNotificationCenterdefaultCenter]addObserver:selfselector:@selector(alertTextFieldDidChange:)name:UITextFieldTextDidChangeNotificationobject:textField];\n}];\n\n[alertControlleraddTextFieldWithConfigurationHandler:^(UITextField*textField) {\n    textField.placeholder=@&quot;密码&quot;;\n    textField.secureTextEntry=YES;\n}];\n</code></pre><p>   //添加按钮<br>   UIAlertAction<em>okAction = [UIAlertActionactionWithTitle:@”好的”style:UIAlertActionStyleDefaulthandler:^(UIAlertAction</em>action) {</p>\n<pre><code>   //获取到输入框的内容\n   UITextField*login = alertController.textFields.firstObject;\n   UITextField*password = alertController.textFields.lastObject;\n\n   //移除通知\n    [[NSNotificationCenterdefaultCenter]removeObserver:selfname:UITextFieldTextDidChangeNotificationobject:nil];\n\n}];\n</code></pre><p>   //冻结按钮<br>    okAction.enabled=NO;<br>    [alertControlleraddAction:okAction];</p>\n<pre><code>[selfpresentViewController:alertControlleranimated:YEScompletion:^{\n\n\n}];\n</code></pre><p>   /<strong><strong><strong>**</strong></strong></strong>带输入框的UIAlertController<strong><strong>*</strong></strong>/<br>}<br>//通知触发的方法</p>\n<ul>\n<li><p>(void)alertTextFieldDidChange:(NSNotification<em>)notification{<br> UIAlertController</em>alertController = (UIAlertController*)self.presentedViewController;</p>\n<p> if(alertController) {</p>\n<pre><code>UITextField*login = alertController.textFields.firstObject;\nUIAlertAction*okAction = alertController.actions.lastObject;\n\n//当输入的字数大于2时解冻\n okAction.enabled= login.text.length&gt;2;\n</code></pre><p>  }<br>}</p>\n</li>\n</ul>\n","excerpt":"","more":"<p>   //初始化方法</p>\n<pre><code>+ (instancetype)alertControllerWithTitle:(nullableNSString *)title message:(nullableNSString *)message preferredStyle:(UIAlertControllerStyle)preferredStyle;\n</code></pre><p>   //UIAlertControllerStyle<br>   typedefNS_ENUM(NSInteger, UIAlertControllerStyle) {<br>            UIAlertControllerStyleActionSheet =0,            UIAlertControllerStyleAlert     }<br>   /<strong><strong><strong>**</strong></strong></strong>自动消失的UIAlertController<strong><strong>*</strong></strong>/   //创建UIAlertController<br>   UIAlertController*alertController = [UIAlertControlleralertControllerWithTitle:@”标题”message:@”UIAlertController”preferredStyle:UIAlertControllerStyleAlert];</p>\n<pre><code>[selfpresentViewController:alertControlleranimated:YEScompletion:nil];\n</code></pre><p>   //线程2秒后执行<br>   dispatch_after(dispatch_time(DISPATCH_TIME_NOW,<br> (int64_t)(2.f*NSEC_PER_SEC)),dispatch_get_main_queue(), ^{</p>\n<pre><code>    [alertControllerdismissViewControllerAnimated:YEScompletion:^{\n\n\n    }];\n});   /**************自动消失的UIAlertController*********/ \n</code></pre><p> /<em><br>     <strong>**</strong>添加按钮<strong>**</strong><br>     Title :标题名称<br>     style :样式[Cancle(取消)<br> Default(默认的) destructive(重置)]<br>     handler:处理程序(点击按钮执行的代码)\n     </em>/</p>\n<p>   /<strong><strong><strong>**</strong></strong></strong>带按钮的的UIAlertController<strong><strong>*</strong></strong>/<br>   //创建UIAlertController<br>   UIAlertController*alertController = [UIAlertControlleralertControllerWithTitle:@”标题”message:@”UIAlertController”preferredStyle:UIAlertControllerStyleAlert];</p>\n<p>   //创建”取消”样式按钮<br>   UIAlertAction<em>cancelAction = [UIAlertActionactionWithTitle:@”取消”style:UIAlertActionStyleCancelhandler:^(UIAlertAction</em>action) {<br>       //添加点击事件<br>       self.view.backgroundColor= [UIColoryellowColor];</p>\n<pre><code>}];\n</code></pre><p>   //创建”默认”样式按钮<br>   UIAlertAction<em>defaultAction = [UIAlertActionactionWithTitle:@”默认default”style:UIAlertActionStyleDefaulthandler:^(UIAlertAction</em>_Nonnullaction) {</p>\n<pre><code>}];\n</code></pre><p>   //创建“警示”样式按钮<br>   UIAlertAction<em>destructiveAction = [UIAlertActionactionWithTitle:@”重置deatructive” style:UIAlertActionStyleDestructivehandler:^(UIAlertAction</em>_Nonnullaction) {</p>\n<pre><code>}];\n</code></pre><p>   //将按钮添加到alertController上<br>    [alertControlleraddAction:cancelAction];<br>    [alertControlleraddAction:defaultAction];<br>    [alertControlleraddAction:destructiveAction];</p>\n<pre><code>[selfpresentViewController:alertControlleranimated:YEScompletion:nil];\n</code></pre><p>   /<strong><strong><strong>**</strong></strong></strong>带按钮的的UIAlertController<strong><strong>*</strong></strong>/</p>\n<p>/<strong><strong><strong>**</strong></strong></strong>带输入框的UIAlertController<strong><strong>*</strong></strong>/   //创建UIAlertController<br>   UIAlertController*alertController = [UIAlertControlleralertControllerWithTitle:@”文本对话框”message:@”登录和密码对话框示例”preferredStyle:UIAlertControllerStyleAlert];</p>\n<p>   //添加输入框<br>    [alertControlleraddTextFieldWithConfigurationHandler:^(UITextField*textField){<br>        textField.placeholder=@”登录”;</p>\n<pre><code>   //添加通知，监听输入框的变化\n    [[NSNotificationCenterdefaultCenter]addObserver:selfselector:@selector(alertTextFieldDidChange:)name:UITextFieldTextDidChangeNotificationobject:textField];\n}];\n\n[alertControlleraddTextFieldWithConfigurationHandler:^(UITextField*textField) {\n    textField.placeholder=@&quot;密码&quot;;\n    textField.secureTextEntry=YES;\n}];\n</code></pre><p>   //添加按钮<br>   UIAlertAction<em>okAction = [UIAlertActionactionWithTitle:@”好的”style:UIAlertActionStyleDefaulthandler:^(UIAlertAction</em>action) {</p>\n<pre><code>   //获取到输入框的内容\n   UITextField*login = alertController.textFields.firstObject;\n   UITextField*password = alertController.textFields.lastObject;\n\n   //移除通知\n    [[NSNotificationCenterdefaultCenter]removeObserver:selfname:UITextFieldTextDidChangeNotificationobject:nil];\n\n}];\n</code></pre><p>   //冻结按钮<br>    okAction.enabled=NO;<br>    [alertControlleraddAction:okAction];</p>\n<pre><code>[selfpresentViewController:alertControlleranimated:YEScompletion:^{\n\n\n}];\n</code></pre><p>   /<strong><strong><strong>**</strong></strong></strong>带输入框的UIAlertController<strong><strong>*</strong></strong>/<br>}<br>//通知触发的方法</p>\n<ul>\n<li><p>(void)alertTextFieldDidChange:(NSNotification<em>)notification{<br> UIAlertController</em>alertController = (UIAlertController*)self.presentedViewController;</p>\n<p> if(alertController) {</p>\n<pre><code>UITextField*login = alertController.textFields.firstObject;\nUIAlertAction*okAction = alertController.actions.lastObject;\n\n//当输入的字数大于2时解冻\n okAction.enabled= login.text.length&gt;2;\n</code></pre><p>  }<br>}</p>\n</li>\n</ul>"},{"title":"UIBarMetrics","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\nforBarMetrics有点类似于按钮的for state状态，即什么状态下显示\n\n    //UIBarMetricsDefault-竖屏横屏都有，横屏导航条变宽，则自动repeat图片\n\n    //UIBarMetricsCompact-竖屏没有，横屏有，相当于之前老iOS版本里地UIBarMetricsLandscapePhone\n\n    //UIBarMetricsCompactPrompt和UIBarMetricsDefaultPrompt暂时不知道用处，官方解释是Applicable only in bars with the prompt property, such as UINavigationBar and UISearchBar，\n```\n\n","source":"_posts/oc/UIBarMetrics.md","raw":"---\ntitle: UIBarMetrics\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\nforBarMetrics有点类似于按钮的for state状态，即什么状态下显示\n\n    //UIBarMetricsDefault-竖屏横屏都有，横屏导航条变宽，则自动repeat图片\n\n    //UIBarMetricsCompact-竖屏没有，横屏有，相当于之前老iOS版本里地UIBarMetricsLandscapePhone\n\n    //UIBarMetricsCompactPrompt和UIBarMetricsDefaultPrompt暂时不知道用处，官方解释是Applicable only in bars with the prompt property, such as UINavigationBar and UISearchBar，\n```\n\n","slug":"oc/UIBarMetrics","published":1,"updated":"2016-10-08T09:07:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms979001c21xwf71778be","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">forBarMetrics有点类似于按钮的<span class=\"keyword\">for</span> state状态，即什么状态下显示</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//UIBarMetricsDefault-竖屏横屏都有，横屏导航条变宽，则自动repeat图片</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//UIBarMetricsCompact-竖屏没有，横屏有，相当于之前老iOS版本里地UIBarMetricsLandscapePhone</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//UIBarMetricsCompactPrompt和UIBarMetricsDefaultPrompt暂时不知道用处，官方解释是Applicable only in bars with the prompt property, such as UINavigationBar and UISearchBar，</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">forBarMetrics有点类似于按钮的<span class=\"keyword\">for</span> state状态，即什么状态下显示</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//UIBarMetricsDefault-竖屏横屏都有，横屏导航条变宽，则自动repeat图片</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//UIBarMetricsCompact-竖屏没有，横屏有，相当于之前老iOS版本里地UIBarMetricsLandscapePhone</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//UIBarMetricsCompactPrompt和UIBarMetricsDefaultPrompt暂时不知道用处，官方解释是Applicable only in bars with the prompt property, such as UINavigationBar and UISearchBar，</span></div></pre></td></tr></table></figure>"},{"title":"UIColor和TintColor","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n前者是指颜色，tint是指着色，色调。\n通过tintColor属性可以定制UINavigationBar的背景颜色，但如果需要设定渐变色、甚至纹理来说，就需要贴图了。比较“暴力”的一种做法就是通过Category来重新实现- (void)\n drawRect:(CGRect)rect的实现，“暴力”是因为这种杀伤面很广，所有项目内的UINavigationBar都会因此改变。\n","source":"_posts/oc/UIColor和TintColor.md","raw":"---\ntitle: UIColor和TintColor\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n前者是指颜色，tint是指着色，色调。\n通过tintColor属性可以定制UINavigationBar的背景颜色，但如果需要设定渐变色、甚至纹理来说，就需要贴图了。比较“暴力”的一种做法就是通过Category来重新实现- (void)\n drawRect:(CGRect)rect的实现，“暴力”是因为这种杀伤面很广，所有项目内的UINavigationBar都会因此改变。\n","slug":"oc/UIColor和TintColor","published":1,"updated":"2016-10-08T09:19:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97a001e21xwp8osz8ax","content":"<a id=\"more\"></a>\n<p>前者是指颜色，tint是指着色，色调。<br>通过tintColor属性可以定制UINavigationBar的背景颜色，但如果需要设定渐变色、甚至纹理来说，就需要贴图了。比较“暴力”的一种做法就是通过Category来重新实现- (void)<br> drawRect:(CGRect)rect的实现，“暴力”是因为这种杀伤面很广，所有项目内的UINavigationBar都会因此改变。</p>\n","excerpt":"","more":"<p>前者是指颜色，tint是指着色，色调。<br>通过tintColor属性可以定制UINavigationBar的背景颜色，但如果需要设定渐变色、甚至纹理来说，就需要贴图了。比较“暴力”的一种做法就是通过Category来重新实现- (void)<br> drawRect:(CGRect)rect的实现，“暴力”是因为这种杀伤面很广，所有项目内的UINavigationBar都会因此改变。</p>"},{"title":"UIBlurEffect系统自带毛玻璃效果","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n   //需要模糊效果的view\n   UIImageView*i = [[UIImageViewalloc]initWithFrame:CGRectMake(100,100,100,200)];\n    [self.viewaddSubview:i];\n    i.image= [UIImageimageNamed:@\"1\"];\n   \n   //创建UIBlurEffect\n   UIBlurEffect*blurEffect = [UIBlurEffecteffectWithStyle:UIBlurEffectStyleLight];\n\n   //UIVisualEffectView\n   UIVisualEffectView*effectView = [[UIVisualEffectViewalloc]initWithEffect:blurEffect];   //设置模糊效果的frame    effectView.frame = i.bounds;   //添加到view上    [iaddSubview:effectView];    //设置模糊的程度    effectView.alpha =.5f;\ntypedefNS_ENUM(NSInteger, UIBlurEffectStyle) {    UIBlurEffectStyleExtraLight,    UIBlurEffectStyleLight,\n    UIBlurEffectStyleDark}","source":"_posts/oc/UIBlurEffect系统自带毛玻璃效果.md","raw":"---\ntitle: UIBlurEffect系统自带毛玻璃效果\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n   //需要模糊效果的view\n   UIImageView*i = [[UIImageViewalloc]initWithFrame:CGRectMake(100,100,100,200)];\n    [self.viewaddSubview:i];\n    i.image= [UIImageimageNamed:@\"1\"];\n   \n   //创建UIBlurEffect\n   UIBlurEffect*blurEffect = [UIBlurEffecteffectWithStyle:UIBlurEffectStyleLight];\n\n   //UIVisualEffectView\n   UIVisualEffectView*effectView = [[UIVisualEffectViewalloc]initWithEffect:blurEffect];   //设置模糊效果的frame    effectView.frame = i.bounds;   //添加到view上    [iaddSubview:effectView];    //设置模糊的程度    effectView.alpha =.5f;\ntypedefNS_ENUM(NSInteger, UIBlurEffectStyle) {    UIBlurEffectStyleExtraLight,    UIBlurEffectStyleLight,\n    UIBlurEffectStyleDark}","slug":"oc/UIBlurEffect系统自带毛玻璃效果","published":1,"updated":"2016-10-08T09:00:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97d001g21xwbfswvr40","content":"<a id=\"more\"></a>\n<p>```objc<br>   //需要模糊效果的view<br>   UIImageView*i = [[UIImageViewalloc]initWithFrame:CGRectMake(100,100,100,200)];<br>    [self.viewaddSubview:i];<br>    i.image= [UIImageimageNamed:@”1”];</p>\n<p>   //创建UIBlurEffect<br>   UIBlurEffect*blurEffect = [UIBlurEffecteffectWithStyle:UIBlurEffectStyleLight];</p>\n<p>   //UIVisualEffectView<br>   UIVisualEffectView*effectView = [[UIVisualEffectViewalloc]initWithEffect:blurEffect];   //设置模糊效果的frame    effectView.frame = i.bounds;   //添加到view上    [iaddSubview:effectView];    //设置模糊的程度    effectView.alpha =.5f;<br>typedefNS_ENUM(NSInteger, UIBlurEffectStyle) {    UIBlurEffectStyleExtraLight,    UIBlurEffectStyleLight,<br>    UIBlurEffectStyleDark}</p>\n","excerpt":"","more":"<p>```objc<br>   //需要模糊效果的view<br>   UIImageView*i = [[UIImageViewalloc]initWithFrame:CGRectMake(100,100,100,200)];<br>    [self.viewaddSubview:i];<br>    i.image= [UIImageimageNamed:@”1”];</p>\n<p>   //创建UIBlurEffect<br>   UIBlurEffect*blurEffect = [UIBlurEffecteffectWithStyle:UIBlurEffectStyleLight];</p>\n<p>   //UIVisualEffectView<br>   UIVisualEffectView*effectView = [[UIVisualEffectViewalloc]initWithEffect:blurEffect];   //设置模糊效果的frame    effectView.frame = i.bounds;   //添加到view上    [iaddSubview:effectView];    //设置模糊的程度    effectView.alpha =.5f;<br>typedefNS_ENUM(NSInteger, UIBlurEffectStyle) {    UIBlurEffectStyleExtraLight,    UIBlurEffectStyleLight,<br>    UIBlurEffectStyleDark}</p>"},{"title":"UIControlEvents","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\nUIControlEventstypedefNS_OPTIONS(NSUInteger,\n UIControlEvents) {    UIControlEventTouchDown           =1<< 0,     // on all touch downs\n    UIControlEventTouchDownRepeat     =1<< 1,     // on multiple touchdowns (tap count > 1)\n    UIControlEventTouchDragInside     =1<< 2,\n    UIControlEventTouchDragOutside    =1<< 3,\n    UIControlEventTouchDragEnter      =1<< 4,\n    UIControlEventTouchDragExit       =1<< 5,\n    UIControlEventTouchUpInside       =1<< 6,\n    UIControlEventTouchUpOutside      =1<< 7,\n    UIControlEventTouchCancel         =1<< 8,\n\n    UIControlEventValueChanged        =1<<12,    // sliders, etc.\n\n    UIControlEventEditingDidBegin     =1<<16,    // UITextField\n    UIControlEventEditingChanged      =1<<17,\n    UIControlEventEditingDidEnd       =1<<18,\n    UIControlEventEditingDidEndOnExit =1<<19,    // 'return key' ending editing\n\n    UIControlEventAllTouchEvents      =0x00000FFF, // for touch events\n    UIControlEventAllEditingEvents    =0x000F0000, // for UITextField\n    UIControlEventApplicationReserved =0x0F000000, // range available for application use\n    UIControlEventSystemReserved      =0xF0000000, // range reserved for internal framework use\n    UIControlEventAllEvents           =0xFFFFFFFF};/*\n UIControlEventTouchDown 单点触摸按下事件：用户点触屏幕，或者又有新手指落下的时候。\n UIControlEventTouchDownRepeat 多点触摸按下事件，点触计数大于1：用户按下第二、三、或第四根手指的时候。\n UIControlEventTouchDragInside 当一次触摸在控件窗口内拖动时。\n UIControlEventTouchDragOutside 当一次触摸在控件窗口之外拖动时。\n UIControlEventTouchDragEnter 当一次触摸从控件窗口之外拖动到内部时。\n UIControlEventTouchDragExit\n 当一次触摸从控件窗口内部拖动到外部时。\n \n UIControlEventTouchUpInside 所有在控件之内触摸抬起事件。\n UIControlEventTouchUpOutside 所有在控件之外触摸抬起事件(点触必须开始与控件内部才会发送通知)。\n UIControlEventTouchCancel 所有触摸取消事件，即一次触摸因为放上了太多手指而被取消，或者被上锁或者电话呼叫打断。\n UIControlEventTouchChanged 当控件的值发生改变时，发送通知。用于滑块、分段控件、以及其他取值的控件。你可以配置滑块控件何时发送通知，在滑块被放下时发送，或者在被拖动时发送。\n UIControlEventEditingDidBegin 当文本控件中开始编辑时发送通知。\n UIControlEventEditingChanged 当文本控件中的文本被改变时发送通知。\n UIControlEventEditingDidEnd 当文本控件中编辑结束时发送通知。\n UIControlEventEditingDidOnExit 当文本控件内通过按下回车键（或等价行为）结束编辑时，发送通知。\n UIControlEventAlltouchEvents 通知所有触摸事件。\n UIControlEventAllEditingEvents 通知所有关于文本编辑的事件。\n UIControlEventAllEvents\n 通知所有事件。\n       */\n```","source":"_posts/oc/UIControlEvents.md","raw":"---\ntitle: UIControlEvents\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\nUIControlEventstypedefNS_OPTIONS(NSUInteger,\n UIControlEvents) {    UIControlEventTouchDown           =1<< 0,     // on all touch downs\n    UIControlEventTouchDownRepeat     =1<< 1,     // on multiple touchdowns (tap count > 1)\n    UIControlEventTouchDragInside     =1<< 2,\n    UIControlEventTouchDragOutside    =1<< 3,\n    UIControlEventTouchDragEnter      =1<< 4,\n    UIControlEventTouchDragExit       =1<< 5,\n    UIControlEventTouchUpInside       =1<< 6,\n    UIControlEventTouchUpOutside      =1<< 7,\n    UIControlEventTouchCancel         =1<< 8,\n\n    UIControlEventValueChanged        =1<<12,    // sliders, etc.\n\n    UIControlEventEditingDidBegin     =1<<16,    // UITextField\n    UIControlEventEditingChanged      =1<<17,\n    UIControlEventEditingDidEnd       =1<<18,\n    UIControlEventEditingDidEndOnExit =1<<19,    // 'return key' ending editing\n\n    UIControlEventAllTouchEvents      =0x00000FFF, // for touch events\n    UIControlEventAllEditingEvents    =0x000F0000, // for UITextField\n    UIControlEventApplicationReserved =0x0F000000, // range available for application use\n    UIControlEventSystemReserved      =0xF0000000, // range reserved for internal framework use\n    UIControlEventAllEvents           =0xFFFFFFFF};/*\n UIControlEventTouchDown 单点触摸按下事件：用户点触屏幕，或者又有新手指落下的时候。\n UIControlEventTouchDownRepeat 多点触摸按下事件，点触计数大于1：用户按下第二、三、或第四根手指的时候。\n UIControlEventTouchDragInside 当一次触摸在控件窗口内拖动时。\n UIControlEventTouchDragOutside 当一次触摸在控件窗口之外拖动时。\n UIControlEventTouchDragEnter 当一次触摸从控件窗口之外拖动到内部时。\n UIControlEventTouchDragExit\n 当一次触摸从控件窗口内部拖动到外部时。\n \n UIControlEventTouchUpInside 所有在控件之内触摸抬起事件。\n UIControlEventTouchUpOutside 所有在控件之外触摸抬起事件(点触必须开始与控件内部才会发送通知)。\n UIControlEventTouchCancel 所有触摸取消事件，即一次触摸因为放上了太多手指而被取消，或者被上锁或者电话呼叫打断。\n UIControlEventTouchChanged 当控件的值发生改变时，发送通知。用于滑块、分段控件、以及其他取值的控件。你可以配置滑块控件何时发送通知，在滑块被放下时发送，或者在被拖动时发送。\n UIControlEventEditingDidBegin 当文本控件中开始编辑时发送通知。\n UIControlEventEditingChanged 当文本控件中的文本被改变时发送通知。\n UIControlEventEditingDidEnd 当文本控件中编辑结束时发送通知。\n UIControlEventEditingDidOnExit 当文本控件内通过按下回车键（或等价行为）结束编辑时，发送通知。\n UIControlEventAlltouchEvents 通知所有触摸事件。\n UIControlEventAllEditingEvents 通知所有关于文本编辑的事件。\n UIControlEventAllEvents\n 通知所有事件。\n       */\n```","slug":"oc/UIControlEvents","published":1,"updated":"2016-10-08T06:08:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97e001i21xwvbfvo9vg","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIControlEventstypedefNS_OPTIONS</span>(<span class=\"built_in\">NSUInteger</span>,</div><div class=\"line\"> <span class=\"built_in\">UIControlEvents</span>) &#123;    <span class=\"built_in\">UIControlEventTouchDown</span>           =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">0</span>,     <span class=\"comment\">// on all touch downs</span></div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchDownRepeat</span>     =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">1</span>,     <span class=\"comment\">// on multiple touchdowns (tap count &gt; 1)</span></div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchDragInside</span>     =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchDragOutside</span>    =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchDragEnter</span>      =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">4</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchDragExit</span>       =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">5</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchUpInside</span>       =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">6</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchUpOutside</span>      =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">7</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchCancel</span>         =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">8</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">UIControlEventValueChanged</span>        =<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">12</span>,    <span class=\"comment\">// sliders, etc.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">UIControlEventEditingDidBegin</span>     =<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">16</span>,    <span class=\"comment\">// UITextField</span></div><div class=\"line\">    <span class=\"built_in\">UIControlEventEditingChanged</span>      =<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">17</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventEditingDidEnd</span>       =<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">18</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventEditingDidEndOnExit</span> =<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">19</span>,    <span class=\"comment\">// 'return key' ending editing</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">UIControlEventAllTouchEvents</span>      =<span class=\"number\">0x00000FFF</span>, <span class=\"comment\">// for touch events</span></div><div class=\"line\">    <span class=\"built_in\">UIControlEventAllEditingEvents</span>    =<span class=\"number\">0x000F0000</span>, <span class=\"comment\">// for UITextField</span></div><div class=\"line\">    <span class=\"built_in\">UIControlEventApplicationReserved</span> =<span class=\"number\">0x0F000000</span>, <span class=\"comment\">// range available for application use</span></div><div class=\"line\">    <span class=\"built_in\">UIControlEventSystemReserved</span>      =<span class=\"number\">0xF0000000</span>, <span class=\"comment\">// range reserved for internal framework use</span></div><div class=\"line\">    <span class=\"built_in\">UIControlEventAllEvents</span>           =<span class=\"number\">0xFFFFFFFF</span>&#125;;<span class=\"comment\">/*</span></div><div class=\"line\"> UIControlEventTouchDown 单点触摸按下事件：用户点触屏幕，或者又有新手指落下的时候。</div><div class=\"line\"> UIControlEventTouchDownRepeat 多点触摸按下事件，点触计数大于1：用户按下第二、三、或第四根手指的时候。</div><div class=\"line\"> UIControlEventTouchDragInside 当一次触摸在控件窗口内拖动时。</div><div class=\"line\"> UIControlEventTouchDragOutside 当一次触摸在控件窗口之外拖动时。</div><div class=\"line\"> UIControlEventTouchDragEnter 当一次触摸从控件窗口之外拖动到内部时。</div><div class=\"line\"> UIControlEventTouchDragExit</div><div class=\"line\"> 当一次触摸从控件窗口内部拖动到外部时。</div><div class=\"line\"> </div><div class=\"line\"> UIControlEventTouchUpInside 所有在控件之内触摸抬起事件。</div><div class=\"line\"> UIControlEventTouchUpOutside 所有在控件之外触摸抬起事件(点触必须开始与控件内部才会发送通知)。</div><div class=\"line\"> UIControlEventTouchCancel 所有触摸取消事件，即一次触摸因为放上了太多手指而被取消，或者被上锁或者电话呼叫打断。</div><div class=\"line\"> UIControlEventTouchChanged 当控件的值发生改变时，发送通知。用于滑块、分段控件、以及其他取值的控件。你可以配置滑块控件何时发送通知，在滑块被放下时发送，或者在被拖动时发送。</div><div class=\"line\"> UIControlEventEditingDidBegin 当文本控件中开始编辑时发送通知。</div><div class=\"line\"> UIControlEventEditingChanged 当文本控件中的文本被改变时发送通知。</div><div class=\"line\"> UIControlEventEditingDidEnd 当文本控件中编辑结束时发送通知。</div><div class=\"line\"> UIControlEventEditingDidOnExit 当文本控件内通过按下回车键（或等价行为）结束编辑时，发送通知。</div><div class=\"line\"> UIControlEventAlltouchEvents 通知所有触摸事件。</div><div class=\"line\"> UIControlEventAllEditingEvents 通知所有关于文本编辑的事件。</div><div class=\"line\"> UIControlEventAllEvents</div><div class=\"line\"> 通知所有事件。</div><div class=\"line\">       */</div></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIControlEventstypedefNS_OPTIONS</span>(<span class=\"built_in\">NSUInteger</span>,</div><div class=\"line\"> <span class=\"built_in\">UIControlEvents</span>) &#123;    <span class=\"built_in\">UIControlEventTouchDown</span>           =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">0</span>,     <span class=\"comment\">// on all touch downs</span></div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchDownRepeat</span>     =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">1</span>,     <span class=\"comment\">// on multiple touchdowns (tap count &gt; 1)</span></div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchDragInside</span>     =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchDragOutside</span>    =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchDragEnter</span>      =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">4</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchDragExit</span>       =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">5</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchUpInside</span>       =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">6</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchUpOutside</span>      =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">7</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventTouchCancel</span>         =<span class=\"number\">1</span>&lt;&lt; <span class=\"number\">8</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">UIControlEventValueChanged</span>        =<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">12</span>,    <span class=\"comment\">// sliders, etc.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">UIControlEventEditingDidBegin</span>     =<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">16</span>,    <span class=\"comment\">// UITextField</span></div><div class=\"line\">    <span class=\"built_in\">UIControlEventEditingChanged</span>      =<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">17</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventEditingDidEnd</span>       =<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">18</span>,</div><div class=\"line\">    <span class=\"built_in\">UIControlEventEditingDidEndOnExit</span> =<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">19</span>,    <span class=\"comment\">// 'return key' ending editing</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">UIControlEventAllTouchEvents</span>      =<span class=\"number\">0x00000FFF</span>, <span class=\"comment\">// for touch events</span></div><div class=\"line\">    <span class=\"built_in\">UIControlEventAllEditingEvents</span>    =<span class=\"number\">0x000F0000</span>, <span class=\"comment\">// for UITextField</span></div><div class=\"line\">    <span class=\"built_in\">UIControlEventApplicationReserved</span> =<span class=\"number\">0x0F000000</span>, <span class=\"comment\">// range available for application use</span></div><div class=\"line\">    <span class=\"built_in\">UIControlEventSystemReserved</span>      =<span class=\"number\">0xF0000000</span>, <span class=\"comment\">// range reserved for internal framework use</span></div><div class=\"line\">    <span class=\"built_in\">UIControlEventAllEvents</span>           =<span class=\"number\">0xFFFFFFFF</span>&#125;;<span class=\"comment\">/*</div><div class=\"line\"> UIControlEventTouchDown 单点触摸按下事件：用户点触屏幕，或者又有新手指落下的时候。</div><div class=\"line\"> UIControlEventTouchDownRepeat 多点触摸按下事件，点触计数大于1：用户按下第二、三、或第四根手指的时候。</div><div class=\"line\"> UIControlEventTouchDragInside 当一次触摸在控件窗口内拖动时。</div><div class=\"line\"> UIControlEventTouchDragOutside 当一次触摸在控件窗口之外拖动时。</div><div class=\"line\"> UIControlEventTouchDragEnter 当一次触摸从控件窗口之外拖动到内部时。</div><div class=\"line\"> UIControlEventTouchDragExit</div><div class=\"line\"> 当一次触摸从控件窗口内部拖动到外部时。</div><div class=\"line\"> </div><div class=\"line\"> UIControlEventTouchUpInside 所有在控件之内触摸抬起事件。</div><div class=\"line\"> UIControlEventTouchUpOutside 所有在控件之外触摸抬起事件(点触必须开始与控件内部才会发送通知)。</div><div class=\"line\"> UIControlEventTouchCancel 所有触摸取消事件，即一次触摸因为放上了太多手指而被取消，或者被上锁或者电话呼叫打断。</div><div class=\"line\"> UIControlEventTouchChanged 当控件的值发生改变时，发送通知。用于滑块、分段控件、以及其他取值的控件。你可以配置滑块控件何时发送通知，在滑块被放下时发送，或者在被拖动时发送。</div><div class=\"line\"> UIControlEventEditingDidBegin 当文本控件中开始编辑时发送通知。</div><div class=\"line\"> UIControlEventEditingChanged 当文本控件中的文本被改变时发送通知。</div><div class=\"line\"> UIControlEventEditingDidEnd 当文本控件中编辑结束时发送通知。</div><div class=\"line\"> UIControlEventEditingDidOnExit 当文本控件内通过按下回车键（或等价行为）结束编辑时，发送通知。</div><div class=\"line\"> UIControlEventAlltouchEvents 通知所有触摸事件。</div><div class=\"line\"> UIControlEventAllEditingEvents 通知所有关于文本编辑的事件。</div><div class=\"line\"> UIControlEventAllEvents</div><div class=\"line\"> 通知所有事件。</div><div class=\"line\">       */</span></div></pre></td></tr></table></figure>"},{"title":"UIDatePicker","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\nself.datePicker = [[UIDatePicker alloc]initWithFrame:CGRectMake(0, 200, 375, 267)];\n   \n    self.datePicker.backgroundColor = [UIColor whiteColor];\n   \n    //设置地区\n    self.datePicker.locale = [[NSLocale alloc]initWithLocaleIdentifier:@\"zh_CN\"];\n   \n   \n   \n    //设置DatePicker的日历，默认为当天。\n    self.datePicker.calendar = [NSCalendar currentCalendar];\n   \n    //设置时区\n    self.datePicker.timeZone = [NSTimeZone defaultTimeZone];\n   \n    //选择时区\n//    [self.datePicker setTimeZone:[NSTimeZone timeZoneWithName:@\"GMT+8\"]];\n   \n   \n    // 设置当前显示时间\n   \n    NSDate *currentTime  = [NSDate date];\n\n    self.datePicker.date = currentTime;\n   \n    // 设置显示最大时间\n   \n   self.datePicker.maximumDate = currentTime;\n   \n    // 显示模式\n    [self.datePicker setDatePickerMode:UIDatePickerModeDate];\n   \n    //倒计时按秒显示\n    self.datePicker.countDownDuration = 600;\n   \n    //设置分钟间隔\n    self.datePicker.minuteInterval = 10;\n   \n    // 回调的方法\n    [self.datePicker addTarget:self action:@selector(datePickerValueChanged:) forControlEvents:UIControlEventValueChanged];\n   \n   \n    [self.view addSubview:self.datePicker];\n   \n}\n   \n-(void)datePickerValueChanged:(id)sender\n{\n    NSDate *selected = [NSDate date];\n    NSLog(@\"date: %@\", selected);\n}\n```\n\n","source":"_posts/oc/UIDatePicker.md","raw":"---\ntitle: UIDatePicker\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\nself.datePicker = [[UIDatePicker alloc]initWithFrame:CGRectMake(0, 200, 375, 267)];\n   \n    self.datePicker.backgroundColor = [UIColor whiteColor];\n   \n    //设置地区\n    self.datePicker.locale = [[NSLocale alloc]initWithLocaleIdentifier:@\"zh_CN\"];\n   \n   \n   \n    //设置DatePicker的日历，默认为当天。\n    self.datePicker.calendar = [NSCalendar currentCalendar];\n   \n    //设置时区\n    self.datePicker.timeZone = [NSTimeZone defaultTimeZone];\n   \n    //选择时区\n//    [self.datePicker setTimeZone:[NSTimeZone timeZoneWithName:@\"GMT+8\"]];\n   \n   \n    // 设置当前显示时间\n   \n    NSDate *currentTime  = [NSDate date];\n\n    self.datePicker.date = currentTime;\n   \n    // 设置显示最大时间\n   \n   self.datePicker.maximumDate = currentTime;\n   \n    // 显示模式\n    [self.datePicker setDatePickerMode:UIDatePickerModeDate];\n   \n    //倒计时按秒显示\n    self.datePicker.countDownDuration = 600;\n   \n    //设置分钟间隔\n    self.datePicker.minuteInterval = 10;\n   \n    // 回调的方法\n    [self.datePicker addTarget:self action:@selector(datePickerValueChanged:) forControlEvents:UIControlEventValueChanged];\n   \n   \n    [self.view addSubview:self.datePicker];\n   \n}\n   \n-(void)datePickerValueChanged:(id)sender\n{\n    NSDate *selected = [NSDate date];\n    NSLog(@\"date: %@\", selected);\n}\n```\n\n","slug":"oc/UIDatePicker","published":1,"updated":"2016-10-08T05:56:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97g001k21xwuu88m9h0","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span>.datePicker = [[<span class=\"built_in\">UIDatePicker</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">200</span>, <span class=\"number\">375</span>, <span class=\"number\">267</span>)];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.datePicker.backgroundColor = [<span class=\"built_in\">UIColor</span> whiteColor];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置地区</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.datePicker.locale = [[<span class=\"built_in\">NSLocale</span> alloc]initWithLocaleIdentifier:<span class=\"string\">@\"zh_CN\"</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置DatePicker的日历，默认为当天。</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.datePicker.calendar = [<span class=\"built_in\">NSCalendar</span> currentCalendar];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置时区</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.datePicker.timeZone = [<span class=\"built_in\">NSTimeZone</span> defaultTimeZone];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//选择时区</span></div><div class=\"line\"><span class=\"comment\">//    [self.datePicker setTimeZone:[NSTimeZone timeZoneWithName:@\"GMT+8\"]];</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 设置当前显示时间</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSDate</span> *currentTime  = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">self</span>.datePicker.date = currentTime;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 设置显示最大时间</span></div><div class=\"line\">   </div><div class=\"line\">   <span class=\"keyword\">self</span>.datePicker.maximumDate = currentTime;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 显示模式</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.datePicker setDatePickerMode:<span class=\"built_in\">UIDatePickerModeDate</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//倒计时按秒显示</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.datePicker.countDownDuration = <span class=\"number\">600</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置分钟间隔</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.datePicker.minuteInterval = <span class=\"number\">10</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 回调的方法</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.datePicker addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(datePickerValueChanged:) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.datePicker];</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\">   </div><div class=\"line\">-(<span class=\"keyword\">void</span>)datePickerValueChanged:(<span class=\"keyword\">id</span>)sender</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSDate</span> *selected = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date: %@\"</span>, selected);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span>.datePicker = [[<span class=\"built_in\">UIDatePicker</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">200</span>, <span class=\"number\">375</span>, <span class=\"number\">267</span>)];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.datePicker.backgroundColor = [<span class=\"built_in\">UIColor</span> whiteColor];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置地区</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.datePicker.locale = [[<span class=\"built_in\">NSLocale</span> alloc]initWithLocaleIdentifier:<span class=\"string\">@\"zh_CN\"</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置DatePicker的日历，默认为当天。</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.datePicker.calendar = [<span class=\"built_in\">NSCalendar</span> currentCalendar];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置时区</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.datePicker.timeZone = [<span class=\"built_in\">NSTimeZone</span> defaultTimeZone];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//选择时区</span></div><div class=\"line\"><span class=\"comment\">//    [self.datePicker setTimeZone:[NSTimeZone timeZoneWithName:@\"GMT+8\"]];</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 设置当前显示时间</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSDate</span> *currentTime  = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">self</span>.datePicker.date = currentTime;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 设置显示最大时间</span></div><div class=\"line\">   </div><div class=\"line\">   <span class=\"keyword\">self</span>.datePicker.maximumDate = currentTime;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 显示模式</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.datePicker setDatePickerMode:<span class=\"built_in\">UIDatePickerModeDate</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//倒计时按秒显示</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.datePicker.countDownDuration = <span class=\"number\">600</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置分钟间隔</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.datePicker.minuteInterval = <span class=\"number\">10</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// 回调的方法</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.datePicker addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(datePickerValueChanged:) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.datePicker];</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\">   </div><div class=\"line\">-(<span class=\"keyword\">void</span>)datePickerValueChanged:(<span class=\"keyword\">id</span>)sender</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSDate</span> *selected = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"date: %@\"</span>, selected);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"UIDevice","date":"2016-10-08T03:39:43.000Z","_content":"UIDevice提供了多种属性、类函数及状态通知，帮助我们全方位了解设备状况。从检测电池电量到定位设备与临近感应，UIDevice所做的工作就是为应用程序提供用户及设备的一些信息。UIDevice类还能够收集关于设备的各种具体细节，例如机型及iOS版本等。其中大部分属性都对开发工作具有积极的辅助作用。下面的代码简单的使用UIDevice获取手机属性。\n<!-- more -->\n typedef NS_ENUM(NSInteger, UIDeviceOrientation) //设备方向\n    {\n        UIDeviceOrientationUnknown,\n        UIDeviceOrientationPortrait,                   // 竖向，头向上\n        UIDeviceOrientationPortraitUpsideDown,  // 竖向，头向下\n        UIDeviceOrientationLandscapeLeft,         // 横向，头向左\n        UIDeviceOrientationLandscapeRight,       // 横向，头向右\n        UIDeviceOrientationFaceUp,                   // 平放，屏幕朝下\n        UIDeviceOrientationFaceDown                // 平放，屏幕朝下\n    };\n   \n    typedef NS_ENUM(NSInteger, UIDeviceBatteryState) //电池状态\n    {\n        UIDeviceBatteryStateUnknown,\n        UIDeviceBatteryStateUnplugged,   // 未充电\n        UIDeviceBatteryStateCharging,     // 正在充电\n        UIDeviceBatteryStateFull,             // 满电\n    };\n   \n    typedef NS_ENUM(NSInteger, UIUserInterfaceIdiom) //用户界面类型\n    {\n        //iOS3.2以上有效\n#if __IPHONE_3_2 <= __IPHONE_OS_VERSION_MAX_ALLOWED\n        UIUserInterfaceIdiomPhone,           // iPhone 和 iPod touch 风格\n        UIUserInterfaceIdiomPad,              // iPad 风格\n#endif\n    };\n   \n#define UI_USER_INTERFACE_IDIOM() ([[UIDevice currentDevice] respondsToSelector:@selector(userInterfaceIdiom)] ? [[UIDevice currentDevice] userInterfaceIdiom] : UIUserInterfaceIdiomPhone)\n   \n#define UIDeviceOrientationIsPortrait(orientation)  ((orientation) == UIDeviceOrientationPortrait || (orientation) == UIDeviceOrientationPortraitUpsideDown)\n#define UIDeviceOrientationIsLandscape(orientation) ((orientation) == UIDeviceOrientationLandscapeLeft || (orientation) == UIDeviceOrientationLandscapeRight)\n   \n    NS_CLASS_AVAILABLE_IOS(2_0) @interface UIDevice : NSObject {\n    @private\n        NSInteger _numDeviceOrientationObservers;\n        float    _batteryLevel;\n        struct {\n            unsigned int batteryMonitoringEnabled:1;\n            unsigned int proximityMonitoringEnabled:1;\n            unsigned int expectsFaceContactInLandscape:1;\n            unsigned int orientation:3;\n            unsigned int batteryState:2;\n            unsigned int proximityState:1;\n        } _deviceFlags;\n    }\n   \n    + (UIDevice *)currentDevice; // 获取当前设备\n   \n    @property(nonatomic,readonly,retain) NSString    *name;                // e.g. \"My iPhone\"\n    @property(nonatomic,readonly,retain) NSString    *model;               // e.g. @\"iPhone\", @\"iPod touch\"\n    @property(nonatomic,readonly,retain) NSString    *localizedModel;    // localized version of model\n    @property(nonatomic,readonly,retain) NSString    *systemName;      // e.g. @\"iOS\"\n    @property(nonatomic,readonly,retain) NSString    *systemVersion;    // e.g. @\"4.0\"\n    @property(nonatomic,readonly) UIDeviceOrientation orientation;       // 除非正在生成设备方向的通知，否则返回UIDeviceOrientationUnknown 。\n   \n    @property(nonatomic,readonly,retain) NSUUID      *identifierForVendor NS_AVAILABLE_IOS(6_0);      // 可用于唯一标识该设备，同一供应商不同应用具有相同的UUID 。\n   \n    @property(nonatomic,readonly,getter=isGeneratingDeviceOrientationNotifications) BOOL generatesDeviceOrientationNotifications; //是否生成设备转向通知\n    - (void)beginGeneratingDeviceOrientationNotifications;\n    - (void)endGeneratingDeviceOrientationNotifications;\n   \n    @property(nonatomic,getter=isBatteryMonitoringEnabled) BOOL batteryMonitoringEnabled NS_AVAILABLE_IOS(3_0);  // 是否启动电池监控，默认为NO\n    @property(nonatomic,readonly) UIDeviceBatteryState batteryState NS_AVAILABLE_IOS(3_0);  // 如果禁用电池监控，则电池状态为UIDeviceBatteryStateUnknown\n    @property(nonatomic,readonly) float batteryLevel NS_AVAILABLE_IOS(3_0);  //电量百分比， 0 .. 1.0。如果电池状态为UIDeviceBatteryStateUnknown，则百分比为-1.0\n   \n    @property(nonatomic,getter=isProximityMonitoringEnabled) BOOL proximityMonitoringEnabled NS_AVAILABLE_IOS(3_0); // 是否启动接近监控（例如接电话时脸靠近屏幕），默认为NO\n    @property(nonatomic,readonly)  BOOL proximityState NS_AVAILABLE_IOS(3_0);  // 如果设备不具备接近感应器，则总是返回NO\n   \n    @property(nonatomic,readonly,getter=isMultitaskingSupported) BOOL multitaskingSupported NS_AVAILABLE_IOS(4_0); // 是否支持多任务\n   \n    @property(nonatomic,readonly) UIUserInterfaceIdiom userInterfaceIdiom NS_AVAILABLE_IOS(3_2); // 当前用户界面模式\n   \n    - (void)playInputClick NS_AVAILABLE_IOS(4_2);  // 播放一个输入的声音\n    @end\n   \n    @protocol UIInputViewAudioFeedback\n    @optional\n    @property (nonatomic, readonly) BOOL enableInputClicksWhenVisible; // 实现该方法，返回YES则自定义的视图能够播放输入的声音\n    @end\n   \n    UIKIT_EXTERN NSString *const UIDeviceOrientationDidChangeNotification; // 屏幕方向变化通知\n    UIKIT_EXTERN NSString *const UIDeviceBatteryStateDidChangeNotification   NS_AVAILABLE_IOS(3_0); // 电池状态变化通知\n    UIKIT_EXTERN NSString *const UIDeviceBatteryLevelDidChangeNotification   NS_AVAILABLE_IOS(3_0); // 电池电量变化通知\n    UIKIT_EXTERN NSString *const UIDeviceProximityStateDidChangeNotification NS_AVAILABLE_IOS(3_0); // 接近状态变化通知\n```\n\n","source":"_posts/oc/UIDevice.md","raw":"---\ntitle: UIDevice\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\nUIDevice提供了多种属性、类函数及状态通知，帮助我们全方位了解设备状况。从检测电池电量到定位设备与临近感应，UIDevice所做的工作就是为应用程序提供用户及设备的一些信息。UIDevice类还能够收集关于设备的各种具体细节，例如机型及iOS版本等。其中大部分属性都对开发工作具有积极的辅助作用。下面的代码简单的使用UIDevice获取手机属性。\n<!-- more -->\n typedef NS_ENUM(NSInteger, UIDeviceOrientation) //设备方向\n    {\n        UIDeviceOrientationUnknown,\n        UIDeviceOrientationPortrait,                   // 竖向，头向上\n        UIDeviceOrientationPortraitUpsideDown,  // 竖向，头向下\n        UIDeviceOrientationLandscapeLeft,         // 横向，头向左\n        UIDeviceOrientationLandscapeRight,       // 横向，头向右\n        UIDeviceOrientationFaceUp,                   // 平放，屏幕朝下\n        UIDeviceOrientationFaceDown                // 平放，屏幕朝下\n    };\n   \n    typedef NS_ENUM(NSInteger, UIDeviceBatteryState) //电池状态\n    {\n        UIDeviceBatteryStateUnknown,\n        UIDeviceBatteryStateUnplugged,   // 未充电\n        UIDeviceBatteryStateCharging,     // 正在充电\n        UIDeviceBatteryStateFull,             // 满电\n    };\n   \n    typedef NS_ENUM(NSInteger, UIUserInterfaceIdiom) //用户界面类型\n    {\n        //iOS3.2以上有效\n#if __IPHONE_3_2 <= __IPHONE_OS_VERSION_MAX_ALLOWED\n        UIUserInterfaceIdiomPhone,           // iPhone 和 iPod touch 风格\n        UIUserInterfaceIdiomPad,              // iPad 风格\n#endif\n    };\n   \n#define UI_USER_INTERFACE_IDIOM() ([[UIDevice currentDevice] respondsToSelector:@selector(userInterfaceIdiom)] ? [[UIDevice currentDevice] userInterfaceIdiom] : UIUserInterfaceIdiomPhone)\n   \n#define UIDeviceOrientationIsPortrait(orientation)  ((orientation) == UIDeviceOrientationPortrait || (orientation) == UIDeviceOrientationPortraitUpsideDown)\n#define UIDeviceOrientationIsLandscape(orientation) ((orientation) == UIDeviceOrientationLandscapeLeft || (orientation) == UIDeviceOrientationLandscapeRight)\n   \n    NS_CLASS_AVAILABLE_IOS(2_0) @interface UIDevice : NSObject {\n    @private\n        NSInteger _numDeviceOrientationObservers;\n        float    _batteryLevel;\n        struct {\n            unsigned int batteryMonitoringEnabled:1;\n            unsigned int proximityMonitoringEnabled:1;\n            unsigned int expectsFaceContactInLandscape:1;\n            unsigned int orientation:3;\n            unsigned int batteryState:2;\n            unsigned int proximityState:1;\n        } _deviceFlags;\n    }\n   \n    + (UIDevice *)currentDevice; // 获取当前设备\n   \n    @property(nonatomic,readonly,retain) NSString    *name;                // e.g. \"My iPhone\"\n    @property(nonatomic,readonly,retain) NSString    *model;               // e.g. @\"iPhone\", @\"iPod touch\"\n    @property(nonatomic,readonly,retain) NSString    *localizedModel;    // localized version of model\n    @property(nonatomic,readonly,retain) NSString    *systemName;      // e.g. @\"iOS\"\n    @property(nonatomic,readonly,retain) NSString    *systemVersion;    // e.g. @\"4.0\"\n    @property(nonatomic,readonly) UIDeviceOrientation orientation;       // 除非正在生成设备方向的通知，否则返回UIDeviceOrientationUnknown 。\n   \n    @property(nonatomic,readonly,retain) NSUUID      *identifierForVendor NS_AVAILABLE_IOS(6_0);      // 可用于唯一标识该设备，同一供应商不同应用具有相同的UUID 。\n   \n    @property(nonatomic,readonly,getter=isGeneratingDeviceOrientationNotifications) BOOL generatesDeviceOrientationNotifications; //是否生成设备转向通知\n    - (void)beginGeneratingDeviceOrientationNotifications;\n    - (void)endGeneratingDeviceOrientationNotifications;\n   \n    @property(nonatomic,getter=isBatteryMonitoringEnabled) BOOL batteryMonitoringEnabled NS_AVAILABLE_IOS(3_0);  // 是否启动电池监控，默认为NO\n    @property(nonatomic,readonly) UIDeviceBatteryState batteryState NS_AVAILABLE_IOS(3_0);  // 如果禁用电池监控，则电池状态为UIDeviceBatteryStateUnknown\n    @property(nonatomic,readonly) float batteryLevel NS_AVAILABLE_IOS(3_0);  //电量百分比， 0 .. 1.0。如果电池状态为UIDeviceBatteryStateUnknown，则百分比为-1.0\n   \n    @property(nonatomic,getter=isProximityMonitoringEnabled) BOOL proximityMonitoringEnabled NS_AVAILABLE_IOS(3_0); // 是否启动接近监控（例如接电话时脸靠近屏幕），默认为NO\n    @property(nonatomic,readonly)  BOOL proximityState NS_AVAILABLE_IOS(3_0);  // 如果设备不具备接近感应器，则总是返回NO\n   \n    @property(nonatomic,readonly,getter=isMultitaskingSupported) BOOL multitaskingSupported NS_AVAILABLE_IOS(4_0); // 是否支持多任务\n   \n    @property(nonatomic,readonly) UIUserInterfaceIdiom userInterfaceIdiom NS_AVAILABLE_IOS(3_2); // 当前用户界面模式\n   \n    - (void)playInputClick NS_AVAILABLE_IOS(4_2);  // 播放一个输入的声音\n    @end\n   \n    @protocol UIInputViewAudioFeedback\n    @optional\n    @property (nonatomic, readonly) BOOL enableInputClicksWhenVisible; // 实现该方法，返回YES则自定义的视图能够播放输入的声音\n    @end\n   \n    UIKIT_EXTERN NSString *const UIDeviceOrientationDidChangeNotification; // 屏幕方向变化通知\n    UIKIT_EXTERN NSString *const UIDeviceBatteryStateDidChangeNotification   NS_AVAILABLE_IOS(3_0); // 电池状态变化通知\n    UIKIT_EXTERN NSString *const UIDeviceBatteryLevelDidChangeNotification   NS_AVAILABLE_IOS(3_0); // 电池电量变化通知\n    UIKIT_EXTERN NSString *const UIDeviceProximityStateDidChangeNotification NS_AVAILABLE_IOS(3_0); // 接近状态变化通知\n```\n\n","slug":"oc/UIDevice","published":1,"updated":"2016-10-08T05:53:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97h001m21xwn5n2ms7y","content":"<p>UIDevice提供了多种属性、类函数及状态通知，帮助我们全方位了解设备状况。从检测电池电量到定位设备与临近感应，UIDevice所做的工作就是为应用程序提供用户及设备的一些信息。UIDevice类还能够收集关于设备的各种具体细节，例如机型及iOS版本等。其中大部分属性都对开发工作具有积极的辅助作用。下面的代码简单的使用UIDevice获取手机属性。<br><a id=\"more\"></a><br> typedef NS_ENUM(NSInteger, UIDeviceOrientation) //设备方向<br>    {<br>        UIDeviceOrientationUnknown,<br>        UIDeviceOrientationPortrait,                   // 竖向，头向上<br>        UIDeviceOrientationPortraitUpsideDown,  // 竖向，头向下<br>        UIDeviceOrientationLandscapeLeft,         // 横向，头向左<br>        UIDeviceOrientationLandscapeRight,       // 横向，头向右<br>        UIDeviceOrientationFaceUp,                   // 平放，屏幕朝下<br>        UIDeviceOrientationFaceDown                // 平放，屏幕朝下<br>    };</p>\n<pre><code>typedef NS_ENUM(NSInteger, UIDeviceBatteryState) //电池状态\n{\n    UIDeviceBatteryStateUnknown,\n    UIDeviceBatteryStateUnplugged,   // 未充电\n    UIDeviceBatteryStateCharging,     // 正在充电\n    UIDeviceBatteryStateFull,             // 满电\n};\n\ntypedef NS_ENUM(NSInteger, UIUserInterfaceIdiom) //用户界面类型\n{\n    //iOS3.2以上有效\n</code></pre><p>#if <strong>IPHONE_3_2 &lt;= </strong>IPHONE_OS_VERSION_MAX_ALLOWED<br>        UIUserInterfaceIdiomPhone,           // iPhone 和 iPod touch 风格<br>        UIUserInterfaceIdiomPad,              // iPad 风格</p>\n<p>#endif<br>    };</p>\n<p>#define UI_USER_INTERFACE_IDIOM() ([[UIDevice currentDevice] respondsToSelector:@selector(userInterfaceIdiom)] ? [[UIDevice currentDevice] userInterfaceIdiom] : UIUserInterfaceIdiomPhone)</p>\n<p>#define UIDeviceOrientationIsPortrait(orientation)  ((orientation) == UIDeviceOrientationPortrait || (orientation) == UIDeviceOrientationPortraitUpsideDown)</p>\n<p>#define UIDeviceOrientationIsLandscape(orientation) ((orientation) == UIDeviceOrientationLandscapeLeft || (orientation) == UIDeviceOrientationLandscapeRight)</p>\n<pre><code>NS_CLASS_AVAILABLE_IOS(2_0) @interface UIDevice : NSObject {\n@private\n    NSInteger _numDeviceOrientationObservers;\n    float    _batteryLevel;\n    struct {\n        unsigned int batteryMonitoringEnabled:1;\n        unsigned int proximityMonitoringEnabled:1;\n        unsigned int expectsFaceContactInLandscape:1;\n        unsigned int orientation:3;\n        unsigned int batteryState:2;\n        unsigned int proximityState:1;\n    } _deviceFlags;\n}\n\n+ (UIDevice *)currentDevice; // 获取当前设备\n\n@property(nonatomic,readonly,retain) NSString    *name;                // e.g. &quot;My iPhone&quot;\n@property(nonatomic,readonly,retain) NSString    *model;               // e.g. @&quot;iPhone&quot;, @&quot;iPod touch&quot;\n@property(nonatomic,readonly,retain) NSString    *localizedModel;    // localized version of model\n@property(nonatomic,readonly,retain) NSString    *systemName;      // e.g. @&quot;iOS&quot;\n@property(nonatomic,readonly,retain) NSString    *systemVersion;    // e.g. @&quot;4.0&quot;\n@property(nonatomic,readonly) UIDeviceOrientation orientation;       // 除非正在生成设备方向的通知，否则返回UIDeviceOrientationUnknown 。\n\n@property(nonatomic,readonly,retain) NSUUID      *identifierForVendor NS_AVAILABLE_IOS(6_0);      // 可用于唯一标识该设备，同一供应商不同应用具有相同的UUID 。\n\n@property(nonatomic,readonly,getter=isGeneratingDeviceOrientationNotifications) BOOL generatesDeviceOrientationNotifications; //是否生成设备转向通知\n- (void)beginGeneratingDeviceOrientationNotifications;\n- (void)endGeneratingDeviceOrientationNotifications;\n\n@property(nonatomic,getter=isBatteryMonitoringEnabled) BOOL batteryMonitoringEnabled NS_AVAILABLE_IOS(3_0);  // 是否启动电池监控，默认为NO\n@property(nonatomic,readonly) UIDeviceBatteryState batteryState NS_AVAILABLE_IOS(3_0);  // 如果禁用电池监控，则电池状态为UIDeviceBatteryStateUnknown\n@property(nonatomic,readonly) float batteryLevel NS_AVAILABLE_IOS(3_0);  //电量百分比， 0 .. 1.0。如果电池状态为UIDeviceBatteryStateUnknown，则百分比为-1.0\n\n@property(nonatomic,getter=isProximityMonitoringEnabled) BOOL proximityMonitoringEnabled NS_AVAILABLE_IOS(3_0); // 是否启动接近监控（例如接电话时脸靠近屏幕），默认为NO\n@property(nonatomic,readonly)  BOOL proximityState NS_AVAILABLE_IOS(3_0);  // 如果设备不具备接近感应器，则总是返回NO\n\n@property(nonatomic,readonly,getter=isMultitaskingSupported) BOOL multitaskingSupported NS_AVAILABLE_IOS(4_0); // 是否支持多任务\n\n@property(nonatomic,readonly) UIUserInterfaceIdiom userInterfaceIdiom NS_AVAILABLE_IOS(3_2); // 当前用户界面模式\n\n- (void)playInputClick NS_AVAILABLE_IOS(4_2);  // 播放一个输入的声音\n@end\n\n@protocol UIInputViewAudioFeedback\n@optional\n@property (nonatomic, readonly) BOOL enableInputClicksWhenVisible; // 实现该方法，返回YES则自定义的视图能够播放输入的声音\n@end\n\nUIKIT_EXTERN NSString *const UIDeviceOrientationDidChangeNotification; // 屏幕方向变化通知\nUIKIT_EXTERN NSString *const UIDeviceBatteryStateDidChangeNotification   NS_AVAILABLE_IOS(3_0); // 电池状态变化通知\nUIKIT_EXTERN NSString *const UIDeviceBatteryLevelDidChangeNotification   NS_AVAILABLE_IOS(3_0); // 电池电量变化通知\nUIKIT_EXTERN NSString *const UIDeviceProximityStateDidChangeNotification NS_AVAILABLE_IOS(3_0); // 接近状态变化通知\n</code></pre><p>```</p>\n","excerpt":"<p>UIDevice提供了多种属性、类函数及状态通知，帮助我们全方位了解设备状况。从检测电池电量到定位设备与临近感应，UIDevice所做的工作就是为应用程序提供用户及设备的一些信息。UIDevice类还能够收集关于设备的各种具体细节，例如机型及iOS版本等。其中大部分属性都对开发工作具有积极的辅助作用。下面的代码简单的使用UIDevice获取手机属性。<br>","more":"<br> typedef NS_ENUM(NSInteger, UIDeviceOrientation) //设备方向<br>    {<br>        UIDeviceOrientationUnknown,<br>        UIDeviceOrientationPortrait,                   // 竖向，头向上<br>        UIDeviceOrientationPortraitUpsideDown,  // 竖向，头向下<br>        UIDeviceOrientationLandscapeLeft,         // 横向，头向左<br>        UIDeviceOrientationLandscapeRight,       // 横向，头向右<br>        UIDeviceOrientationFaceUp,                   // 平放，屏幕朝下<br>        UIDeviceOrientationFaceDown                // 平放，屏幕朝下<br>    };</p>\n<pre><code>typedef NS_ENUM(NSInteger, UIDeviceBatteryState) //电池状态\n{\n    UIDeviceBatteryStateUnknown,\n    UIDeviceBatteryStateUnplugged,   // 未充电\n    UIDeviceBatteryStateCharging,     // 正在充电\n    UIDeviceBatteryStateFull,             // 满电\n};\n\ntypedef NS_ENUM(NSInteger, UIUserInterfaceIdiom) //用户界面类型\n{\n    //iOS3.2以上有效\n</code></pre><p>#if <strong>IPHONE_3_2 &lt;= </strong>IPHONE_OS_VERSION_MAX_ALLOWED<br>        UIUserInterfaceIdiomPhone,           // iPhone 和 iPod touch 风格<br>        UIUserInterfaceIdiomPad,              // iPad 风格</p>\n<p>#endif<br>    };</p>\n<p>#define UI_USER_INTERFACE_IDIOM() ([[UIDevice currentDevice] respondsToSelector:@selector(userInterfaceIdiom)] ? [[UIDevice currentDevice] userInterfaceIdiom] : UIUserInterfaceIdiomPhone)</p>\n<p>#define UIDeviceOrientationIsPortrait(orientation)  ((orientation) == UIDeviceOrientationPortrait || (orientation) == UIDeviceOrientationPortraitUpsideDown)</p>\n<p>#define UIDeviceOrientationIsLandscape(orientation) ((orientation) == UIDeviceOrientationLandscapeLeft || (orientation) == UIDeviceOrientationLandscapeRight)</p>\n<pre><code>NS_CLASS_AVAILABLE_IOS(2_0) @interface UIDevice : NSObject {\n@private\n    NSInteger _numDeviceOrientationObservers;\n    float    _batteryLevel;\n    struct {\n        unsigned int batteryMonitoringEnabled:1;\n        unsigned int proximityMonitoringEnabled:1;\n        unsigned int expectsFaceContactInLandscape:1;\n        unsigned int orientation:3;\n        unsigned int batteryState:2;\n        unsigned int proximityState:1;\n    } _deviceFlags;\n}\n\n+ (UIDevice *)currentDevice; // 获取当前设备\n\n@property(nonatomic,readonly,retain) NSString    *name;                // e.g. &quot;My iPhone&quot;\n@property(nonatomic,readonly,retain) NSString    *model;               // e.g. @&quot;iPhone&quot;, @&quot;iPod touch&quot;\n@property(nonatomic,readonly,retain) NSString    *localizedModel;    // localized version of model\n@property(nonatomic,readonly,retain) NSString    *systemName;      // e.g. @&quot;iOS&quot;\n@property(nonatomic,readonly,retain) NSString    *systemVersion;    // e.g. @&quot;4.0&quot;\n@property(nonatomic,readonly) UIDeviceOrientation orientation;       // 除非正在生成设备方向的通知，否则返回UIDeviceOrientationUnknown 。\n\n@property(nonatomic,readonly,retain) NSUUID      *identifierForVendor NS_AVAILABLE_IOS(6_0);      // 可用于唯一标识该设备，同一供应商不同应用具有相同的UUID 。\n\n@property(nonatomic,readonly,getter=isGeneratingDeviceOrientationNotifications) BOOL generatesDeviceOrientationNotifications; //是否生成设备转向通知\n- (void)beginGeneratingDeviceOrientationNotifications;\n- (void)endGeneratingDeviceOrientationNotifications;\n\n@property(nonatomic,getter=isBatteryMonitoringEnabled) BOOL batteryMonitoringEnabled NS_AVAILABLE_IOS(3_0);  // 是否启动电池监控，默认为NO\n@property(nonatomic,readonly) UIDeviceBatteryState batteryState NS_AVAILABLE_IOS(3_0);  // 如果禁用电池监控，则电池状态为UIDeviceBatteryStateUnknown\n@property(nonatomic,readonly) float batteryLevel NS_AVAILABLE_IOS(3_0);  //电量百分比， 0 .. 1.0。如果电池状态为UIDeviceBatteryStateUnknown，则百分比为-1.0\n\n@property(nonatomic,getter=isProximityMonitoringEnabled) BOOL proximityMonitoringEnabled NS_AVAILABLE_IOS(3_0); // 是否启动接近监控（例如接电话时脸靠近屏幕），默认为NO\n@property(nonatomic,readonly)  BOOL proximityState NS_AVAILABLE_IOS(3_0);  // 如果设备不具备接近感应器，则总是返回NO\n\n@property(nonatomic,readonly,getter=isMultitaskingSupported) BOOL multitaskingSupported NS_AVAILABLE_IOS(4_0); // 是否支持多任务\n\n@property(nonatomic,readonly) UIUserInterfaceIdiom userInterfaceIdiom NS_AVAILABLE_IOS(3_2); // 当前用户界面模式\n\n- (void)playInputClick NS_AVAILABLE_IOS(4_2);  // 播放一个输入的声音\n@end\n\n@protocol UIInputViewAudioFeedback\n@optional\n@property (nonatomic, readonly) BOOL enableInputClicksWhenVisible; // 实现该方法，返回YES则自定义的视图能够播放输入的声音\n@end\n\nUIKIT_EXTERN NSString *const UIDeviceOrientationDidChangeNotification; // 屏幕方向变化通知\nUIKIT_EXTERN NSString *const UIDeviceBatteryStateDidChangeNotification   NS_AVAILABLE_IOS(3_0); // 电池状态变化通知\nUIKIT_EXTERN NSString *const UIDeviceBatteryLevelDidChangeNotification   NS_AVAILABLE_IOS(3_0); // 电池电量变化通知\nUIKIT_EXTERN NSString *const UIDeviceProximityStateDidChangeNotification NS_AVAILABLE_IOS(3_0); // 接近状态变化通知\n</code></pre><p>```</p>"},{"title":"UIGestureRecognizerState","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\ntypedef NS_ENUM(NSInteger, UIGestureRecognizerState) {\n    UIGestureRecognizerStatePossible,   // the recognizer has not yet recognized its gesture, but may be evaluating touch events. this is the default state\n   \n    UIGestureRecognizerStateBegan,      // the recognizer has received touches recognized as the gesture. the action method will be called at the next turn of the run loop\n    UIGestureRecognizerStateChanged,    // the recognizer has received touches recognized as a change to the gesture. the action method will be called at the next turn of the run loop\n    UIGestureRecognizerStateEnded,      // the recognizer has received touches recognized as the end of the gesture. the action method will be called at the next turn of the run loop and the recognizer will be reset to UIGestureRecognizerStatePossible\n    UIGestureRecognizerStateCancelled,  // the recognizer has received touches resulting in the cancellation of the gesture. the action method will be called at the next turn of the run loop. the recognizer will be reset to UIGestureRecognizerStatePossible\n   \n    UIGestureRecognizerStateFailed,     // the recognizer has received a touch sequence that can not be recognized as the gesture. the action method will not be called and the recognizer will be reset to UIGestureRecognizerStatePossible\n   \n    // Discrete Gestures – gesture recognizers that recognize a discrete event but do not report changes (for example, a tap) do not transition through the Began and Changed states and can not fail or be cancelled\n    UIGestureRecognizerStateRecognized = UIGestureRecognizerStateEnded // the recognizer has received touches recognized as the gesture. the action method will be called at the next turn of the run loop and the recognizer will be reset to UIGestureRecognizerStatePossible\n};\n\nPossible: 识别器在未识别出它的手势，但可能会接收到触摸时处于这个状态。这是默认状态。\nBegan: 识别器接收到触摸并识别出是它的手势时处于这个状态。响应方法将在下个循环步骤中被调用。\n\nChanged:the recognizer has received touches recognized as a change to the gesture. （不懂怎么翻译，理解上就是识别器识别出一个变化为它的手势的触摸），响应方法将在下个循环步骤中被调用。\n\nEnded:识别器在识别到作为当前手势结束信号的触摸时处于这个状态。响应方法将在下个循环步骤中被调用 并且 识别器将重置为possible状态。\n\nCancelled:识别器处于取消状态.响应方法将在下个循环步骤中被调用 并且 识别器将重置为possible状态。\n\nFailed: 识别器接收到不能识别为它的手势的一系列触摸。响应方法不会被调用 并且 识别器将重置为possible状态。\n\nRecognized: 识别器已识别到它的手势。响应方法将在下个循环步骤中被调用 并且 识别器将重置为possible状态。\n\n```\n\n","source":"_posts/oc/UIGestureRecognizerState.md","raw":"---\ntitle: UIGestureRecognizerState\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\ntypedef NS_ENUM(NSInteger, UIGestureRecognizerState) {\n    UIGestureRecognizerStatePossible,   // the recognizer has not yet recognized its gesture, but may be evaluating touch events. this is the default state\n   \n    UIGestureRecognizerStateBegan,      // the recognizer has received touches recognized as the gesture. the action method will be called at the next turn of the run loop\n    UIGestureRecognizerStateChanged,    // the recognizer has received touches recognized as a change to the gesture. the action method will be called at the next turn of the run loop\n    UIGestureRecognizerStateEnded,      // the recognizer has received touches recognized as the end of the gesture. the action method will be called at the next turn of the run loop and the recognizer will be reset to UIGestureRecognizerStatePossible\n    UIGestureRecognizerStateCancelled,  // the recognizer has received touches resulting in the cancellation of the gesture. the action method will be called at the next turn of the run loop. the recognizer will be reset to UIGestureRecognizerStatePossible\n   \n    UIGestureRecognizerStateFailed,     // the recognizer has received a touch sequence that can not be recognized as the gesture. the action method will not be called and the recognizer will be reset to UIGestureRecognizerStatePossible\n   \n    // Discrete Gestures – gesture recognizers that recognize a discrete event but do not report changes (for example, a tap) do not transition through the Began and Changed states and can not fail or be cancelled\n    UIGestureRecognizerStateRecognized = UIGestureRecognizerStateEnded // the recognizer has received touches recognized as the gesture. the action method will be called at the next turn of the run loop and the recognizer will be reset to UIGestureRecognizerStatePossible\n};\n\nPossible: 识别器在未识别出它的手势，但可能会接收到触摸时处于这个状态。这是默认状态。\nBegan: 识别器接收到触摸并识别出是它的手势时处于这个状态。响应方法将在下个循环步骤中被调用。\n\nChanged:the recognizer has received touches recognized as a change to the gesture. （不懂怎么翻译，理解上就是识别器识别出一个变化为它的手势的触摸），响应方法将在下个循环步骤中被调用。\n\nEnded:识别器在识别到作为当前手势结束信号的触摸时处于这个状态。响应方法将在下个循环步骤中被调用 并且 识别器将重置为possible状态。\n\nCancelled:识别器处于取消状态.响应方法将在下个循环步骤中被调用 并且 识别器将重置为possible状态。\n\nFailed: 识别器接收到不能识别为它的手势的一系列触摸。响应方法不会被调用 并且 识别器将重置为possible状态。\n\nRecognized: 识别器已识别到它的手势。响应方法将在下个循环步骤中被调用 并且 识别器将重置为possible状态。\n\n```\n\n","slug":"oc/UIGestureRecognizerState","published":1,"updated":"2016-10-08T09:07:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97k001o21xwfshhdpkc","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSInteger</span>, <span class=\"built_in\">UIGestureRecognizerState</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">UIGestureRecognizerStatePossible</span>,   <span class=\"comment\">// the recognizer has not yet recognized its gesture, but may be evaluating touch events. this is the default state</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">UIGestureRecognizerStateBegan</span>,      <span class=\"comment\">// the recognizer has received touches recognized as the gesture. the action method will be called at the next turn of the run loop</span></div><div class=\"line\">    <span class=\"built_in\">UIGestureRecognizerStateChanged</span>,    <span class=\"comment\">// the recognizer has received touches recognized as a change to the gesture. the action method will be called at the next turn of the run loop</span></div><div class=\"line\">    <span class=\"built_in\">UIGestureRecognizerStateEnded</span>,      <span class=\"comment\">// the recognizer has received touches recognized as the end of the gesture. the action method will be called at the next turn of the run loop and the recognizer will be reset to UIGestureRecognizerStatePossible</span></div><div class=\"line\">    <span class=\"built_in\">UIGestureRecognizerStateCancelled</span>,  <span class=\"comment\">// the recognizer has received touches resulting in the cancellation of the gesture. the action method will be called at the next turn of the run loop. the recognizer will be reset to UIGestureRecognizerStatePossible</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">UIGestureRecognizerStateFailed</span>,     <span class=\"comment\">// the recognizer has received a touch sequence that can not be recognized as the gesture. the action method will not be called and the recognizer will be reset to UIGestureRecognizerStatePossible</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// Discrete Gestures – gesture recognizers that recognize a discrete event but do not report changes (for example, a tap) do not transition through the Began and Changed states and can not fail or be cancelled</span></div><div class=\"line\">    <span class=\"built_in\">UIGestureRecognizerStateRecognized</span> = <span class=\"built_in\">UIGestureRecognizerStateEnded</span> <span class=\"comment\">// the recognizer has received touches recognized as the gesture. the action method will be called at the next turn of the run loop and the recognizer will be reset to UIGestureRecognizerStatePossible</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Possible: 识别器在未识别出它的手势，但可能会接收到触摸时处于这个状态。这是默认状态。</div><div class=\"line\">Began: 识别器接收到触摸并识别出是它的手势时处于这个状态。响应方法将在下个循环步骤中被调用。</div><div class=\"line\"></div><div class=\"line\">Changed:the recognizer has received touches recognized as a change to the gesture. （不懂怎么翻译，理解上就是识别器识别出一个变化为它的手势的触摸），响应方法将在下个循环步骤中被调用。</div><div class=\"line\"></div><div class=\"line\">Ended:识别器在识别到作为当前手势结束信号的触摸时处于这个状态。响应方法将在下个循环步骤中被调用 并且 识别器将重置为possible状态。</div><div class=\"line\"></div><div class=\"line\">Cancelled:识别器处于取消状态.响应方法将在下个循环步骤中被调用 并且 识别器将重置为possible状态。</div><div class=\"line\"></div><div class=\"line\">Failed: 识别器接收到不能识别为它的手势的一系列触摸。响应方法不会被调用 并且 识别器将重置为possible状态。</div><div class=\"line\"></div><div class=\"line\">Recognized: 识别器已识别到它的手势。响应方法将在下个循环步骤中被调用 并且 识别器将重置为possible状态。</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSInteger</span>, <span class=\"built_in\">UIGestureRecognizerState</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">UIGestureRecognizerStatePossible</span>,   <span class=\"comment\">// the recognizer has not yet recognized its gesture, but may be evaluating touch events. this is the default state</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">UIGestureRecognizerStateBegan</span>,      <span class=\"comment\">// the recognizer has received touches recognized as the gesture. the action method will be called at the next turn of the run loop</span></div><div class=\"line\">    <span class=\"built_in\">UIGestureRecognizerStateChanged</span>,    <span class=\"comment\">// the recognizer has received touches recognized as a change to the gesture. the action method will be called at the next turn of the run loop</span></div><div class=\"line\">    <span class=\"built_in\">UIGestureRecognizerStateEnded</span>,      <span class=\"comment\">// the recognizer has received touches recognized as the end of the gesture. the action method will be called at the next turn of the run loop and the recognizer will be reset to UIGestureRecognizerStatePossible</span></div><div class=\"line\">    <span class=\"built_in\">UIGestureRecognizerStateCancelled</span>,  <span class=\"comment\">// the recognizer has received touches resulting in the cancellation of the gesture. the action method will be called at the next turn of the run loop. the recognizer will be reset to UIGestureRecognizerStatePossible</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">UIGestureRecognizerStateFailed</span>,     <span class=\"comment\">// the recognizer has received a touch sequence that can not be recognized as the gesture. the action method will not be called and the recognizer will be reset to UIGestureRecognizerStatePossible</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// Discrete Gestures – gesture recognizers that recognize a discrete event but do not report changes (for example, a tap) do not transition through the Began and Changed states and can not fail or be cancelled</span></div><div class=\"line\">    <span class=\"built_in\">UIGestureRecognizerStateRecognized</span> = <span class=\"built_in\">UIGestureRecognizerStateEnded</span> <span class=\"comment\">// the recognizer has received touches recognized as the gesture. the action method will be called at the next turn of the run loop and the recognizer will be reset to UIGestureRecognizerStatePossible</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Possible: 识别器在未识别出它的手势，但可能会接收到触摸时处于这个状态。这是默认状态。</div><div class=\"line\">Began: 识别器接收到触摸并识别出是它的手势时处于这个状态。响应方法将在下个循环步骤中被调用。</div><div class=\"line\"></div><div class=\"line\">Changed:the recognizer has received touches recognized as a change to the gesture. （不懂怎么翻译，理解上就是识别器识别出一个变化为它的手势的触摸），响应方法将在下个循环步骤中被调用。</div><div class=\"line\"></div><div class=\"line\">Ended:识别器在识别到作为当前手势结束信号的触摸时处于这个状态。响应方法将在下个循环步骤中被调用 并且 识别器将重置为possible状态。</div><div class=\"line\"></div><div class=\"line\">Cancelled:识别器处于取消状态.响应方法将在下个循环步骤中被调用 并且 识别器将重置为possible状态。</div><div class=\"line\"></div><div class=\"line\">Failed: 识别器接收到不能识别为它的手势的一系列触摸。响应方法不会被调用 并且 识别器将重置为possible状态。</div><div class=\"line\"></div><div class=\"line\">Recognized: 识别器已识别到它的手势。响应方法将在下个循环步骤中被调用 并且 识别器将重置为possible状态。</div></pre></td></tr></table></figure>"},{"title":"UIImagePickerController从本地相册加载图片","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n/*1.签两个协议协议\n          UIImagePickerControllerDelegate\n          UINavigationControllerDelegate\n  2.两个方法\n\n方法一：\n//点击按钮触发的方法\n-(void)buttonAction:(UIButton*)button\n{\n\n    //创建获取本地相册控制器对象\n    UIImagePickerController *picker = [[UIImagePickerControlleralloc]init];\n   \n    //成为代理\n    picker.delegate= self;\n   \n    //设置相片来源类型\n    picker.sourceType=UIImagePickerControllerSourceTypePhotoLibrary;\n   \n    //是否可以编辑\n    picker.allowsEditing= YES;\n   \n    //模态显示本地相册\n    [selfpresentViewController:pickeranimated:YEScompletion:^{\n       \n       \n    }]; \n}\n\n方法二：\n//当用户选择相册中的某个图片时触发的方法,协议里的方法\n//该方法可以获取到选中的图片\n\n- (void)imagePickerController:(UIImagePickerController*)picker didFinishPickingMediaWithInfo:(NSDictionary*)info\n{\n\n    NSLog(@\"info = %@\",info);\n    UIImage *image=\n    [info objectForKey:@\"UIImagePickerControllerOriginalImage\"];\n    //通过tag值取对象\n    UIButton *button = (UIButton*)[self.viewviewWithTag:10000];\n    [button setBackgroundImage:imageforState:UIControlStateNormal];\n   \n    //让相册模态消失\n    [picker dismissViewControllerAnimated:YEScompletion:^{\n       \n       \n    }];\n   \n}\n数据来源类型一共有三种：\nenum {\n   UIImagePickerControllerSourceTypePhotoLibrary ,//来自图库\n   UIImagePickerControllerSourceTypeCamera ,//来自相机\n   UIImagePickerControllerSourceTypeSavedPhotosAlbum //来自相册\n};\n在用这些来源的时候最好检测以下设备是否支持；\n if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera])\n    {\n        NSLog(@\"支持相机\");\n    }\n    if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypePhotoLibrary])\n    {\n        NSLog(@\"支持图库\");\n    }\n    if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeSavedPhotosAlbum])\n    {\n        NSLog(@\"支持相片库\");\n    }\n\n调用摄像头来获取资源\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    picker = [[UIImagePickerController alloc]init];\n    picker.view.backgroundColor = [UIColor orangeColor];\n    UIImagePickerControllerSourceType sourcheType = UIImagePickerControllerSourceTypeCamera;\n    picker.sourceType = sourcheType;\n    picker.delegate = self;\n    picker.allowsEditing = YES;\n}\n\n```\n\n\n\t\n\t\n\t\n","source":"_posts/oc/UIImagePickerController从本地相册加载图片.md","raw":"---\ntitle: UIImagePickerController从本地相册加载图片\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n/*1.签两个协议协议\n          UIImagePickerControllerDelegate\n          UINavigationControllerDelegate\n  2.两个方法\n\n方法一：\n//点击按钮触发的方法\n-(void)buttonAction:(UIButton*)button\n{\n\n    //创建获取本地相册控制器对象\n    UIImagePickerController *picker = [[UIImagePickerControlleralloc]init];\n   \n    //成为代理\n    picker.delegate= self;\n   \n    //设置相片来源类型\n    picker.sourceType=UIImagePickerControllerSourceTypePhotoLibrary;\n   \n    //是否可以编辑\n    picker.allowsEditing= YES;\n   \n    //模态显示本地相册\n    [selfpresentViewController:pickeranimated:YEScompletion:^{\n       \n       \n    }]; \n}\n\n方法二：\n//当用户选择相册中的某个图片时触发的方法,协议里的方法\n//该方法可以获取到选中的图片\n\n- (void)imagePickerController:(UIImagePickerController*)picker didFinishPickingMediaWithInfo:(NSDictionary*)info\n{\n\n    NSLog(@\"info = %@\",info);\n    UIImage *image=\n    [info objectForKey:@\"UIImagePickerControllerOriginalImage\"];\n    //通过tag值取对象\n    UIButton *button = (UIButton*)[self.viewviewWithTag:10000];\n    [button setBackgroundImage:imageforState:UIControlStateNormal];\n   \n    //让相册模态消失\n    [picker dismissViewControllerAnimated:YEScompletion:^{\n       \n       \n    }];\n   \n}\n数据来源类型一共有三种：\nenum {\n   UIImagePickerControllerSourceTypePhotoLibrary ,//来自图库\n   UIImagePickerControllerSourceTypeCamera ,//来自相机\n   UIImagePickerControllerSourceTypeSavedPhotosAlbum //来自相册\n};\n在用这些来源的时候最好检测以下设备是否支持；\n if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera])\n    {\n        NSLog(@\"支持相机\");\n    }\n    if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypePhotoLibrary])\n    {\n        NSLog(@\"支持图库\");\n    }\n    if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeSavedPhotosAlbum])\n    {\n        NSLog(@\"支持相片库\");\n    }\n\n调用摄像头来获取资源\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    picker = [[UIImagePickerController alloc]init];\n    picker.view.backgroundColor = [UIColor orangeColor];\n    UIImagePickerControllerSourceType sourcheType = UIImagePickerControllerSourceTypeCamera;\n    picker.sourceType = sourcheType;\n    picker.delegate = self;\n    picker.allowsEditing = YES;\n}\n\n```\n\n\n\t\n\t\n\t\n","slug":"oc/UIImagePickerController从本地相册加载图片","published":1,"updated":"2016-10-08T06:05:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97l001q21xwweedyjmp","content":"<a id=\"more\"></a>\n<p>/*1.签两个协议协议<br>          UIImagePickerControllerDelegate<br>          UINavigationControllerDelegate<br>  2.两个方法</p>\n<p>方法一：<br>//点击按钮触发的方法<br>-(void)buttonAction:(UIButton*)button<br>{</p>\n<pre><code>//创建获取本地相册控制器对象\nUIImagePickerController *picker = [[UIImagePickerControlleralloc]init];\n\n//成为代理\npicker.delegate= self;\n\n//设置相片来源类型\npicker.sourceType=UIImagePickerControllerSourceTypePhotoLibrary;\n\n//是否可以编辑\npicker.allowsEditing= YES;\n\n//模态显示本地相册\n[selfpresentViewController:pickeranimated:YEScompletion:^{\n\n\n}]; \n</code></pre><p>}</p>\n<p>方法二：<br>//当用户选择相册中的某个图片时触发的方法,协议里的方法<br>//该方法可以获取到选中的图片</p>\n<ul>\n<li><p>(void)imagePickerController:(UIImagePickerController<em>)picker didFinishPickingMediaWithInfo:(NSDictionary</em>)info<br>{</p>\n<p>  NSLog(@”info = %@”,info);<br>  UIImage <em>image=<br>  [info objectForKey:@”UIImagePickerControllerOriginalImage”];<br>  //通过tag值取对象<br>  UIButton </em>button = (UIButton*)[self.viewviewWithTag:10000];<br>  [button setBackgroundImage:imageforState:UIControlStateNormal];</p>\n<p>  //让相册模态消失<br>  [picker dismissViewControllerAnimated:YEScompletion:^{</p>\n</li>\n</ul>\n<pre><code>}];\n</code></pre><p>}<br>数据来源类型一共有三种：<br>enum {<br>   UIImagePickerControllerSourceTypePhotoLibrary ,//来自图库<br>   UIImagePickerControllerSourceTypeCamera ,//来自相机<br>   UIImagePickerControllerSourceTypeSavedPhotosAlbum //来自相册<br>};<br>在用这些来源的时候最好检测以下设备是否支持；<br> if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera])<br>    {<br>        NSLog(@”支持相机”);<br>    }<br>    if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypePhotoLibrary])<br>    {<br>        NSLog(@”支持图库”);<br>    }<br>    if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeSavedPhotosAlbum])<br>    {<br>        NSLog(@”支持相片库”);<br>    }</p>\n<p>调用摄像头来获取资源</p>\n<ul>\n<li>(void)viewDidLoad {<br>  [super viewDidLoad];<br>  picker = [[UIImagePickerController alloc]init];<br>  picker.view.backgroundColor = [UIColor orangeColor];<br>  UIImagePickerControllerSourceType sourcheType = UIImagePickerControllerSourceTypeCamera;<br>  picker.sourceType = sourcheType;<br>  picker.delegate = self;<br>  picker.allowsEditing = YES;<br>}</li>\n</ul>\n<p>```</p>\n","excerpt":"","more":"<p>/*1.签两个协议协议<br>          UIImagePickerControllerDelegate<br>          UINavigationControllerDelegate<br>  2.两个方法</p>\n<p>方法一：<br>//点击按钮触发的方法<br>-(void)buttonAction:(UIButton*)button<br>{</p>\n<pre><code>//创建获取本地相册控制器对象\nUIImagePickerController *picker = [[UIImagePickerControlleralloc]init];\n\n//成为代理\npicker.delegate= self;\n\n//设置相片来源类型\npicker.sourceType=UIImagePickerControllerSourceTypePhotoLibrary;\n\n//是否可以编辑\npicker.allowsEditing= YES;\n\n//模态显示本地相册\n[selfpresentViewController:pickeranimated:YEScompletion:^{\n\n\n}]; \n</code></pre><p>}</p>\n<p>方法二：<br>//当用户选择相册中的某个图片时触发的方法,协议里的方法<br>//该方法可以获取到选中的图片</p>\n<ul>\n<li><p>(void)imagePickerController:(UIImagePickerController<em>)picker didFinishPickingMediaWithInfo:(NSDictionary</em>)info<br>{</p>\n<p>  NSLog(@”info = %@”,info);<br>  UIImage <em>image=<br>  [info objectForKey:@”UIImagePickerControllerOriginalImage”];<br>  //通过tag值取对象<br>  UIButton </em>button = (UIButton*)[self.viewviewWithTag:10000];<br>  [button setBackgroundImage:imageforState:UIControlStateNormal];</p>\n<p>  //让相册模态消失<br>  [picker dismissViewControllerAnimated:YEScompletion:^{</p>\n</li>\n</ul>\n<pre><code>}];\n</code></pre><p>}<br>数据来源类型一共有三种：<br>enum {<br>   UIImagePickerControllerSourceTypePhotoLibrary ,//来自图库<br>   UIImagePickerControllerSourceTypeCamera ,//来自相机<br>   UIImagePickerControllerSourceTypeSavedPhotosAlbum //来自相册<br>};<br>在用这些来源的时候最好检测以下设备是否支持；<br> if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera])<br>    {<br>        NSLog(@”支持相机”);<br>    }<br>    if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypePhotoLibrary])<br>    {<br>        NSLog(@”支持图库”);<br>    }<br>    if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeSavedPhotosAlbum])<br>    {<br>        NSLog(@”支持相片库”);<br>    }</p>\n<p>调用摄像头来获取资源</p>\n<ul>\n<li>(void)viewDidLoad {<br>  [super viewDidLoad];<br>  picker = [[UIImagePickerController alloc]init];<br>  picker.view.backgroundColor = [UIColor orangeColor];<br>  UIImagePickerControllerSourceType sourcheType = UIImagePickerControllerSourceTypeCamera;<br>  picker.sourceType = sourcheType;<br>  picker.delegate = self;<br>  picker.allowsEditing = YES;<br>}</li>\n</ul>\n<p>```</p>"},{"title":"UINavigationController","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n属性 ：\nviewControllers属性:         存储了栈中的所有被管理的控制器\nnavigationController属性:  父类中的属性，每个在栈中的控制器，都能    通过此属性，获取自己所在的UINavigationController对象。\n     /***********创建导航控制器***********************/\nRootViewController *rootVC = [[RootViewControlleralloc]init];\n\n    //创建一个导航控制器\n    UINavigationController *naVC = [[UINavigationController alloc]initWithRootViewController:rootVC];\n    [rootVC release];\n   \n    //指定导航控制器为window的根视图\n    self.window.rootViewController = naVC;\n    [naVC release];\n    /*****************************************************/    \n\n\n    /****************设置导航栏外观***********************/\n    //导航栏背景颜色\n    naVC.navigationBar.barTintColor = [UIColor purpleColor];\n    //设置导航栏不显示半透明效果\n    naVC.navigationBar.translucent = NO;\n    //将导航栏隐藏\n    naVC.navigationBar.hidden = NO;\n    //设置背景图片\n    UIImage *image = [UIImage imageNamed:@\"bk.png\"];\n    [naVC.navigationBar setBackgroundImage:image forBarMetrics:UIBarMetricsDefault];\n\n\n     /****************设置导航栏内容***********************/\n    //设置导航栏上的内容：navigationItem\n    //title\n    self.navigationItem.title = @\"第二页\";\n \n    //titleView\n    UISegmentedControl *segmentC = [[UISegmentedControl alloc]initWithItems:[NSArray arrayWithObjects:@\"消息\",@\"通话\", nil]];\n   \n    [segmentC addTarget:self action:@selector(segmentAction:) forControlEvents:UIControlEventEditingChanged];\n \n    self.navigationItem.titleView = segmentC;\n    [segmentC release];\n   \n   \n    //设置自定义内容放在左侧\n    UITextField *textf = [[UITextField alloc]initWithFrame:CGRectMake(0, 0, 100, 40)];\n    textf.backgroundColor = [UIColor yellowColor];\n    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:textf];\n\n\n\n\n     //自定义导航栏左侧按钮\n    UIImage *image = [UIImage imageNamed:@\"1.png\"];\n    //取消渲染\n    image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];\n    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]initWithImage:image style:UIBarButtonItemStylePlain target:self action:@selector(leftBarAction:)]autorelease];\n\n-(void)leftBarAction:(UIBarButtonItem *)barItem\n{\n    [self.navigationController popViewControllerAnimated:YES];\n}\n\n    //自定义导航栏右侧按钮为可以编辑Edit\n    self.navigationItem.rightBarButtonItem = self.editButtonItem;\n\n/****************编辑***********************/\n//重写系统编辑按钮触发的方法\n-(void)setEditing:(BOOL)editing animated:(BOOL)animated\n{\n    [super setEditing:editing animated:animated];\n   \n    //通过系统编辑按钮控制tableview的编辑状态\n    [self.tableView setEditing:editing animated:animated];\n}\n\n    //隐藏导航栏返回按钮\n    self.navigationItem.hidesBackButton =YES;\n\n    //自定义导航栏右侧按钮\n    self.navigationItem.rightBarButtonItem = [[[UIBarButtonItem alloc]initWithTitle:@\"下一页\" style:UIBarButtonItemStylePlain target:self action:@selector(rightBarAction:)]autorelease];\n   \n   \n}\n-(void)rightBarAction:(UIBarButtonItem *)barItem\n{\n    SecondViewController *sVC = [[SecondViewController alloc]init];\n    [self.navigationController pushViewController:sVC animated:YES];\n     [sVC release]; \n}\n/*****************************************************/\n\n\n/****************跳转页面的方法***********************/\npushViewController:animated    //进入下一个视图控制器\npopViewControllerAnimated:      //返回上一个视图控制器\npopToViewController:animated   //返回到指定的视图控制器\npopToRootViewControllerAnimated   //返回到根视图控制器\n    //进入下一页\n    SecondViewController *secondVC = [[SecondViewController alloc]init];\n   \n    [self.navigationController pushViewController:secondVC animated:YES];\n\n   //返回上一页\n    [self.navigationController popViewControllerAnimated:YES];\n   \n    //跳到根页面\n    [self.navigationController popToRootViewControllerAnimated:YES];\n   \n   \n   //跳到指定页面\n    UIViewController *vc =\n    [self.navigationController.viewControllers objectAtIndex:0];\n \n    [self.navigationController popToViewController:vc animated:YES];\n/*****************************************************/\n\n自定义导航栏左侧按钮后恢复右拉返回功能\nself.navigationController.interactivePopGestureRecognizer.delegate=(id)self;\n\n```\n\n","source":"_posts/oc/UINavigationController.md","raw":"---\ntitle: UINavigationController\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n属性 ：\nviewControllers属性:         存储了栈中的所有被管理的控制器\nnavigationController属性:  父类中的属性，每个在栈中的控制器，都能    通过此属性，获取自己所在的UINavigationController对象。\n     /***********创建导航控制器***********************/\nRootViewController *rootVC = [[RootViewControlleralloc]init];\n\n    //创建一个导航控制器\n    UINavigationController *naVC = [[UINavigationController alloc]initWithRootViewController:rootVC];\n    [rootVC release];\n   \n    //指定导航控制器为window的根视图\n    self.window.rootViewController = naVC;\n    [naVC release];\n    /*****************************************************/    \n\n\n    /****************设置导航栏外观***********************/\n    //导航栏背景颜色\n    naVC.navigationBar.barTintColor = [UIColor purpleColor];\n    //设置导航栏不显示半透明效果\n    naVC.navigationBar.translucent = NO;\n    //将导航栏隐藏\n    naVC.navigationBar.hidden = NO;\n    //设置背景图片\n    UIImage *image = [UIImage imageNamed:@\"bk.png\"];\n    [naVC.navigationBar setBackgroundImage:image forBarMetrics:UIBarMetricsDefault];\n\n\n     /****************设置导航栏内容***********************/\n    //设置导航栏上的内容：navigationItem\n    //title\n    self.navigationItem.title = @\"第二页\";\n \n    //titleView\n    UISegmentedControl *segmentC = [[UISegmentedControl alloc]initWithItems:[NSArray arrayWithObjects:@\"消息\",@\"通话\", nil]];\n   \n    [segmentC addTarget:self action:@selector(segmentAction:) forControlEvents:UIControlEventEditingChanged];\n \n    self.navigationItem.titleView = segmentC;\n    [segmentC release];\n   \n   \n    //设置自定义内容放在左侧\n    UITextField *textf = [[UITextField alloc]initWithFrame:CGRectMake(0, 0, 100, 40)];\n    textf.backgroundColor = [UIColor yellowColor];\n    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithCustomView:textf];\n\n\n\n\n     //自定义导航栏左侧按钮\n    UIImage *image = [UIImage imageNamed:@\"1.png\"];\n    //取消渲染\n    image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];\n    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]initWithImage:image style:UIBarButtonItemStylePlain target:self action:@selector(leftBarAction:)]autorelease];\n\n-(void)leftBarAction:(UIBarButtonItem *)barItem\n{\n    [self.navigationController popViewControllerAnimated:YES];\n}\n\n    //自定义导航栏右侧按钮为可以编辑Edit\n    self.navigationItem.rightBarButtonItem = self.editButtonItem;\n\n/****************编辑***********************/\n//重写系统编辑按钮触发的方法\n-(void)setEditing:(BOOL)editing animated:(BOOL)animated\n{\n    [super setEditing:editing animated:animated];\n   \n    //通过系统编辑按钮控制tableview的编辑状态\n    [self.tableView setEditing:editing animated:animated];\n}\n\n    //隐藏导航栏返回按钮\n    self.navigationItem.hidesBackButton =YES;\n\n    //自定义导航栏右侧按钮\n    self.navigationItem.rightBarButtonItem = [[[UIBarButtonItem alloc]initWithTitle:@\"下一页\" style:UIBarButtonItemStylePlain target:self action:@selector(rightBarAction:)]autorelease];\n   \n   \n}\n-(void)rightBarAction:(UIBarButtonItem *)barItem\n{\n    SecondViewController *sVC = [[SecondViewController alloc]init];\n    [self.navigationController pushViewController:sVC animated:YES];\n     [sVC release]; \n}\n/*****************************************************/\n\n\n/****************跳转页面的方法***********************/\npushViewController:animated    //进入下一个视图控制器\npopViewControllerAnimated:      //返回上一个视图控制器\npopToViewController:animated   //返回到指定的视图控制器\npopToRootViewControllerAnimated   //返回到根视图控制器\n    //进入下一页\n    SecondViewController *secondVC = [[SecondViewController alloc]init];\n   \n    [self.navigationController pushViewController:secondVC animated:YES];\n\n   //返回上一页\n    [self.navigationController popViewControllerAnimated:YES];\n   \n    //跳到根页面\n    [self.navigationController popToRootViewControllerAnimated:YES];\n   \n   \n   //跳到指定页面\n    UIViewController *vc =\n    [self.navigationController.viewControllers objectAtIndex:0];\n \n    [self.navigationController popToViewController:vc animated:YES];\n/*****************************************************/\n\n自定义导航栏左侧按钮后恢复右拉返回功能\nself.navigationController.interactivePopGestureRecognizer.delegate=(id)self;\n\n```\n\n","slug":"oc/UINavigationController","published":1,"updated":"2016-10-08T09:17:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97m001s21xwefleqmtf","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\">属性 ：</div><div class=\"line\">viewControllers属性:         存储了栈中的所有被管理的控制器</div><div class=\"line\">navigationController属性:  父类中的属性，每个在栈中的控制器，都能    通过此属性，获取自己所在的<span class=\"built_in\">UINavigationController</span>对象。</div><div class=\"line\">     <span class=\"comment\">/***********创建导航控制器***********************/</span></div><div class=\"line\">RootViewController *rootVC = [[RootViewControlleralloc]init];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//创建一个导航控制器</span></div><div class=\"line\">    <span class=\"built_in\">UINavigationController</span> *naVC = [[<span class=\"built_in\">UINavigationController</span> alloc]initWithRootViewController:rootVC];</div><div class=\"line\">    [rootVC release];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//指定导航控制器为window的根视图</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.window.rootViewController = naVC;</div><div class=\"line\">    [naVC release];</div><div class=\"line\">    <span class=\"comment\">/*****************************************************/</span>    </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/****************设置导航栏外观***********************/</span></div><div class=\"line\">    <span class=\"comment\">//导航栏背景颜色</span></div><div class=\"line\">    naVC.navigationBar.barTintColor = [<span class=\"built_in\">UIColor</span> purpleColor];</div><div class=\"line\">    <span class=\"comment\">//设置导航栏不显示半透明效果</span></div><div class=\"line\">    naVC.navigationBar.translucent = <span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"comment\">//将导航栏隐藏</span></div><div class=\"line\">    naVC.navigationBar.hidden = <span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"comment\">//设置背景图片</span></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"bk.png\"</span>];</div><div class=\"line\">    [naVC.navigationBar setBackgroundImage:image forBarMetrics:<span class=\"built_in\">UIBarMetricsDefault</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">/****************设置导航栏内容***********************/</span></div><div class=\"line\">    <span class=\"comment\">//设置导航栏上的内容：navigationItem</span></div><div class=\"line\">    <span class=\"comment\">//title</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.title = <span class=\"string\">@\"第二页\"</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">//titleView</span></div><div class=\"line\">    <span class=\"built_in\">UISegmentedControl</span> *segmentC = [[<span class=\"built_in\">UISegmentedControl</span> alloc]initWithItems:[<span class=\"built_in\">NSArray</span> arrayWithObjects:<span class=\"string\">@\"消息\"</span>,<span class=\"string\">@\"通话\"</span>, <span class=\"literal\">nil</span>]];</div><div class=\"line\">   </div><div class=\"line\">    [segmentC addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(segmentAction:) forControlEvents:<span class=\"built_in\">UIControlEventEditingChanged</span>];</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.titleView = segmentC;</div><div class=\"line\">    [segmentC release];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置自定义内容放在左侧</span></div><div class=\"line\">    <span class=\"built_in\">UITextField</span> *textf = [[<span class=\"built_in\">UITextField</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">40</span>)];</div><div class=\"line\">    textf.backgroundColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.rightBarButtonItem = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithCustomView:textf];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">//自定义导航栏左侧按钮</span></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"1.png\"</span>];</div><div class=\"line\">    <span class=\"comment\">//取消渲染</span></div><div class=\"line\">    image = [image imageWithRenderingMode:<span class=\"built_in\">UIImageRenderingModeAlwaysOriginal</span>];</div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.leftBarButtonItem = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithImage:image style:<span class=\"built_in\">UIBarButtonItemStylePlain</span> target:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(leftBarAction:)]autorelease];</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)leftBarAction:(<span class=\"built_in\">UIBarButtonItem</span> *)barItem</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController popViewControllerAnimated:<span class=\"literal\">YES</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//自定义导航栏右侧按钮为可以编辑Edit</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.rightBarButtonItem = <span class=\"keyword\">self</span>.editButtonItem;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/****************编辑***********************/</span></div><div class=\"line\"><span class=\"comment\">//重写系统编辑按钮触发的方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)setEditing:(<span class=\"built_in\">BOOL</span>)editing animated:(<span class=\"built_in\">BOOL</span>)animated</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> setEditing:editing animated:animated];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//通过系统编辑按钮控制tableview的编辑状态</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.tableView setEditing:editing animated:animated];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//隐藏导航栏返回按钮</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.hidesBackButton =<span class=\"literal\">YES</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//自定义导航栏右侧按钮</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.rightBarButtonItem = [[[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithTitle:<span class=\"string\">@\"下一页\"</span> style:<span class=\"built_in\">UIBarButtonItemStylePlain</span> target:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(rightBarAction:)]autorelease];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)rightBarAction:(<span class=\"built_in\">UIBarButtonItem</span> *)barItem</div><div class=\"line\">&#123;</div><div class=\"line\">    SecondViewController *sVC = [[SecondViewController alloc]init];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController pushViewController:sVC animated:<span class=\"literal\">YES</span>];</div><div class=\"line\">     [sVC release]; </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*****************************************************/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/****************跳转页面的方法***********************/</span></div><div class=\"line\">pushViewController:animated    <span class=\"comment\">//进入下一个视图控制器</span></div><div class=\"line\">popViewControllerAnimated:      <span class=\"comment\">//返回上一个视图控制器</span></div><div class=\"line\">popToViewController:animated   <span class=\"comment\">//返回到指定的视图控制器</span></div><div class=\"line\">popToRootViewControllerAnimated   <span class=\"comment\">//返回到根视图控制器</span></div><div class=\"line\">    <span class=\"comment\">//进入下一页</span></div><div class=\"line\">    SecondViewController *secondVC = [[SecondViewController alloc]init];</div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController pushViewController:secondVC animated:<span class=\"literal\">YES</span>];</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//返回上一页</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController popViewControllerAnimated:<span class=\"literal\">YES</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//跳到根页面</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController popToRootViewControllerAnimated:<span class=\"literal\">YES</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">//跳到指定页面</span></div><div class=\"line\">    <span class=\"built_in\">UIViewController</span> *vc =</div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController.viewControllers objectAtIndex:<span class=\"number\">0</span>];</div><div class=\"line\"> </div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController popToViewController:vc animated:<span class=\"literal\">YES</span>];</div><div class=\"line\"><span class=\"comment\">/*****************************************************/</span></div><div class=\"line\"></div><div class=\"line\">自定义导航栏左侧按钮后恢复右拉返回功能</div><div class=\"line\"><span class=\"keyword\">self</span>.navigationController.interactivePopGestureRecognizer.delegate=(<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\">属性 ：</div><div class=\"line\">viewControllers属性:         存储了栈中的所有被管理的控制器</div><div class=\"line\">navigationController属性:  父类中的属性，每个在栈中的控制器，都能    通过此属性，获取自己所在的<span class=\"built_in\">UINavigationController</span>对象。</div><div class=\"line\">     <span class=\"comment\">/***********创建导航控制器***********************/</span></div><div class=\"line\">RootViewController *rootVC = [[RootViewControlleralloc]init];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//创建一个导航控制器</span></div><div class=\"line\">    <span class=\"built_in\">UINavigationController</span> *naVC = [[<span class=\"built_in\">UINavigationController</span> alloc]initWithRootViewController:rootVC];</div><div class=\"line\">    [rootVC release];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//指定导航控制器为window的根视图</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.window.rootViewController = naVC;</div><div class=\"line\">    [naVC release];</div><div class=\"line\">    <span class=\"comment\">/*****************************************************/</span>    </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/****************设置导航栏外观***********************/</span></div><div class=\"line\">    <span class=\"comment\">//导航栏背景颜色</span></div><div class=\"line\">    naVC.navigationBar.barTintColor = [<span class=\"built_in\">UIColor</span> purpleColor];</div><div class=\"line\">    <span class=\"comment\">//设置导航栏不显示半透明效果</span></div><div class=\"line\">    naVC.navigationBar.translucent = <span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"comment\">//将导航栏隐藏</span></div><div class=\"line\">    naVC.navigationBar.hidden = <span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"comment\">//设置背景图片</span></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"bk.png\"</span>];</div><div class=\"line\">    [naVC.navigationBar setBackgroundImage:image forBarMetrics:<span class=\"built_in\">UIBarMetricsDefault</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">/****************设置导航栏内容***********************/</span></div><div class=\"line\">    <span class=\"comment\">//设置导航栏上的内容：navigationItem</span></div><div class=\"line\">    <span class=\"comment\">//title</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.title = <span class=\"string\">@\"第二页\"</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">//titleView</span></div><div class=\"line\">    <span class=\"built_in\">UISegmentedControl</span> *segmentC = [[<span class=\"built_in\">UISegmentedControl</span> alloc]initWithItems:[<span class=\"built_in\">NSArray</span> arrayWithObjects:<span class=\"string\">@\"消息\"</span>,<span class=\"string\">@\"通话\"</span>, <span class=\"literal\">nil</span>]];</div><div class=\"line\">   </div><div class=\"line\">    [segmentC addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(segmentAction:) forControlEvents:<span class=\"built_in\">UIControlEventEditingChanged</span>];</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.titleView = segmentC;</div><div class=\"line\">    [segmentC release];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置自定义内容放在左侧</span></div><div class=\"line\">    <span class=\"built_in\">UITextField</span> *textf = [[<span class=\"built_in\">UITextField</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">40</span>)];</div><div class=\"line\">    textf.backgroundColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.rightBarButtonItem = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithCustomView:textf];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">//自定义导航栏左侧按钮</span></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"1.png\"</span>];</div><div class=\"line\">    <span class=\"comment\">//取消渲染</span></div><div class=\"line\">    image = [image imageWithRenderingMode:<span class=\"built_in\">UIImageRenderingModeAlwaysOriginal</span>];</div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.leftBarButtonItem = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithImage:image style:<span class=\"built_in\">UIBarButtonItemStylePlain</span> target:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(leftBarAction:)]autorelease];</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)leftBarAction:(<span class=\"built_in\">UIBarButtonItem</span> *)barItem</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController popViewControllerAnimated:<span class=\"literal\">YES</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//自定义导航栏右侧按钮为可以编辑Edit</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.rightBarButtonItem = <span class=\"keyword\">self</span>.editButtonItem;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/****************编辑***********************/</span></div><div class=\"line\"><span class=\"comment\">//重写系统编辑按钮触发的方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)setEditing:(<span class=\"built_in\">BOOL</span>)editing animated:(<span class=\"built_in\">BOOL</span>)animated</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> setEditing:editing animated:animated];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//通过系统编辑按钮控制tableview的编辑状态</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.tableView setEditing:editing animated:animated];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//隐藏导航栏返回按钮</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.hidesBackButton =<span class=\"literal\">YES</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//自定义导航栏右侧按钮</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.rightBarButtonItem = [[[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithTitle:<span class=\"string\">@\"下一页\"</span> style:<span class=\"built_in\">UIBarButtonItemStylePlain</span> target:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(rightBarAction:)]autorelease];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)rightBarAction:(<span class=\"built_in\">UIBarButtonItem</span> *)barItem</div><div class=\"line\">&#123;</div><div class=\"line\">    SecondViewController *sVC = [[SecondViewController alloc]init];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController pushViewController:sVC animated:<span class=\"literal\">YES</span>];</div><div class=\"line\">     [sVC release]; </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*****************************************************/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/****************跳转页面的方法***********************/</span></div><div class=\"line\">pushViewController:animated    <span class=\"comment\">//进入下一个视图控制器</span></div><div class=\"line\">popViewControllerAnimated:      <span class=\"comment\">//返回上一个视图控制器</span></div><div class=\"line\">popToViewController:animated   <span class=\"comment\">//返回到指定的视图控制器</span></div><div class=\"line\">popToRootViewControllerAnimated   <span class=\"comment\">//返回到根视图控制器</span></div><div class=\"line\">    <span class=\"comment\">//进入下一页</span></div><div class=\"line\">    SecondViewController *secondVC = [[SecondViewController alloc]init];</div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController pushViewController:secondVC animated:<span class=\"literal\">YES</span>];</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//返回上一页</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController popViewControllerAnimated:<span class=\"literal\">YES</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//跳到根页面</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController popToRootViewControllerAnimated:<span class=\"literal\">YES</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">//跳到指定页面</span></div><div class=\"line\">    <span class=\"built_in\">UIViewController</span> *vc =</div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController.viewControllers objectAtIndex:<span class=\"number\">0</span>];</div><div class=\"line\"> </div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController popToViewController:vc animated:<span class=\"literal\">YES</span>];</div><div class=\"line\"><span class=\"comment\">/*****************************************************/</span></div><div class=\"line\"></div><div class=\"line\">自定义导航栏左侧按钮后恢复右拉返回功能</div><div class=\"line\"><span class=\"keyword\">self</span>.navigationController.interactivePopGestureRecognizer.delegate=(<span class=\"keyword\">id</span>)<span class=\"keyword\">self</span>;</div></pre></td></tr></table></figure>"},{"title":"UIPageControl","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n  /*****************创建UIPageControl*********************/\n    //创建UIPageControl\n   self.pageC= [[UIPageControlalloc]initWithFrame:CGRectMake((WIDTH-300)/2,HEIGHT-60,300,50)];\n    [self.viewaddSubview:self.pageC];\n    [self.pageCrelease];\n   \n    //设置页数\n   self.pageC.numberOfPages =10;\n\n   //设置当前页码的颜色\n   self.pageC.currentPageIndicatorTintColor = [UIColoryellowColor];\n\n   //设置所有页的颜色\n    self.pageC.pageIndicatorTintColor= [UIColorredColor];\n   \n    //核心方法\n    [self.pageCaddTarget:selfaction:@selector(pageAction:)forControlEvents:UIControlEventValueChanged];\n   \n   \n    self.scroll.delegate= self;\n   \n}\n-(void)pageAction:(UIPageControl*)pageC\n{\n    //打印当前页码\n\n    NSLog(@\"切换页码= %ld \",(long)pageC.currentPage);\n   \n  //页面跟着page的点动\n    [self.scrollsetContentOffset:CGPointMake(375*self.pageC.currentPage,0)animated:YES];\n   \n   \n}\n   /*****************************************************/ \n```\n\n\n","source":"_posts/oc/UIPageControl.md","raw":"---\ntitle: UIPageControl\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n  /*****************创建UIPageControl*********************/\n    //创建UIPageControl\n   self.pageC= [[UIPageControlalloc]initWithFrame:CGRectMake((WIDTH-300)/2,HEIGHT-60,300,50)];\n    [self.viewaddSubview:self.pageC];\n    [self.pageCrelease];\n   \n    //设置页数\n   self.pageC.numberOfPages =10;\n\n   //设置当前页码的颜色\n   self.pageC.currentPageIndicatorTintColor = [UIColoryellowColor];\n\n   //设置所有页的颜色\n    self.pageC.pageIndicatorTintColor= [UIColorredColor];\n   \n    //核心方法\n    [self.pageCaddTarget:selfaction:@selector(pageAction:)forControlEvents:UIControlEventValueChanged];\n   \n   \n    self.scroll.delegate= self;\n   \n}\n-(void)pageAction:(UIPageControl*)pageC\n{\n    //打印当前页码\n\n    NSLog(@\"切换页码= %ld \",(long)pageC.currentPage);\n   \n  //页面跟着page的点动\n    [self.scrollsetContentOffset:CGPointMake(375*self.pageC.currentPage,0)animated:YES];\n   \n   \n}\n   /*****************************************************/ \n```\n\n\n","slug":"oc/UIPageControl","published":1,"updated":"2016-10-08T06:07:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97n001u21xwa4mwox29","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">/*****************创建UIPageControl*********************/</span></div><div class=\"line\">    <span class=\"comment\">//创建UIPageControl</span></div><div class=\"line\">   <span class=\"keyword\">self</span>.pageC= [[<span class=\"built_in\">UIPageControlalloc</span>]initWithFrame:<span class=\"built_in\">CGRectMake</span>((WIDTH<span class=\"number\">-300</span>)/<span class=\"number\">2</span>,HEIGHT<span class=\"number\">-60</span>,<span class=\"number\">300</span>,<span class=\"number\">50</span>)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.viewaddSubview:<span class=\"keyword\">self</span>.pageC];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.pageCrelease];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置页数</span></div><div class=\"line\">   <span class=\"keyword\">self</span>.pageC.numberOfPages =<span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//设置当前页码的颜色</span></div><div class=\"line\">   <span class=\"keyword\">self</span>.pageC.currentPageIndicatorTintColor = [<span class=\"built_in\">UIColoryellowColor</span>];</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//设置所有页的颜色</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.pageC.pageIndicatorTintColor= [<span class=\"built_in\">UIColorredColor</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//核心方法</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.pageCaddTarget:selfaction:<span class=\"keyword\">@selector</span>(pageAction:)forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.scroll.delegate= <span class=\"keyword\">self</span>;</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)pageAction:(<span class=\"built_in\">UIPageControl</span>*)pageC</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//打印当前页码</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"切换页码= %ld \"</span>,(<span class=\"keyword\">long</span>)pageC.currentPage);</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">//页面跟着page的点动</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.scrollsetContentOffset:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">375</span>*<span class=\"keyword\">self</span>.pageC.currentPage,<span class=\"number\">0</span>)animated:<span class=\"literal\">YES</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\">   <span class=\"comment\">/*****************************************************/</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">/*****************创建UIPageControl*********************/</span></div><div class=\"line\">    <span class=\"comment\">//创建UIPageControl</span></div><div class=\"line\">   <span class=\"keyword\">self</span>.pageC= [[<span class=\"built_in\">UIPageControlalloc</span>]initWithFrame:<span class=\"built_in\">CGRectMake</span>((WIDTH<span class=\"number\">-300</span>)/<span class=\"number\">2</span>,HEIGHT<span class=\"number\">-60</span>,<span class=\"number\">300</span>,<span class=\"number\">50</span>)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.viewaddSubview:<span class=\"keyword\">self</span>.pageC];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.pageCrelease];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置页数</span></div><div class=\"line\">   <span class=\"keyword\">self</span>.pageC.numberOfPages =<span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//设置当前页码的颜色</span></div><div class=\"line\">   <span class=\"keyword\">self</span>.pageC.currentPageIndicatorTintColor = [<span class=\"built_in\">UIColoryellowColor</span>];</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//设置所有页的颜色</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.pageC.pageIndicatorTintColor= [<span class=\"built_in\">UIColorredColor</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//核心方法</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.pageCaddTarget:selfaction:<span class=\"keyword\">@selector</span>(pageAction:)forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.scroll.delegate= <span class=\"keyword\">self</span>;</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)pageAction:(<span class=\"built_in\">UIPageControl</span>*)pageC</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//打印当前页码</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"切换页码= %ld \"</span>,(<span class=\"keyword\">long</span>)pageC.currentPage);</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">//页面跟着page的点动</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.scrollsetContentOffset:<span class=\"built_in\">CGPointMake</span>(<span class=\"number\">375</span>*<span class=\"keyword\">self</span>.pageC.currentPage,<span class=\"number\">0</span>)animated:<span class=\"literal\">YES</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\">   <span class=\"comment\">/*****************************************************/</span></div></pre></td></tr></table></figure>"},{"title":"UIProgressView进度条","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n  //创建\n    UIProgressView *progressView = [[UIProgressView alloc]initWithProgressViewStyle:UIProgressViewStyleBar];\n    [self.view addSubview:progressView];\n    [progressView release];\n   \n    progressView.frame = CGRectMake(20, 100, 300, 10);\n   \n    //属性progress决定值的大小\n    //设置初始值\n    progressView.progress = 0;\n\n     //利用NSTimer\n     //创建NSTimer\n    NSTimer *timer = [NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(timerAction:) userInfo:nil repeats:YES];\n  \n\n-(void)timerAction:(NSTimer *)timer\n{\n    if (self.progressView.progress < 1) {\n         self.progressView.progress += 0.01;\n    }\n}\n```\n\n","source":"_posts/oc/UIProgressView进度条.md","raw":"---\ntitle: UIProgressView进度条\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n  //创建\n    UIProgressView *progressView = [[UIProgressView alloc]initWithProgressViewStyle:UIProgressViewStyleBar];\n    [self.view addSubview:progressView];\n    [progressView release];\n   \n    progressView.frame = CGRectMake(20, 100, 300, 10);\n   \n    //属性progress决定值的大小\n    //设置初始值\n    progressView.progress = 0;\n\n     //利用NSTimer\n     //创建NSTimer\n    NSTimer *timer = [NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(timerAction:) userInfo:nil repeats:YES];\n  \n\n-(void)timerAction:(NSTimer *)timer\n{\n    if (self.progressView.progress < 1) {\n         self.progressView.progress += 0.01;\n    }\n}\n```\n\n","slug":"oc/UIProgressView进度条","published":1,"updated":"2016-10-08T06:03:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97o001w21xw3d7fgw6b","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">//创建</span></div><div class=\"line\">    <span class=\"built_in\">UIProgressView</span> *progressView = [[<span class=\"built_in\">UIProgressView</span> alloc]initWithProgressViewStyle:<span class=\"built_in\">UIProgressViewStyleBar</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:progressView];</div><div class=\"line\">    [progressView release];</div><div class=\"line\">   </div><div class=\"line\">    progressView.frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">10</span>);</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//属性progress决定值的大小</span></div><div class=\"line\">    <span class=\"comment\">//设置初始值</span></div><div class=\"line\">    progressView.progress = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">//利用NSTimer</span></div><div class=\"line\">     <span class=\"comment\">//创建NSTimer</span></div><div class=\"line\">    <span class=\"built_in\">NSTimer</span> *timer = [<span class=\"built_in\">NSTimer</span> scheduledTimerWithTimeInterval:<span class=\"number\">0.1</span> target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(timerAction:) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">YES</span>];</div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)timerAction:(<span class=\"built_in\">NSTimer</span> *)timer</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.progressView.progress &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">self</span>.progressView.progress += <span class=\"number\">0.01</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">//创建</span></div><div class=\"line\">    <span class=\"built_in\">UIProgressView</span> *progressView = [[<span class=\"built_in\">UIProgressView</span> alloc]initWithProgressViewStyle:<span class=\"built_in\">UIProgressViewStyleBar</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:progressView];</div><div class=\"line\">    [progressView release];</div><div class=\"line\">   </div><div class=\"line\">    progressView.frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">10</span>);</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//属性progress决定值的大小</span></div><div class=\"line\">    <span class=\"comment\">//设置初始值</span></div><div class=\"line\">    progressView.progress = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">//利用NSTimer</span></div><div class=\"line\">     <span class=\"comment\">//创建NSTimer</span></div><div class=\"line\">    <span class=\"built_in\">NSTimer</span> *timer = [<span class=\"built_in\">NSTimer</span> scheduledTimerWithTimeInterval:<span class=\"number\">0.1</span> target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(timerAction:) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">YES</span>];</div><div class=\"line\">  </div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)timerAction:(<span class=\"built_in\">NSTimer</span> *)timer</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.progressView.progress &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">self</span>.progressView.progress += <span class=\"number\">0.01</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"UISearchController","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n  self.allMovieArray = [NSMutableArray array];\n    self.searchArray = [NSMutableArray array];\n\n    /************UITableView*************/\n    self.myTableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height) style:UITableViewStylePlain];\n    [self.view addSubview:self.myTableView];\n    [_myTableView release];\n    self.myTableView.delegate = self;\n    self.myTableView.dataSource = self;\n    /************UITableView*************/\n   \n   \n    /************UISearchController*************/\n    //创建UISearchController\n    self.searchController = [[UISearchController alloc] initWithSearchResultsController:nil];\n    self.myTableView.tableHeaderView = self.searchController.searchBar;\n   \n    //成为代理\n    self.searchController.searchResultsUpdater = self;\n    /************UISearchController*************/\n\n   \n    /************interface*************/\n    //设置开始搜索时背景显示与否 页面背景阴影效果,一般不要设置.\n    self.searchController.dimsBackgroundDuringPresentation = NO;\n   \n    //设置点击搜索框时候隐藏导航栏\n    self.searchController.hidesNavigationBarDuringPresentation = NO;\n    /************interface*************/\n   \n   \n    /************searchBar*************/\n    self.searchController.searchBar.frame = CGRectMake(self.searchController.searchBar.frame.origin.x, self.searchController.searchBar.frame.origin.y, self.searchController.searchBar.frame.size.width, 44.0);\n//    [searchBar sizeToFit]:设置searchBar位置自适应\n    [self.searchController.searchBar sizeToFit];\n    /************searchBar*************/\n\n\n\n/*****************searchMethod*********s*********/\n//UISearchController的移除\n//在viewWillDisappear中要将UISearchController移除, 否则切换到下一个View中, 搜索框仍然会有短暂的存在.\n- (void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n    if (self.searchController.active) {\n        self.searchController.active = NO;\n        [self.searchController.searchBar removeFromSuperview];\n    }\n}\n-(void)updateSearchResultsForSearchController:(UISearchController *)searchController {\n    NSString *searchString = [self.searchController.searchBar text];\n    NSLog(@\"===%@\",searchString);\n\n  NSPredicate *preicate = [NSPredicate predicateWithFormat:@\"SELF CONTAINS[c] %@\", searchString];\n    if (self.searchArray!= nil) {\n        [self.searchArray removeAllObjects];\n    }\n    //过滤数据\n    /*\n     对象数组过滤\n\n     ios提供了一个filteredArrayUsingPredicate 方法，通过给定条件来进行过滤，过滤后形成一个新的数组。 而NSMutableArray提供了一个filterUsingPredicate方法，在原数组中保留符合条件的数组元素。\n     */\n    self.searchArray= [NSMutableArray arrayWithArray:[self.allMovieArray filteredArrayUsingPredicate:preicate]];\n    NSLog(@\"searchArray===%@\",self.searchArray);\n\n    //刷新表格\n    [self.myTableView reloadData];\n}\n/*****************searchMethod*********s*********/\n\n\n\n/*****************tableviewmethod*********s*********/\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n{\n     //如果searchController是活动状态,说明是当前正在搜索\n    if (self.searchController.active) {\n\n        return self.searchArray.count;\n    }\n    else {\n        return self.allMovieArray.count;\n    }\n\n}\n\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n     static NSString *cellIdentifier = @\"cell\";\n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];\n    if (cell == nil) {\n       \n        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier];\n    }\n    if (self.searchController.active) {\n        cell.textLabel.text = [self.searchArray objectAtIndex:indexPath.row];\n    }\n    else {\n        cell.textLabel.text = [self.allMovieArray objectAtIndex:indexPath.row];\n    }\n\n\n    return cell;\n}\n\n-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n\n    DetailViewController *detailVC = [[DetailViewController alloc] init];\n    //如果searchController是活动状态,说明是当前正在搜索\n    if (self.searchController.active) {\n\n        NSLog(@\"选中搜索列表\");\n        detailVC.movieName = [self.searchArray objectAtIndex:indexPath.row];\n    }\n    else {\n\n        NSLog(@\"选中所有列表\");\n        detailVC.movieName = [self.allMovieArray objectAtIndex:indexPath.row];\n    }\n    [self.navigationController pushViewController:detailVC animated:YES];\n    [detailVC release];\n\n}\n\n\n-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    return 60;\n\n}\n/*****************tableviewmethod*********s*********/\n```\n\n","source":"_posts/oc/UISearchController.md","raw":"---\ntitle: UISearchController\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n  self.allMovieArray = [NSMutableArray array];\n    self.searchArray = [NSMutableArray array];\n\n    /************UITableView*************/\n    self.myTableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height) style:UITableViewStylePlain];\n    [self.view addSubview:self.myTableView];\n    [_myTableView release];\n    self.myTableView.delegate = self;\n    self.myTableView.dataSource = self;\n    /************UITableView*************/\n   \n   \n    /************UISearchController*************/\n    //创建UISearchController\n    self.searchController = [[UISearchController alloc] initWithSearchResultsController:nil];\n    self.myTableView.tableHeaderView = self.searchController.searchBar;\n   \n    //成为代理\n    self.searchController.searchResultsUpdater = self;\n    /************UISearchController*************/\n\n   \n    /************interface*************/\n    //设置开始搜索时背景显示与否 页面背景阴影效果,一般不要设置.\n    self.searchController.dimsBackgroundDuringPresentation = NO;\n   \n    //设置点击搜索框时候隐藏导航栏\n    self.searchController.hidesNavigationBarDuringPresentation = NO;\n    /************interface*************/\n   \n   \n    /************searchBar*************/\n    self.searchController.searchBar.frame = CGRectMake(self.searchController.searchBar.frame.origin.x, self.searchController.searchBar.frame.origin.y, self.searchController.searchBar.frame.size.width, 44.0);\n//    [searchBar sizeToFit]:设置searchBar位置自适应\n    [self.searchController.searchBar sizeToFit];\n    /************searchBar*************/\n\n\n\n/*****************searchMethod*********s*********/\n//UISearchController的移除\n//在viewWillDisappear中要将UISearchController移除, 否则切换到下一个View中, 搜索框仍然会有短暂的存在.\n- (void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n    if (self.searchController.active) {\n        self.searchController.active = NO;\n        [self.searchController.searchBar removeFromSuperview];\n    }\n}\n-(void)updateSearchResultsForSearchController:(UISearchController *)searchController {\n    NSString *searchString = [self.searchController.searchBar text];\n    NSLog(@\"===%@\",searchString);\n\n  NSPredicate *preicate = [NSPredicate predicateWithFormat:@\"SELF CONTAINS[c] %@\", searchString];\n    if (self.searchArray!= nil) {\n        [self.searchArray removeAllObjects];\n    }\n    //过滤数据\n    /*\n     对象数组过滤\n\n     ios提供了一个filteredArrayUsingPredicate 方法，通过给定条件来进行过滤，过滤后形成一个新的数组。 而NSMutableArray提供了一个filterUsingPredicate方法，在原数组中保留符合条件的数组元素。\n     */\n    self.searchArray= [NSMutableArray arrayWithArray:[self.allMovieArray filteredArrayUsingPredicate:preicate]];\n    NSLog(@\"searchArray===%@\",self.searchArray);\n\n    //刷新表格\n    [self.myTableView reloadData];\n}\n/*****************searchMethod*********s*********/\n\n\n\n/*****************tableviewmethod*********s*********/\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n{\n     //如果searchController是活动状态,说明是当前正在搜索\n    if (self.searchController.active) {\n\n        return self.searchArray.count;\n    }\n    else {\n        return self.allMovieArray.count;\n    }\n\n}\n\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n     static NSString *cellIdentifier = @\"cell\";\n    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];\n    if (cell == nil) {\n       \n        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier];\n    }\n    if (self.searchController.active) {\n        cell.textLabel.text = [self.searchArray objectAtIndex:indexPath.row];\n    }\n    else {\n        cell.textLabel.text = [self.allMovieArray objectAtIndex:indexPath.row];\n    }\n\n\n    return cell;\n}\n\n-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n\n    DetailViewController *detailVC = [[DetailViewController alloc] init];\n    //如果searchController是活动状态,说明是当前正在搜索\n    if (self.searchController.active) {\n\n        NSLog(@\"选中搜索列表\");\n        detailVC.movieName = [self.searchArray objectAtIndex:indexPath.row];\n    }\n    else {\n\n        NSLog(@\"选中所有列表\");\n        detailVC.movieName = [self.allMovieArray objectAtIndex:indexPath.row];\n    }\n    [self.navigationController pushViewController:detailVC animated:YES];\n    [detailVC release];\n\n}\n\n\n-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    return 60;\n\n}\n/*****************tableviewmethod*********s*********/\n```\n\n","slug":"oc/UISearchController","published":1,"updated":"2016-10-08T05:55:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97p001y21xwbyhjk6z2","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"keyword\">self</span>.allMovieArray = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">    <span class=\"keyword\">self</span>.searchArray = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/************UITableView*************/</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView = [[<span class=\"built_in\">UITableView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">self</span>.view.frame.size.width, <span class=\"keyword\">self</span>.view.frame.size.height) style:<span class=\"built_in\">UITableViewStylePlain</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.myTableView];</div><div class=\"line\">    [_myTableView release];</div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView.dataSource = <span class=\"keyword\">self</span>;</div><div class=\"line\">    <span class=\"comment\">/************UITableView*************/</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">/************UISearchController*************/</span></div><div class=\"line\">    <span class=\"comment\">//创建UISearchController</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.searchController = [[<span class=\"built_in\">UISearchController</span> alloc] initWithSearchResultsController:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView.tableHeaderView = <span class=\"keyword\">self</span>.searchController.searchBar;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//成为代理</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.searchController.searchResultsUpdater = <span class=\"keyword\">self</span>;</div><div class=\"line\">    <span class=\"comment\">/************UISearchController*************/</span></div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">/************interface*************/</span></div><div class=\"line\">    <span class=\"comment\">//设置开始搜索时背景显示与否 页面背景阴影效果,一般不要设置.</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.searchController.dimsBackgroundDuringPresentation = <span class=\"literal\">NO</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置点击搜索框时候隐藏导航栏</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.searchController.hidesNavigationBarDuringPresentation = <span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"comment\">/************interface*************/</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">/************searchBar*************/</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.searchController.searchBar.frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"keyword\">self</span>.searchController.searchBar.frame.origin.x, <span class=\"keyword\">self</span>.searchController.searchBar.frame.origin.y, <span class=\"keyword\">self</span>.searchController.searchBar.frame.size.width, <span class=\"number\">44.0</span>);</div><div class=\"line\"><span class=\"comment\">//    [searchBar sizeToFit]:设置searchBar位置自适应</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.searchController.searchBar sizeToFit];</div><div class=\"line\">    <span class=\"comment\">/************searchBar*************/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*****************searchMethod*********s*********/</span></div><div class=\"line\"><span class=\"comment\">//UISearchController的移除</span></div><div class=\"line\"><span class=\"comment\">//在viewWillDisappear中要将UISearchController移除, 否则切换到下一个View中, 搜索框仍然会有短暂的存在.</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewWillDisappear:(<span class=\"built_in\">BOOL</span>)animated &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewWillDisappear:animated];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.searchController.active) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.searchController.active = <span class=\"literal\">NO</span>;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.searchController.searchBar removeFromSuperview];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)updateSearchResultsForSearchController:(<span class=\"built_in\">UISearchController</span> *)searchController &#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *searchString = [<span class=\"keyword\">self</span>.searchController.searchBar text];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"===%@\"</span>,searchString);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">NSPredicate</span> *preicate = [<span class=\"built_in\">NSPredicate</span> predicateWithFormat:<span class=\"string\">@\"SELF CONTAINS[c] %@\"</span>, searchString];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.searchArray!= <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.searchArray removeAllObjects];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//过滤数据</span></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     对象数组过滤</div><div class=\"line\"></div><div class=\"line\">     ios提供了一个filteredArrayUsingPredicate 方法，通过给定条件来进行过滤，过滤后形成一个新的数组。 而NSMutableArray提供了一个filterUsingPredicate方法，在原数组中保留符合条件的数组元素。</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">self</span>.searchArray= [<span class=\"built_in\">NSMutableArray</span> arrayWithArray:[<span class=\"keyword\">self</span>.allMovieArray filteredArrayUsingPredicate:preicate]];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"searchArray===%@\"</span>,<span class=\"keyword\">self</span>.searchArray);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//刷新表格</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.myTableView reloadData];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*****************searchMethod*********s*********/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*****************tableviewmethod*********s*********/</span></div><div class=\"line\">-(<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section</div><div class=\"line\">&#123;</div><div class=\"line\">     <span class=\"comment\">//如果searchController是活动状态,说明是当前正在搜索</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.searchController.active) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.searchArray.count;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.allMovieArray.count;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">     <span class=\"keyword\">static</span> <span class=\"built_in\">NSString</span> *cellIdentifier = <span class=\"string\">@\"cell\"</span>;</div><div class=\"line\">    <span class=\"built_in\">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];</div><div class=\"line\">    <span class=\"keyword\">if</span> (cell == <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">       </div><div class=\"line\">        cell = [[<span class=\"built_in\">UITableViewCell</span> alloc] initWithStyle:<span class=\"built_in\">UITableViewCellStyleDefault</span> reuseIdentifier:cellIdentifier];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.searchController.active) &#123;</div><div class=\"line\">        cell.textLabel.text = [<span class=\"keyword\">self</span>.searchArray objectAtIndex:indexPath.row];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        cell.textLabel.text = [<span class=\"keyword\">self</span>.allMovieArray objectAtIndex:indexPath.row];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> cell;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    DetailViewController *detailVC = [[DetailViewController alloc] init];</div><div class=\"line\">    <span class=\"comment\">//如果searchController是活动状态,说明是当前正在搜索</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.searchController.active) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"选中搜索列表\"</span>);</div><div class=\"line\">        detailVC.movieName = [<span class=\"keyword\">self</span>.searchArray objectAtIndex:indexPath.row];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"选中所有列表\"</span>);</div><div class=\"line\">        detailVC.movieName = [<span class=\"keyword\">self</span>.allMovieArray objectAtIndex:indexPath.row];</div><div class=\"line\">    &#125;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController pushViewController:detailVC animated:<span class=\"literal\">YES</span>];</div><div class=\"line\">    [detailVC release];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">CGFloat</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">60</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*****************tableviewmethod*********s*********/</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"keyword\">self</span>.allMovieArray = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">    <span class=\"keyword\">self</span>.searchArray = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/************UITableView*************/</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView = [[<span class=\"built_in\">UITableView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">self</span>.view.frame.size.width, <span class=\"keyword\">self</span>.view.frame.size.height) style:<span class=\"built_in\">UITableViewStylePlain</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.myTableView];</div><div class=\"line\">    [_myTableView release];</div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView.dataSource = <span class=\"keyword\">self</span>;</div><div class=\"line\">    <span class=\"comment\">/************UITableView*************/</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">/************UISearchController*************/</span></div><div class=\"line\">    <span class=\"comment\">//创建UISearchController</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.searchController = [[<span class=\"built_in\">UISearchController</span> alloc] initWithSearchResultsController:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView.tableHeaderView = <span class=\"keyword\">self</span>.searchController.searchBar;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//成为代理</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.searchController.searchResultsUpdater = <span class=\"keyword\">self</span>;</div><div class=\"line\">    <span class=\"comment\">/************UISearchController*************/</span></div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">/************interface*************/</span></div><div class=\"line\">    <span class=\"comment\">//设置开始搜索时背景显示与否 页面背景阴影效果,一般不要设置.</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.searchController.dimsBackgroundDuringPresentation = <span class=\"literal\">NO</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置点击搜索框时候隐藏导航栏</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.searchController.hidesNavigationBarDuringPresentation = <span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"comment\">/************interface*************/</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">/************searchBar*************/</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.searchController.searchBar.frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"keyword\">self</span>.searchController.searchBar.frame.origin.x, <span class=\"keyword\">self</span>.searchController.searchBar.frame.origin.y, <span class=\"keyword\">self</span>.searchController.searchBar.frame.size.width, <span class=\"number\">44.0</span>);</div><div class=\"line\"><span class=\"comment\">//    [searchBar sizeToFit]:设置searchBar位置自适应</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.searchController.searchBar sizeToFit];</div><div class=\"line\">    <span class=\"comment\">/************searchBar*************/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*****************searchMethod*********s*********/</span></div><div class=\"line\"><span class=\"comment\">//UISearchController的移除</span></div><div class=\"line\"><span class=\"comment\">//在viewWillDisappear中要将UISearchController移除, 否则切换到下一个View中, 搜索框仍然会有短暂的存在.</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewWillDisappear:(<span class=\"built_in\">BOOL</span>)animated &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewWillDisappear:animated];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.searchController.active) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.searchController.active = <span class=\"literal\">NO</span>;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.searchController.searchBar removeFromSuperview];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)updateSearchResultsForSearchController:(<span class=\"built_in\">UISearchController</span> *)searchController &#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *searchString = [<span class=\"keyword\">self</span>.searchController.searchBar text];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"===%@\"</span>,searchString);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">NSPredicate</span> *preicate = [<span class=\"built_in\">NSPredicate</span> predicateWithFormat:<span class=\"string\">@\"SELF CONTAINS[c] %@\"</span>, searchString];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.searchArray!= <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.searchArray removeAllObjects];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//过滤数据</span></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     对象数组过滤</div><div class=\"line\"></div><div class=\"line\">     ios提供了一个filteredArrayUsingPredicate 方法，通过给定条件来进行过滤，过滤后形成一个新的数组。 而NSMutableArray提供了一个filterUsingPredicate方法，在原数组中保留符合条件的数组元素。</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.searchArray= [<span class=\"built_in\">NSMutableArray</span> arrayWithArray:[<span class=\"keyword\">self</span>.allMovieArray filteredArrayUsingPredicate:preicate]];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"searchArray===%@\"</span>,<span class=\"keyword\">self</span>.searchArray);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//刷新表格</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.myTableView reloadData];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*****************searchMethod*********s*********/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*****************tableviewmethod*********s*********/</span></div><div class=\"line\">-(<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section</div><div class=\"line\">&#123;</div><div class=\"line\">     <span class=\"comment\">//如果searchController是活动状态,说明是当前正在搜索</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.searchController.active) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.searchArray.count;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.allMovieArray.count;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">     <span class=\"keyword\">static</span> <span class=\"built_in\">NSString</span> *cellIdentifier = <span class=\"string\">@\"cell\"</span>;</div><div class=\"line\">    <span class=\"built_in\">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];</div><div class=\"line\">    <span class=\"keyword\">if</span> (cell == <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">       </div><div class=\"line\">        cell = [[<span class=\"built_in\">UITableViewCell</span> alloc] initWithStyle:<span class=\"built_in\">UITableViewCellStyleDefault</span> reuseIdentifier:cellIdentifier];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.searchController.active) &#123;</div><div class=\"line\">        cell.textLabel.text = [<span class=\"keyword\">self</span>.searchArray objectAtIndex:indexPath.row];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        cell.textLabel.text = [<span class=\"keyword\">self</span>.allMovieArray objectAtIndex:indexPath.row];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> cell;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    DetailViewController *detailVC = [[DetailViewController alloc] init];</div><div class=\"line\">    <span class=\"comment\">//如果searchController是活动状态,说明是当前正在搜索</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.searchController.active) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"选中搜索列表\"</span>);</div><div class=\"line\">        detailVC.movieName = [<span class=\"keyword\">self</span>.searchArray objectAtIndex:indexPath.row];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"选中所有列表\"</span>);</div><div class=\"line\">        detailVC.movieName = [<span class=\"keyword\">self</span>.allMovieArray objectAtIndex:indexPath.row];</div><div class=\"line\">    &#125;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.navigationController pushViewController:detailVC animated:<span class=\"literal\">YES</span>];</div><div class=\"line\">    [detailVC release];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">CGFloat</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">60</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*****************tableviewmethod*********s*********/</span></div></pre></td></tr></table></figure>"},{"title":"UISlider滑条","date":"2016-10-08T03:39:43.000Z","_content":"UIDevice提供了多种属性、类函数及状态通知，帮助我们全方位了解设备状况。从检测电池电量到定位设备与临近感应，UIDevice所做的工作就是为应用程序提供用户及设备的一些信息。UIDevice类还能够收集关于设备的各种具体细节，例如机型及iOS版本等。其中大部分属性都对开发工作具有积极的辅助作用。下面的代码简单的使用UIDevice获取手机属性。\n<!-- more -->\n\n```objc\nUISlider*slider = [[UISlideralloc]initWithFrame:CGRectMake(80,400,200,40)];\n    [self.view addSubview:slider];\n    [slider release];\n    slider.backgroundColor = [UIColor lightGrayColor];\n   \n    //最小滑条颜色\n    slider.minimumTrackTintColor = [UIColor redColor];\n    //最大滑条颜色\n    slider.maximumTrackTintColor = [UIColor greenColor];\n    //设置滑块最小值\n\n    //设置滑块最大值\n    slider.maximumValue = 10;\n    //默认的值\n    slider.value = 5;\n    //核心方法\n    [slider addTarget:self action:@selector(sliderAction:) forControlEvents:UIControlEventValueChanged];\n   \n\n}\n-(void)sliderAction:(UISlider *)slider\n{\n\n   \n    NSLog(@\"value = %f\",slider.value);\n}\n```\n\n","source":"_posts/oc/UISlider滑条.md","raw":"---\ntitle: UISlider滑条\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\nUIDevice提供了多种属性、类函数及状态通知，帮助我们全方位了解设备状况。从检测电池电量到定位设备与临近感应，UIDevice所做的工作就是为应用程序提供用户及设备的一些信息。UIDevice类还能够收集关于设备的各种具体细节，例如机型及iOS版本等。其中大部分属性都对开发工作具有积极的辅助作用。下面的代码简单的使用UIDevice获取手机属性。\n<!-- more -->\n\n```objc\nUISlider*slider = [[UISlideralloc]initWithFrame:CGRectMake(80,400,200,40)];\n    [self.view addSubview:slider];\n    [slider release];\n    slider.backgroundColor = [UIColor lightGrayColor];\n   \n    //最小滑条颜色\n    slider.minimumTrackTintColor = [UIColor redColor];\n    //最大滑条颜色\n    slider.maximumTrackTintColor = [UIColor greenColor];\n    //设置滑块最小值\n\n    //设置滑块最大值\n    slider.maximumValue = 10;\n    //默认的值\n    slider.value = 5;\n    //核心方法\n    [slider addTarget:self action:@selector(sliderAction:) forControlEvents:UIControlEventValueChanged];\n   \n\n}\n-(void)sliderAction:(UISlider *)slider\n{\n\n   \n    NSLog(@\"value = %f\",slider.value);\n}\n```\n\n","slug":"oc/UISlider滑条","published":1,"updated":"2016-10-08T05:54:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97q002021xwvpp5xt8h","content":"<p>UIDevice提供了多种属性、类函数及状态通知，帮助我们全方位了解设备状况。从检测电池电量到定位设备与临近感应，UIDevice所做的工作就是为应用程序提供用户及设备的一些信息。UIDevice类还能够收集关于设备的各种具体细节，例如机型及iOS版本等。其中大部分属性都对开发工作具有积极的辅助作用。下面的代码简单的使用UIDevice获取手机属性。<br><a id=\"more\"></a></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UISlider</span>*slider = [[<span class=\"built_in\">UISlideralloc</span>]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">80</span>,<span class=\"number\">400</span>,<span class=\"number\">200</span>,<span class=\"number\">40</span>)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:slider];</div><div class=\"line\">    [slider release];</div><div class=\"line\">    slider.backgroundColor = [<span class=\"built_in\">UIColor</span> lightGrayColor];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//最小滑条颜色</span></div><div class=\"line\">    slider.minimumTrackTintColor = [<span class=\"built_in\">UIColor</span> redColor];</div><div class=\"line\">    <span class=\"comment\">//最大滑条颜色</span></div><div class=\"line\">    slider.maximumTrackTintColor = [<span class=\"built_in\">UIColor</span> greenColor];</div><div class=\"line\">    <span class=\"comment\">//设置滑块最小值</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//设置滑块最大值</span></div><div class=\"line\">    slider.maximumValue = <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"comment\">//默认的值</span></div><div class=\"line\">    slider.value = <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"comment\">//核心方法</span></div><div class=\"line\">    [slider addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(sliderAction:) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</div><div class=\"line\">   </div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)sliderAction:(<span class=\"built_in\">UISlider</span> *)slider</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"value = %f\"</span>,slider.value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>UIDevice提供了多种属性、类函数及状态通知，帮助我们全方位了解设备状况。从检测电池电量到定位设备与临近感应，UIDevice所做的工作就是为应用程序提供用户及设备的一些信息。UIDevice类还能够收集关于设备的各种具体细节，例如机型及iOS版本等。其中大部分属性都对开发工作具有积极的辅助作用。下面的代码简单的使用UIDevice获取手机属性。<br>","more":"</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UISlider</span>*slider = [[<span class=\"built_in\">UISlideralloc</span>]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">80</span>,<span class=\"number\">400</span>,<span class=\"number\">200</span>,<span class=\"number\">40</span>)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:slider];</div><div class=\"line\">    [slider release];</div><div class=\"line\">    slider.backgroundColor = [<span class=\"built_in\">UIColor</span> lightGrayColor];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//最小滑条颜色</span></div><div class=\"line\">    slider.minimumTrackTintColor = [<span class=\"built_in\">UIColor</span> redColor];</div><div class=\"line\">    <span class=\"comment\">//最大滑条颜色</span></div><div class=\"line\">    slider.maximumTrackTintColor = [<span class=\"built_in\">UIColor</span> greenColor];</div><div class=\"line\">    <span class=\"comment\">//设置滑块最小值</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//设置滑块最大值</span></div><div class=\"line\">    slider.maximumValue = <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"comment\">//默认的值</span></div><div class=\"line\">    slider.value = <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"comment\">//核心方法</span></div><div class=\"line\">    [slider addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(sliderAction:) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</div><div class=\"line\">   </div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)sliderAction:(<span class=\"built_in\">UISlider</span> *)slider</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"value = %f\"</span>,slider.value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"UISwitch 圆点按钮","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n//UISwitch的初始化\n    UISwitch *switchView = [[UISwitch alloc] initWithFrame:CGRectMake(54.0f, 16.0f, 100.0f, 28.0f)];\n    [view addSubview:switchView];\n   \n   \n    //设置UISwitch的初始化状态\n    switchView.on = YES;//设置初始为ON的一边\n   \n   \n    //UISwitch事件的响应\n    [switchView addTarget:self action:@selector(switchAction:) forControlEvents:UIControlEventValueChanged];\n  \n    //开启状态的颜色\n    switchView.onTintColor = [UIColor redColor];\n   \n    //关闭状态的颜色\n    switchView.tintColor = [UIColor greenColor];\n\n    //圆圈的颜色\n    switchView.thumbTintColor = [UIColor yellowColor];\n```\n\n","source":"_posts/oc/UISwitch 圆点按钮.md","raw":"---\ntitle: UISwitch 圆点按钮\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n//UISwitch的初始化\n    UISwitch *switchView = [[UISwitch alloc] initWithFrame:CGRectMake(54.0f, 16.0f, 100.0f, 28.0f)];\n    [view addSubview:switchView];\n   \n   \n    //设置UISwitch的初始化状态\n    switchView.on = YES;//设置初始为ON的一边\n   \n   \n    //UISwitch事件的响应\n    [switchView addTarget:self action:@selector(switchAction:) forControlEvents:UIControlEventValueChanged];\n  \n    //开启状态的颜色\n    switchView.onTintColor = [UIColor redColor];\n   \n    //关闭状态的颜色\n    switchView.tintColor = [UIColor greenColor];\n\n    //圆圈的颜色\n    switchView.thumbTintColor = [UIColor yellowColor];\n```\n\n","slug":"oc/UISwitch 圆点按钮","published":1,"updated":"2016-10-08T06:00:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97s002221xwsjqqafg5","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//UISwitch的初始化</span></div><div class=\"line\">    <span class=\"built_in\">UISwitch</span> *switchView = [[<span class=\"built_in\">UISwitch</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">54.0</span>f, <span class=\"number\">16.0</span>f, <span class=\"number\">100.0</span>f, <span class=\"number\">28.0</span>f)];</div><div class=\"line\">    [view addSubview:switchView];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置UISwitch的初始化状态</span></div><div class=\"line\">    switchView.on = <span class=\"literal\">YES</span>;<span class=\"comment\">//设置初始为ON的一边</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//UISwitch事件的响应</span></div><div class=\"line\">    [switchView addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(switchAction:) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">//开启状态的颜色</span></div><div class=\"line\">    switchView.onTintColor = [<span class=\"built_in\">UIColor</span> redColor];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//关闭状态的颜色</span></div><div class=\"line\">    switchView.tintColor = [<span class=\"built_in\">UIColor</span> greenColor];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//圆圈的颜色</span></div><div class=\"line\">    switchView.thumbTintColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//UISwitch的初始化</span></div><div class=\"line\">    <span class=\"built_in\">UISwitch</span> *switchView = [[<span class=\"built_in\">UISwitch</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">54.0</span>f, <span class=\"number\">16.0</span>f, <span class=\"number\">100.0</span>f, <span class=\"number\">28.0</span>f)];</div><div class=\"line\">    [view addSubview:switchView];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置UISwitch的初始化状态</span></div><div class=\"line\">    switchView.on = <span class=\"literal\">YES</span>;<span class=\"comment\">//设置初始为ON的一边</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//UISwitch事件的响应</span></div><div class=\"line\">    [switchView addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(switchAction:) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">//开启状态的颜色</span></div><div class=\"line\">    switchView.onTintColor = [<span class=\"built_in\">UIColor</span> redColor];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//关闭状态的颜色</span></div><div class=\"line\">    switchView.tintColor = [<span class=\"built_in\">UIColor</span> greenColor];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//圆圈的颜色</span></div><div class=\"line\">    switchView.thumbTintColor = [<span class=\"built_in\">UIColor</span> yellowColor];</div></pre></td></tr></table></figure>"},{"title":"UITextField","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n  //创建 \n     UITextField*textfield = [[UITextField             alloc]initWithFrame:CGRectMake(20,20,200,40)];\n    [self.window addSubview:self.myTextField];\n   \n    //设置背景颜色\n    self.myTextField.backgroundColor = [UIColor clearColor];\n   \n    //设置输入框样式\n    self.myTextField.borderStyle = UITextBorderStyleRoundedRect;\n   \n    //密文输入\n    self.myTextField.secureTextEntry = YES;\n   \n    //设置占位提示符\n    self.myTextField.placeholder = @\"请输入\";\n   \n    //设置输入框删除按钮\n    self.myTextField.clearButtonMode = UITextFieldViewModeAlways;\n   \n    //设置键盘类型\n    self.myTextField.keyboardType = UIKeyboardTypeNumberPad;\n\n\n/******按按钮键盘隐藏*********************************/\n  //创建按钮\n    UIButton *Button = [UIButton buttonWithType:UIButtonTypeCustom];\n    [self.window addSubview:Button];\n    Button.frame = CGRectMake(20, 80, 100, 30);\n    Button.backgroundColor = [UIColor cyanColor];\n\n    [Button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];\n\n-(void) buttonAction:(UIButton *)b\n{\n    [self.myTextField resignFirstResponder];\n    //取消第一响应者\n}\n/******************************************************/\n\n\n\n/******按return键盘隐藏*********************************/\n1.签UITextFieldDelegate协议\n@interface AppDelegate : UIResponder <UIApplicationDelegate,UITextFieldDelegate>\n\n2.成为代理人\n哪个输入框成为代理人哪个输入框有此功能\n self.myTextField.delegate = self;\n\n3.实现协议里的方法\n//点击return建的时候被触发\n通用，一个就可以给所有输入框用\n- (BOOL)textFieldShouldReturn:(UITextField *)textField\n{\n    [self.myTextField resignFirstResponder];\n    return YES;\n\n}\n/******************************************************/\n\n/******按空白处键盘隐藏*********************************/\n //按空白处键盘回收\n    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(backgroundTap:)];\n    [self.view addGestureRecognizer:tap];\n\n//按空白处键盘回收调用的方法\n- (IBAction)backgroundTap:(id)sender {\n    [self.studentDetailV.tf1  resignFirstResponder];\n    [self.studentDetailV.tf2  resignFirstResponder];\n    [self.studentDetailV.tf3  resignFirstResponder];\n    [self.studentDetailV.tf4  resignFirstResponder];\n    [self.studentDetailV.tf5  resignFirstResponder];\n   \n}\n/******************************************************/\n\n\n\n\n```\n\n","source":"_posts/oc/UITextField.md","raw":"---\ntitle: UITextField\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n  //创建 \n     UITextField*textfield = [[UITextField             alloc]initWithFrame:CGRectMake(20,20,200,40)];\n    [self.window addSubview:self.myTextField];\n   \n    //设置背景颜色\n    self.myTextField.backgroundColor = [UIColor clearColor];\n   \n    //设置输入框样式\n    self.myTextField.borderStyle = UITextBorderStyleRoundedRect;\n   \n    //密文输入\n    self.myTextField.secureTextEntry = YES;\n   \n    //设置占位提示符\n    self.myTextField.placeholder = @\"请输入\";\n   \n    //设置输入框删除按钮\n    self.myTextField.clearButtonMode = UITextFieldViewModeAlways;\n   \n    //设置键盘类型\n    self.myTextField.keyboardType = UIKeyboardTypeNumberPad;\n\n\n/******按按钮键盘隐藏*********************************/\n  //创建按钮\n    UIButton *Button = [UIButton buttonWithType:UIButtonTypeCustom];\n    [self.window addSubview:Button];\n    Button.frame = CGRectMake(20, 80, 100, 30);\n    Button.backgroundColor = [UIColor cyanColor];\n\n    [Button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];\n\n-(void) buttonAction:(UIButton *)b\n{\n    [self.myTextField resignFirstResponder];\n    //取消第一响应者\n}\n/******************************************************/\n\n\n\n/******按return键盘隐藏*********************************/\n1.签UITextFieldDelegate协议\n@interface AppDelegate : UIResponder <UIApplicationDelegate,UITextFieldDelegate>\n\n2.成为代理人\n哪个输入框成为代理人哪个输入框有此功能\n self.myTextField.delegate = self;\n\n3.实现协议里的方法\n//点击return建的时候被触发\n通用，一个就可以给所有输入框用\n- (BOOL)textFieldShouldReturn:(UITextField *)textField\n{\n    [self.myTextField resignFirstResponder];\n    return YES;\n\n}\n/******************************************************/\n\n/******按空白处键盘隐藏*********************************/\n //按空白处键盘回收\n    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(backgroundTap:)];\n    [self.view addGestureRecognizer:tap];\n\n//按空白处键盘回收调用的方法\n- (IBAction)backgroundTap:(id)sender {\n    [self.studentDetailV.tf1  resignFirstResponder];\n    [self.studentDetailV.tf2  resignFirstResponder];\n    [self.studentDetailV.tf3  resignFirstResponder];\n    [self.studentDetailV.tf4  resignFirstResponder];\n    [self.studentDetailV.tf5  resignFirstResponder];\n   \n}\n/******************************************************/\n\n\n\n\n```\n\n","slug":"oc/UITextField","published":1,"updated":"2016-10-08T05:59:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97t002421xw43fle5fg","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">//创建 </span></div><div class=\"line\">     <span class=\"built_in\">UITextField</span>*textfield = [[<span class=\"built_in\">UITextField</span>             alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>,<span class=\"number\">20</span>,<span class=\"number\">200</span>,<span class=\"number\">40</span>)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.window addSubview:<span class=\"keyword\">self</span>.myTextField];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置背景颜色</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTextField.backgroundColor = [<span class=\"built_in\">UIColor</span> clearColor];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置输入框样式</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTextField.borderStyle = <span class=\"built_in\">UITextBorderStyleRoundedRect</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//密文输入</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTextField.secureTextEntry = <span class=\"literal\">YES</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置占位提示符</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTextField.placeholder = <span class=\"string\">@\"请输入\"</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置输入框删除按钮</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTextField.clearButtonMode = <span class=\"built_in\">UITextFieldViewModeAlways</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置键盘类型</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTextField.keyboardType = <span class=\"built_in\">UIKeyboardTypeNumberPad</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/******按按钮键盘隐藏*********************************/</span></div><div class=\"line\">  <span class=\"comment\">//创建按钮</span></div><div class=\"line\">    <span class=\"built_in\">UIButton</span> *Button = [<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeCustom</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.window addSubview:Button];</div><div class=\"line\">    Button.frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">80</span>, <span class=\"number\">100</span>, <span class=\"number\">30</span>);</div><div class=\"line\">    Button.backgroundColor = [<span class=\"built_in\">UIColor</span> cyanColor];</div><div class=\"line\"></div><div class=\"line\">    [Button addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(buttonAction:) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>) buttonAction:(<span class=\"built_in\">UIButton</span> *)b</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.myTextField resignFirstResponder];</div><div class=\"line\">    <span class=\"comment\">//取消第一响应者</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/******************************************************/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/******按return键盘隐藏*********************************/</span></div><div class=\"line\"><span class=\"number\">1.</span>签<span class=\"built_in\">UITextFieldDelegate</span>协议</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AppDelegate</span> : <span class=\"title\">UIResponder</span> &lt;<span class=\"title\">UIApplicationDelegate</span>,<span class=\"title\">UITextFieldDelegate</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2.</span>成为代理人</div><div class=\"line\">哪个输入框成为代理人哪个输入框有此功能</div><div class=\"line\"> <span class=\"keyword\">self</span>.myTextField.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">3.</span>实现协议里的方法</div><div class=\"line\"><span class=\"comment\">//点击return建的时候被触发</span></div><div class=\"line\">通用，一个就可以给所有输入框用</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)textFieldShouldReturn:(<span class=\"built_in\">UITextField</span> *)textField</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.myTextField resignFirstResponder];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/******************************************************/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/******按空白处键盘隐藏*********************************/</span></div><div class=\"line\"> <span class=\"comment\">//按空白处键盘回收</span></div><div class=\"line\">    <span class=\"built_in\">UITapGestureRecognizer</span> *tap = [[<span class=\"built_in\">UITapGestureRecognizer</span> alloc]initWithTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(backgroundTap:)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addGestureRecognizer:tap];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//按空白处键盘回收调用的方法</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)backgroundTap:(<span class=\"keyword\">id</span>)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.studentDetailV.tf1  resignFirstResponder];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.studentDetailV.tf2  resignFirstResponder];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.studentDetailV.tf3  resignFirstResponder];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.studentDetailV.tf4  resignFirstResponder];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.studentDetailV.tf5  resignFirstResponder];</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/******************************************************/</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">//创建 </span></div><div class=\"line\">     <span class=\"built_in\">UITextField</span>*textfield = [[<span class=\"built_in\">UITextField</span>             alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>,<span class=\"number\">20</span>,<span class=\"number\">200</span>,<span class=\"number\">40</span>)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.window addSubview:<span class=\"keyword\">self</span>.myTextField];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置背景颜色</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTextField.backgroundColor = [<span class=\"built_in\">UIColor</span> clearColor];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置输入框样式</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTextField.borderStyle = <span class=\"built_in\">UITextBorderStyleRoundedRect</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//密文输入</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTextField.secureTextEntry = <span class=\"literal\">YES</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置占位提示符</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTextField.placeholder = <span class=\"string\">@\"请输入\"</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置输入框删除按钮</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTextField.clearButtonMode = <span class=\"built_in\">UITextFieldViewModeAlways</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置键盘类型</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTextField.keyboardType = <span class=\"built_in\">UIKeyboardTypeNumberPad</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/******按按钮键盘隐藏*********************************/</span></div><div class=\"line\">  <span class=\"comment\">//创建按钮</span></div><div class=\"line\">    <span class=\"built_in\">UIButton</span> *Button = [<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeCustom</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.window addSubview:Button];</div><div class=\"line\">    Button.frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">80</span>, <span class=\"number\">100</span>, <span class=\"number\">30</span>);</div><div class=\"line\">    Button.backgroundColor = [<span class=\"built_in\">UIColor</span> cyanColor];</div><div class=\"line\"></div><div class=\"line\">    [Button addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(buttonAction:) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>) buttonAction:(<span class=\"built_in\">UIButton</span> *)b</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.myTextField resignFirstResponder];</div><div class=\"line\">    <span class=\"comment\">//取消第一响应者</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/******************************************************/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/******按return键盘隐藏*********************************/</span></div><div class=\"line\"><span class=\"number\">1.</span>签<span class=\"built_in\">UITextFieldDelegate</span>协议</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AppDelegate</span> : <span class=\"title\">UIResponder</span> &lt;<span class=\"title\">UIApplicationDelegate</span>,<span class=\"title\">UITextFieldDelegate</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2.</span>成为代理人</div><div class=\"line\">哪个输入框成为代理人哪个输入框有此功能</div><div class=\"line\"> <span class=\"keyword\">self</span>.myTextField.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">3.</span>实现协议里的方法</div><div class=\"line\"><span class=\"comment\">//点击return建的时候被触发</span></div><div class=\"line\">通用，一个就可以给所有输入框用</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)textFieldShouldReturn:(<span class=\"built_in\">UITextField</span> *)textField</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.myTextField resignFirstResponder];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/******************************************************/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/******按空白处键盘隐藏*********************************/</span></div><div class=\"line\"> <span class=\"comment\">//按空白处键盘回收</span></div><div class=\"line\">    <span class=\"built_in\">UITapGestureRecognizer</span> *tap = [[<span class=\"built_in\">UITapGestureRecognizer</span> alloc]initWithTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(backgroundTap:)];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addGestureRecognizer:tap];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//按空白处键盘回收调用的方法</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)backgroundTap:(<span class=\"keyword\">id</span>)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.studentDetailV.tf1  resignFirstResponder];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.studentDetailV.tf2  resignFirstResponder];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.studentDetailV.tf3  resignFirstResponder];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.studentDetailV.tf4  resignFirstResponder];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.studentDetailV.tf5  resignFirstResponder];</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/******************************************************/</span></div></pre></td></tr></table></figure>"},{"title":"UITextView","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = [UIColor whiteColor];\n   \n    self.textView = [[UITextView alloc]initWithFrame:CGRectMake(0, 667-80, 375, 80)];\n   \n    self.textView.delegate = self;\n   \n    self.textView.font = [UIFont systemFontOfSize:20];\n   \n    self.textView.textColor = [UIColor blackColor];\n   \n    self.textView.contentInset = UIEdgeInsetsMake(0, 0, 0, 0);//添加滚动区域\n\n    self.textView.text = @\"习大大\";\n   \n    self.textView.scrollEnabled = YES;//是否可滚动\n\n    self.textView.editable = YES;//是否可编辑\n   \n    self.textView.returnKeyType = UIReturnKeyDefault;//返回键的类型\n   \n    self.textView.keyboardType = UIKeyboardTypeDefault;//键盘类型\n   \n    self.textView.scrollEnabled = YES;//是否可以拖动\n   \n    self.textView.autoresizingMask = UIViewAutoresizingFlexibleHeight;//自适应高度\n   \n    self.textView.layer.cornerRadius = 8; //边框设置为圆角\n   \n    self.textView.layer.borderWidth = 1;\n   \n//    设置边框颜色 参数2是一个数组 分别为三基色和alpha分量；\n    CGFloat color[]={0.5, 0.5, 0.5, 1};\n    self.textView.layer.borderColor = CGColorCreate(CGColorSpaceCreateDeviceRGB(),color);\n    self.textView.layer.masksToBounds = YES;\n   \n//    [self.textView becomeFirstResponder];//获得焦点 程序运行就获取光标\n\n    self.myView = [[UIView alloc]initWithFrame:[[UIScreen mainScreen]bounds]];\n    self.myView.tag = 1000;\n   \n    [self.view addSubview:self.myView];\n   \n    [self.myView addSubview:self.textView];\n   \n    //注册通知,监听键盘弹出事件\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardDidShow:) name:UIKeyboardDidShowNotification object:nil];\n   \n    //注册通知,监听键盘消失事件\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardDidHidden) name:UIKeyboardDidHideNotification object:nil];\n}\n\n//将要开始编辑\n- (BOOL)textViewShouldBeginEditing:(UITextView *)textView{\n   \n    return YES;\n}\n\n//将要结束编辑\n- (BOOL)textViewShouldEndEditing:(UITextView *)textView{\n   \n    return YES;\n}\n\n//开始编辑\n- (void)textViewDidBeginEditing:(UITextView *)textView{\n   \n}\n\n//结束编辑\n- (void)textViewDidEndEditing:(UITextView *)textView{\n   \n}\n\n//焦点发生改变\n- (void)textViewDidChangeSelection:(UITextView *)textView{\n   \n}\n\n//内容发生改变编辑\n- (void)textViewDidChange:(UITextView *)textView{\n\n}\n\n//内容将要发生改变编辑\n\n//控制输入文字的长度和内容，可通调用以下代理方法实现\n- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text{\n   \n    if (range.location>=100){\n        //控制输入文本的长度\n        return  NO;\n    }\n    if ([text isEqualToString:@\"\\n\"]) {\n        //禁止输入换行\n        return NO;\n    }\n    else{\n        return YES;\n    }\n}\n\n// 键盘弹出时\n-(void)keyboardDidShow:(NSNotification *)notification{\n   \n    //获取键盘高度\n    NSValue *keyboardObject = [[notification userInfo] objectForKey:UIKeyboardFrameEndUserInfoKey];\n   \n    CGRect keyboardRect;\n   \n    [keyboardObject getValue:&keyboardRect];\n   \n    //调整放置有textView的view的位置\n   \n    //设置动画\n    [UIView beginAnimations:nil context:nil];\n   \n    //定义动画时间\n    [UIView setAnimationDuration:kAnimationDuration];\n   \n    //设置view的frame，往上平移\n    [(UIView *)[self.view viewWithTag:1000] setFrame:CGRectMake(0, self.view.frame.size.height-keyboardRect.size.height-kViewHeight, 375, kViewHeight)];\n   \n    [UIView commitAnimations];\n}\n\n//键盘消失时\n-(void)keyboardDidHidden\n{\n    //定义动画\n    [UIView beginAnimations:nil context:nil];\n    [UIView setAnimationDuration:kAnimationDuration];\n    //设置view的frame，往下平移\n    [(UIView *)[self.view viewWithTag:1000] setFrame:CGRectMake(0, self.view.frame.size.height-kViewHeight, 375, kViewHeight)];\n    [UIView commitAnimations];\n}\n\n-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event{\n   \n    [self.textView resignFirstResponder];\n}\n@end\n```\n\n","source":"_posts/oc/UITextView.md","raw":"---\ntitle: UITextView\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = [UIColor whiteColor];\n   \n    self.textView = [[UITextView alloc]initWithFrame:CGRectMake(0, 667-80, 375, 80)];\n   \n    self.textView.delegate = self;\n   \n    self.textView.font = [UIFont systemFontOfSize:20];\n   \n    self.textView.textColor = [UIColor blackColor];\n   \n    self.textView.contentInset = UIEdgeInsetsMake(0, 0, 0, 0);//添加滚动区域\n\n    self.textView.text = @\"习大大\";\n   \n    self.textView.scrollEnabled = YES;//是否可滚动\n\n    self.textView.editable = YES;//是否可编辑\n   \n    self.textView.returnKeyType = UIReturnKeyDefault;//返回键的类型\n   \n    self.textView.keyboardType = UIKeyboardTypeDefault;//键盘类型\n   \n    self.textView.scrollEnabled = YES;//是否可以拖动\n   \n    self.textView.autoresizingMask = UIViewAutoresizingFlexibleHeight;//自适应高度\n   \n    self.textView.layer.cornerRadius = 8; //边框设置为圆角\n   \n    self.textView.layer.borderWidth = 1;\n   \n//    设置边框颜色 参数2是一个数组 分别为三基色和alpha分量；\n    CGFloat color[]={0.5, 0.5, 0.5, 1};\n    self.textView.layer.borderColor = CGColorCreate(CGColorSpaceCreateDeviceRGB(),color);\n    self.textView.layer.masksToBounds = YES;\n   \n//    [self.textView becomeFirstResponder];//获得焦点 程序运行就获取光标\n\n    self.myView = [[UIView alloc]initWithFrame:[[UIScreen mainScreen]bounds]];\n    self.myView.tag = 1000;\n   \n    [self.view addSubview:self.myView];\n   \n    [self.myView addSubview:self.textView];\n   \n    //注册通知,监听键盘弹出事件\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardDidShow:) name:UIKeyboardDidShowNotification object:nil];\n   \n    //注册通知,监听键盘消失事件\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardDidHidden) name:UIKeyboardDidHideNotification object:nil];\n}\n\n//将要开始编辑\n- (BOOL)textViewShouldBeginEditing:(UITextView *)textView{\n   \n    return YES;\n}\n\n//将要结束编辑\n- (BOOL)textViewShouldEndEditing:(UITextView *)textView{\n   \n    return YES;\n}\n\n//开始编辑\n- (void)textViewDidBeginEditing:(UITextView *)textView{\n   \n}\n\n//结束编辑\n- (void)textViewDidEndEditing:(UITextView *)textView{\n   \n}\n\n//焦点发生改变\n- (void)textViewDidChangeSelection:(UITextView *)textView{\n   \n}\n\n//内容发生改变编辑\n- (void)textViewDidChange:(UITextView *)textView{\n\n}\n\n//内容将要发生改变编辑\n\n//控制输入文字的长度和内容，可通调用以下代理方法实现\n- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text{\n   \n    if (range.location>=100){\n        //控制输入文本的长度\n        return  NO;\n    }\n    if ([text isEqualToString:@\"\\n\"]) {\n        //禁止输入换行\n        return NO;\n    }\n    else{\n        return YES;\n    }\n}\n\n// 键盘弹出时\n-(void)keyboardDidShow:(NSNotification *)notification{\n   \n    //获取键盘高度\n    NSValue *keyboardObject = [[notification userInfo] objectForKey:UIKeyboardFrameEndUserInfoKey];\n   \n    CGRect keyboardRect;\n   \n    [keyboardObject getValue:&keyboardRect];\n   \n    //调整放置有textView的view的位置\n   \n    //设置动画\n    [UIView beginAnimations:nil context:nil];\n   \n    //定义动画时间\n    [UIView setAnimationDuration:kAnimationDuration];\n   \n    //设置view的frame，往上平移\n    [(UIView *)[self.view viewWithTag:1000] setFrame:CGRectMake(0, self.view.frame.size.height-keyboardRect.size.height-kViewHeight, 375, kViewHeight)];\n   \n    [UIView commitAnimations];\n}\n\n//键盘消失时\n-(void)keyboardDidHidden\n{\n    //定义动画\n    [UIView beginAnimations:nil context:nil];\n    [UIView setAnimationDuration:kAnimationDuration];\n    //设置view的frame，往下平移\n    [(UIView *)[self.view viewWithTag:1000] setFrame:CGRectMake(0, self.view.frame.size.height-kViewHeight, 375, kViewHeight)];\n    [UIView commitAnimations];\n}\n\n-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event{\n   \n    [self.textView resignFirstResponder];\n}\n@end\n```\n\n","slug":"oc/UITextView","published":1,"updated":"2016-10-08T05:56:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97u002621xwmdlj71m4","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> whiteColor];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView = [[<span class=\"built_in\">UITextView</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">667</span><span class=\"number\">-80</span>, <span class=\"number\">375</span>, <span class=\"number\">80</span>)];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.font = [<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">20</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.textColor = [<span class=\"built_in\">UIColor</span> blackColor];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.contentInset = <span class=\"built_in\">UIEdgeInsetsMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);<span class=\"comment\">//添加滚动区域</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.text = <span class=\"string\">@\"习大大\"</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.scrollEnabled = <span class=\"literal\">YES</span>;<span class=\"comment\">//是否可滚动</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.editable = <span class=\"literal\">YES</span>;<span class=\"comment\">//是否可编辑</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.returnKeyType = <span class=\"built_in\">UIReturnKeyDefault</span>;<span class=\"comment\">//返回键的类型</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.keyboardType = <span class=\"built_in\">UIKeyboardTypeDefault</span>;<span class=\"comment\">//键盘类型</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.scrollEnabled = <span class=\"literal\">YES</span>;<span class=\"comment\">//是否可以拖动</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.autoresizingMask = <span class=\"built_in\">UIViewAutoresizingFlexibleHeight</span>;<span class=\"comment\">//自适应高度</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.layer.cornerRadius = <span class=\"number\">8</span>; <span class=\"comment\">//边框设置为圆角</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.layer.borderWidth = <span class=\"number\">1</span>;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//    设置边框颜色 参数2是一个数组 分别为三基色和alpha分量；</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> color[]=&#123;<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.layer.borderColor = <span class=\"built_in\">CGColorCreate</span>(<span class=\"built_in\">CGColorSpaceCreateDeviceRGB</span>(),color);</div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.layer.masksToBounds = <span class=\"literal\">YES</span>;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//    [self.textView becomeFirstResponder];//获得焦点 程序运行就获取光标</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">self</span>.myView = [[<span class=\"built_in\">UIView</span> alloc]initWithFrame:[[<span class=\"built_in\">UIScreen</span> mainScreen]bounds]];</div><div class=\"line\">    <span class=\"keyword\">self</span>.myView.tag = <span class=\"number\">1000</span>;</div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.myView];</div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"keyword\">self</span>.myView addSubview:<span class=\"keyword\">self</span>.textView];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//注册通知,监听键盘弹出事件</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(keyboardDidShow:) name:<span class=\"built_in\">UIKeyboardDidShowNotification</span> object:<span class=\"literal\">nil</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//注册通知,监听键盘消失事件</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(keyboardDidHidden) name:<span class=\"built_in\">UIKeyboardDidHideNotification</span> object:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将要开始编辑</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)textViewShouldBeginEditing:(<span class=\"built_in\">UITextView</span> *)textView&#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将要结束编辑</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)textViewShouldEndEditing:(<span class=\"built_in\">UITextView</span> *)textView&#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//开始编辑</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)textViewDidBeginEditing:(<span class=\"built_in\">UITextView</span> *)textView&#123;</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结束编辑</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)textViewDidEndEditing:(<span class=\"built_in\">UITextView</span> *)textView&#123;</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//焦点发生改变</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)textViewDidChangeSelection:(<span class=\"built_in\">UITextView</span> *)textView&#123;</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//内容发生改变编辑</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)textViewDidChange:(<span class=\"built_in\">UITextView</span> *)textView&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//内容将要发生改变编辑</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//控制输入文字的长度和内容，可通调用以下代理方法实现</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)textView:(<span class=\"built_in\">UITextView</span> *)textView shouldChangeTextInRange:(<span class=\"built_in\">NSRange</span>)range replacementText:(<span class=\"built_in\">NSString</span> *)text&#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">if</span> (range.location&gt;=<span class=\"number\">100</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">//控制输入文本的长度</span></div><div class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"literal\">NO</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([text isEqualToString:<span class=\"string\">@\"\\n\"</span>]) &#123;</div><div class=\"line\">        <span class=\"comment\">//禁止输入换行</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 键盘弹出时</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)keyboardDidShow:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//获取键盘高度</span></div><div class=\"line\">    <span class=\"built_in\">NSValue</span> *keyboardObject = [[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardFrameEndUserInfoKey</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">CGRect</span> keyboardRect;</div><div class=\"line\">   </div><div class=\"line\">    [keyboardObject getValue:&amp;keyboardRect];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//调整放置有textView的view的位置</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置动画</span></div><div class=\"line\">    [<span class=\"built_in\">UIView</span> beginAnimations:<span class=\"literal\">nil</span> context:<span class=\"literal\">nil</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//定义动画时间</span></div><div class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationDuration:kAnimationDuration];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置view的frame，往上平移</span></div><div class=\"line\">    [(<span class=\"built_in\">UIView</span> *)[<span class=\"keyword\">self</span>.view viewWithTag:<span class=\"number\">1000</span>] setFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"keyword\">self</span>.view.frame.size.height-keyboardRect.size.height-kViewHeight, <span class=\"number\">375</span>, kViewHeight)];</div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"built_in\">UIView</span> commitAnimations];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//键盘消失时</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)keyboardDidHidden</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//定义动画</span></div><div class=\"line\">    [<span class=\"built_in\">UIView</span> beginAnimations:<span class=\"literal\">nil</span> context:<span class=\"literal\">nil</span>];</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationDuration:kAnimationDuration];</div><div class=\"line\">    <span class=\"comment\">//设置view的frame，往下平移</span></div><div class=\"line\">    [(<span class=\"built_in\">UIView</span> *)[<span class=\"keyword\">self</span>.view viewWithTag:<span class=\"number\">1000</span>] setFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"keyword\">self</span>.view.frame.size.height-kViewHeight, <span class=\"number\">375</span>, kViewHeight)];</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> commitAnimations];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event&#123;</div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"keyword\">self</span>.textView resignFirstResponder];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> whiteColor];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView = [[<span class=\"built_in\">UITextView</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">667</span><span class=\"number\">-80</span>, <span class=\"number\">375</span>, <span class=\"number\">80</span>)];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.font = [<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">20</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.textColor = [<span class=\"built_in\">UIColor</span> blackColor];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.contentInset = <span class=\"built_in\">UIEdgeInsetsMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);<span class=\"comment\">//添加滚动区域</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.text = <span class=\"string\">@\"习大大\"</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.scrollEnabled = <span class=\"literal\">YES</span>;<span class=\"comment\">//是否可滚动</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.editable = <span class=\"literal\">YES</span>;<span class=\"comment\">//是否可编辑</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.returnKeyType = <span class=\"built_in\">UIReturnKeyDefault</span>;<span class=\"comment\">//返回键的类型</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.keyboardType = <span class=\"built_in\">UIKeyboardTypeDefault</span>;<span class=\"comment\">//键盘类型</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.scrollEnabled = <span class=\"literal\">YES</span>;<span class=\"comment\">//是否可以拖动</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.autoresizingMask = <span class=\"built_in\">UIViewAutoresizingFlexibleHeight</span>;<span class=\"comment\">//自适应高度</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.layer.cornerRadius = <span class=\"number\">8</span>; <span class=\"comment\">//边框设置为圆角</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.layer.borderWidth = <span class=\"number\">1</span>;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//    设置边框颜色 参数2是一个数组 分别为三基色和alpha分量；</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> color[]=&#123;<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.layer.borderColor = <span class=\"built_in\">CGColorCreate</span>(<span class=\"built_in\">CGColorSpaceCreateDeviceRGB</span>(),color);</div><div class=\"line\">    <span class=\"keyword\">self</span>.textView.layer.masksToBounds = <span class=\"literal\">YES</span>;</div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//    [self.textView becomeFirstResponder];//获得焦点 程序运行就获取光标</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">self</span>.myView = [[<span class=\"built_in\">UIView</span> alloc]initWithFrame:[[<span class=\"built_in\">UIScreen</span> mainScreen]bounds]];</div><div class=\"line\">    <span class=\"keyword\">self</span>.myView.tag = <span class=\"number\">1000</span>;</div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.myView];</div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"keyword\">self</span>.myView addSubview:<span class=\"keyword\">self</span>.textView];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//注册通知,监听键盘弹出事件</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(keyboardDidShow:) name:<span class=\"built_in\">UIKeyboardDidShowNotification</span> object:<span class=\"literal\">nil</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//注册通知,监听键盘消失事件</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(keyboardDidHidden) name:<span class=\"built_in\">UIKeyboardDidHideNotification</span> object:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将要开始编辑</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)textViewShouldBeginEditing:(<span class=\"built_in\">UITextView</span> *)textView&#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将要结束编辑</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)textViewShouldEndEditing:(<span class=\"built_in\">UITextView</span> *)textView&#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//开始编辑</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)textViewDidBeginEditing:(<span class=\"built_in\">UITextView</span> *)textView&#123;</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结束编辑</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)textViewDidEndEditing:(<span class=\"built_in\">UITextView</span> *)textView&#123;</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//焦点发生改变</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)textViewDidChangeSelection:(<span class=\"built_in\">UITextView</span> *)textView&#123;</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//内容发生改变编辑</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)textViewDidChange:(<span class=\"built_in\">UITextView</span> *)textView&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//内容将要发生改变编辑</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//控制输入文字的长度和内容，可通调用以下代理方法实现</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)textView:(<span class=\"built_in\">UITextView</span> *)textView shouldChangeTextInRange:(<span class=\"built_in\">NSRange</span>)range replacementText:(<span class=\"built_in\">NSString</span> *)text&#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">if</span> (range.location&gt;=<span class=\"number\">100</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">//控制输入文本的长度</span></div><div class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"literal\">NO</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([text isEqualToString:<span class=\"string\">@\"\\n\"</span>]) &#123;</div><div class=\"line\">        <span class=\"comment\">//禁止输入换行</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 键盘弹出时</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)keyboardDidShow:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//获取键盘高度</span></div><div class=\"line\">    <span class=\"built_in\">NSValue</span> *keyboardObject = [[notification userInfo] objectForKey:<span class=\"built_in\">UIKeyboardFrameEndUserInfoKey</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">CGRect</span> keyboardRect;</div><div class=\"line\">   </div><div class=\"line\">    [keyboardObject getValue:&amp;keyboardRect];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//调整放置有textView的view的位置</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置动画</span></div><div class=\"line\">    [<span class=\"built_in\">UIView</span> beginAnimations:<span class=\"literal\">nil</span> context:<span class=\"literal\">nil</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//定义动画时间</span></div><div class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationDuration:kAnimationDuration];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//设置view的frame，往上平移</span></div><div class=\"line\">    [(<span class=\"built_in\">UIView</span> *)[<span class=\"keyword\">self</span>.view viewWithTag:<span class=\"number\">1000</span>] setFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"keyword\">self</span>.view.frame.size.height-keyboardRect.size.height-kViewHeight, <span class=\"number\">375</span>, kViewHeight)];</div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"built_in\">UIView</span> commitAnimations];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//键盘消失时</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)keyboardDidHidden</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//定义动画</span></div><div class=\"line\">    [<span class=\"built_in\">UIView</span> beginAnimations:<span class=\"literal\">nil</span> context:<span class=\"literal\">nil</span>];</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> setAnimationDuration:kAnimationDuration];</div><div class=\"line\">    <span class=\"comment\">//设置view的frame，往下平移</span></div><div class=\"line\">    [(<span class=\"built_in\">UIView</span> *)[<span class=\"keyword\">self</span>.view viewWithTag:<span class=\"number\">1000</span>] setFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"keyword\">self</span>.view.frame.size.height-kViewHeight, <span class=\"number\">375</span>, kViewHeight)];</div><div class=\"line\">    [<span class=\"built_in\">UIView</span> commitAnimations];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event&#123;</div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"keyword\">self</span>.textView resignFirstResponder];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>"},{"title":"UIWebView","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n@property(nonatomic,retain)UIWebView *webView;\n\n    //创建\n    self.webView = [[UIWebViewalloc]initWithFrame:[[UIScreenmainScreen] bounds]];\n    [self.view addSubview:self.webView];\n\n   //要前往的URL\n   NSString *str = @\"http://www.youku.com\";\n    NSURL *url = [NSURL URLWithString:str];\n    NSURLRequest *request = [NSURLRequest requestWithURL:url];\n    [self.webView loadRequest:request];\n\n   //成为代理\n    self.webView.delegate = self;\n\n   //自定义导航栏左右按钮\n    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]initWithTitle:@\"后退\" style:UIBarButtonItemStylePlain target:self action:@selector(leftAction)];\n   \n    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithTitle:@\"前进\" style:UIBarButtonItemStylePlain target:self action:@selector(rightAction)];\n   \n   \n   \n    UITextField *textf = [[UITextField alloc] initWithFrame:CGRectMake(0, 0, 150, 30)];\n    textf.borderStyle = UITextBorderStyleRoundedRect;\n    textf.clearButtonMode = UITextFieldViewModeAlways;\n    self.navigationItem.titleView = textf;\n    textf.delegate = self;\n\n\n\n//后退\n-(void)leftAction\n{\n    [self.webView goBack];\n}\n//前进\n-(void)rightAction\n{\n    [self.webView goForward];\n}\n\n\nUITextFieldDelegate协议方法\n-(BOOL)textFieldShouldReturn:(UITextField *)textField\n{\n   \n   \n    if ([textField.text hasPrefix:@\"http://www.\"]) {\n       \n        NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:textField.text]];\n        [self.webView loadRequest:request];\n       \n    }else\n    {\n        NSString *str = [NSString stringWithFormat:@\"http://www.%@\",textField.text];\n        NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:str]];\n        [self.webView loadRequest:request];\n    }\n    [textField resignFirstResponder];\n    return YES;\n\n}\n\n```\n\n","source":"_posts/oc/UIWebView.md","raw":"---\ntitle: UIWebView\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n@property(nonatomic,retain)UIWebView *webView;\n\n    //创建\n    self.webView = [[UIWebViewalloc]initWithFrame:[[UIScreenmainScreen] bounds]];\n    [self.view addSubview:self.webView];\n\n   //要前往的URL\n   NSString *str = @\"http://www.youku.com\";\n    NSURL *url = [NSURL URLWithString:str];\n    NSURLRequest *request = [NSURLRequest requestWithURL:url];\n    [self.webView loadRequest:request];\n\n   //成为代理\n    self.webView.delegate = self;\n\n   //自定义导航栏左右按钮\n    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]initWithTitle:@\"后退\" style:UIBarButtonItemStylePlain target:self action:@selector(leftAction)];\n   \n    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithTitle:@\"前进\" style:UIBarButtonItemStylePlain target:self action:@selector(rightAction)];\n   \n   \n   \n    UITextField *textf = [[UITextField alloc] initWithFrame:CGRectMake(0, 0, 150, 30)];\n    textf.borderStyle = UITextBorderStyleRoundedRect;\n    textf.clearButtonMode = UITextFieldViewModeAlways;\n    self.navigationItem.titleView = textf;\n    textf.delegate = self;\n\n\n\n//后退\n-(void)leftAction\n{\n    [self.webView goBack];\n}\n//前进\n-(void)rightAction\n{\n    [self.webView goForward];\n}\n\n\nUITextFieldDelegate协议方法\n-(BOOL)textFieldShouldReturn:(UITextField *)textField\n{\n   \n   \n    if ([textField.text hasPrefix:@\"http://www.\"]) {\n       \n        NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:textField.text]];\n        [self.webView loadRequest:request];\n       \n    }else\n    {\n        NSString *str = [NSString stringWithFormat:@\"http://www.%@\",textField.text];\n        NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:str]];\n        [self.webView loadRequest:request];\n    }\n    [textField resignFirstResponder];\n    return YES;\n\n}\n\n```\n\n","slug":"oc/UIWebView","published":1,"updated":"2016-10-08T09:04:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97v002821xw4vmg6hvo","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">retain</span>)<span class=\"built_in\">UIWebView</span> *webView;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//创建</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.webView = [[<span class=\"built_in\">UIWebViewalloc</span>]initWithFrame:[[<span class=\"built_in\">UIScreenmainScreen</span>] bounds]];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.webView];</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//要前往的URL</span></div><div class=\"line\">   <span class=\"built_in\">NSString</span> *str = <span class=\"string\">@\"http://www.youku.com\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:str];</div><div class=\"line\">    <span class=\"built_in\">NSURLRequest</span> *request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:url];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.webView loadRequest:request];</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//成为代理</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.webView.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//自定义导航栏左右按钮</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.leftBarButtonItem = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithTitle:<span class=\"string\">@\"后退\"</span> style:<span class=\"built_in\">UIBarButtonItemStylePlain</span> target:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(leftAction)];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.rightBarButtonItem = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithTitle:<span class=\"string\">@\"前进\"</span> style:<span class=\"built_in\">UIBarButtonItemStylePlain</span> target:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(rightAction)];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">UITextField</span> *textf = [[<span class=\"built_in\">UITextField</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">150</span>, <span class=\"number\">30</span>)];</div><div class=\"line\">    textf.borderStyle = <span class=\"built_in\">UITextBorderStyleRoundedRect</span>;</div><div class=\"line\">    textf.clearButtonMode = <span class=\"built_in\">UITextFieldViewModeAlways</span>;</div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.titleView = textf;</div><div class=\"line\">    textf.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//后退</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)leftAction</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.webView goBack];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//前进</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)rightAction</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.webView goForward];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UITextFieldDelegate</span>协议方法</div><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)textFieldShouldReturn:(<span class=\"built_in\">UITextField</span> *)textField</div><div class=\"line\">&#123;</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">if</span> ([textField.text hasPrefix:<span class=\"string\">@\"http://www.\"</span>]) &#123;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"built_in\">NSURLRequest</span> *request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:[<span class=\"built_in\">NSURL</span> URLWithString:textField.text]];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.webView loadRequest:request];</div><div class=\"line\">       </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *str = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"http://www.%@\"</span>,textField.text];</div><div class=\"line\">        <span class=\"built_in\">NSURLRequest</span> *request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:[<span class=\"built_in\">NSURL</span> URLWithString:str]];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.webView loadRequest:request];</div><div class=\"line\">    &#125;</div><div class=\"line\">    [textField resignFirstResponder];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">retain</span>)<span class=\"built_in\">UIWebView</span> *webView;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//创建</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.webView = [[<span class=\"built_in\">UIWebViewalloc</span>]initWithFrame:[[<span class=\"built_in\">UIScreenmainScreen</span>] bounds]];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.webView];</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//要前往的URL</span></div><div class=\"line\">   <span class=\"built_in\">NSString</span> *str = <span class=\"string\">@\"http://www.youku.com\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:str];</div><div class=\"line\">    <span class=\"built_in\">NSURLRequest</span> *request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:url];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.webView loadRequest:request];</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//成为代理</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.webView.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//自定义导航栏左右按钮</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.leftBarButtonItem = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithTitle:<span class=\"string\">@\"后退\"</span> style:<span class=\"built_in\">UIBarButtonItemStylePlain</span> target:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(leftAction)];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.rightBarButtonItem = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithTitle:<span class=\"string\">@\"前进\"</span> style:<span class=\"built_in\">UIBarButtonItemStylePlain</span> target:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(rightAction)];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">UITextField</span> *textf = [[<span class=\"built_in\">UITextField</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">150</span>, <span class=\"number\">30</span>)];</div><div class=\"line\">    textf.borderStyle = <span class=\"built_in\">UITextBorderStyleRoundedRect</span>;</div><div class=\"line\">    textf.clearButtonMode = <span class=\"built_in\">UITextFieldViewModeAlways</span>;</div><div class=\"line\">    <span class=\"keyword\">self</span>.navigationItem.titleView = textf;</div><div class=\"line\">    textf.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//后退</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)leftAction</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.webView goBack];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//前进</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)rightAction</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.webView goForward];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UITextFieldDelegate</span>协议方法</div><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)textFieldShouldReturn:(<span class=\"built_in\">UITextField</span> *)textField</div><div class=\"line\">&#123;</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">if</span> ([textField.text hasPrefix:<span class=\"string\">@\"http://www.\"</span>]) &#123;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"built_in\">NSURLRequest</span> *request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:[<span class=\"built_in\">NSURL</span> URLWithString:textField.text]];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.webView loadRequest:request];</div><div class=\"line\">       </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *str = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"http://www.%@\"</span>,textField.text];</div><div class=\"line\">        <span class=\"built_in\">NSURLRequest</span> *request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:[<span class=\"built_in\">NSURL</span> URLWithString:str]];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.webView loadRequest:request];</div><div class=\"line\">    &#125;</div><div class=\"line\">    [textField resignFirstResponder];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"UIWindow.h详解","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n#import <Foundation/Foundation.h>//基础框架入口\n\n#import <CoreGraphics/CoreGraphics.h>//绘图入口\n\n#import <UIKit/UIView.h>//视图对象\n\n#import <UIKit/UIApplication.h>//提供iOS程序运行期的协作和控制\n\n#import <UIKit/UIKitDefines.h>//一些宏定义\n\n\n\nNS_ASSUME_NONNULL_BEGIN \n\n\n\ntypedef CGFloat UIWindowLevel;//32位则为float | 64位为double\n\n/*\n\n  UIEvent 触摸事件，运动事件\n\n  UIScreen 屏幕处理\n\n  NSUndoManager  记录撤销，修改操作的消息\n\n  UIViewController 视图控制器\n\n*/\n\n@class UIEvent,UIScreen, NSUndoManager,UIViewController;\n\n\n\nNS_CLASS_AVAILABLE_IOS(2_0)@interface UIWindow :UIView\n\n\n\n@property(nonatomic,strong)UIScreen *screen; \n\n@property(nonatomic)UIWindowLevel windowLevel;            \n\n@property(nonatomic,readonly,getter=isKeyWindow) \n\nBOOL keyWindow;\n\n- (void)becomeKeyWindow;                               \n\n- (void)resignKeyWindow;                               \n\n- (void)makeKeyWindow;\n\n- (void)makeKeyAndVisible;                             \n\n@property(nullable,nonatomic,strong)UIViewController *rootViewController NS_AVAILABLE_IOS(4_0);  // default is nil\n\n\n\n/*\n\n 事件拦截分发到指定视图对象\n\n 当用户发起一个事件，比如触摸屏幕或者晃动设备，系统产生一个事件，同时投递给UIApplication，而UIApplication则将这个事件传递给特定\n\n UIWindow进行处理(正常情况都一个程序都只有一个UIWindow)，然后由UIWindow将这个事件传递给特定的对象(即first responder)并通过响应链\n\n 进行处理。虽然都是通过响应链对事件进行处理，但是触摸事件和运动事件在处理上有着明显的不同(主要体现在确定哪个对象才是他们的first\n\n responder)：\n\n*/\n\n- (void)sendEvent:(UIEvent *)event; \n\n                   \n\n//窗口坐标系统转化\n\n- (CGPoint)convertPoint:(CGPoint)point toWindow:(nullableUIWindow *)window;//转化当前窗口一个坐标相对另外一个窗口的坐标\n\n- (CGPoint)convertPoint:(CGPoint)point fromWindow:(nullableUIWindow *)window;//转化另外窗口一个坐标相对于当前窗口的坐标\n\n- (CGRect)convertRect:(CGRect)rect toWindow:(nullableUIWindow *)window;//转化当前窗口一个矩形坐标相对另外一个窗口的坐标\n\n- (CGRect)convertRect:(CGRect)rect fromWindow:(nullableUIWindow *)window;//转化另外窗口一个矩形坐标相对于当前窗口的坐标\n\n\n\n@end\n\n\n\nUIKIT_EXTERN constUIWindowLevel UIWindowLevelNormal;//默认等级\n\nUIKIT_EXTERN constUIWindowLevel UIWindowLevelAlert;//UIAlert等级\n\nUIKIT_EXTERN constUIWindowLevel UIWindowLevelStatusBar;//状态栏等级\n\n\n\nUIKIT_EXTERN NSString *const UIWindowDidBecomeVisibleNotification;// nil 通知对象窗口为可见\n\nUIKIT_EXTERN NSString *const UIWindowDidBecomeHiddenNotification; // nil 通知对象窗口为隐藏\n\nUIKIT_EXTERN NSString *const UIWindowDidBecomeKeyNotification;    // nil 通知对象窗口为重要\n\nUIKIT_EXTERN NSString *const UIWindowDidResignKeyNotification;    // nil 通知对象窗口取消主窗\n\n\n\n//当键盘显示或消失时，系统会发送相关的通知:\n\nUIKIT_EXTERN NSString *const UIKeyboardWillShowNotification;//通知键盘对象视图即将加载\n\nUIKIT_EXTERN NSString *const UIKeyboardDidShowNotification;//通知键盘对象视图完全加载\n\nUIKIT_EXTERN NSString *const UIKeyboardWillHideNotification;//通知键盘对象视图即将隐藏\n\nUIKIT_EXTERN NSString *const UIKeyboardDidHideNotification;//通知键盘对象视图完全隐藏\n\n\n\n/*\n\n通知消息 NSNotification中的 userInfo字典中包含键盘的位置和大小信息，对应的key为\n\n  UIKeyboardFrameBeginUserInfoKey\n\n  UIKeyboardFrameEndUserInfoKey\n\n  UIKeyboardAnimationDurationUserInfoKey\n\n  UIKeyboardAnimationCurveUserInfoKey\n\nUIKeyboardFrameBeginUserInfoKey,UIKeyboardFrameEndUserInfoKey对应的Value是个NSValue对象，内部包含CGRect结构，分别为键盘起始时和终止时的位置信息。\n\nUIKeyboardAnimationCurveUserInfoKey对应的Value是NSNumber对象，内部为UIViewAnimationCurve类型的数据，表示键盘显示或消失的动画类型。\n\nUIKeyboardAnimationDurationUserInfoKey对应的Value也是NSNumber对象，内部为double类型的数据，表示键盘h显示或消失时动画的持续时间\n\n\n\n 例如，在UIKeyboardWillShowNotification，UIKeyboardDidShowNotification通知中的userInfo内容为\n\n    userInfo = {\n\n                 UIKeyboardAnimationCurveUserInfoKey = 0;\n\n                 UIKeyboardAnimationDurationUserInfoKey = \"0.25\";\n\n                 UIKeyboardBoundsUserInfoKey = \"NSRect: {{0, 0}, {320, 216}}\";\n\n                 UIKeyboardCenterBeginUserInfoKey = \"NSPoint: {160, 588}\";\n\n                 UIKeyboardCenterEndUserInfoKey = \"NSPoint: {160, 372}\";\n\n                 UIKeyboardFrameBeginUserInfoKey = \"NSRect: {{0, 480}, {320, 216}}\";\n\n                 UIKeyboardFrameChangedByUserInteraction = 0;\n\n                 UIKeyboardFrameEndUserInfoKey = \"NSRect: {{0, 264}, {320, 216}}\";\n\n               }\n\n    在UIKeyboardWillHideNotification,UIKeyboardDidHideNotification通知中的userInfo内容为:\n\n   userInfo = {\n\n                 UIKeyboardAnimationCurveUserInfoKey = 0;\n\n                 UIKeyboardAnimationDurationUserInfoKey = \"0.25\";\n\n                 UIKeyboardBoundsUserInfoKey = \"NSRect: {{0, 0}, {320, 216}}\";\n\n                 UIKeyboardCenterBeginUserInfoKey = \"NSPoint: {160, 372}\";\n\n                 UIKeyboardCenterEndUserInfoKey = \"NSPoint: {160, 588}\";\n\n                 UIKeyboardFrameBeginUserInfoKey = \"NSRect: {{0, 264}, {320, 216}}\";\n\n                 UIKeyboardFrameChangedByUserInteraction = 0;\n\n                 UIKeyboardFrameEndUserInfoKey = \"NSRect: {{0, 480}, {320, 216}}\";\n\n              }\n\n*/\n\nUIKIT_EXTERN NSString *const UIKeyboardFrameBeginUserInfoKey       NS_AVAILABLE_IOS(3_2);// NSValue of CGRect\n\nUIKIT_EXTERN NSString *const UIKeyboardFrameEndUserInfoKey         NS_AVAILABLE_IOS(3_2);// NSValue of CGRect\n\nUIKIT_EXTERN NSString *const UIKeyboardAnimationDurationUserInfoKeyNS_AVAILABLE_IOS(3_0);// NSNumber of double\n\nUIKIT_EXTERN NSString *const UIKeyboardAnimationCurveUserInfoKey   NS_AVAILABLE_IOS(3_0);// NSNumber of NSUInteger (UIViewAnimationCurve)\n\nUIKIT_EXTERN NSString *const UIKeyboardIsLocalUserInfoKey          NS_AVAILABLE_IOS(9_0);// NSNumber of BOOL\n\nUIKIT_EXTERN NSString *const UIKeyboardWillChangeFrameNotification NS_AVAILABLE_IOS(5_0);//键盘即将改变布局发出通知\n\nUIKIT_EXTERN NSString *const UIKeyboardDidChangeFrameNotification  NS_AVAILABLE_IOS(5_0);//键盘已经改变布局后发出通知\n\nUIKIT_EXTERN NSString *const UIKeyboardCenterBeginUserInfoKey  NS_DEPRECATED_IOS(2_0,3_2);\n\nUIKIT_EXTERN NSString *const UIKeyboardCenterEndUserInfoKey    NS_DEPRECATED_IOS(2_0,3_2);\n\nUIKIT_EXTERN NSString *const UIKeyboardBoundsUserInfoKey       NS_DEPRECATED_IOS(2_0,3_2);\n\n\n\nNS_ASSUME_NONNULL_END\n\n```\n\n","source":"_posts/oc/UIWindow.h详解.md","raw":"---\ntitle: UIWindow.h详解\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n#import <Foundation/Foundation.h>//基础框架入口\n\n#import <CoreGraphics/CoreGraphics.h>//绘图入口\n\n#import <UIKit/UIView.h>//视图对象\n\n#import <UIKit/UIApplication.h>//提供iOS程序运行期的协作和控制\n\n#import <UIKit/UIKitDefines.h>//一些宏定义\n\n\n\nNS_ASSUME_NONNULL_BEGIN \n\n\n\ntypedef CGFloat UIWindowLevel;//32位则为float | 64位为double\n\n/*\n\n  UIEvent 触摸事件，运动事件\n\n  UIScreen 屏幕处理\n\n  NSUndoManager  记录撤销，修改操作的消息\n\n  UIViewController 视图控制器\n\n*/\n\n@class UIEvent,UIScreen, NSUndoManager,UIViewController;\n\n\n\nNS_CLASS_AVAILABLE_IOS(2_0)@interface UIWindow :UIView\n\n\n\n@property(nonatomic,strong)UIScreen *screen; \n\n@property(nonatomic)UIWindowLevel windowLevel;            \n\n@property(nonatomic,readonly,getter=isKeyWindow) \n\nBOOL keyWindow;\n\n- (void)becomeKeyWindow;                               \n\n- (void)resignKeyWindow;                               \n\n- (void)makeKeyWindow;\n\n- (void)makeKeyAndVisible;                             \n\n@property(nullable,nonatomic,strong)UIViewController *rootViewController NS_AVAILABLE_IOS(4_0);  // default is nil\n\n\n\n/*\n\n 事件拦截分发到指定视图对象\n\n 当用户发起一个事件，比如触摸屏幕或者晃动设备，系统产生一个事件，同时投递给UIApplication，而UIApplication则将这个事件传递给特定\n\n UIWindow进行处理(正常情况都一个程序都只有一个UIWindow)，然后由UIWindow将这个事件传递给特定的对象(即first responder)并通过响应链\n\n 进行处理。虽然都是通过响应链对事件进行处理，但是触摸事件和运动事件在处理上有着明显的不同(主要体现在确定哪个对象才是他们的first\n\n responder)：\n\n*/\n\n- (void)sendEvent:(UIEvent *)event; \n\n                   \n\n//窗口坐标系统转化\n\n- (CGPoint)convertPoint:(CGPoint)point toWindow:(nullableUIWindow *)window;//转化当前窗口一个坐标相对另外一个窗口的坐标\n\n- (CGPoint)convertPoint:(CGPoint)point fromWindow:(nullableUIWindow *)window;//转化另外窗口一个坐标相对于当前窗口的坐标\n\n- (CGRect)convertRect:(CGRect)rect toWindow:(nullableUIWindow *)window;//转化当前窗口一个矩形坐标相对另外一个窗口的坐标\n\n- (CGRect)convertRect:(CGRect)rect fromWindow:(nullableUIWindow *)window;//转化另外窗口一个矩形坐标相对于当前窗口的坐标\n\n\n\n@end\n\n\n\nUIKIT_EXTERN constUIWindowLevel UIWindowLevelNormal;//默认等级\n\nUIKIT_EXTERN constUIWindowLevel UIWindowLevelAlert;//UIAlert等级\n\nUIKIT_EXTERN constUIWindowLevel UIWindowLevelStatusBar;//状态栏等级\n\n\n\nUIKIT_EXTERN NSString *const UIWindowDidBecomeVisibleNotification;// nil 通知对象窗口为可见\n\nUIKIT_EXTERN NSString *const UIWindowDidBecomeHiddenNotification; // nil 通知对象窗口为隐藏\n\nUIKIT_EXTERN NSString *const UIWindowDidBecomeKeyNotification;    // nil 通知对象窗口为重要\n\nUIKIT_EXTERN NSString *const UIWindowDidResignKeyNotification;    // nil 通知对象窗口取消主窗\n\n\n\n//当键盘显示或消失时，系统会发送相关的通知:\n\nUIKIT_EXTERN NSString *const UIKeyboardWillShowNotification;//通知键盘对象视图即将加载\n\nUIKIT_EXTERN NSString *const UIKeyboardDidShowNotification;//通知键盘对象视图完全加载\n\nUIKIT_EXTERN NSString *const UIKeyboardWillHideNotification;//通知键盘对象视图即将隐藏\n\nUIKIT_EXTERN NSString *const UIKeyboardDidHideNotification;//通知键盘对象视图完全隐藏\n\n\n\n/*\n\n通知消息 NSNotification中的 userInfo字典中包含键盘的位置和大小信息，对应的key为\n\n  UIKeyboardFrameBeginUserInfoKey\n\n  UIKeyboardFrameEndUserInfoKey\n\n  UIKeyboardAnimationDurationUserInfoKey\n\n  UIKeyboardAnimationCurveUserInfoKey\n\nUIKeyboardFrameBeginUserInfoKey,UIKeyboardFrameEndUserInfoKey对应的Value是个NSValue对象，内部包含CGRect结构，分别为键盘起始时和终止时的位置信息。\n\nUIKeyboardAnimationCurveUserInfoKey对应的Value是NSNumber对象，内部为UIViewAnimationCurve类型的数据，表示键盘显示或消失的动画类型。\n\nUIKeyboardAnimationDurationUserInfoKey对应的Value也是NSNumber对象，内部为double类型的数据，表示键盘h显示或消失时动画的持续时间\n\n\n\n 例如，在UIKeyboardWillShowNotification，UIKeyboardDidShowNotification通知中的userInfo内容为\n\n    userInfo = {\n\n                 UIKeyboardAnimationCurveUserInfoKey = 0;\n\n                 UIKeyboardAnimationDurationUserInfoKey = \"0.25\";\n\n                 UIKeyboardBoundsUserInfoKey = \"NSRect: {{0, 0}, {320, 216}}\";\n\n                 UIKeyboardCenterBeginUserInfoKey = \"NSPoint: {160, 588}\";\n\n                 UIKeyboardCenterEndUserInfoKey = \"NSPoint: {160, 372}\";\n\n                 UIKeyboardFrameBeginUserInfoKey = \"NSRect: {{0, 480}, {320, 216}}\";\n\n                 UIKeyboardFrameChangedByUserInteraction = 0;\n\n                 UIKeyboardFrameEndUserInfoKey = \"NSRect: {{0, 264}, {320, 216}}\";\n\n               }\n\n    在UIKeyboardWillHideNotification,UIKeyboardDidHideNotification通知中的userInfo内容为:\n\n   userInfo = {\n\n                 UIKeyboardAnimationCurveUserInfoKey = 0;\n\n                 UIKeyboardAnimationDurationUserInfoKey = \"0.25\";\n\n                 UIKeyboardBoundsUserInfoKey = \"NSRect: {{0, 0}, {320, 216}}\";\n\n                 UIKeyboardCenterBeginUserInfoKey = \"NSPoint: {160, 372}\";\n\n                 UIKeyboardCenterEndUserInfoKey = \"NSPoint: {160, 588}\";\n\n                 UIKeyboardFrameBeginUserInfoKey = \"NSRect: {{0, 264}, {320, 216}}\";\n\n                 UIKeyboardFrameChangedByUserInteraction = 0;\n\n                 UIKeyboardFrameEndUserInfoKey = \"NSRect: {{0, 480}, {320, 216}}\";\n\n              }\n\n*/\n\nUIKIT_EXTERN NSString *const UIKeyboardFrameBeginUserInfoKey       NS_AVAILABLE_IOS(3_2);// NSValue of CGRect\n\nUIKIT_EXTERN NSString *const UIKeyboardFrameEndUserInfoKey         NS_AVAILABLE_IOS(3_2);// NSValue of CGRect\n\nUIKIT_EXTERN NSString *const UIKeyboardAnimationDurationUserInfoKeyNS_AVAILABLE_IOS(3_0);// NSNumber of double\n\nUIKIT_EXTERN NSString *const UIKeyboardAnimationCurveUserInfoKey   NS_AVAILABLE_IOS(3_0);// NSNumber of NSUInteger (UIViewAnimationCurve)\n\nUIKIT_EXTERN NSString *const UIKeyboardIsLocalUserInfoKey          NS_AVAILABLE_IOS(9_0);// NSNumber of BOOL\n\nUIKIT_EXTERN NSString *const UIKeyboardWillChangeFrameNotification NS_AVAILABLE_IOS(5_0);//键盘即将改变布局发出通知\n\nUIKIT_EXTERN NSString *const UIKeyboardDidChangeFrameNotification  NS_AVAILABLE_IOS(5_0);//键盘已经改变布局后发出通知\n\nUIKIT_EXTERN NSString *const UIKeyboardCenterBeginUserInfoKey  NS_DEPRECATED_IOS(2_0,3_2);\n\nUIKIT_EXTERN NSString *const UIKeyboardCenterEndUserInfoKey    NS_DEPRECATED_IOS(2_0,3_2);\n\nUIKIT_EXTERN NSString *const UIKeyboardBoundsUserInfoKey       NS_DEPRECATED_IOS(2_0,3_2);\n\n\n\nNS_ASSUME_NONNULL_END\n\n```\n\n","slug":"oc/UIWindow.h详解","published":1,"updated":"2016-10-08T09:07:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97w002a21xwgbs4mhn4","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span>//基础框架入口</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;CoreGraphics/CoreGraphics.h&gt;</span>//绘图入口</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIView.h&gt;</span>//视图对象</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIApplication.h&gt;</span>//提供iOS程序运行期的协作和控制</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIKitDefines.h&gt;</span>//一些宏定义</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NS_ASSUME_NONNULL_BEGIN</span> </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">CGFloat</span> <span class=\"built_in\">UIWindowLevel</span>;<span class=\"comment\">//32位则为float | 64位为double</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"></div><div class=\"line\">  UIEvent 触摸事件，运动事件</div><div class=\"line\"></div><div class=\"line\">  UIScreen 屏幕处理</div><div class=\"line\"></div><div class=\"line\">  NSUndoManager  记录撤销，修改操作的消息</div><div class=\"line\"></div><div class=\"line\">  UIViewController 视图控制器</div><div class=\"line\"></div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@class</span> <span class=\"title\">UIEvent</span>,<span class=\"title\">UIScreen</span>, <span class=\"title\">NSUndoManager</span>,<span class=\"title\">UIViewController</span>;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NS_CLASS_AVAILABLE_IOS</span>(<span class=\"number\">2</span>_0)<span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">UIWindow</span> :<span class=\"title\">UIView</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>)<span class=\"built_in\">UIScreen</span> *screen; </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>)<span class=\"built_in\">UIWindowLevel</span> windowLevel;            </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">readonly</span>,<span class=\"keyword\">getter</span>=isKeyWindow) </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">BOOL</span> keyWindow;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)becomeKeyWindow;                               </div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)resignKeyWindow;                               </div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)makeKeyWindow;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)makeKeyAndVisible;                             </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nullable</span>,<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>)<span class=\"built_in\">UIViewController</span> *rootViewController <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">4</span>_0);  <span class=\"comment\">// default is nil</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"></div><div class=\"line\"> 事件拦截分发到指定视图对象</div><div class=\"line\"></div><div class=\"line\"> 当用户发起一个事件，比如触摸屏幕或者晃动设备，系统产生一个事件，同时投递给UIApplication，而UIApplication则将这个事件传递给特定</div><div class=\"line\"></div><div class=\"line\"> UIWindow进行处理(正常情况都一个程序都只有一个UIWindow)，然后由UIWindow将这个事件传递给特定的对象(即first responder)并通过响应链</div><div class=\"line\"></div><div class=\"line\"> 进行处理。虽然都是通过响应链对事件进行处理，但是触摸事件和运动事件在处理上有着明显的不同(主要体现在确定哪个对象才是他们的first</div><div class=\"line\"></div><div class=\"line\"> responder)：</div><div class=\"line\"></div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)sendEvent:(<span class=\"built_in\">UIEvent</span> *)event; </div><div class=\"line\"></div><div class=\"line\">                   </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//窗口坐标系统转化</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGPoint</span>)convertPoint:(<span class=\"built_in\">CGPoint</span>)point toWindow:(nullableUIWindow *)window;<span class=\"comment\">//转化当前窗口一个坐标相对另外一个窗口的坐标</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGPoint</span>)convertPoint:(<span class=\"built_in\">CGPoint</span>)point fromWindow:(nullableUIWindow *)window;<span class=\"comment\">//转化另外窗口一个坐标相对于当前窗口的坐标</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGRect</span>)convertRect:(<span class=\"built_in\">CGRect</span>)rect toWindow:(nullableUIWindow *)window;<span class=\"comment\">//转化当前窗口一个矩形坐标相对另外一个窗口的坐标</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGRect</span>)convertRect:(<span class=\"built_in\">CGRect</span>)rect fromWindow:(nullableUIWindow *)window;<span class=\"comment\">//转化另外窗口一个矩形坐标相对于当前窗口的坐标</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> constUIWindowLevel <span class=\"built_in\">UIWindowLevelNormal</span>;<span class=\"comment\">//默认等级</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> constUIWindowLevel <span class=\"built_in\">UIWindowLevelAlert</span>;<span class=\"comment\">//UIAlert等级</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> constUIWindowLevel <span class=\"built_in\">UIWindowLevelStatusBar</span>;<span class=\"comment\">//状态栏等级</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIWindowDidBecomeVisibleNotification</span>;<span class=\"comment\">// nil 通知对象窗口为可见</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIWindowDidBecomeHiddenNotification</span>; <span class=\"comment\">// nil 通知对象窗口为隐藏</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIWindowDidBecomeKeyNotification</span>;    <span class=\"comment\">// nil 通知对象窗口为重要</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIWindowDidResignKeyNotification</span>;    <span class=\"comment\">// nil 通知对象窗口取消主窗</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//当键盘显示或消失时，系统会发送相关的通知:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardWillShowNotification</span>;<span class=\"comment\">//通知键盘对象视图即将加载</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardDidShowNotification</span>;<span class=\"comment\">//通知键盘对象视图完全加载</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardWillHideNotification</span>;<span class=\"comment\">//通知键盘对象视图即将隐藏</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardDidHideNotification</span>;<span class=\"comment\">//通知键盘对象视图完全隐藏</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"></div><div class=\"line\">通知消息 NSNotification中的 userInfo字典中包含键盘的位置和大小信息，对应的key为</div><div class=\"line\"></div><div class=\"line\">  UIKeyboardFrameBeginUserInfoKey</div><div class=\"line\"></div><div class=\"line\">  UIKeyboardFrameEndUserInfoKey</div><div class=\"line\"></div><div class=\"line\">  UIKeyboardAnimationDurationUserInfoKey</div><div class=\"line\"></div><div class=\"line\">  UIKeyboardAnimationCurveUserInfoKey</div><div class=\"line\"></div><div class=\"line\">UIKeyboardFrameBeginUserInfoKey,UIKeyboardFrameEndUserInfoKey对应的Value是个NSValue对象，内部包含CGRect结构，分别为键盘起始时和终止时的位置信息。</div><div class=\"line\"></div><div class=\"line\">UIKeyboardAnimationCurveUserInfoKey对应的Value是NSNumber对象，内部为UIViewAnimationCurve类型的数据，表示键盘显示或消失的动画类型。</div><div class=\"line\"></div><div class=\"line\">UIKeyboardAnimationDurationUserInfoKey对应的Value也是NSNumber对象，内部为double类型的数据，表示键盘h显示或消失时动画的持续时间</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> 例如，在UIKeyboardWillShowNotification，UIKeyboardDidShowNotification通知中的userInfo内容为</div><div class=\"line\"></div><div class=\"line\">    userInfo = &#123;</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardAnimationCurveUserInfoKey = 0;</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardAnimationDurationUserInfoKey = \"0.25\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardBoundsUserInfoKey = \"NSRect: &#123;&#123;0, 0&#125;, &#123;320, 216&#125;&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardCenterBeginUserInfoKey = \"NSPoint: &#123;160, 588&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardCenterEndUserInfoKey = \"NSPoint: &#123;160, 372&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardFrameBeginUserInfoKey = \"NSRect: &#123;&#123;0, 480&#125;, &#123;320, 216&#125;&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardFrameChangedByUserInteraction = 0;</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardFrameEndUserInfoKey = \"NSRect: &#123;&#123;0, 264&#125;, &#123;320, 216&#125;&#125;\";</div><div class=\"line\"></div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">    在UIKeyboardWillHideNotification,UIKeyboardDidHideNotification通知中的userInfo内容为:</div><div class=\"line\"></div><div class=\"line\">   userInfo = &#123;</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardAnimationCurveUserInfoKey = 0;</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardAnimationDurationUserInfoKey = \"0.25\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardBoundsUserInfoKey = \"NSRect: &#123;&#123;0, 0&#125;, &#123;320, 216&#125;&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardCenterBeginUserInfoKey = \"NSPoint: &#123;160, 372&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardCenterEndUserInfoKey = \"NSPoint: &#123;160, 588&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardFrameBeginUserInfoKey = \"NSRect: &#123;&#123;0, 264&#125;, &#123;320, 216&#125;&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardFrameChangedByUserInteraction = 0;</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardFrameEndUserInfoKey = \"NSRect: &#123;&#123;0, 480&#125;, &#123;320, 216&#125;&#125;\";</div><div class=\"line\"></div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardFrameBeginUserInfoKey</span>       <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">3</span>_2);<span class=\"comment\">// NSValue of CGRect</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardFrameEndUserInfoKey</span>         <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">3</span>_2);<span class=\"comment\">// NSValue of CGRect</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardAnimationDurationUserInfoKeyNS_AVAILABLE_IOS</span>(<span class=\"number\">3</span>_0);<span class=\"comment\">// NSNumber of double</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardAnimationCurveUserInfoKey</span>   <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">3</span>_0);<span class=\"comment\">// NSNumber of NSUInteger (UIViewAnimationCurve)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardIsLocalUserInfoKey</span>          <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">9</span>_0);<span class=\"comment\">// NSNumber of BOOL</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardWillChangeFrameNotification</span> <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">5</span>_0);<span class=\"comment\">//键盘即将改变布局发出通知</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardDidChangeFrameNotification</span>  <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">5</span>_0);<span class=\"comment\">//键盘已经改变布局后发出通知</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardCenterBeginUserInfoKey</span>  <span class=\"built_in\">NS_DEPRECATED_IOS</span>(<span class=\"number\">2</span>_0,<span class=\"number\">3</span>_2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardCenterEndUserInfoKey</span>    <span class=\"built_in\">NS_DEPRECATED_IOS</span>(<span class=\"number\">2</span>_0,<span class=\"number\">3</span>_2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardBoundsUserInfoKey</span>       <span class=\"built_in\">NS_DEPRECATED_IOS</span>(<span class=\"number\">2</span>_0,<span class=\"number\">3</span>_2);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NS_ASSUME_NONNULL_END</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span>//基础框架入口</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;CoreGraphics/CoreGraphics.h&gt;</span>//绘图入口</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIView.h&gt;</span>//视图对象</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIApplication.h&gt;</span>//提供iOS程序运行期的协作和控制</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIKitDefines.h&gt;</span>//一些宏定义</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NS_ASSUME_NONNULL_BEGIN</span> </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">CGFloat</span> <span class=\"built_in\">UIWindowLevel</span>;<span class=\"comment\">//32位则为float | 64位为double</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"></div><div class=\"line\">  UIEvent 触摸事件，运动事件</div><div class=\"line\"></div><div class=\"line\">  UIScreen 屏幕处理</div><div class=\"line\"></div><div class=\"line\">  NSUndoManager  记录撤销，修改操作的消息</div><div class=\"line\"></div><div class=\"line\">  UIViewController 视图控制器</div><div class=\"line\"></div><div class=\"line\">*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@class</span> <span class=\"title\">UIEvent</span>,<span class=\"title\">UIScreen</span>, <span class=\"title\">NSUndoManager</span>,<span class=\"title\">UIViewController</span>;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NS_CLASS_AVAILABLE_IOS</span>(<span class=\"number\">2</span>_0)<span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">UIWindow</span> :<span class=\"title\">UIView</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>)<span class=\"built_in\">UIScreen</span> *screen; </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>)<span class=\"built_in\">UIWindowLevel</span> windowLevel;            </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">readonly</span>,<span class=\"keyword\">getter</span>=isKeyWindow) </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">BOOL</span> keyWindow;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)becomeKeyWindow;                               </div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)resignKeyWindow;                               </div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)makeKeyWindow;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)makeKeyAndVisible;                             </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nullable</span>,<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>)<span class=\"built_in\">UIViewController</span> *rootViewController <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">4</span>_0);  <span class=\"comment\">// default is nil</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"></div><div class=\"line\"> 事件拦截分发到指定视图对象</div><div class=\"line\"></div><div class=\"line\"> 当用户发起一个事件，比如触摸屏幕或者晃动设备，系统产生一个事件，同时投递给UIApplication，而UIApplication则将这个事件传递给特定</div><div class=\"line\"></div><div class=\"line\"> UIWindow进行处理(正常情况都一个程序都只有一个UIWindow)，然后由UIWindow将这个事件传递给特定的对象(即first responder)并通过响应链</div><div class=\"line\"></div><div class=\"line\"> 进行处理。虽然都是通过响应链对事件进行处理，但是触摸事件和运动事件在处理上有着明显的不同(主要体现在确定哪个对象才是他们的first</div><div class=\"line\"></div><div class=\"line\"> responder)：</div><div class=\"line\"></div><div class=\"line\">*/</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)sendEvent:(<span class=\"built_in\">UIEvent</span> *)event; </div><div class=\"line\"></div><div class=\"line\">                   </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//窗口坐标系统转化</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGPoint</span>)convertPoint:(<span class=\"built_in\">CGPoint</span>)point toWindow:(nullableUIWindow *)window;<span class=\"comment\">//转化当前窗口一个坐标相对另外一个窗口的坐标</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGPoint</span>)convertPoint:(<span class=\"built_in\">CGPoint</span>)point fromWindow:(nullableUIWindow *)window;<span class=\"comment\">//转化另外窗口一个坐标相对于当前窗口的坐标</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGRect</span>)convertRect:(<span class=\"built_in\">CGRect</span>)rect toWindow:(nullableUIWindow *)window;<span class=\"comment\">//转化当前窗口一个矩形坐标相对另外一个窗口的坐标</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGRect</span>)convertRect:(<span class=\"built_in\">CGRect</span>)rect fromWindow:(nullableUIWindow *)window;<span class=\"comment\">//转化另外窗口一个矩形坐标相对于当前窗口的坐标</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> constUIWindowLevel <span class=\"built_in\">UIWindowLevelNormal</span>;<span class=\"comment\">//默认等级</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> constUIWindowLevel <span class=\"built_in\">UIWindowLevelAlert</span>;<span class=\"comment\">//UIAlert等级</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> constUIWindowLevel <span class=\"built_in\">UIWindowLevelStatusBar</span>;<span class=\"comment\">//状态栏等级</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIWindowDidBecomeVisibleNotification</span>;<span class=\"comment\">// nil 通知对象窗口为可见</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIWindowDidBecomeHiddenNotification</span>; <span class=\"comment\">// nil 通知对象窗口为隐藏</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIWindowDidBecomeKeyNotification</span>;    <span class=\"comment\">// nil 通知对象窗口为重要</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIWindowDidResignKeyNotification</span>;    <span class=\"comment\">// nil 通知对象窗口取消主窗</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//当键盘显示或消失时，系统会发送相关的通知:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardWillShowNotification</span>;<span class=\"comment\">//通知键盘对象视图即将加载</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardDidShowNotification</span>;<span class=\"comment\">//通知键盘对象视图完全加载</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardWillHideNotification</span>;<span class=\"comment\">//通知键盘对象视图即将隐藏</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardDidHideNotification</span>;<span class=\"comment\">//通知键盘对象视图完全隐藏</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"></div><div class=\"line\">通知消息 NSNotification中的 userInfo字典中包含键盘的位置和大小信息，对应的key为</div><div class=\"line\"></div><div class=\"line\">  UIKeyboardFrameBeginUserInfoKey</div><div class=\"line\"></div><div class=\"line\">  UIKeyboardFrameEndUserInfoKey</div><div class=\"line\"></div><div class=\"line\">  UIKeyboardAnimationDurationUserInfoKey</div><div class=\"line\"></div><div class=\"line\">  UIKeyboardAnimationCurveUserInfoKey</div><div class=\"line\"></div><div class=\"line\">UIKeyboardFrameBeginUserInfoKey,UIKeyboardFrameEndUserInfoKey对应的Value是个NSValue对象，内部包含CGRect结构，分别为键盘起始时和终止时的位置信息。</div><div class=\"line\"></div><div class=\"line\">UIKeyboardAnimationCurveUserInfoKey对应的Value是NSNumber对象，内部为UIViewAnimationCurve类型的数据，表示键盘显示或消失的动画类型。</div><div class=\"line\"></div><div class=\"line\">UIKeyboardAnimationDurationUserInfoKey对应的Value也是NSNumber对象，内部为double类型的数据，表示键盘h显示或消失时动画的持续时间</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> 例如，在UIKeyboardWillShowNotification，UIKeyboardDidShowNotification通知中的userInfo内容为</div><div class=\"line\"></div><div class=\"line\">    userInfo = &#123;</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardAnimationCurveUserInfoKey = 0;</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardAnimationDurationUserInfoKey = \"0.25\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardBoundsUserInfoKey = \"NSRect: &#123;&#123;0, 0&#125;, &#123;320, 216&#125;&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardCenterBeginUserInfoKey = \"NSPoint: &#123;160, 588&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardCenterEndUserInfoKey = \"NSPoint: &#123;160, 372&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardFrameBeginUserInfoKey = \"NSRect: &#123;&#123;0, 480&#125;, &#123;320, 216&#125;&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardFrameChangedByUserInteraction = 0;</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardFrameEndUserInfoKey = \"NSRect: &#123;&#123;0, 264&#125;, &#123;320, 216&#125;&#125;\";</div><div class=\"line\"></div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">    在UIKeyboardWillHideNotification,UIKeyboardDidHideNotification通知中的userInfo内容为:</div><div class=\"line\"></div><div class=\"line\">   userInfo = &#123;</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardAnimationCurveUserInfoKey = 0;</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardAnimationDurationUserInfoKey = \"0.25\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardBoundsUserInfoKey = \"NSRect: &#123;&#123;0, 0&#125;, &#123;320, 216&#125;&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardCenterBeginUserInfoKey = \"NSPoint: &#123;160, 372&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardCenterEndUserInfoKey = \"NSPoint: &#123;160, 588&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardFrameBeginUserInfoKey = \"NSRect: &#123;&#123;0, 264&#125;, &#123;320, 216&#125;&#125;\";</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardFrameChangedByUserInteraction = 0;</div><div class=\"line\"></div><div class=\"line\">                 UIKeyboardFrameEndUserInfoKey = \"NSRect: &#123;&#123;0, 480&#125;, &#123;320, 216&#125;&#125;\";</div><div class=\"line\"></div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardFrameBeginUserInfoKey</span>       <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">3</span>_2);<span class=\"comment\">// NSValue of CGRect</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardFrameEndUserInfoKey</span>         <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">3</span>_2);<span class=\"comment\">// NSValue of CGRect</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardAnimationDurationUserInfoKeyNS_AVAILABLE_IOS</span>(<span class=\"number\">3</span>_0);<span class=\"comment\">// NSNumber of double</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardAnimationCurveUserInfoKey</span>   <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">3</span>_0);<span class=\"comment\">// NSNumber of NSUInteger (UIViewAnimationCurve)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardIsLocalUserInfoKey</span>          <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">9</span>_0);<span class=\"comment\">// NSNumber of BOOL</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardWillChangeFrameNotification</span> <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">5</span>_0);<span class=\"comment\">//键盘即将改变布局发出通知</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardDidChangeFrameNotification</span>  <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">5</span>_0);<span class=\"comment\">//键盘已经改变布局后发出通知</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardCenterBeginUserInfoKey</span>  <span class=\"built_in\">NS_DEPRECATED_IOS</span>(<span class=\"number\">2</span>_0,<span class=\"number\">3</span>_2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardCenterEndUserInfoKey</span>    <span class=\"built_in\">NS_DEPRECATED_IOS</span>(<span class=\"number\">2</span>_0,<span class=\"number\">3</span>_2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">UIKIT_EXTERN</span> <span class=\"built_in\">NSString</span> *<span class=\"keyword\">const</span> <span class=\"built_in\">UIKeyboardBoundsUserInfoKey</span>       <span class=\"built_in\">NS_DEPRECATED_IOS</span>(<span class=\"number\">2</span>_0,<span class=\"number\">3</span>_2);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NS_ASSUME_NONNULL_END</span></div></pre></td></tr></table></figure>"},{"title":"UIscrollView滚动时调用的方法","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n//UIscrollView开始拖拽的时候调用\n- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView\n{\n    NSLog(@\"开始拖拽\");\n}\n\n\n//UIscrollView拖拽结束的时候调用\n-(void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate\n{\n    NSLog(@\"拖拽结束\");\n}\n\n\n//UIscrollView拖拽结束的时候调用\n-(void)scrollViewDidScroll:(UIScrollView *)scrollView\n{\n    //在滚动的时候调用\n}\n \n//UIscrollView开始减速的时候调用\n-(void)scrollViewWillBeginDecelerating:(UIScrollView *)scrollView\n{\n    NSLog(@\"开始减速\");\n   \n}\n\n//UIscrollView减速停止的时候调用\n-(void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView\n{\n    NSLog(@\"减速停止\");\n}\n\n-(UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView\n{\n    return [scrollView viewWithTag:9999];\n    //只有实现这个方法 才能执行缩放 指定对象;\n}\n-(void)scrollViewDidZoom:(UIScrollView *)scrollView\n{\n    NSLog(@\"缩放时一直触发\");\n   \n}\n\n\n- (UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView\n{\n    return _imageView;\n}\n\n#pragma mark 当缩放完毕的时候调用\n- (void)scrollViewDidEndZooming:(UIScrollView *)scrollView withView:(UIView *)view atScale:(float)scale\n{\n//    NSLog(@\"结束缩放 - %f\", scale);\n}\n\n#pragma mark 当正在缩放的时候调用\n- (void)scrollViewDidZoom:(UIScrollView *)scrollView\n{\n//    NSLog(@\"-----\");\n}\n```\n\n","source":"_posts/oc/UIscrollView滚动时调用的方法.md","raw":"---\ntitle: UIscrollView滚动时调用的方法\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n//UIscrollView开始拖拽的时候调用\n- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView\n{\n    NSLog(@\"开始拖拽\");\n}\n\n\n//UIscrollView拖拽结束的时候调用\n-(void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate\n{\n    NSLog(@\"拖拽结束\");\n}\n\n\n//UIscrollView拖拽结束的时候调用\n-(void)scrollViewDidScroll:(UIScrollView *)scrollView\n{\n    //在滚动的时候调用\n}\n \n//UIscrollView开始减速的时候调用\n-(void)scrollViewWillBeginDecelerating:(UIScrollView *)scrollView\n{\n    NSLog(@\"开始减速\");\n   \n}\n\n//UIscrollView减速停止的时候调用\n-(void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView\n{\n    NSLog(@\"减速停止\");\n}\n\n-(UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView\n{\n    return [scrollView viewWithTag:9999];\n    //只有实现这个方法 才能执行缩放 指定对象;\n}\n-(void)scrollViewDidZoom:(UIScrollView *)scrollView\n{\n    NSLog(@\"缩放时一直触发\");\n   \n}\n\n\n- (UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView\n{\n    return _imageView;\n}\n\n#pragma mark 当缩放完毕的时候调用\n- (void)scrollViewDidEndZooming:(UIScrollView *)scrollView withView:(UIView *)view atScale:(float)scale\n{\n//    NSLog(@\"结束缩放 - %f\", scale);\n}\n\n#pragma mark 当正在缩放的时候调用\n- (void)scrollViewDidZoom:(UIScrollView *)scrollView\n{\n//    NSLog(@\"-----\");\n}\n```\n\n","slug":"oc/UIscrollView滚动时调用的方法","published":1,"updated":"2016-10-08T06:03:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97w002c21xwug62gh8y","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//UIscrollView开始拖拽的时候调用</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)scrollViewWillBeginDragging:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"开始拖拽\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//UIscrollView拖拽结束的时候调用</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)scrollViewDidEndDragging:(<span class=\"built_in\">UIScrollView</span> *)scrollView willDecelerate:(<span class=\"built_in\">BOOL</span>)decelerate</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"拖拽结束\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//UIscrollView拖拽结束的时候调用</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)scrollViewDidScroll:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//在滚动的时候调用</span></div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//UIscrollView开始减速的时候调用</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)scrollViewWillBeginDecelerating:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"开始减速\"</span>);</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//UIscrollView减速停止的时候调用</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)scrollViewDidEndDecelerating:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"减速停止\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">UIView</span> *)viewForZoomingInScrollView:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [scrollView viewWithTag:<span class=\"number\">9999</span>];</div><div class=\"line\">    <span class=\"comment\">//只有实现这个方法 才能执行缩放 指定对象;</span></div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)scrollViewDidZoom:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"缩放时一直触发\"</span>);</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">UIView</span> *)viewForZoomingInScrollView:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _imageView;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark 当缩放完毕的时候调用</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)scrollViewDidEndZooming:(<span class=\"built_in\">UIScrollView</span> *)scrollView withView:(<span class=\"built_in\">UIView</span> *)view atScale:(<span class=\"keyword\">float</span>)scale</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"comment\">//    NSLog(@\"结束缩放 - %f\", scale);</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark 当正在缩放的时候调用</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)scrollViewDidZoom:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"comment\">//    NSLog(@\"-----\");</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//UIscrollView开始拖拽的时候调用</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)scrollViewWillBeginDragging:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"开始拖拽\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//UIscrollView拖拽结束的时候调用</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)scrollViewDidEndDragging:(<span class=\"built_in\">UIScrollView</span> *)scrollView willDecelerate:(<span class=\"built_in\">BOOL</span>)decelerate</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"拖拽结束\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//UIscrollView拖拽结束的时候调用</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)scrollViewDidScroll:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//在滚动的时候调用</span></div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//UIscrollView开始减速的时候调用</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)scrollViewWillBeginDecelerating:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"开始减速\"</span>);</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//UIscrollView减速停止的时候调用</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)scrollViewDidEndDecelerating:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"减速停止\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">UIView</span> *)viewForZoomingInScrollView:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [scrollView viewWithTag:<span class=\"number\">9999</span>];</div><div class=\"line\">    <span class=\"comment\">//只有实现这个方法 才能执行缩放 指定对象;</span></div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)scrollViewDidZoom:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"缩放时一直触发\"</span>);</div><div class=\"line\">   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">UIView</span> *)viewForZoomingInScrollView:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _imageView;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark 当缩放完毕的时候调用</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)scrollViewDidEndZooming:(<span class=\"built_in\">UIScrollView</span> *)scrollView withView:(<span class=\"built_in\">UIView</span> *)view atScale:(<span class=\"keyword\">float</span>)scale</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"comment\">//    NSLog(@\"结束缩放 - %f\", scale);</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark 当正在缩放的时候调用</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)scrollViewDidZoom:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"comment\">//    NSLog(@\"-----\");</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"UTF-8 和 GBK 的 NSString 相互转化的方法","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n应用都要遇到一个很头疼的问题：文字编码，汉字的 GBK 和 国际通用的 UTF-8 的互相转化稍一不慎，\n就会满屏乱码。下面介绍 UTF-8 和 GBK 的 NSString 相互转化的方法\n \n NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);\n    char* c_test = \"北京\";\n    int nLen = strlen(c_test);\n    NSString* str = [[NSString alloc]initWithBytes:c_test length:nLen encoding:enc ];\n    NSLog(@\"str = %@\",str);\n \n**从 GBK 转到 UTF-8\n**用 NSStringEncoding enc =CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000) ，\n然后就可以用initWithData：encoding来实现。\n \n**从 UTF-8 转到 GBK\n**CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000)，\n得到的enc却是kCFStringEncodingInvalidId。\n没关系，试试 NSData *data=[nsstring dataUsingEncoding:-2147482063];\n \n转换字符编码主要用到CFStringConvertEncodingToNSStringEncoding函数,具体的大家可以看看这个函数的用法\nNSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding (kCFStringEncodingGB_18030_2000);\n \n \n完整代码如下:\n**NSURL *url = [NSURL URLWithString:urlStr];\nNSData *data = [NSData dataWithContentsOfURL:url]; \nNSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);\nNSString *retStr = [[NSString alloc] initWithData:data encoding:enc];\n** \n一个比较方便的转换NSString为UTF8编码的函数,大家可以试试\n \n**头文件：\n**@interface NSString (OAURLEncodingAdditions) \n- (NSString *)URLEncodedString; \n- (NSString *)URLDecodedString; \n@end\n**m文件:\n** \n@implementation \nNSString (OAURLEncodingAdditions) \n - (NSString *)URLEncodedString\n{ \n NSString *result = (NSString *)CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault,(CFStringRef)self,NULL,CFSTR(\"!*'();:@&=+$,/?%#[]\"),kCFStringEncodingUTF8);\n [result autorelease];\n return result; \n}\n \n- (NSString*)URLDecodedString\n{\n   NSString *result = (NSString *)CFURLCreateStringByReplacingPercentEscapesUsingEncoding(kCFAllocatorDefault,(CFStringRef)self, CFSTR(\"\"),kCFStringEncodingUTF8);CFSTR(\"\"),kCFStringEncodingUTF8); \n   [result autorelease];    \n   return result; \n} \n@end\n如果需要转换一个NSString, 只需要\n \nNSString *temp = [@\"测试utf8\" URLEncodedString];  \nNSString *decoded = [temp URLDecodedString];\n","source":"_posts/oc/UTF-8 和 GBK 的 NSString 相互转化的方法.md","raw":"---\ntitle: UTF-8 和 GBK 的 NSString 相互转化的方法\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n应用都要遇到一个很头疼的问题：文字编码，汉字的 GBK 和 国际通用的 UTF-8 的互相转化稍一不慎，\n就会满屏乱码。下面介绍 UTF-8 和 GBK 的 NSString 相互转化的方法\n \n NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);\n    char* c_test = \"北京\";\n    int nLen = strlen(c_test);\n    NSString* str = [[NSString alloc]initWithBytes:c_test length:nLen encoding:enc ];\n    NSLog(@\"str = %@\",str);\n \n**从 GBK 转到 UTF-8\n**用 NSStringEncoding enc =CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000) ，\n然后就可以用initWithData：encoding来实现。\n \n**从 UTF-8 转到 GBK\n**CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000)，\n得到的enc却是kCFStringEncodingInvalidId。\n没关系，试试 NSData *data=[nsstring dataUsingEncoding:-2147482063];\n \n转换字符编码主要用到CFStringConvertEncodingToNSStringEncoding函数,具体的大家可以看看这个函数的用法\nNSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding (kCFStringEncodingGB_18030_2000);\n \n \n完整代码如下:\n**NSURL *url = [NSURL URLWithString:urlStr];\nNSData *data = [NSData dataWithContentsOfURL:url]; \nNSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);\nNSString *retStr = [[NSString alloc] initWithData:data encoding:enc];\n** \n一个比较方便的转换NSString为UTF8编码的函数,大家可以试试\n \n**头文件：\n**@interface NSString (OAURLEncodingAdditions) \n- (NSString *)URLEncodedString; \n- (NSString *)URLDecodedString; \n@end\n**m文件:\n** \n@implementation \nNSString (OAURLEncodingAdditions) \n - (NSString *)URLEncodedString\n{ \n NSString *result = (NSString *)CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault,(CFStringRef)self,NULL,CFSTR(\"!*'();:@&=+$,/?%#[]\"),kCFStringEncodingUTF8);\n [result autorelease];\n return result; \n}\n \n- (NSString*)URLDecodedString\n{\n   NSString *result = (NSString *)CFURLCreateStringByReplacingPercentEscapesUsingEncoding(kCFAllocatorDefault,(CFStringRef)self, CFSTR(\"\"),kCFStringEncodingUTF8);CFSTR(\"\"),kCFStringEncodingUTF8); \n   [result autorelease];    \n   return result; \n} \n@end\n如果需要转换一个NSString, 只需要\n \nNSString *temp = [@\"测试utf8\" URLEncodedString];  \nNSString *decoded = [temp URLDecodedString];\n","slug":"oc/UTF-8 和 GBK 的 NSString 相互转化的方法","published":1,"updated":"2016-10-08T09:12:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97x002e21xwff5kgxga","content":"<a id=\"more\"></a>\n<p>应用都要遇到一个很头疼的问题：文字编码，汉字的 GBK 和 国际通用的 UTF-8 的互相转化稍一不慎，<br>就会满屏乱码。下面介绍 UTF-8 和 GBK 的 NSString 相互转化的方法</p>\n<p> NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);<br>    char<em> c_test = “北京”;<br>    int nLen = strlen(c_test);<br>    NSString</em> str = [[NSString alloc]initWithBytes:c_test length:nLen encoding:enc ];<br>    NSLog(@”str = %@”,str);</p>\n<p><strong>从 GBK 转到 UTF-8\n</strong>用 NSStringEncoding enc =CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000) ，<br>然后就可以用initWithData：encoding来实现。</p>\n<p><strong>从 UTF-8 转到 GBK\n</strong>CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000)，<br>得到的enc却是kCFStringEncodingInvalidId。<br>没关系，试试 NSData *data=[nsstring dataUsingEncoding:-2147482063];</p>\n<p>转换字符编码主要用到CFStringConvertEncodingToNSStringEncoding函数,具体的大家可以看看这个函数的用法<br>NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding (kCFStringEncodingGB_18030_2000);</p>\n<p>完整代码如下:<br><strong>NSURL <em>url = [NSURL URLWithString:urlStr];<br>NSData </em>data = [NSData dataWithContentsOfURL:url];<br>NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);<br>NSString *retStr = [[NSString alloc] initWithData:data encoding:enc];\n</strong><br>一个比较方便的转换NSString为UTF8编码的函数,大家可以试试</p>\n<p><strong>头文件：\n</strong>@interface NSString (OAURLEncodingAdditions) </p>\n<ul>\n<li>(NSString *)URLEncodedString; </li>\n<li><p>(NSString <em>)URLDecodedString;<br>@end<br><em>*m文件:\n</em></em><br>@implementation<br>NSString (OAURLEncodingAdditions) </p>\n<ul>\n<li>(NSString <em>)URLEncodedString<br>{<br>NSString </em>result = (NSString <em>)CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault,(CFStringRef)self,NULL,CFSTR(“!</em>‘();:@&amp;=+$,/?%#[]”),kCFStringEncodingUTF8);<br>[result autorelease];<br>return result;<br>}</li>\n</ul>\n</li>\n<li><p>(NSString<em>)URLDecodedString<br>{<br> NSString </em>result = (NSString *)CFURLCreateStringByReplacingPercentEscapesUsingEncoding(kCFAllocatorDefault,(CFStringRef)self, CFSTR(“”),kCFStringEncodingUTF8);CFSTR(“”),kCFStringEncodingUTF8);<br> [result autorelease];<br> return result;<br>}<br>@end<br>如果需要转换一个NSString, 只需要</p>\n</li>\n</ul>\n<p>NSString <em>temp = [@”测试utf8” URLEncodedString];<br>NSString </em>decoded = [temp URLDecodedString];</p>\n","excerpt":"","more":"<p>应用都要遇到一个很头疼的问题：文字编码，汉字的 GBK 和 国际通用的 UTF-8 的互相转化稍一不慎，<br>就会满屏乱码。下面介绍 UTF-8 和 GBK 的 NSString 相互转化的方法</p>\n<p> NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);<br>    char<em> c_test = “北京”;<br>    int nLen = strlen(c_test);<br>    NSString</em> str = [[NSString alloc]initWithBytes:c_test length:nLen encoding:enc ];<br>    NSLog(@”str = %@”,str);</p>\n<p><strong>从 GBK 转到 UTF-8\n</strong>用 NSStringEncoding enc =CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000) ，<br>然后就可以用initWithData：encoding来实现。</p>\n<p><strong>从 UTF-8 转到 GBK\n</strong>CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000)，<br>得到的enc却是kCFStringEncodingInvalidId。<br>没关系，试试 NSData *data=[nsstring dataUsingEncoding:-2147482063];</p>\n<p>转换字符编码主要用到CFStringConvertEncodingToNSStringEncoding函数,具体的大家可以看看这个函数的用法<br>NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding (kCFStringEncodingGB_18030_2000);</p>\n<p>完整代码如下:<br><strong>NSURL <em>url = [NSURL URLWithString:urlStr];<br>NSData </em>data = [NSData dataWithContentsOfURL:url];<br>NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);<br>NSString *retStr = [[NSString alloc] initWithData:data encoding:enc];\n</strong><br>一个比较方便的转换NSString为UTF8编码的函数,大家可以试试</p>\n<p><strong>头文件：\n</strong>@interface NSString (OAURLEncodingAdditions) </p>\n<ul>\n<li>(NSString *)URLEncodedString; </li>\n<li><p>(NSString <em>)URLDecodedString;<br>@end<br><em>*m文件:\n</em></em><br>@implementation<br>NSString (OAURLEncodingAdditions) </p>\n<ul>\n<li>(NSString <em>)URLEncodedString<br>{<br>NSString </em>result = (NSString <em>)CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault,(CFStringRef)self,NULL,CFSTR(“!</em>‘();:@&amp;=+$,/?%#[]”),kCFStringEncodingUTF8);<br>[result autorelease];<br>return result;<br>}</li>\n</ul>\n</li>\n<li><p>(NSString<em>)URLDecodedString<br>{<br> NSString </em>result = (NSString *)CFURLCreateStringByReplacingPercentEscapesUsingEncoding(kCFAllocatorDefault,(CFStringRef)self, CFSTR(“”),kCFStringEncodingUTF8);CFSTR(“”),kCFStringEncodingUTF8);<br> [result autorelease];<br> return result;<br>}<br>@end<br>如果需要转换一个NSString, 只需要</p>\n</li>\n</ul>\n<p>NSString <em>temp = [@”测试utf8” URLEncodedString];<br>NSString </em>decoded = [temp URLDecodedString];</p>"},{"title":"assert","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\nassert宏的原型定义在<assert.h>中，其作用是如果它的条件返回错误，则终止程序执行，原型定义：\n\n\n#include <assert.h>\nvoid assert( int expression );\nassert的作用是现计算表达式 expression ，如果其值为假（即为0），那么它先向stderr打印一条出错信息，然后通过调用 abort 来终止程序运行。请看下面的程序清单badptr.c：\n\n\n\n 1 #include <stdio.h>\n 2 #include <assert.h>\n 3 #include <stdlib.h>\n 4 int main( void )\n 5 {\n 6        FILE *fp;\n 7     \n 8        fp = fopen( \"test.txt\", \"w\" );//以可写的方式打开一个文件，如果不存在就创建一个同名文件\n 9        assert( fp );                           //所以这里不会出错\n10        fclose( fp );\n11     \n12        fp = fopen( \"noexitfile.txt\", \"r\" );//以只读的方式打开一个文件，如果不存在就打开文件失败\n13        assert( fp );                           //所以这里出错\n14        fclose( fp );                           //程序永远都执行不到这里来\n15        return 0;\n16 }\n\n已放弃使用assert()的缺点是，频繁的调用会极大的影响程序的性能，增加额外的开销。在调试结束后，可以通过在包含#include <assert.h>的语句之前插入 #define NDEBUG 来禁用assert调用，示例代码如下：\n\n\n#include <stdio.h>\n#define NDEBUG\n#include <assert.h>\n用法总结与注意事项：\n\n1）在函数开始处检验传入参数的合法性如：\n\n\n\nint resetBufferSize(int nNewSize)\n{\n　　//功能:改变缓冲区大小,\n　　//参数:nNewSize 缓冲区新长度\n　　//返回值:缓冲区当前长度 \n　　//说明:保持原信息内容不变     nNewSize<=0表示清除缓冲区\n　　assert(nNewSize >= 0);\n　　assert(nNewSize <= MAX_BUFFER_SIZE);\n　　...\n}\n\n  2）每个assert只检验一个条件，因为同时检验多个条件时，如果断言失败，无法直观的判断是哪个条件失败，如：\n\n　不好：\n\n\nassert(nOffset>=0 && nOffset+nSize<=m_nInfomationSize);\n　好：\n\n\nassert(nOffset >= 0);\nassert(nOffset+nSize <= m_nInfomationSize);\n\n3）不能使用改变环境的语句，因为assert只在DEBUG个生效，如果这么做，会使用程序在真正运行时遇到问题，如：\n　错误：\n\n\nassert(i++ < 100);\n这是因为如果出错，比如在执行之前i=100，那么这条语句就不会执行，那么i++这条命令就没有执行。\n\n　正确：\n\n\nassert(i < 100);\n i++;\n\n   4）assert和后面的语句应空一行，以形成逻辑和视觉上的一致感。\n  5）有的地方，assert不能代替条件过滤。\n```\n\n","source":"_posts/oc/assert.md","raw":"---\ntitle: assert\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\nassert宏的原型定义在<assert.h>中，其作用是如果它的条件返回错误，则终止程序执行，原型定义：\n\n\n#include <assert.h>\nvoid assert( int expression );\nassert的作用是现计算表达式 expression ，如果其值为假（即为0），那么它先向stderr打印一条出错信息，然后通过调用 abort 来终止程序运行。请看下面的程序清单badptr.c：\n\n\n\n 1 #include <stdio.h>\n 2 #include <assert.h>\n 3 #include <stdlib.h>\n 4 int main( void )\n 5 {\n 6        FILE *fp;\n 7     \n 8        fp = fopen( \"test.txt\", \"w\" );//以可写的方式打开一个文件，如果不存在就创建一个同名文件\n 9        assert( fp );                           //所以这里不会出错\n10        fclose( fp );\n11     \n12        fp = fopen( \"noexitfile.txt\", \"r\" );//以只读的方式打开一个文件，如果不存在就打开文件失败\n13        assert( fp );                           //所以这里出错\n14        fclose( fp );                           //程序永远都执行不到这里来\n15        return 0;\n16 }\n\n已放弃使用assert()的缺点是，频繁的调用会极大的影响程序的性能，增加额外的开销。在调试结束后，可以通过在包含#include <assert.h>的语句之前插入 #define NDEBUG 来禁用assert调用，示例代码如下：\n\n\n#include <stdio.h>\n#define NDEBUG\n#include <assert.h>\n用法总结与注意事项：\n\n1）在函数开始处检验传入参数的合法性如：\n\n\n\nint resetBufferSize(int nNewSize)\n{\n　　//功能:改变缓冲区大小,\n　　//参数:nNewSize 缓冲区新长度\n　　//返回值:缓冲区当前长度 \n　　//说明:保持原信息内容不变     nNewSize<=0表示清除缓冲区\n　　assert(nNewSize >= 0);\n　　assert(nNewSize <= MAX_BUFFER_SIZE);\n　　...\n}\n\n  2）每个assert只检验一个条件，因为同时检验多个条件时，如果断言失败，无法直观的判断是哪个条件失败，如：\n\n　不好：\n\n\nassert(nOffset>=0 && nOffset+nSize<=m_nInfomationSize);\n　好：\n\n\nassert(nOffset >= 0);\nassert(nOffset+nSize <= m_nInfomationSize);\n\n3）不能使用改变环境的语句，因为assert只在DEBUG个生效，如果这么做，会使用程序在真正运行时遇到问题，如：\n　错误：\n\n\nassert(i++ < 100);\n这是因为如果出错，比如在执行之前i=100，那么这条语句就不会执行，那么i++这条命令就没有执行。\n\n　正确：\n\n\nassert(i < 100);\n i++;\n\n   4）assert和后面的语句应空一行，以形成逻辑和视觉上的一致感。\n  5）有的地方，assert不能代替条件过滤。\n```\n\n","slug":"oc/assert","published":1,"updated":"2016-10-08T09:08:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97x002g21xwhgzmx502","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\">assert宏的原型定义在&lt;assert.h&gt;中，其作用是如果它的条件返回错误，则终止程序执行，原型定义：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#include <span class=\"meta-string\">&lt;assert.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">void</span> assert( <span class=\"keyword\">int</span> expression );</div><div class=\"line\">assert的作用是现计算表达式 expression ，如果其值为假（即为<span class=\"number\">0</span>），那么它先向stderr打印一条出错信息，然后通过调用 abort 来终止程序运行。请看下面的程序清单badptr.c：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> <span class=\"number\">1</span> <span class=\"meta\">#include <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"> <span class=\"number\">2</span> <span class=\"meta\">#include <span class=\"meta-string\">&lt;assert.h&gt;</span></span></div><div class=\"line\"> <span class=\"number\">3</span> <span class=\"meta\">#include <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"> <span class=\"number\">4</span> <span class=\"keyword\">int</span> main( <span class=\"keyword\">void</span> )</div><div class=\"line\"> <span class=\"number\">5</span> &#123;</div><div class=\"line\"> <span class=\"number\">6</span>        FILE *fp;</div><div class=\"line\"> <span class=\"number\">7</span>     </div><div class=\"line\"> <span class=\"number\">8</span>        fp = fopen( <span class=\"string\">\"test.txt\"</span>, <span class=\"string\">\"w\"</span> );<span class=\"comment\">//以可写的方式打开一个文件，如果不存在就创建一个同名文件</span></div><div class=\"line\"> <span class=\"number\">9</span>        assert( fp );                           <span class=\"comment\">//所以这里不会出错</span></div><div class=\"line\"><span class=\"number\">10</span>        fclose( fp );</div><div class=\"line\"><span class=\"number\">11</span>     </div><div class=\"line\"><span class=\"number\">12</span>        fp = fopen( <span class=\"string\">\"noexitfile.txt\"</span>, <span class=\"string\">\"r\"</span> );<span class=\"comment\">//以只读的方式打开一个文件，如果不存在就打开文件失败</span></div><div class=\"line\"><span class=\"number\">13</span>        assert( fp );                           <span class=\"comment\">//所以这里出错</span></div><div class=\"line\"><span class=\"number\">14</span>        fclose( fp );                           <span class=\"comment\">//程序永远都执行不到这里来</span></div><div class=\"line\"><span class=\"number\">15</span>        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"number\">16</span> &#125;</div><div class=\"line\"></div><div class=\"line\">已放弃使用assert()的缺点是，频繁的调用会极大的影响程序的性能，增加额外的开销。在调试结束后，可以通过在包含<span class=\"meta\">#include <span class=\"meta-string\">&lt;assert.h&gt;</span>的语句之前插入 #define NDEBUG 来禁用assert调用，示例代码如下：</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#include <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#define NDEBUG</span></div><div class=\"line\"><span class=\"meta\">#include <span class=\"meta-string\">&lt;assert.h&gt;</span></span></div><div class=\"line\">用法总结与注意事项：</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1</span>）在函数开始处检验传入参数的合法性如：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> resetBufferSize(<span class=\"keyword\">int</span> nNewSize)</div><div class=\"line\">&#123;</div><div class=\"line\">　　<span class=\"comment\">//功能:改变缓冲区大小,</span></div><div class=\"line\">　　<span class=\"comment\">//参数:nNewSize 缓冲区新长度</span></div><div class=\"line\">　　<span class=\"comment\">//返回值:缓冲区当前长度 </span></div><div class=\"line\">　　<span class=\"comment\">//说明:保持原信息内容不变     nNewSize&lt;=0表示清除缓冲区</span></div><div class=\"line\">　　assert(nNewSize &gt;= <span class=\"number\">0</span>);</div><div class=\"line\">　　assert(nNewSize &lt;= MAX_BUFFER_SIZE);</div><div class=\"line\">　　...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"number\">2</span>）每个assert只检验一个条件，因为同时检验多个条件时，如果断言失败，无法直观的判断是哪个条件失败，如：</div><div class=\"line\"></div><div class=\"line\">　不好：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">assert(nOffset&gt;=<span class=\"number\">0</span> &amp;&amp; nOffset+nSize&lt;=m_nInfomationSize);</div><div class=\"line\">　好：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">assert(nOffset &gt;= <span class=\"number\">0</span>);</div><div class=\"line\">assert(nOffset+nSize &lt;= m_nInfomationSize);</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">3</span>）不能使用改变环境的语句，因为assert只在DEBUG个生效，如果这么做，会使用程序在真正运行时遇到问题，如：</div><div class=\"line\">　错误：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">assert(i++ &lt; <span class=\"number\">100</span>);</div><div class=\"line\">这是因为如果出错，比如在执行之前i=<span class=\"number\">100</span>，那么这条语句就不会执行，那么i++这条命令就没有执行。</div><div class=\"line\"></div><div class=\"line\">　正确：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">assert(i &lt; <span class=\"number\">100</span>);</div><div class=\"line\"> i++;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"number\">4</span>）assert和后面的语句应空一行，以形成逻辑和视觉上的一致感。</div><div class=\"line\">  <span class=\"number\">5</span>）有的地方，assert不能代替条件过滤。</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\">assert宏的原型定义在&lt;assert.h&gt;中，其作用是如果它的条件返回错误，则终止程序执行，原型定义：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#include <span class=\"meta-string\">&lt;assert.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">void</span> assert( <span class=\"keyword\">int</span> expression );</div><div class=\"line\">assert的作用是现计算表达式 expression ，如果其值为假（即为<span class=\"number\">0</span>），那么它先向stderr打印一条出错信息，然后通过调用 abort 来终止程序运行。请看下面的程序清单badptr.c：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> <span class=\"number\">1</span> <span class=\"meta\">#include <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"> <span class=\"number\">2</span> <span class=\"meta\">#include <span class=\"meta-string\">&lt;assert.h&gt;</span></span></div><div class=\"line\"> <span class=\"number\">3</span> <span class=\"meta\">#include <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"> <span class=\"number\">4</span> <span class=\"keyword\">int</span> main( <span class=\"keyword\">void</span> )</div><div class=\"line\"> <span class=\"number\">5</span> &#123;</div><div class=\"line\"> <span class=\"number\">6</span>        FILE *fp;</div><div class=\"line\"> <span class=\"number\">7</span>     </div><div class=\"line\"> <span class=\"number\">8</span>        fp = fopen( <span class=\"string\">\"test.txt\"</span>, <span class=\"string\">\"w\"</span> );<span class=\"comment\">//以可写的方式打开一个文件，如果不存在就创建一个同名文件</span></div><div class=\"line\"> <span class=\"number\">9</span>        assert( fp );                           <span class=\"comment\">//所以这里不会出错</span></div><div class=\"line\"><span class=\"number\">10</span>        fclose( fp );</div><div class=\"line\"><span class=\"number\">11</span>     </div><div class=\"line\"><span class=\"number\">12</span>        fp = fopen( <span class=\"string\">\"noexitfile.txt\"</span>, <span class=\"string\">\"r\"</span> );<span class=\"comment\">//以只读的方式打开一个文件，如果不存在就打开文件失败</span></div><div class=\"line\"><span class=\"number\">13</span>        assert( fp );                           <span class=\"comment\">//所以这里出错</span></div><div class=\"line\"><span class=\"number\">14</span>        fclose( fp );                           <span class=\"comment\">//程序永远都执行不到这里来</span></div><div class=\"line\"><span class=\"number\">15</span>        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"number\">16</span> &#125;</div><div class=\"line\"></div><div class=\"line\">已放弃使用assert()的缺点是，频繁的调用会极大的影响程序的性能，增加额外的开销。在调试结束后，可以通过在包含<span class=\"meta\">#include <span class=\"meta-string\">&lt;assert.h&gt;</span>的语句之前插入 #define NDEBUG 来禁用assert调用，示例代码如下：</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#include <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#define NDEBUG</span></div><div class=\"line\"><span class=\"meta\">#include <span class=\"meta-string\">&lt;assert.h&gt;</span></span></div><div class=\"line\">用法总结与注意事项：</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1</span>）在函数开始处检验传入参数的合法性如：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> resetBufferSize(<span class=\"keyword\">int</span> nNewSize)</div><div class=\"line\">&#123;</div><div class=\"line\">　　<span class=\"comment\">//功能:改变缓冲区大小,</span></div><div class=\"line\">　　<span class=\"comment\">//参数:nNewSize 缓冲区新长度</span></div><div class=\"line\">　　<span class=\"comment\">//返回值:缓冲区当前长度 </span></div><div class=\"line\">　　<span class=\"comment\">//说明:保持原信息内容不变     nNewSize&lt;=0表示清除缓冲区</span></div><div class=\"line\">　　assert(nNewSize &gt;= <span class=\"number\">0</span>);</div><div class=\"line\">　　assert(nNewSize &lt;= MAX_BUFFER_SIZE);</div><div class=\"line\">　　...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"number\">2</span>）每个assert只检验一个条件，因为同时检验多个条件时，如果断言失败，无法直观的判断是哪个条件失败，如：</div><div class=\"line\"></div><div class=\"line\">　不好：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">assert(nOffset&gt;=<span class=\"number\">0</span> &amp;&amp; nOffset+nSize&lt;=m_nInfomationSize);</div><div class=\"line\">　好：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">assert(nOffset &gt;= <span class=\"number\">0</span>);</div><div class=\"line\">assert(nOffset+nSize &lt;= m_nInfomationSize);</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">3</span>）不能使用改变环境的语句，因为assert只在DEBUG个生效，如果这么做，会使用程序在真正运行时遇到问题，如：</div><div class=\"line\">　错误：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">assert(i++ &lt; <span class=\"number\">100</span>);</div><div class=\"line\">这是因为如果出错，比如在执行之前i=<span class=\"number\">100</span>，那么这条语句就不会执行，那么i++这条命令就没有执行。</div><div class=\"line\"></div><div class=\"line\">　正确：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">assert(i &lt; <span class=\"number\">100</span>);</div><div class=\"line\"> i++;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"number\">4</span>）assert和后面的语句应空一行，以形成逻辑和视觉上的一致感。</div><div class=\"line\">  <span class=\"number\">5</span>）有的地方，assert不能代替条件过滤。</div></pre></td></tr></table></figure>"},{"title":"category extension","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\ncategory和extension用来做类扩展的，可以对现有类扩展功能或者修改其功能。在iOS中category应用是非常广泛的，系统自带的很多类都有多个category扩展功能。\n一般category中可以定义新的方法、重写类原来的方法和添加readonly属性\n而extension可以认为是匿名的category，但是这个extension相对于category有有一个特殊功能：在extension中可以定义可写的属性，公有可读、私有可写的属性(Publicly-Readable, Privately-Writeable Properties)一般这样实现！\n举例说明如下：1. 创建测试程序empty application2. 我们自定义一个UIViewController，命名为RootViewController，它的.h文件为：###[]()[代码]c#/cpp/oc代码：\n`01``//``02``// \n RootViewController.h``03``// \n Test4``04``//``05``// \n Created by Vincent on 13-5-29.``06``// \n Copyright (c) 2013年 DevDiv Community. All rights reserved.``07``//``08` `09``#import\n <UIKit/UIKit.h>``10` `11``@``interface` `RootViewController\n : UIViewController``12``@end`\n\n那么在其对应的.m中会自动生成以下代码：###[]()[代码]c#/cpp/oc代码：\n`01``//``02``// \n RootViewController.m``03``// \n Test4``04``//``05``// \n Created by Vincent on 13-5-29.``06``// \n Copyright (c) 2013年 DevDiv Community. All rights reserved.``07``//``08` `09``#import\n \"RootViewController.h\"``10` `11``@``interface` `RootViewController\n ()``12``@end``13` `14``@implementation\n RootViewController``15` `16` `17``-\n (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil``18``{``19``    ``self\n = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];``20``    ``if` `(self)\n {``21``        ``//\n Custom initialization``22``    ``}``23``    ``return` `self;``24``}``25` `26``-\n (``void``)viewDidLoad``27``{``28``    ``[super\n viewDidLoad];``29``    ``//\n Do any additional setup after loading the view.``30``    ``self.title\n = ``@\"RootController\"``;``31``    ``self.navigationItem``32``}``33` `34``-\n (``void``)didReceiveMemoryWarning``35``{``36``    ``[super\n didReceiveMemoryWarning];``37``    ``//\n Dispose of any resources that can be recreated.``38``}``39` `40``@end`\n3. 第2步中我们能看到###[]()[代码]c#/cpp/oc代码：\n`1``@``interface` `RootViewController\n ()``2``@end`\n这个就是extension了（也就是特殊类型的category）\n如果我们在.h添加这样一个属性@property (readonly) float value;那么RootViewController对外就暴露一个readonly的属性，它是公开的，所以外部是不能够对它进行写操作的。这时我们可以在extension加入以下代码：@property (readwrite) float value;那么这个属性在内部就是可读写的了，如果是只读只能在构造时期对它赋值，其他类方法中是不能对其赋值的。有了这个特性支持，那么类的内部方法均可以对其进行赋值了。\n\n\n","source":"_posts/oc/category extension.md","raw":"---\ntitle: category extension\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\ncategory和extension用来做类扩展的，可以对现有类扩展功能或者修改其功能。在iOS中category应用是非常广泛的，系统自带的很多类都有多个category扩展功能。\n一般category中可以定义新的方法、重写类原来的方法和添加readonly属性\n而extension可以认为是匿名的category，但是这个extension相对于category有有一个特殊功能：在extension中可以定义可写的属性，公有可读、私有可写的属性(Publicly-Readable, Privately-Writeable Properties)一般这样实现！\n举例说明如下：1. 创建测试程序empty application2. 我们自定义一个UIViewController，命名为RootViewController，它的.h文件为：###[]()[代码]c#/cpp/oc代码：\n`01``//``02``// \n RootViewController.h``03``// \n Test4``04``//``05``// \n Created by Vincent on 13-5-29.``06``// \n Copyright (c) 2013年 DevDiv Community. All rights reserved.``07``//``08` `09``#import\n <UIKit/UIKit.h>``10` `11``@``interface` `RootViewController\n : UIViewController``12``@end`\n\n那么在其对应的.m中会自动生成以下代码：###[]()[代码]c#/cpp/oc代码：\n`01``//``02``// \n RootViewController.m``03``// \n Test4``04``//``05``// \n Created by Vincent on 13-5-29.``06``// \n Copyright (c) 2013年 DevDiv Community. All rights reserved.``07``//``08` `09``#import\n \"RootViewController.h\"``10` `11``@``interface` `RootViewController\n ()``12``@end``13` `14``@implementation\n RootViewController``15` `16` `17``-\n (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil``18``{``19``    ``self\n = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];``20``    ``if` `(self)\n {``21``        ``//\n Custom initialization``22``    ``}``23``    ``return` `self;``24``}``25` `26``-\n (``void``)viewDidLoad``27``{``28``    ``[super\n viewDidLoad];``29``    ``//\n Do any additional setup after loading the view.``30``    ``self.title\n = ``@\"RootController\"``;``31``    ``self.navigationItem``32``}``33` `34``-\n (``void``)didReceiveMemoryWarning``35``{``36``    ``[super\n didReceiveMemoryWarning];``37``    ``//\n Dispose of any resources that can be recreated.``38``}``39` `40``@end`\n3. 第2步中我们能看到###[]()[代码]c#/cpp/oc代码：\n`1``@``interface` `RootViewController\n ()``2``@end`\n这个就是extension了（也就是特殊类型的category）\n如果我们在.h添加这样一个属性@property (readonly) float value;那么RootViewController对外就暴露一个readonly的属性，它是公开的，所以外部是不能够对它进行写操作的。这时我们可以在extension加入以下代码：@property (readwrite) float value;那么这个属性在内部就是可读写的了，如果是只读只能在构造时期对它赋值，其他类方法中是不能对其赋值的。有了这个特性支持，那么类的内部方法均可以对其进行赋值了。\n\n\n","slug":"oc/category extension","published":1,"updated":"2016-10-08T09:13:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97y002i21xwejceh4f0","content":"<a id=\"more\"></a>\n<p>category和extension用来做类扩展的，可以对现有类扩展功能或者修改其功能。在iOS中category应用是非常广泛的，系统自带的很多类都有多个category扩展功能。<br>一般category中可以定义新的方法、重写类原来的方法和添加readonly属性<br>而extension可以认为是匿名的category，但是这个extension相对于category有有一个特殊功能：在extension中可以定义可写的属性，公有可读、私有可写的属性(Publicly-Readable, Privately-Writeable Properties)一般这样实现！<br>举例说明如下：1. 创建测试程序empty application2. 我们自定义一个UIViewController，命名为RootViewController，它的.h文件为：###<a href=\"\"></a>[代码]c#/cpp/oc代码：<br><code>01``//``02``// \n RootViewController.h``03``// \n Test4``04``//``05``// \n Created by Vincent on 13-5-29.``06``// \n Copyright (c) 2013年 DevDiv Community. All rights reserved.``07``//``08</code> <code>09``#import\n &lt;UIKit/UIKit.h&gt;``10</code> <code>11``@``interface</code> <code>RootViewController\n : UIViewController``12``@end</code></p>\n<p>那么在其对应的.m中会自动生成以下代码：###<a href=\"\"></a>[代码]c#/cpp/oc代码：<br><code>01``//``02``// \n RootViewController.m``03``// \n Test4``04``//``05``// \n Created by Vincent on 13-5-29.``06``// \n Copyright (c) 2013年 DevDiv Community. All rights reserved.``07``//``08</code> <code>09``#import\n &quot;RootViewController.h&quot;``10</code> <code>11``@``interface</code> <code>RootViewController\n ()``12``@end``13</code> <code>14``@implementation\n RootViewController``15</code> <code>16</code> <code>17``-\n (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil``18``{``19``    ``self\n = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];``20``    ``if</code> <code>(self)\n {``21``        ``//\n Custom initialization``22``    ``}``23``    ``return</code> <code>self;``24``}``25</code> <code>26``-\n (``void``)viewDidLoad``27``{``28``    ``[super\n viewDidLoad];``29``    ``//\n Do any additional setup after loading the view.``30``    ``self.title\n = ``@&quot;RootController&quot;``;``31``    ``self.navigationItem``32``}``33</code> <code>34``-\n (``void``)didReceiveMemoryWarning``35``{``36``    ``[super\n didReceiveMemoryWarning];``37``    ``//\n Dispose of any resources that can be recreated.``38``}``39</code> <code>40``@end</code></p>\n<ol>\n<li>第2步中我们能看到###<a href=\"\"></a>[代码]c#/cpp/oc代码：<br><code>1``@``interface</code> <code>RootViewController\n()``2``@end</code><br>这个就是extension了（也就是特殊类型的category）<br>如果我们在.h添加这样一个属性@property (readonly) float value;那么RootViewController对外就暴露一个readonly的属性，它是公开的，所以外部是不能够对它进行写操作的。这时我们可以在extension加入以下代码：@property (readwrite) float value;那么这个属性在内部就是可读写的了，如果是只读只能在构造时期对它赋值，其他类方法中是不能对其赋值的。有了这个特性支持，那么类的内部方法均可以对其进行赋值了。</li>\n</ol>\n","excerpt":"","more":"<p>category和extension用来做类扩展的，可以对现有类扩展功能或者修改其功能。在iOS中category应用是非常广泛的，系统自带的很多类都有多个category扩展功能。<br>一般category中可以定义新的方法、重写类原来的方法和添加readonly属性<br>而extension可以认为是匿名的category，但是这个extension相对于category有有一个特殊功能：在extension中可以定义可写的属性，公有可读、私有可写的属性(Publicly-Readable, Privately-Writeable Properties)一般这样实现！<br>举例说明如下：1. 创建测试程序empty application2. 我们自定义一个UIViewController，命名为RootViewController，它的.h文件为：###<a href=\"\"></a>[代码]c#/cpp/oc代码：<br><code>01``//``02``// \n RootViewController.h``03``// \n Test4``04``//``05``// \n Created by Vincent on 13-5-29.``06``// \n Copyright (c) 2013年 DevDiv Community. All rights reserved.``07``//``08</code> <code>09``#import\n &lt;UIKit/UIKit.h&gt;``10</code> <code>11``@``interface</code> <code>RootViewController\n : UIViewController``12``@end</code></p>\n<p>那么在其对应的.m中会自动生成以下代码：###<a href=\"\"></a>[代码]c#/cpp/oc代码：<br><code>01``//``02``// \n RootViewController.m``03``// \n Test4``04``//``05``// \n Created by Vincent on 13-5-29.``06``// \n Copyright (c) 2013年 DevDiv Community. All rights reserved.``07``//``08</code> <code>09``#import\n &quot;RootViewController.h&quot;``10</code> <code>11``@``interface</code> <code>RootViewController\n ()``12``@end``13</code> <code>14``@implementation\n RootViewController``15</code> <code>16</code> <code>17``-\n (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil``18``{``19``    ``self\n = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];``20``    ``if</code> <code>(self)\n {``21``        ``//\n Custom initialization``22``    ``}``23``    ``return</code> <code>self;``24``}``25</code> <code>26``-\n (``void``)viewDidLoad``27``{``28``    ``[super\n viewDidLoad];``29``    ``//\n Do any additional setup after loading the view.``30``    ``self.title\n = ``@&quot;RootController&quot;``;``31``    ``self.navigationItem``32``}``33</code> <code>34``-\n (``void``)didReceiveMemoryWarning``35``{``36``    ``[super\n didReceiveMemoryWarning];``37``    ``//\n Dispose of any resources that can be recreated.``38``}``39</code> <code>40``@end</code></p>\n<ol>\n<li>第2步中我们能看到###<a href=\"\"></a>[代码]c#/cpp/oc代码：<br><code>1``@``interface</code> <code>RootViewController\n()``2``@end</code><br>这个就是extension了（也就是特殊类型的category）<br>如果我们在.h添加这样一个属性@property (readonly) float value;那么RootViewController对外就暴露一个readonly的属性，它是公开的，所以外部是不能够对它进行写操作的。这时我们可以在extension加入以下代码：@property (readwrite) float value;那么这个属性在内部就是可读写的了，如果是只读只能在构造时期对它赋值，其他类方法中是不能对其赋值的。有了这个特性支持，那么类的内部方法均可以对其进行赋值了。</li>\n</ol>"},{"title":"cell的几种style","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\ncell.accessoryType = UITableViewCellAccessoryNone;//cell没有任何的样式  \ncell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;//cell的右边有一个小箭头，距离右边有十几像素；  \ncell.accessoryType = UITableViewCellAccessoryDetailDisclosureButton;//cell右边有一个蓝色的圆形button；  \ncell.accessoryType = UITableViewCellAccessoryCheckmark;//cell右边的形状是对号；","source":"_posts/oc/cell的几种style.md","raw":"---\ntitle: cell的几种style\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\ncell.accessoryType = UITableViewCellAccessoryNone;//cell没有任何的样式  \ncell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;//cell的右边有一个小箭头，距离右边有十几像素；  \ncell.accessoryType = UITableViewCellAccessoryDetailDisclosureButton;//cell右边有一个蓝色的圆形button；  \ncell.accessoryType = UITableViewCellAccessoryCheckmark;//cell右边的形状是对号；","slug":"oc/cell的几种style","published":1,"updated":"2016-10-08T05:59:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms97z002k21xw24oujang","content":"<a id=\"more\"></a>\n<p>cell.accessoryType = UITableViewCellAccessoryNone;//cell没有任何的样式<br>cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;//cell的右边有一个小箭头，距离右边有十几像素；<br>cell.accessoryType = UITableViewCellAccessoryDetailDisclosureButton;//cell右边有一个蓝色的圆形button；<br>cell.accessoryType = UITableViewCellAccessoryCheckmark;//cell右边的形状是对号；</p>\n","excerpt":"","more":"<p>cell.accessoryType = UITableViewCellAccessoryNone;//cell没有任何的样式<br>cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;//cell的右边有一个小箭头，距离右边有十几像素；<br>cell.accessoryType = UITableViewCellAccessoryDetailDisclosureButton;//cell右边有一个蓝色的圆形button；<br>cell.accessoryType = UITableViewCellAccessoryCheckmark;//cell右边的形状是对号；</p>"},{"title":"double 型转换成 金额","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n- (NSString *)priceString:(double)input {\nDDLogDebug(@”input %f”,input);\nNSNumber *price = [NSNumber numberWithDouble:input];\nDDLogDebug(@”price %@”,price);\nNSNumberFormatter *nf = [NSNumberFormatter new];\n[nf setNumberStyle:NSNumberFormatterCurrencyStyle];\nnf.locale = [NSLocale localeWithLocaleIdentifier:@”zh_CN”];\nDDLogDebug(@”nf %@”,[nf stringFromNumber:price]);\nreturn [nf stringFromNumber:price];\n}\n\n\n![这里写图片描述](http://img.blog.csdn.net/20151218115131757 \"\")\n","source":"_posts/oc/double 型转换成 金额.md","raw":"---\ntitle: double 型转换成 金额\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n- (NSString *)priceString:(double)input {\nDDLogDebug(@”input %f”,input);\nNSNumber *price = [NSNumber numberWithDouble:input];\nDDLogDebug(@”price %@”,price);\nNSNumberFormatter *nf = [NSNumberFormatter new];\n[nf setNumberStyle:NSNumberFormatterCurrencyStyle];\nnf.locale = [NSLocale localeWithLocaleIdentifier:@”zh_CN”];\nDDLogDebug(@”nf %@”,[nf stringFromNumber:price]);\nreturn [nf stringFromNumber:price];\n}\n\n\n![这里写图片描述](http://img.blog.csdn.net/20151218115131757 \"\")\n","slug":"oc/double 型转换成 金额","published":1,"updated":"2016-10-08T09:11:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms980002m21xw6pxuu7uf","content":"<a id=\"more\"></a>\n<p>```objc</p>\n<ul>\n<li>(NSString <em>)priceString:(double)input {<br>DDLogDebug(@”input %f”,input);<br>NSNumber </em>price = [NSNumber numberWithDouble:input];<br>DDLogDebug(@”price %@”,price);<br>NSNumberFormatter *nf = [NSNumberFormatter new];<br>[nf setNumberStyle:NSNumberFormatterCurrencyStyle];<br>nf.locale = [NSLocale localeWithLocaleIdentifier:@”zh_CN”];<br>DDLogDebug(@”nf %@”,[nf stringFromNumber:price]);<br>return [nf stringFromNumber:price];<br>}</li>\n</ul>\n<p><img src=\"http://img.blog.csdn.net/20151218115131757\" alt=\"这里写图片描述\"></p>\n","excerpt":"","more":"<p>```objc</p>\n<ul>\n<li>(NSString <em>)priceString:(double)input {<br>DDLogDebug(@”input %f”,input);<br>NSNumber </em>price = [NSNumber numberWithDouble:input];<br>DDLogDebug(@”price %@”,price);<br>NSNumberFormatter *nf = [NSNumberFormatter new];<br>[nf setNumberStyle:NSNumberFormatterCurrencyStyle];<br>nf.locale = [NSLocale localeWithLocaleIdentifier:@”zh_CN”];<br>DDLogDebug(@”nf %@”,[nf stringFromNumber:price]);<br>return [nf stringFromNumber:price];<br>}</li>\n</ul>\n<p><img src=\"http://img.blog.csdn.net/20151218115131757\" alt=\"这里写图片描述\"></p>"},{"title":"iOS 使用纯代码或xib创建圆角视图","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n####尊重原创 转自：http://www.jianshu.com/p/80f1fd3f63a0\n####\n\n####引言:\n> 在我们日常开发中, 很多中情况下我们需要设置UIView或者UIImageView的圆角以及边框等,例如个人中心的用户头像等等。\n> \n> **例如 简书:**\n![](http://upload-images.jianshu.io/upload_images/1975627-4cd88898bae5d219.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n简书-我的界面#####我们通常的做法是:\n1. 使用纯代码。\n2. 在xib下设置属性。\n\n***\n####纯代码创建圆角视图:\n代码如下:\n\t    UIView *view = [[UIView alloc] initWithFrame:(CGRectMake(50, 100, 200, 200))];\n\t    view.backgroundColor = [UIColor brownColor];\n\t\n\t    // 设置圆角的角度(当view的宽和高相等, 且 圆角角度为宽的一半时 为圆形)\n\t    view.layer.cornerRadius = 20;\n\t\n\t    // 设置允许裁剪\n\t    view.layer.masksToBounds = YES;\n\t\n\t    // 设置边框\n\t    view.layer.borderWidth = 5;\n\t\n\t    // 设置边框颜色\n\t    view.layer.borderColor = [[UIColor redColor] CGColor];\n\t\n\t    [self.view addSubview:view];\n创建imageView 和 view 的方式是一样的, 在这里只演示view的创建。\n***\n####xib下创建圆角视图:\n正常情况下, 我们在xib中使用 keyPath 来设置圆角。如图:\n![](http://upload-images.jianshu.io/upload_images/1975627-5e1fb160b9f1c014.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nxib.png\n这里虽然设置了, 但是我们并不能立即在xib中看到设置后圆角效果的, 只有在程序运行后才会看到效果。 所以我们要使用`IB_DESIGNABLE`和`IBInspectable`来实现实时查看圆角效果。\n######IB_DESIGNABLE:\n这是一个宏定义, 功能就是让XCode动态渲染出该类图形化界面。\n使用方法: 在自定义的view的.h文件中 添加该 宏定义。\n######IBInspectable:\nIBInspectable 宏定义的功能是可以可视化显示自定义view中相关的属性。\n***\n####如何实现实时查看圆角效果:\n1.自定义view , CornerView.h:\n\t#import <UIKit/UIKit.h>\n\tIB_DESIGNABLE  // 动态刷新\n\t@interfaceCornerView : UIView\n\t// 注意: 加上IBInspectable就可以可视化显示相关的属性\n\t/** 可视化设置边框宽度 */\n\t@property (nonatomic, assign)IBInspectable CGFloat borderWidth;\n\t/** 可视化设置边框颜色 */\n\t@property (nonatomic, strong)IBInspectable UIColor *borderColor;\n\t/** 可视化设置圆角 */\n\t@property (nonatomic, assign)IBInspectable CGFloat cornerRadius;\n\t@end\nCornerView.m:\n\t@implementationCornerView.m\n\t\n\t#pragma mark - 设置边框宽度\n\t- (void)setBorderWidth:(CGFloat)borderWidth {\n\t\n\t    if (borderWidth < 0) return;\n\t\n\t    self.layer.borderWidth = borderWidth;\n\t}\n\t\n\t#pragma mark - 设置边框颜色\n\t- (void)setBorderColor:(UIColor *)borderColor {\n\t\n\t    self.layer.borderColor = borderColor.CGColor;\n\t}\n\t\n\t#pragma mark - 设置圆角\n\t- (void)setCornerRadius:(CGFloat)cornerRadius {\n\t\n\t    self.layer.cornerRadius = cornerRadius;\n\t    self.layer.masksToBounds = cornerRadius > 0;\n\t}\n\n\n2.在xib中拖一个view, 将view设定为 自定义view: CornerView 如图:\n![](http://upload-images.jianshu.io/upload_images/1975627-4db67f19b49fe871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n自定义view\n注意:`Designable`如果没有这行字，说明没有正确添加添加IB_DESIGNABLE，如果它的状态显示up to date,说明设置成功, 如果是updating，说明视图在更新，案如果是build failed的话，请检查布局代码，可能有哪里出错了。\n3.如图, 我们就可以看到自定义view中设置的属性了:\n![](http://upload-images.jianshu.io/upload_images/1975627-07722f927de30e71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n自定义属性4.设置好 属性后 , 右边的view就会立即 更新了!\n![](http://upload-images.jianshu.io/upload_images/1975627-e8d8c896c0de4983.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n效果图.jpg该方法同样适用于UIIamgeView ! ! ! !\n***\n####效果图:\n![](http://upload-images.jianshu.io/upload_images/1975627-ebdb869d89da681f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n效果图\n\n\n本篇文章对应的源代码下载地址:[CornerViewDemo](https://github.com/LiCheng244/CornerViewDemo)\n**该 demo 中封装了 自定义view 和 自定义imageView , 可以将CornerTool文件夹拖入到项目中直接使用, `\nxib下 view` 继承 `CornerView`类, `imageView` 继承 `CornerImageView`即可设置属性。**\n\n\n文／Li_Cheng（简书作者）\n原文链接：http://www.jianshu.com/p/80f1fd3f63a0\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。","source":"_posts/oc/iOS 使用纯代码或xib创建圆角视图.md","raw":"---\ntitle: iOS 使用纯代码或xib创建圆角视图\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n####尊重原创 转自：http://www.jianshu.com/p/80f1fd3f63a0\n####\n\n####引言:\n> 在我们日常开发中, 很多中情况下我们需要设置UIView或者UIImageView的圆角以及边框等,例如个人中心的用户头像等等。\n> \n> **例如 简书:**\n![](http://upload-images.jianshu.io/upload_images/1975627-4cd88898bae5d219.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n简书-我的界面#####我们通常的做法是:\n1. 使用纯代码。\n2. 在xib下设置属性。\n\n***\n####纯代码创建圆角视图:\n代码如下:\n\t    UIView *view = [[UIView alloc] initWithFrame:(CGRectMake(50, 100, 200, 200))];\n\t    view.backgroundColor = [UIColor brownColor];\n\t\n\t    // 设置圆角的角度(当view的宽和高相等, 且 圆角角度为宽的一半时 为圆形)\n\t    view.layer.cornerRadius = 20;\n\t\n\t    // 设置允许裁剪\n\t    view.layer.masksToBounds = YES;\n\t\n\t    // 设置边框\n\t    view.layer.borderWidth = 5;\n\t\n\t    // 设置边框颜色\n\t    view.layer.borderColor = [[UIColor redColor] CGColor];\n\t\n\t    [self.view addSubview:view];\n创建imageView 和 view 的方式是一样的, 在这里只演示view的创建。\n***\n####xib下创建圆角视图:\n正常情况下, 我们在xib中使用 keyPath 来设置圆角。如图:\n![](http://upload-images.jianshu.io/upload_images/1975627-5e1fb160b9f1c014.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nxib.png\n这里虽然设置了, 但是我们并不能立即在xib中看到设置后圆角效果的, 只有在程序运行后才会看到效果。 所以我们要使用`IB_DESIGNABLE`和`IBInspectable`来实现实时查看圆角效果。\n######IB_DESIGNABLE:\n这是一个宏定义, 功能就是让XCode动态渲染出该类图形化界面。\n使用方法: 在自定义的view的.h文件中 添加该 宏定义。\n######IBInspectable:\nIBInspectable 宏定义的功能是可以可视化显示自定义view中相关的属性。\n***\n####如何实现实时查看圆角效果:\n1.自定义view , CornerView.h:\n\t#import <UIKit/UIKit.h>\n\tIB_DESIGNABLE  // 动态刷新\n\t@interfaceCornerView : UIView\n\t// 注意: 加上IBInspectable就可以可视化显示相关的属性\n\t/** 可视化设置边框宽度 */\n\t@property (nonatomic, assign)IBInspectable CGFloat borderWidth;\n\t/** 可视化设置边框颜色 */\n\t@property (nonatomic, strong)IBInspectable UIColor *borderColor;\n\t/** 可视化设置圆角 */\n\t@property (nonatomic, assign)IBInspectable CGFloat cornerRadius;\n\t@end\nCornerView.m:\n\t@implementationCornerView.m\n\t\n\t#pragma mark - 设置边框宽度\n\t- (void)setBorderWidth:(CGFloat)borderWidth {\n\t\n\t    if (borderWidth < 0) return;\n\t\n\t    self.layer.borderWidth = borderWidth;\n\t}\n\t\n\t#pragma mark - 设置边框颜色\n\t- (void)setBorderColor:(UIColor *)borderColor {\n\t\n\t    self.layer.borderColor = borderColor.CGColor;\n\t}\n\t\n\t#pragma mark - 设置圆角\n\t- (void)setCornerRadius:(CGFloat)cornerRadius {\n\t\n\t    self.layer.cornerRadius = cornerRadius;\n\t    self.layer.masksToBounds = cornerRadius > 0;\n\t}\n\n\n2.在xib中拖一个view, 将view设定为 自定义view: CornerView 如图:\n![](http://upload-images.jianshu.io/upload_images/1975627-4db67f19b49fe871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n自定义view\n注意:`Designable`如果没有这行字，说明没有正确添加添加IB_DESIGNABLE，如果它的状态显示up to date,说明设置成功, 如果是updating，说明视图在更新，案如果是build failed的话，请检查布局代码，可能有哪里出错了。\n3.如图, 我们就可以看到自定义view中设置的属性了:\n![](http://upload-images.jianshu.io/upload_images/1975627-07722f927de30e71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n自定义属性4.设置好 属性后 , 右边的view就会立即 更新了!\n![](http://upload-images.jianshu.io/upload_images/1975627-e8d8c896c0de4983.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n效果图.jpg该方法同样适用于UIIamgeView ! ! ! !\n***\n####效果图:\n![](http://upload-images.jianshu.io/upload_images/1975627-ebdb869d89da681f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n效果图\n\n\n本篇文章对应的源代码下载地址:[CornerViewDemo](https://github.com/LiCheng244/CornerViewDemo)\n**该 demo 中封装了 自定义view 和 自定义imageView , 可以将CornerTool文件夹拖入到项目中直接使用, `\nxib下 view` 继承 `CornerView`类, `imageView` 继承 `CornerImageView`即可设置属性。**\n\n\n文／Li_Cheng（简书作者）\n原文链接：http://www.jianshu.com/p/80f1fd3f63a0\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。","slug":"oc/iOS 使用纯代码或xib创建圆角视图","published":1,"updated":"2016-10-08T09:03:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms980002o21xw84q6xs5v","content":"<a id=\"more\"></a>\n<p>####尊重原创 转自：<a href=\"http://www.jianshu.com/p/80f1fd3f63a0\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/80f1fd3f63a0</a></p>\n<p>####</p>\n<p>####引言:</p>\n<blockquote>\n<p>在我们日常开发中, 很多中情况下我们需要设置UIView或者UIImageView的圆角以及边框等,例如个人中心的用户头像等等。</p>\n<p><strong>例如 简书:</strong><br><img src=\"http://upload-images.jianshu.io/upload_images/1975627-4cd88898bae5d219.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>简书-我的界面#####我们通常的做法是:</p>\n<ol>\n<li>使用纯代码。</li>\n<li>在xib下设置属性。</li>\n</ol>\n</blockquote>\n<hr>\n<p>####纯代码创建圆角视图:<br>代码如下:<br>        UIView *view = [[UIView alloc] initWithFrame:(CGRectMake(50, 100, 200, 200))];<br>        view.backgroundColor = [UIColor brownColor];</p>\n<pre><code>// 设置圆角的角度(当view的宽和高相等, 且 圆角角度为宽的一半时 为圆形)\nview.layer.cornerRadius = 20;\n\n// 设置允许裁剪\nview.layer.masksToBounds = YES;\n\n// 设置边框\nview.layer.borderWidth = 5;\n\n// 设置边框颜色\nview.layer.borderColor = [[UIColor redColor] CGColor];\n\n[self.view addSubview:view];\n</code></pre><p>创建imageView 和 view 的方式是一样的, 在这里只演示view的创建。</p>\n<hr>\n<p>####xib下创建圆角视图:<br>正常情况下, 我们在xib中使用 keyPath 来设置圆角。如图:<br><img src=\"http://upload-images.jianshu.io/upload_images/1975627-5e1fb160b9f1c014.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>xib.png<br>这里虽然设置了, 但是我们并不能立即在xib中看到设置后圆角效果的, 只有在程序运行后才会看到效果。 所以我们要使用<code>IB_DESIGNABLE</code>和<code>IBInspectable</code>来实现实时查看圆角效果。</p>\n<p>######IB_DESIGNABLE:<br>这是一个宏定义, 功能就是让XCode动态渲染出该类图形化界面。<br>使用方法: 在自定义的view的.h文件中 添加该 宏定义。</p>\n<p>######IBInspectable:<br>IBInspectable 宏定义的功能是可以可视化显示自定义view中相关的属性。</p>\n<hr>\n<p>####如何实现实时查看圆角效果:<br>1.自定义view , CornerView.h:</p>\n<pre><code>#import &lt;UIKit/UIKit.h&gt;\nIB_DESIGNABLE  // 动态刷新\n@interfaceCornerView : UIView\n// 注意: 加上IBInspectable就可以可视化显示相关的属性\n/** 可视化设置边框宽度 */\n@property (nonatomic, assign)IBInspectable CGFloat borderWidth;\n/** 可视化设置边框颜色 */\n@property (nonatomic, strong)IBInspectable UIColor *borderColor;\n/** 可视化设置圆角 */\n@property (nonatomic, assign)IBInspectable CGFloat cornerRadius;\n@end\n</code></pre><p>CornerView.m:<br>    @implementationCornerView.m</p>\n<pre><code>#pragma mark - 设置边框宽度\n- (void)setBorderWidth:(CGFloat)borderWidth {\n\n    if (borderWidth &lt; 0) return;\n\n    self.layer.borderWidth = borderWidth;\n}\n\n#pragma mark - 设置边框颜色\n- (void)setBorderColor:(UIColor *)borderColor {\n\n    self.layer.borderColor = borderColor.CGColor;\n}\n\n#pragma mark - 设置圆角\n- (void)setCornerRadius:(CGFloat)cornerRadius {\n\n    self.layer.cornerRadius = cornerRadius;\n    self.layer.masksToBounds = cornerRadius &gt; 0;\n}\n</code></pre><p>2.在xib中拖一个view, 将view设定为 自定义view: CornerView 如图:<br><img src=\"http://upload-images.jianshu.io/upload_images/1975627-4db67f19b49fe871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>自定义view<br>注意:<code>Designable</code>如果没有这行字，说明没有正确添加添加IB_DESIGNABLE，如果它的状态显示up to date,说明设置成功, 如果是updating，说明视图在更新，案如果是build failed的话，请检查布局代码，可能有哪里出错了。<br>3.如图, 我们就可以看到自定义view中设置的属性了:<br><img src=\"http://upload-images.jianshu.io/upload_images/1975627-07722f927de30e71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>自定义属性4.设置好 属性后 , 右边的view就会立即 更新了!<br><img src=\"http://upload-images.jianshu.io/upload_images/1975627-e8d8c896c0de4983.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>效果图.jpg该方法同样适用于UIIamgeView ! ! ! !</p>\n<hr>\n<p>####效果图:<br><img src=\"http://upload-images.jianshu.io/upload_images/1975627-ebdb869d89da681f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>效果图</p>\n<p>本篇文章对应的源代码下载地址:<a href=\"https://github.com/LiCheng244/CornerViewDemo\" target=\"_blank\" rel=\"external\">CornerViewDemo</a><br><strong>该 demo 中封装了 自定义view 和 自定义imageView , 可以将CornerTool文件夹拖入到项目中直接使用, <code>xib下 view</code> 继承 <code>CornerView</code>类, <code>imageView</code> 继承 <code>CornerImageView</code>即可设置属性。</strong></p>\n<p>文／Li_Cheng（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/80f1fd3f63a0\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/80f1fd3f63a0</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>\n","excerpt":"","more":"<p>####尊重原创 转自：<a href=\"http://www.jianshu.com/p/80f1fd3f63a0\">http://www.jianshu.com/p/80f1fd3f63a0</a></p>\n<p>####</p>\n<p>####引言:</p>\n<blockquote>\n<p>在我们日常开发中, 很多中情况下我们需要设置UIView或者UIImageView的圆角以及边框等,例如个人中心的用户头像等等。</p>\n<p><strong>例如 简书:</strong><br><img src=\"http://upload-images.jianshu.io/upload_images/1975627-4cd88898bae5d219.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>简书-我的界面#####我们通常的做法是:</p>\n<ol>\n<li>使用纯代码。</li>\n<li>在xib下设置属性。</li>\n</ol>\n</blockquote>\n<hr>\n<p>####纯代码创建圆角视图:<br>代码如下:<br>        UIView *view = [[UIView alloc] initWithFrame:(CGRectMake(50, 100, 200, 200))];<br>        view.backgroundColor = [UIColor brownColor];</p>\n<pre><code>// 设置圆角的角度(当view的宽和高相等, 且 圆角角度为宽的一半时 为圆形)\nview.layer.cornerRadius = 20;\n\n// 设置允许裁剪\nview.layer.masksToBounds = YES;\n\n// 设置边框\nview.layer.borderWidth = 5;\n\n// 设置边框颜色\nview.layer.borderColor = [[UIColor redColor] CGColor];\n\n[self.view addSubview:view];\n</code></pre><p>创建imageView 和 view 的方式是一样的, 在这里只演示view的创建。</p>\n<hr>\n<p>####xib下创建圆角视图:<br>正常情况下, 我们在xib中使用 keyPath 来设置圆角。如图:<br><img src=\"http://upload-images.jianshu.io/upload_images/1975627-5e1fb160b9f1c014.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>xib.png<br>这里虽然设置了, 但是我们并不能立即在xib中看到设置后圆角效果的, 只有在程序运行后才会看到效果。 所以我们要使用<code>IB_DESIGNABLE</code>和<code>IBInspectable</code>来实现实时查看圆角效果。</p>\n<p>######IB_DESIGNABLE:<br>这是一个宏定义, 功能就是让XCode动态渲染出该类图形化界面。<br>使用方法: 在自定义的view的.h文件中 添加该 宏定义。</p>\n<p>######IBInspectable:<br>IBInspectable 宏定义的功能是可以可视化显示自定义view中相关的属性。</p>\n<hr>\n<p>####如何实现实时查看圆角效果:<br>1.自定义view , CornerView.h:</p>\n<pre><code>#import &lt;UIKit/UIKit.h&gt;\nIB_DESIGNABLE  // 动态刷新\n@interfaceCornerView : UIView\n// 注意: 加上IBInspectable就可以可视化显示相关的属性\n/** 可视化设置边框宽度 */\n@property (nonatomic, assign)IBInspectable CGFloat borderWidth;\n/** 可视化设置边框颜色 */\n@property (nonatomic, strong)IBInspectable UIColor *borderColor;\n/** 可视化设置圆角 */\n@property (nonatomic, assign)IBInspectable CGFloat cornerRadius;\n@end\n</code></pre><p>CornerView.m:<br>    @implementationCornerView.m</p>\n<pre><code>#pragma mark - 设置边框宽度\n- (void)setBorderWidth:(CGFloat)borderWidth {\n\n    if (borderWidth &lt; 0) return;\n\n    self.layer.borderWidth = borderWidth;\n}\n\n#pragma mark - 设置边框颜色\n- (void)setBorderColor:(UIColor *)borderColor {\n\n    self.layer.borderColor = borderColor.CGColor;\n}\n\n#pragma mark - 设置圆角\n- (void)setCornerRadius:(CGFloat)cornerRadius {\n\n    self.layer.cornerRadius = cornerRadius;\n    self.layer.masksToBounds = cornerRadius &gt; 0;\n}\n</code></pre><p>2.在xib中拖一个view, 将view设定为 自定义view: CornerView 如图:<br><img src=\"http://upload-images.jianshu.io/upload_images/1975627-4db67f19b49fe871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>自定义view<br>注意:<code>Designable</code>如果没有这行字，说明没有正确添加添加IB_DESIGNABLE，如果它的状态显示up to date,说明设置成功, 如果是updating，说明视图在更新，案如果是build failed的话，请检查布局代码，可能有哪里出错了。<br>3.如图, 我们就可以看到自定义view中设置的属性了:<br><img src=\"http://upload-images.jianshu.io/upload_images/1975627-07722f927de30e71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>自定义属性4.设置好 属性后 , 右边的view就会立即 更新了!<br><img src=\"http://upload-images.jianshu.io/upload_images/1975627-e8d8c896c0de4983.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>效果图.jpg该方法同样适用于UIIamgeView ! ! ! !</p>\n<hr>\n<p>####效果图:<br><img src=\"http://upload-images.jianshu.io/upload_images/1975627-ebdb869d89da681f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>效果图</p>\n<p>本篇文章对应的源代码下载地址:<a href=\"https://github.com/LiCheng244/CornerViewDemo\">CornerViewDemo</a><br><strong>该 demo 中封装了 自定义view 和 自定义imageView , 可以将CornerTool文件夹拖入到项目中直接使用, <code>xib下 view</code> 继承 <code>CornerView</code>类, <code>imageView</code> 继承 <code>CornerImageView</code>即可设置属性。</strong></p>\n<p>文／Li_Cheng（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/80f1fd3f63a0\">http://www.jianshu.com/p/80f1fd3f63a0</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>"},{"title":"iOS 打电话","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n- (void)telePhoneAction:(NSString *)teleNum {\n\n    NSString *number = teleNum;// 此处读入电话号码\n   \n    //NSString *num = [[NSString alloc] initWithFormat:@\"tel://%@\",number]; //number为号码字符串 如果使用这个方法 结束电话之后会进入联系人列表\n   \n    NSString *num = [[NSString alloc] initWithFormat:@\"telprompt://%@\",number]; //而这个方法则打电话前先弹框  是否打电话 然后打完电话之后回到程序中 网上说这个方法可能不合法 无法通过审核\n   \n    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:num]]; //拨号\n}\n```\n\n\n","source":"_posts/oc/iOS 打电话.md","raw":"---\ntitle: iOS 打电话\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n- (void)telePhoneAction:(NSString *)teleNum {\n\n    NSString *number = teleNum;// 此处读入电话号码\n   \n    //NSString *num = [[NSString alloc] initWithFormat:@\"tel://%@\",number]; //number为号码字符串 如果使用这个方法 结束电话之后会进入联系人列表\n   \n    NSString *num = [[NSString alloc] initWithFormat:@\"telprompt://%@\",number]; //而这个方法则打电话前先弹框  是否打电话 然后打完电话之后回到程序中 网上说这个方法可能不合法 无法通过审核\n   \n    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:num]]; //拨号\n}\n```\n\n\n","slug":"oc/iOS 打电话","published":1,"updated":"2016-10-08T09:10:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms981002q21xws7ovnupl","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)telePhoneAction:(<span class=\"built_in\">NSString</span> *)teleNum &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *number = teleNum;<span class=\"comment\">// 此处读入电话号码</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//NSString *num = [[NSString alloc] initWithFormat:@\"tel://%@\",number]; //number为号码字符串 如果使用这个方法 结束电话之后会进入联系人列表</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSString</span> *num = [[<span class=\"built_in\">NSString</span> alloc] initWithFormat:<span class=\"string\">@\"telprompt://%@\"</span>,number]; <span class=\"comment\">//而这个方法则打电话前先弹框  是否打电话 然后打完电话之后回到程序中 网上说这个方法可能不合法 无法通过审核</span></div><div class=\"line\">   </div><div class=\"line\">    [[<span class=\"built_in\">UIApplication</span> sharedApplication] openURL:[<span class=\"built_in\">NSURL</span> URLWithString:num]]; <span class=\"comment\">//拨号</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)telePhoneAction:(<span class=\"built_in\">NSString</span> *)teleNum &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *number = teleNum;<span class=\"comment\">// 此处读入电话号码</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//NSString *num = [[NSString alloc] initWithFormat:@\"tel://%@\",number]; //number为号码字符串 如果使用这个方法 结束电话之后会进入联系人列表</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSString</span> *num = [[<span class=\"built_in\">NSString</span> alloc] initWithFormat:<span class=\"string\">@\"telprompt://%@\"</span>,number]; <span class=\"comment\">//而这个方法则打电话前先弹框  是否打电话 然后打完电话之后回到程序中 网上说这个方法可能不合法 无法通过审核</span></div><div class=\"line\">   </div><div class=\"line\">    [[<span class=\"built_in\">UIApplication</span> sharedApplication] openURL:[<span class=\"built_in\">NSURL</span> URLWithString:num]]; <span class=\"comment\">//拨号</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"iOS 网络编程模式总结","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n转自：  http://blog.csdn.net/goohong/article/details/40505291\nIOS 可以采用三类api 接口进行网络编程，根据抽象层次从低到高分别为socket方式、stream方式、url 方式。\n一 、socket 方式\n       IOS 提供的socket 方式的网络编程接口为CFSocket。CFSocket是BSD sockets的抽象和封装，CFSocket提供BSD sockets几乎所有的功能，并与run loop集成，用来实现多线程网络编程和网络事件监听。基于 CFSocket可以实现各种类型的 socket编程，包括stream-based 的sockets(如tcp)和packet-based 的sockets(如udp)。需要注意的是在iOS中CFSocket接口在需要时不自动激活设备的\n cellular modem或on-demand VPN。\n      CFSocket包括以下编程接口，包括Socket的 创建、配置，以及根据创建和配置好的Socket 进行 远程通讯等接口。\n1  Socket的 创建\n> 1 .1、CFSocketCreate\n> 创建一个特定协议和类型的 CFSocket对象\n> 1.2、CFSocketCreateWithSocketSignature\n> 该接口根据一个包含通讯协议和地址的CFSocketSignature结构来创建一个CFSocket对象\n> \n> \n> 1.3、 CFSocketCreateConnectedToSocketSignature\n> 该接口在创建一个CFSocket对象的同时还与一个远端主机进行连接。\n> \n> \n> 1.4、CFSocketCreateWithNative\n> 该接口通过封装一个存在的 BSD socket来创建一个CFSocket对象。\n\n2   Socket的配置\n> 2.1   CFSocketCopyAddress\n> 功能： 返回一个 CFSocket对象的本地地址。\n> 语法：\n> SWIFT\n> func CFSocketCopyAddress(_ s: CFSocket!) -> CFData!\n> 2.2、CFSocketCopyPeerAddress\n> 功能：返回与一个 CFSocket对象连接的远端地址。\n> 语法：\n> SWIFT\n> func CFSocketCopyPeerAddress(_ s: CFSocket!) -> CFData!\n> 2.3  CFSocketDisableCallBacks\n> 功能：临时取消一个CFSocket对象创建时指定的某种类型的事件回调。\n> 语法：\n> SWIFT\n> func CFSocketDisableCallBacks(_ s: CFSocket!,\n>                             _ callBackTypes: CFOptionFlags)\n> 2.4   CFSocketEnableCallBacks\n> 功能：重新允许先前CFSocketDisableCallBacks函数取消的某种类型的事件回调。\n> 语法：\n> SWIFT\n> func CFSocketEnableCallBacks(_ s: CFSocket!,\n>                            _ callBackTypes: CFOptionFlags)\n> 2.5 CFSocketGetContext\n> 功能：返回一个CFSocket对象的上下文信息。\n> 语法：\n> SWIFT\n> func CFSocketGetContext(_ s: CFSocket!,\n>                       _ context: UnsafeMutablePointer<CFSocketContext>)\n> 2.6 CFSocketGetNative\n> 返回与一个CFSocket对象相关的本地 BSD socket。\n> 语法：\n> SWIFT\n> func CFSocketGetNative(_ s: CFSocket!) -> CFSocketNativeHandle\n> 2.7   CFSocketGetSocketFlags\n> 功能：返回控制一个CFSocket对象的确定行为的 标志。\n> 语法：\n> SWIFT\n> func CFSocketGetSocketFlags(_ s: CFSocket!) -> CFOptionFlags\n> \n> \n> 2.8 CFSocketSetSocketFlags\n> 功能：设置控制一个CFSocket对象的确定行为的 标志。\n> 语法：\n> SWIFT\n> func CFSocketSetSocketFlags(_ s: CFSocket!,\n>                           _ flags: CFOptionFlags)\n> 2.9 CFSocketSetAddress\n> 语法：\n> SWIFT\n> func CFSocketSetAddress(_ s: CFSocket!,\n>                       _ address: CFData!) -> CFSocketError\n> 功能：为一个CFSocket对象绑定一个本地地址并在本地socket支持的情况下对socket进行配置使其处于监听状态。该函数对应本地socket的 bind以及listen功能。一旦CFSocket对象绑定地址，依赖于socket的协议，其它进程和主机能连接到该CFSocket对象。\n\n\n3、Sockets的使用\n> 3.1 CFSocketConnectToAddress\n> 功能：打开与一个远程socket的一个连接。\n> 语法：\n> SWIFT\n> func CFSocketConnectToAddress(_ s: CFSocket!,\n>                             _ address: CFData!,\n>                             _ timeout: CFTimeInterval) -> CFSocketError\n> 3.2 CFSocketCreateRunLoopSource\n> 语法：\n> SWIFT\n> func CFSocketCreateRunLoopSource(_ allocator: CFAllocator!,\n>                                _ s: CFSocket!,\n>                                _ order: CFIndex) -> CFRunLoopSource!\n> 功能：为一个CFSocket对象创建一个CFRunLoopSource对象。该创建的 CFRunLoopSource对象不自动添加到一个run loop。为了增加该run loop source到某个run loop，需要调用CFRunLoop对象 的CFRunLoopAddSource函数来为该CFRunLoop对象添加run loop source。\n> 3.3 CFSocketGetTypeID\n> 功能：返回CFSocket对象的 opaque类型对应的类型标示符。\n> 语法：\n> SWIFT\n> func CFSocketGetTypeID() -> CFTypeID \n> 3.4  CFSocketInvalidate\n> 功能：使一个CFSocket对象无效，使其停止接收和发送任何消息。\n> 语法：\n> SWIFT\n> func CFSocketInvalidate(_ s: CFSocket!)\n> 3.5 CFSocketIsValid\n> 功能：返回一个指示一个CFSocket对象是否有效及是否能够发送和接收消息的布尔值。\n> 语法：\n> SWIFT\n> func CFSocketIsValid(_ s: CFSocket!) -> Boolean\n> 3.6 CFSocketSendData\n> 功能：该函数用来通过一个CFSocket对象发送数据。\n> 语法：\n> SWIFT\n> func CFSocketSendData(_ s: CFSocket!,\n>                     _ address: CFData!,\n>                     _ data: CFData!,\n>                     _ timeout: CFTimeInterval) -> CFSocketError\n\n\n二、stream编程模式\n       stream编程模式提供了与 unix 的文件操作类似的模式。首先创建和设置流，接着打开流，然后读写流，在流存在时还可以通过查询流的相关属性来读取流的相关信息，在流使用完毕后关闭流。\n       iOS 为stream编程模式提供的api编程接口包括两大类，一类是Core Foundation框架层用C语言实现的CFStream  API（包括CFStream、 CFReadStream 、CFWriteStream等）,一类是基于其上的在Foundation框架层用Objective-C语言实现的NSStream API（包括NSStream、NSInputStream NSOutputStream等）,两者提供相似的接口和行为，其中某些对象是toll-free\n bridged类型的，如CFStream 与NSStream，CFReadStream与NSInputStream，CFWriteStream与NSOutputStream之间，因此可以混合使用。\n       开发人员可以根据自己的语言偏好选择使用。\n       CFStream API的主要接口：\n1、CFStream 创建接口\n> 1.1  CFStreamCreatePairWithPeerSocketSignature\n          功能：创建一对到一个socket的可读和可写流。\n> 1.2 CFStreamCreatePairWithSocketToHost\n> 功能：创建连接到一个特定主机的特定端口的一对可读写流。\n> 1.3 CFStreamCreatePairWithSocket\n> 功能：创建一对连接到一个socket的可读写流\n> 1.4 CFStreamCreateBoundPair\n> 功能：创建一对读写流。\n> 其它可读写流创建接口：\n>  1.5 CFReadStreamCreateForHTTPRequest\n>    功能：为一个CFHTTP请求创建一个可读流。\n> 1.6 CFReadStreamCreateForStreamedHTTPRequest\n> 功能：为一个HTTP请求的body保持在内存的CFHTTP请求创建一个可读流。\n> 1.7  CFReadStreamCreateWithFTPURL\n> 功能：创建一个FTP可读流\n> 1.8  CFWriteStreamCreateWithFTPURL\n> 功能：创建一个FTP可读流\n2. CFReadStream接口\n> 2.1 流的打开和关闭\n>       CFReadStreamOpen\n       CFReadStreamClose\n2.2  读取数据\n      CFReadStreamRead\n2.3.  调度一个可读流\n   CFReadStreamScheduleWithRunLoop(_:_:_:) \n           CFReadStreamUnscheduleFromRunLoop(_:_:_:) \n2.4 检查可读流的属性  \n> CFReadStreamCopyProperty(_:_:) \n> CFReadStreamGetBuffer(_:_:_:) \n> CFReadStreamCopyError(_:) \n> CFReadStreamGetError(_:) \n> CFReadStreamGetStatus(_:) \n> CFReadStreamHasBytesAvailable(_:) \n2.5 设置可读流的属性\n> CFReadStreamSetClient(_:_:_:_:)\n> CFReadStreamSetProperty(_:_:_:) \n 2.6 得到 CFReadStream的 Type ID\n                    CFReadStreamGetTypeID()\n\n3.CFWriteStream 相关接口\n\n\n>      3.1 CFWriteStreamClose(_:) \n>      3.2 CFWriteStreamOpen(_:) \n>      3.3 CFWriteStreamWrite(_:_:_:)\n        3.4 CFWriteStreamScheduleWithRunLoop(_:_:_:)\n  3.5 CFWriteStreamUnscheduleFromRunLoop(_:_:_:)\n        3.6 CFWriteStreamCanAcceptBytes(_:)\n>       3.7 CFWriteStreamCopyProperty(_:_:)\n>       3.8 CFWriteStreamCopyError(_:)\n>       3.9 CFWriteStreamGetError(_:)\n>       3.10 CFWriteStreamGetStatus(_:) \n         3.11 CFWriteStreamSetClient(_:_:_:_:)\n>   3.12 CFWriteStreamSetProperty(_:_:_:) \n>       3.13 CFWriteStreamGetTypeID()\nCFStream API的使用步骤：\n> 1） 利用流创建接口创建相关流；\n> 2）、调用CFReadStreamSetClient （可读流）或CFWriteStreamSetClient （可写流）来登记要接收的流相关的事件；\n> 3）、调用CFReadStreamScheduleWithRunLoop（可读流）或CFWriteStreamScheduleWithRunLoop（可写流）来使在流在一个run loop上进行调度以便接收相关事件；\n> 4）、调用CFReadStreamOpen 或CFWriteStreamOpen 来打开已创建的流；\n> 5）、在读取流的创建时登记的回调中，在接收到kCFStreamEventHasBytesAvailable事件时来读取数据， 在可写流已登记的回调中，在接收到kCFStreamEventCanAcceptBytes 事件时开始发送数据或请求；\n> 6） 数据传输完成，关闭和释放打开和创建的相关流；\n2、NSStream   API的使用>  在ios 中由于NSStream类不支持 与一个远程主机连接，而CFStream支持，因此为了使用 NSStream，你需要使用流创建函数CFStreamCreatePairWithSocketToHost或CFStreamCreatePairWithSocketToCFHost来打开一个与远程主机连接的socket并分配一对CFStream 对象（CFReadStream和CFWriteStream），并cast这些对象到NSStream\n>  对象（对应NSInputStream 和 NSOutputStream）。从而可以使用NSStream类的相关接口进行相关网络编程。如设置接收网络事件的代理对象，调度到当前的run loop，然后打开它们进行相应处理。\n代码片段如下：\n**[objc]** [view\n plain](http://blog.csdn.net/goohong/article/details/40505291# \"view plain\")[copy](http://blog.csdn.net/goohong/article/details/40505291# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/498585 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/498585/fork \"派生到我的代码片\")1. {  \n2.   \n3.         NSURL *website = [NSURL URLWithString:urlStr];  \n4.   \n5.         if (!website) {  \n6.   \n7.             NSLog(@\"%@ is not a valid URL\");  \n8.   \n9.             return;  \n10.   \n11.         }  \n12.   \n13.         CFReadStreamRef readStream;  \n14.   \n15.         CFWriteStreamRef writeStream;  \n16.   \n17.         CFStreamCreatePairWithSocketToHost(NULL, (CFStringRef)[website host], 80, &readStream, &writeStream);  \n18.   \n19.         NSInputStream *inputStream = (__bridge_transfer NSInputStream *)readStream;  \n20.   \n21.         NSOutputStream *outputStream = (__bridge_transfer NSOutputStream *)writeStream;  \n22.   \n23.         [inputStream setDelegate:self];  \n24.   \n25.         [outputStream setDelegate:self];  \n26.   \n27.         [inputStream scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];  \n28.   \n29.         [outputStream scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];  \n30.   \n31.         [inputStream open];  \n32.   \n33.         [outputStream open];  \n34.   \n35.   \n36.         /* Store a reference to the input and output streams so that \n37.  \n38.            they don't go away.... */  \n39.   \n40.         ...  \n41.   \n42. }  \n\n\n       在NSStream对象打开后，当接收到相关的stream-event网络消息，其代理对象中的handleEvent: 函数被调用，从而进行流相关的网络消息处理，  如发送相关协议的请求或接收应答等。以下为handleEvent: 函数进行事件处理的代码片段：\n   \n**[objc]** [view\n plain](http://blog.csdn.net/goohong/article/details/40505291# \"view plain\")[copy](http://blog.csdn.net/goohong/article/details/40505291# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/498585 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/498585/fork \"派生到我的代码片\")1. - (void)stream:(NSStream *)stream handleEvent:(NSStreamEvent)eventCode {  \n2.   \n3.     NSLog(@\"stream:handleEvent: is invoked...\");  \n4.   \n5.    \n6.   \n7.     switch(eventCode) {  \n8.   \n9.         case NSStreamEventHasSpaceAvailable:  \n10.   \n11.         {  \n12.   \n13.             if (stream == oStream) {  \n14.   \n15.                 NSString * str = [NSString stringWithFormat:  \n16.   \n17.                     @\"GET / HTTP/1.0\\r\\n\\r\\n\"];  \n18.   \n19.                 const uint8_t * rawstring =  \n20.   \n21.                     (const uint8_t *)[str UTF8String];  \n22.   \n23.                 [oStream write:rawstring maxLength:strlen(rawstring)];  \n24.   \n25.                 [oStream close];  \n26.   \n27.             }  \n28.   \n29.             break;  \n30.   \n31.         }  \n32.   \n33.         // continued ...  \n34.   \n35.     }  \n36.   \n37. }  \n\n\n\n三、url 编程模式\n         url 编程模式通过URL 的方式来实现网络编程，任何要存取的网络资源（包括局域网和广域网）都可以用一个URL来表示和存取，并支持设备间的资源共享。url 编程模式系统提供http, https, file, ftp, data等五种协议支持，并允许用户自己开发和登记相关类来支持另外的应用层网络协议，进行协议的扩展。\n        url 编程模式在IOS系统可以使用两种编程接口：NSURLSession 和NSURLConnection。\n        对于iOS 7 以后的最新系统推荐使用NSURLSession API，对于老版本由于不支持NSURLSession，因此必须使用NSURLConnection API。\nNSURLSession编程模式是对相关的连接请求通过一个会话来完成，应用通过创建一系列sessions来实现网络通讯，每一个session协调一组相关数据的传输任务。在每一个session内，应用添加一系列任务，每一个任务表现一个特定URL 请求。\n        NSURLSession相比NSURLConnection的优点是支持在应用挂起、停止或crashed时能够在后台继续下载数据，即支持任务的取消、重启（恢复）、挂起，以及支持从已挂起、取消或失败的下载中重新恢复下载的能力。\n         对于简单的请求，还可以直接通过一个简单的NSURL对象来发出请求，并使用一个NSData内存对象或者一个文件的方式来引出NSURL指向的内容。而NSURLConnection API只能通过构造一个NSURLRequest对象或其子类来发出URL请求来请求下载或上传URL数据。 使用一个NSURLRequest请求对象封装一个URL请求，例如HTTP协议方法，除了可以封装一些协议特定的属性外，还可以规定任意本地cached数据的使用策略。\n         对于NSURLRequest请求对象的应答包括两部分：描述内容的元数据metadata及内容数据本身。两种API对于使用NSURLRequest请求接收的元数据metadata都由NSURLResponse类来封装，其中包含MIME类型、内容长度、编码及提供应答的URL等内容。NSURLResponse协议特定的子类还能提供额外的元数据，如NSHTTPURLResponse提供协议头和WEB服务器返回的状态码\n 等信息。\n         NSURLSession API的使用：\n\n         NSURLSession类支持三种会话类型（默认会话类型、临时会话、后台会话）以及三种类型的任务（数据任务、下载任务、上传任务）。\n         数据任务使用NSData 对象来发送和接收内存数据，不存储数据到一个文件，因此不支持后台会话。\n         下载任务以一个文件的形式引出数据，并支持在应用没有运行时的后台下载。\n         上传任务用来上传数据（文件），也能够支持应用没有运行时的后台上传。\n          默认会话和后台会话的区别是后台会话使用一个分离的进程处理所有的数据传输任务，并带有一些限制：后台会话必须使用特定应用代理来提供事件提交，并仅支持HTTP和HTTPS 协议，不支持其它定制协议，并仅支持上传和下载任务，不支持数据任务。\n         临时会话不存储任何数据到磁盘，所有接收的内容都保存到与会话关联的RAM中，当会话无效时，RAM中接收的内容自动被清除。\n   NSURLSession API的使用步骤：\n   1 、创建一个NSURLSessionConfiguration配置对象\n> NSURLSessionConfiguration配置对象提供广泛的配置选项，包括：\n> 1）、特定于单个会话的私有数据存储，包括caches, cookies, credentials, 和protocols；\n> 2）、与一个特定请求或一个会话关联的Authentication；\n> 3）、与一个主机的最大连接数；\n> 4）、与一个资源关联的超时；\n> 5）、最小和最大TLS版本支持；\n> 6）、定制的代理词典；\n> 7）、cookie策略的控制；\n> 8）、HTTP pipelining行为的控制\n2、根据配置创建相应的NSURLSession；\n       如下代码片段展示了根据不同的配置对象创建不同类型的NSURLSession会话对象。\n         \n**[objc]** [view\n plain](http://blog.csdn.net/goohong/article/details/40505291# \"view plain\")[copy](http://blog.csdn.net/goohong/article/details/40505291# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/498585 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/498585/fork \"派生到我的代码片\")1. /* Create a session for each configurations. */  \n2.     self.defaultSession = [NSURLSession sessionWithConfiguration: defaultConfigObject delegate: self delegateQueue: [NSOperationQueue mainQueue]];  \n3.     self.backgroundSession = [NSURLSession sessionWithConfiguration: backgroundConfigObject delegate: self delegateQueue: [NSOperationQueue mainQueue]];  \n4.     self.ephemeralSession = [NSURLSession sessionWithConfiguration: ephemeralConfigObject delegate: self delegateQueue: [NSOperationQueue mainQueue]];  \n\n\n\n       NSURLSession API通过代理来实现异步URL内容存取，代理可以是系统提供的代理，还可以是应用提供的特定代理对象。任务对象当从服务器接收到数据或传输完成时调用这些代理对象的方法。\n     在创建会话指定相应的代理对象。\n3、为会话添加任务；\n使用如下方法来添加数据任务到一个会话。\n\n> dataTaskWithURL(_:) \n> dataTaskWithURL(_:completionHandler:) \n> dataTaskWithRequest(_:) \n> dataTaskWithRequest(_:completionHandler:) \n\n使用如下方法来添加下载任务到一个会话。\n> downloadTaskWithURL(_:) \n> downloadTaskWithURL(_:completionHandler:) \n> downloadTaskWithRequest(_:) \n> downloadTaskWithRequest(_:completionHandler:) \n> downloadTaskWithResumeData(_:) \n> downloadTaskWithResumeData(_:completionHandler:) \n\n\n使用如下方法来添加上传任务到一个会话\n> uploadTaskWithRequest(_:fromData:) \n> uploadTaskWithRequest(_:fromData:completionHandler:) \n> uploadTaskWithRequest(_:fromFile:) \n> uploadTaskWithRequest(_:fromFile:completionHandler:) \n> uploadTaskWithStreamedRequest(_:) \n         如下是数据任务创建代码片段：     \n**[objc]** [view\n plain](http://blog.csdn.net/goohong/article/details/40505291# \"view plain\")[copy](http://blog.csdn.net/goohong/article/details/40505291# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/498585 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/498585/fork \"派生到我的代码片\")1. NSURL *url = [NSURL URLWithString: @\"http://www.example.com/\"];  \n2.   \n3. NSURLSessionDataTask *dataTask = [self.defaultSession dataTaskWithURL: url];  \n4.   \n5. [dataTask resume];  \n\n       下面是下载任务创建代码片段：         \n**[objc]** [view\n plain](http://blog.csdn.net/goohong/article/details/40505291# \"view plain\")[copy](http://blog.csdn.net/goohong/article/details/40505291# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/498585 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/498585/fork \"派生到我的代码片\")1. NSURL *url = [NSURL URLWithString: @\"https://developer.apple.com/library/ios/documentation/Cocoa/Reference/\"  \n2.   \n3.               \"Foundation/ObjC_classic/FoundationObjC.pdf\"];  \n4.   \n5. NSURLSessionDownloadTask *downloadTask = [self.backgroundSession downloadTaskWithURL: url];  \n6.   \n7. [downloadTask resume];  \n\n4、使用代理方法接收数据及状态信息\n\n\n> 会话的数据任务在使用应用特定代理接收数据时必须实现如下两个代理方法：\n> URLSession:dataTask:didReceiveData: \n> 一次一片的提供请求的数据给会话任务。\n> URLSession:task:didCompleteWithError:\n> 指示请求数据已经全部接收。\n> \n> \n> 会话的下载任务在下载文件时应该实现如下代理方法：\n> URLSession:downloadTask:didFinishDownloadingToURL:\n> 下载内容存储到一个URL指定的一个临时文件，在该方法返回之前，必须把临时文件的内容移到一个永久位置，而临时文件被删除。\n> URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite: \n> 为应用提供关于当前下载进度的状态信息\n> URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:\n> 告诉应用已经从从先前的失败下载中恢复。\n> URLSession:task:didCompleteWithError: \n> 告诉应用下载已经失败。\n> \n> \n> 下载失败恢复处理：\n> 在应用使用cancelByProducingResumeData: 方法取消下载任务时，可以使用downloadTaskWithResumeData: 或 downloadTaskWithResumeData:completionHandler:方法重新创建一个新下载任务并传送cancelByProducingResumeData:产生的恢复数据从而接着继续下载。\n> 在传输失败时，如果任务可恢复，则调用URLSession:task:didCompleteWithError: 方法。在传送给URLSession:task:didCompleteWithError: 方法的参数NSError中的 userInfo 词典中包含键值为NSURLSessionDownloadTaskResumeData的恢复数据，因此可以使用downloadTaskWithResumeData:\n>  或 downloadTaskWithResumeData:completionHandler:方法重新创建一个新下载任务来接着恢复数据继续下载。\n> \n> \n> 系统代理仅能支持基本的URL资源存取任务，不支持认证和后台下载，并且还必须提供一个completion handler block来把返回的URL数据提交到应用。如下是一个使用系统代理的代码例子：         \n**[objc]** [view\n plain](http://blog.csdn.net/goohong/article/details/40505291# \"view plain\")[copy](http://blog.csdn.net/goohong/article/details/40505291# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/498585 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/498585/fork \"派生到我的代码片\")1. NSURLSession *delegateFreeSession = [NSURLSession sessionWithConfiguration: defaultConfigObject delegate: nil delegateQueue: [NSOperationQueue mainQueue]];  \n2.   \n3. [delegateFreeSession dataTaskWithURL: [NSURL URLWithString: @\"http://www.example.com/\"]  \n4.   \n5.                   completionHandler:^(NSData *data, NSURLResponse *response,  \n6.   \n7.                                       NSError *error) {  \n8.   \n9.                       NSLog(@\"Got response %@ with error %@.\\n\", response, error);  \n10.   \n11.                       NSLog(@\"DATA:\\n%@\\nEND DATA\\n\",  \n12.   \n13.                             [[NSString alloc] initWithData: data  \n14.   \n15.                                     encoding: NSUTF8StringEncoding]);  \n16.   \n17.                   }] resume];  \n\n          会话的上传任务的任务创建和相关代理方法：\n          会话的上传任务使用HTTP  POST方法来上传数据。可以以一个NSData对象、一个文件或使用一个流为HTTP POST请求的body提供内容。\n          在以NSData对象提供上传数据时，应用调用uploadTaskWithRequest:fromData: 或uploadTaskWithRequest:fromData:completionHandler: 方法来创建上传任务。\n> 在以文件形式提供上传数据时，应用调用uploadTaskWithRequest:fromFile: 或 uploadTaskWithRequest:fromFile:completionHandler:方法来创建上传任务\n> 在以流方式提供上传数据时，应用调用uploadTaskWithStreamedRequest:方法来创建上传任务。\n> 应用特定代理可以通过实现URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:方法来获得上传进度信息。\n","source":"_posts/oc/iOS 网络编程模式总结.md","raw":"---\ntitle: iOS 网络编程模式总结\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n转自：  http://blog.csdn.net/goohong/article/details/40505291\nIOS 可以采用三类api 接口进行网络编程，根据抽象层次从低到高分别为socket方式、stream方式、url 方式。\n一 、socket 方式\n       IOS 提供的socket 方式的网络编程接口为CFSocket。CFSocket是BSD sockets的抽象和封装，CFSocket提供BSD sockets几乎所有的功能，并与run loop集成，用来实现多线程网络编程和网络事件监听。基于 CFSocket可以实现各种类型的 socket编程，包括stream-based 的sockets(如tcp)和packet-based 的sockets(如udp)。需要注意的是在iOS中CFSocket接口在需要时不自动激活设备的\n cellular modem或on-demand VPN。\n      CFSocket包括以下编程接口，包括Socket的 创建、配置，以及根据创建和配置好的Socket 进行 远程通讯等接口。\n1  Socket的 创建\n> 1 .1、CFSocketCreate\n> 创建一个特定协议和类型的 CFSocket对象\n> 1.2、CFSocketCreateWithSocketSignature\n> 该接口根据一个包含通讯协议和地址的CFSocketSignature结构来创建一个CFSocket对象\n> \n> \n> 1.3、 CFSocketCreateConnectedToSocketSignature\n> 该接口在创建一个CFSocket对象的同时还与一个远端主机进行连接。\n> \n> \n> 1.4、CFSocketCreateWithNative\n> 该接口通过封装一个存在的 BSD socket来创建一个CFSocket对象。\n\n2   Socket的配置\n> 2.1   CFSocketCopyAddress\n> 功能： 返回一个 CFSocket对象的本地地址。\n> 语法：\n> SWIFT\n> func CFSocketCopyAddress(_ s: CFSocket!) -> CFData!\n> 2.2、CFSocketCopyPeerAddress\n> 功能：返回与一个 CFSocket对象连接的远端地址。\n> 语法：\n> SWIFT\n> func CFSocketCopyPeerAddress(_ s: CFSocket!) -> CFData!\n> 2.3  CFSocketDisableCallBacks\n> 功能：临时取消一个CFSocket对象创建时指定的某种类型的事件回调。\n> 语法：\n> SWIFT\n> func CFSocketDisableCallBacks(_ s: CFSocket!,\n>                             _ callBackTypes: CFOptionFlags)\n> 2.4   CFSocketEnableCallBacks\n> 功能：重新允许先前CFSocketDisableCallBacks函数取消的某种类型的事件回调。\n> 语法：\n> SWIFT\n> func CFSocketEnableCallBacks(_ s: CFSocket!,\n>                            _ callBackTypes: CFOptionFlags)\n> 2.5 CFSocketGetContext\n> 功能：返回一个CFSocket对象的上下文信息。\n> 语法：\n> SWIFT\n> func CFSocketGetContext(_ s: CFSocket!,\n>                       _ context: UnsafeMutablePointer<CFSocketContext>)\n> 2.6 CFSocketGetNative\n> 返回与一个CFSocket对象相关的本地 BSD socket。\n> 语法：\n> SWIFT\n> func CFSocketGetNative(_ s: CFSocket!) -> CFSocketNativeHandle\n> 2.7   CFSocketGetSocketFlags\n> 功能：返回控制一个CFSocket对象的确定行为的 标志。\n> 语法：\n> SWIFT\n> func CFSocketGetSocketFlags(_ s: CFSocket!) -> CFOptionFlags\n> \n> \n> 2.8 CFSocketSetSocketFlags\n> 功能：设置控制一个CFSocket对象的确定行为的 标志。\n> 语法：\n> SWIFT\n> func CFSocketSetSocketFlags(_ s: CFSocket!,\n>                           _ flags: CFOptionFlags)\n> 2.9 CFSocketSetAddress\n> 语法：\n> SWIFT\n> func CFSocketSetAddress(_ s: CFSocket!,\n>                       _ address: CFData!) -> CFSocketError\n> 功能：为一个CFSocket对象绑定一个本地地址并在本地socket支持的情况下对socket进行配置使其处于监听状态。该函数对应本地socket的 bind以及listen功能。一旦CFSocket对象绑定地址，依赖于socket的协议，其它进程和主机能连接到该CFSocket对象。\n\n\n3、Sockets的使用\n> 3.1 CFSocketConnectToAddress\n> 功能：打开与一个远程socket的一个连接。\n> 语法：\n> SWIFT\n> func CFSocketConnectToAddress(_ s: CFSocket!,\n>                             _ address: CFData!,\n>                             _ timeout: CFTimeInterval) -> CFSocketError\n> 3.2 CFSocketCreateRunLoopSource\n> 语法：\n> SWIFT\n> func CFSocketCreateRunLoopSource(_ allocator: CFAllocator!,\n>                                _ s: CFSocket!,\n>                                _ order: CFIndex) -> CFRunLoopSource!\n> 功能：为一个CFSocket对象创建一个CFRunLoopSource对象。该创建的 CFRunLoopSource对象不自动添加到一个run loop。为了增加该run loop source到某个run loop，需要调用CFRunLoop对象 的CFRunLoopAddSource函数来为该CFRunLoop对象添加run loop source。\n> 3.3 CFSocketGetTypeID\n> 功能：返回CFSocket对象的 opaque类型对应的类型标示符。\n> 语法：\n> SWIFT\n> func CFSocketGetTypeID() -> CFTypeID \n> 3.4  CFSocketInvalidate\n> 功能：使一个CFSocket对象无效，使其停止接收和发送任何消息。\n> 语法：\n> SWIFT\n> func CFSocketInvalidate(_ s: CFSocket!)\n> 3.5 CFSocketIsValid\n> 功能：返回一个指示一个CFSocket对象是否有效及是否能够发送和接收消息的布尔值。\n> 语法：\n> SWIFT\n> func CFSocketIsValid(_ s: CFSocket!) -> Boolean\n> 3.6 CFSocketSendData\n> 功能：该函数用来通过一个CFSocket对象发送数据。\n> 语法：\n> SWIFT\n> func CFSocketSendData(_ s: CFSocket!,\n>                     _ address: CFData!,\n>                     _ data: CFData!,\n>                     _ timeout: CFTimeInterval) -> CFSocketError\n\n\n二、stream编程模式\n       stream编程模式提供了与 unix 的文件操作类似的模式。首先创建和设置流，接着打开流，然后读写流，在流存在时还可以通过查询流的相关属性来读取流的相关信息，在流使用完毕后关闭流。\n       iOS 为stream编程模式提供的api编程接口包括两大类，一类是Core Foundation框架层用C语言实现的CFStream  API（包括CFStream、 CFReadStream 、CFWriteStream等）,一类是基于其上的在Foundation框架层用Objective-C语言实现的NSStream API（包括NSStream、NSInputStream NSOutputStream等）,两者提供相似的接口和行为，其中某些对象是toll-free\n bridged类型的，如CFStream 与NSStream，CFReadStream与NSInputStream，CFWriteStream与NSOutputStream之间，因此可以混合使用。\n       开发人员可以根据自己的语言偏好选择使用。\n       CFStream API的主要接口：\n1、CFStream 创建接口\n> 1.1  CFStreamCreatePairWithPeerSocketSignature\n          功能：创建一对到一个socket的可读和可写流。\n> 1.2 CFStreamCreatePairWithSocketToHost\n> 功能：创建连接到一个特定主机的特定端口的一对可读写流。\n> 1.3 CFStreamCreatePairWithSocket\n> 功能：创建一对连接到一个socket的可读写流\n> 1.4 CFStreamCreateBoundPair\n> 功能：创建一对读写流。\n> 其它可读写流创建接口：\n>  1.5 CFReadStreamCreateForHTTPRequest\n>    功能：为一个CFHTTP请求创建一个可读流。\n> 1.6 CFReadStreamCreateForStreamedHTTPRequest\n> 功能：为一个HTTP请求的body保持在内存的CFHTTP请求创建一个可读流。\n> 1.7  CFReadStreamCreateWithFTPURL\n> 功能：创建一个FTP可读流\n> 1.8  CFWriteStreamCreateWithFTPURL\n> 功能：创建一个FTP可读流\n2. CFReadStream接口\n> 2.1 流的打开和关闭\n>       CFReadStreamOpen\n       CFReadStreamClose\n2.2  读取数据\n      CFReadStreamRead\n2.3.  调度一个可读流\n   CFReadStreamScheduleWithRunLoop(_:_:_:) \n           CFReadStreamUnscheduleFromRunLoop(_:_:_:) \n2.4 检查可读流的属性  \n> CFReadStreamCopyProperty(_:_:) \n> CFReadStreamGetBuffer(_:_:_:) \n> CFReadStreamCopyError(_:) \n> CFReadStreamGetError(_:) \n> CFReadStreamGetStatus(_:) \n> CFReadStreamHasBytesAvailable(_:) \n2.5 设置可读流的属性\n> CFReadStreamSetClient(_:_:_:_:)\n> CFReadStreamSetProperty(_:_:_:) \n 2.6 得到 CFReadStream的 Type ID\n                    CFReadStreamGetTypeID()\n\n3.CFWriteStream 相关接口\n\n\n>      3.1 CFWriteStreamClose(_:) \n>      3.2 CFWriteStreamOpen(_:) \n>      3.3 CFWriteStreamWrite(_:_:_:)\n        3.4 CFWriteStreamScheduleWithRunLoop(_:_:_:)\n  3.5 CFWriteStreamUnscheduleFromRunLoop(_:_:_:)\n        3.6 CFWriteStreamCanAcceptBytes(_:)\n>       3.7 CFWriteStreamCopyProperty(_:_:)\n>       3.8 CFWriteStreamCopyError(_:)\n>       3.9 CFWriteStreamGetError(_:)\n>       3.10 CFWriteStreamGetStatus(_:) \n         3.11 CFWriteStreamSetClient(_:_:_:_:)\n>   3.12 CFWriteStreamSetProperty(_:_:_:) \n>       3.13 CFWriteStreamGetTypeID()\nCFStream API的使用步骤：\n> 1） 利用流创建接口创建相关流；\n> 2）、调用CFReadStreamSetClient （可读流）或CFWriteStreamSetClient （可写流）来登记要接收的流相关的事件；\n> 3）、调用CFReadStreamScheduleWithRunLoop（可读流）或CFWriteStreamScheduleWithRunLoop（可写流）来使在流在一个run loop上进行调度以便接收相关事件；\n> 4）、调用CFReadStreamOpen 或CFWriteStreamOpen 来打开已创建的流；\n> 5）、在读取流的创建时登记的回调中，在接收到kCFStreamEventHasBytesAvailable事件时来读取数据， 在可写流已登记的回调中，在接收到kCFStreamEventCanAcceptBytes 事件时开始发送数据或请求；\n> 6） 数据传输完成，关闭和释放打开和创建的相关流；\n2、NSStream   API的使用>  在ios 中由于NSStream类不支持 与一个远程主机连接，而CFStream支持，因此为了使用 NSStream，你需要使用流创建函数CFStreamCreatePairWithSocketToHost或CFStreamCreatePairWithSocketToCFHost来打开一个与远程主机连接的socket并分配一对CFStream 对象（CFReadStream和CFWriteStream），并cast这些对象到NSStream\n>  对象（对应NSInputStream 和 NSOutputStream）。从而可以使用NSStream类的相关接口进行相关网络编程。如设置接收网络事件的代理对象，调度到当前的run loop，然后打开它们进行相应处理。\n代码片段如下：\n**[objc]** [view\n plain](http://blog.csdn.net/goohong/article/details/40505291# \"view plain\")[copy](http://blog.csdn.net/goohong/article/details/40505291# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/498585 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/498585/fork \"派生到我的代码片\")1. {  \n2.   \n3.         NSURL *website = [NSURL URLWithString:urlStr];  \n4.   \n5.         if (!website) {  \n6.   \n7.             NSLog(@\"%@ is not a valid URL\");  \n8.   \n9.             return;  \n10.   \n11.         }  \n12.   \n13.         CFReadStreamRef readStream;  \n14.   \n15.         CFWriteStreamRef writeStream;  \n16.   \n17.         CFStreamCreatePairWithSocketToHost(NULL, (CFStringRef)[website host], 80, &readStream, &writeStream);  \n18.   \n19.         NSInputStream *inputStream = (__bridge_transfer NSInputStream *)readStream;  \n20.   \n21.         NSOutputStream *outputStream = (__bridge_transfer NSOutputStream *)writeStream;  \n22.   \n23.         [inputStream setDelegate:self];  \n24.   \n25.         [outputStream setDelegate:self];  \n26.   \n27.         [inputStream scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];  \n28.   \n29.         [outputStream scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];  \n30.   \n31.         [inputStream open];  \n32.   \n33.         [outputStream open];  \n34.   \n35.   \n36.         /* Store a reference to the input and output streams so that \n37.  \n38.            they don't go away.... */  \n39.   \n40.         ...  \n41.   \n42. }  \n\n\n       在NSStream对象打开后，当接收到相关的stream-event网络消息，其代理对象中的handleEvent: 函数被调用，从而进行流相关的网络消息处理，  如发送相关协议的请求或接收应答等。以下为handleEvent: 函数进行事件处理的代码片段：\n   \n**[objc]** [view\n plain](http://blog.csdn.net/goohong/article/details/40505291# \"view plain\")[copy](http://blog.csdn.net/goohong/article/details/40505291# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/498585 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/498585/fork \"派生到我的代码片\")1. - (void)stream:(NSStream *)stream handleEvent:(NSStreamEvent)eventCode {  \n2.   \n3.     NSLog(@\"stream:handleEvent: is invoked...\");  \n4.   \n5.    \n6.   \n7.     switch(eventCode) {  \n8.   \n9.         case NSStreamEventHasSpaceAvailable:  \n10.   \n11.         {  \n12.   \n13.             if (stream == oStream) {  \n14.   \n15.                 NSString * str = [NSString stringWithFormat:  \n16.   \n17.                     @\"GET / HTTP/1.0\\r\\n\\r\\n\"];  \n18.   \n19.                 const uint8_t * rawstring =  \n20.   \n21.                     (const uint8_t *)[str UTF8String];  \n22.   \n23.                 [oStream write:rawstring maxLength:strlen(rawstring)];  \n24.   \n25.                 [oStream close];  \n26.   \n27.             }  \n28.   \n29.             break;  \n30.   \n31.         }  \n32.   \n33.         // continued ...  \n34.   \n35.     }  \n36.   \n37. }  \n\n\n\n三、url 编程模式\n         url 编程模式通过URL 的方式来实现网络编程，任何要存取的网络资源（包括局域网和广域网）都可以用一个URL来表示和存取，并支持设备间的资源共享。url 编程模式系统提供http, https, file, ftp, data等五种协议支持，并允许用户自己开发和登记相关类来支持另外的应用层网络协议，进行协议的扩展。\n        url 编程模式在IOS系统可以使用两种编程接口：NSURLSession 和NSURLConnection。\n        对于iOS 7 以后的最新系统推荐使用NSURLSession API，对于老版本由于不支持NSURLSession，因此必须使用NSURLConnection API。\nNSURLSession编程模式是对相关的连接请求通过一个会话来完成，应用通过创建一系列sessions来实现网络通讯，每一个session协调一组相关数据的传输任务。在每一个session内，应用添加一系列任务，每一个任务表现一个特定URL 请求。\n        NSURLSession相比NSURLConnection的优点是支持在应用挂起、停止或crashed时能够在后台继续下载数据，即支持任务的取消、重启（恢复）、挂起，以及支持从已挂起、取消或失败的下载中重新恢复下载的能力。\n         对于简单的请求，还可以直接通过一个简单的NSURL对象来发出请求，并使用一个NSData内存对象或者一个文件的方式来引出NSURL指向的内容。而NSURLConnection API只能通过构造一个NSURLRequest对象或其子类来发出URL请求来请求下载或上传URL数据。 使用一个NSURLRequest请求对象封装一个URL请求，例如HTTP协议方法，除了可以封装一些协议特定的属性外，还可以规定任意本地cached数据的使用策略。\n         对于NSURLRequest请求对象的应答包括两部分：描述内容的元数据metadata及内容数据本身。两种API对于使用NSURLRequest请求接收的元数据metadata都由NSURLResponse类来封装，其中包含MIME类型、内容长度、编码及提供应答的URL等内容。NSURLResponse协议特定的子类还能提供额外的元数据，如NSHTTPURLResponse提供协议头和WEB服务器返回的状态码\n 等信息。\n         NSURLSession API的使用：\n\n         NSURLSession类支持三种会话类型（默认会话类型、临时会话、后台会话）以及三种类型的任务（数据任务、下载任务、上传任务）。\n         数据任务使用NSData 对象来发送和接收内存数据，不存储数据到一个文件，因此不支持后台会话。\n         下载任务以一个文件的形式引出数据，并支持在应用没有运行时的后台下载。\n         上传任务用来上传数据（文件），也能够支持应用没有运行时的后台上传。\n          默认会话和后台会话的区别是后台会话使用一个分离的进程处理所有的数据传输任务，并带有一些限制：后台会话必须使用特定应用代理来提供事件提交，并仅支持HTTP和HTTPS 协议，不支持其它定制协议，并仅支持上传和下载任务，不支持数据任务。\n         临时会话不存储任何数据到磁盘，所有接收的内容都保存到与会话关联的RAM中，当会话无效时，RAM中接收的内容自动被清除。\n   NSURLSession API的使用步骤：\n   1 、创建一个NSURLSessionConfiguration配置对象\n> NSURLSessionConfiguration配置对象提供广泛的配置选项，包括：\n> 1）、特定于单个会话的私有数据存储，包括caches, cookies, credentials, 和protocols；\n> 2）、与一个特定请求或一个会话关联的Authentication；\n> 3）、与一个主机的最大连接数；\n> 4）、与一个资源关联的超时；\n> 5）、最小和最大TLS版本支持；\n> 6）、定制的代理词典；\n> 7）、cookie策略的控制；\n> 8）、HTTP pipelining行为的控制\n2、根据配置创建相应的NSURLSession；\n       如下代码片段展示了根据不同的配置对象创建不同类型的NSURLSession会话对象。\n         \n**[objc]** [view\n plain](http://blog.csdn.net/goohong/article/details/40505291# \"view plain\")[copy](http://blog.csdn.net/goohong/article/details/40505291# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/498585 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/498585/fork \"派生到我的代码片\")1. /* Create a session for each configurations. */  \n2.     self.defaultSession = [NSURLSession sessionWithConfiguration: defaultConfigObject delegate: self delegateQueue: [NSOperationQueue mainQueue]];  \n3.     self.backgroundSession = [NSURLSession sessionWithConfiguration: backgroundConfigObject delegate: self delegateQueue: [NSOperationQueue mainQueue]];  \n4.     self.ephemeralSession = [NSURLSession sessionWithConfiguration: ephemeralConfigObject delegate: self delegateQueue: [NSOperationQueue mainQueue]];  \n\n\n\n       NSURLSession API通过代理来实现异步URL内容存取，代理可以是系统提供的代理，还可以是应用提供的特定代理对象。任务对象当从服务器接收到数据或传输完成时调用这些代理对象的方法。\n     在创建会话指定相应的代理对象。\n3、为会话添加任务；\n使用如下方法来添加数据任务到一个会话。\n\n> dataTaskWithURL(_:) \n> dataTaskWithURL(_:completionHandler:) \n> dataTaskWithRequest(_:) \n> dataTaskWithRequest(_:completionHandler:) \n\n使用如下方法来添加下载任务到一个会话。\n> downloadTaskWithURL(_:) \n> downloadTaskWithURL(_:completionHandler:) \n> downloadTaskWithRequest(_:) \n> downloadTaskWithRequest(_:completionHandler:) \n> downloadTaskWithResumeData(_:) \n> downloadTaskWithResumeData(_:completionHandler:) \n\n\n使用如下方法来添加上传任务到一个会话\n> uploadTaskWithRequest(_:fromData:) \n> uploadTaskWithRequest(_:fromData:completionHandler:) \n> uploadTaskWithRequest(_:fromFile:) \n> uploadTaskWithRequest(_:fromFile:completionHandler:) \n> uploadTaskWithStreamedRequest(_:) \n         如下是数据任务创建代码片段：     \n**[objc]** [view\n plain](http://blog.csdn.net/goohong/article/details/40505291# \"view plain\")[copy](http://blog.csdn.net/goohong/article/details/40505291# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/498585 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/498585/fork \"派生到我的代码片\")1. NSURL *url = [NSURL URLWithString: @\"http://www.example.com/\"];  \n2.   \n3. NSURLSessionDataTask *dataTask = [self.defaultSession dataTaskWithURL: url];  \n4.   \n5. [dataTask resume];  \n\n       下面是下载任务创建代码片段：         \n**[objc]** [view\n plain](http://blog.csdn.net/goohong/article/details/40505291# \"view plain\")[copy](http://blog.csdn.net/goohong/article/details/40505291# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/498585 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/498585/fork \"派生到我的代码片\")1. NSURL *url = [NSURL URLWithString: @\"https://developer.apple.com/library/ios/documentation/Cocoa/Reference/\"  \n2.   \n3.               \"Foundation/ObjC_classic/FoundationObjC.pdf\"];  \n4.   \n5. NSURLSessionDownloadTask *downloadTask = [self.backgroundSession downloadTaskWithURL: url];  \n6.   \n7. [downloadTask resume];  \n\n4、使用代理方法接收数据及状态信息\n\n\n> 会话的数据任务在使用应用特定代理接收数据时必须实现如下两个代理方法：\n> URLSession:dataTask:didReceiveData: \n> 一次一片的提供请求的数据给会话任务。\n> URLSession:task:didCompleteWithError:\n> 指示请求数据已经全部接收。\n> \n> \n> 会话的下载任务在下载文件时应该实现如下代理方法：\n> URLSession:downloadTask:didFinishDownloadingToURL:\n> 下载内容存储到一个URL指定的一个临时文件，在该方法返回之前，必须把临时文件的内容移到一个永久位置，而临时文件被删除。\n> URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite: \n> 为应用提供关于当前下载进度的状态信息\n> URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:\n> 告诉应用已经从从先前的失败下载中恢复。\n> URLSession:task:didCompleteWithError: \n> 告诉应用下载已经失败。\n> \n> \n> 下载失败恢复处理：\n> 在应用使用cancelByProducingResumeData: 方法取消下载任务时，可以使用downloadTaskWithResumeData: 或 downloadTaskWithResumeData:completionHandler:方法重新创建一个新下载任务并传送cancelByProducingResumeData:产生的恢复数据从而接着继续下载。\n> 在传输失败时，如果任务可恢复，则调用URLSession:task:didCompleteWithError: 方法。在传送给URLSession:task:didCompleteWithError: 方法的参数NSError中的 userInfo 词典中包含键值为NSURLSessionDownloadTaskResumeData的恢复数据，因此可以使用downloadTaskWithResumeData:\n>  或 downloadTaskWithResumeData:completionHandler:方法重新创建一个新下载任务来接着恢复数据继续下载。\n> \n> \n> 系统代理仅能支持基本的URL资源存取任务，不支持认证和后台下载，并且还必须提供一个completion handler block来把返回的URL数据提交到应用。如下是一个使用系统代理的代码例子：         \n**[objc]** [view\n plain](http://blog.csdn.net/goohong/article/details/40505291# \"view plain\")[copy](http://blog.csdn.net/goohong/article/details/40505291# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/498585 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/498585/fork \"派生到我的代码片\")1. NSURLSession *delegateFreeSession = [NSURLSession sessionWithConfiguration: defaultConfigObject delegate: nil delegateQueue: [NSOperationQueue mainQueue]];  \n2.   \n3. [delegateFreeSession dataTaskWithURL: [NSURL URLWithString: @\"http://www.example.com/\"]  \n4.   \n5.                   completionHandler:^(NSData *data, NSURLResponse *response,  \n6.   \n7.                                       NSError *error) {  \n8.   \n9.                       NSLog(@\"Got response %@ with error %@.\\n\", response, error);  \n10.   \n11.                       NSLog(@\"DATA:\\n%@\\nEND DATA\\n\",  \n12.   \n13.                             [[NSString alloc] initWithData: data  \n14.   \n15.                                     encoding: NSUTF8StringEncoding]);  \n16.   \n17.                   }] resume];  \n\n          会话的上传任务的任务创建和相关代理方法：\n          会话的上传任务使用HTTP  POST方法来上传数据。可以以一个NSData对象、一个文件或使用一个流为HTTP POST请求的body提供内容。\n          在以NSData对象提供上传数据时，应用调用uploadTaskWithRequest:fromData: 或uploadTaskWithRequest:fromData:completionHandler: 方法来创建上传任务。\n> 在以文件形式提供上传数据时，应用调用uploadTaskWithRequest:fromFile: 或 uploadTaskWithRequest:fromFile:completionHandler:方法来创建上传任务\n> 在以流方式提供上传数据时，应用调用uploadTaskWithStreamedRequest:方法来创建上传任务。\n> 应用特定代理可以通过实现URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:方法来获得上传进度信息。\n","slug":"oc/iOS 网络编程模式总结","published":1,"updated":"2016-10-08T09:16:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms982002s21xwis317i6c","content":"<a id=\"more\"></a>\n<p>转自：  <a href=\"http://blog.csdn.net/goohong/article/details/40505291\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/goohong/article/details/40505291</a><br>IOS 可以采用三类api 接口进行网络编程，根据抽象层次从低到高分别为socket方式、stream方式、url 方式。<br>一 、socket 方式<br>       IOS 提供的socket 方式的网络编程接口为CFSocket。CFSocket是BSD sockets的抽象和封装，CFSocket提供BSD sockets几乎所有的功能，并与run loop集成，用来实现多线程网络编程和网络事件监听。基于 CFSocket可以实现各种类型的 socket编程，包括stream-based 的sockets(如tcp)和packet-based 的sockets(如udp)。需要注意的是在iOS中CFSocket接口在需要时不自动激活设备的<br> cellular modem或on-demand VPN。<br>      CFSocket包括以下编程接口，包括Socket的 创建、配置，以及根据创建和配置好的Socket 进行 远程通讯等接口。<br>1  Socket的 创建</p>\n<blockquote>\n<p>1 .1、CFSocketCreate<br>创建一个特定协议和类型的 CFSocket对象<br>1.2、CFSocketCreateWithSocketSignature<br>该接口根据一个包含通讯协议和地址的CFSocketSignature结构来创建一个CFSocket对象</p>\n<p>1.3、 CFSocketCreateConnectedToSocketSignature<br>该接口在创建一个CFSocket对象的同时还与一个远端主机进行连接。</p>\n<p>1.4、CFSocketCreateWithNative<br>该接口通过封装一个存在的 BSD socket来创建一个CFSocket对象。</p>\n</blockquote>\n<p>2   Socket的配置</p>\n<blockquote>\n<p>2.1   CFSocketCopyAddress<br>功能： 返回一个 CFSocket对象的本地地址。<br>语法：<br>SWIFT<br>func CFSocketCopyAddress(<em> s: CFSocket!) -&gt; CFData!<br>2.2、CFSocketCopyPeerAddress<br>功能：返回与一个 CFSocket对象连接的远端地址。<br>语法：<br>SWIFT<br>func CFSocketCopyPeerAddress(</em> s: CFSocket!) -&gt; CFData!<br>2.3  CFSocketDisableCallBacks<br>功能：临时取消一个CFSocket对象创建时指定的某种类型的事件回调。<br>语法：<br>SWIFT<br>func CFSocketDisableCallBacks(<em> s: CFSocket!,\n                            </em> callBackTypes: CFOptionFlags)<br>2.4   CFSocketEnableCallBacks<br>功能：重新允许先前CFSocketDisableCallBacks函数取消的某种类型的事件回调。<br>语法：<br>SWIFT<br>func CFSocketEnableCallBacks(<em> s: CFSocket!,\n                           </em> callBackTypes: CFOptionFlags)<br>2.5 CFSocketGetContext<br>功能：返回一个CFSocket对象的上下文信息。<br>语法：<br>SWIFT<br>func CFSocketGetContext(<em> s: CFSocket!,\n                      </em> context: UnsafeMutablePointer<cfsocketcontext>)<br>2.6 CFSocketGetNative<br>返回与一个CFSocket对象相关的本地 BSD socket。<br>语法：<br>SWIFT<br>func CFSocketGetNative(<em> s: CFSocket!) -&gt; CFSocketNativeHandle<br>2.7   CFSocketGetSocketFlags<br>功能：返回控制一个CFSocket对象的确定行为的 标志。<br>语法：<br>SWIFT<br>func CFSocketGetSocketFlags(</em> s: CFSocket!) -&gt; CFOptionFlags</cfsocketcontext></p>\n<p>2.8 CFSocketSetSocketFlags<br>功能：设置控制一个CFSocket对象的确定行为的 标志。<br>语法：<br>SWIFT<br>func CFSocketSetSocketFlags(<em> s: CFSocket!,\n                          </em> flags: CFOptionFlags)<br>2.9 CFSocketSetAddress<br>语法：<br>SWIFT<br>func CFSocketSetAddress(<em> s: CFSocket!,\n                      </em> address: CFData!) -&gt; CFSocketError<br>功能：为一个CFSocket对象绑定一个本地地址并在本地socket支持的情况下对socket进行配置使其处于监听状态。该函数对应本地socket的 bind以及listen功能。一旦CFSocket对象绑定地址，依赖于socket的协议，其它进程和主机能连接到该CFSocket对象。</p>\n</blockquote>\n<p>3、Sockets的使用</p>\n<blockquote>\n<p>3.1 CFSocketConnectToAddress<br>功能：打开与一个远程socket的一个连接。<br>语法：<br>SWIFT<br>func CFSocketConnectToAddress(<em> s: CFSocket!,\n                            </em> address: CFData!,<br>                            <em> timeout: CFTimeInterval) -&gt; CFSocketError<br>3.2 CFSocketCreateRunLoopSource<br>语法：<br>SWIFT<br>func CFSocketCreateRunLoopSource(</em> allocator: CFAllocator!,<br>                               <em> s: CFSocket!,\n                               </em> order: CFIndex) -&gt; CFRunLoopSource!<br>功能：为一个CFSocket对象创建一个CFRunLoopSource对象。该创建的 CFRunLoopSource对象不自动添加到一个run loop。为了增加该run loop source到某个run loop，需要调用CFRunLoop对象 的CFRunLoopAddSource函数来为该CFRunLoop对象添加run loop source。<br>3.3 CFSocketGetTypeID<br>功能：返回CFSocket对象的 opaque类型对应的类型标示符。<br>语法：<br>SWIFT<br>func CFSocketGetTypeID() -&gt; CFTypeID<br>3.4  CFSocketInvalidate<br>功能：使一个CFSocket对象无效，使其停止接收和发送任何消息。<br>语法：<br>SWIFT<br>func CFSocketInvalidate(<em> s: CFSocket!)<br>3.5 CFSocketIsValid<br>功能：返回一个指示一个CFSocket对象是否有效及是否能够发送和接收消息的布尔值。<br>语法：<br>SWIFT<br>func CFSocketIsValid(</em> s: CFSocket!) -&gt; Boolean<br>3.6 CFSocketSendData<br>功能：该函数用来通过一个CFSocket对象发送数据。<br>语法：<br>SWIFT<br>func CFSocketSendData(<em> s: CFSocket!,\n                    </em> address: CFData!,<br>                    <em> data: CFData!,\n                    </em> timeout: CFTimeInterval) -&gt; CFSocketError</p>\n</blockquote>\n<p>二、stream编程模式<br>       stream编程模式提供了与 unix 的文件操作类似的模式。首先创建和设置流，接着打开流，然后读写流，在流存在时还可以通过查询流的相关属性来读取流的相关信息，在流使用完毕后关闭流。<br>       iOS 为stream编程模式提供的api编程接口包括两大类，一类是Core Foundation框架层用C语言实现的CFStream  API（包括CFStream、 CFReadStream 、CFWriteStream等）,一类是基于其上的在Foundation框架层用Objective-C语言实现的NSStream API（包括NSStream、NSInputStream NSOutputStream等）,两者提供相似的接口和行为，其中某些对象是toll-free<br> bridged类型的，如CFStream 与NSStream，CFReadStream与NSInputStream，CFWriteStream与NSOutputStream之间，因此可以混合使用。<br>       开发人员可以根据自己的语言偏好选择使用。<br>       CFStream API的主要接口：<br>1、CFStream 创建接口</p>\n<blockquote>\n<p>1.1  CFStreamCreatePairWithPeerSocketSignature<br>          功能：创建一对到一个socket的可读和可写流。<br>1.2 CFStreamCreatePairWithSocketToHost<br>功能：创建连接到一个特定主机的特定端口的一对可读写流。<br>1.3 CFStreamCreatePairWithSocket<br>功能：创建一对连接到一个socket的可读写流<br>1.4 CFStreamCreateBoundPair<br>功能：创建一对读写流。<br>其它可读写流创建接口：<br> 1.5 CFReadStreamCreateForHTTPRequest<br>   功能：为一个CFHTTP请求创建一个可读流。<br>1.6 CFReadStreamCreateForStreamedHTTPRequest<br>功能：为一个HTTP请求的body保持在内存的CFHTTP请求创建一个可读流。<br>1.7  CFReadStreamCreateWithFTPURL<br>功能：创建一个FTP可读流<br>1.8  CFWriteStreamCreateWithFTPURL<br>功能：创建一个FTP可读流</p>\n<ol>\n<li>CFReadStream接口<br>2.1 流的打开和关闭<br>   CFReadStreamOpen<pre><code>CFReadStreamClose\n</code></pre>2.2  读取数据<br>   CFReadStreamRead<br>2.3.  调度一个可读流<br>CFReadStreamScheduleWithRunLoop(<em>:</em>:_:) <pre><code>CFReadStreamUnscheduleFromRunLoop(_:_:_:) \n</code></pre>2.4 检查可读流的属性<br>CFReadStreamCopyProperty(<em>:</em>:)<br>CFReadStreamGetBuffer(<em>:</em>:<em>:)<br>CFReadStreamCopyError(</em>:)<br>CFReadStreamGetError(<em>:)<br>CFReadStreamGetStatus(</em>:)<br>CFReadStreamHasBytesAvailable(<em>:)<br>2.5 设置可读流的属性<br>CFReadStreamSetClient(</em>:<em>:</em>:<em>:)<br>CFReadStreamSetProperty(</em>:<em>:</em>:)<br>2.6 得到 CFReadStream的 Type ID<pre><code>CFReadStreamGetTypeID()\n</code></pre></li>\n</ol>\n</blockquote>\n<p>3.CFWriteStream 相关接口</p>\n<blockquote>\n<pre><code>3.1 CFWriteStreamClose(_:) \n3.2 CFWriteStreamOpen(_:) \n3.3 CFWriteStreamWrite(_:_:_:)\n   3.4 CFWriteStreamScheduleWithRunLoop(_:_:_:)\n</code></pre><p>  3.5 CFWriteStreamUnscheduleFromRunLoop(<em>:</em>:<em>:)<br>        3.6 CFWriteStreamCanAcceptBytes(</em>:)<br>      3.7 CFWriteStreamCopyProperty(<em>:</em>:)<br>      3.8 CFWriteStreamCopyError(<em>:)<br>      3.9 CFWriteStreamGetError(</em>:)<br>      3.10 CFWriteStreamGetStatus(<em>:)<br>         3.11 CFWriteStreamSetClient(</em>:<em>:</em>:<em>:)<br>  3.12 CFWriteStreamSetProperty(</em>:<em>:</em>:)<br>      3.13 CFWriteStreamGetTypeID()<br>CFStream API的使用步骤：<br>1） 利用流创建接口创建相关流；<br>2）、调用CFReadStreamSetClient （可读流）或CFWriteStreamSetClient （可写流）来登记要接收的流相关的事件；<br>3）、调用CFReadStreamScheduleWithRunLoop（可读流）或CFWriteStreamScheduleWithRunLoop（可写流）来使在流在一个run loop上进行调度以便接收相关事件；<br>4）、调用CFReadStreamOpen 或CFWriteStreamOpen 来打开已创建的流；<br>5）、在读取流的创建时登记的回调中，在接收到kCFStreamEventHasBytesAvailable事件时来读取数据， 在可写流已登记的回调中，在接收到kCFStreamEventCanAcceptBytes 事件时开始发送数据或请求；<br>6） 数据传输完成，关闭和释放打开和创建的相关流；<br>2、NSStream   API的使用&gt;  在ios 中由于NSStream类不支持 与一个远程主机连接，而CFStream支持，因此为了使用 NSStream，你需要使用流创建函数CFStreamCreatePairWithSocketToHost或CFStreamCreatePairWithSocketToCFHost来打开一个与远程主机连接的socket并分配一对CFStream 对象（CFReadStream和CFWriteStream），并cast这些对象到NSStream<br> 对象（对应NSInputStream 和 NSOutputStream）。从而可以使用NSStream类的相关接口进行相关网络编程。如设置接收网络事件的代理对象，调度到当前的run loop，然后打开它们进行相应处理。<br>代码片段如下：<br><strong>[objc]</strong> <a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a><a href=\"https://code.csdn.net/snippets/498585\" title=\"在CODE上查看代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/498585/fork\" title=\"派生到我的代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. {  </p>\n<ol>\n<li></li>\n<li>NSURL *website = [NSURL URLWithString:urlStr];  </li>\n<li></li>\n<li>if (!website) {  </li>\n<li></li>\n<li>NSLog(@”%@ is not a valid URL”);  </li>\n<li></li>\n<li>return;  </li>\n<li></li>\n<li>}  </li>\n<li></li>\n<li>CFReadStreamRef readStream;  </li>\n<li></li>\n<li>CFWriteStreamRef writeStream;  </li>\n<li></li>\n<li>CFStreamCreatePairWithSocketToHost(NULL, (CFStringRef)[website host], 80, &amp;readStream, &amp;writeStream);  </li>\n<li></li>\n<li>NSInputStream <em>inputStream = (__bridge_transfer NSInputStream </em>)readStream;  </li>\n<li></li>\n<li>NSOutputStream <em>outputStream = (__bridge_transfer NSOutputStream </em>)writeStream;  </li>\n<li></li>\n<li>[inputStream setDelegate:self];  </li>\n<li></li>\n<li>[outputStream setDelegate:self];  </li>\n<li></li>\n<li>[inputStream scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];  </li>\n<li></li>\n<li>[outputStream scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];  </li>\n<li></li>\n<li>[inputStream open];  </li>\n<li></li>\n<li>[outputStream open];  </li>\n<li></li>\n<li></li>\n<li>/* Store a reference to the input and output streams so that </li>\n<li></li>\n<li>they don’t go away…. */  </li>\n<li></li>\n<li>…  </li>\n<li></li>\n<li>}  </li>\n</ol>\n</blockquote>\n<pre><code>在NSStream对象打开后，当接收到相关的stream-event网络消息，其代理对象中的handleEvent: 函数被调用，从而进行流相关的网络消息处理，  如发送相关协议的请求或接收应答等。以下为handleEvent: 函数进行事件处理的代码片段：\n</code></pre><p><strong>[objc]</strong> <a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a><a href=\"https://code.csdn.net/snippets/498585\" title=\"在CODE上查看代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/498585/fork\" title=\"派生到我的代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. - (void)stream:(NSStream *)stream handleEvent:(NSStreamEvent)eventCode {  </p>\n<ol>\n<li></li>\n<li>NSLog(@”stream:handleEvent: is invoked…”);  </li>\n<li></li>\n<li></li>\n<li></li>\n<li>switch(eventCode) {  </li>\n<li></li>\n<li>case NSStreamEventHasSpaceAvailable:  </li>\n<li></li>\n<li>{  </li>\n<li></li>\n<li>if (stream == oStream) {  </li>\n<li></li>\n<li>NSString * str = [NSString stringWithFormat:  </li>\n<li></li>\n<li>@”GET / HTTP/1.0\\r\\n\\r\\n”];  </li>\n<li></li>\n<li>const uint8_t * rawstring =  </li>\n<li></li>\n<li>(const uint8_t *)[str UTF8String];  </li>\n<li></li>\n<li>[oStream write:rawstring maxLength:strlen(rawstring)];  </li>\n<li></li>\n<li>[oStream close];  </li>\n<li></li>\n<li>}  </li>\n<li></li>\n<li>break;  </li>\n<li></li>\n<li>}  </li>\n<li></li>\n<li>// continued …  </li>\n<li></li>\n<li>}  </li>\n<li></li>\n<li>}  </li>\n</ol>\n<p>三、url 编程模式<br>         url 编程模式通过URL 的方式来实现网络编程，任何要存取的网络资源（包括局域网和广域网）都可以用一个URL来表示和存取，并支持设备间的资源共享。url 编程模式系统提供http, https, file, ftp, data等五种协议支持，并允许用户自己开发和登记相关类来支持另外的应用层网络协议，进行协议的扩展。<br>        url 编程模式在IOS系统可以使用两种编程接口：NSURLSession 和NSURLConnection。<br>        对于iOS 7 以后的最新系统推荐使用NSURLSession API，对于老版本由于不支持NSURLSession，因此必须使用NSURLConnection API。<br>NSURLSession编程模式是对相关的连接请求通过一个会话来完成，应用通过创建一系列sessions来实现网络通讯，每一个session协调一组相关数据的传输任务。在每一个session内，应用添加一系列任务，每一个任务表现一个特定URL 请求。<br>        NSURLSession相比NSURLConnection的优点是支持在应用挂起、停止或crashed时能够在后台继续下载数据，即支持任务的取消、重启（恢复）、挂起，以及支持从已挂起、取消或失败的下载中重新恢复下载的能力。<br>         对于简单的请求，还可以直接通过一个简单的NSURL对象来发出请求，并使用一个NSData内存对象或者一个文件的方式来引出NSURL指向的内容。而NSURLConnection API只能通过构造一个NSURLRequest对象或其子类来发出URL请求来请求下载或上传URL数据。 使用一个NSURLRequest请求对象封装一个URL请求，例如HTTP协议方法，除了可以封装一些协议特定的属性外，还可以规定任意本地cached数据的使用策略。<br>         对于NSURLRequest请求对象的应答包括两部分：描述内容的元数据metadata及内容数据本身。两种API对于使用NSURLRequest请求接收的元数据metadata都由NSURLResponse类来封装，其中包含MIME类型、内容长度、编码及提供应答的URL等内容。NSURLResponse协议特定的子类还能提供额外的元数据，如NSHTTPURLResponse提供协议头和WEB服务器返回的状态码<br> 等信息。<br>         NSURLSession API的使用：</p>\n<pre><code>NSURLSession类支持三种会话类型（默认会话类型、临时会话、后台会话）以及三种类型的任务（数据任务、下载任务、上传任务）。\n数据任务使用NSData 对象来发送和接收内存数据，不存储数据到一个文件，因此不支持后台会话。\n下载任务以一个文件的形式引出数据，并支持在应用没有运行时的后台下载。\n上传任务用来上传数据（文件），也能够支持应用没有运行时的后台上传。\n 默认会话和后台会话的区别是后台会话使用一个分离的进程处理所有的数据传输任务，并带有一些限制：后台会话必须使用特定应用代理来提供事件提交，并仅支持HTTP和HTTPS 协议，不支持其它定制协议，并仅支持上传和下载任务，不支持数据任务。\n临时会话不存储任何数据到磁盘，所有接收的内容都保存到与会话关联的RAM中，当会话无效时，RAM中接收的内容自动被清除。\n</code></pre><p>   NSURLSession API的使用步骤：<br>   1 、创建一个NSURLSessionConfiguration配置对象</p>\n<blockquote>\n<p>NSURLSessionConfiguration配置对象提供广泛的配置选项，包括：<br>1）、特定于单个会话的私有数据存储，包括caches, cookies, credentials, 和protocols；<br>2）、与一个特定请求或一个会话关联的Authentication；<br>3）、与一个主机的最大连接数；<br>4）、与一个资源关联的超时；<br>5）、最小和最大TLS版本支持；<br>6）、定制的代理词典；<br>7）、cookie策略的控制；<br>8）、HTTP pipelining行为的控制<br>2、根据配置创建相应的NSURLSession；<br>       如下代码片段展示了根据不同的配置对象创建不同类型的NSURLSession会话对象。</p>\n</blockquote>\n<p><strong>[objc]</strong> <a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a><a href=\"https://code.csdn.net/snippets/498585\" title=\"在CODE上查看代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/498585/fork\" title=\"派生到我的代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. /<em> Create a session for each configurations. </em>/  </p>\n<ol>\n<li>self.defaultSession = [NSURLSession sessionWithConfiguration: defaultConfigObject delegate: self delegateQueue: [NSOperationQueue mainQueue]];  </li>\n<li>self.backgroundSession = [NSURLSession sessionWithConfiguration: backgroundConfigObject delegate: self delegateQueue: [NSOperationQueue mainQueue]];  </li>\n<li>self.ephemeralSession = [NSURLSession sessionWithConfiguration: ephemeralConfigObject delegate: self delegateQueue: [NSOperationQueue mainQueue]];  </li>\n</ol>\n<pre><code>  NSURLSession API通过代理来实现异步URL内容存取，代理可以是系统提供的代理，还可以是应用提供的特定代理对象。任务对象当从服务器接收到数据或传输完成时调用这些代理对象的方法。\n在创建会话指定相应的代理对象。\n</code></pre><p>3、为会话添加任务；<br>使用如下方法来添加数据任务到一个会话。</p>\n<blockquote>\n<p>dataTaskWithURL(<em>:)<br>dataTaskWithURL(</em>:completionHandler:)<br>dataTaskWithRequest(<em>:)<br>dataTaskWithRequest(</em>:completionHandler:) </p>\n</blockquote>\n<p>使用如下方法来添加下载任务到一个会话。</p>\n<blockquote>\n<p>downloadTaskWithURL(<em>:)<br>downloadTaskWithURL(</em>:completionHandler:)<br>downloadTaskWithRequest(<em>:)<br>downloadTaskWithRequest(</em>:completionHandler:)<br>downloadTaskWithResumeData(<em>:)<br>downloadTaskWithResumeData(</em>:completionHandler:) </p>\n</blockquote>\n<p>使用如下方法来添加上传任务到一个会话</p>\n<blockquote>\n<p>uploadTaskWithRequest(<em>:fromData:)<br>uploadTaskWithRequest(</em>:fromData:completionHandler:)<br>uploadTaskWithRequest(<em>:fromFile:)<br>uploadTaskWithRequest(</em>:fromFile:completionHandler:)<br>uploadTaskWithStreamedRequest(_:)<br>         如下是数据任务创建代码片段：<br><strong>[objc]</strong> <a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a><a href=\"https://code.csdn.net/snippets/498585\" title=\"在CODE上查看代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/498585/fork\" title=\"派生到我的代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. NSURL *url = [NSURL URLWithString: @”<a href=\"http://www.example.com/\" target=\"_blank\" rel=\"external\">http://www.example.com/</a>“];  </p>\n<ol>\n<li></li>\n<li>NSURLSessionDataTask *dataTask = [self.defaultSession dataTaskWithURL: url];  </li>\n<li></li>\n<li>[dataTask resume];  </li>\n</ol>\n</blockquote>\n<pre><code>下面是下载任务创建代码片段：         \n</code></pre><p><strong>[objc]</strong> <a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a><a href=\"https://code.csdn.net/snippets/498585\" title=\"在CODE上查看代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/498585/fork\" title=\"派生到我的代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. NSURL *url = [NSURL URLWithString: @”<a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Reference/\" target=\"_blank\" rel=\"external\">https://developer.apple.com/library/ios/documentation/Cocoa/Reference/</a>“  </p>\n<ol>\n<li></li>\n<li>“Foundation/ObjC_classic/FoundationObjC.pdf”];  </li>\n<li></li>\n<li>NSURLSessionDownloadTask *downloadTask = [self.backgroundSession downloadTaskWithURL: url];  </li>\n<li></li>\n<li>[downloadTask resume];  </li>\n</ol>\n<p>4、使用代理方法接收数据及状态信息</p>\n<blockquote>\n<p>会话的数据任务在使用应用特定代理接收数据时必须实现如下两个代理方法：<br>URLSession:dataTask:didReceiveData:<br>一次一片的提供请求的数据给会话任务。<br>URLSession:task:didCompleteWithError:<br>指示请求数据已经全部接收。</p>\n<p>会话的下载任务在下载文件时应该实现如下代理方法：<br>URLSession:downloadTask:didFinishDownloadingToURL:<br>下载内容存储到一个URL指定的一个临时文件，在该方法返回之前，必须把临时文件的内容移到一个永久位置，而临时文件被删除。<br>URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:<br>为应用提供关于当前下载进度的状态信息<br>URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:<br>告诉应用已经从从先前的失败下载中恢复。<br>URLSession:task:didCompleteWithError:<br>告诉应用下载已经失败。</p>\n<p>下载失败恢复处理：<br>在应用使用cancelByProducingResumeData: 方法取消下载任务时，可以使用downloadTaskWithResumeData: 或 downloadTaskWithResumeData:completionHandler:方法重新创建一个新下载任务并传送cancelByProducingResumeData:产生的恢复数据从而接着继续下载。<br>在传输失败时，如果任务可恢复，则调用URLSession:task:didCompleteWithError: 方法。在传送给URLSession:task:didCompleteWithError: 方法的参数NSError中的 userInfo 词典中包含键值为NSURLSessionDownloadTaskResumeData的恢复数据，因此可以使用downloadTaskWithResumeData:<br> 或 downloadTaskWithResumeData:completionHandler:方法重新创建一个新下载任务来接着恢复数据继续下载。</p>\n<p>系统代理仅能支持基本的URL资源存取任务，不支持认证和后台下载，并且还必须提供一个completion handler block来把返回的URL数据提交到应用。如下是一个使用系统代理的代码例子：<br><strong>[objc]</strong> <a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a><a href=\"https://code.csdn.net/snippets/498585\" title=\"在CODE上查看代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/498585/fork\" title=\"派生到我的代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. NSURLSession *delegateFreeSession = [NSURLSession sessionWithConfiguration: defaultConfigObject delegate: nil delegateQueue: [NSOperationQueue mainQueue]];  </p>\n<ol>\n<li></li>\n<li>[delegateFreeSession dataTaskWithURL: [NSURL URLWithString: @”<a href=\"http://www.example.com/\" target=\"_blank\" rel=\"external\">http://www.example.com/</a>“]  </li>\n<li></li>\n<li>completionHandler:^(NSData <em>data, NSURLResponse </em>response,  </li>\n<li></li>\n<li>NSError *error) {  </li>\n<li></li>\n<li>NSLog(@”Got response %@ with error %@.\\n”, response, error);  </li>\n<li></li>\n<li>NSLog(@”DATA:\\n%@\\nEND DATA\\n”,  </li>\n<li></li>\n<li>[[NSString alloc] initWithData: data  </li>\n<li></li>\n<li>encoding: NSUTF8StringEncoding]);  </li>\n<li></li>\n<li>}] resume];  </li>\n</ol>\n</blockquote>\n<pre><code>会话的上传任务的任务创建和相关代理方法：\n会话的上传任务使用HTTP  POST方法来上传数据。可以以一个NSData对象、一个文件或使用一个流为HTTP POST请求的body提供内容。\n在以NSData对象提供上传数据时，应用调用uploadTaskWithRequest:fromData: 或uploadTaskWithRequest:fromData:completionHandler: 方法来创建上传任务。\n</code></pre><blockquote>\n<p>在以文件形式提供上传数据时，应用调用uploadTaskWithRequest:fromFile: 或 uploadTaskWithRequest:fromFile:completionHandler:方法来创建上传任务<br>在以流方式提供上传数据时，应用调用uploadTaskWithStreamedRequest:方法来创建上传任务。<br>应用特定代理可以通过实现URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:方法来获得上传进度信息。</p>\n</blockquote>\n","excerpt":"","more":"<p>转自：  <a href=\"http://blog.csdn.net/goohong/article/details/40505291\">http://blog.csdn.net/goohong/article/details/40505291</a><br>IOS 可以采用三类api 接口进行网络编程，根据抽象层次从低到高分别为socket方式、stream方式、url 方式。<br>一 、socket 方式<br>       IOS 提供的socket 方式的网络编程接口为CFSocket。CFSocket是BSD sockets的抽象和封装，CFSocket提供BSD sockets几乎所有的功能，并与run loop集成，用来实现多线程网络编程和网络事件监听。基于 CFSocket可以实现各种类型的 socket编程，包括stream-based 的sockets(如tcp)和packet-based 的sockets(如udp)。需要注意的是在iOS中CFSocket接口在需要时不自动激活设备的<br> cellular modem或on-demand VPN。<br>      CFSocket包括以下编程接口，包括Socket的 创建、配置，以及根据创建和配置好的Socket 进行 远程通讯等接口。<br>1  Socket的 创建</p>\n<blockquote>\n<p>1 .1、CFSocketCreate<br>创建一个特定协议和类型的 CFSocket对象<br>1.2、CFSocketCreateWithSocketSignature<br>该接口根据一个包含通讯协议和地址的CFSocketSignature结构来创建一个CFSocket对象</p>\n<p>1.3、 CFSocketCreateConnectedToSocketSignature<br>该接口在创建一个CFSocket对象的同时还与一个远端主机进行连接。</p>\n<p>1.4、CFSocketCreateWithNative<br>该接口通过封装一个存在的 BSD socket来创建一个CFSocket对象。</p>\n</blockquote>\n<p>2   Socket的配置</p>\n<blockquote>\n<p>2.1   CFSocketCopyAddress<br>功能： 返回一个 CFSocket对象的本地地址。<br>语法：<br>SWIFT<br>func CFSocketCopyAddress(<em> s: CFSocket!) -&gt; CFData!<br>2.2、CFSocketCopyPeerAddress<br>功能：返回与一个 CFSocket对象连接的远端地址。<br>语法：<br>SWIFT<br>func CFSocketCopyPeerAddress(</em> s: CFSocket!) -&gt; CFData!<br>2.3  CFSocketDisableCallBacks<br>功能：临时取消一个CFSocket对象创建时指定的某种类型的事件回调。<br>语法：<br>SWIFT<br>func CFSocketDisableCallBacks(<em> s: CFSocket!,\n                            </em> callBackTypes: CFOptionFlags)<br>2.4   CFSocketEnableCallBacks<br>功能：重新允许先前CFSocketDisableCallBacks函数取消的某种类型的事件回调。<br>语法：<br>SWIFT<br>func CFSocketEnableCallBacks(<em> s: CFSocket!,\n                           </em> callBackTypes: CFOptionFlags)<br>2.5 CFSocketGetContext<br>功能：返回一个CFSocket对象的上下文信息。<br>语法：<br>SWIFT<br>func CFSocketGetContext(<em> s: CFSocket!,\n                      </em> context: UnsafeMutablePointer<CFSocketContext>)<br>2.6 CFSocketGetNative<br>返回与一个CFSocket对象相关的本地 BSD socket。<br>语法：<br>SWIFT<br>func CFSocketGetNative(<em> s: CFSocket!) -&gt; CFSocketNativeHandle<br>2.7   CFSocketGetSocketFlags<br>功能：返回控制一个CFSocket对象的确定行为的 标志。<br>语法：<br>SWIFT<br>func CFSocketGetSocketFlags(</em> s: CFSocket!) -&gt; CFOptionFlags</p>\n<p>2.8 CFSocketSetSocketFlags<br>功能：设置控制一个CFSocket对象的确定行为的 标志。<br>语法：<br>SWIFT<br>func CFSocketSetSocketFlags(<em> s: CFSocket!,\n                          </em> flags: CFOptionFlags)<br>2.9 CFSocketSetAddress<br>语法：<br>SWIFT<br>func CFSocketSetAddress(<em> s: CFSocket!,\n                      </em> address: CFData!) -&gt; CFSocketError<br>功能：为一个CFSocket对象绑定一个本地地址并在本地socket支持的情况下对socket进行配置使其处于监听状态。该函数对应本地socket的 bind以及listen功能。一旦CFSocket对象绑定地址，依赖于socket的协议，其它进程和主机能连接到该CFSocket对象。</p>\n</blockquote>\n<p>3、Sockets的使用</p>\n<blockquote>\n<p>3.1 CFSocketConnectToAddress<br>功能：打开与一个远程socket的一个连接。<br>语法：<br>SWIFT<br>func CFSocketConnectToAddress(<em> s: CFSocket!,\n                            </em> address: CFData!,<br>                            <em> timeout: CFTimeInterval) -&gt; CFSocketError<br>3.2 CFSocketCreateRunLoopSource<br>语法：<br>SWIFT<br>func CFSocketCreateRunLoopSource(</em> allocator: CFAllocator!,<br>                               <em> s: CFSocket!,\n                               </em> order: CFIndex) -&gt; CFRunLoopSource!<br>功能：为一个CFSocket对象创建一个CFRunLoopSource对象。该创建的 CFRunLoopSource对象不自动添加到一个run loop。为了增加该run loop source到某个run loop，需要调用CFRunLoop对象 的CFRunLoopAddSource函数来为该CFRunLoop对象添加run loop source。<br>3.3 CFSocketGetTypeID<br>功能：返回CFSocket对象的 opaque类型对应的类型标示符。<br>语法：<br>SWIFT<br>func CFSocketGetTypeID() -&gt; CFTypeID<br>3.4  CFSocketInvalidate<br>功能：使一个CFSocket对象无效，使其停止接收和发送任何消息。<br>语法：<br>SWIFT<br>func CFSocketInvalidate(<em> s: CFSocket!)<br>3.5 CFSocketIsValid<br>功能：返回一个指示一个CFSocket对象是否有效及是否能够发送和接收消息的布尔值。<br>语法：<br>SWIFT<br>func CFSocketIsValid(</em> s: CFSocket!) -&gt; Boolean<br>3.6 CFSocketSendData<br>功能：该函数用来通过一个CFSocket对象发送数据。<br>语法：<br>SWIFT<br>func CFSocketSendData(<em> s: CFSocket!,\n                    </em> address: CFData!,<br>                    <em> data: CFData!,\n                    </em> timeout: CFTimeInterval) -&gt; CFSocketError</p>\n</blockquote>\n<p>二、stream编程模式<br>       stream编程模式提供了与 unix 的文件操作类似的模式。首先创建和设置流，接着打开流，然后读写流，在流存在时还可以通过查询流的相关属性来读取流的相关信息，在流使用完毕后关闭流。<br>       iOS 为stream编程模式提供的api编程接口包括两大类，一类是Core Foundation框架层用C语言实现的CFStream  API（包括CFStream、 CFReadStream 、CFWriteStream等）,一类是基于其上的在Foundation框架层用Objective-C语言实现的NSStream API（包括NSStream、NSInputStream NSOutputStream等）,两者提供相似的接口和行为，其中某些对象是toll-free<br> bridged类型的，如CFStream 与NSStream，CFReadStream与NSInputStream，CFWriteStream与NSOutputStream之间，因此可以混合使用。<br>       开发人员可以根据自己的语言偏好选择使用。<br>       CFStream API的主要接口：<br>1、CFStream 创建接口</p>\n<blockquote>\n<p>1.1  CFStreamCreatePairWithPeerSocketSignature<br>          功能：创建一对到一个socket的可读和可写流。<br>1.2 CFStreamCreatePairWithSocketToHost<br>功能：创建连接到一个特定主机的特定端口的一对可读写流。<br>1.3 CFStreamCreatePairWithSocket<br>功能：创建一对连接到一个socket的可读写流<br>1.4 CFStreamCreateBoundPair<br>功能：创建一对读写流。<br>其它可读写流创建接口：<br> 1.5 CFReadStreamCreateForHTTPRequest<br>   功能：为一个CFHTTP请求创建一个可读流。<br>1.6 CFReadStreamCreateForStreamedHTTPRequest<br>功能：为一个HTTP请求的body保持在内存的CFHTTP请求创建一个可读流。<br>1.7  CFReadStreamCreateWithFTPURL<br>功能：创建一个FTP可读流<br>1.8  CFWriteStreamCreateWithFTPURL<br>功能：创建一个FTP可读流</p>\n<ol>\n<li>CFReadStream接口<br>2.1 流的打开和关闭<br>   CFReadStreamOpen<pre><code>CFReadStreamClose\n</code></pre>2.2  读取数据<br>   CFReadStreamRead<br>2.3.  调度一个可读流<br>CFReadStreamScheduleWithRunLoop(<em>:</em>:_:) <pre><code>CFReadStreamUnscheduleFromRunLoop(_:_:_:) \n</code></pre>2.4 检查可读流的属性<br>CFReadStreamCopyProperty(<em>:</em>:)<br>CFReadStreamGetBuffer(<em>:</em>:<em>:)<br>CFReadStreamCopyError(</em>:)<br>CFReadStreamGetError(<em>:)<br>CFReadStreamGetStatus(</em>:)<br>CFReadStreamHasBytesAvailable(<em>:)<br>2.5 设置可读流的属性<br>CFReadStreamSetClient(</em>:<em>:</em>:<em>:)<br>CFReadStreamSetProperty(</em>:<em>:</em>:)<br>2.6 得到 CFReadStream的 Type ID<pre><code>CFReadStreamGetTypeID()\n</code></pre></li>\n</ol>\n</blockquote>\n<p>3.CFWriteStream 相关接口</p>\n<blockquote>\n<pre><code>3.1 CFWriteStreamClose(_:) \n3.2 CFWriteStreamOpen(_:) \n3.3 CFWriteStreamWrite(_:_:_:)\n   3.4 CFWriteStreamScheduleWithRunLoop(_:_:_:)\n</code></pre><p>  3.5 CFWriteStreamUnscheduleFromRunLoop(<em>:</em>:<em>:)<br>        3.6 CFWriteStreamCanAcceptBytes(</em>:)<br>      3.7 CFWriteStreamCopyProperty(<em>:</em>:)<br>      3.8 CFWriteStreamCopyError(<em>:)<br>      3.9 CFWriteStreamGetError(</em>:)<br>      3.10 CFWriteStreamGetStatus(<em>:)<br>         3.11 CFWriteStreamSetClient(</em>:<em>:</em>:<em>:)<br>  3.12 CFWriteStreamSetProperty(</em>:<em>:</em>:)<br>      3.13 CFWriteStreamGetTypeID()<br>CFStream API的使用步骤：<br>1） 利用流创建接口创建相关流；<br>2）、调用CFReadStreamSetClient （可读流）或CFWriteStreamSetClient （可写流）来登记要接收的流相关的事件；<br>3）、调用CFReadStreamScheduleWithRunLoop（可读流）或CFWriteStreamScheduleWithRunLoop（可写流）来使在流在一个run loop上进行调度以便接收相关事件；<br>4）、调用CFReadStreamOpen 或CFWriteStreamOpen 来打开已创建的流；<br>5）、在读取流的创建时登记的回调中，在接收到kCFStreamEventHasBytesAvailable事件时来读取数据， 在可写流已登记的回调中，在接收到kCFStreamEventCanAcceptBytes 事件时开始发送数据或请求；<br>6） 数据传输完成，关闭和释放打开和创建的相关流；<br>2、NSStream   API的使用&gt;  在ios 中由于NSStream类不支持 与一个远程主机连接，而CFStream支持，因此为了使用 NSStream，你需要使用流创建函数CFStreamCreatePairWithSocketToHost或CFStreamCreatePairWithSocketToCFHost来打开一个与远程主机连接的socket并分配一对CFStream 对象（CFReadStream和CFWriteStream），并cast这些对象到NSStream<br> 对象（对应NSInputStream 和 NSOutputStream）。从而可以使用NSStream类的相关接口进行相关网络编程。如设置接收网络事件的代理对象，调度到当前的run loop，然后打开它们进行相应处理。<br>代码片段如下：<br><strong>[objc]</strong> <a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"copy\">copy</a><a href=\"https://code.csdn.net/snippets/498585\" title=\"在CODE上查看代码片\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/498585/fork\" title=\"派生到我的代码片\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. {  </p>\n<ol>\n<li></li>\n<li>NSURL *website = [NSURL URLWithString:urlStr];  </li>\n<li></li>\n<li>if (!website) {  </li>\n<li></li>\n<li>NSLog(@”%@ is not a valid URL”);  </li>\n<li></li>\n<li>return;  </li>\n<li></li>\n<li>}  </li>\n<li></li>\n<li>CFReadStreamRef readStream;  </li>\n<li></li>\n<li>CFWriteStreamRef writeStream;  </li>\n<li></li>\n<li>CFStreamCreatePairWithSocketToHost(NULL, (CFStringRef)[website host], 80, &amp;readStream, &amp;writeStream);  </li>\n<li></li>\n<li>NSInputStream <em>inputStream = (__bridge_transfer NSInputStream </em>)readStream;  </li>\n<li></li>\n<li>NSOutputStream <em>outputStream = (__bridge_transfer NSOutputStream </em>)writeStream;  </li>\n<li></li>\n<li>[inputStream setDelegate:self];  </li>\n<li></li>\n<li>[outputStream setDelegate:self];  </li>\n<li></li>\n<li>[inputStream scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];  </li>\n<li></li>\n<li>[outputStream scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];  </li>\n<li></li>\n<li>[inputStream open];  </li>\n<li></li>\n<li>[outputStream open];  </li>\n<li></li>\n<li></li>\n<li>/* Store a reference to the input and output streams so that </li>\n<li></li>\n<li>they don’t go away…. */  </li>\n<li></li>\n<li>…  </li>\n<li></li>\n<li>}  </li>\n</ol>\n</blockquote>\n<pre><code>在NSStream对象打开后，当接收到相关的stream-event网络消息，其代理对象中的handleEvent: 函数被调用，从而进行流相关的网络消息处理，  如发送相关协议的请求或接收应答等。以下为handleEvent: 函数进行事件处理的代码片段：\n</code></pre><p><strong>[objc]</strong> <a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"copy\">copy</a><a href=\"https://code.csdn.net/snippets/498585\" title=\"在CODE上查看代码片\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/498585/fork\" title=\"派生到我的代码片\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. - (void)stream:(NSStream *)stream handleEvent:(NSStreamEvent)eventCode {  </p>\n<ol>\n<li></li>\n<li>NSLog(@”stream:handleEvent: is invoked…”);  </li>\n<li></li>\n<li></li>\n<li></li>\n<li>switch(eventCode) {  </li>\n<li></li>\n<li>case NSStreamEventHasSpaceAvailable:  </li>\n<li></li>\n<li>{  </li>\n<li></li>\n<li>if (stream == oStream) {  </li>\n<li></li>\n<li>NSString * str = [NSString stringWithFormat:  </li>\n<li></li>\n<li>@”GET / HTTP/1.0\\r\\n\\r\\n”];  </li>\n<li></li>\n<li>const uint8_t * rawstring =  </li>\n<li></li>\n<li>(const uint8_t *)[str UTF8String];  </li>\n<li></li>\n<li>[oStream write:rawstring maxLength:strlen(rawstring)];  </li>\n<li></li>\n<li>[oStream close];  </li>\n<li></li>\n<li>}  </li>\n<li></li>\n<li>break;  </li>\n<li></li>\n<li>}  </li>\n<li></li>\n<li>// continued …  </li>\n<li></li>\n<li>}  </li>\n<li></li>\n<li>}  </li>\n</ol>\n<p>三、url 编程模式<br>         url 编程模式通过URL 的方式来实现网络编程，任何要存取的网络资源（包括局域网和广域网）都可以用一个URL来表示和存取，并支持设备间的资源共享。url 编程模式系统提供http, https, file, ftp, data等五种协议支持，并允许用户自己开发和登记相关类来支持另外的应用层网络协议，进行协议的扩展。<br>        url 编程模式在IOS系统可以使用两种编程接口：NSURLSession 和NSURLConnection。<br>        对于iOS 7 以后的最新系统推荐使用NSURLSession API，对于老版本由于不支持NSURLSession，因此必须使用NSURLConnection API。<br>NSURLSession编程模式是对相关的连接请求通过一个会话来完成，应用通过创建一系列sessions来实现网络通讯，每一个session协调一组相关数据的传输任务。在每一个session内，应用添加一系列任务，每一个任务表现一个特定URL 请求。<br>        NSURLSession相比NSURLConnection的优点是支持在应用挂起、停止或crashed时能够在后台继续下载数据，即支持任务的取消、重启（恢复）、挂起，以及支持从已挂起、取消或失败的下载中重新恢复下载的能力。<br>         对于简单的请求，还可以直接通过一个简单的NSURL对象来发出请求，并使用一个NSData内存对象或者一个文件的方式来引出NSURL指向的内容。而NSURLConnection API只能通过构造一个NSURLRequest对象或其子类来发出URL请求来请求下载或上传URL数据。 使用一个NSURLRequest请求对象封装一个URL请求，例如HTTP协议方法，除了可以封装一些协议特定的属性外，还可以规定任意本地cached数据的使用策略。<br>         对于NSURLRequest请求对象的应答包括两部分：描述内容的元数据metadata及内容数据本身。两种API对于使用NSURLRequest请求接收的元数据metadata都由NSURLResponse类来封装，其中包含MIME类型、内容长度、编码及提供应答的URL等内容。NSURLResponse协议特定的子类还能提供额外的元数据，如NSHTTPURLResponse提供协议头和WEB服务器返回的状态码<br> 等信息。<br>         NSURLSession API的使用：</p>\n<pre><code>NSURLSession类支持三种会话类型（默认会话类型、临时会话、后台会话）以及三种类型的任务（数据任务、下载任务、上传任务）。\n数据任务使用NSData 对象来发送和接收内存数据，不存储数据到一个文件，因此不支持后台会话。\n下载任务以一个文件的形式引出数据，并支持在应用没有运行时的后台下载。\n上传任务用来上传数据（文件），也能够支持应用没有运行时的后台上传。\n 默认会话和后台会话的区别是后台会话使用一个分离的进程处理所有的数据传输任务，并带有一些限制：后台会话必须使用特定应用代理来提供事件提交，并仅支持HTTP和HTTPS 协议，不支持其它定制协议，并仅支持上传和下载任务，不支持数据任务。\n临时会话不存储任何数据到磁盘，所有接收的内容都保存到与会话关联的RAM中，当会话无效时，RAM中接收的内容自动被清除。\n</code></pre><p>   NSURLSession API的使用步骤：<br>   1 、创建一个NSURLSessionConfiguration配置对象</p>\n<blockquote>\n<p>NSURLSessionConfiguration配置对象提供广泛的配置选项，包括：<br>1）、特定于单个会话的私有数据存储，包括caches, cookies, credentials, 和protocols；<br>2）、与一个特定请求或一个会话关联的Authentication；<br>3）、与一个主机的最大连接数；<br>4）、与一个资源关联的超时；<br>5）、最小和最大TLS版本支持；<br>6）、定制的代理词典；<br>7）、cookie策略的控制；<br>8）、HTTP pipelining行为的控制<br>2、根据配置创建相应的NSURLSession；<br>       如下代码片段展示了根据不同的配置对象创建不同类型的NSURLSession会话对象。</p>\n</blockquote>\n<p><strong>[objc]</strong> <a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"copy\">copy</a><a href=\"https://code.csdn.net/snippets/498585\" title=\"在CODE上查看代码片\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/498585/fork\" title=\"派生到我的代码片\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. /<em> Create a session for each configurations. </em>/  </p>\n<ol>\n<li>self.defaultSession = [NSURLSession sessionWithConfiguration: defaultConfigObject delegate: self delegateQueue: [NSOperationQueue mainQueue]];  </li>\n<li>self.backgroundSession = [NSURLSession sessionWithConfiguration: backgroundConfigObject delegate: self delegateQueue: [NSOperationQueue mainQueue]];  </li>\n<li>self.ephemeralSession = [NSURLSession sessionWithConfiguration: ephemeralConfigObject delegate: self delegateQueue: [NSOperationQueue mainQueue]];  </li>\n</ol>\n<pre><code>  NSURLSession API通过代理来实现异步URL内容存取，代理可以是系统提供的代理，还可以是应用提供的特定代理对象。任务对象当从服务器接收到数据或传输完成时调用这些代理对象的方法。\n在创建会话指定相应的代理对象。\n</code></pre><p>3、为会话添加任务；<br>使用如下方法来添加数据任务到一个会话。</p>\n<blockquote>\n<p>dataTaskWithURL(<em>:)<br>dataTaskWithURL(</em>:completionHandler:)<br>dataTaskWithRequest(<em>:)<br>dataTaskWithRequest(</em>:completionHandler:) </p>\n</blockquote>\n<p>使用如下方法来添加下载任务到一个会话。</p>\n<blockquote>\n<p>downloadTaskWithURL(<em>:)<br>downloadTaskWithURL(</em>:completionHandler:)<br>downloadTaskWithRequest(<em>:)<br>downloadTaskWithRequest(</em>:completionHandler:)<br>downloadTaskWithResumeData(<em>:)<br>downloadTaskWithResumeData(</em>:completionHandler:) </p>\n</blockquote>\n<p>使用如下方法来添加上传任务到一个会话</p>\n<blockquote>\n<p>uploadTaskWithRequest(<em>:fromData:)<br>uploadTaskWithRequest(</em>:fromData:completionHandler:)<br>uploadTaskWithRequest(<em>:fromFile:)<br>uploadTaskWithRequest(</em>:fromFile:completionHandler:)<br>uploadTaskWithStreamedRequest(_:)<br>         如下是数据任务创建代码片段：<br><strong>[objc]</strong> <a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"copy\">copy</a><a href=\"https://code.csdn.net/snippets/498585\" title=\"在CODE上查看代码片\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/498585/fork\" title=\"派生到我的代码片\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. NSURL *url = [NSURL URLWithString: @”<a href=\"http://www.example.com/\">http://www.example.com/</a>“];  </p>\n<ol>\n<li></li>\n<li>NSURLSessionDataTask *dataTask = [self.defaultSession dataTaskWithURL: url];  </li>\n<li></li>\n<li>[dataTask resume];  </li>\n</ol>\n</blockquote>\n<pre><code>下面是下载任务创建代码片段：         \n</code></pre><p><strong>[objc]</strong> <a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"copy\">copy</a><a href=\"https://code.csdn.net/snippets/498585\" title=\"在CODE上查看代码片\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/498585/fork\" title=\"派生到我的代码片\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. NSURL *url = [NSURL URLWithString: @”<a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Reference/\">https://developer.apple.com/library/ios/documentation/Cocoa/Reference/</a>“  </p>\n<ol>\n<li></li>\n<li>“Foundation/ObjC_classic/FoundationObjC.pdf”];  </li>\n<li></li>\n<li>NSURLSessionDownloadTask *downloadTask = [self.backgroundSession downloadTaskWithURL: url];  </li>\n<li></li>\n<li>[downloadTask resume];  </li>\n</ol>\n<p>4、使用代理方法接收数据及状态信息</p>\n<blockquote>\n<p>会话的数据任务在使用应用特定代理接收数据时必须实现如下两个代理方法：<br>URLSession:dataTask:didReceiveData:<br>一次一片的提供请求的数据给会话任务。<br>URLSession:task:didCompleteWithError:<br>指示请求数据已经全部接收。</p>\n<p>会话的下载任务在下载文件时应该实现如下代理方法：<br>URLSession:downloadTask:didFinishDownloadingToURL:<br>下载内容存储到一个URL指定的一个临时文件，在该方法返回之前，必须把临时文件的内容移到一个永久位置，而临时文件被删除。<br>URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:<br>为应用提供关于当前下载进度的状态信息<br>URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:<br>告诉应用已经从从先前的失败下载中恢复。<br>URLSession:task:didCompleteWithError:<br>告诉应用下载已经失败。</p>\n<p>下载失败恢复处理：<br>在应用使用cancelByProducingResumeData: 方法取消下载任务时，可以使用downloadTaskWithResumeData: 或 downloadTaskWithResumeData:completionHandler:方法重新创建一个新下载任务并传送cancelByProducingResumeData:产生的恢复数据从而接着继续下载。<br>在传输失败时，如果任务可恢复，则调用URLSession:task:didCompleteWithError: 方法。在传送给URLSession:task:didCompleteWithError: 方法的参数NSError中的 userInfo 词典中包含键值为NSURLSessionDownloadTaskResumeData的恢复数据，因此可以使用downloadTaskWithResumeData:<br> 或 downloadTaskWithResumeData:completionHandler:方法重新创建一个新下载任务来接着恢复数据继续下载。</p>\n<p>系统代理仅能支持基本的URL资源存取任务，不支持认证和后台下载，并且还必须提供一个completion handler block来把返回的URL数据提交到应用。如下是一个使用系统代理的代码例子：<br><strong>[objc]</strong> <a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/goohong/article/details/40505291#\" title=\"copy\">copy</a><a href=\"https://code.csdn.net/snippets/498585\" title=\"在CODE上查看代码片\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/498585/fork\" title=\"派生到我的代码片\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. NSURLSession *delegateFreeSession = [NSURLSession sessionWithConfiguration: defaultConfigObject delegate: nil delegateQueue: [NSOperationQueue mainQueue]];  </p>\n<ol>\n<li></li>\n<li>[delegateFreeSession dataTaskWithURL: [NSURL URLWithString: @”<a href=\"http://www.example.com/\">http://www.example.com/</a>“]  </li>\n<li></li>\n<li>completionHandler:^(NSData <em>data, NSURLResponse </em>response,  </li>\n<li></li>\n<li>NSError *error) {  </li>\n<li></li>\n<li>NSLog(@”Got response %@ with error %@.\\n”, response, error);  </li>\n<li></li>\n<li>NSLog(@”DATA:\\n%@\\nEND DATA\\n”,  </li>\n<li></li>\n<li>[[NSString alloc] initWithData: data  </li>\n<li></li>\n<li>encoding: NSUTF8StringEncoding]);  </li>\n<li></li>\n<li>}] resume];  </li>\n</ol>\n</blockquote>\n<pre><code>会话的上传任务的任务创建和相关代理方法：\n会话的上传任务使用HTTP  POST方法来上传数据。可以以一个NSData对象、一个文件或使用一个流为HTTP POST请求的body提供内容。\n在以NSData对象提供上传数据时，应用调用uploadTaskWithRequest:fromData: 或uploadTaskWithRequest:fromData:completionHandler: 方法来创建上传任务。\n</code></pre><blockquote>\n<p>在以文件形式提供上传数据时，应用调用uploadTaskWithRequest:fromFile: 或 uploadTaskWithRequest:fromFile:completionHandler:方法来创建上传任务<br>在以流方式提供上传数据时，应用调用uploadTaskWithStreamedRequest:方法来创建上传任务。<br>应用特定代理可以通过实现URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:方法来获得上传进度信息。</p>\n</blockquote>"},{"title":"iOS-使用AudioServices相关接口的连续震动","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n转自：http://www.jianshu.com/p/dded314dd920\n话不多说，先上代码！！！喜欢就点赞\n\n主要功能函数\n/*!\n    @function       AudioServicesAddSystemSoundCompletion\n    @abstract       Call the provided Completion Routine when provided SystemSoundID\n                    finishes playing.\n    @discussion     Once set, the System Sound server will send a message to the System Sound client\n                    indicating which SystemSoundID has finished playing.\n    @param          inSystemSoundID\n                        systemSoundID 自定义的sound（1007系统默认提示音）或者kSystemSoundID_Vibrate（震动）\n    @param          inRunLoop\n                       没有研究 一般写NULL 有兴趣可以自己研究一下跟大家共享\n    @param          inRunLoopMode\n                        同上个属性\n    @param          inCompletionRoutine\n                        这个是指某次震动播放完成后的回调 注意是C的函数 一般我们会在回调中写播放震动的函数 来实现连续震动\n    @param          inClientData\n                        没有研究啦！！！NULL就行啦\n*/\nextern OSStatus \nAudioServicesAddSystemSoundCompletion(  SystemSoundID               inSystemSoundID,\n                                     CFRunLoopRef                         inRunLoop,\n                                     CFStringRef                          inRunLoopMode,\n                                     AudioServicesSystemSoundCompletionProc  inCompletionRoutine,\n                                     void*                                inClientData)       \n首先实现上述函数中的回调函数（注意是C）\nvoid soundCompleteCallback(SystemSoundID sound,void * clientData) {\n    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);  //震动\n    AudioServicesPlaySystemSound(sound);  // 播放系统声音 这里的sound是我自定义的，不要copy哈，没有的\n}\n实现播放声音或震动的代码\n    SystemSoundID sound;\n    NSString *path = [[NSBundle mainBundle] pathForResource:soundName ofType:nil];\n    AudioServicesCreateSystemSoundID((__bridge CFURLRef)[NSURL fileURLWithPath:path], &_sound);\n\n    AudioServicesAddSystemSoundCompletion(_soundID, NULL, NULL, soundCompleteCallback, NULL);\n    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);\n    AudioServicesPlaySystemSound(_sound);\n至此，就可以顺利的播放声音和震动了，而且是连续的哦！！！\n别忘了！ 怎么让他停下来\n为了方便 我就写了而一个OC的方法来做了\n-(void)stopAlertSoundWithSoundID:(SystemSoundID)sound {\n    AudioServicesDisposeSystemSoundID(kSystemSoundID_Vibrate);\n    AudioServicesDisposeSystemSoundID(sound);\n    AudioServicesRemoveSystemSoundCompletion(sound);\n}\n这里要详细解说一下需要注意的事项：\nAudioServicesAddSystemSoundCompletion(kSystemSoundID_Vibrate, NULL, NULL, systemAudioCallback, NULL);\nAudioServicesRemoveSystemSoundCompletion(kSystemSoundID_Vibrate);\n这两个接口的用途是绑定和取消指定soundID对应的回调方法；kSystemSoundID_Vibrate为soundID类型，其回调方法认准的也是这个soundID,在任何地方使用这个id去执行AudioServicesPlaySystemSound(xxxSoundID)都会调用到该回调方法。而一旦调用remove方法取消回调，同样的在任何地方使用这个id去执行AudioServicesPlaySystemSound(xxxSoundID)都不会调用到这个回调。说的这么绕，其实就是说这俩接口的影响是全局的，威力很大。\n我们只要在回调方法里面再调用AudioServicesPlaySystemSound接口，就可以实现连续震动了；当我们想要停止震动时，调用remove接口，ok，回调方法就歇火了。\n\n优化：（参考某大神的博客，名字太长，直接附链接）\nhttp://blog.csdn.net/openglnewbee/article/details/8494598\n经过测试发现震动之间太连续，体验不符合要求；所以我们在c回调里面通过单例（全局变量性质的指针）调用到oc的方法进行[self performSelector:@selector(triggerShake) withObject:nil afterDelay:1]（triggerShake是震动接口);在停止震动时候我们需要调用\n\n[NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(triggerShake)  object:nil];\n停止之前可能的回调；这两个方法的成对使用既好用又简便，对于需要定时调用的场景很适合，也免去维护定时器的麻烦。\n\n这个时候屏幕要是常亮就更好了，不用费脑子了，用这个！！！\n[[UIApplication sharedApplication] setIdleTimerDisabled:YES];   // 设置播放时屏幕常亮\n```\n\n","source":"_posts/oc/iOS-使用AudioServices相关接口的连续震动.md","raw":"---\ntitle: iOS-使用AudioServices相关接口的连续震动\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n转自：http://www.jianshu.com/p/dded314dd920\n话不多说，先上代码！！！喜欢就点赞\n\n主要功能函数\n/*!\n    @function       AudioServicesAddSystemSoundCompletion\n    @abstract       Call the provided Completion Routine when provided SystemSoundID\n                    finishes playing.\n    @discussion     Once set, the System Sound server will send a message to the System Sound client\n                    indicating which SystemSoundID has finished playing.\n    @param          inSystemSoundID\n                        systemSoundID 自定义的sound（1007系统默认提示音）或者kSystemSoundID_Vibrate（震动）\n    @param          inRunLoop\n                       没有研究 一般写NULL 有兴趣可以自己研究一下跟大家共享\n    @param          inRunLoopMode\n                        同上个属性\n    @param          inCompletionRoutine\n                        这个是指某次震动播放完成后的回调 注意是C的函数 一般我们会在回调中写播放震动的函数 来实现连续震动\n    @param          inClientData\n                        没有研究啦！！！NULL就行啦\n*/\nextern OSStatus \nAudioServicesAddSystemSoundCompletion(  SystemSoundID               inSystemSoundID,\n                                     CFRunLoopRef                         inRunLoop,\n                                     CFStringRef                          inRunLoopMode,\n                                     AudioServicesSystemSoundCompletionProc  inCompletionRoutine,\n                                     void*                                inClientData)       \n首先实现上述函数中的回调函数（注意是C）\nvoid soundCompleteCallback(SystemSoundID sound,void * clientData) {\n    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);  //震动\n    AudioServicesPlaySystemSound(sound);  // 播放系统声音 这里的sound是我自定义的，不要copy哈，没有的\n}\n实现播放声音或震动的代码\n    SystemSoundID sound;\n    NSString *path = [[NSBundle mainBundle] pathForResource:soundName ofType:nil];\n    AudioServicesCreateSystemSoundID((__bridge CFURLRef)[NSURL fileURLWithPath:path], &_sound);\n\n    AudioServicesAddSystemSoundCompletion(_soundID, NULL, NULL, soundCompleteCallback, NULL);\n    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);\n    AudioServicesPlaySystemSound(_sound);\n至此，就可以顺利的播放声音和震动了，而且是连续的哦！！！\n别忘了！ 怎么让他停下来\n为了方便 我就写了而一个OC的方法来做了\n-(void)stopAlertSoundWithSoundID:(SystemSoundID)sound {\n    AudioServicesDisposeSystemSoundID(kSystemSoundID_Vibrate);\n    AudioServicesDisposeSystemSoundID(sound);\n    AudioServicesRemoveSystemSoundCompletion(sound);\n}\n这里要详细解说一下需要注意的事项：\nAudioServicesAddSystemSoundCompletion(kSystemSoundID_Vibrate, NULL, NULL, systemAudioCallback, NULL);\nAudioServicesRemoveSystemSoundCompletion(kSystemSoundID_Vibrate);\n这两个接口的用途是绑定和取消指定soundID对应的回调方法；kSystemSoundID_Vibrate为soundID类型，其回调方法认准的也是这个soundID,在任何地方使用这个id去执行AudioServicesPlaySystemSound(xxxSoundID)都会调用到该回调方法。而一旦调用remove方法取消回调，同样的在任何地方使用这个id去执行AudioServicesPlaySystemSound(xxxSoundID)都不会调用到这个回调。说的这么绕，其实就是说这俩接口的影响是全局的，威力很大。\n我们只要在回调方法里面再调用AudioServicesPlaySystemSound接口，就可以实现连续震动了；当我们想要停止震动时，调用remove接口，ok，回调方法就歇火了。\n\n优化：（参考某大神的博客，名字太长，直接附链接）\nhttp://blog.csdn.net/openglnewbee/article/details/8494598\n经过测试发现震动之间太连续，体验不符合要求；所以我们在c回调里面通过单例（全局变量性质的指针）调用到oc的方法进行[self performSelector:@selector(triggerShake) withObject:nil afterDelay:1]（triggerShake是震动接口);在停止震动时候我们需要调用\n\n[NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(triggerShake)  object:nil];\n停止之前可能的回调；这两个方法的成对使用既好用又简便，对于需要定时调用的场景很适合，也免去维护定时器的麻烦。\n\n这个时候屏幕要是常亮就更好了，不用费脑子了，用这个！！！\n[[UIApplication sharedApplication] setIdleTimerDisabled:YES];   // 设置播放时屏幕常亮\n```\n\n","slug":"oc/iOS-使用AudioServices相关接口的连续震动","published":1,"updated":"2016-10-08T09:20:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms983002u21xwmaqatzy2","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">转自：http:<span class=\"comment\">//www.jianshu.com/p/dded314dd920</span></div><div class=\"line\">话不多说，先上代码！！！喜欢就点赞</div><div class=\"line\"></div><div class=\"line\">主要功能函数</div><div class=\"line\"><span class=\"comment\">/*!</span></div><div class=\"line\">    @function       AudioServicesAddSystemSoundCompletion</div><div class=\"line\">    @abstract       Call the provided Completion Routine when provided SystemSoundID</div><div class=\"line\">                    finishes playing.</div><div class=\"line\">    @discussion     Once set, the System Sound server will send a message to the System Sound client</div><div class=\"line\">                    indicating which SystemSoundID has finished playing.</div><div class=\"line\">    @param          inSystemSoundID</div><div class=\"line\">                        systemSoundID 自定义的sound（1007系统默认提示音）或者kSystemSoundID_Vibrate（震动）</div><div class=\"line\">    @param          inRunLoop</div><div class=\"line\">                       没有研究 一般写NULL 有兴趣可以自己研究一下跟大家共享</div><div class=\"line\">    @param          inRunLoopMode</div><div class=\"line\">                        同上个属性</div><div class=\"line\">    @param          inCompletionRoutine</div><div class=\"line\">                        这个是指某次震动播放完成后的回调 注意是C的函数 一般我们会在回调中写播放震动的函数 来实现连续震动</div><div class=\"line\">    @param          inClientData</div><div class=\"line\">                        没有研究啦！！！NULL就行啦</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">extern</span> OSStatus </div><div class=\"line\">AudioServicesAddSystemSoundCompletion(  SystemSoundID               inSystemSoundID,</div><div class=\"line\">                                     <span class=\"built_in\">CFRunLoopRef</span>                         inRunLoop,</div><div class=\"line\">                                     <span class=\"built_in\">CFStringRef</span>                          inRunLoopMode,</div><div class=\"line\">                                     AudioServicesSystemSoundCompletionProc  inCompletionRoutine,</div><div class=\"line\">                                     <span class=\"keyword\">void</span>*                                inClientData)       </div><div class=\"line\">首先实现上述函数中的回调函数（注意是C）</div><div class=\"line\"><span class=\"keyword\">void</span> soundCompleteCallback(SystemSoundID sound,<span class=\"keyword\">void</span> * clientData) &#123;</div><div class=\"line\">    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);  <span class=\"comment\">//震动</span></div><div class=\"line\">    AudioServicesPlaySystemSound(sound);  <span class=\"comment\">// 播放系统声音 这里的sound是我自定义的，不要copy哈，没有的</span></div><div class=\"line\">&#125;</div><div class=\"line\">实现播放声音或震动的代码</div><div class=\"line\">    SystemSoundID sound;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *path = [[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:soundName ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">    AudioServicesCreateSystemSoundID((__bridge <span class=\"built_in\">CFURLRef</span>)[<span class=\"built_in\">NSURL</span> fileURLWithPath:path], &amp;_sound);</div><div class=\"line\"></div><div class=\"line\">    AudioServicesAddSystemSoundCompletion(_soundID, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, soundCompleteCallback, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);</div><div class=\"line\">    AudioServicesPlaySystemSound(_sound);</div><div class=\"line\">至此，就可以顺利的播放声音和震动了，而且是连续的哦！！！</div><div class=\"line\">别忘了！ 怎么让他停下来</div><div class=\"line\">为了方便 我就写了而一个OC的方法来做了</div><div class=\"line\">-(<span class=\"keyword\">void</span>)stopAlertSoundWithSoundID:(SystemSoundID)sound &#123;</div><div class=\"line\">    AudioServicesDisposeSystemSoundID(kSystemSoundID_Vibrate);</div><div class=\"line\">    AudioServicesDisposeSystemSoundID(sound);</div><div class=\"line\">    AudioServicesRemoveSystemSoundCompletion(sound);</div><div class=\"line\">&#125;</div><div class=\"line\">这里要详细解说一下需要注意的事项：</div><div class=\"line\">AudioServicesAddSystemSoundCompletion(kSystemSoundID_Vibrate, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, systemAudioCallback, <span class=\"literal\">NULL</span>);</div><div class=\"line\">AudioServicesRemoveSystemSoundCompletion(kSystemSoundID_Vibrate);</div><div class=\"line\">这两个接口的用途是绑定和取消指定soundID对应的回调方法；kSystemSoundID_Vibrate为soundID类型，其回调方法认准的也是这个soundID,在任何地方使用这个<span class=\"keyword\">id</span>去执行AudioServicesPlaySystemSound(xxxSoundID)都会调用到该回调方法。而一旦调用remove方法取消回调，同样的在任何地方使用这个<span class=\"keyword\">id</span>去执行AudioServicesPlaySystemSound(xxxSoundID)都不会调用到这个回调。说的这么绕，其实就是说这俩接口的影响是全局的，威力很大。</div><div class=\"line\">我们只要在回调方法里面再调用AudioServicesPlaySystemSound接口，就可以实现连续震动了；当我们想要停止震动时，调用remove接口，ok，回调方法就歇火了。</div><div class=\"line\"></div><div class=\"line\">优化：（参考某大神的博客，名字太长，直接附链接）</div><div class=\"line\">http:<span class=\"comment\">//blog.csdn.net/openglnewbee/article/details/8494598</span></div><div class=\"line\">经过测试发现震动之间太连续，体验不符合要求；所以我们在c回调里面通过单例（全局变量性质的指针）调用到oc的方法进行[<span class=\"keyword\">self</span> performSelector:<span class=\"keyword\">@selector</span>(triggerShake) withObject:<span class=\"literal\">nil</span> afterDelay:<span class=\"number\">1</span>]（triggerShake是震动接口);在停止震动时候我们需要调用</div><div class=\"line\"></div><div class=\"line\">[<span class=\"built_in\">NSObject</span> cancelPreviousPerformRequestsWithTarget:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(triggerShake)  object:<span class=\"literal\">nil</span>];</div><div class=\"line\">停止之前可能的回调；这两个方法的成对使用既好用又简便，对于需要定时调用的场景很适合，也免去维护定时器的麻烦。</div><div class=\"line\"></div><div class=\"line\">这个时候屏幕要是常亮就更好了，不用费脑子了，用这个！！！</div><div class=\"line\">[[<span class=\"built_in\">UIApplication</span> sharedApplication] setIdleTimerDisabled:<span class=\"literal\">YES</span>];   <span class=\"comment\">// 设置播放时屏幕常亮</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">转自：http:<span class=\"comment\">//www.jianshu.com/p/dded314dd920</span></div><div class=\"line\">话不多说，先上代码！！！喜欢就点赞</div><div class=\"line\"></div><div class=\"line\">主要功能函数</div><div class=\"line\"><span class=\"comment\">/*!</div><div class=\"line\">    @function       AudioServicesAddSystemSoundCompletion</div><div class=\"line\">    @abstract       Call the provided Completion Routine when provided SystemSoundID</div><div class=\"line\">                    finishes playing.</div><div class=\"line\">    @discussion     Once set, the System Sound server will send a message to the System Sound client</div><div class=\"line\">                    indicating which SystemSoundID has finished playing.</div><div class=\"line\">    @param          inSystemSoundID</div><div class=\"line\">                        systemSoundID 自定义的sound（1007系统默认提示音）或者kSystemSoundID_Vibrate（震动）</div><div class=\"line\">    @param          inRunLoop</div><div class=\"line\">                       没有研究 一般写NULL 有兴趣可以自己研究一下跟大家共享</div><div class=\"line\">    @param          inRunLoopMode</div><div class=\"line\">                        同上个属性</div><div class=\"line\">    @param          inCompletionRoutine</div><div class=\"line\">                        这个是指某次震动播放完成后的回调 注意是C的函数 一般我们会在回调中写播放震动的函数 来实现连续震动</div><div class=\"line\">    @param          inClientData</div><div class=\"line\">                        没有研究啦！！！NULL就行啦</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">extern</span> OSStatus </div><div class=\"line\">AudioServicesAddSystemSoundCompletion(  SystemSoundID               inSystemSoundID,</div><div class=\"line\">                                     <span class=\"built_in\">CFRunLoopRef</span>                         inRunLoop,</div><div class=\"line\">                                     <span class=\"built_in\">CFStringRef</span>                          inRunLoopMode,</div><div class=\"line\">                                     AudioServicesSystemSoundCompletionProc  inCompletionRoutine,</div><div class=\"line\">                                     <span class=\"keyword\">void</span>*                                inClientData)       </div><div class=\"line\">首先实现上述函数中的回调函数（注意是C）</div><div class=\"line\"><span class=\"keyword\">void</span> soundCompleteCallback(SystemSoundID sound,<span class=\"keyword\">void</span> * clientData) &#123;</div><div class=\"line\">    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);  <span class=\"comment\">//震动</span></div><div class=\"line\">    AudioServicesPlaySystemSound(sound);  <span class=\"comment\">// 播放系统声音 这里的sound是我自定义的，不要copy哈，没有的</span></div><div class=\"line\">&#125;</div><div class=\"line\">实现播放声音或震动的代码</div><div class=\"line\">    SystemSoundID sound;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *path = [[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:soundName ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">    AudioServicesCreateSystemSoundID((__bridge <span class=\"built_in\">CFURLRef</span>)[<span class=\"built_in\">NSURL</span> fileURLWithPath:path], &amp;_sound);</div><div class=\"line\"></div><div class=\"line\">    AudioServicesAddSystemSoundCompletion(_soundID, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, soundCompleteCallback, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);</div><div class=\"line\">    AudioServicesPlaySystemSound(_sound);</div><div class=\"line\">至此，就可以顺利的播放声音和震动了，而且是连续的哦！！！</div><div class=\"line\">别忘了！ 怎么让他停下来</div><div class=\"line\">为了方便 我就写了而一个OC的方法来做了</div><div class=\"line\">-(<span class=\"keyword\">void</span>)stopAlertSoundWithSoundID:(SystemSoundID)sound &#123;</div><div class=\"line\">    AudioServicesDisposeSystemSoundID(kSystemSoundID_Vibrate);</div><div class=\"line\">    AudioServicesDisposeSystemSoundID(sound);</div><div class=\"line\">    AudioServicesRemoveSystemSoundCompletion(sound);</div><div class=\"line\">&#125;</div><div class=\"line\">这里要详细解说一下需要注意的事项：</div><div class=\"line\">AudioServicesAddSystemSoundCompletion(kSystemSoundID_Vibrate, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, systemAudioCallback, <span class=\"literal\">NULL</span>);</div><div class=\"line\">AudioServicesRemoveSystemSoundCompletion(kSystemSoundID_Vibrate);</div><div class=\"line\">这两个接口的用途是绑定和取消指定soundID对应的回调方法；kSystemSoundID_Vibrate为soundID类型，其回调方法认准的也是这个soundID,在任何地方使用这个<span class=\"keyword\">id</span>去执行AudioServicesPlaySystemSound(xxxSoundID)都会调用到该回调方法。而一旦调用remove方法取消回调，同样的在任何地方使用这个<span class=\"keyword\">id</span>去执行AudioServicesPlaySystemSound(xxxSoundID)都不会调用到这个回调。说的这么绕，其实就是说这俩接口的影响是全局的，威力很大。</div><div class=\"line\">我们只要在回调方法里面再调用AudioServicesPlaySystemSound接口，就可以实现连续震动了；当我们想要停止震动时，调用remove接口，ok，回调方法就歇火了。</div><div class=\"line\"></div><div class=\"line\">优化：（参考某大神的博客，名字太长，直接附链接）</div><div class=\"line\">http:<span class=\"comment\">//blog.csdn.net/openglnewbee/article/details/8494598</span></div><div class=\"line\">经过测试发现震动之间太连续，体验不符合要求；所以我们在c回调里面通过单例（全局变量性质的指针）调用到oc的方法进行[<span class=\"keyword\">self</span> performSelector:<span class=\"keyword\">@selector</span>(triggerShake) withObject:<span class=\"literal\">nil</span> afterDelay:<span class=\"number\">1</span>]（triggerShake是震动接口);在停止震动时候我们需要调用</div><div class=\"line\"></div><div class=\"line\">[<span class=\"built_in\">NSObject</span> cancelPreviousPerformRequestsWithTarget:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(triggerShake)  object:<span class=\"literal\">nil</span>];</div><div class=\"line\">停止之前可能的回调；这两个方法的成对使用既好用又简便，对于需要定时调用的场景很适合，也免去维护定时器的麻烦。</div><div class=\"line\"></div><div class=\"line\">这个时候屏幕要是常亮就更好了，不用费脑子了，用这个！！！</div><div class=\"line\">[[<span class=\"built_in\">UIApplication</span> sharedApplication] setIdleTimerDisabled:<span class=\"literal\">YES</span>];   <span class=\"comment\">// 设置播放时屏幕常亮</span></div></pre></td></tr></table></figure>"},{"title":"iOS之 CoreMotion 框架","date":"2015-10-08T03:39:46.000Z","_content":" 在项目中经常会使用到重力加速度，陀螺仪，最近在一个项目中使用到了CoreMotion 框架，需求是：上下摇摆手机控制智能椅子的角度调节，该项目是使用蓝牙4.0进行通讯的，在iOS内已经封装好了CoreBluetooth 框架，不过需要iPHone4s 以上的手机，和iPadmin以上的平板电脑才有蓝牙4.0.今天在这里先记录一下CoreMotion 框架的使用.\n<!-- more -->\n\n主要的类：CMMotionManager , NSOperationQueue.\n下面是一个被我封装过的一个类。\n项目需要导入CoreMotion.Framework \n在.h 文件需要#import <CoreMotion/CoreMotion.h>.h文件代码:\n\n```objc\n#import <Foundation/Foundation.h>\n#import <CoreMotion/CoreMotion.h>\ntypedef enum _MotionDirection {UNKNOWDIRECTION=0,UP,DOWN}MotionDirection;\n@interface iCtrlCMManager : NSObject\n@property (nonatomic,retain) CMMotionManager * ictrlCMManager;\n@property (nonatomic,assign) MotionDirection motionDirection;\n+(id)sharedInstance;\n-(void)startMotion;\n-(void)stopMotion;\n@end\n.m文件代码:\n\n#import \"iCtrlCMManager.h\"\n \n@implementation iCtrlCMManager\n#pragma mark -\n#pragma mark life cycle\n+(id)sharedInstance\n{\n    static iCtrlCMManager *this = nil;\n    if(!this)\n    {\n        this = [[iCtrlCMManager alloc] init];\n         \n    }\n     \n    return this;\n     \n}\n \n-(id)init\n{\n    self = [super init];\n    if(self)\n    {\n \n        _ictrlCMManager = [[CMMotionManager alloc] init];\n         \n    }\n    return self;\n}\n \n-(void)dealloc\n{\n    [_ictrlCMManager release];\n    [super dealloc];\n}\n \n \n#pragma mark \n#pragma mark instance methods\n-(void)startMotion\n{\n    _motionDirection = UNKNOWDIRECTION;\n    if(_ictrlCMManager.accelerometerAvailable)\n    {\n        NSOperationQueue *queue = [[[NSOperationQueue alloc] init] autorelease];\n        _ictrlCMManager.accelerometerUpdateInterval = 1.0/60.0;\n \n        __block float y = 0.0;\n        __block int i = 0;\n        [_ictrlCMManager startAccelerometerUpdatesToQueue:queue withHandler:^(CMAccelerometerData *accelerometerData, NSError *error) {\n            if (error)\n            {\n                NSLog(@\"CoreMotion Error : %@\",error);\n                [_ictrlCMManager stopAccelerometerUpdates];\n            }\n            if(i == 0)\n            {\n                y = accelerometerData.acceleration.y;\n                 \n            }\n             \n             \n            i++;\n            if(fabs(y - accelerometerData.acceleration.y) > 0.4)\n            {\n                \n  \n                if(y > accelerometerData.acceleration.y)\n                {\n                    NSLog(@\"UP\");\n                    _motionDirection = UP;\n                }\n                else\n                {\n                    NSLog(@\"Down\");\n                    _motionDirection = DOWN;\n                }\n                 \n                y = accelerometerData.acceleration.y;\n        \n            }\n \n             \n        }];\n    }\n    else\n    {\n        NSLog(@\"The accelerometer is unavailable\");\n    }\n}\n \n-(void)stopMotion\n{\n    _motionDirection = UNKNOWDIRECTION;\n    [_ictrlCMManager stopAccelerometerUpdates];\n  \n}\n \n@end\n```\n\n","source":"_posts/oc/iOS之 CoreMotion 框架.md","raw":"---\ntitle: iOS之 CoreMotion 框架\ndate: 2015-10-08 11:39:46\ncategories: objective-c\n---\n 在项目中经常会使用到重力加速度，陀螺仪，最近在一个项目中使用到了CoreMotion 框架，需求是：上下摇摆手机控制智能椅子的角度调节，该项目是使用蓝牙4.0进行通讯的，在iOS内已经封装好了CoreBluetooth 框架，不过需要iPHone4s 以上的手机，和iPadmin以上的平板电脑才有蓝牙4.0.今天在这里先记录一下CoreMotion 框架的使用.\n<!-- more -->\n\n主要的类：CMMotionManager , NSOperationQueue.\n下面是一个被我封装过的一个类。\n项目需要导入CoreMotion.Framework \n在.h 文件需要#import <CoreMotion/CoreMotion.h>.h文件代码:\n\n```objc\n#import <Foundation/Foundation.h>\n#import <CoreMotion/CoreMotion.h>\ntypedef enum _MotionDirection {UNKNOWDIRECTION=0,UP,DOWN}MotionDirection;\n@interface iCtrlCMManager : NSObject\n@property (nonatomic,retain) CMMotionManager * ictrlCMManager;\n@property (nonatomic,assign) MotionDirection motionDirection;\n+(id)sharedInstance;\n-(void)startMotion;\n-(void)stopMotion;\n@end\n.m文件代码:\n\n#import \"iCtrlCMManager.h\"\n \n@implementation iCtrlCMManager\n#pragma mark -\n#pragma mark life cycle\n+(id)sharedInstance\n{\n    static iCtrlCMManager *this = nil;\n    if(!this)\n    {\n        this = [[iCtrlCMManager alloc] init];\n         \n    }\n     \n    return this;\n     \n}\n \n-(id)init\n{\n    self = [super init];\n    if(self)\n    {\n \n        _ictrlCMManager = [[CMMotionManager alloc] init];\n         \n    }\n    return self;\n}\n \n-(void)dealloc\n{\n    [_ictrlCMManager release];\n    [super dealloc];\n}\n \n \n#pragma mark \n#pragma mark instance methods\n-(void)startMotion\n{\n    _motionDirection = UNKNOWDIRECTION;\n    if(_ictrlCMManager.accelerometerAvailable)\n    {\n        NSOperationQueue *queue = [[[NSOperationQueue alloc] init] autorelease];\n        _ictrlCMManager.accelerometerUpdateInterval = 1.0/60.0;\n \n        __block float y = 0.0;\n        __block int i = 0;\n        [_ictrlCMManager startAccelerometerUpdatesToQueue:queue withHandler:^(CMAccelerometerData *accelerometerData, NSError *error) {\n            if (error)\n            {\n                NSLog(@\"CoreMotion Error : %@\",error);\n                [_ictrlCMManager stopAccelerometerUpdates];\n            }\n            if(i == 0)\n            {\n                y = accelerometerData.acceleration.y;\n                 \n            }\n             \n             \n            i++;\n            if(fabs(y - accelerometerData.acceleration.y) > 0.4)\n            {\n                \n  \n                if(y > accelerometerData.acceleration.y)\n                {\n                    NSLog(@\"UP\");\n                    _motionDirection = UP;\n                }\n                else\n                {\n                    NSLog(@\"Down\");\n                    _motionDirection = DOWN;\n                }\n                 \n                y = accelerometerData.acceleration.y;\n        \n            }\n \n             \n        }];\n    }\n    else\n    {\n        NSLog(@\"The accelerometer is unavailable\");\n    }\n}\n \n-(void)stopMotion\n{\n    _motionDirection = UNKNOWDIRECTION;\n    [_ictrlCMManager stopAccelerometerUpdates];\n  \n}\n \n@end\n```\n\n","slug":"oc/iOS之 CoreMotion 框架","published":1,"updated":"2016-10-08T09:47:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms984002w21xwyde1biip","content":"<p> 在项目中经常会使用到重力加速度，陀螺仪，最近在一个项目中使用到了CoreMotion 框架，需求是：上下摇摆手机控制智能椅子的角度调节，该项目是使用蓝牙4.0进行通讯的，在iOS内已经封装好了CoreBluetooth 框架，不过需要iPHone4s 以上的手机，和iPadmin以上的平板电脑才有蓝牙4.0.今天在这里先记录一下CoreMotion 框架的使用.<br><a id=\"more\"></a></p>\n<p>主要的类：CMMotionManager , NSOperationQueue.<br>下面是一个被我封装过的一个类。<br>项目需要导入CoreMotion.Framework<br>在.h 文件需要#import <coremotion coremotion.h=\"\">.h文件代码:</coremotion></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;CoreMotion/CoreMotion.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> _MotionDirection &#123;UNKNOWDIRECTION=<span class=\"number\">0</span>,UP,DOWN&#125;MotionDirection;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">iCtrlCMManager</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">retain</span>) <span class=\"built_in\">CMMotionManager</span> * ictrlCMManager;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">assign</span>) MotionDirection motionDirection;</div><div class=\"line\">+(<span class=\"keyword\">id</span>)sharedInstance;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)startMotion;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)stopMotion;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">.m文件代码:</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"iCtrlCMManager.h\"</span></span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">iCtrlCMManager</span></span></div><div class=\"line\"><span class=\"meta\">#pragma mark -</span></div><div class=\"line\"><span class=\"meta\">#pragma mark life cycle</span></div><div class=\"line\">+(<span class=\"keyword\">id</span>)sharedInstance</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> iCtrlCMManager *<span class=\"keyword\">this</span> = <span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span> = [[iCtrlCMManager alloc] init];</div><div class=\"line\">         </div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">     </div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">-(<span class=\"keyword\">id</span>)init</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">self</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\"> </div><div class=\"line\">        _ictrlCMManager = [[<span class=\"built_in\">CMMotionManager</span> alloc] init];</div><div class=\"line\">         </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc</div><div class=\"line\">&#123;</div><div class=\"line\">    [_ictrlCMManager release];</div><div class=\"line\">    [<span class=\"keyword\">super</span> dealloc];</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#pragma mark </span></div><div class=\"line\"><span class=\"meta\">#pragma mark instance methods</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)startMotion</div><div class=\"line\">&#123;</div><div class=\"line\">    _motionDirection = UNKNOWDIRECTION;</div><div class=\"line\">    <span class=\"keyword\">if</span>(_ictrlCMManager.accelerometerAvailable)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSOperationQueue</span> *queue = [[[<span class=\"built_in\">NSOperationQueue</span> alloc] init] autorelease];</div><div class=\"line\">        _ictrlCMManager.accelerometerUpdateInterval = <span class=\"number\">1.0</span>/<span class=\"number\">60.0</span>;</div><div class=\"line\"> </div><div class=\"line\">        __block <span class=\"keyword\">float</span> y = <span class=\"number\">0.0</span>;</div><div class=\"line\">        __block <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">        [_ictrlCMManager startAccelerometerUpdatesToQueue:queue withHandler:^(<span class=\"built_in\">CMAccelerometerData</span> *accelerometerData, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (error)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"CoreMotion Error : %@\"</span>,error);</div><div class=\"line\">                [_ictrlCMManager stopAccelerometerUpdates];</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                y = accelerometerData.acceleration.y;</div><div class=\"line\">                 </div><div class=\"line\">            &#125;</div><div class=\"line\">             </div><div class=\"line\">             </div><div class=\"line\">            i++;</div><div class=\"line\">            <span class=\"keyword\">if</span>(fabs(y - accelerometerData.acceleration.y) &gt; <span class=\"number\">0.4</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                </div><div class=\"line\">  </div><div class=\"line\">                <span class=\"keyword\">if</span>(y &gt; accelerometerData.acceleration.y)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"UP\"</span>);</div><div class=\"line\">                    _motionDirection = UP;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Down\"</span>);</div><div class=\"line\">                    _motionDirection = DOWN;</div><div class=\"line\">                &#125;</div><div class=\"line\">                 </div><div class=\"line\">                y = accelerometerData.acceleration.y;</div><div class=\"line\">        </div><div class=\"line\">            &#125;</div><div class=\"line\"> </div><div class=\"line\">             </div><div class=\"line\">        &#125;];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The accelerometer is unavailable\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">-(<span class=\"keyword\">void</span>)stopMotion</div><div class=\"line\">&#123;</div><div class=\"line\">    _motionDirection = UNKNOWDIRECTION;</div><div class=\"line\">    [_ictrlCMManager stopAccelerometerUpdates];</div><div class=\"line\">  </div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n","excerpt":"<p> 在项目中经常会使用到重力加速度，陀螺仪，最近在一个项目中使用到了CoreMotion 框架，需求是：上下摇摆手机控制智能椅子的角度调节，该项目是使用蓝牙4.0进行通讯的，在iOS内已经封装好了CoreBluetooth 框架，不过需要iPHone4s 以上的手机，和iPadmin以上的平板电脑才有蓝牙4.0.今天在这里先记录一下CoreMotion 框架的使用.<br>","more":"</p>\n<p>主要的类：CMMotionManager , NSOperationQueue.<br>下面是一个被我封装过的一个类。<br>项目需要导入CoreMotion.Framework<br>在.h 文件需要#import <CoreMotion/CoreMotion.h>.h文件代码:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;CoreMotion/CoreMotion.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> _MotionDirection &#123;UNKNOWDIRECTION=<span class=\"number\">0</span>,UP,DOWN&#125;MotionDirection;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">iCtrlCMManager</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">retain</span>) <span class=\"built_in\">CMMotionManager</span> * ictrlCMManager;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">assign</span>) MotionDirection motionDirection;</div><div class=\"line\">+(<span class=\"keyword\">id</span>)sharedInstance;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)startMotion;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)stopMotion;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">.m文件代码:</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"iCtrlCMManager.h\"</span></span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">iCtrlCMManager</span></span></div><div class=\"line\"><span class=\"meta\">#pragma mark -</span></div><div class=\"line\"><span class=\"meta\">#pragma mark life cycle</span></div><div class=\"line\">+(<span class=\"keyword\">id</span>)sharedInstance</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> iCtrlCMManager *<span class=\"keyword\">this</span> = <span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span> = [[iCtrlCMManager alloc] init];</div><div class=\"line\">         </div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">     </div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">-(<span class=\"keyword\">id</span>)init</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">self</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\"> </div><div class=\"line\">        _ictrlCMManager = [[<span class=\"built_in\">CMMotionManager</span> alloc] init];</div><div class=\"line\">         </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc</div><div class=\"line\">&#123;</div><div class=\"line\">    [_ictrlCMManager release];</div><div class=\"line\">    [<span class=\"keyword\">super</span> dealloc];</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#pragma mark </span></div><div class=\"line\"><span class=\"meta\">#pragma mark instance methods</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)startMotion</div><div class=\"line\">&#123;</div><div class=\"line\">    _motionDirection = UNKNOWDIRECTION;</div><div class=\"line\">    <span class=\"keyword\">if</span>(_ictrlCMManager.accelerometerAvailable)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSOperationQueue</span> *queue = [[[<span class=\"built_in\">NSOperationQueue</span> alloc] init] autorelease];</div><div class=\"line\">        _ictrlCMManager.accelerometerUpdateInterval = <span class=\"number\">1.0</span>/<span class=\"number\">60.0</span>;</div><div class=\"line\"> </div><div class=\"line\">        __block <span class=\"keyword\">float</span> y = <span class=\"number\">0.0</span>;</div><div class=\"line\">        __block <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">        [_ictrlCMManager startAccelerometerUpdatesToQueue:queue withHandler:^(<span class=\"built_in\">CMAccelerometerData</span> *accelerometerData, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (error)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"CoreMotion Error : %@\"</span>,error);</div><div class=\"line\">                [_ictrlCMManager stopAccelerometerUpdates];</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                y = accelerometerData.acceleration.y;</div><div class=\"line\">                 </div><div class=\"line\">            &#125;</div><div class=\"line\">             </div><div class=\"line\">             </div><div class=\"line\">            i++;</div><div class=\"line\">            <span class=\"keyword\">if</span>(fabs(y - accelerometerData.acceleration.y) &gt; <span class=\"number\">0.4</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                </div><div class=\"line\">  </div><div class=\"line\">                <span class=\"keyword\">if</span>(y &gt; accelerometerData.acceleration.y)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"UP\"</span>);</div><div class=\"line\">                    _motionDirection = UP;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Down\"</span>);</div><div class=\"line\">                    _motionDirection = DOWN;</div><div class=\"line\">                &#125;</div><div class=\"line\">                 </div><div class=\"line\">                y = accelerometerData.acceleration.y;</div><div class=\"line\">        </div><div class=\"line\">            &#125;</div><div class=\"line\"> </div><div class=\"line\">             </div><div class=\"line\">        &#125;];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"The accelerometer is unavailable\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">-(<span class=\"keyword\">void</span>)stopMotion</div><div class=\"line\">&#123;</div><div class=\"line\">    _motionDirection = UNKNOWDIRECTION;</div><div class=\"line\">    [_ictrlCMManager stopAccelerometerUpdates];</div><div class=\"line\">  </div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>"},{"title":"iOS实现一个颜色渐变的弧形进度条","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n转自：https://www.ganlvji.com/gradient_circle_progress/###1、先来一个结果\n80%的状态：\n[![80percent](http://img.ganlvji.com/2014/03/80percent.png)](http://img.ganlvji.com/2014/03/80percent.png)\n99%的状态:\n[![99percent](http://img.ganlvji.com/2014/03/99percent.png)](http://img.ganlvji.com/2014/03/99percent.png)\n###2、需要用到的宏：\n \n\t#define degreesToRadians(x) (M_PI*(x)/180.0) //把角度转换成PI的方式\n\t#define  PROGREESS_WIDTH 80 //圆直径 \n\t#define PROGRESS_LINE_WIDTH 4 //弧线的宽度\n \n###3、CAShapeLayer\n首先，你得要引入Core Animation框架。为了实现环形效果，需要使用到CAShapeLayer，原理是CAShapeLayer可以通过指定Path的方式实现生成一个图形，非常方便。\n###4、UIBezierPath\n \n由于需要画一个圆形，UIBeziperPath是非常好用的画圆形的工具。实现下面的代码可以画出上面所示的整个轨道。这个圆形是从-210度的角度到30度。\n \n\tUIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:CGPointMake(40, 40) radius:(PROGREESS_WIDTH-PROGRESS_LINE_WIDTH)/2 startAngle:degreesToRadians(-210) endAngle:degreesToRadians(30) clockwise:YES];\n \n \n###5、画出一个完成的进度的背景轨道\n \n这里原理很简单，就是使用CAShapeLayer和UIBezierPath结合起来就能够达成目标，这一步的结果如下所示：\n[![0percent](http://img.ganlvji.com/2014/03/0percent.png)](http://img.ganlvji.com/2014/03/0percent.png)\n \n\t        _trackLayer = [CAShapeLayer layer];//创建一个track shape layer\n\t        _trackLayer.frame = self.bounds;\n\t        [self.layer addSublayer:_trackLayer];\n\t        _trackLayer.fillColor = [[UIColor clearColor] CGColor];\n\t         _trackLayer.strokeColor = [_strokeColor CGColor];//指定path的渲染颜色\n\t        _trackLayer.opacity = 0.25; //背景同学你就甘心做背景吧，不要太明显了，透明度小一点\n\t        _trackLayer.lineCap = kCALineCapRound;//指定线的边缘是圆的\n\t        _trackLayer.lineWidth = PROGRESS_LINE_WIDTH;//线的宽度\n\t        UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:CGPointMake(40, 40) radius:(PROGREESS_WIDTH-PROGRESS_LINE_WIDTH)/2 startAngle:degreesToRadians(-210) endAngle:degreesToRadians(30) clockwise:YES];//上面说明过了用来构建圆形\n\t        _trackLayer.path =[path CGPath]; //把path传递給layer，然后layer会处理相应的渲染，整个逻辑和CoreGraph是一致的。\n###6、渐变进度条：\n首先要明确的需求是，我们需要颜色根据百分比从红色渐变到黄色然后再到蓝色。\n怎么实现这个颜色的渐变效果。这里我们需要使用到CAGradientLayer，CAGradientLayer是一个用来画颜色渐变的层（如果使用透明的颜色，也就可以做到透明渐变）。我们先用CAGradientLayer做出渐变效果，然后把ShapeLayer作为GradientLayer的Mask来截取出需要的部分，以此达到渐变的进度条效果。\n \n首先，需要构建出顺着弧形的颜色渐变。上面的需求我们可以分解成两部分。\n①左半部分，颜色从红色渐变到黄色。\n②右半部分，颜色从黄色渐变到蓝色。\n由此可以了解到是我们需要两个CAShapeLayer。\n为什么要这么折腾？CAShapeLayer不能顺着弧线进行渐变只能指定两个点之间进行渐变。所以只能曲线救国了。\n先看看这个部分的效果：\n[![gradient](http://img.ganlvji.com/2014/03/gradient.png)](http://img.ganlvji.com/2014/03/gradient.png)\n然后，创建一个新的CAShapeLayer来截取这个颜色渐变的层。\n这部分代码如下所示：\n\t        _progressLayer = [CAShapeLayer layer];\n\t        _progressLayer.frame = self.bounds;\n\t        _progressLayer.fillColor =  [[UIColor clearColor] CGColor];\n\t        _progressLayer.strokeColor  = [PROCESS_COLOR CGColor];\n\t        _progressLayer.lineCap = kCALineCapRound;\n\t        _progressLayer.lineWidth = PROGRESS_LINE_WIDTH;\n\t        _progressLayer.path = [path CGPath];\n\t        _progressLayer.strokeEnd = 0;\n\t\n\t        CALayer *gradientLayer = [CALayer layer];\n\t        CAGradientLayer *gradientLayer1 =  [CAGradientLayer layer];\n\t        gradientLayer1.frame = CGRectMake(0, 0, self.width/2, self.height);\n\t        [gradientLayer1 setColors:[NSArray arrayWithObjects:(id)[[UIColor redColor] CGColor],(id)[UIColorFromRGB(0xfde802) CGColor], nil]];\n\t        [gradientLayer1 setLocations:@[@0.5,@0.9,@1 ]];\n\t        [gradientLayer1 setStartPoint:CGPointMake(0.5, 1)];\n\t        [gradientLayer1 setEndPoint:CGPointMake(0.5, 0)];\n\t        [gradientLayer addSublayer:gradientLayer1];\n\t\n\t        CAGradientLayer *gradientLayer2 =  [CAGradientLayer layer];\n\t        [gradientLayer2 setLocations:@[@0.1,@0.5,@1]];\n\t        gradientLayer2.frame = CGRectMake(self.width/2, 0, self.width/2, self.height);\n\t        [gradientLayer2 setColors:[NSArray arrayWithObjects:(id)[UIColorFromRGB(0xfde802) CGColor],(id)[MAIN_BLUE CGColor], nil]];\n\t        [gradientLayer2 setStartPoint:CGPointMake(0.5, 0)];\n\t        [gradientLayer2 setEndPoint:CGPointMake(0.5, 1)];\n\t        [gradientLayer addSublayer:gradientLayer2];\n\t\n\t        [gradientLayer setMask:_progressLayer]; //用progressLayer来截取渐变层\n\t        [self.layer addSublayer:gradientLayer];\n \n \n###7、进度条效果\n走到上面一步我们得到的效果是一个进度为100%的效果，_progressLayer的长度和_trackLayer的长度是一样的。那么怎么解决百分比的问题呢？\nCAShapeLayer有一个strokeEnd的属性，这个属性是从0到1的浮点类型，正好可以用表达百分比，而且这个属性是animatable，可以动态的表示进度的变化。\n如下代码所示：\n\t-(void)setPercent:(NSInteger)percent animated:(BOOL)animated\n\t{\n\t    [CATransaction begin];\n\t    [CATransaction setDisableActions:!animated];\n\t    [CATransaction setAnimationTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn]];\n\t    [CATransaction setAnimationDuration:MAIN_SCREEN_ANIMATION_TIME];\n\t    _progressLayer.strokeEnd = percent/100.0;\n\t    [CATransaction commit];\n\t\n\t    _percent = percent;\n\t}\n","source":"_posts/oc/iOS实现一个颜色渐变的弧形进度条.md","raw":"---\ntitle: iOS实现一个颜色渐变的弧形进度条\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n转自：https://www.ganlvji.com/gradient_circle_progress/###1、先来一个结果\n80%的状态：\n[![80percent](http://img.ganlvji.com/2014/03/80percent.png)](http://img.ganlvji.com/2014/03/80percent.png)\n99%的状态:\n[![99percent](http://img.ganlvji.com/2014/03/99percent.png)](http://img.ganlvji.com/2014/03/99percent.png)\n###2、需要用到的宏：\n \n\t#define degreesToRadians(x) (M_PI*(x)/180.0) //把角度转换成PI的方式\n\t#define  PROGREESS_WIDTH 80 //圆直径 \n\t#define PROGRESS_LINE_WIDTH 4 //弧线的宽度\n \n###3、CAShapeLayer\n首先，你得要引入Core Animation框架。为了实现环形效果，需要使用到CAShapeLayer，原理是CAShapeLayer可以通过指定Path的方式实现生成一个图形，非常方便。\n###4、UIBezierPath\n \n由于需要画一个圆形，UIBeziperPath是非常好用的画圆形的工具。实现下面的代码可以画出上面所示的整个轨道。这个圆形是从-210度的角度到30度。\n \n\tUIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:CGPointMake(40, 40) radius:(PROGREESS_WIDTH-PROGRESS_LINE_WIDTH)/2 startAngle:degreesToRadians(-210) endAngle:degreesToRadians(30) clockwise:YES];\n \n \n###5、画出一个完成的进度的背景轨道\n \n这里原理很简单，就是使用CAShapeLayer和UIBezierPath结合起来就能够达成目标，这一步的结果如下所示：\n[![0percent](http://img.ganlvji.com/2014/03/0percent.png)](http://img.ganlvji.com/2014/03/0percent.png)\n \n\t        _trackLayer = [CAShapeLayer layer];//创建一个track shape layer\n\t        _trackLayer.frame = self.bounds;\n\t        [self.layer addSublayer:_trackLayer];\n\t        _trackLayer.fillColor = [[UIColor clearColor] CGColor];\n\t         _trackLayer.strokeColor = [_strokeColor CGColor];//指定path的渲染颜色\n\t        _trackLayer.opacity = 0.25; //背景同学你就甘心做背景吧，不要太明显了，透明度小一点\n\t        _trackLayer.lineCap = kCALineCapRound;//指定线的边缘是圆的\n\t        _trackLayer.lineWidth = PROGRESS_LINE_WIDTH;//线的宽度\n\t        UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:CGPointMake(40, 40) radius:(PROGREESS_WIDTH-PROGRESS_LINE_WIDTH)/2 startAngle:degreesToRadians(-210) endAngle:degreesToRadians(30) clockwise:YES];//上面说明过了用来构建圆形\n\t        _trackLayer.path =[path CGPath]; //把path传递給layer，然后layer会处理相应的渲染，整个逻辑和CoreGraph是一致的。\n###6、渐变进度条：\n首先要明确的需求是，我们需要颜色根据百分比从红色渐变到黄色然后再到蓝色。\n怎么实现这个颜色的渐变效果。这里我们需要使用到CAGradientLayer，CAGradientLayer是一个用来画颜色渐变的层（如果使用透明的颜色，也就可以做到透明渐变）。我们先用CAGradientLayer做出渐变效果，然后把ShapeLayer作为GradientLayer的Mask来截取出需要的部分，以此达到渐变的进度条效果。\n \n首先，需要构建出顺着弧形的颜色渐变。上面的需求我们可以分解成两部分。\n①左半部分，颜色从红色渐变到黄色。\n②右半部分，颜色从黄色渐变到蓝色。\n由此可以了解到是我们需要两个CAShapeLayer。\n为什么要这么折腾？CAShapeLayer不能顺着弧线进行渐变只能指定两个点之间进行渐变。所以只能曲线救国了。\n先看看这个部分的效果：\n[![gradient](http://img.ganlvji.com/2014/03/gradient.png)](http://img.ganlvji.com/2014/03/gradient.png)\n然后，创建一个新的CAShapeLayer来截取这个颜色渐变的层。\n这部分代码如下所示：\n\t        _progressLayer = [CAShapeLayer layer];\n\t        _progressLayer.frame = self.bounds;\n\t        _progressLayer.fillColor =  [[UIColor clearColor] CGColor];\n\t        _progressLayer.strokeColor  = [PROCESS_COLOR CGColor];\n\t        _progressLayer.lineCap = kCALineCapRound;\n\t        _progressLayer.lineWidth = PROGRESS_LINE_WIDTH;\n\t        _progressLayer.path = [path CGPath];\n\t        _progressLayer.strokeEnd = 0;\n\t\n\t        CALayer *gradientLayer = [CALayer layer];\n\t        CAGradientLayer *gradientLayer1 =  [CAGradientLayer layer];\n\t        gradientLayer1.frame = CGRectMake(0, 0, self.width/2, self.height);\n\t        [gradientLayer1 setColors:[NSArray arrayWithObjects:(id)[[UIColor redColor] CGColor],(id)[UIColorFromRGB(0xfde802) CGColor], nil]];\n\t        [gradientLayer1 setLocations:@[@0.5,@0.9,@1 ]];\n\t        [gradientLayer1 setStartPoint:CGPointMake(0.5, 1)];\n\t        [gradientLayer1 setEndPoint:CGPointMake(0.5, 0)];\n\t        [gradientLayer addSublayer:gradientLayer1];\n\t\n\t        CAGradientLayer *gradientLayer2 =  [CAGradientLayer layer];\n\t        [gradientLayer2 setLocations:@[@0.1,@0.5,@1]];\n\t        gradientLayer2.frame = CGRectMake(self.width/2, 0, self.width/2, self.height);\n\t        [gradientLayer2 setColors:[NSArray arrayWithObjects:(id)[UIColorFromRGB(0xfde802) CGColor],(id)[MAIN_BLUE CGColor], nil]];\n\t        [gradientLayer2 setStartPoint:CGPointMake(0.5, 0)];\n\t        [gradientLayer2 setEndPoint:CGPointMake(0.5, 1)];\n\t        [gradientLayer addSublayer:gradientLayer2];\n\t\n\t        [gradientLayer setMask:_progressLayer]; //用progressLayer来截取渐变层\n\t        [self.layer addSublayer:gradientLayer];\n \n \n###7、进度条效果\n走到上面一步我们得到的效果是一个进度为100%的效果，_progressLayer的长度和_trackLayer的长度是一样的。那么怎么解决百分比的问题呢？\nCAShapeLayer有一个strokeEnd的属性，这个属性是从0到1的浮点类型，正好可以用表达百分比，而且这个属性是animatable，可以动态的表示进度的变化。\n如下代码所示：\n\t-(void)setPercent:(NSInteger)percent animated:(BOOL)animated\n\t{\n\t    [CATransaction begin];\n\t    [CATransaction setDisableActions:!animated];\n\t    [CATransaction setAnimationTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn]];\n\t    [CATransaction setAnimationDuration:MAIN_SCREEN_ANIMATION_TIME];\n\t    _progressLayer.strokeEnd = percent/100.0;\n\t    [CATransaction commit];\n\t\n\t    _percent = percent;\n\t}\n","slug":"oc/iOS实现一个颜色渐变的弧形进度条","published":1,"updated":"2016-10-08T09:02:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms985002y21xwkvmewn9e","content":"<a id=\"more\"></a>\n<p>转自：<a href=\"https://www.ganlvji.com/gradient_circle_progress/###1、先来一个结果\" target=\"_blank\" rel=\"external\">https://www.ganlvji.com/gradient_circle_progress/###1、先来一个结果</a><br>80%的状态：<br><a href=\"http://img.ganlvji.com/2014/03/80percent.png\" target=\"_blank\" rel=\"external\"><img src=\"http://img.ganlvji.com/2014/03/80percent.png\" alt=\"80percent\"></a><br>99%的状态:<br><a href=\"http://img.ganlvji.com/2014/03/99percent.png\" target=\"_blank\" rel=\"external\"><img src=\"http://img.ganlvji.com/2014/03/99percent.png\" alt=\"99percent\"></a></p>\n<p>###2、需要用到的宏：</p>\n<pre><code>#define degreesToRadians(x) (M_PI*(x)/180.0) //把角度转换成PI的方式\n#define  PROGREESS_WIDTH 80 //圆直径 \n#define PROGRESS_LINE_WIDTH 4 //弧线的宽度\n</code></pre><p>###3、CAShapeLayer<br>首先，你得要引入Core Animation框架。为了实现环形效果，需要使用到CAShapeLayer，原理是CAShapeLayer可以通过指定Path的方式实现生成一个图形，非常方便。</p>\n<p>###4、UIBezierPath</p>\n<p>由于需要画一个圆形，UIBeziperPath是非常好用的画圆形的工具。实现下面的代码可以画出上面所示的整个轨道。这个圆形是从-210度的角度到30度。</p>\n<pre><code>UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:CGPointMake(40, 40) radius:(PROGREESS_WIDTH-PROGRESS_LINE_WIDTH)/2 startAngle:degreesToRadians(-210) endAngle:degreesToRadians(30) clockwise:YES];\n</code></pre><p>###5、画出一个完成的进度的背景轨道</p>\n<p>这里原理很简单，就是使用CAShapeLayer和UIBezierPath结合起来就能够达成目标，这一步的结果如下所示：<br><a href=\"http://img.ganlvji.com/2014/03/0percent.png\" target=\"_blank\" rel=\"external\"><img src=\"http://img.ganlvji.com/2014/03/0percent.png\" alt=\"0percent\"></a></p>\n<pre><code>_trackLayer = [CAShapeLayer layer];//创建一个track shape layer\n_trackLayer.frame = self.bounds;\n[self.layer addSublayer:_trackLayer];\n_trackLayer.fillColor = [[UIColor clearColor] CGColor];\n _trackLayer.strokeColor = [_strokeColor CGColor];//指定path的渲染颜色\n_trackLayer.opacity = 0.25; //背景同学你就甘心做背景吧，不要太明显了，透明度小一点\n_trackLayer.lineCap = kCALineCapRound;//指定线的边缘是圆的\n_trackLayer.lineWidth = PROGRESS_LINE_WIDTH;//线的宽度\nUIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:CGPointMake(40, 40) radius:(PROGREESS_WIDTH-PROGRESS_LINE_WIDTH)/2 startAngle:degreesToRadians(-210) endAngle:degreesToRadians(30) clockwise:YES];//上面说明过了用来构建圆形\n_trackLayer.path =[path CGPath]; //把path传递給layer，然后layer会处理相应的渲染，整个逻辑和CoreGraph是一致的。\n</code></pre><p>###6、渐变进度条：<br>首先要明确的需求是，我们需要颜色根据百分比从红色渐变到黄色然后再到蓝色。<br>怎么实现这个颜色的渐变效果。这里我们需要使用到CAGradientLayer，CAGradientLayer是一个用来画颜色渐变的层（如果使用透明的颜色，也就可以做到透明渐变）。我们先用CAGradientLayer做出渐变效果，然后把ShapeLayer作为GradientLayer的Mask来截取出需要的部分，以此达到渐变的进度条效果。</p>\n<p>首先，需要构建出顺着弧形的颜色渐变。上面的需求我们可以分解成两部分。<br>①左半部分，颜色从红色渐变到黄色。<br>②右半部分，颜色从黄色渐变到蓝色。<br>由此可以了解到是我们需要两个CAShapeLayer。<br>为什么要这么折腾？CAShapeLayer不能顺着弧线进行渐变只能指定两个点之间进行渐变。所以只能曲线救国了。<br>先看看这个部分的效果：<br><a href=\"http://img.ganlvji.com/2014/03/gradient.png\" target=\"_blank\" rel=\"external\"><img src=\"http://img.ganlvji.com/2014/03/gradient.png\" alt=\"gradient\"></a><br>然后，创建一个新的CAShapeLayer来截取这个颜色渐变的层。<br>这部分代码如下所示：<br>            _progressLayer = [CAShapeLayer layer];<br>            _progressLayer.frame = self.bounds;<br>            _progressLayer.fillColor =  [[UIColor clearColor] CGColor];<br>            _progressLayer.strokeColor  = [PROCESS_COLOR CGColor];<br>            _progressLayer.lineCap = kCALineCapRound;<br>            _progressLayer.lineWidth = PROGRESS_LINE_WIDTH;<br>            _progressLayer.path = [path CGPath];<br>            _progressLayer.strokeEnd = 0;</p>\n<pre><code>CALayer *gradientLayer = [CALayer layer];\nCAGradientLayer *gradientLayer1 =  [CAGradientLayer layer];\ngradientLayer1.frame = CGRectMake(0, 0, self.width/2, self.height);\n[gradientLayer1 setColors:[NSArray arrayWithObjects:(id)[[UIColor redColor] CGColor],(id)[UIColorFromRGB(0xfde802) CGColor], nil]];\n[gradientLayer1 setLocations:@[@0.5,@0.9,@1 ]];\n[gradientLayer1 setStartPoint:CGPointMake(0.5, 1)];\n[gradientLayer1 setEndPoint:CGPointMake(0.5, 0)];\n[gradientLayer addSublayer:gradientLayer1];\n\nCAGradientLayer *gradientLayer2 =  [CAGradientLayer layer];\n[gradientLayer2 setLocations:@[@0.1,@0.5,@1]];\ngradientLayer2.frame = CGRectMake(self.width/2, 0, self.width/2, self.height);\n[gradientLayer2 setColors:[NSArray arrayWithObjects:(id)[UIColorFromRGB(0xfde802) CGColor],(id)[MAIN_BLUE CGColor], nil]];\n[gradientLayer2 setStartPoint:CGPointMake(0.5, 0)];\n[gradientLayer2 setEndPoint:CGPointMake(0.5, 1)];\n[gradientLayer addSublayer:gradientLayer2];\n\n[gradientLayer setMask:_progressLayer]; //用progressLayer来截取渐变层\n[self.layer addSublayer:gradientLayer];\n</code></pre><p>###7、进度条效果<br>走到上面一步我们得到的效果是一个进度为100%的效果，_progressLayer的长度和_trackLayer的长度是一样的。那么怎么解决百分比的问题呢？<br>CAShapeLayer有一个strokeEnd的属性，这个属性是从0到1的浮点类型，正好可以用表达百分比，而且这个属性是animatable，可以动态的表示进度的变化。<br>如下代码所示：<br>    -(void)setPercent:(NSInteger)percent animated:(BOOL)animated<br>    {<br>        [CATransaction begin];<br>        [CATransaction setDisableActions:!animated];<br>        [CATransaction setAnimationTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn]];<br>        [CATransaction setAnimationDuration:MAIN_SCREEN_ANIMATION_TIME];<br>        _progressLayer.strokeEnd = percent/100.0;<br>        [CATransaction commit];</p>\n<pre><code>    _percent = percent;\n}\n</code></pre>","excerpt":"","more":"<p>转自：<a href=\"https://www.ganlvji.com/gradient_circle_progress/###1、先来一个结果\">https://www.ganlvji.com/gradient_circle_progress/###1、先来一个结果</a><br>80%的状态：<br><a href=\"http://img.ganlvji.com/2014/03/80percent.png\"><img src=\"http://img.ganlvji.com/2014/03/80percent.png\" alt=\"80percent\"></a><br>99%的状态:<br><a href=\"http://img.ganlvji.com/2014/03/99percent.png\"><img src=\"http://img.ganlvji.com/2014/03/99percent.png\" alt=\"99percent\"></a></p>\n<p>###2、需要用到的宏：</p>\n<pre><code>#define degreesToRadians(x) (M_PI*(x)/180.0) //把角度转换成PI的方式\n#define  PROGREESS_WIDTH 80 //圆直径 \n#define PROGRESS_LINE_WIDTH 4 //弧线的宽度\n</code></pre><p>###3、CAShapeLayer<br>首先，你得要引入Core Animation框架。为了实现环形效果，需要使用到CAShapeLayer，原理是CAShapeLayer可以通过指定Path的方式实现生成一个图形，非常方便。</p>\n<p>###4、UIBezierPath</p>\n<p>由于需要画一个圆形，UIBeziperPath是非常好用的画圆形的工具。实现下面的代码可以画出上面所示的整个轨道。这个圆形是从-210度的角度到30度。</p>\n<pre><code>UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:CGPointMake(40, 40) radius:(PROGREESS_WIDTH-PROGRESS_LINE_WIDTH)/2 startAngle:degreesToRadians(-210) endAngle:degreesToRadians(30) clockwise:YES];\n</code></pre><p>###5、画出一个完成的进度的背景轨道</p>\n<p>这里原理很简单，就是使用CAShapeLayer和UIBezierPath结合起来就能够达成目标，这一步的结果如下所示：<br><a href=\"http://img.ganlvji.com/2014/03/0percent.png\"><img src=\"http://img.ganlvji.com/2014/03/0percent.png\" alt=\"0percent\"></a></p>\n<pre><code>_trackLayer = [CAShapeLayer layer];//创建一个track shape layer\n_trackLayer.frame = self.bounds;\n[self.layer addSublayer:_trackLayer];\n_trackLayer.fillColor = [[UIColor clearColor] CGColor];\n _trackLayer.strokeColor = [_strokeColor CGColor];//指定path的渲染颜色\n_trackLayer.opacity = 0.25; //背景同学你就甘心做背景吧，不要太明显了，透明度小一点\n_trackLayer.lineCap = kCALineCapRound;//指定线的边缘是圆的\n_trackLayer.lineWidth = PROGRESS_LINE_WIDTH;//线的宽度\nUIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:CGPointMake(40, 40) radius:(PROGREESS_WIDTH-PROGRESS_LINE_WIDTH)/2 startAngle:degreesToRadians(-210) endAngle:degreesToRadians(30) clockwise:YES];//上面说明过了用来构建圆形\n_trackLayer.path =[path CGPath]; //把path传递給layer，然后layer会处理相应的渲染，整个逻辑和CoreGraph是一致的。\n</code></pre><p>###6、渐变进度条：<br>首先要明确的需求是，我们需要颜色根据百分比从红色渐变到黄色然后再到蓝色。<br>怎么实现这个颜色的渐变效果。这里我们需要使用到CAGradientLayer，CAGradientLayer是一个用来画颜色渐变的层（如果使用透明的颜色，也就可以做到透明渐变）。我们先用CAGradientLayer做出渐变效果，然后把ShapeLayer作为GradientLayer的Mask来截取出需要的部分，以此达到渐变的进度条效果。</p>\n<p>首先，需要构建出顺着弧形的颜色渐变。上面的需求我们可以分解成两部分。<br>①左半部分，颜色从红色渐变到黄色。<br>②右半部分，颜色从黄色渐变到蓝色。<br>由此可以了解到是我们需要两个CAShapeLayer。<br>为什么要这么折腾？CAShapeLayer不能顺着弧线进行渐变只能指定两个点之间进行渐变。所以只能曲线救国了。<br>先看看这个部分的效果：<br><a href=\"http://img.ganlvji.com/2014/03/gradient.png\"><img src=\"http://img.ganlvji.com/2014/03/gradient.png\" alt=\"gradient\"></a><br>然后，创建一个新的CAShapeLayer来截取这个颜色渐变的层。<br>这部分代码如下所示：<br>            _progressLayer = [CAShapeLayer layer];<br>            _progressLayer.frame = self.bounds;<br>            _progressLayer.fillColor =  [[UIColor clearColor] CGColor];<br>            _progressLayer.strokeColor  = [PROCESS_COLOR CGColor];<br>            _progressLayer.lineCap = kCALineCapRound;<br>            _progressLayer.lineWidth = PROGRESS_LINE_WIDTH;<br>            _progressLayer.path = [path CGPath];<br>            _progressLayer.strokeEnd = 0;</p>\n<pre><code>CALayer *gradientLayer = [CALayer layer];\nCAGradientLayer *gradientLayer1 =  [CAGradientLayer layer];\ngradientLayer1.frame = CGRectMake(0, 0, self.width/2, self.height);\n[gradientLayer1 setColors:[NSArray arrayWithObjects:(id)[[UIColor redColor] CGColor],(id)[UIColorFromRGB(0xfde802) CGColor], nil]];\n[gradientLayer1 setLocations:@[@0.5,@0.9,@1 ]];\n[gradientLayer1 setStartPoint:CGPointMake(0.5, 1)];\n[gradientLayer1 setEndPoint:CGPointMake(0.5, 0)];\n[gradientLayer addSublayer:gradientLayer1];\n\nCAGradientLayer *gradientLayer2 =  [CAGradientLayer layer];\n[gradientLayer2 setLocations:@[@0.1,@0.5,@1]];\ngradientLayer2.frame = CGRectMake(self.width/2, 0, self.width/2, self.height);\n[gradientLayer2 setColors:[NSArray arrayWithObjects:(id)[UIColorFromRGB(0xfde802) CGColor],(id)[MAIN_BLUE CGColor], nil]];\n[gradientLayer2 setStartPoint:CGPointMake(0.5, 0)];\n[gradientLayer2 setEndPoint:CGPointMake(0.5, 1)];\n[gradientLayer addSublayer:gradientLayer2];\n\n[gradientLayer setMask:_progressLayer]; //用progressLayer来截取渐变层\n[self.layer addSublayer:gradientLayer];\n</code></pre><p>###7、进度条效果<br>走到上面一步我们得到的效果是一个进度为100%的效果，_progressLayer的长度和_trackLayer的长度是一样的。那么怎么解决百分比的问题呢？<br>CAShapeLayer有一个strokeEnd的属性，这个属性是从0到1的浮点类型，正好可以用表达百分比，而且这个属性是animatable，可以动态的表示进度的变化。<br>如下代码所示：<br>    -(void)setPercent:(NSInteger)percent animated:(BOOL)animated<br>    {<br>        [CATransaction begin];<br>        [CATransaction setDisableActions:!animated];<br>        [CATransaction setAnimationTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn]];<br>        [CATransaction setAnimationDuration:MAIN_SCREEN_ANIMATION_TIME];<br>        _progressLayer.strokeEnd = percent/100.0;<br>        [CATransaction commit];</p>\n<pre><code>    _percent = percent;\n}\n</code></pre>"},{"title":"iOS开发拓展篇—CoreLocation简单介绍","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n**一、简介**\n1.在移动互联网时代，移动app能解决用户的很多生活琐事，比如\n（1）导航：去任意陌生的地方\n（2）周边：找餐馆、找酒店、找银行、找电影院\n \n2.在上述应用中，都用到了地图和定位功能，在iOS开发中，要想加入这2大功能，必须基于2个框架进行开发\n（1）Map Kit ：用于地图展示\n（2）Core Location ：用于地理定位\n \n3.两个热门专业术语\n（1）LBS ：Location Based Service（基于定位的服务）\n（2）SoLoMo ：Social Local Mobile（索罗门）\n \n**二、CoreLocation框架的使用**\n1.CoreLocation框架使用前提\n（1）导入框架\n　　![](http://images.cnitblog.com/i/450136/201408/091531084436493.png) \n说明：在Xcode5以后，不再需要我们手动导入\n（2）导入主头文件\n　　#import <CoreLocation/CoreLocation.h>\n \n2.CoreLocation框架使用须知\nCoreLocation框架中所有数据类型的前缀都是CL\nCoreLocation中使用CLLocationManager对象来做用户定位\n \n**三、经纬度等地理信息扫盲**\n1.示意图\n**　　![](http://images.cnitblog.com/i/450136/201408/091533193501020.png)**\n2.本初子午线：穿过英国伦敦格林文治天文台\n往东边（右边）走，是东经（E）\n往西边（左边）走，是西经（W）\n东西经各180°，总共360°\n \n3.赤道：零度维度\n往北边（上边）走，是北纬（N）\n往南边（下边）走，是南纬（S）\n南北纬各90°，总共180°\n \n提示：横跨经度\\纬度越大（1° ≈ 111km），表示的范围就越大，在地图上看到的东西就越小\n4.我国的经纬度:\n（1）中国的经纬度范围\n纬度范围：N 3°51′ ~  N 53°33′\n经度范围：E 73°33′ ~  E 135°05′\n（2）部分城市的经纬度\n　　![](http://images.cnitblog.com/i/450136/201408/091536473652603.png)\n \n**四、模拟位置**\n说明：在对程序进行测试的时候，设置手机模拟器的模拟位置（经纬度）\n![](http://images.cnitblog.com/i/450136/201408/091538586931958.png)    ![](http://images.cnitblog.com/i/450136/201408/091539108818080.png)\n","source":"_posts/oc/iOS开发拓展篇—CoreLocation简单介绍.md","raw":"---\ntitle: iOS开发拓展篇—CoreLocation简单介绍\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n**一、简介**\n1.在移动互联网时代，移动app能解决用户的很多生活琐事，比如\n（1）导航：去任意陌生的地方\n（2）周边：找餐馆、找酒店、找银行、找电影院\n \n2.在上述应用中，都用到了地图和定位功能，在iOS开发中，要想加入这2大功能，必须基于2个框架进行开发\n（1）Map Kit ：用于地图展示\n（2）Core Location ：用于地理定位\n \n3.两个热门专业术语\n（1）LBS ：Location Based Service（基于定位的服务）\n（2）SoLoMo ：Social Local Mobile（索罗门）\n \n**二、CoreLocation框架的使用**\n1.CoreLocation框架使用前提\n（1）导入框架\n　　![](http://images.cnitblog.com/i/450136/201408/091531084436493.png) \n说明：在Xcode5以后，不再需要我们手动导入\n（2）导入主头文件\n　　#import <CoreLocation/CoreLocation.h>\n \n2.CoreLocation框架使用须知\nCoreLocation框架中所有数据类型的前缀都是CL\nCoreLocation中使用CLLocationManager对象来做用户定位\n \n**三、经纬度等地理信息扫盲**\n1.示意图\n**　　![](http://images.cnitblog.com/i/450136/201408/091533193501020.png)**\n2.本初子午线：穿过英国伦敦格林文治天文台\n往东边（右边）走，是东经（E）\n往西边（左边）走，是西经（W）\n东西经各180°，总共360°\n \n3.赤道：零度维度\n往北边（上边）走，是北纬（N）\n往南边（下边）走，是南纬（S）\n南北纬各90°，总共180°\n \n提示：横跨经度\\纬度越大（1° ≈ 111km），表示的范围就越大，在地图上看到的东西就越小\n4.我国的经纬度:\n（1）中国的经纬度范围\n纬度范围：N 3°51′ ~  N 53°33′\n经度范围：E 73°33′ ~  E 135°05′\n（2）部分城市的经纬度\n　　![](http://images.cnitblog.com/i/450136/201408/091536473652603.png)\n \n**四、模拟位置**\n说明：在对程序进行测试的时候，设置手机模拟器的模拟位置（经纬度）\n![](http://images.cnitblog.com/i/450136/201408/091538586931958.png)    ![](http://images.cnitblog.com/i/450136/201408/091539108818080.png)\n","slug":"oc/iOS开发拓展篇—CoreLocation简单介绍","published":1,"updated":"2016-10-08T09:11:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms985003021xwhvez7cg5","content":"<a id=\"more\"></a>\n<p><strong>一、简介</strong><br>1.在移动互联网时代，移动app能解决用户的很多生活琐事，比如<br>（1）导航：去任意陌生的地方<br>（2）周边：找餐馆、找酒店、找银行、找电影院</p>\n<p>2.在上述应用中，都用到了地图和定位功能，在iOS开发中，要想加入这2大功能，必须基于2个框架进行开发<br>（1）Map Kit ：用于地图展示<br>（2）Core Location ：用于地理定位</p>\n<p>3.两个热门专业术语<br>（1）LBS ：Location Based Service（基于定位的服务）<br>（2）SoLoMo ：Social Local Mobile（索罗门）</p>\n<p><strong>二、CoreLocation框架的使用</strong><br>1.CoreLocation框架使用前提<br>（1）导入框架<br>　　<img src=\"http://images.cnitblog.com/i/450136/201408/091531084436493.png\" alt=\"\"><br>说明：在Xcode5以后，不再需要我们手动导入<br>（2）导入主头文件<br>　　#import <corelocation corelocation.h=\"\"></corelocation></p>\n<p>2.CoreLocation框架使用须知<br>CoreLocation框架中所有数据类型的前缀都是CL<br>CoreLocation中使用CLLocationManager对象来做用户定位</p>\n<p><strong>三、经纬度等地理信息扫盲</strong><br>1.示意图<br><strong>　　<img src=\"http://images.cnitblog.com/i/450136/201408/091533193501020.png\" alt=\"\"></strong><br>2.本初子午线：穿过英国伦敦格林文治天文台<br>往东边（右边）走，是东经（E）<br>往西边（左边）走，是西经（W）<br>东西经各180°，总共360°</p>\n<p>3.赤道：零度维度<br>往北边（上边）走，是北纬（N）<br>往南边（下边）走，是南纬（S）<br>南北纬各90°，总共180°</p>\n<p>提示：横跨经度\\纬度越大（1° ≈ 111km），表示的范围就越大，在地图上看到的东西就越小<br>4.我国的经纬度:<br>（1）中国的经纬度范围<br>纬度范围：N 3°51′ ~  N 53°33′<br>经度范围：E 73°33′ ~  E 135°05′<br>（2）部分城市的经纬度<br>　　<img src=\"http://images.cnitblog.com/i/450136/201408/091536473652603.png\" alt=\"\"></p>\n<p><strong>四、模拟位置</strong><br>说明：在对程序进行测试的时候，设置手机模拟器的模拟位置（经纬度）<br><img src=\"http://images.cnitblog.com/i/450136/201408/091538586931958.png\" alt=\"\">    <img src=\"http://images.cnitblog.com/i/450136/201408/091539108818080.png\" alt=\"\"></p>\n","excerpt":"","more":"<p><strong>一、简介</strong><br>1.在移动互联网时代，移动app能解决用户的很多生活琐事，比如<br>（1）导航：去任意陌生的地方<br>（2）周边：找餐馆、找酒店、找银行、找电影院</p>\n<p>2.在上述应用中，都用到了地图和定位功能，在iOS开发中，要想加入这2大功能，必须基于2个框架进行开发<br>（1）Map Kit ：用于地图展示<br>（2）Core Location ：用于地理定位</p>\n<p>3.两个热门专业术语<br>（1）LBS ：Location Based Service（基于定位的服务）<br>（2）SoLoMo ：Social Local Mobile（索罗门）</p>\n<p><strong>二、CoreLocation框架的使用</strong><br>1.CoreLocation框架使用前提<br>（1）导入框架<br>　　<img src=\"http://images.cnitblog.com/i/450136/201408/091531084436493.png\" alt=\"\"><br>说明：在Xcode5以后，不再需要我们手动导入<br>（2）导入主头文件<br>　　#import <CoreLocation/CoreLocation.h></p>\n<p>2.CoreLocation框架使用须知<br>CoreLocation框架中所有数据类型的前缀都是CL<br>CoreLocation中使用CLLocationManager对象来做用户定位</p>\n<p><strong>三、经纬度等地理信息扫盲</strong><br>1.示意图<br><strong>　　<img src=\"http://images.cnitblog.com/i/450136/201408/091533193501020.png\" alt=\"\"></strong><br>2.本初子午线：穿过英国伦敦格林文治天文台<br>往东边（右边）走，是东经（E）<br>往西边（左边）走，是西经（W）<br>东西经各180°，总共360°</p>\n<p>3.赤道：零度维度<br>往北边（上边）走，是北纬（N）<br>往南边（下边）走，是南纬（S）<br>南北纬各90°，总共180°</p>\n<p>提示：横跨经度\\纬度越大（1° ≈ 111km），表示的范围就越大，在地图上看到的东西就越小<br>4.我国的经纬度:<br>（1）中国的经纬度范围<br>纬度范围：N 3°51′ ~  N 53°33′<br>经度范围：E 73°33′ ~  E 135°05′<br>（2）部分城市的经纬度<br>　　<img src=\"http://images.cnitblog.com/i/450136/201408/091536473652603.png\" alt=\"\"></p>\n<p><strong>四、模拟位置</strong><br>说明：在对程序进行测试的时候，设置手机模拟器的模拟位置（经纬度）<br><img src=\"http://images.cnitblog.com/i/450136/201408/091538586931958.png\" alt=\"\">    <img src=\"http://images.cnitblog.com/i/450136/201408/091539108818080.png\" alt=\"\"></p>"},{"title":"iOS之CF和OC之间类型转换","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n转自：http://blog.csdn.net/annkey123/article/details/8271806\n\n自 Xcode4.2 开始导入ARC机制后，为了支持对象间的转型，Apple又增加了许多转型用的关键字。这一讲我们就来了解其用法，以及产生的理由。\n###[]()[]()引子\n我们先来看一下ARC无效的时候，我们写id类型转void*类型的写法：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSObject</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> alloc</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">]</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> init</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> obj</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li></ol>\n```\n反过来，当把void*对象变回id类型时，只是简单地如下来写，\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> p</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">obj release</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li></ol>\n```\n但是上面的代码在ARC有效时，就有了下面的错误：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    error</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">:</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">implicit</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> conversion of an </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">Objective</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">-</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">C pointer</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">        to </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">’</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*’</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">is</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> disallowed </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">with</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> ARC</span></span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">        </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> obj</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">                  </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">^</span></span></li><li class=\"L4\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L5\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    error</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">:</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">implicit</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> conversion of a non</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">-</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">Objective</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">-</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">C pointer</span></span></li><li class=\"L6\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">        type </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">’</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*’</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> to </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">’</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">’</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">is</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> disallowed </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">with</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> ARC</span></span></li><li class=\"L7\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">        id o </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> p</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L8\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">                </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">^</span></span></li></ol>\n```\n\n###[]()[]()[]()__bridge\n为了解决这一问题，我们使用 __bridge 关键字来实现id类型与void*类型的相互转换。看下面的例子。\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSObject</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> alloc</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">]</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> init</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">obj</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L4\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id o </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li></ol>\n```\n将Objective-C的对象类型用 __bridge 转换为 void* 类型和使用 __unsafe_unretained 关键字修饰的变量是一样的。被代入对象的所有者需要明确对象生命周期的管理，不要出现异常访问的问题。\n除过 __bridge 以外，还有两个 __bridge 相关的类型转换关键字：\n- __bridge_retained\n- __bridge_transfer\n\n接下来，我们将看看这两个关键字的区别。\n####[]()[]()[]()__bridge_retained\n先来看使用 __bridge_retained 关键字的例子程序：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSObject</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> alloc</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">]</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> init</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge_retained </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">obj</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li></ol>\n```\n从名字上我们应该能理解其意义：类型被转换时，其对象的所有权也将被变换后变量所持有。如果不是ARC代码，类似下面的实现：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSObject</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> alloc</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">]</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> init</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> obj</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p retain</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li></ol>\n```\n可以用一个实际的例子验证，对象所有权是否被持有。\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"lit\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">0</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">{</span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSObject</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> alloc</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">]</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> init</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li><li class=\"L4\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    p </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge_retained </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">obj</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L5\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">}</span></li><li class=\"L6\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L7\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSLog</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(@</span><span class=\"str\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">\"class=%@\"</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">,</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">class</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">]);</span></span></li></ol>\n```\n出了大括号的范围后，p 仍然指向一个有效的实体。说明他拥有该对象的所有权，该对象没有因为出其定义范围而被销毁。\n####[]()[]()[]()__bridge_transfer\n相反，当想把本来拥有对象所有权的变量，在类型转换后，让其释放原先所有权的时候，需要使用 __bridge_transfer 关键字。文字有点绕口，我们还是来看一段代码吧。\n如果ARC无效的时候，我们可能需要写下面的代码。\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"com\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">// p 变量原先持有对象的所有权</span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">obj retain</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p release</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li></ol>\n```\n那么ARC有效后，我们可以用下面的代码来替换：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"com\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">// p 变量原先持有对象的所有权</span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge_transfer id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li></ol>\n```\n可以看出来，__bridge_retained 是编译器替我们做了 retain 操作，而 __bridge_transfer 是替我们做了 release[](http://www.yifeiyang.net/development-of-the-iphone-simply-6/#fn.1)1。\n###[]()[]()[]()Toll-Free bridged\n在iOS世界，主要有两种对象：Objective-C 对象和 Core Foundation 对象0。Core Foundation 对象主要是有C语言实现的 Core Foundation Framework 的对象，其中也有对象引用计数的概念，只是不是 Cocoa Framework::Foundation Framework 的 retain/release，而是自身的 CFRetain/CFRelease 接口。\n这两种对象间可以互相转换和操作，不使用ARC的时候，单纯的用C原因的类型转换，不需要消耗CPU的资源，所以叫做 Toll-Free bridged。比如 NSArray和CFArrayRef, NSString和CFStringRef，他们虽然属于不同的 Framework，但是具有相同的对象结构，所以可以用标准C的类型转换。\n比如不使用ARC时，我们用下面的代码：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> stringWithFormat</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">:...];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> cfString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li></ol>\n```\n同样，Core Foundation类型向Objective-C类型转换时，也是简单地用标准C的类型转换即可。\n但是在ARC有效的情况下，将出现类似下面的编译错误：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">Cast</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> of </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">Objective</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">-</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">C pointer type </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">‘</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*’</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> to C pointer type </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">‘</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">’</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">aka </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">‘</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">const</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">struct</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> __CFString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*’)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> requires a bridged cast</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">Use</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> __bridge to convert directly </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">no</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> change </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">in</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> ownership</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span></span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">Use</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> __bridge_retained to make an ARC </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">object</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> available </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">as</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> a </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">+</span><span class=\"lit\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">1</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">‘</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">’</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">aka </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">‘</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">const</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">struct</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> __CFString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*’)</span></span></li></ol>\n```\n错误中已经提示了我们需要怎样做：用 __bridge 或者 __bridge_retained 来转型，其差别就是变更对象的所有权。\n正因为Objective-C是ARC管理的对象，而Core Foundation不是ARC管理的对象，所以才要特意这样转换，这与id类型向void*转换是一个概念。也就是说，当这两种类型（有ARC管理，没有ARC管理）在转换时，需要告诉编译器怎样处理对象的所有权。\n上面的例子，使用 __bridge/__bridge_retained 后的代码如下：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> stringWithFormat</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">:...];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> cfString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li></ol>\n```\n只是单纯地执行了类型转换，没有进行所有权的转移，也就是说，当string对象被释放的时候，cfString也不能被使用了。\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> stringWithFormat</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">:...];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> cfString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge_retained </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">...</span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFRelease</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">cfString</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">);</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"com\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">// 由于Core Foundation的对象不属于ARC的管理范畴，所以需要自己release</span></span></li></ol>\n```\n使用 __bridge_retained 可以通过转换目标处（cfString）的 retain 处理，来使所有权转移。即使 string 变量被释放，cfString 还是可以使用具体的对象。只是有一点，由于Core Foundation的对象不属于ARC的管理范畴，所以需要自己release。\n实际上，Core Foundation 内部，为了实现Core Foundation对象类型与Objective-C对象类型的相互转换，提供了下面的函数。\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFTypeRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">  </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFBridgingRetain</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id  X</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">  </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">{</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">return</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">  </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge_retained  </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFTypeRef</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">X</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">}</span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L4\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id  </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFBridgingRelease</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFTypeRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">  X</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">  </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">{</span></span></li><li class=\"L5\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">return</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">  </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge_transfer  id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">X</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L6\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">}</span></li></ol>\n```\n所以，可以用 CFBridgingRetain 替代 __bridge_retained 关键字：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> stringWithFormat</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">:...];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> cfString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFBridgingRetain</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">);</span></span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">...</span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFRelease</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">cfString</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">);</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"com\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">// 由于Core Foundation不在ARC管理范围内，所以需要主动release。</span></span></li></ol>\n```\n__bridge_transfer所有权被转移的同时，被转换变量将失去对象的所有权。当Core Foundation对象类型向Objective-C对象类型转换的时候，会经常用到 __bridge_transfer 关键字。\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> cfString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringCreate</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">...();</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge_transfer </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">cfString</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"com\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">// CFRelease(cfString); 因为已经用 __bridge_transfer 转移了对象的所有权，所以不需要调用 release</span></li></ol>\n```\n同样，我们可以使用 CFBridgingRelease() 来代替 __bridge_transfer 关键字。\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> cfString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringCreate</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">...();</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFBridgingRelease</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">cfString</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">);</span></span></li></ol>\n```\n###[]()[]()[]()总结\n由上面的学习我们了解到 ARC 中类型转换的用法，那么我们实际使用中按照怎样的原则或者方法来区分使用呢，下面我总结了几点关键要素。\n- 明确被转换类型是否是 ARC 管理的对象- Core Foundation 对象类型不在 ARC 管理范畴内\n- Cocoa Framework::Foundation 对象类型（即一般使用到的Objectie-C对象类型）在 ARC 的管理范畴内\n\n\n- 如果不在 ARC 管理范畴内的对象，那么要清楚 release 的责任应该是谁\n- 各种对象的生命周期是怎样的\n\n***\n[](http://www.yifeiyang.net/development-of-the-iphone-simply-6/#fnr.1)1. 声明 id obj 的时候，其实是缺省的申明了一个 __strong 修饰的变量，所以编译器自动地加入了\n retain 的处理，所以说 __bridge_transfer 关键字只为我们做了 release 处理。\n","source":"_posts/oc/iOS之CF和OC之间类型转换.md","raw":"---\ntitle: iOS之CF和OC之间类型转换\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n转自：http://blog.csdn.net/annkey123/article/details/8271806\n\n自 Xcode4.2 开始导入ARC机制后，为了支持对象间的转型，Apple又增加了许多转型用的关键字。这一讲我们就来了解其用法，以及产生的理由。\n###[]()[]()引子\n我们先来看一下ARC无效的时候，我们写id类型转void*类型的写法：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSObject</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> alloc</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">]</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> init</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> obj</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li></ol>\n```\n反过来，当把void*对象变回id类型时，只是简单地如下来写，\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> p</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">obj release</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li></ol>\n```\n但是上面的代码在ARC有效时，就有了下面的错误：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    error</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">:</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">implicit</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> conversion of an </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">Objective</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">-</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">C pointer</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">        to </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">’</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*’</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">is</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> disallowed </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">with</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> ARC</span></span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">        </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> obj</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">                  </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">^</span></span></li><li class=\"L4\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L5\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    error</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">:</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">implicit</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> conversion of a non</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">-</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">Objective</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">-</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">C pointer</span></span></li><li class=\"L6\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">        type </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">’</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*’</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> to </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">’</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">’</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">is</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> disallowed </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">with</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> ARC</span></span></li><li class=\"L7\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">        id o </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> p</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L8\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">                </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">^</span></span></li></ol>\n```\n\n###[]()[]()[]()__bridge\n为了解决这一问题，我们使用 __bridge 关键字来实现id类型与void*类型的相互转换。看下面的例子。\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSObject</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> alloc</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">]</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> init</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">obj</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L4\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id o </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li></ol>\n```\n将Objective-C的对象类型用 __bridge 转换为 void* 类型和使用 __unsafe_unretained 关键字修饰的变量是一样的。被代入对象的所有者需要明确对象生命周期的管理，不要出现异常访问的问题。\n除过 __bridge 以外，还有两个 __bridge 相关的类型转换关键字：\n- __bridge_retained\n- __bridge_transfer\n\n接下来，我们将看看这两个关键字的区别。\n####[]()[]()[]()__bridge_retained\n先来看使用 __bridge_retained 关键字的例子程序：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSObject</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> alloc</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">]</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> init</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge_retained </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">obj</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li></ol>\n```\n从名字上我们应该能理解其意义：类型被转换时，其对象的所有权也将被变换后变量所持有。如果不是ARC代码，类似下面的实现：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSObject</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> alloc</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">]</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> init</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> obj</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p retain</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li></ol>\n```\n可以用一个实际的例子验证，对象所有权是否被持有。\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"lit\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">0</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">{</span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSObject</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> alloc</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">]</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> init</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li><li class=\"L4\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    p </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge_retained </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">void</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">obj</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L5\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">}</span></li><li class=\"L6\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L7\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSLog</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(@</span><span class=\"str\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">\"class=%@\"</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">,</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">class</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">]);</span></span></li></ol>\n```\n出了大括号的范围后，p 仍然指向一个有效的实体。说明他拥有该对象的所有权，该对象没有因为出其定义范围而被销毁。\n####[]()[]()[]()__bridge_transfer\n相反，当想把本来拥有对象所有权的变量，在类型转换后，让其释放原先所有权的时候，需要使用 __bridge_transfer 关键字。文字有点绕口，我们还是来看一段代码吧。\n如果ARC无效的时候，我们可能需要写下面的代码。\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"com\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">// p 变量原先持有对象的所有权</span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">obj retain</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p release</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">];</span></span></li></ol>\n```\n那么ARC有效后，我们可以用下面的代码来替换：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"com\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">// p 变量原先持有对象的所有权</span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id obj </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge_transfer id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">p</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li></ol>\n```\n可以看出来，__bridge_retained 是编译器替我们做了 retain 操作，而 __bridge_transfer 是替我们做了 release[](http://www.yifeiyang.net/development-of-the-iphone-simply-6/#fn.1)1。\n###[]()[]()[]()Toll-Free bridged\n在iOS世界，主要有两种对象：Objective-C 对象和 Core Foundation 对象0。Core Foundation 对象主要是有C语言实现的 Core Foundation Framework 的对象，其中也有对象引用计数的概念，只是不是 Cocoa Framework::Foundation Framework 的 retain/release，而是自身的 CFRetain/CFRelease 接口。\n这两种对象间可以互相转换和操作，不使用ARC的时候，单纯的用C原因的类型转换，不需要消耗CPU的资源，所以叫做 Toll-Free bridged。比如 NSArray和CFArrayRef, NSString和CFStringRef，他们虽然属于不同的 Framework，但是具有相同的对象结构，所以可以用标准C的类型转换。\n比如不使用ARC时，我们用下面的代码：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> stringWithFormat</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">:...];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> cfString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li></ol>\n```\n同样，Core Foundation类型向Objective-C类型转换时，也是简单地用标准C的类型转换即可。\n但是在ARC有效的情况下，将出现类似下面的编译错误：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">Cast</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> of </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">Objective</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">-</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">C pointer type </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">‘</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*’</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> to C pointer type </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">‘</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">’</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">aka </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">‘</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">const</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">struct</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> __CFString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*’)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> requires a bridged cast</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">Use</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> __bridge to convert directly </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">no</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> change </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">in</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> ownership</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span></span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">Use</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> __bridge_retained to make an ARC </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">object</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> available </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">as</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> a </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">+</span><span class=\"lit\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">1</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">‘</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">’</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">aka </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">‘</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">const</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">struct</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> __CFString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*’)</span></span></li></ol>\n```\n错误中已经提示了我们需要怎样做：用 __bridge 或者 __bridge_retained 来转型，其差别就是变更对象的所有权。\n正因为Objective-C是ARC管理的对象，而Core Foundation不是ARC管理的对象，所以才要特意这样转换，这与id类型向void*转换是一个概念。也就是说，当这两种类型（有ARC管理，没有ARC管理）在转换时，需要告诉编译器怎样处理对象的所有权。\n上面的例子，使用 __bridge/__bridge_retained 后的代码如下：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> stringWithFormat</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">:...];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> cfString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li></ol>\n```\n只是单纯地执行了类型转换，没有进行所有权的转移，也就是说，当string对象被释放的时候，cfString也不能被使用了。\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> stringWithFormat</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">:...];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> cfString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge_retained </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">...</span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFRelease</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">cfString</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">);</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"com\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">// 由于Core Foundation的对象不属于ARC的管理范畴，所以需要自己release</span></span></li></ol>\n```\n使用 __bridge_retained 可以通过转换目标处（cfString）的 retain 处理，来使所有权转移。即使 string 变量被释放，cfString 还是可以使用具体的对象。只是有一点，由于Core Foundation的对象不属于ARC的管理范畴，所以需要自己release。\n实际上，Core Foundation 内部，为了实现Core Foundation对象类型与Objective-C对象类型的相互转换，提供了下面的函数。\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFTypeRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">  </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFBridgingRetain</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id  X</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">  </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">{</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">return</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">  </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge_retained  </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFTypeRef</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">X</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">}</span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L4\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">id  </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFBridgingRelease</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFTypeRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">  X</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">  </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">{</span></span></li><li class=\"L5\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">    </span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">return</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">  </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge_transfer  id</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">X</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L6\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">}</span></li></ol>\n```\n所以，可以用 CFBridgingRetain 替代 __bridge_retained 关键字：\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">[</span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> stringWithFormat</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">:...];</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> cfString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFBridgingRetain</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">);</span></span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">...</span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFRelease</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">cfString</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">);</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"com\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">// 由于Core Foundation不在ARC管理范围内，所以需要主动release。</span></span></li></ol>\n```\n__bridge_transfer所有权被转移的同时，被转换变量将失去对象的所有权。当Core Foundation对象类型向Objective-C对象类型转换的时候，会经常用到 __bridge_transfer 关键字。\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> cfString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringCreate</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">...();</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">__bridge_transfer </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*)</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">cfString</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">;</span></span></li><li class=\"L2\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\"> </span></li><li class=\"L3\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span class=\"com\" style=\"border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);\">// CFRelease(cfString); 因为已经用 __bridge_transfer 转移了对象的所有权，所以不需要调用 release</span></li></ol>\n```\n同样，我们可以使用 CFBridgingRelease() 来代替 __bridge_transfer 关键字。\n\n```wp-code-highlight prettyprint linenums:1\n<ol class=\"linenums\" style=\"border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;\"><li value=\"1\" class=\"L0\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringRef</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> cfString </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFStringCreate</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">...();</span></span></li><li class=\"L1\" style=\"border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;\"><span style=\"background-color: rgb(255, 255, 255);\"><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">NSString</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">*</span><span class=\"kwd\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">string</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">=</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\"> </span><span class=\"typ\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">CFBridgingRelease</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">(</span><span class=\"pln\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">cfString</span><span class=\"pun\" style=\"border-width: 0px; margin: 0px; padding: 0px;\">);</span></span></li></ol>\n```\n###[]()[]()[]()总结\n由上面的学习我们了解到 ARC 中类型转换的用法，那么我们实际使用中按照怎样的原则或者方法来区分使用呢，下面我总结了几点关键要素。\n- 明确被转换类型是否是 ARC 管理的对象- Core Foundation 对象类型不在 ARC 管理范畴内\n- Cocoa Framework::Foundation 对象类型（即一般使用到的Objectie-C对象类型）在 ARC 的管理范畴内\n\n\n- 如果不在 ARC 管理范畴内的对象，那么要清楚 release 的责任应该是谁\n- 各种对象的生命周期是怎样的\n\n***\n[](http://www.yifeiyang.net/development-of-the-iphone-simply-6/#fnr.1)1. 声明 id obj 的时候，其实是缺省的申明了一个 __strong 修饰的变量，所以编译器自动地加入了\n retain 的处理，所以说 __bridge_transfer 关键字只为我们做了 release 处理。\n","slug":"oc/iOS之CF和OC之间类型转换","published":1,"updated":"2016-10-08T09:16:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms987003221xwh6ny5k98","content":"<a id=\"more\"></a>\n<p>转自：<a href=\"http://blog.csdn.net/annkey123/article/details/8271806\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/annkey123/article/details/8271806</a></p>\n<p>自 Xcode4.2 开始导入ARC机制后，为了支持对象间的转型，Apple又增加了许多转型用的关键字。这一讲我们就来了解其用法，以及产生的理由。</p>\n<p>###<a href=\"\"></a><a href=\"\"></a>引子<br>我们先来看一下ARC无效的时候，我们写id类型转void*类型的写法：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; alloc&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; init&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; obj&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>反过来，当把void*对象变回id类型时，只是简单地如下来写，</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; p&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;obj release&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>但是上面的代码在ARC有效时，就有了下面的错误：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    error&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; conversion of an &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;Objective&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;C pointer&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;        to &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*’&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; disallowed &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; ARC&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; obj&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;                  &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L4&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L5&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    error&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; conversion of a non&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;Objective&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;C pointer&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L6&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;        type &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*’&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; disallowed &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; ARC&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L7&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;        id o &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; p&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L8&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>###<a href=\"\"></a><a href=\"\"></a><a href=\"\"></a><strong>bridge<br>为了解决这一问题，我们使用 </strong>bridge 关键字来实现id类型与void*类型的相互转换。看下面的例子。</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; alloc&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; init&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L4&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id o &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>将Objective-C的对象类型用 <strong>bridge 转换为 void* 类型和使用 </strong>unsafe_unretained 关键字修饰的变量是一样的。被代入对象的所有者需要明确对象生命周期的管理，不要出现异常访问的问题。<br>除过 <strong>bridge 以外，还有两个 </strong>bridge 相关的类型转换关键字：</p>\n<ul>\n<li>__bridge_retained</li>\n<li>__bridge_transfer</li>\n</ul>\n<p>接下来，我们将看看这两个关键字的区别。</p>\n<p>####<a href=\"\"></a><a href=\"\"></a><a href=\"\"></a><strong>bridge_retained<br>先来看使用 </strong>bridge_retained 关键字的例子程序：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; alloc&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; init&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge_retained &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>从名字上我们应该能理解其意义：类型被转换时，其对象的所有权也将被变换后变量所持有。如果不是ARC代码，类似下面的实现：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; alloc&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; init&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; obj&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p retain&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>可以用一个实际的例子验证，对象所有权是否被持有。</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&#123;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; alloc&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; init&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L4&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    p &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge_retained &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L5&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&#125;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L6&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L7&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(@&lt;/span&gt;&lt;span class=&quot;str&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;&quot;class=%@&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;]);&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>出了大括号的范围后，p 仍然指向一个有效的实体。说明他拥有该对象的所有权，该对象没有因为出其定义范围而被销毁。</p>\n<p>####<a href=\"\"></a><a href=\"\"></a><a href=\"\"></a><strong>bridge_transfer<br>相反，当想把本来拥有对象所有权的变量，在类型转换后，让其释放原先所有权的时候，需要使用 </strong>bridge_transfer 关键字。文字有点绕口，我们还是来看一段代码吧。<br>如果ARC无效的时候，我们可能需要写下面的代码。</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;com&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;// p 变量原先持有对象的所有权&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;obj retain&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p release&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>那么ARC有效后，我们可以用下面的代码来替换：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;com&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;// p 变量原先持有对象的所有权&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge_transfer id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>可以看出来，<strong>bridge_retained 是编译器替我们做了 retain 操作，而 </strong>bridge_transfer 是替我们做了 release<a href=\"http://www.yifeiyang.net/development-of-the-iphone-simply-6/#fn.1\" target=\"_blank\" rel=\"external\"></a>1。</p>\n<p>###<a href=\"\"></a><a href=\"\"></a><a href=\"\"></a>Toll-Free bridged<br>在iOS世界，主要有两种对象：Objective-C 对象和 Core Foundation 对象0。Core Foundation 对象主要是有C语言实现的 Core Foundation Framework 的对象，其中也有对象引用计数的概念，只是不是 Cocoa Framework::Foundation Framework 的 retain/release，而是自身的 CFRetain/CFRelease 接口。<br>这两种对象间可以互相转换和操作，不使用ARC的时候，单纯的用C原因的类型转换，不需要消耗CPU的资源，所以叫做 Toll-Free bridged。比如 NSArray和CFArrayRef, NSString和CFStringRef，他们虽然属于不同的 Framework，但是具有相同的对象结构，所以可以用标准C的类型转换。<br>比如不使用ARC时，我们用下面的代码：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; stringWithFormat&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;:...];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; cfString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>同样，Core Foundation类型向Objective-C类型转换时，也是简单地用标准C的类型转换即可。<br>但是在ARC有效的情况下，将出现类似下面的编译错误：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;Cast&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; of &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;Objective&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;C pointer type &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*’&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; to C pointer type &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;aka &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; __CFString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*’)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; requires a bridged cast&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;Use&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; __bridge to convert directly &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; change &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; ownership&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;Use&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; __bridge_retained to make an ARC &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; available &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; a &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;lit&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;aka &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; __CFString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*’)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>错误中已经提示了我们需要怎样做：用 <strong>bridge 或者 </strong>bridge_retained 来转型，其差别就是变更对象的所有权。<br>正因为Objective-C是ARC管理的对象，而Core Foundation不是ARC管理的对象，所以才要特意这样转换，这与id类型向void*转换是一个概念。也就是说，当这两种类型（有ARC管理，没有ARC管理）在转换时，需要告诉编译器怎样处理对象的所有权。<br>上面的例子，使用 <strong>bridge/</strong>bridge_retained 后的代码如下：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; stringWithFormat&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;:...];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; cfString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>只是单纯地执行了类型转换，没有进行所有权的转移，也就是说，当string对象被释放的时候，cfString也不能被使用了。</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; stringWithFormat&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;:...];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; cfString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge_retained &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;...&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFRelease&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;cfString&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;com&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;// 由于Core Foundation的对象不属于ARC的管理范畴，所以需要自己release&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>使用 __bridge_retained 可以通过转换目标处（cfString）的 retain 处理，来使所有权转移。即使 string 变量被释放，cfString 还是可以使用具体的对象。只是有一点，由于Core Foundation的对象不属于ARC的管理范畴，所以需要自己release。<br>实际上，Core Foundation 内部，为了实现Core Foundation对象类型与Objective-C对象类型的相互转换，提供了下面的函数。</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFTypeRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFBridgingRetain&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id  X&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;&#123;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge_retained  &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFTypeRef&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&#125;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L4&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id  &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFBridgingRelease&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFTypeRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;  X&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;&#123;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L5&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge_transfer  id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L6&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&#125;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>所以，可以用 CFBridgingRetain 替代 __bridge_retained 关键字：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; stringWithFormat&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;:...];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; cfString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFBridgingRetain&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;...&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFRelease&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;cfString&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;com&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;// 由于Core Foundation不在ARC管理范围内，所以需要主动release。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p><strong>bridge_transfer所有权被转移的同时，被转换变量将失去对象的所有权。当Core Foundation对象类型向Objective-C对象类型转换的时候，会经常用到 </strong>bridge_transfer 关键字。</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; cfString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringCreate&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;...();&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge_transfer &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;cfString&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;com&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;// CFRelease(cfString); 因为已经用 __bridge_transfer 转移了对象的所有权，所以不需要调用 release&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>同样，我们可以使用 CFBridgingRelease() 来代替 __bridge_transfer 关键字。</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; cfString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringCreate&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;...();&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFBridgingRelease&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;cfString&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>###<a href=\"\"></a><a href=\"\"></a><a href=\"\"></a>总结<br>由上面的学习我们了解到 ARC 中类型转换的用法，那么我们实际使用中按照怎样的原则或者方法来区分使用呢，下面我总结了几点关键要素。</p>\n<ul>\n<li>明确被转换类型是否是 ARC 管理的对象- Core Foundation 对象类型不在 ARC 管理范畴内</li>\n<li>Cocoa Framework::Foundation 对象类型（即一般使用到的Objectie-C对象类型）在 ARC 的管理范畴内</li>\n</ul>\n<ul>\n<li>如果不在 ARC 管理范畴内的对象，那么要清楚 release 的责任应该是谁</li>\n<li>各种对象的生命周期是怎样的</li>\n</ul>\n<hr>\n<p><a href=\"http://www.yifeiyang.net/development-of-the-iphone-simply-6/#fnr.1\" target=\"_blank\" rel=\"external\"></a>1. 声明 id obj 的时候，其实是缺省的申明了一个 <strong>strong 修饰的变量，所以编译器自动地加入了<br> retain 的处理，所以说 </strong>bridge_transfer 关键字只为我们做了 release 处理。</p>\n","excerpt":"","more":"<p>转自：<a href=\"http://blog.csdn.net/annkey123/article/details/8271806\">http://blog.csdn.net/annkey123/article/details/8271806</a></p>\n<p>自 Xcode4.2 开始导入ARC机制后，为了支持对象间的转型，Apple又增加了许多转型用的关键字。这一讲我们就来了解其用法，以及产生的理由。</p>\n<p>###<a href=\"\"></a><a href=\"\"></a>引子<br>我们先来看一下ARC无效的时候，我们写id类型转void*类型的写法：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; alloc&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; init&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; obj&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>反过来，当把void*对象变回id类型时，只是简单地如下来写，</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; p&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;obj release&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>但是上面的代码在ARC有效时，就有了下面的错误：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    error&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; conversion of an &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;Objective&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;C pointer&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;        to &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*’&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; disallowed &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; ARC&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; obj&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;                  &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L4&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L5&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    error&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; conversion of a non&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;Objective&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;C pointer&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L6&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;        type &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*’&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; disallowed &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; ARC&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L7&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;        id o &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; p&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L8&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>###<a href=\"\"></a><a href=\"\"></a><a href=\"\"></a><strong>bridge<br>为了解决这一问题，我们使用 </strong>bridge 关键字来实现id类型与void*类型的相互转换。看下面的例子。</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; alloc&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; init&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L4&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id o &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>将Objective-C的对象类型用 <strong>bridge 转换为 void* 类型和使用 </strong>unsafe_unretained 关键字修饰的变量是一样的。被代入对象的所有者需要明确对象生命周期的管理，不要出现异常访问的问题。<br>除过 <strong>bridge 以外，还有两个 </strong>bridge 相关的类型转换关键字：</p>\n<ul>\n<li>__bridge_retained</li>\n<li>__bridge_transfer</li>\n</ul>\n<p>接下来，我们将看看这两个关键字的区别。</p>\n<p>####<a href=\"\"></a><a href=\"\"></a><a href=\"\"></a><strong>bridge_retained<br>先来看使用 </strong>bridge_retained 关键字的例子程序：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; alloc&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; init&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge_retained &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>从名字上我们应该能理解其意义：类型被转换时，其对象的所有权也将被变换后变量所持有。如果不是ARC代码，类似下面的实现：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; alloc&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; init&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; obj&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p retain&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>可以用一个实际的例子验证，对象所有权是否被持有。</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&#123;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; alloc&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; init&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L4&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    p &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge_retained &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L5&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&#125;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L6&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L7&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(@&lt;/span&gt;&lt;span class=&quot;str&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;&quot;class=%@&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;]);&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>出了大括号的范围后，p 仍然指向一个有效的实体。说明他拥有该对象的所有权，该对象没有因为出其定义范围而被销毁。</p>\n<p>####<a href=\"\"></a><a href=\"\"></a><a href=\"\"></a><strong>bridge_transfer<br>相反，当想把本来拥有对象所有权的变量，在类型转换后，让其释放原先所有权的时候，需要使用 </strong>bridge_transfer 关键字。文字有点绕口，我们还是来看一段代码吧。<br>如果ARC无效的时候，我们可能需要写下面的代码。</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;com&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;// p 变量原先持有对象的所有权&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;obj retain&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p release&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>那么ARC有效后，我们可以用下面的代码来替换：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;com&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;// p 变量原先持有对象的所有权&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id obj &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge_transfer id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>可以看出来，<strong>bridge_retained 是编译器替我们做了 retain 操作，而 </strong>bridge_transfer 是替我们做了 release<a href=\"http://www.yifeiyang.net/development-of-the-iphone-simply-6/#fn.1\"></a>1。</p>\n<p>###<a href=\"\"></a><a href=\"\"></a><a href=\"\"></a>Toll-Free bridged<br>在iOS世界，主要有两种对象：Objective-C 对象和 Core Foundation 对象0。Core Foundation 对象主要是有C语言实现的 Core Foundation Framework 的对象，其中也有对象引用计数的概念，只是不是 Cocoa Framework::Foundation Framework 的 retain/release，而是自身的 CFRetain/CFRelease 接口。<br>这两种对象间可以互相转换和操作，不使用ARC的时候，单纯的用C原因的类型转换，不需要消耗CPU的资源，所以叫做 Toll-Free bridged。比如 NSArray和CFArrayRef, NSString和CFStringRef，他们虽然属于不同的 Framework，但是具有相同的对象结构，所以可以用标准C的类型转换。<br>比如不使用ARC时，我们用下面的代码：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; stringWithFormat&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;:...];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; cfString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>同样，Core Foundation类型向Objective-C类型转换时，也是简单地用标准C的类型转换即可。<br>但是在ARC有效的情况下，将出现类似下面的编译错误：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;Cast&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; of &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;Objective&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;C pointer type &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*’&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; to C pointer type &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;aka &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; __CFString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*’)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; requires a bridged cast&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;Use&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; __bridge to convert directly &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; change &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; ownership&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;Use&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; __bridge_retained to make an ARC &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; available &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; a &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;lit&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;aka &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; __CFString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*’)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>错误中已经提示了我们需要怎样做：用 <strong>bridge 或者 </strong>bridge_retained 来转型，其差别就是变更对象的所有权。<br>正因为Objective-C是ARC管理的对象，而Core Foundation不是ARC管理的对象，所以才要特意这样转换，这与id类型向void*转换是一个概念。也就是说，当这两种类型（有ARC管理，没有ARC管理）在转换时，需要告诉编译器怎样处理对象的所有权。<br>上面的例子，使用 <strong>bridge/</strong>bridge_retained 后的代码如下：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; stringWithFormat&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;:...];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; cfString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>只是单纯地执行了类型转换，没有进行所有权的转移，也就是说，当string对象被释放的时候，cfString也不能被使用了。</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; stringWithFormat&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;:...];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; cfString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge_retained &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;...&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFRelease&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;cfString&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;com&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;// 由于Core Foundation的对象不属于ARC的管理范畴，所以需要自己release&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>使用 __bridge_retained 可以通过转换目标处（cfString）的 retain 处理，来使所有权转移。即使 string 变量被释放，cfString 还是可以使用具体的对象。只是有一点，由于Core Foundation的对象不属于ARC的管理范畴，所以需要自己release。<br>实际上，Core Foundation 内部，为了实现Core Foundation对象类型与Objective-C对象类型的相互转换，提供了下面的函数。</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFTypeRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFBridgingRetain&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id  X&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;&#123;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge_retained  &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFTypeRef&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&#125;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L4&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;id  &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFBridgingRelease&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFTypeRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;  X&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;&#123;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L5&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge_transfer  id&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L6&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&#125;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>所以，可以用 CFBridgingRetain 替代 __bridge_retained 关键字：</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; stringWithFormat&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;:...];&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; cfString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFBridgingRetain&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;...&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFRelease&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;cfString&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;com&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;// 由于Core Foundation不在ARC管理范围内，所以需要主动release。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p><strong>bridge_transfer所有权被转移的同时，被转换变量将失去对象的所有权。当Core Foundation对象类型向Objective-C对象类型转换的时候，会经常用到 </strong>bridge_transfer 关键字。</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; cfString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringCreate&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;...();&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;__bridge_transfer &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*)&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;cfString&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt; &lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span class=&quot;com&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);&quot;&gt;// CFRelease(cfString); 因为已经用 __bridge_transfer 转移了对象的所有权，所以不需要调用 release&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>同样，我们可以使用 CFBridgingRelease() 来代替 __bridge_transfer 关键字。</p>\n<figure class=\"highlight plain\"><figcaption><span>prettyprint linenums:1</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ol class=&quot;linenums&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px 0px 0px 26px;&quot;&gt;&lt;li value=&quot;1&quot; class=&quot;L0&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringRef&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; cfString &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFStringCreate&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;...();&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot; style=&quot;border-width: 0px; margin: 0px 0px 0px 20px; padding: 0px; list-style-type: decimal;&quot;&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;CFBridgingRelease&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;cfString&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;border-width: 0px; margin: 0px; padding: 0px;&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>\n<p>###<a href=\"\"></a><a href=\"\"></a><a href=\"\"></a>总结<br>由上面的学习我们了解到 ARC 中类型转换的用法，那么我们实际使用中按照怎样的原则或者方法来区分使用呢，下面我总结了几点关键要素。</p>\n<ul>\n<li>明确被转换类型是否是 ARC 管理的对象- Core Foundation 对象类型不在 ARC 管理范畴内</li>\n<li>Cocoa Framework::Foundation 对象类型（即一般使用到的Objectie-C对象类型）在 ARC 的管理范畴内</li>\n</ul>\n<ul>\n<li>如果不在 ARC 管理范畴内的对象，那么要清楚 release 的责任应该是谁</li>\n<li>各种对象的生命周期是怎样的</li>\n</ul>\n<hr>\n<p><a href=\"http://www.yifeiyang.net/development-of-the-iphone-simply-6/#fnr.1\"></a>1. 声明 id obj 的时候，其实是缺省的申明了一个 <strong>strong 修饰的变量，所以编译器自动地加入了<br> retain 的处理，所以说 </strong>bridge_transfer 关键字只为我们做了 release 处理。</p>"},{"title":"iOS开发系列--Swift语言","date":"2016-10-08T03:39:43.000Z","_content":"Swift是苹果2014年推出的全新的编程语言，它继承了C语言、ObjC的特性，且克服了C语言的兼容性问题。\n<!-- more -->\n来自：http://blog.csdn.net/jianxin160/article/details/47753245\n概述\nSwift是苹果2014年推出的全新的编程语言，它继承了C语言、ObjC的特性，且克服了C语言的兼容性问题。Swift发展过程中不仅保留了ObjC很多语法特性，它也借鉴了多种现代化语言的特点，在其中你可以看到C#、Java、Javascript、Python等多种语言的影子。同时在2015年的WWDC上苹果还宣布Swift的新版本Swift2.0，并宣布稍后Swift即将开源，除了支持iOS、OS X之外还将支持linux。\n本文将继续iOS开发系列教程，假设读者已经有了其他语言基础（强烈建议初学者从本系列第一章开始阅读，如果您希望从Swift学起，那么推荐你首先阅读苹果官方电子书[《the swift\n programming language》](https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11)），不会从零基础一点点剖析这门语言的语法，旨在帮助大家快速从ObjC快速过度到Swift开发中。即便如此，要尽可能全面的介绍Swift的语法特点也不是一件容易的事情，因此本文将采用较长的篇幅进行介绍。\n1. [基础部分](http://blog.csdn.net/jianxin160/article/details/47753245#basic)1. [第一个Swift程序](http://blog.csdn.net/jianxin160/article/details/47753245#firstSwift)\n2. [数据类型](http://blog.csdn.net/jianxin160/article/details/47753245#dataType)1. [基础类型](http://blog.csdn.net/jianxin160/article/details/47753245#basicType)\n2. [集合类型](http://blog.csdn.net/jianxin160/article/details/47753245#collectionType)\n3. [元组](http://blog.csdn.net/jianxin160/article/details/47753245#tuple)\n4. [可选类型](http://blog.csdn.net/jianxin160/article/details/47753245#optional)\n\n\n5. [运算符](http://blog.csdn.net/jianxin160/article/details/47753245#operator)\n6. [控制流](http://blog.csdn.net/jianxin160/article/details/47753245#controlFlow)\n\n\n7. [函数和闭包](http://blog.csdn.net/jianxin160/article/details/47753245#functionAndClosures)1. [函数](http://blog.csdn.net/jianxin160/article/details/47753245#function)\n2. [闭包](http://blog.csdn.net/jianxin160/article/details/47753245#closures)\n\n\n3. [类](http://blog.csdn.net/jianxin160/article/details/47753245#class)1. [属性](http://blog.csdn.net/jianxin160/article/details/47753245#property)\n2. [方法](http://blog.csdn.net/jianxin160/article/details/47753245#method)\n3. [下标脚本](http://blog.csdn.net/jianxin160/article/details/47753245#subscript)\n4. [继承](http://blog.csdn.net/jianxin160/article/details/47753245#inheritance)\n\n\n5. [协议](http://blog.csdn.net/jianxin160/article/details/47753245#protocol)\n6. [扩展](http://blog.csdn.net/jianxin160/article/details/47753245#extension)\n7. [枚举和结构体](http://blog.csdn.net/jianxin160/article/details/47753245#enumAndStruct)1. [结构体](http://blog.csdn.net/jianxin160/article/details/47753245#struct)\n2. [枚举](http://blog.csdn.net/jianxin160/article/details/47753245#enum)\n\n\n3. [泛型](http://blog.csdn.net/jianxin160/article/details/47753245#generic)\n\n#[]()基础部分\n##[]()第一个Swift程序\n创建一个命令行程序如下：\n\n```swift\nimport Foundation\n\n/**\n*  Swift没有main函数，默认从top level code的上方开始自上而下执行（因此不能有多个top level代码）\n*/\nprintln(\"Hello, World!\")\n\n```\n从上面的代码可以看出：\n1. Swift没有main函数，从top level code的上方开始往下执行（就是第一个非声明语句开始执行[表达式或者控制结构，类、结构体、枚举和方法等属于声明语句]），不能存在多个top level code文件(否则编译器无法确定执行入口，事实上swift隐含一个main函数，这个main函数会设置并调用全局 “C_ARGC C_ARGV”并调用由top level code构成的top_level_code()函数)；\n2. Swift通过import引入其他类库（和Java比较像）；\n3. Swift语句不需要双引号结尾（尽管加上也不报错），除非一行包含多条语句（和Python有点类似）；\n\n##[]()数据类型\nSwift包含了C和ObjC语言中的所有基础类型，Int整形，Float和Double浮点型，Bool布尔型，Character字符型，String字符串类型；当然还包括enum枚举、struct结构体构造类型；Array数组、Set集合、Dictionary字典集合类型；不仅如此还增加了高阶数据类型元组（Tuple），可选类型（Optinal）。\n###[]()基础类型\nXcode 从6.0开始加入了Playground代码测试，可以实时查看代码执行结果，下面使用Playground简单演示一下Swift的基础内容，对Swift有个简单的认识：\n\n```swift\nimport Foundation\n\nvar a:Int=1 //通过var定义一个变量\n\n//下面变量b虽然没有声明类型，但是会自动进行类型推断，这里b推断为Int类型\nvar b=2\n\nvar c:UInt=3\nlet d=a+b //通过let定义一个变量\n\n//下面通过\"\\()\"实现了字符串和变量相加(字符串插值)，等价于println(\"d=\"+String(d))\nprintln(\"d=\\(d)\") //结果：d=3\n\n//注意由于Swift是强类型语言，a是Int类型而c是UInt类型，二者不能运算，下面的语句报错;但是注意如果是类似于：let a=1+2.0是不会报错的，因为两个都是字面量，Swift会首先计算出结果再推断a的类型\n//let e=a+c\n\n//Int.max是Int类型的最大值，类似还有Int.min、Int32.max、Int32.min等\nlet e=Int.max //结果：9223372036854775807\n\nvar f:Float=1.0\nvar g=2.0 //浮点型自动推断为Double类型\n\nvar h:String=\"hello \"\n\n//emoj表情也可以作为变量或者常量，事实上所有Unicode字符都是可以的\nvar \n```\n","source":"_posts/oc/iOS开发系列--Swift语言.md","raw":"---\ntitle: iOS开发系列--Swift语言\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\nSwift是苹果2014年推出的全新的编程语言，它继承了C语言、ObjC的特性，且克服了C语言的兼容性问题。\n<!-- more -->\n来自：http://blog.csdn.net/jianxin160/article/details/47753245\n概述\nSwift是苹果2014年推出的全新的编程语言，它继承了C语言、ObjC的特性，且克服了C语言的兼容性问题。Swift发展过程中不仅保留了ObjC很多语法特性，它也借鉴了多种现代化语言的特点，在其中你可以看到C#、Java、Javascript、Python等多种语言的影子。同时在2015年的WWDC上苹果还宣布Swift的新版本Swift2.0，并宣布稍后Swift即将开源，除了支持iOS、OS X之外还将支持linux。\n本文将继续iOS开发系列教程，假设读者已经有了其他语言基础（强烈建议初学者从本系列第一章开始阅读，如果您希望从Swift学起，那么推荐你首先阅读苹果官方电子书[《the swift\n programming language》](https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11)），不会从零基础一点点剖析这门语言的语法，旨在帮助大家快速从ObjC快速过度到Swift开发中。即便如此，要尽可能全面的介绍Swift的语法特点也不是一件容易的事情，因此本文将采用较长的篇幅进行介绍。\n1. [基础部分](http://blog.csdn.net/jianxin160/article/details/47753245#basic)1. [第一个Swift程序](http://blog.csdn.net/jianxin160/article/details/47753245#firstSwift)\n2. [数据类型](http://blog.csdn.net/jianxin160/article/details/47753245#dataType)1. [基础类型](http://blog.csdn.net/jianxin160/article/details/47753245#basicType)\n2. [集合类型](http://blog.csdn.net/jianxin160/article/details/47753245#collectionType)\n3. [元组](http://blog.csdn.net/jianxin160/article/details/47753245#tuple)\n4. [可选类型](http://blog.csdn.net/jianxin160/article/details/47753245#optional)\n\n\n5. [运算符](http://blog.csdn.net/jianxin160/article/details/47753245#operator)\n6. [控制流](http://blog.csdn.net/jianxin160/article/details/47753245#controlFlow)\n\n\n7. [函数和闭包](http://blog.csdn.net/jianxin160/article/details/47753245#functionAndClosures)1. [函数](http://blog.csdn.net/jianxin160/article/details/47753245#function)\n2. [闭包](http://blog.csdn.net/jianxin160/article/details/47753245#closures)\n\n\n3. [类](http://blog.csdn.net/jianxin160/article/details/47753245#class)1. [属性](http://blog.csdn.net/jianxin160/article/details/47753245#property)\n2. [方法](http://blog.csdn.net/jianxin160/article/details/47753245#method)\n3. [下标脚本](http://blog.csdn.net/jianxin160/article/details/47753245#subscript)\n4. [继承](http://blog.csdn.net/jianxin160/article/details/47753245#inheritance)\n\n\n5. [协议](http://blog.csdn.net/jianxin160/article/details/47753245#protocol)\n6. [扩展](http://blog.csdn.net/jianxin160/article/details/47753245#extension)\n7. [枚举和结构体](http://blog.csdn.net/jianxin160/article/details/47753245#enumAndStruct)1. [结构体](http://blog.csdn.net/jianxin160/article/details/47753245#struct)\n2. [枚举](http://blog.csdn.net/jianxin160/article/details/47753245#enum)\n\n\n3. [泛型](http://blog.csdn.net/jianxin160/article/details/47753245#generic)\n\n#[]()基础部分\n##[]()第一个Swift程序\n创建一个命令行程序如下：\n\n```swift\nimport Foundation\n\n/**\n*  Swift没有main函数，默认从top level code的上方开始自上而下执行（因此不能有多个top level代码）\n*/\nprintln(\"Hello, World!\")\n\n```\n从上面的代码可以看出：\n1. Swift没有main函数，从top level code的上方开始往下执行（就是第一个非声明语句开始执行[表达式或者控制结构，类、结构体、枚举和方法等属于声明语句]），不能存在多个top level code文件(否则编译器无法确定执行入口，事实上swift隐含一个main函数，这个main函数会设置并调用全局 “C_ARGC C_ARGV”并调用由top level code构成的top_level_code()函数)；\n2. Swift通过import引入其他类库（和Java比较像）；\n3. Swift语句不需要双引号结尾（尽管加上也不报错），除非一行包含多条语句（和Python有点类似）；\n\n##[]()数据类型\nSwift包含了C和ObjC语言中的所有基础类型，Int整形，Float和Double浮点型，Bool布尔型，Character字符型，String字符串类型；当然还包括enum枚举、struct结构体构造类型；Array数组、Set集合、Dictionary字典集合类型；不仅如此还增加了高阶数据类型元组（Tuple），可选类型（Optinal）。\n###[]()基础类型\nXcode 从6.0开始加入了Playground代码测试，可以实时查看代码执行结果，下面使用Playground简单演示一下Swift的基础内容，对Swift有个简单的认识：\n\n```swift\nimport Foundation\n\nvar a:Int=1 //通过var定义一个变量\n\n//下面变量b虽然没有声明类型，但是会自动进行类型推断，这里b推断为Int类型\nvar b=2\n\nvar c:UInt=3\nlet d=a+b //通过let定义一个变量\n\n//下面通过\"\\()\"实现了字符串和变量相加(字符串插值)，等价于println(\"d=\"+String(d))\nprintln(\"d=\\(d)\") //结果：d=3\n\n//注意由于Swift是强类型语言，a是Int类型而c是UInt类型，二者不能运算，下面的语句报错;但是注意如果是类似于：let a=1+2.0是不会报错的，因为两个都是字面量，Swift会首先计算出结果再推断a的类型\n//let e=a+c\n\n//Int.max是Int类型的最大值，类似还有Int.min、Int32.max、Int32.min等\nlet e=Int.max //结果：9223372036854775807\n\nvar f:Float=1.0\nvar g=2.0 //浮点型自动推断为Double类型\n\nvar h:String=\"hello \"\n\n//emoj表情也可以作为变量或者常量，事实上所有Unicode字符都是可以的\nvar \n```\n","slug":"oc/iOS开发系列--Swift语言","published":1,"updated":"2016-10-08T05:49:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms989003421xwltwc90n5","content":"<p>Swift是苹果2014年推出的全新的编程语言，它继承了C语言、ObjC的特性，且克服了C语言的兼容性问题。<br><a id=\"more\"></a><br>来自：<a href=\"http://blog.csdn.net/jianxin160/article/details/47753245\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/jianxin160/article/details/47753245</a><br>概述<br>Swift是苹果2014年推出的全新的编程语言，它继承了C语言、ObjC的特性，且克服了C语言的兼容性问题。Swift发展过程中不仅保留了ObjC很多语法特性，它也借鉴了多种现代化语言的特点，在其中你可以看到C#、Java、Javascript、Python等多种语言的影子。同时在2015年的WWDC上苹果还宣布Swift的新版本Swift2.0，并宣布稍后Swift即将开源，除了支持iOS、OS X之外还将支持linux。<br>本文将继续iOS开发系列教程，假设读者已经有了其他语言基础（强烈建议初学者从本系列第一章开始阅读，如果您希望从Swift学起，那么推荐你首先阅读苹果官方电子书<a href=\"https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11\" target=\"_blank\" rel=\"external\">《the swift<br> programming language》</a>），不会从零基础一点点剖析这门语言的语法，旨在帮助大家快速从ObjC快速过度到Swift开发中。即便如此，要尽可能全面的介绍Swift的语法特点也不是一件容易的事情，因此本文将采用较长的篇幅进行介绍。</p>\n<ol>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#basic\" target=\"_blank\" rel=\"external\">基础部分</a>1. <a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#firstSwift\" target=\"_blank\" rel=\"external\">第一个Swift程序</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#dataType\" target=\"_blank\" rel=\"external\">数据类型</a>1. <a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#basicType\" target=\"_blank\" rel=\"external\">基础类型</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#collectionType\" target=\"_blank\" rel=\"external\">集合类型</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#tuple\" target=\"_blank\" rel=\"external\">元组</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#optional\" target=\"_blank\" rel=\"external\">可选类型</a></li>\n</ol>\n<ol>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#operator\" target=\"_blank\" rel=\"external\">运算符</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#controlFlow\" target=\"_blank\" rel=\"external\">控制流</a></li>\n</ol>\n<ol>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#functionAndClosures\" target=\"_blank\" rel=\"external\">函数和闭包</a>1. <a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#function\" target=\"_blank\" rel=\"external\">函数</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#closures\" target=\"_blank\" rel=\"external\">闭包</a></li>\n</ol>\n<ol>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#class\" target=\"_blank\" rel=\"external\">类</a>1. <a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#property\" target=\"_blank\" rel=\"external\">属性</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#method\" target=\"_blank\" rel=\"external\">方法</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#subscript\" target=\"_blank\" rel=\"external\">下标脚本</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#inheritance\" target=\"_blank\" rel=\"external\">继承</a></li>\n</ol>\n<ol>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#protocol\" target=\"_blank\" rel=\"external\">协议</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#extension\" target=\"_blank\" rel=\"external\">扩展</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#enumAndStruct\" target=\"_blank\" rel=\"external\">枚举和结构体</a>1. <a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#struct\" target=\"_blank\" rel=\"external\">结构体</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#enum\" target=\"_blank\" rel=\"external\">枚举</a></li>\n</ol>\n<ol>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#generic\" target=\"_blank\" rel=\"external\">泛型</a></li>\n</ol>\n<p>#<a href=\"\"></a>基础部分</p>\n<p>##<a href=\"\"></a>第一个Swift程序<br>创建一个命令行程序如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Foundation</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">*  Swift没有main函数，默认从top level code的上方开始自上而下执行（因此不能有多个top level代码）</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Hello, World!\"</span>)</div></pre></td></tr></table></figure>\n<p>从上面的代码可以看出：</p>\n<ol>\n<li>Swift没有main函数，从top level code的上方开始往下执行（就是第一个非声明语句开始执行[表达式或者控制结构，类、结构体、枚举和方法等属于声明语句]），不能存在多个top level code文件(否则编译器无法确定执行入口，事实上swift隐含一个main函数，这个main函数会设置并调用全局 “C_ARGC C_ARGV”并调用由top level code构成的top_level_code()函数)；</li>\n<li>Swift通过import引入其他类库（和Java比较像）；</li>\n<li>Swift语句不需要双引号结尾（尽管加上也不报错），除非一行包含多条语句（和Python有点类似）；</li>\n</ol>\n<p>##<a href=\"\"></a>数据类型<br>Swift包含了C和ObjC语言中的所有基础类型，Int整形，Float和Double浮点型，Bool布尔型，Character字符型，String字符串类型；当然还包括enum枚举、struct结构体构造类型；Array数组、Set集合、Dictionary字典集合类型；不仅如此还增加了高阶数据类型元组（Tuple），可选类型（Optinal）。</p>\n<p>###<a href=\"\"></a>基础类型<br>Xcode 从6.0开始加入了Playground代码测试，可以实时查看代码执行结果，下面使用Playground简单演示一下Swift的基础内容，对Swift有个简单的认识：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Foundation</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"type\">Int</span>=<span class=\"number\">1</span> <span class=\"comment\">//通过var定义一个变量</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面变量b虽然没有声明类型，但是会自动进行类型推断，这里b推断为Int类型</span></div><div class=\"line\"><span class=\"keyword\">var</span> b=<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">c</span>:<span class=\"type\">UInt</span>=<span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">let</span> d=a+b <span class=\"comment\">//通过let定义一个变量</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面通过\"\\()\"实现了字符串和变量相加(字符串插值)，等价于println(\"d=\"+String(d))</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"d=\\(d)\"</span>) <span class=\"comment\">//结果：d=3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注意由于Swift是强类型语言，a是Int类型而c是UInt类型，二者不能运算，下面的语句报错;但是注意如果是类似于：let a=1+2.0是不会报错的，因为两个都是字面量，Swift会首先计算出结果再推断a的类型</span></div><div class=\"line\"><span class=\"comment\">//let e=a+c</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Int.max是Int类型的最大值，类似还有Int.min、Int32.max、Int32.min等</span></div><div class=\"line\"><span class=\"keyword\">let</span> e=<span class=\"type\">Int</span>.<span class=\"built_in\">max</span> <span class=\"comment\">//结果：9223372036854775807</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> f:<span class=\"type\">Float</span>=<span class=\"number\">1.0</span></div><div class=\"line\"><span class=\"keyword\">var</span> g=<span class=\"number\">2.0</span> <span class=\"comment\">//浮点型自动推断为Double类型</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> h:<span class=\"type\">String</span>=<span class=\"string\">\"hello \"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//emoj表情也可以作为变量或者常量，事实上所有Unicode字符都是可以的</span></div><div class=\"line\"><span class=\"keyword\">var</span></div></pre></td></tr></table></figure>\n","excerpt":"<p>Swift是苹果2014年推出的全新的编程语言，它继承了C语言、ObjC的特性，且克服了C语言的兼容性问题。<br>","more":"<br>来自：<a href=\"http://blog.csdn.net/jianxin160/article/details/47753245\">http://blog.csdn.net/jianxin160/article/details/47753245</a><br>概述<br>Swift是苹果2014年推出的全新的编程语言，它继承了C语言、ObjC的特性，且克服了C语言的兼容性问题。Swift发展过程中不仅保留了ObjC很多语法特性，它也借鉴了多种现代化语言的特点，在其中你可以看到C#、Java、Javascript、Python等多种语言的影子。同时在2015年的WWDC上苹果还宣布Swift的新版本Swift2.0，并宣布稍后Swift即将开源，除了支持iOS、OS X之外还将支持linux。<br>本文将继续iOS开发系列教程，假设读者已经有了其他语言基础（强烈建议初学者从本系列第一章开始阅读，如果您希望从Swift学起，那么推荐你首先阅读苹果官方电子书<a href=\"https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11\">《the swift<br> programming language》</a>），不会从零基础一点点剖析这门语言的语法，旨在帮助大家快速从ObjC快速过度到Swift开发中。即便如此，要尽可能全面的介绍Swift的语法特点也不是一件容易的事情，因此本文将采用较长的篇幅进行介绍。</p>\n<ol>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#basic\">基础部分</a>1. <a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#firstSwift\">第一个Swift程序</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#dataType\">数据类型</a>1. <a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#basicType\">基础类型</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#collectionType\">集合类型</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#tuple\">元组</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#optional\">可选类型</a></li>\n</ol>\n<ol>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#operator\">运算符</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#controlFlow\">控制流</a></li>\n</ol>\n<ol>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#functionAndClosures\">函数和闭包</a>1. <a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#function\">函数</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#closures\">闭包</a></li>\n</ol>\n<ol>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#class\">类</a>1. <a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#property\">属性</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#method\">方法</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#subscript\">下标脚本</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#inheritance\">继承</a></li>\n</ol>\n<ol>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#protocol\">协议</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#extension\">扩展</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#enumAndStruct\">枚举和结构体</a>1. <a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#struct\">结构体</a></li>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#enum\">枚举</a></li>\n</ol>\n<ol>\n<li><a href=\"http://blog.csdn.net/jianxin160/article/details/47753245#generic\">泛型</a></li>\n</ol>\n<p>#<a href=\"\"></a>基础部分</p>\n<p>##<a href=\"\"></a>第一个Swift程序<br>创建一个命令行程序如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Foundation</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">*  Swift没有main函数，默认从top level code的上方开始自上而下执行（因此不能有多个top level代码）</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Hello, World!\"</span>)</div></pre></td></tr></table></figure>\n<p>从上面的代码可以看出：</p>\n<ol>\n<li>Swift没有main函数，从top level code的上方开始往下执行（就是第一个非声明语句开始执行[表达式或者控制结构，类、结构体、枚举和方法等属于声明语句]），不能存在多个top level code文件(否则编译器无法确定执行入口，事实上swift隐含一个main函数，这个main函数会设置并调用全局 “C_ARGC C_ARGV”并调用由top level code构成的top_level_code()函数)；</li>\n<li>Swift通过import引入其他类库（和Java比较像）；</li>\n<li>Swift语句不需要双引号结尾（尽管加上也不报错），除非一行包含多条语句（和Python有点类似）；</li>\n</ol>\n<p>##<a href=\"\"></a>数据类型<br>Swift包含了C和ObjC语言中的所有基础类型，Int整形，Float和Double浮点型，Bool布尔型，Character字符型，String字符串类型；当然还包括enum枚举、struct结构体构造类型；Array数组、Set集合、Dictionary字典集合类型；不仅如此还增加了高阶数据类型元组（Tuple），可选类型（Optinal）。</p>\n<p>###<a href=\"\"></a>基础类型<br>Xcode 从6.0开始加入了Playground代码测试，可以实时查看代码执行结果，下面使用Playground简单演示一下Swift的基础内容，对Swift有个简单的认识：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Foundation</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a:<span class=\"type\">Int</span>=<span class=\"number\">1</span> <span class=\"comment\">//通过var定义一个变量</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面变量b虽然没有声明类型，但是会自动进行类型推断，这里b推断为Int类型</span></div><div class=\"line\"><span class=\"keyword\">var</span> b=<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">c</span>:<span class=\"type\">UInt</span>=<span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">let</span> d=a+b <span class=\"comment\">//通过let定义一个变量</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面通过\"\\()\"实现了字符串和变量相加(字符串插值)，等价于println(\"d=\"+String(d))</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"d=\\(d)\"</span>) <span class=\"comment\">//结果：d=3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注意由于Swift是强类型语言，a是Int类型而c是UInt类型，二者不能运算，下面的语句报错;但是注意如果是类似于：let a=1+2.0是不会报错的，因为两个都是字面量，Swift会首先计算出结果再推断a的类型</span></div><div class=\"line\"><span class=\"comment\">//let e=a+c</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Int.max是Int类型的最大值，类似还有Int.min、Int32.max、Int32.min等</span></div><div class=\"line\"><span class=\"keyword\">let</span> e=<span class=\"type\">Int</span>.<span class=\"built_in\">max</span> <span class=\"comment\">//结果：9223372036854775807</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> f:<span class=\"type\">Float</span>=<span class=\"number\">1.0</span></div><div class=\"line\"><span class=\"keyword\">var</span> g=<span class=\"number\">2.0</span> <span class=\"comment\">//浮点型自动推断为Double类型</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> h:<span class=\"type\">String</span>=<span class=\"string\">\"hello \"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//emoj表情也可以作为变量或者常量，事实上所有Unicode字符都是可以的</span></div><div class=\"line\"><span class=\"keyword\">var</span></div></pre></td></tr></table></figure>"},{"title":"iOS开发系列--通知与消息机制","date":"2016-10-08T03:39:44.000Z","_content":"在多数移动应用中任何时候都只能有一个应用程序处于活跃状态，如果其他应用此刻发生了一些用户感兴趣的那么通过通知机制就可以告诉用户此时发生的事情。iOS中通知机制又叫消息机制，其包括两类：一类是本地通知；另一类是推送通知，也叫远程通知。两种通知在iOS中的表现一致，可以通过横幅或者弹出提醒两种形式告诉用户，并且点击通知可以会打开应用程序，但是实现原理却完全不同。今天就和大家一块去看一下如何在iOS中实现这两种机制，并且在文章后面会补充通知中心的内容避免初学者对两种概念的混淆。\n<!-- more -->\n来自：http://\nblog.csdn.net/jianxin160/article/details/47753239\n\n本地通知\n推送通知\n补充--iOS开发证书、秘钥\n补充--通知中心\n本地通知\n本地通知是由本地应用触发的，它是基于时间行为的一种通知形式，例如闹钟定时、待办事项提醒，又或者一个应用在一段时候后不使用通常会提示用户使用此应用等都是本地通知。创建一个本地通知通常分为以下几个步骤：\n创建UILocalNotification。\n设置处理通知的时间fireDate。\n配置通知的内容：通知主体、通知声音、图标数字等。\n配置通知传递的自定义数据参数userInfo（这一步可选）。\n调用通知，可以使用scheduleLocalNotification:按计划调度一个通知，也可以使用presentLocalNotificationNow立即调用通知。\n下面就以一个程序更新后用户长期没有使用的提醒为例对本地通知做一个简单的了解。在这个过程中并没有牵扯太多的界面操作，所有的逻辑都在AppDelegate中：进入应用后如果没有注册通知，需要首先注册通知请求用户允许通知；一旦调用完注册方法，无论用户是否选择允许通知此刻都会调用应用程序的- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings代理方法，在这个方法中根据用户的选择：如果是允许通知则会按照前面的步骤创建通知并在一定时间后执行。\n```\n\n\t\n\n```objc\n\n\n```\n\n```objc\nAppDelegate.m\n//\n//  AppDelegate.m\n//  LocalNotification\n//\n//  Created by Kenshin Cui on 14/03/28.\n//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.\n//\n\n#import \"AppDelegate.h\"\n#import \"KCMainViewController.h\"\n\n@interface AppDelegate ()\n\n@end\n\n@implementation AppDelegate\n\n#pragma mark - 应用代理方法\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    \n    _window=[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];\n    \n    _window.backgroundColor =[UIColor colorWithRed:249/255.0 green:249/255.0 blue:249/255.0 alpha:1];\n    \n    //设置全局导航条风格和颜色\n    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1]];\n    [[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];\n    \n    KCMainViewController *mainController=[[KCMainViewController alloc]init];\n    _window.rootViewController=mainController;\n    \n    [_window makeKeyAndVisible];\n\n    //如果已经获得发送通知的授权则创建本地通知，否则请求授权(注意：如果不请求授权在设置中是没有对应的通知设置项的，也就是说如果从来没有发送过请求，即使通过设置也打不开消息允许设置)\n    if ([[UIApplication sharedApplication]currentUserNotificationSettings].types!=UIUserNotificationTypeNone) {\n        [self addLocalNotification];\n    }else{\n        [[UIApplication sharedApplication]registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert|UIUserNotificationTypeBadge|UIUserNotificationTypeSound  categories:nil]];\n    }\n    \n    return YES;\n}\n\n#pragma mark 调用过用户注册通知方法之后执行（也就是调用完registerUserNotificationSettings:方法之后执行）\n-(void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings{\n    if (notificationSettings.types!=UIUserNotificationTypeNone) {\n        [self addLocalNotification];\n    }\n}\n\n#pragma mark 进入前台后设置消息信息\n-(void)applicationWillEnterForeground:(UIApplication *)application{\n    [[UIApplication sharedApplication]setApplicationIconBadgeNumber:0];//进入前台取消应用消息图标\n}\n\n#pragma mark - 私有方法\n#pragma mark 添加本地通知\n-(void)addLocalNotification{\n    \n    //定义本地通知对象\n    UILocalNotification *notification=[[UILocalNotification alloc]init];\n    //设置调用时间\n    notification.fireDate=[NSDate dateWithTimeIntervalSinceNow:10.0];//通知触发的时间，10s以后\n    notification.repeatInterval=2;//通知重复次数\n    //notification.repeatCalendar=[NSCalendar currentCalendar];//当前日历，使用前最好设置时区等信息以便能够自动同步时间\n    \n    //设置通知属性\n    notification.alertBody=@\"最近添加了诸多有趣的特性，是否立即体验？\"; //通知主体\n    notification.applicationIconBadgeNumber=1;//应用程序图标右上角显示的消息数\n    notification.alertAction=@\"打开应用\"; //待机界面的滑动动作提示\n    notification.alertLaunchImage=@\"Default\";//通过点击通知打开应用时的启动图片,这里使用程序启动图片\n    //notification.soundName=UILocalNotificationDefaultSoundName;//收到通知时播放的声音，默认消息声音\n    notification.soundName=@\"msg.caf\";//通知声音（需要真机才能听到声音）\n    \n    //设置用户信息\n    notification.userInfo=@{@\"id\":@1,@\"user\":@\"Kenshin Cui\"};//绑定到通知上的其他附加信息\n    \n    //调用通知\n    [[UIApplication sharedApplication] scheduleLocalNotification:notification];\n}\n\n#pragma mark 移除本地通知，在不需要此通知时记得移除\n-(void)removeNotification{\n    [[UIApplication sharedApplication] cancelAllLocalNotifications];\n}\n@end\n请求获得用户允许通知的效果：\n LocalNotification_Request\n应用退出到后弹出通知的效果：\n LocalNotification_Notification\n锁屏状态下的通知效果(从这个界面可以看到alertAction配置为“打开应用”)：\nLocalNotification_Lock\n注意：\n在使用通知之前必须注册通知类型，如果用户不允许应用程序发送通知，则以后就无法发送通知，除非用户手动到iOS设置中打开通知。\n本地通知是有操作系统统一调度的，只有在应用退出到后台或者关闭才能收到通知。(注意：这一点对于后面的推送通知也是完全适用的。 ）\n通知的声音是由iOS系统播放的，格式必须是Linear PCM、MA4（IMA/ADPCM）、µLaw、aLaw中的一种，并且播放时间必须在30s内，否则将被系统声音替换，同时自定义声音文件必须放到main boundle中。\n本地通知的数量是有限制的，最近的本地通知最多只能有64个，超过这个数量将被系统忽略。\n如果想要移除本地通知可以调用UIApplication的cancelLocalNotification:或cancelAllLocalNotifications移除指定通知或所有通知。\n从上面的程序可以看到userInfo这个属性我们设置了参数，那么这个参数如何接收呢？\n在iOS中如果点击一个弹出通知（或者锁屏界面滑动查看通知），默认会自动打开当前应用。由于通知由系统调度那么此时进入应用有两种情况：如果应用程序已经完全退出那么此时会调用- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions方法；如果此时应用程序还在运行（无论是在前台还是在后台）则会调用-(void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification方法接收消息参数。当然如果是后者自然不必多说，因为参数中已经可以拿到notification对象，只要读取userInfo属性即可。如果是前者的话则可以访问launchOptions中键为UIApplicationLaunchOptionsLocalNotificationKey的对象，这个对象就是发送的通知，由此对象再去访问userInfo。为了演示这个过程在下面的程序中将userInfo的内容写入文件以便模拟关闭程序后再通过点击通知打开应用获取userInfo的过程。\nAppDelegate.m\n//\n//  AppDelegate.m\n//  LocalNotification\n//\n//  Created by Kenshin Cui on 14/03/28.\n//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.\n//\n\n#import \"AppDelegate.h\"\n#import \"KCMainViewController.h\"\n\n@interface AppDelegate ()\n\n@end\n\n@implementation AppDelegate\n\n#pragma mark - 应用代理方法\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    \n    _window=[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];\n    \n    _window.backgroundColor =[UIColor colorWithRed:249/255.0 green:249/255.0 blue:249/255.0 alpha:1];\n    \n    //设置全局导航条风格和颜色\n    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1]];\n    [[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];\n    \n    KCMainViewController *mainController=[[KCMainViewController alloc]init];\n    _window.rootViewController=mainController;\n    \n    [_window makeKeyAndVisible];\n\n    //添加通知\n    [self addLocalNotification];\n\n    //接收通知参数\n    UILocalNotification *notification=[launchOptions valueForKey:UIApplicationLaunchOptionsLocalNotificationKey];\n    NSDictionary *userInfo= notification.userInfo;\n    \n    [userInfo writeToFile:@\"/Users/kenshincui/Desktop/didFinishLaunchingWithOptions.txt\" atomically:YES];\n    NSLog(@\"didFinishLaunchingWithOptions:The userInfo is %@.\",userInfo);\n    \n    return YES;\n}\n\n#pragma mark 接收本地通知时触发\n-(void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification{\n    NSDictionary *userInfo=notification.userInfo;\n    [userInfo writeToFile:@\"/Users/kenshincui/Desktop/didReceiveLocalNotification.txt\" atomically:YES];\n    NSLog(@\"didReceiveLocalNotification:The userInfo is %@\",userInfo);\n}\n\n#pragma mark 调用过用户注册通知方法之后执行（也就是调用完registerUserNotificationSettings:方法之后执行）\n-(void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings{\n    if (notificationSettings.types!=UIUserNotificationTypeNone) {\n        [self addLocalNotification];\n    }\n}\n\n#pragma mark 进入前台后设置消息信息\n-(void)applicationWillEnterForeground:(UIApplication *)application{\n    [[UIApplication sharedApplication]setApplicationIconBadgeNumber:0];//进入前台取消应用消息图标\n}\n\n#pragma mark - 私有方法\n#pragma mark 添加本地通知\n-(void)addLocalNotification{\n    \n    //定义本地通知对象\n    UILocalNotification *notification=[[UILocalNotification alloc]init];\n    //设置调用时间\n    notification.fireDate=[NSDate dateWithTimeIntervalSinceNow:10.0];//通知触发的时间，10s以后\n    notification.repeatInterval=2;//通知重复次数\n    //notification.repeatCalendar=[NSCalendar currentCalendar];//当前日历，使用前最好设置时区等信息以便能够自动同步时间\n    \n    //设置通知属性\n    notification.alertBody=@\"最近添加了诸多有趣的特性，是否立即体验？\"; //通知主体\n    notification.applicationIconBadgeNumber=1;//应用程序图标右上角显示的消息数\n    notification.alertAction=@\"打开应用\"; //待机界面的滑动动作提示\n    notification.alertLaunchImage=@\"Default\";//通过点击通知打开应用时的启动图片\n    //notification.soundName=UILocalNotificationDefaultSoundName;//收到通知时播放的声音，默认消息声音\n    notification.soundName=@\"msg.caf\";//通知声音（需要真机）\n    \n    //设置用户信息\n    notification.userInfo=@{@\"id\":@1,@\"user\":@\"Kenshin Cui\"};//绑定到通知上的其他额外信息\n    \n    //调用通知\n    [[UIApplication sharedApplication] scheduleLocalNotification:notification];\n}\n@end\n上面的程序可以分为两种情况去运行：一种是启动程序关闭程序，等到接收到通知之后点击通知重新进入程序；另一种是启动程序后，进入后台（其实在前台也可以，但是为了明显的体验这个过程建议进入后台），接收到通知后点击通知进入应用。另种情况会分别按照前面说的情况调用不同的方法接收到userInfo写入本地文件系统。有了userInfo一般来说就可以根据这个信息进行一些处理，例如可以根据不同的参数信息导航到不同的界面，假设是更新的通知则可以导航到更新内容界面等。\n推送通知\n和本地通知不同，推送通知是由应用服务提供商发起的，通过苹果的APNs（Apple Push Notification Server）发送到应用客户端。下面是苹果官方关于推送通知的过程示意图：\nPushNotification_FlowChart\n推送通知的过程可以分为以下几步：\n应用服务提供商从服务器端把要发送的消息和设备令牌（device token）发送给苹果的消息推送服务器APNs。\nAPNs根据设备令牌在已注册的设备（iPhone、iPad、iTouch、mac等）查找对应的设备，将消息发送给相应的设备。\n客户端设备接将接收到的消息传递给相应的应用程序，应用程序根据用户设置弹出通知消息。\n当然，这只是一个简单的流程，有了这个流程我们还无从下手编写程序，将上面的流程细化可以得到如下流程图（图片来自互联网），在这个过程中会也会提到如何在程序中完成这些步骤：\nPushNotification_FlowChartDetail\n1.应用程序注册APNs推送消息。\n说明：\na.只有注册过的应用才有可能接收到消息，程序中通常通过UIApplication的registerUserNotificationSettings:方法注册，iOS8中通知注册的方法发生了改变，如果是iOS7及之前版本的iOS请参考其他代码。\nb.注册之前有两个前提条件必须准备好：开发配置文件（provisioning profile，也就是.mobileprovision后缀的文件）的App ID不能使用通配ID必须使用指定APP ID并且生成配置文件中选择Push Notifications服务，一般的开发配置文件无法完成注册；应用程序的Bundle Identifier必须和生成配置文件使用的APP ID完全一致。\n2.iOS从APNs接收device token，在应用程序获取device token。\n说明：\na.在UIApplication的-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken代理方法中获取令牌，此方法发生在注册之后。\nb.如果无法正确获得device token可以在UIApplication的-(void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error代理方法中查看详细错误信息，此方法发生在获取device token失败之后。\nc.必须真机调试，模拟器无法获取device token。\n3.iOS应用将device token发送给应用程序提供商，告诉服务器端当前设备允许接收消息。\n说明：\na.device token的生成算法只有Apple掌握，为了确保算法发生变化后仍然能够正常接收服务器端发送的通知，每次应用程序启动都重新获得device token（注意：device token的获取不会造成性能问题，苹果官方已经做过优化）。\nb.通常可以创建一个网络连接发送给应用程序提供商的服务器端， 在这个过程中最好将上一次获得的device token存储起来，避免重复发送，一旦发现device token发生了变化最好将原有的device token一块发送给服务器端，服务器端删除原有令牌存储新令牌避免服务器端发送无效消息。\n4.应用程序提供商在服务器端根据前面发送过来的device token组织信息发送给APNs。\n说明：\na.发送时指定device token和消息内容，并且完全按照苹果官方的消息格式组织消息内容，通常情况下可以借助其他第三方消息推送框架来完成。\n5.APNs根据消息中的device token查找已注册的设备推送消息。\n说明：\na.正常情况下可以根据device token将消息成功推送到客户端设备中，但是也不排除用户卸载程序的情况，此时推送消息失败，APNs会将这个错误消息通知服务器端以避免资源浪费（服务器端此时可以根据错误删除已经存储的device token，下次不再发送）。\n下面将简单演示一下推送通知的简单流程:\n首先，看一下iOS客户端代码：\n//\n//  AppDelegate.m\n//  pushnotification\n//\n//  Created by Kenshin Cui on 14/03/27.\n//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.\n//\n\n#import \"AppDelegate.h\"\n#import \"KCMainViewController.h\"\n\n@interface AppDelegate ()\n\n@end\n\n@implementation AppDelegate\n\n#pragma mark - 应用程序代理方法\n#pragma mark 应用程序启动之后\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    \n    _window=[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];\n    \n    _window.backgroundColor =[UIColor colorWithRed:249/255.0 green:249/255.0 blue:249/255.0 alpha:1];\n    \n    //设置全局导航条风格和颜色\n    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1]];\n    [[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];\n    \n    KCMainViewController *mainController=[[KCMainViewController alloc]init];\n    _window.rootViewController=mainController;\n    \n    [_window makeKeyAndVisible];\n    \n    //注册推送通知（注意iOS8注册方法发生了变化）\n    [application registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert|UIUserNotificationTypeBadge|UIUserNotificationTypeSound categories:nil]];\n    [application registerForRemoteNotifications];\n    \n    return YES;\n}\n#pragma mark 注册推送通知之后\n//在此接收设备令牌\n-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken{\n    [self addDeviceToken:deviceToken];\n    NSLog(@\"device token:%@\",deviceToken);\n}\n\n#pragma mark 获取device token失败后\n-(void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error{\n    NSLog(@\"didFailToRegisterForRemoteNotificationsWithError:%@\",error.localizedDescription);\n    [self addDeviceToken:nil];\n}\n\n#pragma mark 接收到推送通知之后\n-(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo{\n    NSLog(@\"receiveRemoteNotification,userInfo is %@\",userInfo);\n}\n\n#pragma mark - 私有方法\n/**\n *  添加设备令牌到服务器端\n *\n *  @param deviceToken 设备令牌\n */\n-(void)addDeviceToken:(NSData *)deviceToken{\n    NSString *key=@\"DeviceToken\";\n    NSData *oldToken= [[NSUserDefaults standardUserDefaults]objectForKey:key];\n    //如果偏好设置中的已存储设备令牌和新获取的令牌不同则存储新令牌并且发送给服务器端\n    if (![oldToken isEqualToData:deviceToken]) {\n        [[NSUserDefaults standardUserDefaults] setObject:deviceToken forKey:key];\n        [self sendDeviceTokenWidthOldDeviceToken:oldToken newDeviceToken:deviceToken];\n    }\n}\n\n-(void)sendDeviceTokenWidthOldDeviceToken:(NSData *)oldToken newDeviceToken:(NSData *)newToken{\n    //注意一定确保真机可以正常访问下面的地址\n    NSString *urlStr=@\"http://192.168.1.101/RegisterDeviceToken.aspx\";\n    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    NSURL *url=[NSURL URLWithString:urlStr];\n    NSMutableURLRequest *requestM=[NSMutableURLRequest requestWithURL:url cachePolicy:0 timeoutInterval:10.0];\n    [requestM setHTTPMethod:@\"POST\"];\n    NSString *bodyStr=[NSString stringWithFormat:@\"oldToken=%@&newToken=%@\",oldToken,newToken];\n    NSData *body=[bodyStr dataUsingEncoding:NSUTF8StringEncoding];\n    [requestM setHTTPBody:body];\n    NSURLSession *session=[NSURLSession sharedSession];\n    NSURLSessionDataTask *dataTask= [session dataTaskWithRequest:requestM completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n        if (error) {\n            NSLog(@\"Send failure,error is :%@\",error.localizedDescription);\n        }else{\n            NSLog(@\"Send Success!\");\n        }\n        \n    }];\n    [dataTask resume];\n}\n@end\niOS客户端代码的代码比较简单，注册推送通知，获取device token存储到偏好设置中，并且如果新获取的device token不同于偏好设置中存储的数据则发送给服务器端，更新服务器端device token列表。\n其次，由于device token需要发送给服务器端，这里使用一个Web应用作为服务器端接收device token，这里使用了ASP.NET程序来处理令牌接收注册工作，当然你使用其他技术同样没有问题。下面是对应的后台代码：\nusing System;\nusing System.Collections.Generic;\nusing System.Web;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\nusing CMJ.Framework.Data;\n\nnamespace WebServer\n{\n    public partial class RegisterDeviceToken : System.Web.UI.Page\n    {\n        private string _appID = @\"com.cmjstudio.pushnotification\";\n        private SqlHelper _helper = new SqlHelper();\n        protected void Page_Load(object sender, EventArgs e)\n        {\n            try\n            {\n                string oldToken = Request[\"oldToken\"] + \"\";\n                string newToken = Request[\"newToken\"] + \"\";\n                string sql = \"\";\n                //如果传递旧的设备令牌则删除旧令牌添加新令牌\n                if (oldToken != \"\")\n                {\n                    sql = string.Format(\"DELETE FROM dbo.Device WHERE AppID='{0}' AND DeviceToken='{1}';\", _appID, oldToken);\n                }\n                sql += string.Format(@\"IF NOT EXISTS (SELECT ID FROM dbo.Device WHERE AppID='{0}' AND DeviceToken='{1}')\n                                        INSERT INTO dbo.Device ( AppID, DeviceToken ) VALUES ( N'{0}', N'{1}');\", _appID, newToken);\n                _helper.ExecuteNonQuery(sql);\n                Response.Write(\"注册成功！\");\n            }\n            catch(Exception ex)\n            {\n                Response.Write(\"注册失败，错误详情：\"+ex.ToString());\n            }\n        }\n    }\n}\n这个过程主要就是保存device token到数据库中，当然如果同时传递旧的设备令牌还需要先删除就的设备令牌，这里简单的在数据库中创建了一张Device表来保存设备令牌，其中记录了应用程序Id和设备令牌。\n第三步就是服务器端发送消息，如果要给APNs发送消息就必须按照Apple的标准消息格式组织消息内容。但是好在目前已经有很多开源的第三方类库供我们使用，具体消息如何包装完全不用自己组织，这里使用一个开源的类库Push Sharp来给APNs发送消息 ,除了可以给Apple设备推送消息，Push Sharp还支持Android、Windows Phone等多种设备，更多详细内容大家可以参照官方说明。前面说过如果要开发消息推送应用不能使用一般的开发配置文件，这里还需要注意：如果服务器端要给APNs发送消息其秘钥也必须是通过APNs Development iOS类型的证书来导出的，一般的iOS Development 类型的证书导出的秘钥无法用作服务器端发送秘钥。下面通过在一个简单的WinForm程序中调用Push Sharp给APNs发送消息，这里读取之前Device表中的所有设备令牌循环发送消息：\nusing System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\nusing PushSharp;\nusing PushSharp.Apple;\nusing CMJ.Framework.Data;\nusing CMJ.Framework.Logging;\nusing CMJ.Framework.Windows.Forms;\n\nnamespace PushNotificationServer\n{\n    public partial class frmMain : PersonalizeForm\n    {\n        private string _appID = @\"com.cmjstudio.pushnotification\";\n        private SqlHelper _helper = new SqlHelper();\n        public frmMain()\n        {\n            InitializeComponent();\n        }\n\n        private void btnClose_Click(object sender, EventArgs e)\n        {\n            this.Close();\n        }\n\n        private void btnSend_Click(object sender, EventArgs e)\n        {\n            List<string> deviceTokens = GetDeviceToken();\n            SendMessage(deviceTokens, tbMessage.Text);\n        }\n\n        #region 发送消息\n        /// <summary>\n        /// 取得所有设备令牌\n        /// </summary>\n        /// <returns>设备令牌</returns>\n        private List<string> GetDeviceToken()\n        {\n            List<string> deviceTokens = new List<string>();\n            string sql = string.Format(\"SELECT DeviceToken FROM dbo.Device WHERE AppID='{0}'\",_appID);\n            DataTable dt = _helper.GetDataTable(sql);\n            if(dt.Rows.Count>0)\n            {\n                foreach(DataRow dr in dt.Rows)\n                {\n                    deviceTokens.Add((dr[\"DeviceToken\"]+\"\").TrimStart('<').TrimEnd('>').Replace(\" \",\"\"));\n                }\n            }\n            return deviceTokens;\n        }\n        \n        /// <summary>\n        /// 发送消息\n        /// </summary>\n        /// <param name=\"deviceToken\">设备令牌</param>\n        /// <param name=\"message\">消息内容</param>\n        private void SendMessage(List<string> deviceToken, string message)\n        {\n            //创建推送对象\n            var pusher = new PushBroker();\n            pusher.OnNotificationSent += pusher_OnNotificationSent;//发送成功事件\n            pusher.OnNotificationFailed += pusher_OnNotificationFailed;//发送失败事件\n            pusher.OnChannelCreated += pusher_OnChannelCreated;\n            pusher.OnChannelDestroyed += pusher_OnChannelDestroyed;\n            pusher.OnChannelException += pusher_OnChannelException;\n            pusher.OnDeviceSubscriptionChanged += pusher_OnDeviceSubscriptionChanged;\n            pusher.OnDeviceSubscriptionExpired += pusher_OnDeviceSubscriptionExpired;\n            pusher.OnNotificationRequeue += pusher_OnNotificationRequeue;\n            pusher.OnServiceException += pusher_OnServiceException;\n            //注册推送服务\n            byte[] certificateData = File.ReadAllBytes(@\"E:\\KenshinCui_Push.p12\");\n            pusher.RegisterAppleService(new ApplePushChannelSettings(certificateData, \"123\"));\n            foreach (string token in deviceToken)\n            {\n                //给指定设备发送消息\n                pusher.QueueNotification(new AppleNotification()\n                    .ForDeviceToken(token)\n                    .WithAlert(message) \n                    .WithBadge(1)\n                    .WithSound(\"default\"));\n            }\n        }\n\n        void pusher_OnServiceException(object sender, Exception error)\n        {\n            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());\n            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\" + error.ToString(), \"系统提示\");\n        }\n\n        void pusher_OnNotificationRequeue(object sender, PushSharp.Core.NotificationRequeueEventArgs e)\n        {\n            Console.WriteLine(\"pusher_OnNotificationRequeue\");\n        }\n\n        void pusher_OnDeviceSubscriptionExpired(object sender, string expiredSubscriptionId, DateTime expirationDateUtc, PushSharp.Core.INotification notification)\n        {\n            Console.WriteLine(\"pusher_OnDeviceSubscriptionChanged\");\n        }\n\n        void pusher_OnDeviceSubscriptionChanged(object sender, string oldSubscriptionId, string newSubscriptionId, PushSharp.Core.INotification notification)\n        {\n            Console.WriteLine(\"pusher_OnDeviceSubscriptionChanged\");\n        }\n\n        void pusher_OnChannelException(object sender, PushSharp.Core.IPushChannel pushChannel, Exception error)\n        {\n            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());\n            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\" + error.ToString(), \"系统提示\");\n        }\n\n        void pusher_OnChannelDestroyed(object sender)\n        {\n            Console.WriteLine(\"pusher_OnChannelDestroyed\");\n        }\n\n        void pusher_OnChannelCreated(object sender, PushSharp.Core.IPushChannel pushChannel)\n        {\n            Console.WriteLine(\"pusher_OnChannelCreated\");\n        }\n\n        void pusher_OnNotificationFailed(object sender, PushSharp.Core.INotification notification, Exception error)\n        {\n            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());\n            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\"+error.ToString(), \"系统提示\");\n        }\n\n        void pusher_OnNotificationSent(object sender, PushSharp.Core.INotification notification)\n        {\n            Console.WriteLine(\"消息发送成功！\");\n            PersonalizeMessageBox.Show(this, \"消息发送成功！\", \"系统提示\");\n        }\n        #endregion\n    }\n}\n服务器端消息发送应用运行效果：\nPushNotification_ServerClient\niOS客户端接收的消息的效果：\nPushNotification_iOSApp\n到目前为止通过服务器端应用可以顺利发送消息给APNs并且iOS应用已经成功接收推送消息。\n补充--iOS开发证书、秘钥\niOS开发过程中如果需要进行真机调试、发布需要注册申请很多证书，对于初学者往往迷惑不解，再加上今天的文章中会牵扯到一些特殊配置，这里就简单的对iOS开发的常用证书和秘钥等做一说明。\n证书\niOS常用的证书包括开发证书和发布证书，无论是真机调试还是最终发布应用到App Store这两个证书都是必须的，它是iOS开发的基本证书。\na.开发证书：开发证书又分为普通开发证书和推送证书，如果仅仅是一般的应用则前者即可满足，但是如果开发推送应用则必须使用推送证书。\nb.发布证书：发布证书又可以分为普通发布证书、推送证书、Pass Type ID证书、站点发布证书、VoIP服务证书、苹果支付证书。同样的，对于需要使用特殊服务的应用则必须选择对应的证书。\n应用标识\nApp ID,应用程序的唯一标识，对应iOS应用的Bundle Identifier，App ID在苹果开发者中心中分为通配应用ID和明确的应用ID,前者一般用于普通应用开发，一个ID可以适用于多个不同标识的应用；但是对于使用消息推送、Passbook、站点发布、iCloud等服务的应用必须配置明确的应用ID。\n设备标识\nUDID,用于标识每一台硬件设备的标示符。注意它不是device token，device token是根据UDID使用一个只有Apple自己才知道的算法生成的一组标示符。\n配置简介\nProvisioning Profiles,平时又称为PP文件。将UDID、App ID、开发证书打包在一起的配置文件，同样分为开发和发布两类配置文件。\n秘钥\n在申请开发证书时必须要首先提交一个秘钥请求文件，对于生成秘钥请求文件的mac，如果要做开发则只需要下载证书和配置简介即可开发。但是如果要想在其他机器上做开发则必须将证书中的秘钥导出（导出之后是一个.p12文件），然后导入其他机器。同时对于类似于推送服务器端应用如果要给APNs发送消息，同样需要使用.p12秘钥文件，并且这个秘钥文件需要是推送证书导出的对应秘钥。\n补充--通知中心\n对于很多初学者往往会把iOS中的本地通知、推送通知和iOS通知中心的概念弄混。其实二者之间并没有任何关系，事实上它们都不属于一个框架，前者属于UIKit框架，后者属于Foundation框架。\n通知中心实际上是iOS程序内部之间的一种消息广播机制，主要为了解决应用程序内部不同对象之间解耦而设计。它是基于观察者模式设计的，不能跨应用程序进程通信，当通知中心接收到消息之后会根据内部的消息转发表，将消息发送给订阅者。下面是一个简单的流程示意图：\nimage\n了解通知中心需要熟悉NSNotificationCenter和NSNotification两个类：\nNSNotificationCenter：是通知系统的中心，用于注册和发送通知，下表列出常用的方法。\n方法\t说明\n- (void)addObserver:(id)observer selector:(SEL)aSelector name:(NSString *)aName object:(id)anObject\t添加监听，参数：\nobserver:监听者\nselector:监听方法（监听者监听到通知后执行的方法）\n  name:监听的通知名称\nobject:通知的发送者（如果指定nil则监听任何对象发送的通知）\n- (id <NSObject>)addObserverForName:(NSString *)name object:(id)obj queue:(NSOperationQueue *)queue usingBlock:(void (^)(NSNotification *note))block\t添加监听，参数：\nname:监听的通知名称\nobject:通知的发送者（如果指定nil则监听任何对象发送的通知）\nqueue:操作队列，如果制定非主队线程队列则可以异步执行block\nblock:监听到通知后执行的操作\n- (void)postNotification:(NSNotification *)notification\t发送通知，参数：\nnotification：通知对象\n- (void)postNotificationName:(NSString *)aName object:(id)anObject\t发送通知，参数：\naName：通知名称\nanObject：通知发送者\n- (void)postNotificationName:(NSString *)aName object:(id)anObject userInfo:(NSDictionary *)aUserInfo\t发送通知，参数：\naName：通知名称\nanObject：通知发送者\naUserInfo：通知参数\n- (void)removeObserver:(id)observer\t移除监听，参数：\nobserver：监听对象\n- (void)removeObserver:(id)observer name:(NSString *)aName object:(id)anObject\t移除监听，参数：\nobserver：监听对象\naName：通知名称\nanObject：通知发送者\nNSNotification：代表通知内容的载体，主要有三个属性：name代表通知名称，object代表通知的发送者，userInfo代表通知的附加信息。\n虽然前面的文章中从未提到过通知中心，但是其实通知中心我们并不陌生，前面文章中很多内容都是通过通知中心来进行应用中各个组件通信的，只是没有单独拿出来说而已。例如前面的文章中讨论的应用程序生命周期问题，当应用程序启动后、进入后台、进入前台、获得焦点、失去焦点，窗口大小改变、隐藏等都会发送通知。这个通知可以通过前面NSNotificationCenter进行订阅即可接收对应的消息，下面的示例演示了如何添加监听获得UIApplication的进入后台和获得焦点的通知：\n//\n//  KCMainViewController.m\n//  NotificationCenter\n//\n//  Created by Kenshin Cui on 14/03/27.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"KCMainViewController.h\"\n\n@interface KCMainViewController ()\n\n@end\n\n@implementation KCMainViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    [self addObserverToNotificationCenter];\n    \n}\n\n#pragma mark 添加监听\n-(void)addObserverToNotificationCenter{\n    /*添加应用程序进入后台监听\n     * observer:监听者\n     * selector:监听方法（监听者监听到通知后执行的方法）\n     * name:监听的通知名称(下面的UIApplicationDidEnterBackgroundNotification是一个常量)\n     * object:通知的发送者（如果指定nil则监听任何对象发送的通知）\n     */\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(applicationEnterBackground) name:UIApplicationDidEnterBackgroundNotification object:[UIApplication sharedApplication]];\n    \n    /* 添加应用程序获得焦点的通知监听\n     * name:监听的通知名称\n     * object:通知的发送者（如果指定nil则监听任何对象发送的通知）\n     * queue:操作队列，如果制定非主队线程队列则可以异步执行block\n     * block:监听到通知后执行的操作\n     */\n    NSOperationQueue *operationQueue=[[NSOperationQueue alloc]init];\n    [[NSNotificationCenter defaultCenter] addObserverForName:UIApplicationDidBecomeActiveNotification object:[UIApplication sharedApplication] queue:operationQueue usingBlock:^(NSNotification *note) {\n        NSLog(@\"Application become active.\");\n    }];\n}\n\n#pragma mark 应用程序启动监听方法\n-(void)applicationEnterBackground{\n    NSLog(@\"Application enter background.\");\n}\n@end\n当然很多时候使用通知中心是为了添加自定义通知，并获得自定义通知消息。在前面的文章“iOS开发系列--视图切换”中提到过如何进行多视图之间参数传递，其实利用自定义通知也可以进行参数传递。通常一个应用登录后会显示用户信息，而登录信息可以通过登录界面获取。下面就以这样一种场景为例，在主界面中添加监听，在登录界面发送通知，一旦登录成功将向通知中心发送成功登录的通知，此时主界面中由于已经添加通知监听所以会收到通知并更新UI界面。\n主界面KCMainViewController.m：\n//\n//  KCMainViewController.m\n//  NotificationCenter\n//\n//  Created by Kenshin Cui on 14/03/27\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"KCMainViewController.h\"\n#import \"KCLoginViewController.h\"\n#define UPDATE_LGOGIN_INFO_NOTIFICATION @\"updateLoginInfo\"\n\n@interface KCMainViewController (){\n    UILabel *_lbLoginInfo;\n    UIButton *_btnLogin;\n}\n\n@end\n\n@implementation KCMainViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    [self setupUI];\n}\n\n-(void)setupUI{\n    UILabel *label =[[UILabel alloc]initWithFrame:CGRectMake(0, 100,320 ,30)];\n    label.textAlignment=NSTextAlignmentCenter;\n    label.textColor=[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1];\n    _lbLoginInfo=label;\n    [self.view addSubview:label];\n    \n    UIButton *button=[UIButton buttonWithType:UIButtonTypeSystem];\n    button.frame=CGRectMake(60, 200, 200, 25);\n    [button setTitle:@\"登录\" forState:UIControlStateNormal];\n    [button addTarget:self action:@selector(loginOut) forControlEvents:UIControlEventTouchUpInside];\n    _btnLogin=button;\n    \n    [self.view addSubview:button];\n}\n\n-(void)loginOut{\n    //添加监听\n    [self addObserverToNotification];\n    \n    KCLoginViewController *loginController=[[KCLoginViewController alloc]init];\n    \n    [self presentViewController:loginController animated:YES completion:nil];\n}\n\n/**\n *  添加监听\n */\n-(void)addObserverToNotification{\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(updateLoginInfo:) name:UPDATE_LGOGIN_INFO_NOTIFICATION object:nil];\n}\n\n/**\n *  更新登录信息,注意在这里可以获得通知对象并且读取附加信息\n */\n-(void)updateLoginInfo:(NSNotification *)notification{\n    NSDictionary *userInfo=notification.userInfo;\n    _lbLoginInfo.text=userInfo[@\"loginInfo\"];\n    _btnLogin.titleLabel.text=@\"注销\";\n}\n\n-(void)dealloc{\n    //移除监听\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n@end\n登录界面KCLoginViewController.m：\n//\n//  KCLoginViewController.m\n//  NotificationCenter\n//\n//  Created by Kenshin Cui on 14/03/27.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"KCLoginViewController.h\"\n#define UPDATE_LGOGIN_INFO_NOTIFICATION @\"updateLoginInfo\"\n\n@interface KCLoginViewController (){\n    UITextField *_txtUserName;\n    UITextField *_txtPassword;\n}\n\n@end\n\n@implementation KCLoginViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    [self setupUI];\n}\n\n/**\n *  UI布局\n */\n-(void)setupUI{\n    //用户名\n    UILabel *lbUserName=[[UILabel alloc]initWithFrame:CGRectMake(50, 150, 100, 30)];\n    lbUserName.text=@\"用户名：\";\n    [self.view addSubview:lbUserName];\n    \n    _txtUserName=[[UITextField alloc]initWithFrame:CGRectMake(120, 150, 150, 30)];\n    _txtUserName.borderStyle=UITextBorderStyleRoundedRect;\n    [self.view addSubview:_txtUserName];\n    \n    //密码\n    UILabel *lbPassword=[[UILabel alloc]initWithFrame:CGRectMake(50, 200, 100, 30)];\n    lbPassword.text=@\"密码：\";\n    [self.view addSubview:lbPassword];\n    \n    _txtPassword=[[UITextField alloc]initWithFrame:CGRectMake(120, 200, 150, 30)];\n    _txtPassword.secureTextEntry=YES;\n    _txtPassword.borderStyle=UITextBorderStyleRoundedRect;\n    [self.view addSubview:_txtPassword];\n    \n    //登录按钮\n    UIButton *btnLogin=[UIButton buttonWithType:UIButtonTypeSystem];\n    btnLogin.frame=CGRectMake(70, 270, 80, 30);\n    [btnLogin setTitle:@\"登录\" forState:UIControlStateNormal];\n    [self.view addSubview:btnLogin];\n    [btnLogin addTarget:self action:@selector(login) forControlEvents:UIControlEventTouchUpInside];\n    \n    //取消登录按钮\n    UIButton *btnCancel=[UIButton buttonWithType:UIButtonTypeSystem];\n    btnCancel.frame=CGRectMake(170, 270, 80, 30);\n    [btnCancel setTitle:@\"取消\" forState:UIControlStateNormal];\n    [self.view addSubview:btnCancel];\n    [btnCancel addTarget:self action:@selector(cancel) forControlEvents:UIControlEventTouchUpInside];\n}\n\n#pragma mark 登录操作\n-(void)login{\n    if ([_txtUserName.text isEqualToString:@\"kenshincui\"] && [_txtPassword.text isEqualToString:@\"123\"] ) {\n        //发送通知\n        [self postNotification];\n        [self dismissViewControllerAnimated:YES completion:nil];\n    }else{\n        //登录失败弹出提示信息\n        UIAlertView *alertView=[[UIAlertView alloc]initWithTitle:@\"系统信息\" message:@\"用户名或密码错误，请重新输入！\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:nil];\n        [alertView show];\n    }\n    \n}\n\n#pragma mark 点击取消\n-(void)cancel{\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\n/**\n *  添加通知，注意这里设置了附加信息\n */\n-(void)postNotification{\n    NSDictionary *userInfo=@{@\"loginInfo\":[NSString stringWithFormat:@\"Hello,%@!\",_txtUserName.text]};\n    NSLog(@\"%@\",userInfo);\n    NSNotification *notification=[NSNotification notificationWithName:UPDATE_LGOGIN_INFO_NOTIFICATION object:self userInfo:userInfo];\n    [[NSNotificationCenter defaultCenter] postNotification:notification];\n//也可直接采用下面的方法\n//    [[NSNotificationCenter defaultCenter] postNotificationName:UPDATE_LGOGIN_INFO_NOTIFICATION object:self userInfo:userInfo];\n\n}\n@end\n运行效果：\nNotificationCenter_CustomNotification\n注意：\n通过上面的介绍大家应该可以发现其实通知中心是一种低耦合设计，和前面文章中提到的代理模式有异曲同工之妙。相对于后者而言，通知中心可以将一个通知发送给多个监听者，而每个对象的代理却只能有一个。当然代理也有其优点，例如使用代理代码分布结构更加清晰，它不像通知一样随处都可以添加订阅等，实际使用过程中需要根据实际情况而定。\n```\n\n","source":"_posts/oc/iOS开发系列--通知与消息机制.md","raw":"---\ntitle: iOS开发系列--通知与消息机制\ndate: 2016-10-08 11:39:44\ncategories: objective-c\n---\n在多数移动应用中任何时候都只能有一个应用程序处于活跃状态，如果其他应用此刻发生了一些用户感兴趣的那么通过通知机制就可以告诉用户此时发生的事情。iOS中通知机制又叫消息机制，其包括两类：一类是本地通知；另一类是推送通知，也叫远程通知。两种通知在iOS中的表现一致，可以通过横幅或者弹出提醒两种形式告诉用户，并且点击通知可以会打开应用程序，但是实现原理却完全不同。今天就和大家一块去看一下如何在iOS中实现这两种机制，并且在文章后面会补充通知中心的内容避免初学者对两种概念的混淆。\n<!-- more -->\n来自：http://\nblog.csdn.net/jianxin160/article/details/47753239\n\n本地通知\n推送通知\n补充--iOS开发证书、秘钥\n补充--通知中心\n本地通知\n本地通知是由本地应用触发的，它是基于时间行为的一种通知形式，例如闹钟定时、待办事项提醒，又或者一个应用在一段时候后不使用通常会提示用户使用此应用等都是本地通知。创建一个本地通知通常分为以下几个步骤：\n创建UILocalNotification。\n设置处理通知的时间fireDate。\n配置通知的内容：通知主体、通知声音、图标数字等。\n配置通知传递的自定义数据参数userInfo（这一步可选）。\n调用通知，可以使用scheduleLocalNotification:按计划调度一个通知，也可以使用presentLocalNotificationNow立即调用通知。\n下面就以一个程序更新后用户长期没有使用的提醒为例对本地通知做一个简单的了解。在这个过程中并没有牵扯太多的界面操作，所有的逻辑都在AppDelegate中：进入应用后如果没有注册通知，需要首先注册通知请求用户允许通知；一旦调用完注册方法，无论用户是否选择允许通知此刻都会调用应用程序的- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings代理方法，在这个方法中根据用户的选择：如果是允许通知则会按照前面的步骤创建通知并在一定时间后执行。\n```\n\n\t\n\n```objc\n\n\n```\n\n```objc\nAppDelegate.m\n//\n//  AppDelegate.m\n//  LocalNotification\n//\n//  Created by Kenshin Cui on 14/03/28.\n//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.\n//\n\n#import \"AppDelegate.h\"\n#import \"KCMainViewController.h\"\n\n@interface AppDelegate ()\n\n@end\n\n@implementation AppDelegate\n\n#pragma mark - 应用代理方法\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    \n    _window=[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];\n    \n    _window.backgroundColor =[UIColor colorWithRed:249/255.0 green:249/255.0 blue:249/255.0 alpha:1];\n    \n    //设置全局导航条风格和颜色\n    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1]];\n    [[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];\n    \n    KCMainViewController *mainController=[[KCMainViewController alloc]init];\n    _window.rootViewController=mainController;\n    \n    [_window makeKeyAndVisible];\n\n    //如果已经获得发送通知的授权则创建本地通知，否则请求授权(注意：如果不请求授权在设置中是没有对应的通知设置项的，也就是说如果从来没有发送过请求，即使通过设置也打不开消息允许设置)\n    if ([[UIApplication sharedApplication]currentUserNotificationSettings].types!=UIUserNotificationTypeNone) {\n        [self addLocalNotification];\n    }else{\n        [[UIApplication sharedApplication]registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert|UIUserNotificationTypeBadge|UIUserNotificationTypeSound  categories:nil]];\n    }\n    \n    return YES;\n}\n\n#pragma mark 调用过用户注册通知方法之后执行（也就是调用完registerUserNotificationSettings:方法之后执行）\n-(void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings{\n    if (notificationSettings.types!=UIUserNotificationTypeNone) {\n        [self addLocalNotification];\n    }\n}\n\n#pragma mark 进入前台后设置消息信息\n-(void)applicationWillEnterForeground:(UIApplication *)application{\n    [[UIApplication sharedApplication]setApplicationIconBadgeNumber:0];//进入前台取消应用消息图标\n}\n\n#pragma mark - 私有方法\n#pragma mark 添加本地通知\n-(void)addLocalNotification{\n    \n    //定义本地通知对象\n    UILocalNotification *notification=[[UILocalNotification alloc]init];\n    //设置调用时间\n    notification.fireDate=[NSDate dateWithTimeIntervalSinceNow:10.0];//通知触发的时间，10s以后\n    notification.repeatInterval=2;//通知重复次数\n    //notification.repeatCalendar=[NSCalendar currentCalendar];//当前日历，使用前最好设置时区等信息以便能够自动同步时间\n    \n    //设置通知属性\n    notification.alertBody=@\"最近添加了诸多有趣的特性，是否立即体验？\"; //通知主体\n    notification.applicationIconBadgeNumber=1;//应用程序图标右上角显示的消息数\n    notification.alertAction=@\"打开应用\"; //待机界面的滑动动作提示\n    notification.alertLaunchImage=@\"Default\";//通过点击通知打开应用时的启动图片,这里使用程序启动图片\n    //notification.soundName=UILocalNotificationDefaultSoundName;//收到通知时播放的声音，默认消息声音\n    notification.soundName=@\"msg.caf\";//通知声音（需要真机才能听到声音）\n    \n    //设置用户信息\n    notification.userInfo=@{@\"id\":@1,@\"user\":@\"Kenshin Cui\"};//绑定到通知上的其他附加信息\n    \n    //调用通知\n    [[UIApplication sharedApplication] scheduleLocalNotification:notification];\n}\n\n#pragma mark 移除本地通知，在不需要此通知时记得移除\n-(void)removeNotification{\n    [[UIApplication sharedApplication] cancelAllLocalNotifications];\n}\n@end\n请求获得用户允许通知的效果：\n LocalNotification_Request\n应用退出到后弹出通知的效果：\n LocalNotification_Notification\n锁屏状态下的通知效果(从这个界面可以看到alertAction配置为“打开应用”)：\nLocalNotification_Lock\n注意：\n在使用通知之前必须注册通知类型，如果用户不允许应用程序发送通知，则以后就无法发送通知，除非用户手动到iOS设置中打开通知。\n本地通知是有操作系统统一调度的，只有在应用退出到后台或者关闭才能收到通知。(注意：这一点对于后面的推送通知也是完全适用的。 ）\n通知的声音是由iOS系统播放的，格式必须是Linear PCM、MA4（IMA/ADPCM）、µLaw、aLaw中的一种，并且播放时间必须在30s内，否则将被系统声音替换，同时自定义声音文件必须放到main boundle中。\n本地通知的数量是有限制的，最近的本地通知最多只能有64个，超过这个数量将被系统忽略。\n如果想要移除本地通知可以调用UIApplication的cancelLocalNotification:或cancelAllLocalNotifications移除指定通知或所有通知。\n从上面的程序可以看到userInfo这个属性我们设置了参数，那么这个参数如何接收呢？\n在iOS中如果点击一个弹出通知（或者锁屏界面滑动查看通知），默认会自动打开当前应用。由于通知由系统调度那么此时进入应用有两种情况：如果应用程序已经完全退出那么此时会调用- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions方法；如果此时应用程序还在运行（无论是在前台还是在后台）则会调用-(void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification方法接收消息参数。当然如果是后者自然不必多说，因为参数中已经可以拿到notification对象，只要读取userInfo属性即可。如果是前者的话则可以访问launchOptions中键为UIApplicationLaunchOptionsLocalNotificationKey的对象，这个对象就是发送的通知，由此对象再去访问userInfo。为了演示这个过程在下面的程序中将userInfo的内容写入文件以便模拟关闭程序后再通过点击通知打开应用获取userInfo的过程。\nAppDelegate.m\n//\n//  AppDelegate.m\n//  LocalNotification\n//\n//  Created by Kenshin Cui on 14/03/28.\n//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.\n//\n\n#import \"AppDelegate.h\"\n#import \"KCMainViewController.h\"\n\n@interface AppDelegate ()\n\n@end\n\n@implementation AppDelegate\n\n#pragma mark - 应用代理方法\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    \n    _window=[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];\n    \n    _window.backgroundColor =[UIColor colorWithRed:249/255.0 green:249/255.0 blue:249/255.0 alpha:1];\n    \n    //设置全局导航条风格和颜色\n    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1]];\n    [[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];\n    \n    KCMainViewController *mainController=[[KCMainViewController alloc]init];\n    _window.rootViewController=mainController;\n    \n    [_window makeKeyAndVisible];\n\n    //添加通知\n    [self addLocalNotification];\n\n    //接收通知参数\n    UILocalNotification *notification=[launchOptions valueForKey:UIApplicationLaunchOptionsLocalNotificationKey];\n    NSDictionary *userInfo= notification.userInfo;\n    \n    [userInfo writeToFile:@\"/Users/kenshincui/Desktop/didFinishLaunchingWithOptions.txt\" atomically:YES];\n    NSLog(@\"didFinishLaunchingWithOptions:The userInfo is %@.\",userInfo);\n    \n    return YES;\n}\n\n#pragma mark 接收本地通知时触发\n-(void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification{\n    NSDictionary *userInfo=notification.userInfo;\n    [userInfo writeToFile:@\"/Users/kenshincui/Desktop/didReceiveLocalNotification.txt\" atomically:YES];\n    NSLog(@\"didReceiveLocalNotification:The userInfo is %@\",userInfo);\n}\n\n#pragma mark 调用过用户注册通知方法之后执行（也就是调用完registerUserNotificationSettings:方法之后执行）\n-(void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings{\n    if (notificationSettings.types!=UIUserNotificationTypeNone) {\n        [self addLocalNotification];\n    }\n}\n\n#pragma mark 进入前台后设置消息信息\n-(void)applicationWillEnterForeground:(UIApplication *)application{\n    [[UIApplication sharedApplication]setApplicationIconBadgeNumber:0];//进入前台取消应用消息图标\n}\n\n#pragma mark - 私有方法\n#pragma mark 添加本地通知\n-(void)addLocalNotification{\n    \n    //定义本地通知对象\n    UILocalNotification *notification=[[UILocalNotification alloc]init];\n    //设置调用时间\n    notification.fireDate=[NSDate dateWithTimeIntervalSinceNow:10.0];//通知触发的时间，10s以后\n    notification.repeatInterval=2;//通知重复次数\n    //notification.repeatCalendar=[NSCalendar currentCalendar];//当前日历，使用前最好设置时区等信息以便能够自动同步时间\n    \n    //设置通知属性\n    notification.alertBody=@\"最近添加了诸多有趣的特性，是否立即体验？\"; //通知主体\n    notification.applicationIconBadgeNumber=1;//应用程序图标右上角显示的消息数\n    notification.alertAction=@\"打开应用\"; //待机界面的滑动动作提示\n    notification.alertLaunchImage=@\"Default\";//通过点击通知打开应用时的启动图片\n    //notification.soundName=UILocalNotificationDefaultSoundName;//收到通知时播放的声音，默认消息声音\n    notification.soundName=@\"msg.caf\";//通知声音（需要真机）\n    \n    //设置用户信息\n    notification.userInfo=@{@\"id\":@1,@\"user\":@\"Kenshin Cui\"};//绑定到通知上的其他额外信息\n    \n    //调用通知\n    [[UIApplication sharedApplication] scheduleLocalNotification:notification];\n}\n@end\n上面的程序可以分为两种情况去运行：一种是启动程序关闭程序，等到接收到通知之后点击通知重新进入程序；另一种是启动程序后，进入后台（其实在前台也可以，但是为了明显的体验这个过程建议进入后台），接收到通知后点击通知进入应用。另种情况会分别按照前面说的情况调用不同的方法接收到userInfo写入本地文件系统。有了userInfo一般来说就可以根据这个信息进行一些处理，例如可以根据不同的参数信息导航到不同的界面，假设是更新的通知则可以导航到更新内容界面等。\n推送通知\n和本地通知不同，推送通知是由应用服务提供商发起的，通过苹果的APNs（Apple Push Notification Server）发送到应用客户端。下面是苹果官方关于推送通知的过程示意图：\nPushNotification_FlowChart\n推送通知的过程可以分为以下几步：\n应用服务提供商从服务器端把要发送的消息和设备令牌（device token）发送给苹果的消息推送服务器APNs。\nAPNs根据设备令牌在已注册的设备（iPhone、iPad、iTouch、mac等）查找对应的设备，将消息发送给相应的设备。\n客户端设备接将接收到的消息传递给相应的应用程序，应用程序根据用户设置弹出通知消息。\n当然，这只是一个简单的流程，有了这个流程我们还无从下手编写程序，将上面的流程细化可以得到如下流程图（图片来自互联网），在这个过程中会也会提到如何在程序中完成这些步骤：\nPushNotification_FlowChartDetail\n1.应用程序注册APNs推送消息。\n说明：\na.只有注册过的应用才有可能接收到消息，程序中通常通过UIApplication的registerUserNotificationSettings:方法注册，iOS8中通知注册的方法发生了改变，如果是iOS7及之前版本的iOS请参考其他代码。\nb.注册之前有两个前提条件必须准备好：开发配置文件（provisioning profile，也就是.mobileprovision后缀的文件）的App ID不能使用通配ID必须使用指定APP ID并且生成配置文件中选择Push Notifications服务，一般的开发配置文件无法完成注册；应用程序的Bundle Identifier必须和生成配置文件使用的APP ID完全一致。\n2.iOS从APNs接收device token，在应用程序获取device token。\n说明：\na.在UIApplication的-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken代理方法中获取令牌，此方法发生在注册之后。\nb.如果无法正确获得device token可以在UIApplication的-(void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error代理方法中查看详细错误信息，此方法发生在获取device token失败之后。\nc.必须真机调试，模拟器无法获取device token。\n3.iOS应用将device token发送给应用程序提供商，告诉服务器端当前设备允许接收消息。\n说明：\na.device token的生成算法只有Apple掌握，为了确保算法发生变化后仍然能够正常接收服务器端发送的通知，每次应用程序启动都重新获得device token（注意：device token的获取不会造成性能问题，苹果官方已经做过优化）。\nb.通常可以创建一个网络连接发送给应用程序提供商的服务器端， 在这个过程中最好将上一次获得的device token存储起来，避免重复发送，一旦发现device token发生了变化最好将原有的device token一块发送给服务器端，服务器端删除原有令牌存储新令牌避免服务器端发送无效消息。\n4.应用程序提供商在服务器端根据前面发送过来的device token组织信息发送给APNs。\n说明：\na.发送时指定device token和消息内容，并且完全按照苹果官方的消息格式组织消息内容，通常情况下可以借助其他第三方消息推送框架来完成。\n5.APNs根据消息中的device token查找已注册的设备推送消息。\n说明：\na.正常情况下可以根据device token将消息成功推送到客户端设备中，但是也不排除用户卸载程序的情况，此时推送消息失败，APNs会将这个错误消息通知服务器端以避免资源浪费（服务器端此时可以根据错误删除已经存储的device token，下次不再发送）。\n下面将简单演示一下推送通知的简单流程:\n首先，看一下iOS客户端代码：\n//\n//  AppDelegate.m\n//  pushnotification\n//\n//  Created by Kenshin Cui on 14/03/27.\n//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.\n//\n\n#import \"AppDelegate.h\"\n#import \"KCMainViewController.h\"\n\n@interface AppDelegate ()\n\n@end\n\n@implementation AppDelegate\n\n#pragma mark - 应用程序代理方法\n#pragma mark 应用程序启动之后\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    \n    _window=[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];\n    \n    _window.backgroundColor =[UIColor colorWithRed:249/255.0 green:249/255.0 blue:249/255.0 alpha:1];\n    \n    //设置全局导航条风格和颜色\n    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1]];\n    [[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];\n    \n    KCMainViewController *mainController=[[KCMainViewController alloc]init];\n    _window.rootViewController=mainController;\n    \n    [_window makeKeyAndVisible];\n    \n    //注册推送通知（注意iOS8注册方法发生了变化）\n    [application registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert|UIUserNotificationTypeBadge|UIUserNotificationTypeSound categories:nil]];\n    [application registerForRemoteNotifications];\n    \n    return YES;\n}\n#pragma mark 注册推送通知之后\n//在此接收设备令牌\n-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken{\n    [self addDeviceToken:deviceToken];\n    NSLog(@\"device token:%@\",deviceToken);\n}\n\n#pragma mark 获取device token失败后\n-(void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error{\n    NSLog(@\"didFailToRegisterForRemoteNotificationsWithError:%@\",error.localizedDescription);\n    [self addDeviceToken:nil];\n}\n\n#pragma mark 接收到推送通知之后\n-(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo{\n    NSLog(@\"receiveRemoteNotification,userInfo is %@\",userInfo);\n}\n\n#pragma mark - 私有方法\n/**\n *  添加设备令牌到服务器端\n *\n *  @param deviceToken 设备令牌\n */\n-(void)addDeviceToken:(NSData *)deviceToken{\n    NSString *key=@\"DeviceToken\";\n    NSData *oldToken= [[NSUserDefaults standardUserDefaults]objectForKey:key];\n    //如果偏好设置中的已存储设备令牌和新获取的令牌不同则存储新令牌并且发送给服务器端\n    if (![oldToken isEqualToData:deviceToken]) {\n        [[NSUserDefaults standardUserDefaults] setObject:deviceToken forKey:key];\n        [self sendDeviceTokenWidthOldDeviceToken:oldToken newDeviceToken:deviceToken];\n    }\n}\n\n-(void)sendDeviceTokenWidthOldDeviceToken:(NSData *)oldToken newDeviceToken:(NSData *)newToken{\n    //注意一定确保真机可以正常访问下面的地址\n    NSString *urlStr=@\"http://192.168.1.101/RegisterDeviceToken.aspx\";\n    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    NSURL *url=[NSURL URLWithString:urlStr];\n    NSMutableURLRequest *requestM=[NSMutableURLRequest requestWithURL:url cachePolicy:0 timeoutInterval:10.0];\n    [requestM setHTTPMethod:@\"POST\"];\n    NSString *bodyStr=[NSString stringWithFormat:@\"oldToken=%@&newToken=%@\",oldToken,newToken];\n    NSData *body=[bodyStr dataUsingEncoding:NSUTF8StringEncoding];\n    [requestM setHTTPBody:body];\n    NSURLSession *session=[NSURLSession sharedSession];\n    NSURLSessionDataTask *dataTask= [session dataTaskWithRequest:requestM completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n        if (error) {\n            NSLog(@\"Send failure,error is :%@\",error.localizedDescription);\n        }else{\n            NSLog(@\"Send Success!\");\n        }\n        \n    }];\n    [dataTask resume];\n}\n@end\niOS客户端代码的代码比较简单，注册推送通知，获取device token存储到偏好设置中，并且如果新获取的device token不同于偏好设置中存储的数据则发送给服务器端，更新服务器端device token列表。\n其次，由于device token需要发送给服务器端，这里使用一个Web应用作为服务器端接收device token，这里使用了ASP.NET程序来处理令牌接收注册工作，当然你使用其他技术同样没有问题。下面是对应的后台代码：\nusing System;\nusing System.Collections.Generic;\nusing System.Web;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\nusing CMJ.Framework.Data;\n\nnamespace WebServer\n{\n    public partial class RegisterDeviceToken : System.Web.UI.Page\n    {\n        private string _appID = @\"com.cmjstudio.pushnotification\";\n        private SqlHelper _helper = new SqlHelper();\n        protected void Page_Load(object sender, EventArgs e)\n        {\n            try\n            {\n                string oldToken = Request[\"oldToken\"] + \"\";\n                string newToken = Request[\"newToken\"] + \"\";\n                string sql = \"\";\n                //如果传递旧的设备令牌则删除旧令牌添加新令牌\n                if (oldToken != \"\")\n                {\n                    sql = string.Format(\"DELETE FROM dbo.Device WHERE AppID='{0}' AND DeviceToken='{1}';\", _appID, oldToken);\n                }\n                sql += string.Format(@\"IF NOT EXISTS (SELECT ID FROM dbo.Device WHERE AppID='{0}' AND DeviceToken='{1}')\n                                        INSERT INTO dbo.Device ( AppID, DeviceToken ) VALUES ( N'{0}', N'{1}');\", _appID, newToken);\n                _helper.ExecuteNonQuery(sql);\n                Response.Write(\"注册成功！\");\n            }\n            catch(Exception ex)\n            {\n                Response.Write(\"注册失败，错误详情：\"+ex.ToString());\n            }\n        }\n    }\n}\n这个过程主要就是保存device token到数据库中，当然如果同时传递旧的设备令牌还需要先删除就的设备令牌，这里简单的在数据库中创建了一张Device表来保存设备令牌，其中记录了应用程序Id和设备令牌。\n第三步就是服务器端发送消息，如果要给APNs发送消息就必须按照Apple的标准消息格式组织消息内容。但是好在目前已经有很多开源的第三方类库供我们使用，具体消息如何包装完全不用自己组织，这里使用一个开源的类库Push Sharp来给APNs发送消息 ,除了可以给Apple设备推送消息，Push Sharp还支持Android、Windows Phone等多种设备，更多详细内容大家可以参照官方说明。前面说过如果要开发消息推送应用不能使用一般的开发配置文件，这里还需要注意：如果服务器端要给APNs发送消息其秘钥也必须是通过APNs Development iOS类型的证书来导出的，一般的iOS Development 类型的证书导出的秘钥无法用作服务器端发送秘钥。下面通过在一个简单的WinForm程序中调用Push Sharp给APNs发送消息，这里读取之前Device表中的所有设备令牌循环发送消息：\nusing System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\nusing PushSharp;\nusing PushSharp.Apple;\nusing CMJ.Framework.Data;\nusing CMJ.Framework.Logging;\nusing CMJ.Framework.Windows.Forms;\n\nnamespace PushNotificationServer\n{\n    public partial class frmMain : PersonalizeForm\n    {\n        private string _appID = @\"com.cmjstudio.pushnotification\";\n        private SqlHelper _helper = new SqlHelper();\n        public frmMain()\n        {\n            InitializeComponent();\n        }\n\n        private void btnClose_Click(object sender, EventArgs e)\n        {\n            this.Close();\n        }\n\n        private void btnSend_Click(object sender, EventArgs e)\n        {\n            List<string> deviceTokens = GetDeviceToken();\n            SendMessage(deviceTokens, tbMessage.Text);\n        }\n\n        #region 发送消息\n        /// <summary>\n        /// 取得所有设备令牌\n        /// </summary>\n        /// <returns>设备令牌</returns>\n        private List<string> GetDeviceToken()\n        {\n            List<string> deviceTokens = new List<string>();\n            string sql = string.Format(\"SELECT DeviceToken FROM dbo.Device WHERE AppID='{0}'\",_appID);\n            DataTable dt = _helper.GetDataTable(sql);\n            if(dt.Rows.Count>0)\n            {\n                foreach(DataRow dr in dt.Rows)\n                {\n                    deviceTokens.Add((dr[\"DeviceToken\"]+\"\").TrimStart('<').TrimEnd('>').Replace(\" \",\"\"));\n                }\n            }\n            return deviceTokens;\n        }\n        \n        /// <summary>\n        /// 发送消息\n        /// </summary>\n        /// <param name=\"deviceToken\">设备令牌</param>\n        /// <param name=\"message\">消息内容</param>\n        private void SendMessage(List<string> deviceToken, string message)\n        {\n            //创建推送对象\n            var pusher = new PushBroker();\n            pusher.OnNotificationSent += pusher_OnNotificationSent;//发送成功事件\n            pusher.OnNotificationFailed += pusher_OnNotificationFailed;//发送失败事件\n            pusher.OnChannelCreated += pusher_OnChannelCreated;\n            pusher.OnChannelDestroyed += pusher_OnChannelDestroyed;\n            pusher.OnChannelException += pusher_OnChannelException;\n            pusher.OnDeviceSubscriptionChanged += pusher_OnDeviceSubscriptionChanged;\n            pusher.OnDeviceSubscriptionExpired += pusher_OnDeviceSubscriptionExpired;\n            pusher.OnNotificationRequeue += pusher_OnNotificationRequeue;\n            pusher.OnServiceException += pusher_OnServiceException;\n            //注册推送服务\n            byte[] certificateData = File.ReadAllBytes(@\"E:\\KenshinCui_Push.p12\");\n            pusher.RegisterAppleService(new ApplePushChannelSettings(certificateData, \"123\"));\n            foreach (string token in deviceToken)\n            {\n                //给指定设备发送消息\n                pusher.QueueNotification(new AppleNotification()\n                    .ForDeviceToken(token)\n                    .WithAlert(message) \n                    .WithBadge(1)\n                    .WithSound(\"default\"));\n            }\n        }\n\n        void pusher_OnServiceException(object sender, Exception error)\n        {\n            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());\n            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\" + error.ToString(), \"系统提示\");\n        }\n\n        void pusher_OnNotificationRequeue(object sender, PushSharp.Core.NotificationRequeueEventArgs e)\n        {\n            Console.WriteLine(\"pusher_OnNotificationRequeue\");\n        }\n\n        void pusher_OnDeviceSubscriptionExpired(object sender, string expiredSubscriptionId, DateTime expirationDateUtc, PushSharp.Core.INotification notification)\n        {\n            Console.WriteLine(\"pusher_OnDeviceSubscriptionChanged\");\n        }\n\n        void pusher_OnDeviceSubscriptionChanged(object sender, string oldSubscriptionId, string newSubscriptionId, PushSharp.Core.INotification notification)\n        {\n            Console.WriteLine(\"pusher_OnDeviceSubscriptionChanged\");\n        }\n\n        void pusher_OnChannelException(object sender, PushSharp.Core.IPushChannel pushChannel, Exception error)\n        {\n            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());\n            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\" + error.ToString(), \"系统提示\");\n        }\n\n        void pusher_OnChannelDestroyed(object sender)\n        {\n            Console.WriteLine(\"pusher_OnChannelDestroyed\");\n        }\n\n        void pusher_OnChannelCreated(object sender, PushSharp.Core.IPushChannel pushChannel)\n        {\n            Console.WriteLine(\"pusher_OnChannelCreated\");\n        }\n\n        void pusher_OnNotificationFailed(object sender, PushSharp.Core.INotification notification, Exception error)\n        {\n            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());\n            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\"+error.ToString(), \"系统提示\");\n        }\n\n        void pusher_OnNotificationSent(object sender, PushSharp.Core.INotification notification)\n        {\n            Console.WriteLine(\"消息发送成功！\");\n            PersonalizeMessageBox.Show(this, \"消息发送成功！\", \"系统提示\");\n        }\n        #endregion\n    }\n}\n服务器端消息发送应用运行效果：\nPushNotification_ServerClient\niOS客户端接收的消息的效果：\nPushNotification_iOSApp\n到目前为止通过服务器端应用可以顺利发送消息给APNs并且iOS应用已经成功接收推送消息。\n补充--iOS开发证书、秘钥\niOS开发过程中如果需要进行真机调试、发布需要注册申请很多证书，对于初学者往往迷惑不解，再加上今天的文章中会牵扯到一些特殊配置，这里就简单的对iOS开发的常用证书和秘钥等做一说明。\n证书\niOS常用的证书包括开发证书和发布证书，无论是真机调试还是最终发布应用到App Store这两个证书都是必须的，它是iOS开发的基本证书。\na.开发证书：开发证书又分为普通开发证书和推送证书，如果仅仅是一般的应用则前者即可满足，但是如果开发推送应用则必须使用推送证书。\nb.发布证书：发布证书又可以分为普通发布证书、推送证书、Pass Type ID证书、站点发布证书、VoIP服务证书、苹果支付证书。同样的，对于需要使用特殊服务的应用则必须选择对应的证书。\n应用标识\nApp ID,应用程序的唯一标识，对应iOS应用的Bundle Identifier，App ID在苹果开发者中心中分为通配应用ID和明确的应用ID,前者一般用于普通应用开发，一个ID可以适用于多个不同标识的应用；但是对于使用消息推送、Passbook、站点发布、iCloud等服务的应用必须配置明确的应用ID。\n设备标识\nUDID,用于标识每一台硬件设备的标示符。注意它不是device token，device token是根据UDID使用一个只有Apple自己才知道的算法生成的一组标示符。\n配置简介\nProvisioning Profiles,平时又称为PP文件。将UDID、App ID、开发证书打包在一起的配置文件，同样分为开发和发布两类配置文件。\n秘钥\n在申请开发证书时必须要首先提交一个秘钥请求文件，对于生成秘钥请求文件的mac，如果要做开发则只需要下载证书和配置简介即可开发。但是如果要想在其他机器上做开发则必须将证书中的秘钥导出（导出之后是一个.p12文件），然后导入其他机器。同时对于类似于推送服务器端应用如果要给APNs发送消息，同样需要使用.p12秘钥文件，并且这个秘钥文件需要是推送证书导出的对应秘钥。\n补充--通知中心\n对于很多初学者往往会把iOS中的本地通知、推送通知和iOS通知中心的概念弄混。其实二者之间并没有任何关系，事实上它们都不属于一个框架，前者属于UIKit框架，后者属于Foundation框架。\n通知中心实际上是iOS程序内部之间的一种消息广播机制，主要为了解决应用程序内部不同对象之间解耦而设计。它是基于观察者模式设计的，不能跨应用程序进程通信，当通知中心接收到消息之后会根据内部的消息转发表，将消息发送给订阅者。下面是一个简单的流程示意图：\nimage\n了解通知中心需要熟悉NSNotificationCenter和NSNotification两个类：\nNSNotificationCenter：是通知系统的中心，用于注册和发送通知，下表列出常用的方法。\n方法\t说明\n- (void)addObserver:(id)observer selector:(SEL)aSelector name:(NSString *)aName object:(id)anObject\t添加监听，参数：\nobserver:监听者\nselector:监听方法（监听者监听到通知后执行的方法）\n  name:监听的通知名称\nobject:通知的发送者（如果指定nil则监听任何对象发送的通知）\n- (id <NSObject>)addObserverForName:(NSString *)name object:(id)obj queue:(NSOperationQueue *)queue usingBlock:(void (^)(NSNotification *note))block\t添加监听，参数：\nname:监听的通知名称\nobject:通知的发送者（如果指定nil则监听任何对象发送的通知）\nqueue:操作队列，如果制定非主队线程队列则可以异步执行block\nblock:监听到通知后执行的操作\n- (void)postNotification:(NSNotification *)notification\t发送通知，参数：\nnotification：通知对象\n- (void)postNotificationName:(NSString *)aName object:(id)anObject\t发送通知，参数：\naName：通知名称\nanObject：通知发送者\n- (void)postNotificationName:(NSString *)aName object:(id)anObject userInfo:(NSDictionary *)aUserInfo\t发送通知，参数：\naName：通知名称\nanObject：通知发送者\naUserInfo：通知参数\n- (void)removeObserver:(id)observer\t移除监听，参数：\nobserver：监听对象\n- (void)removeObserver:(id)observer name:(NSString *)aName object:(id)anObject\t移除监听，参数：\nobserver：监听对象\naName：通知名称\nanObject：通知发送者\nNSNotification：代表通知内容的载体，主要有三个属性：name代表通知名称，object代表通知的发送者，userInfo代表通知的附加信息。\n虽然前面的文章中从未提到过通知中心，但是其实通知中心我们并不陌生，前面文章中很多内容都是通过通知中心来进行应用中各个组件通信的，只是没有单独拿出来说而已。例如前面的文章中讨论的应用程序生命周期问题，当应用程序启动后、进入后台、进入前台、获得焦点、失去焦点，窗口大小改变、隐藏等都会发送通知。这个通知可以通过前面NSNotificationCenter进行订阅即可接收对应的消息，下面的示例演示了如何添加监听获得UIApplication的进入后台和获得焦点的通知：\n//\n//  KCMainViewController.m\n//  NotificationCenter\n//\n//  Created by Kenshin Cui on 14/03/27.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"KCMainViewController.h\"\n\n@interface KCMainViewController ()\n\n@end\n\n@implementation KCMainViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    [self addObserverToNotificationCenter];\n    \n}\n\n#pragma mark 添加监听\n-(void)addObserverToNotificationCenter{\n    /*添加应用程序进入后台监听\n     * observer:监听者\n     * selector:监听方法（监听者监听到通知后执行的方法）\n     * name:监听的通知名称(下面的UIApplicationDidEnterBackgroundNotification是一个常量)\n     * object:通知的发送者（如果指定nil则监听任何对象发送的通知）\n     */\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(applicationEnterBackground) name:UIApplicationDidEnterBackgroundNotification object:[UIApplication sharedApplication]];\n    \n    /* 添加应用程序获得焦点的通知监听\n     * name:监听的通知名称\n     * object:通知的发送者（如果指定nil则监听任何对象发送的通知）\n     * queue:操作队列，如果制定非主队线程队列则可以异步执行block\n     * block:监听到通知后执行的操作\n     */\n    NSOperationQueue *operationQueue=[[NSOperationQueue alloc]init];\n    [[NSNotificationCenter defaultCenter] addObserverForName:UIApplicationDidBecomeActiveNotification object:[UIApplication sharedApplication] queue:operationQueue usingBlock:^(NSNotification *note) {\n        NSLog(@\"Application become active.\");\n    }];\n}\n\n#pragma mark 应用程序启动监听方法\n-(void)applicationEnterBackground{\n    NSLog(@\"Application enter background.\");\n}\n@end\n当然很多时候使用通知中心是为了添加自定义通知，并获得自定义通知消息。在前面的文章“iOS开发系列--视图切换”中提到过如何进行多视图之间参数传递，其实利用自定义通知也可以进行参数传递。通常一个应用登录后会显示用户信息，而登录信息可以通过登录界面获取。下面就以这样一种场景为例，在主界面中添加监听，在登录界面发送通知，一旦登录成功将向通知中心发送成功登录的通知，此时主界面中由于已经添加通知监听所以会收到通知并更新UI界面。\n主界面KCMainViewController.m：\n//\n//  KCMainViewController.m\n//  NotificationCenter\n//\n//  Created by Kenshin Cui on 14/03/27\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"KCMainViewController.h\"\n#import \"KCLoginViewController.h\"\n#define UPDATE_LGOGIN_INFO_NOTIFICATION @\"updateLoginInfo\"\n\n@interface KCMainViewController (){\n    UILabel *_lbLoginInfo;\n    UIButton *_btnLogin;\n}\n\n@end\n\n@implementation KCMainViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    [self setupUI];\n}\n\n-(void)setupUI{\n    UILabel *label =[[UILabel alloc]initWithFrame:CGRectMake(0, 100,320 ,30)];\n    label.textAlignment=NSTextAlignmentCenter;\n    label.textColor=[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1];\n    _lbLoginInfo=label;\n    [self.view addSubview:label];\n    \n    UIButton *button=[UIButton buttonWithType:UIButtonTypeSystem];\n    button.frame=CGRectMake(60, 200, 200, 25);\n    [button setTitle:@\"登录\" forState:UIControlStateNormal];\n    [button addTarget:self action:@selector(loginOut) forControlEvents:UIControlEventTouchUpInside];\n    _btnLogin=button;\n    \n    [self.view addSubview:button];\n}\n\n-(void)loginOut{\n    //添加监听\n    [self addObserverToNotification];\n    \n    KCLoginViewController *loginController=[[KCLoginViewController alloc]init];\n    \n    [self presentViewController:loginController animated:YES completion:nil];\n}\n\n/**\n *  添加监听\n */\n-(void)addObserverToNotification{\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(updateLoginInfo:) name:UPDATE_LGOGIN_INFO_NOTIFICATION object:nil];\n}\n\n/**\n *  更新登录信息,注意在这里可以获得通知对象并且读取附加信息\n */\n-(void)updateLoginInfo:(NSNotification *)notification{\n    NSDictionary *userInfo=notification.userInfo;\n    _lbLoginInfo.text=userInfo[@\"loginInfo\"];\n    _btnLogin.titleLabel.text=@\"注销\";\n}\n\n-(void)dealloc{\n    //移除监听\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n@end\n登录界面KCLoginViewController.m：\n//\n//  KCLoginViewController.m\n//  NotificationCenter\n//\n//  Created by Kenshin Cui on 14/03/27.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"KCLoginViewController.h\"\n#define UPDATE_LGOGIN_INFO_NOTIFICATION @\"updateLoginInfo\"\n\n@interface KCLoginViewController (){\n    UITextField *_txtUserName;\n    UITextField *_txtPassword;\n}\n\n@end\n\n@implementation KCLoginViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    [self setupUI];\n}\n\n/**\n *  UI布局\n */\n-(void)setupUI{\n    //用户名\n    UILabel *lbUserName=[[UILabel alloc]initWithFrame:CGRectMake(50, 150, 100, 30)];\n    lbUserName.text=@\"用户名：\";\n    [self.view addSubview:lbUserName];\n    \n    _txtUserName=[[UITextField alloc]initWithFrame:CGRectMake(120, 150, 150, 30)];\n    _txtUserName.borderStyle=UITextBorderStyleRoundedRect;\n    [self.view addSubview:_txtUserName];\n    \n    //密码\n    UILabel *lbPassword=[[UILabel alloc]initWithFrame:CGRectMake(50, 200, 100, 30)];\n    lbPassword.text=@\"密码：\";\n    [self.view addSubview:lbPassword];\n    \n    _txtPassword=[[UITextField alloc]initWithFrame:CGRectMake(120, 200, 150, 30)];\n    _txtPassword.secureTextEntry=YES;\n    _txtPassword.borderStyle=UITextBorderStyleRoundedRect;\n    [self.view addSubview:_txtPassword];\n    \n    //登录按钮\n    UIButton *btnLogin=[UIButton buttonWithType:UIButtonTypeSystem];\n    btnLogin.frame=CGRectMake(70, 270, 80, 30);\n    [btnLogin setTitle:@\"登录\" forState:UIControlStateNormal];\n    [self.view addSubview:btnLogin];\n    [btnLogin addTarget:self action:@selector(login) forControlEvents:UIControlEventTouchUpInside];\n    \n    //取消登录按钮\n    UIButton *btnCancel=[UIButton buttonWithType:UIButtonTypeSystem];\n    btnCancel.frame=CGRectMake(170, 270, 80, 30);\n    [btnCancel setTitle:@\"取消\" forState:UIControlStateNormal];\n    [self.view addSubview:btnCancel];\n    [btnCancel addTarget:self action:@selector(cancel) forControlEvents:UIControlEventTouchUpInside];\n}\n\n#pragma mark 登录操作\n-(void)login{\n    if ([_txtUserName.text isEqualToString:@\"kenshincui\"] && [_txtPassword.text isEqualToString:@\"123\"] ) {\n        //发送通知\n        [self postNotification];\n        [self dismissViewControllerAnimated:YES completion:nil];\n    }else{\n        //登录失败弹出提示信息\n        UIAlertView *alertView=[[UIAlertView alloc]initWithTitle:@\"系统信息\" message:@\"用户名或密码错误，请重新输入！\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:nil];\n        [alertView show];\n    }\n    \n}\n\n#pragma mark 点击取消\n-(void)cancel{\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\n/**\n *  添加通知，注意这里设置了附加信息\n */\n-(void)postNotification{\n    NSDictionary *userInfo=@{@\"loginInfo\":[NSString stringWithFormat:@\"Hello,%@!\",_txtUserName.text]};\n    NSLog(@\"%@\",userInfo);\n    NSNotification *notification=[NSNotification notificationWithName:UPDATE_LGOGIN_INFO_NOTIFICATION object:self userInfo:userInfo];\n    [[NSNotificationCenter defaultCenter] postNotification:notification];\n//也可直接采用下面的方法\n//    [[NSNotificationCenter defaultCenter] postNotificationName:UPDATE_LGOGIN_INFO_NOTIFICATION object:self userInfo:userInfo];\n\n}\n@end\n运行效果：\nNotificationCenter_CustomNotification\n注意：\n通过上面的介绍大家应该可以发现其实通知中心是一种低耦合设计，和前面文章中提到的代理模式有异曲同工之妙。相对于后者而言，通知中心可以将一个通知发送给多个监听者，而每个对象的代理却只能有一个。当然代理也有其优点，例如使用代理代码分布结构更加清晰，它不像通知一样随处都可以添加订阅等，实际使用过程中需要根据实际情况而定。\n```\n\n","slug":"oc/iOS开发系列--通知与消息机制","published":1,"updated":"2016-10-08T05:52:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98a003621xwvjh5hxrt","content":"<p>在多数移动应用中任何时候都只能有一个应用程序处于活跃状态，如果其他应用此刻发生了一些用户感兴趣的那么通过通知机制就可以告诉用户此时发生的事情。iOS中通知机制又叫消息机制，其包括两类：一类是本地通知；另一类是推送通知，也叫远程通知。两种通知在iOS中的表现一致，可以通过横幅或者弹出提醒两种形式告诉用户，并且点击通知可以会打开应用程序，但是实现原理却完全不同。今天就和大家一块去看一下如何在iOS中实现这两种机制，并且在文章后面会补充通知中心的内容避免初学者对两种概念的混淆。<br><a id=\"more\"></a><br>来自：http://<br>blog.csdn.net/jianxin160/article/details/47753239</p>\n<p>本地通知<br>推送通知<br>补充–iOS开发证书、秘钥<br>补充–通知中心<br>本地通知<br>本地通知是由本地应用触发的，它是基于时间行为的一种通知形式，例如闹钟定时、待办事项提醒，又或者一个应用在一段时候后不使用通常会提示用户使用此应用等都是本地通知。创建一个本地通知通常分为以下几个步骤：<br>创建UILocalNotification。<br>设置处理通知的时间fireDate。<br>配置通知的内容：通知主体、通知声音、图标数字等。<br>配置通知传递的自定义数据参数userInfo（这一步可选）。<br>调用通知，可以使用scheduleLocalNotification:按计划调度一个通知，也可以使用presentLocalNotificationNow立即调用通知。<br>下面就以一个程序更新后用户长期没有使用的提醒为例对本地通知做一个简单的了解。在这个过程中并没有牵扯太多的界面操作，所有的逻辑都在AppDelegate中：进入应用后如果没有注册通知，需要首先注册通知请求用户允许通知；一旦调用完注册方法，无论用户是否选择允许通知此刻都会调用应用程序的- (void)application:(UIApplication <em>)application didRegisterUserNotificationSettings:(UIUserNotificationSettings </em>)notificationSettings代理方法，在这个方法中根据用户的选择：如果是允许通知则会按照前面的步骤创建通知并在一定时间后执行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">```objc</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div><div class=\"line\">480</div><div class=\"line\">481</div><div class=\"line\">482</div><div class=\"line\">483</div><div class=\"line\">484</div><div class=\"line\">485</div><div class=\"line\">486</div><div class=\"line\">487</div><div class=\"line\">488</div><div class=\"line\">489</div><div class=\"line\">490</div><div class=\"line\">491</div><div class=\"line\">492</div><div class=\"line\">493</div><div class=\"line\">494</div><div class=\"line\">495</div><div class=\"line\">496</div><div class=\"line\">497</div><div class=\"line\">498</div><div class=\"line\">499</div><div class=\"line\">500</div><div class=\"line\">501</div><div class=\"line\">502</div><div class=\"line\">503</div><div class=\"line\">504</div><div class=\"line\">505</div><div class=\"line\">506</div><div class=\"line\">507</div><div class=\"line\">508</div><div class=\"line\">509</div><div class=\"line\">510</div><div class=\"line\">511</div><div class=\"line\">512</div><div class=\"line\">513</div><div class=\"line\">514</div><div class=\"line\">515</div><div class=\"line\">516</div><div class=\"line\">517</div><div class=\"line\">518</div><div class=\"line\">519</div><div class=\"line\">520</div><div class=\"line\">521</div><div class=\"line\">522</div><div class=\"line\">523</div><div class=\"line\">524</div><div class=\"line\">525</div><div class=\"line\">526</div><div class=\"line\">527</div><div class=\"line\">528</div><div class=\"line\">529</div><div class=\"line\">530</div><div class=\"line\">531</div><div class=\"line\">532</div><div class=\"line\">533</div><div class=\"line\">534</div><div class=\"line\">535</div><div class=\"line\">536</div><div class=\"line\">537</div><div class=\"line\">538</div><div class=\"line\">539</div><div class=\"line\">540</div><div class=\"line\">541</div><div class=\"line\">542</div><div class=\"line\">543</div><div class=\"line\">544</div><div class=\"line\">545</div><div class=\"line\">546</div><div class=\"line\">547</div><div class=\"line\">548</div><div class=\"line\">549</div><div class=\"line\">550</div><div class=\"line\">551</div><div class=\"line\">552</div><div class=\"line\">553</div><div class=\"line\">554</div><div class=\"line\">555</div><div class=\"line\">556</div><div class=\"line\">557</div><div class=\"line\">558</div><div class=\"line\">559</div><div class=\"line\">560</div><div class=\"line\">561</div><div class=\"line\">562</div><div class=\"line\">563</div><div class=\"line\">564</div><div class=\"line\">565</div><div class=\"line\">566</div><div class=\"line\">567</div><div class=\"line\">568</div><div class=\"line\">569</div><div class=\"line\">570</div><div class=\"line\">571</div><div class=\"line\">572</div><div class=\"line\">573</div><div class=\"line\">574</div><div class=\"line\">575</div><div class=\"line\">576</div><div class=\"line\">577</div><div class=\"line\">578</div><div class=\"line\">579</div><div class=\"line\">580</div><div class=\"line\">581</div><div class=\"line\">582</div><div class=\"line\">583</div><div class=\"line\">584</div><div class=\"line\">585</div><div class=\"line\">586</div><div class=\"line\">587</div><div class=\"line\">588</div><div class=\"line\">589</div><div class=\"line\">590</div><div class=\"line\">591</div><div class=\"line\">592</div><div class=\"line\">593</div><div class=\"line\">594</div><div class=\"line\">595</div><div class=\"line\">596</div><div class=\"line\">597</div><div class=\"line\">598</div><div class=\"line\">599</div><div class=\"line\">600</div><div class=\"line\">601</div><div class=\"line\">602</div><div class=\"line\">603</div><div class=\"line\">604</div><div class=\"line\">605</div><div class=\"line\">606</div><div class=\"line\">607</div><div class=\"line\">608</div><div class=\"line\">609</div><div class=\"line\">610</div><div class=\"line\">611</div><div class=\"line\">612</div><div class=\"line\">613</div><div class=\"line\">614</div><div class=\"line\">615</div><div class=\"line\">616</div><div class=\"line\">617</div><div class=\"line\">618</div><div class=\"line\">619</div><div class=\"line\">620</div><div class=\"line\">621</div><div class=\"line\">622</div><div class=\"line\">623</div><div class=\"line\">624</div><div class=\"line\">625</div><div class=\"line\">626</div><div class=\"line\">627</div><div class=\"line\">628</div><div class=\"line\">629</div><div class=\"line\">630</div><div class=\"line\">631</div><div class=\"line\">632</div><div class=\"line\">633</div><div class=\"line\">634</div><div class=\"line\">635</div><div class=\"line\">636</div><div class=\"line\">637</div><div class=\"line\">638</div><div class=\"line\">639</div><div class=\"line\">640</div><div class=\"line\">641</div><div class=\"line\">642</div><div class=\"line\">643</div><div class=\"line\">644</div><div class=\"line\">645</div><div class=\"line\">646</div><div class=\"line\">647</div><div class=\"line\">648</div><div class=\"line\">649</div><div class=\"line\">650</div><div class=\"line\">651</div><div class=\"line\">652</div><div class=\"line\">653</div><div class=\"line\">654</div><div class=\"line\">655</div><div class=\"line\">656</div><div class=\"line\">657</div><div class=\"line\">658</div><div class=\"line\">659</div><div class=\"line\">660</div><div class=\"line\">661</div><div class=\"line\">662</div><div class=\"line\">663</div><div class=\"line\">664</div><div class=\"line\">665</div><div class=\"line\">666</div><div class=\"line\">667</div><div class=\"line\">668</div><div class=\"line\">669</div><div class=\"line\">670</div><div class=\"line\">671</div><div class=\"line\">672</div><div class=\"line\">673</div><div class=\"line\">674</div><div class=\"line\">675</div><div class=\"line\">676</div><div class=\"line\">677</div><div class=\"line\">678</div><div class=\"line\">679</div><div class=\"line\">680</div><div class=\"line\">681</div><div class=\"line\">682</div><div class=\"line\">683</div><div class=\"line\">684</div><div class=\"line\">685</div><div class=\"line\">686</div><div class=\"line\">687</div><div class=\"line\">688</div><div class=\"line\">689</div><div class=\"line\">690</div><div class=\"line\">691</div><div class=\"line\">692</div><div class=\"line\">693</div><div class=\"line\">694</div><div class=\"line\">695</div><div class=\"line\">696</div><div class=\"line\">697</div><div class=\"line\">698</div><div class=\"line\">699</div><div class=\"line\">700</div><div class=\"line\">701</div><div class=\"line\">702</div><div class=\"line\">703</div><div class=\"line\">704</div><div class=\"line\">705</div><div class=\"line\">706</div><div class=\"line\">707</div><div class=\"line\">708</div><div class=\"line\">709</div><div class=\"line\">710</div><div class=\"line\">711</div><div class=\"line\">712</div><div class=\"line\">713</div><div class=\"line\">714</div><div class=\"line\">715</div><div class=\"line\">716</div><div class=\"line\">717</div><div class=\"line\">718</div><div class=\"line\">719</div><div class=\"line\">720</div><div class=\"line\">721</div><div class=\"line\">722</div><div class=\"line\">723</div><div class=\"line\">724</div><div class=\"line\">725</div><div class=\"line\">726</div><div class=\"line\">727</div><div class=\"line\">728</div><div class=\"line\">729</div><div class=\"line\">730</div><div class=\"line\">731</div><div class=\"line\">732</div><div class=\"line\">733</div><div class=\"line\">734</div><div class=\"line\">735</div><div class=\"line\">736</div><div class=\"line\">737</div><div class=\"line\">738</div><div class=\"line\">739</div><div class=\"line\">740</div><div class=\"line\">741</div><div class=\"line\">742</div><div class=\"line\">743</div><div class=\"line\">744</div><div class=\"line\">745</div><div class=\"line\">746</div><div class=\"line\">747</div><div class=\"line\">748</div><div class=\"line\">749</div><div class=\"line\">750</div><div class=\"line\">751</div><div class=\"line\">752</div><div class=\"line\">753</div><div class=\"line\">754</div><div class=\"line\">755</div><div class=\"line\">756</div><div class=\"line\">757</div><div class=\"line\">758</div><div class=\"line\">759</div><div class=\"line\">760</div><div class=\"line\">761</div><div class=\"line\">762</div><div class=\"line\">763</div><div class=\"line\">764</div><div class=\"line\">765</div><div class=\"line\">766</div><div class=\"line\">767</div><div class=\"line\">768</div><div class=\"line\">769</div><div class=\"line\">770</div><div class=\"line\">771</div><div class=\"line\">772</div><div class=\"line\">773</div><div class=\"line\">774</div><div class=\"line\">775</div><div class=\"line\">776</div><div class=\"line\">777</div><div class=\"line\">778</div><div class=\"line\">779</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppDelegate.m</div><div class=\"line\">//</div><div class=\"line\">//  AppDelegate.m</div><div class=\"line\">//  LocalNotification</div><div class=\"line\">//</div><div class=\"line\">//  Created by Kenshin Cui on 14/03/28.</div><div class=\"line\">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import \"AppDelegate.h\"</div><div class=\"line\">#import \"KCMainViewController.h\"</div><div class=\"line\"></div><div class=\"line\">@interface AppDelegate ()</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation AppDelegate</div><div class=\"line\"></div><div class=\"line\">#pragma mark - 应用代理方法</div><div class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class=\"line\">    </div><div class=\"line\">    _window=[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];</div><div class=\"line\">    </div><div class=\"line\">    _window.backgroundColor =[UIColor colorWithRed:249/255.0 green:249/255.0 blue:249/255.0 alpha:1];</div><div class=\"line\">    </div><div class=\"line\">    //设置全局导航条风格和颜色</div><div class=\"line\">    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1]];</div><div class=\"line\">    [[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];</div><div class=\"line\">    </div><div class=\"line\">    KCMainViewController *mainController=[[KCMainViewController alloc]init];</div><div class=\"line\">    _window.rootViewController=mainController;</div><div class=\"line\">    </div><div class=\"line\">    [_window makeKeyAndVisible];</div><div class=\"line\"></div><div class=\"line\">    //如果已经获得发送通知的授权则创建本地通知，否则请求授权(注意：如果不请求授权在设置中是没有对应的通知设置项的，也就是说如果从来没有发送过请求，即使通过设置也打不开消息允许设置)</div><div class=\"line\">    if ([[UIApplication sharedApplication]currentUserNotificationSettings].types!=UIUserNotificationTypeNone) &#123;</div><div class=\"line\">        [self addLocalNotification];</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">        [[UIApplication sharedApplication]registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert|UIUserNotificationTypeBadge|UIUserNotificationTypeSound  categories:nil]];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    return YES;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 调用过用户注册通知方法之后执行（也就是调用完registerUserNotificationSettings:方法之后执行）</div><div class=\"line\">-(void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings&#123;</div><div class=\"line\">    if (notificationSettings.types!=UIUserNotificationTypeNone) &#123;</div><div class=\"line\">        [self addLocalNotification];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 进入前台后设置消息信息</div><div class=\"line\">-(void)applicationWillEnterForeground:(UIApplication *)application&#123;</div><div class=\"line\">    [[UIApplication sharedApplication]setApplicationIconBadgeNumber:0];//进入前台取消应用消息图标</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark - 私有方法</div><div class=\"line\">#pragma mark 添加本地通知</div><div class=\"line\">-(void)addLocalNotification&#123;</div><div class=\"line\">    </div><div class=\"line\">    //定义本地通知对象</div><div class=\"line\">    UILocalNotification *notification=[[UILocalNotification alloc]init];</div><div class=\"line\">    //设置调用时间</div><div class=\"line\">    notification.fireDate=[NSDate dateWithTimeIntervalSinceNow:10.0];//通知触发的时间，10s以后</div><div class=\"line\">    notification.repeatInterval=2;//通知重复次数</div><div class=\"line\">    //notification.repeatCalendar=[NSCalendar currentCalendar];//当前日历，使用前最好设置时区等信息以便能够自动同步时间</div><div class=\"line\">    </div><div class=\"line\">    //设置通知属性</div><div class=\"line\">    notification.alertBody=@\"最近添加了诸多有趣的特性，是否立即体验？\"; //通知主体</div><div class=\"line\">    notification.applicationIconBadgeNumber=1;//应用程序图标右上角显示的消息数</div><div class=\"line\">    notification.alertAction=@\"打开应用\"; //待机界面的滑动动作提示</div><div class=\"line\">    notification.alertLaunchImage=@\"Default\";//通过点击通知打开应用时的启动图片,这里使用程序启动图片</div><div class=\"line\">    //notification.soundName=UILocalNotificationDefaultSoundName;//收到通知时播放的声音，默认消息声音</div><div class=\"line\">    notification.soundName=@\"msg.caf\";//通知声音（需要真机才能听到声音）</div><div class=\"line\">    </div><div class=\"line\">    //设置用户信息</div><div class=\"line\">    notification.userInfo=@&#123;@\"id\":@1,@\"user\":@\"Kenshin Cui\"&#125;;//绑定到通知上的其他附加信息</div><div class=\"line\">    </div><div class=\"line\">    //调用通知</div><div class=\"line\">    [[UIApplication sharedApplication] scheduleLocalNotification:notification];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 移除本地通知，在不需要此通知时记得移除</div><div class=\"line\">-(void)removeNotification&#123;</div><div class=\"line\">    [[UIApplication sharedApplication] cancelAllLocalNotifications];</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div><div class=\"line\">请求获得用户允许通知的效果：</div><div class=\"line\"> LocalNotification_Request</div><div class=\"line\">应用退出到后弹出通知的效果：</div><div class=\"line\"> LocalNotification_Notification</div><div class=\"line\">锁屏状态下的通知效果(从这个界面可以看到alertAction配置为“打开应用”)：</div><div class=\"line\">LocalNotification_Lock</div><div class=\"line\">注意：</div><div class=\"line\">在使用通知之前必须注册通知类型，如果用户不允许应用程序发送通知，则以后就无法发送通知，除非用户手动到iOS设置中打开通知。</div><div class=\"line\">本地通知是有操作系统统一调度的，只有在应用退出到后台或者关闭才能收到通知。(注意：这一点对于后面的推送通知也是完全适用的。 ）</div><div class=\"line\">通知的声音是由iOS系统播放的，格式必须是Linear PCM、MA4（IMA/ADPCM）、µLaw、aLaw中的一种，并且播放时间必须在30s内，否则将被系统声音替换，同时自定义声音文件必须放到main boundle中。</div><div class=\"line\">本地通知的数量是有限制的，最近的本地通知最多只能有64个，超过这个数量将被系统忽略。</div><div class=\"line\">如果想要移除本地通知可以调用UIApplication的cancelLocalNotification:或cancelAllLocalNotifications移除指定通知或所有通知。</div><div class=\"line\">从上面的程序可以看到userInfo这个属性我们设置了参数，那么这个参数如何接收呢？</div><div class=\"line\">在iOS中如果点击一个弹出通知（或者锁屏界面滑动查看通知），默认会自动打开当前应用。由于通知由系统调度那么此时进入应用有两种情况：如果应用程序已经完全退出那么此时会调用- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions方法；如果此时应用程序还在运行（无论是在前台还是在后台）则会调用-(void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification方法接收消息参数。当然如果是后者自然不必多说，因为参数中已经可以拿到notification对象，只要读取userInfo属性即可。如果是前者的话则可以访问launchOptions中键为UIApplicationLaunchOptionsLocalNotificationKey的对象，这个对象就是发送的通知，由此对象再去访问userInfo。为了演示这个过程在下面的程序中将userInfo的内容写入文件以便模拟关闭程序后再通过点击通知打开应用获取userInfo的过程。</div><div class=\"line\">AppDelegate.m</div><div class=\"line\">//</div><div class=\"line\">//  AppDelegate.m</div><div class=\"line\">//  LocalNotification</div><div class=\"line\">//</div><div class=\"line\">//  Created by Kenshin Cui on 14/03/28.</div><div class=\"line\">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import \"AppDelegate.h\"</div><div class=\"line\">#import \"KCMainViewController.h\"</div><div class=\"line\"></div><div class=\"line\">@interface AppDelegate ()</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation AppDelegate</div><div class=\"line\"></div><div class=\"line\">#pragma mark - 应用代理方法</div><div class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class=\"line\">    </div><div class=\"line\">    _window=[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];</div><div class=\"line\">    </div><div class=\"line\">    _window.backgroundColor =[UIColor colorWithRed:249/255.0 green:249/255.0 blue:249/255.0 alpha:1];</div><div class=\"line\">    </div><div class=\"line\">    //设置全局导航条风格和颜色</div><div class=\"line\">    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1]];</div><div class=\"line\">    [[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];</div><div class=\"line\">    </div><div class=\"line\">    KCMainViewController *mainController=[[KCMainViewController alloc]init];</div><div class=\"line\">    _window.rootViewController=mainController;</div><div class=\"line\">    </div><div class=\"line\">    [_window makeKeyAndVisible];</div><div class=\"line\"></div><div class=\"line\">    //添加通知</div><div class=\"line\">    [self addLocalNotification];</div><div class=\"line\"></div><div class=\"line\">    //接收通知参数</div><div class=\"line\">    UILocalNotification *notification=[launchOptions valueForKey:UIApplicationLaunchOptionsLocalNotificationKey];</div><div class=\"line\">    NSDictionary *userInfo= notification.userInfo;</div><div class=\"line\">    </div><div class=\"line\">    [userInfo writeToFile:@\"/Users/kenshincui/Desktop/didFinishLaunchingWithOptions.txt\" atomically:YES];</div><div class=\"line\">    NSLog(@\"didFinishLaunchingWithOptions:The userInfo is %@.\",userInfo);</div><div class=\"line\">    </div><div class=\"line\">    return YES;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 接收本地通知时触发</div><div class=\"line\">-(void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification&#123;</div><div class=\"line\">    NSDictionary *userInfo=notification.userInfo;</div><div class=\"line\">    [userInfo writeToFile:@\"/Users/kenshincui/Desktop/didReceiveLocalNotification.txt\" atomically:YES];</div><div class=\"line\">    NSLog(@\"didReceiveLocalNotification:The userInfo is %@\",userInfo);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 调用过用户注册通知方法之后执行（也就是调用完registerUserNotificationSettings:方法之后执行）</div><div class=\"line\">-(void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings&#123;</div><div class=\"line\">    if (notificationSettings.types!=UIUserNotificationTypeNone) &#123;</div><div class=\"line\">        [self addLocalNotification];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 进入前台后设置消息信息</div><div class=\"line\">-(void)applicationWillEnterForeground:(UIApplication *)application&#123;</div><div class=\"line\">    [[UIApplication sharedApplication]setApplicationIconBadgeNumber:0];//进入前台取消应用消息图标</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark - 私有方法</div><div class=\"line\">#pragma mark 添加本地通知</div><div class=\"line\">-(void)addLocalNotification&#123;</div><div class=\"line\">    </div><div class=\"line\">    //定义本地通知对象</div><div class=\"line\">    UILocalNotification *notification=[[UILocalNotification alloc]init];</div><div class=\"line\">    //设置调用时间</div><div class=\"line\">    notification.fireDate=[NSDate dateWithTimeIntervalSinceNow:10.0];//通知触发的时间，10s以后</div><div class=\"line\">    notification.repeatInterval=2;//通知重复次数</div><div class=\"line\">    //notification.repeatCalendar=[NSCalendar currentCalendar];//当前日历，使用前最好设置时区等信息以便能够自动同步时间</div><div class=\"line\">    </div><div class=\"line\">    //设置通知属性</div><div class=\"line\">    notification.alertBody=@\"最近添加了诸多有趣的特性，是否立即体验？\"; //通知主体</div><div class=\"line\">    notification.applicationIconBadgeNumber=1;//应用程序图标右上角显示的消息数</div><div class=\"line\">    notification.alertAction=@\"打开应用\"; //待机界面的滑动动作提示</div><div class=\"line\">    notification.alertLaunchImage=@\"Default\";//通过点击通知打开应用时的启动图片</div><div class=\"line\">    //notification.soundName=UILocalNotificationDefaultSoundName;//收到通知时播放的声音，默认消息声音</div><div class=\"line\">    notification.soundName=@\"msg.caf\";//通知声音（需要真机）</div><div class=\"line\">    </div><div class=\"line\">    //设置用户信息</div><div class=\"line\">    notification.userInfo=@&#123;@\"id\":@1,@\"user\":@\"Kenshin Cui\"&#125;;//绑定到通知上的其他额外信息</div><div class=\"line\">    </div><div class=\"line\">    //调用通知</div><div class=\"line\">    [[UIApplication sharedApplication] scheduleLocalNotification:notification];</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div><div class=\"line\">上面的程序可以分为两种情况去运行：一种是启动程序关闭程序，等到接收到通知之后点击通知重新进入程序；另一种是启动程序后，进入后台（其实在前台也可以，但是为了明显的体验这个过程建议进入后台），接收到通知后点击通知进入应用。另种情况会分别按照前面说的情况调用不同的方法接收到userInfo写入本地文件系统。有了userInfo一般来说就可以根据这个信息进行一些处理，例如可以根据不同的参数信息导航到不同的界面，假设是更新的通知则可以导航到更新内容界面等。</div><div class=\"line\">推送通知</div><div class=\"line\">和本地通知不同，推送通知是由应用服务提供商发起的，通过苹果的APNs（Apple Push Notification Server）发送到应用客户端。下面是苹果官方关于推送通知的过程示意图：</div><div class=\"line\">PushNotification_FlowChart</div><div class=\"line\">推送通知的过程可以分为以下几步：</div><div class=\"line\">应用服务提供商从服务器端把要发送的消息和设备令牌（device token）发送给苹果的消息推送服务器APNs。</div><div class=\"line\">APNs根据设备令牌在已注册的设备（iPhone、iPad、iTouch、mac等）查找对应的设备，将消息发送给相应的设备。</div><div class=\"line\">客户端设备接将接收到的消息传递给相应的应用程序，应用程序根据用户设置弹出通知消息。</div><div class=\"line\">当然，这只是一个简单的流程，有了这个流程我们还无从下手编写程序，将上面的流程细化可以得到如下流程图（图片来自互联网），在这个过程中会也会提到如何在程序中完成这些步骤：</div><div class=\"line\">PushNotification_FlowChartDetail</div><div class=\"line\">1.应用程序注册APNs推送消息。</div><div class=\"line\">说明：</div><div class=\"line\">a.只有注册过的应用才有可能接收到消息，程序中通常通过UIApplication的registerUserNotificationSettings:方法注册，iOS8中通知注册的方法发生了改变，如果是iOS7及之前版本的iOS请参考其他代码。</div><div class=\"line\">b.注册之前有两个前提条件必须准备好：开发配置文件（provisioning profile，也就是.mobileprovision后缀的文件）的App ID不能使用通配ID必须使用指定APP ID并且生成配置文件中选择Push Notifications服务，一般的开发配置文件无法完成注册；应用程序的Bundle Identifier必须和生成配置文件使用的APP ID完全一致。</div><div class=\"line\">2.iOS从APNs接收device token，在应用程序获取device token。</div><div class=\"line\">说明：</div><div class=\"line\">a.在UIApplication的-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken代理方法中获取令牌，此方法发生在注册之后。</div><div class=\"line\">b.如果无法正确获得device token可以在UIApplication的-(void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error代理方法中查看详细错误信息，此方法发生在获取device token失败之后。</div><div class=\"line\">c.必须真机调试，模拟器无法获取device token。</div><div class=\"line\">3.iOS应用将device token发送给应用程序提供商，告诉服务器端当前设备允许接收消息。</div><div class=\"line\">说明：</div><div class=\"line\">a.device token的生成算法只有Apple掌握，为了确保算法发生变化后仍然能够正常接收服务器端发送的通知，每次应用程序启动都重新获得device token（注意：device token的获取不会造成性能问题，苹果官方已经做过优化）。</div><div class=\"line\">b.通常可以创建一个网络连接发送给应用程序提供商的服务器端， 在这个过程中最好将上一次获得的device token存储起来，避免重复发送，一旦发现device token发生了变化最好将原有的device token一块发送给服务器端，服务器端删除原有令牌存储新令牌避免服务器端发送无效消息。</div><div class=\"line\">4.应用程序提供商在服务器端根据前面发送过来的device token组织信息发送给APNs。</div><div class=\"line\">说明：</div><div class=\"line\">a.发送时指定device token和消息内容，并且完全按照苹果官方的消息格式组织消息内容，通常情况下可以借助其他第三方消息推送框架来完成。</div><div class=\"line\">5.APNs根据消息中的device token查找已注册的设备推送消息。</div><div class=\"line\">说明：</div><div class=\"line\">a.正常情况下可以根据device token将消息成功推送到客户端设备中，但是也不排除用户卸载程序的情况，此时推送消息失败，APNs会将这个错误消息通知服务器端以避免资源浪费（服务器端此时可以根据错误删除已经存储的device token，下次不再发送）。</div><div class=\"line\">下面将简单演示一下推送通知的简单流程:</div><div class=\"line\">首先，看一下iOS客户端代码：</div><div class=\"line\">//</div><div class=\"line\">//  AppDelegate.m</div><div class=\"line\">//  pushnotification</div><div class=\"line\">//</div><div class=\"line\">//  Created by Kenshin Cui on 14/03/27.</div><div class=\"line\">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import \"AppDelegate.h\"</div><div class=\"line\">#import \"KCMainViewController.h\"</div><div class=\"line\"></div><div class=\"line\">@interface AppDelegate ()</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation AppDelegate</div><div class=\"line\"></div><div class=\"line\">#pragma mark - 应用程序代理方法</div><div class=\"line\">#pragma mark 应用程序启动之后</div><div class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class=\"line\">    </div><div class=\"line\">    _window=[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];</div><div class=\"line\">    </div><div class=\"line\">    _window.backgroundColor =[UIColor colorWithRed:249/255.0 green:249/255.0 blue:249/255.0 alpha:1];</div><div class=\"line\">    </div><div class=\"line\">    //设置全局导航条风格和颜色</div><div class=\"line\">    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1]];</div><div class=\"line\">    [[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];</div><div class=\"line\">    </div><div class=\"line\">    KCMainViewController *mainController=[[KCMainViewController alloc]init];</div><div class=\"line\">    _window.rootViewController=mainController;</div><div class=\"line\">    </div><div class=\"line\">    [_window makeKeyAndVisible];</div><div class=\"line\">    </div><div class=\"line\">    //注册推送通知（注意iOS8注册方法发生了变化）</div><div class=\"line\">    [application registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert|UIUserNotificationTypeBadge|UIUserNotificationTypeSound categories:nil]];</div><div class=\"line\">    [application registerForRemoteNotifications];</div><div class=\"line\">    </div><div class=\"line\">    return YES;</div><div class=\"line\">&#125;</div><div class=\"line\">#pragma mark 注册推送通知之后</div><div class=\"line\">//在此接收设备令牌</div><div class=\"line\">-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken&#123;</div><div class=\"line\">    [self addDeviceToken:deviceToken];</div><div class=\"line\">    NSLog(@\"device token:%@\",deviceToken);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 获取device token失败后</div><div class=\"line\">-(void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error&#123;</div><div class=\"line\">    NSLog(@\"didFailToRegisterForRemoteNotificationsWithError:%@\",error.localizedDescription);</div><div class=\"line\">    [self addDeviceToken:nil];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 接收到推送通知之后</div><div class=\"line\">-(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo&#123;</div><div class=\"line\">    NSLog(@\"receiveRemoteNotification,userInfo is %@\",userInfo);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark - 私有方法</div><div class=\"line\">/**</div><div class=\"line\"> *  添加设备令牌到服务器端</div><div class=\"line\"> *</div><div class=\"line\"> *  @param deviceToken 设备令牌</div><div class=\"line\"> */</div><div class=\"line\">-(void)addDeviceToken:(NSData *)deviceToken&#123;</div><div class=\"line\">    NSString *key=@\"DeviceToken\";</div><div class=\"line\">    NSData *oldToken= [[NSUserDefaults standardUserDefaults]objectForKey:key];</div><div class=\"line\">    //如果偏好设置中的已存储设备令牌和新获取的令牌不同则存储新令牌并且发送给服务器端</div><div class=\"line\">    if (![oldToken isEqualToData:deviceToken]) &#123;</div><div class=\"line\">        [[NSUserDefaults standardUserDefaults] setObject:deviceToken forKey:key];</div><div class=\"line\">        [self sendDeviceTokenWidthOldDeviceToken:oldToken newDeviceToken:deviceToken];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(void)sendDeviceTokenWidthOldDeviceToken:(NSData *)oldToken newDeviceToken:(NSData *)newToken&#123;</div><div class=\"line\">    //注意一定确保真机可以正常访问下面的地址</div><div class=\"line\">    NSString *urlStr=@\"http://192.168.1.101/RegisterDeviceToken.aspx\";</div><div class=\"line\">    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</div><div class=\"line\">    NSURL *url=[NSURL URLWithString:urlStr];</div><div class=\"line\">    NSMutableURLRequest *requestM=[NSMutableURLRequest requestWithURL:url cachePolicy:0 timeoutInterval:10.0];</div><div class=\"line\">    [requestM setHTTPMethod:@\"POST\"];</div><div class=\"line\">    NSString *bodyStr=[NSString stringWithFormat:@\"oldToken=%@&amp;newToken=%@\",oldToken,newToken];</div><div class=\"line\">    NSData *body=[bodyStr dataUsingEncoding:NSUTF8StringEncoding];</div><div class=\"line\">    [requestM setHTTPBody:body];</div><div class=\"line\">    NSURLSession *session=[NSURLSession sharedSession];</div><div class=\"line\">    NSURLSessionDataTask *dataTask= [session dataTaskWithRequest:requestM completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) &#123;</div><div class=\"line\">        if (error) &#123;</div><div class=\"line\">            NSLog(@\"Send failure,error is :%@\",error.localizedDescription);</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            NSLog(@\"Send Success!\");</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;];</div><div class=\"line\">    [dataTask resume];</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div><div class=\"line\">iOS客户端代码的代码比较简单，注册推送通知，获取device token存储到偏好设置中，并且如果新获取的device token不同于偏好设置中存储的数据则发送给服务器端，更新服务器端device token列表。</div><div class=\"line\">其次，由于device token需要发送给服务器端，这里使用一个Web应用作为服务器端接收device token，这里使用了ASP.NET程序来处理令牌接收注册工作，当然你使用其他技术同样没有问题。下面是对应的后台代码：</div><div class=\"line\">using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Web;</div><div class=\"line\">using System.Web.UI;</div><div class=\"line\">using System.Web.UI.WebControls;</div><div class=\"line\">using CMJ.Framework.Data;</div><div class=\"line\"></div><div class=\"line\">namespace WebServer</div><div class=\"line\">&#123;</div><div class=\"line\">    public partial class RegisterDeviceToken : System.Web.UI.Page</div><div class=\"line\">    &#123;</div><div class=\"line\">        private string _appID = @\"com.cmjstudio.pushnotification\";</div><div class=\"line\">        private SqlHelper _helper = new SqlHelper();</div><div class=\"line\">        protected void Page_Load(object sender, EventArgs e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            try</div><div class=\"line\">            &#123;</div><div class=\"line\">                string oldToken = Request[\"oldToken\"] + \"\";</div><div class=\"line\">                string newToken = Request[\"newToken\"] + \"\";</div><div class=\"line\">                string sql = \"\";</div><div class=\"line\">                //如果传递旧的设备令牌则删除旧令牌添加新令牌</div><div class=\"line\">                if (oldToken != \"\")</div><div class=\"line\">                &#123;</div><div class=\"line\">                    sql = string.Format(\"DELETE FROM dbo.Device WHERE AppID='&#123;0&#125;' AND DeviceToken='&#123;1&#125;';\", _appID, oldToken);</div><div class=\"line\">                &#125;</div><div class=\"line\">                sql += string.Format(@\"IF NOT EXISTS (SELECT ID FROM dbo.Device WHERE AppID='&#123;0&#125;' AND DeviceToken='&#123;1&#125;')</div><div class=\"line\">                                        INSERT INTO dbo.Device ( AppID, DeviceToken ) VALUES ( N'&#123;0&#125;', N'&#123;1&#125;');\", _appID, newToken);</div><div class=\"line\">                _helper.ExecuteNonQuery(sql);</div><div class=\"line\">                Response.Write(\"注册成功！\");</div><div class=\"line\">            &#125;</div><div class=\"line\">            catch(Exception ex)</div><div class=\"line\">            &#123;</div><div class=\"line\">                Response.Write(\"注册失败，错误详情：\"+ex.ToString());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">这个过程主要就是保存device token到数据库中，当然如果同时传递旧的设备令牌还需要先删除就的设备令牌，这里简单的在数据库中创建了一张Device表来保存设备令牌，其中记录了应用程序Id和设备令牌。</div><div class=\"line\">第三步就是服务器端发送消息，如果要给APNs发送消息就必须按照Apple的标准消息格式组织消息内容。但是好在目前已经有很多开源的第三方类库供我们使用，具体消息如何包装完全不用自己组织，这里使用一个开源的类库Push Sharp来给APNs发送消息 ,除了可以给Apple设备推送消息，Push Sharp还支持Android、Windows Phone等多种设备，更多详细内容大家可以参照官方说明。前面说过如果要开发消息推送应用不能使用一般的开发配置文件，这里还需要注意：如果服务器端要给APNs发送消息其秘钥也必须是通过APNs Development iOS类型的证书来导出的，一般的iOS Development 类型的证书导出的秘钥无法用作服务器端发送秘钥。下面通过在一个简单的WinForm程序中调用Push Sharp给APNs发送消息，这里读取之前Device表中的所有设备令牌循环发送消息：</div><div class=\"line\">using System;</div><div class=\"line\">using System.IO;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.ComponentModel;</div><div class=\"line\">using System.Data;</div><div class=\"line\">using System.Drawing;</div><div class=\"line\">using System.Text;</div><div class=\"line\">using System.Windows.Forms;</div><div class=\"line\">using PushSharp;</div><div class=\"line\">using PushSharp.Apple;</div><div class=\"line\">using CMJ.Framework.Data;</div><div class=\"line\">using CMJ.Framework.Logging;</div><div class=\"line\">using CMJ.Framework.Windows.Forms;</div><div class=\"line\"></div><div class=\"line\">namespace PushNotificationServer</div><div class=\"line\">&#123;</div><div class=\"line\">    public partial class frmMain : PersonalizeForm</div><div class=\"line\">    &#123;</div><div class=\"line\">        private string _appID = @\"com.cmjstudio.pushnotification\";</div><div class=\"line\">        private SqlHelper _helper = new SqlHelper();</div><div class=\"line\">        public frmMain()</div><div class=\"line\">        &#123;</div><div class=\"line\">            InitializeComponent();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        private void btnClose_Click(object sender, EventArgs e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            this.Close();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        private void btnSend_Click(object sender, EventArgs e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            List&lt;string&gt; deviceTokens = GetDeviceToken();</div><div class=\"line\">            SendMessage(deviceTokens, tbMessage.Text);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        #region 发送消息</div><div class=\"line\">        /// &lt;summary&gt;</div><div class=\"line\">        /// 取得所有设备令牌</div><div class=\"line\">        /// &lt;/summary&gt;</div><div class=\"line\">        /// &lt;returns&gt;设备令牌&lt;/returns&gt;</div><div class=\"line\">        private List&lt;string&gt; GetDeviceToken()</div><div class=\"line\">        &#123;</div><div class=\"line\">            List&lt;string&gt; deviceTokens = new List&lt;string&gt;();</div><div class=\"line\">            string sql = string.Format(\"SELECT DeviceToken FROM dbo.Device WHERE AppID='&#123;0&#125;'\",_appID);</div><div class=\"line\">            DataTable dt = _helper.GetDataTable(sql);</div><div class=\"line\">            if(dt.Rows.Count&gt;0)</div><div class=\"line\">            &#123;</div><div class=\"line\">                foreach(DataRow dr in dt.Rows)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    deviceTokens.Add((dr[\"DeviceToken\"]+\"\").TrimStart('&lt;').TrimEnd('&gt;').Replace(\" \",\"\"));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return deviceTokens;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        /// &lt;summary&gt;</div><div class=\"line\">        /// 发送消息</div><div class=\"line\">        /// &lt;/summary&gt;</div><div class=\"line\">        /// &lt;param name=\"deviceToken\"&gt;设备令牌&lt;/param&gt;</div><div class=\"line\">        /// &lt;param name=\"message\"&gt;消息内容&lt;/param&gt;</div><div class=\"line\">        private void SendMessage(List&lt;string&gt; deviceToken, string message)</div><div class=\"line\">        &#123;</div><div class=\"line\">            //创建推送对象</div><div class=\"line\">            var pusher = new PushBroker();</div><div class=\"line\">            pusher.OnNotificationSent += pusher_OnNotificationSent;//发送成功事件</div><div class=\"line\">            pusher.OnNotificationFailed += pusher_OnNotificationFailed;//发送失败事件</div><div class=\"line\">            pusher.OnChannelCreated += pusher_OnChannelCreated;</div><div class=\"line\">            pusher.OnChannelDestroyed += pusher_OnChannelDestroyed;</div><div class=\"line\">            pusher.OnChannelException += pusher_OnChannelException;</div><div class=\"line\">            pusher.OnDeviceSubscriptionChanged += pusher_OnDeviceSubscriptionChanged;</div><div class=\"line\">            pusher.OnDeviceSubscriptionExpired += pusher_OnDeviceSubscriptionExpired;</div><div class=\"line\">            pusher.OnNotificationRequeue += pusher_OnNotificationRequeue;</div><div class=\"line\">            pusher.OnServiceException += pusher_OnServiceException;</div><div class=\"line\">            //注册推送服务</div><div class=\"line\">            byte[] certificateData = File.ReadAllBytes(@\"E:\\KenshinCui_Push.p12\");</div><div class=\"line\">            pusher.RegisterAppleService(new ApplePushChannelSettings(certificateData, \"123\"));</div><div class=\"line\">            foreach (string token in deviceToken)</div><div class=\"line\">            &#123;</div><div class=\"line\">                //给指定设备发送消息</div><div class=\"line\">                pusher.QueueNotification(new AppleNotification()</div><div class=\"line\">                    .ForDeviceToken(token)</div><div class=\"line\">                    .WithAlert(message) </div><div class=\"line\">                    .WithBadge(1)</div><div class=\"line\">                    .WithSound(\"default\"));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnServiceException(object sender, Exception error)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());</div><div class=\"line\">            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\" + error.ToString(), \"系统提示\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnNotificationRequeue(object sender, PushSharp.Core.NotificationRequeueEventArgs e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"pusher_OnNotificationRequeue\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnDeviceSubscriptionExpired(object sender, string expiredSubscriptionId, DateTime expirationDateUtc, PushSharp.Core.INotification notification)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"pusher_OnDeviceSubscriptionChanged\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnDeviceSubscriptionChanged(object sender, string oldSubscriptionId, string newSubscriptionId, PushSharp.Core.INotification notification)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"pusher_OnDeviceSubscriptionChanged\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnChannelException(object sender, PushSharp.Core.IPushChannel pushChannel, Exception error)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());</div><div class=\"line\">            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\" + error.ToString(), \"系统提示\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnChannelDestroyed(object sender)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"pusher_OnChannelDestroyed\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnChannelCreated(object sender, PushSharp.Core.IPushChannel pushChannel)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"pusher_OnChannelCreated\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnNotificationFailed(object sender, PushSharp.Core.INotification notification, Exception error)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());</div><div class=\"line\">            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\"+error.ToString(), \"系统提示\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnNotificationSent(object sender, PushSharp.Core.INotification notification)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"消息发送成功！\");</div><div class=\"line\">            PersonalizeMessageBox.Show(this, \"消息发送成功！\", \"系统提示\");</div><div class=\"line\">        &#125;</div><div class=\"line\">        #endregion</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">服务器端消息发送应用运行效果：</div><div class=\"line\">PushNotification_ServerClient</div><div class=\"line\">iOS客户端接收的消息的效果：</div><div class=\"line\">PushNotification_iOSApp</div><div class=\"line\">到目前为止通过服务器端应用可以顺利发送消息给APNs并且iOS应用已经成功接收推送消息。</div><div class=\"line\">补充--iOS开发证书、秘钥</div><div class=\"line\">iOS开发过程中如果需要进行真机调试、发布需要注册申请很多证书，对于初学者往往迷惑不解，再加上今天的文章中会牵扯到一些特殊配置，这里就简单的对iOS开发的常用证书和秘钥等做一说明。</div><div class=\"line\">证书</div><div class=\"line\">iOS常用的证书包括开发证书和发布证书，无论是真机调试还是最终发布应用到App Store这两个证书都是必须的，它是iOS开发的基本证书。</div><div class=\"line\">a.开发证书：开发证书又分为普通开发证书和推送证书，如果仅仅是一般的应用则前者即可满足，但是如果开发推送应用则必须使用推送证书。</div><div class=\"line\">b.发布证书：发布证书又可以分为普通发布证书、推送证书、Pass Type ID证书、站点发布证书、VoIP服务证书、苹果支付证书。同样的，对于需要使用特殊服务的应用则必须选择对应的证书。</div><div class=\"line\">应用标识</div><div class=\"line\">App ID,应用程序的唯一标识，对应iOS应用的Bundle Identifier，App ID在苹果开发者中心中分为通配应用ID和明确的应用ID,前者一般用于普通应用开发，一个ID可以适用于多个不同标识的应用；但是对于使用消息推送、Passbook、站点发布、iCloud等服务的应用必须配置明确的应用ID。</div><div class=\"line\">设备标识</div><div class=\"line\">UDID,用于标识每一台硬件设备的标示符。注意它不是device token，device token是根据UDID使用一个只有Apple自己才知道的算法生成的一组标示符。</div><div class=\"line\">配置简介</div><div class=\"line\">Provisioning Profiles,平时又称为PP文件。将UDID、App ID、开发证书打包在一起的配置文件，同样分为开发和发布两类配置文件。</div><div class=\"line\">秘钥</div><div class=\"line\">在申请开发证书时必须要首先提交一个秘钥请求文件，对于生成秘钥请求文件的mac，如果要做开发则只需要下载证书和配置简介即可开发。但是如果要想在其他机器上做开发则必须将证书中的秘钥导出（导出之后是一个.p12文件），然后导入其他机器。同时对于类似于推送服务器端应用如果要给APNs发送消息，同样需要使用.p12秘钥文件，并且这个秘钥文件需要是推送证书导出的对应秘钥。</div><div class=\"line\">补充--通知中心</div><div class=\"line\">对于很多初学者往往会把iOS中的本地通知、推送通知和iOS通知中心的概念弄混。其实二者之间并没有任何关系，事实上它们都不属于一个框架，前者属于UIKit框架，后者属于Foundation框架。</div><div class=\"line\">通知中心实际上是iOS程序内部之间的一种消息广播机制，主要为了解决应用程序内部不同对象之间解耦而设计。它是基于观察者模式设计的，不能跨应用程序进程通信，当通知中心接收到消息之后会根据内部的消息转发表，将消息发送给订阅者。下面是一个简单的流程示意图：</div><div class=\"line\">image</div><div class=\"line\">了解通知中心需要熟悉NSNotificationCenter和NSNotification两个类：</div><div class=\"line\">NSNotificationCenter：是通知系统的中心，用于注册和发送通知，下表列出常用的方法。</div><div class=\"line\">方法\t说明</div><div class=\"line\">- (void)addObserver:(id)observer selector:(SEL)aSelector name:(NSString *)aName object:(id)anObject\t添加监听，参数：</div><div class=\"line\">observer:监听者</div><div class=\"line\">selector:监听方法（监听者监听到通知后执行的方法）</div><div class=\"line\">  name:监听的通知名称</div><div class=\"line\">object:通知的发送者（如果指定nil则监听任何对象发送的通知）</div><div class=\"line\">- (id &lt;NSObject&gt;)addObserverForName:(NSString *)name object:(id)obj queue:(NSOperationQueue *)queue usingBlock:(void (^)(NSNotification *note))block\t添加监听，参数：</div><div class=\"line\">name:监听的通知名称</div><div class=\"line\">object:通知的发送者（如果指定nil则监听任何对象发送的通知）</div><div class=\"line\">queue:操作队列，如果制定非主队线程队列则可以异步执行block</div><div class=\"line\">block:监听到通知后执行的操作</div><div class=\"line\">- (void)postNotification:(NSNotification *)notification\t发送通知，参数：</div><div class=\"line\">notification：通知对象</div><div class=\"line\">- (void)postNotificationName:(NSString *)aName object:(id)anObject\t发送通知，参数：</div><div class=\"line\">aName：通知名称</div><div class=\"line\">anObject：通知发送者</div><div class=\"line\">- (void)postNotificationName:(NSString *)aName object:(id)anObject userInfo:(NSDictionary *)aUserInfo\t发送通知，参数：</div><div class=\"line\">aName：通知名称</div><div class=\"line\">anObject：通知发送者</div><div class=\"line\">aUserInfo：通知参数</div><div class=\"line\">- (void)removeObserver:(id)observer\t移除监听，参数：</div><div class=\"line\">observer：监听对象</div><div class=\"line\">- (void)removeObserver:(id)observer name:(NSString *)aName object:(id)anObject\t移除监听，参数：</div><div class=\"line\">observer：监听对象</div><div class=\"line\">aName：通知名称</div><div class=\"line\">anObject：通知发送者</div><div class=\"line\">NSNotification：代表通知内容的载体，主要有三个属性：name代表通知名称，object代表通知的发送者，userInfo代表通知的附加信息。</div><div class=\"line\">虽然前面的文章中从未提到过通知中心，但是其实通知中心我们并不陌生，前面文章中很多内容都是通过通知中心来进行应用中各个组件通信的，只是没有单独拿出来说而已。例如前面的文章中讨论的应用程序生命周期问题，当应用程序启动后、进入后台、进入前台、获得焦点、失去焦点，窗口大小改变、隐藏等都会发送通知。这个通知可以通过前面NSNotificationCenter进行订阅即可接收对应的消息，下面的示例演示了如何添加监听获得UIApplication的进入后台和获得焦点的通知：</div><div class=\"line\">//</div><div class=\"line\">//  KCMainViewController.m</div><div class=\"line\">//  NotificationCenter</div><div class=\"line\">//</div><div class=\"line\">//  Created by Kenshin Cui on 14/03/27.</div><div class=\"line\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import \"KCMainViewController.h\"</div><div class=\"line\"></div><div class=\"line\">@interface KCMainViewController ()</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation KCMainViewController</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    [self addObserverToNotificationCenter];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 添加监听</div><div class=\"line\">-(void)addObserverToNotificationCenter&#123;</div><div class=\"line\">    /*添加应用程序进入后台监听</div><div class=\"line\">     * observer:监听者</div><div class=\"line\">     * selector:监听方法（监听者监听到通知后执行的方法）</div><div class=\"line\">     * name:监听的通知名称(下面的UIApplicationDidEnterBackgroundNotification是一个常量)</div><div class=\"line\">     * object:通知的发送者（如果指定nil则监听任何对象发送的通知）</div><div class=\"line\">     */</div><div class=\"line\">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(applicationEnterBackground) name:UIApplicationDidEnterBackgroundNotification object:[UIApplication sharedApplication]];</div><div class=\"line\">    </div><div class=\"line\">    /* 添加应用程序获得焦点的通知监听</div><div class=\"line\">     * name:监听的通知名称</div><div class=\"line\">     * object:通知的发送者（如果指定nil则监听任何对象发送的通知）</div><div class=\"line\">     * queue:操作队列，如果制定非主队线程队列则可以异步执行block</div><div class=\"line\">     * block:监听到通知后执行的操作</div><div class=\"line\">     */</div><div class=\"line\">    NSOperationQueue *operationQueue=[[NSOperationQueue alloc]init];</div><div class=\"line\">    [[NSNotificationCenter defaultCenter] addObserverForName:UIApplicationDidBecomeActiveNotification object:[UIApplication sharedApplication] queue:operationQueue usingBlock:^(NSNotification *note) &#123;</div><div class=\"line\">        NSLog(@\"Application become active.\");</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 应用程序启动监听方法</div><div class=\"line\">-(void)applicationEnterBackground&#123;</div><div class=\"line\">    NSLog(@\"Application enter background.\");</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div><div class=\"line\">当然很多时候使用通知中心是为了添加自定义通知，并获得自定义通知消息。在前面的文章“iOS开发系列--视图切换”中提到过如何进行多视图之间参数传递，其实利用自定义通知也可以进行参数传递。通常一个应用登录后会显示用户信息，而登录信息可以通过登录界面获取。下面就以这样一种场景为例，在主界面中添加监听，在登录界面发送通知，一旦登录成功将向通知中心发送成功登录的通知，此时主界面中由于已经添加通知监听所以会收到通知并更新UI界面。</div><div class=\"line\">主界面KCMainViewController.m：</div><div class=\"line\">//</div><div class=\"line\">//  KCMainViewController.m</div><div class=\"line\">//  NotificationCenter</div><div class=\"line\">//</div><div class=\"line\">//  Created by Kenshin Cui on 14/03/27</div><div class=\"line\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import \"KCMainViewController.h\"</div><div class=\"line\">#import \"KCLoginViewController.h\"</div><div class=\"line\">#define UPDATE_LGOGIN_INFO_NOTIFICATION @\"updateLoginInfo\"</div><div class=\"line\"></div><div class=\"line\">@interface KCMainViewController ()&#123;</div><div class=\"line\">    UILabel *_lbLoginInfo;</div><div class=\"line\">    UIButton *_btnLogin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation KCMainViewController</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    [self setupUI];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(void)setupUI&#123;</div><div class=\"line\">    UILabel *label =[[UILabel alloc]initWithFrame:CGRectMake(0, 100,320 ,30)];</div><div class=\"line\">    label.textAlignment=NSTextAlignmentCenter;</div><div class=\"line\">    label.textColor=[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1];</div><div class=\"line\">    _lbLoginInfo=label;</div><div class=\"line\">    [self.view addSubview:label];</div><div class=\"line\">    </div><div class=\"line\">    UIButton *button=[UIButton buttonWithType:UIButtonTypeSystem];</div><div class=\"line\">    button.frame=CGRectMake(60, 200, 200, 25);</div><div class=\"line\">    [button setTitle:@\"登录\" forState:UIControlStateNormal];</div><div class=\"line\">    [button addTarget:self action:@selector(loginOut) forControlEvents:UIControlEventTouchUpInside];</div><div class=\"line\">    _btnLogin=button;</div><div class=\"line\">    </div><div class=\"line\">    [self.view addSubview:button];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(void)loginOut&#123;</div><div class=\"line\">    //添加监听</div><div class=\"line\">    [self addObserverToNotification];</div><div class=\"line\">    </div><div class=\"line\">    KCLoginViewController *loginController=[[KCLoginViewController alloc]init];</div><div class=\"line\">    </div><div class=\"line\">    [self presentViewController:loginController animated:YES completion:nil];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  添加监听</div><div class=\"line\"> */</div><div class=\"line\">-(void)addObserverToNotification&#123;</div><div class=\"line\">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(updateLoginInfo:) name:UPDATE_LGOGIN_INFO_NOTIFICATION object:nil];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  更新登录信息,注意在这里可以获得通知对象并且读取附加信息</div><div class=\"line\"> */</div><div class=\"line\">-(void)updateLoginInfo:(NSNotification *)notification&#123;</div><div class=\"line\">    NSDictionary *userInfo=notification.userInfo;</div><div class=\"line\">    _lbLoginInfo.text=userInfo[@\"loginInfo\"];</div><div class=\"line\">    _btnLogin.titleLabel.text=@\"注销\";</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(void)dealloc&#123;</div><div class=\"line\">    //移除监听</div><div class=\"line\">    [[NSNotificationCenter defaultCenter] removeObserver:self];</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div><div class=\"line\">登录界面KCLoginViewController.m：</div><div class=\"line\">//</div><div class=\"line\">//  KCLoginViewController.m</div><div class=\"line\">//  NotificationCenter</div><div class=\"line\">//</div><div class=\"line\">//  Created by Kenshin Cui on 14/03/27.</div><div class=\"line\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import \"KCLoginViewController.h\"</div><div class=\"line\">#define UPDATE_LGOGIN_INFO_NOTIFICATION @\"updateLoginInfo\"</div><div class=\"line\"></div><div class=\"line\">@interface KCLoginViewController ()&#123;</div><div class=\"line\">    UITextField *_txtUserName;</div><div class=\"line\">    UITextField *_txtPassword;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation KCLoginViewController</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    [self setupUI];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  UI布局</div><div class=\"line\"> */</div><div class=\"line\">-(void)setupUI&#123;</div><div class=\"line\">    //用户名</div><div class=\"line\">    UILabel *lbUserName=[[UILabel alloc]initWithFrame:CGRectMake(50, 150, 100, 30)];</div><div class=\"line\">    lbUserName.text=@\"用户名：\";</div><div class=\"line\">    [self.view addSubview:lbUserName];</div><div class=\"line\">    </div><div class=\"line\">    _txtUserName=[[UITextField alloc]initWithFrame:CGRectMake(120, 150, 150, 30)];</div><div class=\"line\">    _txtUserName.borderStyle=UITextBorderStyleRoundedRect;</div><div class=\"line\">    [self.view addSubview:_txtUserName];</div><div class=\"line\">    </div><div class=\"line\">    //密码</div><div class=\"line\">    UILabel *lbPassword=[[UILabel alloc]initWithFrame:CGRectMake(50, 200, 100, 30)];</div><div class=\"line\">    lbPassword.text=@\"密码：\";</div><div class=\"line\">    [self.view addSubview:lbPassword];</div><div class=\"line\">    </div><div class=\"line\">    _txtPassword=[[UITextField alloc]initWithFrame:CGRectMake(120, 200, 150, 30)];</div><div class=\"line\">    _txtPassword.secureTextEntry=YES;</div><div class=\"line\">    _txtPassword.borderStyle=UITextBorderStyleRoundedRect;</div><div class=\"line\">    [self.view addSubview:_txtPassword];</div><div class=\"line\">    </div><div class=\"line\">    //登录按钮</div><div class=\"line\">    UIButton *btnLogin=[UIButton buttonWithType:UIButtonTypeSystem];</div><div class=\"line\">    btnLogin.frame=CGRectMake(70, 270, 80, 30);</div><div class=\"line\">    [btnLogin setTitle:@\"登录\" forState:UIControlStateNormal];</div><div class=\"line\">    [self.view addSubview:btnLogin];</div><div class=\"line\">    [btnLogin addTarget:self action:@selector(login) forControlEvents:UIControlEventTouchUpInside];</div><div class=\"line\">    </div><div class=\"line\">    //取消登录按钮</div><div class=\"line\">    UIButton *btnCancel=[UIButton buttonWithType:UIButtonTypeSystem];</div><div class=\"line\">    btnCancel.frame=CGRectMake(170, 270, 80, 30);</div><div class=\"line\">    [btnCancel setTitle:@\"取消\" forState:UIControlStateNormal];</div><div class=\"line\">    [self.view addSubview:btnCancel];</div><div class=\"line\">    [btnCancel addTarget:self action:@selector(cancel) forControlEvents:UIControlEventTouchUpInside];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 登录操作</div><div class=\"line\">-(void)login&#123;</div><div class=\"line\">    if ([_txtUserName.text isEqualToString:@\"kenshincui\"] &amp;&amp; [_txtPassword.text isEqualToString:@\"123\"] ) &#123;</div><div class=\"line\">        //发送通知</div><div class=\"line\">        [self postNotification];</div><div class=\"line\">        [self dismissViewControllerAnimated:YES completion:nil];</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">        //登录失败弹出提示信息</div><div class=\"line\">        UIAlertView *alertView=[[UIAlertView alloc]initWithTitle:@\"系统信息\" message:@\"用户名或密码错误，请重新输入！\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:nil];</div><div class=\"line\">        [alertView show];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 点击取消</div><div class=\"line\">-(void)cancel&#123;</div><div class=\"line\">    [self dismissViewControllerAnimated:YES completion:nil];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  添加通知，注意这里设置了附加信息</div><div class=\"line\"> */</div><div class=\"line\">-(void)postNotification&#123;</div><div class=\"line\">    NSDictionary *userInfo=@&#123;@\"loginInfo\":[NSString stringWithFormat:@\"Hello,%@!\",_txtUserName.text]&#125;;</div><div class=\"line\">    NSLog(@\"%@\",userInfo);</div><div class=\"line\">    NSNotification *notification=[NSNotification notificationWithName:UPDATE_LGOGIN_INFO_NOTIFICATION object:self userInfo:userInfo];</div><div class=\"line\">    [[NSNotificationCenter defaultCenter] postNotification:notification];</div><div class=\"line\">//也可直接采用下面的方法</div><div class=\"line\">//    [[NSNotificationCenter defaultCenter] postNotificationName:UPDATE_LGOGIN_INFO_NOTIFICATION object:self userInfo:userInfo];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">@end</div><div class=\"line\">运行效果：</div><div class=\"line\">NotificationCenter_CustomNotification</div><div class=\"line\">注意：</div><div class=\"line\">通过上面的介绍大家应该可以发现其实通知中心是一种低耦合设计，和前面文章中提到的代理模式有异曲同工之妙。相对于后者而言，通知中心可以将一个通知发送给多个监听者，而每个对象的代理却只能有一个。当然代理也有其优点，例如使用代理代码分布结构更加清晰，它不像通知一样随处都可以添加订阅等，实际使用过程中需要根据实际情况而定。</div></pre></td></tr></table></figure>\n","excerpt":"<p>在多数移动应用中任何时候都只能有一个应用程序处于活跃状态，如果其他应用此刻发生了一些用户感兴趣的那么通过通知机制就可以告诉用户此时发生的事情。iOS中通知机制又叫消息机制，其包括两类：一类是本地通知；另一类是推送通知，也叫远程通知。两种通知在iOS中的表现一致，可以通过横幅或者弹出提醒两种形式告诉用户，并且点击通知可以会打开应用程序，但是实现原理却完全不同。今天就和大家一块去看一下如何在iOS中实现这两种机制，并且在文章后面会补充通知中心的内容避免初学者对两种概念的混淆。<br>","more":"<br>来自：http://<br>blog.csdn.net/jianxin160/article/details/47753239</p>\n<p>本地通知<br>推送通知<br>补充–iOS开发证书、秘钥<br>补充–通知中心<br>本地通知<br>本地通知是由本地应用触发的，它是基于时间行为的一种通知形式，例如闹钟定时、待办事项提醒，又或者一个应用在一段时候后不使用通常会提示用户使用此应用等都是本地通知。创建一个本地通知通常分为以下几个步骤：<br>创建UILocalNotification。<br>设置处理通知的时间fireDate。<br>配置通知的内容：通知主体、通知声音、图标数字等。<br>配置通知传递的自定义数据参数userInfo（这一步可选）。<br>调用通知，可以使用scheduleLocalNotification:按计划调度一个通知，也可以使用presentLocalNotificationNow立即调用通知。<br>下面就以一个程序更新后用户长期没有使用的提醒为例对本地通知做一个简单的了解。在这个过程中并没有牵扯太多的界面操作，所有的逻辑都在AppDelegate中：进入应用后如果没有注册通知，需要首先注册通知请求用户允许通知；一旦调用完注册方法，无论用户是否选择允许通知此刻都会调用应用程序的- (void)application:(UIApplication <em>)application didRegisterUserNotificationSettings:(UIUserNotificationSettings </em>)notificationSettings代理方法，在这个方法中根据用户的选择：如果是允许通知则会按照前面的步骤创建通知并在一定时间后执行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">```objc</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div><div class=\"line\">480</div><div class=\"line\">481</div><div class=\"line\">482</div><div class=\"line\">483</div><div class=\"line\">484</div><div class=\"line\">485</div><div class=\"line\">486</div><div class=\"line\">487</div><div class=\"line\">488</div><div class=\"line\">489</div><div class=\"line\">490</div><div class=\"line\">491</div><div class=\"line\">492</div><div class=\"line\">493</div><div class=\"line\">494</div><div class=\"line\">495</div><div class=\"line\">496</div><div class=\"line\">497</div><div class=\"line\">498</div><div class=\"line\">499</div><div class=\"line\">500</div><div class=\"line\">501</div><div class=\"line\">502</div><div class=\"line\">503</div><div class=\"line\">504</div><div class=\"line\">505</div><div class=\"line\">506</div><div class=\"line\">507</div><div class=\"line\">508</div><div class=\"line\">509</div><div class=\"line\">510</div><div class=\"line\">511</div><div class=\"line\">512</div><div class=\"line\">513</div><div class=\"line\">514</div><div class=\"line\">515</div><div class=\"line\">516</div><div class=\"line\">517</div><div class=\"line\">518</div><div class=\"line\">519</div><div class=\"line\">520</div><div class=\"line\">521</div><div class=\"line\">522</div><div class=\"line\">523</div><div class=\"line\">524</div><div class=\"line\">525</div><div class=\"line\">526</div><div class=\"line\">527</div><div class=\"line\">528</div><div class=\"line\">529</div><div class=\"line\">530</div><div class=\"line\">531</div><div class=\"line\">532</div><div class=\"line\">533</div><div class=\"line\">534</div><div class=\"line\">535</div><div class=\"line\">536</div><div class=\"line\">537</div><div class=\"line\">538</div><div class=\"line\">539</div><div class=\"line\">540</div><div class=\"line\">541</div><div class=\"line\">542</div><div class=\"line\">543</div><div class=\"line\">544</div><div class=\"line\">545</div><div class=\"line\">546</div><div class=\"line\">547</div><div class=\"line\">548</div><div class=\"line\">549</div><div class=\"line\">550</div><div class=\"line\">551</div><div class=\"line\">552</div><div class=\"line\">553</div><div class=\"line\">554</div><div class=\"line\">555</div><div class=\"line\">556</div><div class=\"line\">557</div><div class=\"line\">558</div><div class=\"line\">559</div><div class=\"line\">560</div><div class=\"line\">561</div><div class=\"line\">562</div><div class=\"line\">563</div><div class=\"line\">564</div><div class=\"line\">565</div><div class=\"line\">566</div><div class=\"line\">567</div><div class=\"line\">568</div><div class=\"line\">569</div><div class=\"line\">570</div><div class=\"line\">571</div><div class=\"line\">572</div><div class=\"line\">573</div><div class=\"line\">574</div><div class=\"line\">575</div><div class=\"line\">576</div><div class=\"line\">577</div><div class=\"line\">578</div><div class=\"line\">579</div><div class=\"line\">580</div><div class=\"line\">581</div><div class=\"line\">582</div><div class=\"line\">583</div><div class=\"line\">584</div><div class=\"line\">585</div><div class=\"line\">586</div><div class=\"line\">587</div><div class=\"line\">588</div><div class=\"line\">589</div><div class=\"line\">590</div><div class=\"line\">591</div><div class=\"line\">592</div><div class=\"line\">593</div><div class=\"line\">594</div><div class=\"line\">595</div><div class=\"line\">596</div><div class=\"line\">597</div><div class=\"line\">598</div><div class=\"line\">599</div><div class=\"line\">600</div><div class=\"line\">601</div><div class=\"line\">602</div><div class=\"line\">603</div><div class=\"line\">604</div><div class=\"line\">605</div><div class=\"line\">606</div><div class=\"line\">607</div><div class=\"line\">608</div><div class=\"line\">609</div><div class=\"line\">610</div><div class=\"line\">611</div><div class=\"line\">612</div><div class=\"line\">613</div><div class=\"line\">614</div><div class=\"line\">615</div><div class=\"line\">616</div><div class=\"line\">617</div><div class=\"line\">618</div><div class=\"line\">619</div><div class=\"line\">620</div><div class=\"line\">621</div><div class=\"line\">622</div><div class=\"line\">623</div><div class=\"line\">624</div><div class=\"line\">625</div><div class=\"line\">626</div><div class=\"line\">627</div><div class=\"line\">628</div><div class=\"line\">629</div><div class=\"line\">630</div><div class=\"line\">631</div><div class=\"line\">632</div><div class=\"line\">633</div><div class=\"line\">634</div><div class=\"line\">635</div><div class=\"line\">636</div><div class=\"line\">637</div><div class=\"line\">638</div><div class=\"line\">639</div><div class=\"line\">640</div><div class=\"line\">641</div><div class=\"line\">642</div><div class=\"line\">643</div><div class=\"line\">644</div><div class=\"line\">645</div><div class=\"line\">646</div><div class=\"line\">647</div><div class=\"line\">648</div><div class=\"line\">649</div><div class=\"line\">650</div><div class=\"line\">651</div><div class=\"line\">652</div><div class=\"line\">653</div><div class=\"line\">654</div><div class=\"line\">655</div><div class=\"line\">656</div><div class=\"line\">657</div><div class=\"line\">658</div><div class=\"line\">659</div><div class=\"line\">660</div><div class=\"line\">661</div><div class=\"line\">662</div><div class=\"line\">663</div><div class=\"line\">664</div><div class=\"line\">665</div><div class=\"line\">666</div><div class=\"line\">667</div><div class=\"line\">668</div><div class=\"line\">669</div><div class=\"line\">670</div><div class=\"line\">671</div><div class=\"line\">672</div><div class=\"line\">673</div><div class=\"line\">674</div><div class=\"line\">675</div><div class=\"line\">676</div><div class=\"line\">677</div><div class=\"line\">678</div><div class=\"line\">679</div><div class=\"line\">680</div><div class=\"line\">681</div><div class=\"line\">682</div><div class=\"line\">683</div><div class=\"line\">684</div><div class=\"line\">685</div><div class=\"line\">686</div><div class=\"line\">687</div><div class=\"line\">688</div><div class=\"line\">689</div><div class=\"line\">690</div><div class=\"line\">691</div><div class=\"line\">692</div><div class=\"line\">693</div><div class=\"line\">694</div><div class=\"line\">695</div><div class=\"line\">696</div><div class=\"line\">697</div><div class=\"line\">698</div><div class=\"line\">699</div><div class=\"line\">700</div><div class=\"line\">701</div><div class=\"line\">702</div><div class=\"line\">703</div><div class=\"line\">704</div><div class=\"line\">705</div><div class=\"line\">706</div><div class=\"line\">707</div><div class=\"line\">708</div><div class=\"line\">709</div><div class=\"line\">710</div><div class=\"line\">711</div><div class=\"line\">712</div><div class=\"line\">713</div><div class=\"line\">714</div><div class=\"line\">715</div><div class=\"line\">716</div><div class=\"line\">717</div><div class=\"line\">718</div><div class=\"line\">719</div><div class=\"line\">720</div><div class=\"line\">721</div><div class=\"line\">722</div><div class=\"line\">723</div><div class=\"line\">724</div><div class=\"line\">725</div><div class=\"line\">726</div><div class=\"line\">727</div><div class=\"line\">728</div><div class=\"line\">729</div><div class=\"line\">730</div><div class=\"line\">731</div><div class=\"line\">732</div><div class=\"line\">733</div><div class=\"line\">734</div><div class=\"line\">735</div><div class=\"line\">736</div><div class=\"line\">737</div><div class=\"line\">738</div><div class=\"line\">739</div><div class=\"line\">740</div><div class=\"line\">741</div><div class=\"line\">742</div><div class=\"line\">743</div><div class=\"line\">744</div><div class=\"line\">745</div><div class=\"line\">746</div><div class=\"line\">747</div><div class=\"line\">748</div><div class=\"line\">749</div><div class=\"line\">750</div><div class=\"line\">751</div><div class=\"line\">752</div><div class=\"line\">753</div><div class=\"line\">754</div><div class=\"line\">755</div><div class=\"line\">756</div><div class=\"line\">757</div><div class=\"line\">758</div><div class=\"line\">759</div><div class=\"line\">760</div><div class=\"line\">761</div><div class=\"line\">762</div><div class=\"line\">763</div><div class=\"line\">764</div><div class=\"line\">765</div><div class=\"line\">766</div><div class=\"line\">767</div><div class=\"line\">768</div><div class=\"line\">769</div><div class=\"line\">770</div><div class=\"line\">771</div><div class=\"line\">772</div><div class=\"line\">773</div><div class=\"line\">774</div><div class=\"line\">775</div><div class=\"line\">776</div><div class=\"line\">777</div><div class=\"line\">778</div><div class=\"line\">779</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppDelegate.m</div><div class=\"line\">//</div><div class=\"line\">//  AppDelegate.m</div><div class=\"line\">//  LocalNotification</div><div class=\"line\">//</div><div class=\"line\">//  Created by Kenshin Cui on 14/03/28.</div><div class=\"line\">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import \"AppDelegate.h\"</div><div class=\"line\">#import \"KCMainViewController.h\"</div><div class=\"line\"></div><div class=\"line\">@interface AppDelegate ()</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation AppDelegate</div><div class=\"line\"></div><div class=\"line\">#pragma mark - 应用代理方法</div><div class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class=\"line\">    </div><div class=\"line\">    _window=[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];</div><div class=\"line\">    </div><div class=\"line\">    _window.backgroundColor =[UIColor colorWithRed:249/255.0 green:249/255.0 blue:249/255.0 alpha:1];</div><div class=\"line\">    </div><div class=\"line\">    //设置全局导航条风格和颜色</div><div class=\"line\">    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1]];</div><div class=\"line\">    [[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];</div><div class=\"line\">    </div><div class=\"line\">    KCMainViewController *mainController=[[KCMainViewController alloc]init];</div><div class=\"line\">    _window.rootViewController=mainController;</div><div class=\"line\">    </div><div class=\"line\">    [_window makeKeyAndVisible];</div><div class=\"line\"></div><div class=\"line\">    //如果已经获得发送通知的授权则创建本地通知，否则请求授权(注意：如果不请求授权在设置中是没有对应的通知设置项的，也就是说如果从来没有发送过请求，即使通过设置也打不开消息允许设置)</div><div class=\"line\">    if ([[UIApplication sharedApplication]currentUserNotificationSettings].types!=UIUserNotificationTypeNone) &#123;</div><div class=\"line\">        [self addLocalNotification];</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">        [[UIApplication sharedApplication]registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert|UIUserNotificationTypeBadge|UIUserNotificationTypeSound  categories:nil]];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    return YES;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 调用过用户注册通知方法之后执行（也就是调用完registerUserNotificationSettings:方法之后执行）</div><div class=\"line\">-(void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings&#123;</div><div class=\"line\">    if (notificationSettings.types!=UIUserNotificationTypeNone) &#123;</div><div class=\"line\">        [self addLocalNotification];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 进入前台后设置消息信息</div><div class=\"line\">-(void)applicationWillEnterForeground:(UIApplication *)application&#123;</div><div class=\"line\">    [[UIApplication sharedApplication]setApplicationIconBadgeNumber:0];//进入前台取消应用消息图标</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark - 私有方法</div><div class=\"line\">#pragma mark 添加本地通知</div><div class=\"line\">-(void)addLocalNotification&#123;</div><div class=\"line\">    </div><div class=\"line\">    //定义本地通知对象</div><div class=\"line\">    UILocalNotification *notification=[[UILocalNotification alloc]init];</div><div class=\"line\">    //设置调用时间</div><div class=\"line\">    notification.fireDate=[NSDate dateWithTimeIntervalSinceNow:10.0];//通知触发的时间，10s以后</div><div class=\"line\">    notification.repeatInterval=2;//通知重复次数</div><div class=\"line\">    //notification.repeatCalendar=[NSCalendar currentCalendar];//当前日历，使用前最好设置时区等信息以便能够自动同步时间</div><div class=\"line\">    </div><div class=\"line\">    //设置通知属性</div><div class=\"line\">    notification.alertBody=@\"最近添加了诸多有趣的特性，是否立即体验？\"; //通知主体</div><div class=\"line\">    notification.applicationIconBadgeNumber=1;//应用程序图标右上角显示的消息数</div><div class=\"line\">    notification.alertAction=@\"打开应用\"; //待机界面的滑动动作提示</div><div class=\"line\">    notification.alertLaunchImage=@\"Default\";//通过点击通知打开应用时的启动图片,这里使用程序启动图片</div><div class=\"line\">    //notification.soundName=UILocalNotificationDefaultSoundName;//收到通知时播放的声音，默认消息声音</div><div class=\"line\">    notification.soundName=@\"msg.caf\";//通知声音（需要真机才能听到声音）</div><div class=\"line\">    </div><div class=\"line\">    //设置用户信息</div><div class=\"line\">    notification.userInfo=@&#123;@\"id\":@1,@\"user\":@\"Kenshin Cui\"&#125;;//绑定到通知上的其他附加信息</div><div class=\"line\">    </div><div class=\"line\">    //调用通知</div><div class=\"line\">    [[UIApplication sharedApplication] scheduleLocalNotification:notification];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 移除本地通知，在不需要此通知时记得移除</div><div class=\"line\">-(void)removeNotification&#123;</div><div class=\"line\">    [[UIApplication sharedApplication] cancelAllLocalNotifications];</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div><div class=\"line\">请求获得用户允许通知的效果：</div><div class=\"line\"> LocalNotification_Request</div><div class=\"line\">应用退出到后弹出通知的效果：</div><div class=\"line\"> LocalNotification_Notification</div><div class=\"line\">锁屏状态下的通知效果(从这个界面可以看到alertAction配置为“打开应用”)：</div><div class=\"line\">LocalNotification_Lock</div><div class=\"line\">注意：</div><div class=\"line\">在使用通知之前必须注册通知类型，如果用户不允许应用程序发送通知，则以后就无法发送通知，除非用户手动到iOS设置中打开通知。</div><div class=\"line\">本地通知是有操作系统统一调度的，只有在应用退出到后台或者关闭才能收到通知。(注意：这一点对于后面的推送通知也是完全适用的。 ）</div><div class=\"line\">通知的声音是由iOS系统播放的，格式必须是Linear PCM、MA4（IMA/ADPCM）、µLaw、aLaw中的一种，并且播放时间必须在30s内，否则将被系统声音替换，同时自定义声音文件必须放到main boundle中。</div><div class=\"line\">本地通知的数量是有限制的，最近的本地通知最多只能有64个，超过这个数量将被系统忽略。</div><div class=\"line\">如果想要移除本地通知可以调用UIApplication的cancelLocalNotification:或cancelAllLocalNotifications移除指定通知或所有通知。</div><div class=\"line\">从上面的程序可以看到userInfo这个属性我们设置了参数，那么这个参数如何接收呢？</div><div class=\"line\">在iOS中如果点击一个弹出通知（或者锁屏界面滑动查看通知），默认会自动打开当前应用。由于通知由系统调度那么此时进入应用有两种情况：如果应用程序已经完全退出那么此时会调用- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions方法；如果此时应用程序还在运行（无论是在前台还是在后台）则会调用-(void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification方法接收消息参数。当然如果是后者自然不必多说，因为参数中已经可以拿到notification对象，只要读取userInfo属性即可。如果是前者的话则可以访问launchOptions中键为UIApplicationLaunchOptionsLocalNotificationKey的对象，这个对象就是发送的通知，由此对象再去访问userInfo。为了演示这个过程在下面的程序中将userInfo的内容写入文件以便模拟关闭程序后再通过点击通知打开应用获取userInfo的过程。</div><div class=\"line\">AppDelegate.m</div><div class=\"line\">//</div><div class=\"line\">//  AppDelegate.m</div><div class=\"line\">//  LocalNotification</div><div class=\"line\">//</div><div class=\"line\">//  Created by Kenshin Cui on 14/03/28.</div><div class=\"line\">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import \"AppDelegate.h\"</div><div class=\"line\">#import \"KCMainViewController.h\"</div><div class=\"line\"></div><div class=\"line\">@interface AppDelegate ()</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation AppDelegate</div><div class=\"line\"></div><div class=\"line\">#pragma mark - 应用代理方法</div><div class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class=\"line\">    </div><div class=\"line\">    _window=[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];</div><div class=\"line\">    </div><div class=\"line\">    _window.backgroundColor =[UIColor colorWithRed:249/255.0 green:249/255.0 blue:249/255.0 alpha:1];</div><div class=\"line\">    </div><div class=\"line\">    //设置全局导航条风格和颜色</div><div class=\"line\">    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1]];</div><div class=\"line\">    [[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];</div><div class=\"line\">    </div><div class=\"line\">    KCMainViewController *mainController=[[KCMainViewController alloc]init];</div><div class=\"line\">    _window.rootViewController=mainController;</div><div class=\"line\">    </div><div class=\"line\">    [_window makeKeyAndVisible];</div><div class=\"line\"></div><div class=\"line\">    //添加通知</div><div class=\"line\">    [self addLocalNotification];</div><div class=\"line\"></div><div class=\"line\">    //接收通知参数</div><div class=\"line\">    UILocalNotification *notification=[launchOptions valueForKey:UIApplicationLaunchOptionsLocalNotificationKey];</div><div class=\"line\">    NSDictionary *userInfo= notification.userInfo;</div><div class=\"line\">    </div><div class=\"line\">    [userInfo writeToFile:@\"/Users/kenshincui/Desktop/didFinishLaunchingWithOptions.txt\" atomically:YES];</div><div class=\"line\">    NSLog(@\"didFinishLaunchingWithOptions:The userInfo is %@.\",userInfo);</div><div class=\"line\">    </div><div class=\"line\">    return YES;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 接收本地通知时触发</div><div class=\"line\">-(void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification&#123;</div><div class=\"line\">    NSDictionary *userInfo=notification.userInfo;</div><div class=\"line\">    [userInfo writeToFile:@\"/Users/kenshincui/Desktop/didReceiveLocalNotification.txt\" atomically:YES];</div><div class=\"line\">    NSLog(@\"didReceiveLocalNotification:The userInfo is %@\",userInfo);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 调用过用户注册通知方法之后执行（也就是调用完registerUserNotificationSettings:方法之后执行）</div><div class=\"line\">-(void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings&#123;</div><div class=\"line\">    if (notificationSettings.types!=UIUserNotificationTypeNone) &#123;</div><div class=\"line\">        [self addLocalNotification];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 进入前台后设置消息信息</div><div class=\"line\">-(void)applicationWillEnterForeground:(UIApplication *)application&#123;</div><div class=\"line\">    [[UIApplication sharedApplication]setApplicationIconBadgeNumber:0];//进入前台取消应用消息图标</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark - 私有方法</div><div class=\"line\">#pragma mark 添加本地通知</div><div class=\"line\">-(void)addLocalNotification&#123;</div><div class=\"line\">    </div><div class=\"line\">    //定义本地通知对象</div><div class=\"line\">    UILocalNotification *notification=[[UILocalNotification alloc]init];</div><div class=\"line\">    //设置调用时间</div><div class=\"line\">    notification.fireDate=[NSDate dateWithTimeIntervalSinceNow:10.0];//通知触发的时间，10s以后</div><div class=\"line\">    notification.repeatInterval=2;//通知重复次数</div><div class=\"line\">    //notification.repeatCalendar=[NSCalendar currentCalendar];//当前日历，使用前最好设置时区等信息以便能够自动同步时间</div><div class=\"line\">    </div><div class=\"line\">    //设置通知属性</div><div class=\"line\">    notification.alertBody=@\"最近添加了诸多有趣的特性，是否立即体验？\"; //通知主体</div><div class=\"line\">    notification.applicationIconBadgeNumber=1;//应用程序图标右上角显示的消息数</div><div class=\"line\">    notification.alertAction=@\"打开应用\"; //待机界面的滑动动作提示</div><div class=\"line\">    notification.alertLaunchImage=@\"Default\";//通过点击通知打开应用时的启动图片</div><div class=\"line\">    //notification.soundName=UILocalNotificationDefaultSoundName;//收到通知时播放的声音，默认消息声音</div><div class=\"line\">    notification.soundName=@\"msg.caf\";//通知声音（需要真机）</div><div class=\"line\">    </div><div class=\"line\">    //设置用户信息</div><div class=\"line\">    notification.userInfo=@&#123;@\"id\":@1,@\"user\":@\"Kenshin Cui\"&#125;;//绑定到通知上的其他额外信息</div><div class=\"line\">    </div><div class=\"line\">    //调用通知</div><div class=\"line\">    [[UIApplication sharedApplication] scheduleLocalNotification:notification];</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div><div class=\"line\">上面的程序可以分为两种情况去运行：一种是启动程序关闭程序，等到接收到通知之后点击通知重新进入程序；另一种是启动程序后，进入后台（其实在前台也可以，但是为了明显的体验这个过程建议进入后台），接收到通知后点击通知进入应用。另种情况会分别按照前面说的情况调用不同的方法接收到userInfo写入本地文件系统。有了userInfo一般来说就可以根据这个信息进行一些处理，例如可以根据不同的参数信息导航到不同的界面，假设是更新的通知则可以导航到更新内容界面等。</div><div class=\"line\">推送通知</div><div class=\"line\">和本地通知不同，推送通知是由应用服务提供商发起的，通过苹果的APNs（Apple Push Notification Server）发送到应用客户端。下面是苹果官方关于推送通知的过程示意图：</div><div class=\"line\">PushNotification_FlowChart</div><div class=\"line\">推送通知的过程可以分为以下几步：</div><div class=\"line\">应用服务提供商从服务器端把要发送的消息和设备令牌（device token）发送给苹果的消息推送服务器APNs。</div><div class=\"line\">APNs根据设备令牌在已注册的设备（iPhone、iPad、iTouch、mac等）查找对应的设备，将消息发送给相应的设备。</div><div class=\"line\">客户端设备接将接收到的消息传递给相应的应用程序，应用程序根据用户设置弹出通知消息。</div><div class=\"line\">当然，这只是一个简单的流程，有了这个流程我们还无从下手编写程序，将上面的流程细化可以得到如下流程图（图片来自互联网），在这个过程中会也会提到如何在程序中完成这些步骤：</div><div class=\"line\">PushNotification_FlowChartDetail</div><div class=\"line\">1.应用程序注册APNs推送消息。</div><div class=\"line\">说明：</div><div class=\"line\">a.只有注册过的应用才有可能接收到消息，程序中通常通过UIApplication的registerUserNotificationSettings:方法注册，iOS8中通知注册的方法发生了改变，如果是iOS7及之前版本的iOS请参考其他代码。</div><div class=\"line\">b.注册之前有两个前提条件必须准备好：开发配置文件（provisioning profile，也就是.mobileprovision后缀的文件）的App ID不能使用通配ID必须使用指定APP ID并且生成配置文件中选择Push Notifications服务，一般的开发配置文件无法完成注册；应用程序的Bundle Identifier必须和生成配置文件使用的APP ID完全一致。</div><div class=\"line\">2.iOS从APNs接收device token，在应用程序获取device token。</div><div class=\"line\">说明：</div><div class=\"line\">a.在UIApplication的-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken代理方法中获取令牌，此方法发生在注册之后。</div><div class=\"line\">b.如果无法正确获得device token可以在UIApplication的-(void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error代理方法中查看详细错误信息，此方法发生在获取device token失败之后。</div><div class=\"line\">c.必须真机调试，模拟器无法获取device token。</div><div class=\"line\">3.iOS应用将device token发送给应用程序提供商，告诉服务器端当前设备允许接收消息。</div><div class=\"line\">说明：</div><div class=\"line\">a.device token的生成算法只有Apple掌握，为了确保算法发生变化后仍然能够正常接收服务器端发送的通知，每次应用程序启动都重新获得device token（注意：device token的获取不会造成性能问题，苹果官方已经做过优化）。</div><div class=\"line\">b.通常可以创建一个网络连接发送给应用程序提供商的服务器端， 在这个过程中最好将上一次获得的device token存储起来，避免重复发送，一旦发现device token发生了变化最好将原有的device token一块发送给服务器端，服务器端删除原有令牌存储新令牌避免服务器端发送无效消息。</div><div class=\"line\">4.应用程序提供商在服务器端根据前面发送过来的device token组织信息发送给APNs。</div><div class=\"line\">说明：</div><div class=\"line\">a.发送时指定device token和消息内容，并且完全按照苹果官方的消息格式组织消息内容，通常情况下可以借助其他第三方消息推送框架来完成。</div><div class=\"line\">5.APNs根据消息中的device token查找已注册的设备推送消息。</div><div class=\"line\">说明：</div><div class=\"line\">a.正常情况下可以根据device token将消息成功推送到客户端设备中，但是也不排除用户卸载程序的情况，此时推送消息失败，APNs会将这个错误消息通知服务器端以避免资源浪费（服务器端此时可以根据错误删除已经存储的device token，下次不再发送）。</div><div class=\"line\">下面将简单演示一下推送通知的简单流程:</div><div class=\"line\">首先，看一下iOS客户端代码：</div><div class=\"line\">//</div><div class=\"line\">//  AppDelegate.m</div><div class=\"line\">//  pushnotification</div><div class=\"line\">//</div><div class=\"line\">//  Created by Kenshin Cui on 14/03/27.</div><div class=\"line\">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import \"AppDelegate.h\"</div><div class=\"line\">#import \"KCMainViewController.h\"</div><div class=\"line\"></div><div class=\"line\">@interface AppDelegate ()</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation AppDelegate</div><div class=\"line\"></div><div class=\"line\">#pragma mark - 应用程序代理方法</div><div class=\"line\">#pragma mark 应用程序启动之后</div><div class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class=\"line\">    </div><div class=\"line\">    _window=[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];</div><div class=\"line\">    </div><div class=\"line\">    _window.backgroundColor =[UIColor colorWithRed:249/255.0 green:249/255.0 blue:249/255.0 alpha:1];</div><div class=\"line\">    </div><div class=\"line\">    //设置全局导航条风格和颜色</div><div class=\"line\">    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1]];</div><div class=\"line\">    [[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];</div><div class=\"line\">    </div><div class=\"line\">    KCMainViewController *mainController=[[KCMainViewController alloc]init];</div><div class=\"line\">    _window.rootViewController=mainController;</div><div class=\"line\">    </div><div class=\"line\">    [_window makeKeyAndVisible];</div><div class=\"line\">    </div><div class=\"line\">    //注册推送通知（注意iOS8注册方法发生了变化）</div><div class=\"line\">    [application registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert|UIUserNotificationTypeBadge|UIUserNotificationTypeSound categories:nil]];</div><div class=\"line\">    [application registerForRemoteNotifications];</div><div class=\"line\">    </div><div class=\"line\">    return YES;</div><div class=\"line\">&#125;</div><div class=\"line\">#pragma mark 注册推送通知之后</div><div class=\"line\">//在此接收设备令牌</div><div class=\"line\">-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken&#123;</div><div class=\"line\">    [self addDeviceToken:deviceToken];</div><div class=\"line\">    NSLog(@\"device token:%@\",deviceToken);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 获取device token失败后</div><div class=\"line\">-(void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error&#123;</div><div class=\"line\">    NSLog(@\"didFailToRegisterForRemoteNotificationsWithError:%@\",error.localizedDescription);</div><div class=\"line\">    [self addDeviceToken:nil];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 接收到推送通知之后</div><div class=\"line\">-(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo&#123;</div><div class=\"line\">    NSLog(@\"receiveRemoteNotification,userInfo is %@\",userInfo);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark - 私有方法</div><div class=\"line\">/**</div><div class=\"line\"> *  添加设备令牌到服务器端</div><div class=\"line\"> *</div><div class=\"line\"> *  @param deviceToken 设备令牌</div><div class=\"line\"> */</div><div class=\"line\">-(void)addDeviceToken:(NSData *)deviceToken&#123;</div><div class=\"line\">    NSString *key=@\"DeviceToken\";</div><div class=\"line\">    NSData *oldToken= [[NSUserDefaults standardUserDefaults]objectForKey:key];</div><div class=\"line\">    //如果偏好设置中的已存储设备令牌和新获取的令牌不同则存储新令牌并且发送给服务器端</div><div class=\"line\">    if (![oldToken isEqualToData:deviceToken]) &#123;</div><div class=\"line\">        [[NSUserDefaults standardUserDefaults] setObject:deviceToken forKey:key];</div><div class=\"line\">        [self sendDeviceTokenWidthOldDeviceToken:oldToken newDeviceToken:deviceToken];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(void)sendDeviceTokenWidthOldDeviceToken:(NSData *)oldToken newDeviceToken:(NSData *)newToken&#123;</div><div class=\"line\">    //注意一定确保真机可以正常访问下面的地址</div><div class=\"line\">    NSString *urlStr=@\"http://192.168.1.101/RegisterDeviceToken.aspx\";</div><div class=\"line\">    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</div><div class=\"line\">    NSURL *url=[NSURL URLWithString:urlStr];</div><div class=\"line\">    NSMutableURLRequest *requestM=[NSMutableURLRequest requestWithURL:url cachePolicy:0 timeoutInterval:10.0];</div><div class=\"line\">    [requestM setHTTPMethod:@\"POST\"];</div><div class=\"line\">    NSString *bodyStr=[NSString stringWithFormat:@\"oldToken=%@&amp;newToken=%@\",oldToken,newToken];</div><div class=\"line\">    NSData *body=[bodyStr dataUsingEncoding:NSUTF8StringEncoding];</div><div class=\"line\">    [requestM setHTTPBody:body];</div><div class=\"line\">    NSURLSession *session=[NSURLSession sharedSession];</div><div class=\"line\">    NSURLSessionDataTask *dataTask= [session dataTaskWithRequest:requestM completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) &#123;</div><div class=\"line\">        if (error) &#123;</div><div class=\"line\">            NSLog(@\"Send failure,error is :%@\",error.localizedDescription);</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            NSLog(@\"Send Success!\");</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;];</div><div class=\"line\">    [dataTask resume];</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div><div class=\"line\">iOS客户端代码的代码比较简单，注册推送通知，获取device token存储到偏好设置中，并且如果新获取的device token不同于偏好设置中存储的数据则发送给服务器端，更新服务器端device token列表。</div><div class=\"line\">其次，由于device token需要发送给服务器端，这里使用一个Web应用作为服务器端接收device token，这里使用了ASP.NET程序来处理令牌接收注册工作，当然你使用其他技术同样没有问题。下面是对应的后台代码：</div><div class=\"line\">using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Web;</div><div class=\"line\">using System.Web.UI;</div><div class=\"line\">using System.Web.UI.WebControls;</div><div class=\"line\">using CMJ.Framework.Data;</div><div class=\"line\"></div><div class=\"line\">namespace WebServer</div><div class=\"line\">&#123;</div><div class=\"line\">    public partial class RegisterDeviceToken : System.Web.UI.Page</div><div class=\"line\">    &#123;</div><div class=\"line\">        private string _appID = @\"com.cmjstudio.pushnotification\";</div><div class=\"line\">        private SqlHelper _helper = new SqlHelper();</div><div class=\"line\">        protected void Page_Load(object sender, EventArgs e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            try</div><div class=\"line\">            &#123;</div><div class=\"line\">                string oldToken = Request[\"oldToken\"] + \"\";</div><div class=\"line\">                string newToken = Request[\"newToken\"] + \"\";</div><div class=\"line\">                string sql = \"\";</div><div class=\"line\">                //如果传递旧的设备令牌则删除旧令牌添加新令牌</div><div class=\"line\">                if (oldToken != \"\")</div><div class=\"line\">                &#123;</div><div class=\"line\">                    sql = string.Format(\"DELETE FROM dbo.Device WHERE AppID='&#123;0&#125;' AND DeviceToken='&#123;1&#125;';\", _appID, oldToken);</div><div class=\"line\">                &#125;</div><div class=\"line\">                sql += string.Format(@\"IF NOT EXISTS (SELECT ID FROM dbo.Device WHERE AppID='&#123;0&#125;' AND DeviceToken='&#123;1&#125;')</div><div class=\"line\">                                        INSERT INTO dbo.Device ( AppID, DeviceToken ) VALUES ( N'&#123;0&#125;', N'&#123;1&#125;');\", _appID, newToken);</div><div class=\"line\">                _helper.ExecuteNonQuery(sql);</div><div class=\"line\">                Response.Write(\"注册成功！\");</div><div class=\"line\">            &#125;</div><div class=\"line\">            catch(Exception ex)</div><div class=\"line\">            &#123;</div><div class=\"line\">                Response.Write(\"注册失败，错误详情：\"+ex.ToString());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">这个过程主要就是保存device token到数据库中，当然如果同时传递旧的设备令牌还需要先删除就的设备令牌，这里简单的在数据库中创建了一张Device表来保存设备令牌，其中记录了应用程序Id和设备令牌。</div><div class=\"line\">第三步就是服务器端发送消息，如果要给APNs发送消息就必须按照Apple的标准消息格式组织消息内容。但是好在目前已经有很多开源的第三方类库供我们使用，具体消息如何包装完全不用自己组织，这里使用一个开源的类库Push Sharp来给APNs发送消息 ,除了可以给Apple设备推送消息，Push Sharp还支持Android、Windows Phone等多种设备，更多详细内容大家可以参照官方说明。前面说过如果要开发消息推送应用不能使用一般的开发配置文件，这里还需要注意：如果服务器端要给APNs发送消息其秘钥也必须是通过APNs Development iOS类型的证书来导出的，一般的iOS Development 类型的证书导出的秘钥无法用作服务器端发送秘钥。下面通过在一个简单的WinForm程序中调用Push Sharp给APNs发送消息，这里读取之前Device表中的所有设备令牌循环发送消息：</div><div class=\"line\">using System;</div><div class=\"line\">using System.IO;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.ComponentModel;</div><div class=\"line\">using System.Data;</div><div class=\"line\">using System.Drawing;</div><div class=\"line\">using System.Text;</div><div class=\"line\">using System.Windows.Forms;</div><div class=\"line\">using PushSharp;</div><div class=\"line\">using PushSharp.Apple;</div><div class=\"line\">using CMJ.Framework.Data;</div><div class=\"line\">using CMJ.Framework.Logging;</div><div class=\"line\">using CMJ.Framework.Windows.Forms;</div><div class=\"line\"></div><div class=\"line\">namespace PushNotificationServer</div><div class=\"line\">&#123;</div><div class=\"line\">    public partial class frmMain : PersonalizeForm</div><div class=\"line\">    &#123;</div><div class=\"line\">        private string _appID = @\"com.cmjstudio.pushnotification\";</div><div class=\"line\">        private SqlHelper _helper = new SqlHelper();</div><div class=\"line\">        public frmMain()</div><div class=\"line\">        &#123;</div><div class=\"line\">            InitializeComponent();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        private void btnClose_Click(object sender, EventArgs e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            this.Close();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        private void btnSend_Click(object sender, EventArgs e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            List&lt;string&gt; deviceTokens = GetDeviceToken();</div><div class=\"line\">            SendMessage(deviceTokens, tbMessage.Text);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        #region 发送消息</div><div class=\"line\">        /// &lt;summary&gt;</div><div class=\"line\">        /// 取得所有设备令牌</div><div class=\"line\">        /// &lt;/summary&gt;</div><div class=\"line\">        /// &lt;returns&gt;设备令牌&lt;/returns&gt;</div><div class=\"line\">        private List&lt;string&gt; GetDeviceToken()</div><div class=\"line\">        &#123;</div><div class=\"line\">            List&lt;string&gt; deviceTokens = new List&lt;string&gt;();</div><div class=\"line\">            string sql = string.Format(\"SELECT DeviceToken FROM dbo.Device WHERE AppID='&#123;0&#125;'\",_appID);</div><div class=\"line\">            DataTable dt = _helper.GetDataTable(sql);</div><div class=\"line\">            if(dt.Rows.Count&gt;0)</div><div class=\"line\">            &#123;</div><div class=\"line\">                foreach(DataRow dr in dt.Rows)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    deviceTokens.Add((dr[\"DeviceToken\"]+\"\").TrimStart('&lt;').TrimEnd('&gt;').Replace(\" \",\"\"));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return deviceTokens;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        /// &lt;summary&gt;</div><div class=\"line\">        /// 发送消息</div><div class=\"line\">        /// &lt;/summary&gt;</div><div class=\"line\">        /// &lt;param name=\"deviceToken\"&gt;设备令牌&lt;/param&gt;</div><div class=\"line\">        /// &lt;param name=\"message\"&gt;消息内容&lt;/param&gt;</div><div class=\"line\">        private void SendMessage(List&lt;string&gt; deviceToken, string message)</div><div class=\"line\">        &#123;</div><div class=\"line\">            //创建推送对象</div><div class=\"line\">            var pusher = new PushBroker();</div><div class=\"line\">            pusher.OnNotificationSent += pusher_OnNotificationSent;//发送成功事件</div><div class=\"line\">            pusher.OnNotificationFailed += pusher_OnNotificationFailed;//发送失败事件</div><div class=\"line\">            pusher.OnChannelCreated += pusher_OnChannelCreated;</div><div class=\"line\">            pusher.OnChannelDestroyed += pusher_OnChannelDestroyed;</div><div class=\"line\">            pusher.OnChannelException += pusher_OnChannelException;</div><div class=\"line\">            pusher.OnDeviceSubscriptionChanged += pusher_OnDeviceSubscriptionChanged;</div><div class=\"line\">            pusher.OnDeviceSubscriptionExpired += pusher_OnDeviceSubscriptionExpired;</div><div class=\"line\">            pusher.OnNotificationRequeue += pusher_OnNotificationRequeue;</div><div class=\"line\">            pusher.OnServiceException += pusher_OnServiceException;</div><div class=\"line\">            //注册推送服务</div><div class=\"line\">            byte[] certificateData = File.ReadAllBytes(@\"E:\\KenshinCui_Push.p12\");</div><div class=\"line\">            pusher.RegisterAppleService(new ApplePushChannelSettings(certificateData, \"123\"));</div><div class=\"line\">            foreach (string token in deviceToken)</div><div class=\"line\">            &#123;</div><div class=\"line\">                //给指定设备发送消息</div><div class=\"line\">                pusher.QueueNotification(new AppleNotification()</div><div class=\"line\">                    .ForDeviceToken(token)</div><div class=\"line\">                    .WithAlert(message) </div><div class=\"line\">                    .WithBadge(1)</div><div class=\"line\">                    .WithSound(\"default\"));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnServiceException(object sender, Exception error)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());</div><div class=\"line\">            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\" + error.ToString(), \"系统提示\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnNotificationRequeue(object sender, PushSharp.Core.NotificationRequeueEventArgs e)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"pusher_OnNotificationRequeue\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnDeviceSubscriptionExpired(object sender, string expiredSubscriptionId, DateTime expirationDateUtc, PushSharp.Core.INotification notification)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"pusher_OnDeviceSubscriptionChanged\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnDeviceSubscriptionChanged(object sender, string oldSubscriptionId, string newSubscriptionId, PushSharp.Core.INotification notification)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"pusher_OnDeviceSubscriptionChanged\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnChannelException(object sender, PushSharp.Core.IPushChannel pushChannel, Exception error)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());</div><div class=\"line\">            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\" + error.ToString(), \"系统提示\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnChannelDestroyed(object sender)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"pusher_OnChannelDestroyed\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnChannelCreated(object sender, PushSharp.Core.IPushChannel pushChannel)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"pusher_OnChannelCreated\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnNotificationFailed(object sender, PushSharp.Core.INotification notification, Exception error)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());</div><div class=\"line\">            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\"+error.ToString(), \"系统提示\");</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void pusher_OnNotificationSent(object sender, PushSharp.Core.INotification notification)</div><div class=\"line\">        &#123;</div><div class=\"line\">            Console.WriteLine(\"消息发送成功！\");</div><div class=\"line\">            PersonalizeMessageBox.Show(this, \"消息发送成功！\", \"系统提示\");</div><div class=\"line\">        &#125;</div><div class=\"line\">        #endregion</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">服务器端消息发送应用运行效果：</div><div class=\"line\">PushNotification_ServerClient</div><div class=\"line\">iOS客户端接收的消息的效果：</div><div class=\"line\">PushNotification_iOSApp</div><div class=\"line\">到目前为止通过服务器端应用可以顺利发送消息给APNs并且iOS应用已经成功接收推送消息。</div><div class=\"line\">补充--iOS开发证书、秘钥</div><div class=\"line\">iOS开发过程中如果需要进行真机调试、发布需要注册申请很多证书，对于初学者往往迷惑不解，再加上今天的文章中会牵扯到一些特殊配置，这里就简单的对iOS开发的常用证书和秘钥等做一说明。</div><div class=\"line\">证书</div><div class=\"line\">iOS常用的证书包括开发证书和发布证书，无论是真机调试还是最终发布应用到App Store这两个证书都是必须的，它是iOS开发的基本证书。</div><div class=\"line\">a.开发证书：开发证书又分为普通开发证书和推送证书，如果仅仅是一般的应用则前者即可满足，但是如果开发推送应用则必须使用推送证书。</div><div class=\"line\">b.发布证书：发布证书又可以分为普通发布证书、推送证书、Pass Type ID证书、站点发布证书、VoIP服务证书、苹果支付证书。同样的，对于需要使用特殊服务的应用则必须选择对应的证书。</div><div class=\"line\">应用标识</div><div class=\"line\">App ID,应用程序的唯一标识，对应iOS应用的Bundle Identifier，App ID在苹果开发者中心中分为通配应用ID和明确的应用ID,前者一般用于普通应用开发，一个ID可以适用于多个不同标识的应用；但是对于使用消息推送、Passbook、站点发布、iCloud等服务的应用必须配置明确的应用ID。</div><div class=\"line\">设备标识</div><div class=\"line\">UDID,用于标识每一台硬件设备的标示符。注意它不是device token，device token是根据UDID使用一个只有Apple自己才知道的算法生成的一组标示符。</div><div class=\"line\">配置简介</div><div class=\"line\">Provisioning Profiles,平时又称为PP文件。将UDID、App ID、开发证书打包在一起的配置文件，同样分为开发和发布两类配置文件。</div><div class=\"line\">秘钥</div><div class=\"line\">在申请开发证书时必须要首先提交一个秘钥请求文件，对于生成秘钥请求文件的mac，如果要做开发则只需要下载证书和配置简介即可开发。但是如果要想在其他机器上做开发则必须将证书中的秘钥导出（导出之后是一个.p12文件），然后导入其他机器。同时对于类似于推送服务器端应用如果要给APNs发送消息，同样需要使用.p12秘钥文件，并且这个秘钥文件需要是推送证书导出的对应秘钥。</div><div class=\"line\">补充--通知中心</div><div class=\"line\">对于很多初学者往往会把iOS中的本地通知、推送通知和iOS通知中心的概念弄混。其实二者之间并没有任何关系，事实上它们都不属于一个框架，前者属于UIKit框架，后者属于Foundation框架。</div><div class=\"line\">通知中心实际上是iOS程序内部之间的一种消息广播机制，主要为了解决应用程序内部不同对象之间解耦而设计。它是基于观察者模式设计的，不能跨应用程序进程通信，当通知中心接收到消息之后会根据内部的消息转发表，将消息发送给订阅者。下面是一个简单的流程示意图：</div><div class=\"line\">image</div><div class=\"line\">了解通知中心需要熟悉NSNotificationCenter和NSNotification两个类：</div><div class=\"line\">NSNotificationCenter：是通知系统的中心，用于注册和发送通知，下表列出常用的方法。</div><div class=\"line\">方法\t说明</div><div class=\"line\">- (void)addObserver:(id)observer selector:(SEL)aSelector name:(NSString *)aName object:(id)anObject\t添加监听，参数：</div><div class=\"line\">observer:监听者</div><div class=\"line\">selector:监听方法（监听者监听到通知后执行的方法）</div><div class=\"line\">  name:监听的通知名称</div><div class=\"line\">object:通知的发送者（如果指定nil则监听任何对象发送的通知）</div><div class=\"line\">- (id &lt;NSObject&gt;)addObserverForName:(NSString *)name object:(id)obj queue:(NSOperationQueue *)queue usingBlock:(void (^)(NSNotification *note))block\t添加监听，参数：</div><div class=\"line\">name:监听的通知名称</div><div class=\"line\">object:通知的发送者（如果指定nil则监听任何对象发送的通知）</div><div class=\"line\">queue:操作队列，如果制定非主队线程队列则可以异步执行block</div><div class=\"line\">block:监听到通知后执行的操作</div><div class=\"line\">- (void)postNotification:(NSNotification *)notification\t发送通知，参数：</div><div class=\"line\">notification：通知对象</div><div class=\"line\">- (void)postNotificationName:(NSString *)aName object:(id)anObject\t发送通知，参数：</div><div class=\"line\">aName：通知名称</div><div class=\"line\">anObject：通知发送者</div><div class=\"line\">- (void)postNotificationName:(NSString *)aName object:(id)anObject userInfo:(NSDictionary *)aUserInfo\t发送通知，参数：</div><div class=\"line\">aName：通知名称</div><div class=\"line\">anObject：通知发送者</div><div class=\"line\">aUserInfo：通知参数</div><div class=\"line\">- (void)removeObserver:(id)observer\t移除监听，参数：</div><div class=\"line\">observer：监听对象</div><div class=\"line\">- (void)removeObserver:(id)observer name:(NSString *)aName object:(id)anObject\t移除监听，参数：</div><div class=\"line\">observer：监听对象</div><div class=\"line\">aName：通知名称</div><div class=\"line\">anObject：通知发送者</div><div class=\"line\">NSNotification：代表通知内容的载体，主要有三个属性：name代表通知名称，object代表通知的发送者，userInfo代表通知的附加信息。</div><div class=\"line\">虽然前面的文章中从未提到过通知中心，但是其实通知中心我们并不陌生，前面文章中很多内容都是通过通知中心来进行应用中各个组件通信的，只是没有单独拿出来说而已。例如前面的文章中讨论的应用程序生命周期问题，当应用程序启动后、进入后台、进入前台、获得焦点、失去焦点，窗口大小改变、隐藏等都会发送通知。这个通知可以通过前面NSNotificationCenter进行订阅即可接收对应的消息，下面的示例演示了如何添加监听获得UIApplication的进入后台和获得焦点的通知：</div><div class=\"line\">//</div><div class=\"line\">//  KCMainViewController.m</div><div class=\"line\">//  NotificationCenter</div><div class=\"line\">//</div><div class=\"line\">//  Created by Kenshin Cui on 14/03/27.</div><div class=\"line\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import \"KCMainViewController.h\"</div><div class=\"line\"></div><div class=\"line\">@interface KCMainViewController ()</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation KCMainViewController</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    [self addObserverToNotificationCenter];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 添加监听</div><div class=\"line\">-(void)addObserverToNotificationCenter&#123;</div><div class=\"line\">    /*添加应用程序进入后台监听</div><div class=\"line\">     * observer:监听者</div><div class=\"line\">     * selector:监听方法（监听者监听到通知后执行的方法）</div><div class=\"line\">     * name:监听的通知名称(下面的UIApplicationDidEnterBackgroundNotification是一个常量)</div><div class=\"line\">     * object:通知的发送者（如果指定nil则监听任何对象发送的通知）</div><div class=\"line\">     */</div><div class=\"line\">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(applicationEnterBackground) name:UIApplicationDidEnterBackgroundNotification object:[UIApplication sharedApplication]];</div><div class=\"line\">    </div><div class=\"line\">    /* 添加应用程序获得焦点的通知监听</div><div class=\"line\">     * name:监听的通知名称</div><div class=\"line\">     * object:通知的发送者（如果指定nil则监听任何对象发送的通知）</div><div class=\"line\">     * queue:操作队列，如果制定非主队线程队列则可以异步执行block</div><div class=\"line\">     * block:监听到通知后执行的操作</div><div class=\"line\">     */</div><div class=\"line\">    NSOperationQueue *operationQueue=[[NSOperationQueue alloc]init];</div><div class=\"line\">    [[NSNotificationCenter defaultCenter] addObserverForName:UIApplicationDidBecomeActiveNotification object:[UIApplication sharedApplication] queue:operationQueue usingBlock:^(NSNotification *note) &#123;</div><div class=\"line\">        NSLog(@\"Application become active.\");</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 应用程序启动监听方法</div><div class=\"line\">-(void)applicationEnterBackground&#123;</div><div class=\"line\">    NSLog(@\"Application enter background.\");</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div><div class=\"line\">当然很多时候使用通知中心是为了添加自定义通知，并获得自定义通知消息。在前面的文章“iOS开发系列--视图切换”中提到过如何进行多视图之间参数传递，其实利用自定义通知也可以进行参数传递。通常一个应用登录后会显示用户信息，而登录信息可以通过登录界面获取。下面就以这样一种场景为例，在主界面中添加监听，在登录界面发送通知，一旦登录成功将向通知中心发送成功登录的通知，此时主界面中由于已经添加通知监听所以会收到通知并更新UI界面。</div><div class=\"line\">主界面KCMainViewController.m：</div><div class=\"line\">//</div><div class=\"line\">//  KCMainViewController.m</div><div class=\"line\">//  NotificationCenter</div><div class=\"line\">//</div><div class=\"line\">//  Created by Kenshin Cui on 14/03/27</div><div class=\"line\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import \"KCMainViewController.h\"</div><div class=\"line\">#import \"KCLoginViewController.h\"</div><div class=\"line\">#define UPDATE_LGOGIN_INFO_NOTIFICATION @\"updateLoginInfo\"</div><div class=\"line\"></div><div class=\"line\">@interface KCMainViewController ()&#123;</div><div class=\"line\">    UILabel *_lbLoginInfo;</div><div class=\"line\">    UIButton *_btnLogin;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation KCMainViewController</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    [self setupUI];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(void)setupUI&#123;</div><div class=\"line\">    UILabel *label =[[UILabel alloc]initWithFrame:CGRectMake(0, 100,320 ,30)];</div><div class=\"line\">    label.textAlignment=NSTextAlignmentCenter;</div><div class=\"line\">    label.textColor=[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1];</div><div class=\"line\">    _lbLoginInfo=label;</div><div class=\"line\">    [self.view addSubview:label];</div><div class=\"line\">    </div><div class=\"line\">    UIButton *button=[UIButton buttonWithType:UIButtonTypeSystem];</div><div class=\"line\">    button.frame=CGRectMake(60, 200, 200, 25);</div><div class=\"line\">    [button setTitle:@\"登录\" forState:UIControlStateNormal];</div><div class=\"line\">    [button addTarget:self action:@selector(loginOut) forControlEvents:UIControlEventTouchUpInside];</div><div class=\"line\">    _btnLogin=button;</div><div class=\"line\">    </div><div class=\"line\">    [self.view addSubview:button];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(void)loginOut&#123;</div><div class=\"line\">    //添加监听</div><div class=\"line\">    [self addObserverToNotification];</div><div class=\"line\">    </div><div class=\"line\">    KCLoginViewController *loginController=[[KCLoginViewController alloc]init];</div><div class=\"line\">    </div><div class=\"line\">    [self presentViewController:loginController animated:YES completion:nil];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  添加监听</div><div class=\"line\"> */</div><div class=\"line\">-(void)addObserverToNotification&#123;</div><div class=\"line\">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(updateLoginInfo:) name:UPDATE_LGOGIN_INFO_NOTIFICATION object:nil];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  更新登录信息,注意在这里可以获得通知对象并且读取附加信息</div><div class=\"line\"> */</div><div class=\"line\">-(void)updateLoginInfo:(NSNotification *)notification&#123;</div><div class=\"line\">    NSDictionary *userInfo=notification.userInfo;</div><div class=\"line\">    _lbLoginInfo.text=userInfo[@\"loginInfo\"];</div><div class=\"line\">    _btnLogin.titleLabel.text=@\"注销\";</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(void)dealloc&#123;</div><div class=\"line\">    //移除监听</div><div class=\"line\">    [[NSNotificationCenter defaultCenter] removeObserver:self];</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div><div class=\"line\">登录界面KCLoginViewController.m：</div><div class=\"line\">//</div><div class=\"line\">//  KCLoginViewController.m</div><div class=\"line\">//  NotificationCenter</div><div class=\"line\">//</div><div class=\"line\">//  Created by Kenshin Cui on 14/03/27.</div><div class=\"line\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import \"KCLoginViewController.h\"</div><div class=\"line\">#define UPDATE_LGOGIN_INFO_NOTIFICATION @\"updateLoginInfo\"</div><div class=\"line\"></div><div class=\"line\">@interface KCLoginViewController ()&#123;</div><div class=\"line\">    UITextField *_txtUserName;</div><div class=\"line\">    UITextField *_txtPassword;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation KCLoginViewController</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    [self setupUI];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  UI布局</div><div class=\"line\"> */</div><div class=\"line\">-(void)setupUI&#123;</div><div class=\"line\">    //用户名</div><div class=\"line\">    UILabel *lbUserName=[[UILabel alloc]initWithFrame:CGRectMake(50, 150, 100, 30)];</div><div class=\"line\">    lbUserName.text=@\"用户名：\";</div><div class=\"line\">    [self.view addSubview:lbUserName];</div><div class=\"line\">    </div><div class=\"line\">    _txtUserName=[[UITextField alloc]initWithFrame:CGRectMake(120, 150, 150, 30)];</div><div class=\"line\">    _txtUserName.borderStyle=UITextBorderStyleRoundedRect;</div><div class=\"line\">    [self.view addSubview:_txtUserName];</div><div class=\"line\">    </div><div class=\"line\">    //密码</div><div class=\"line\">    UILabel *lbPassword=[[UILabel alloc]initWithFrame:CGRectMake(50, 200, 100, 30)];</div><div class=\"line\">    lbPassword.text=@\"密码：\";</div><div class=\"line\">    [self.view addSubview:lbPassword];</div><div class=\"line\">    </div><div class=\"line\">    _txtPassword=[[UITextField alloc]initWithFrame:CGRectMake(120, 200, 150, 30)];</div><div class=\"line\">    _txtPassword.secureTextEntry=YES;</div><div class=\"line\">    _txtPassword.borderStyle=UITextBorderStyleRoundedRect;</div><div class=\"line\">    [self.view addSubview:_txtPassword];</div><div class=\"line\">    </div><div class=\"line\">    //登录按钮</div><div class=\"line\">    UIButton *btnLogin=[UIButton buttonWithType:UIButtonTypeSystem];</div><div class=\"line\">    btnLogin.frame=CGRectMake(70, 270, 80, 30);</div><div class=\"line\">    [btnLogin setTitle:@\"登录\" forState:UIControlStateNormal];</div><div class=\"line\">    [self.view addSubview:btnLogin];</div><div class=\"line\">    [btnLogin addTarget:self action:@selector(login) forControlEvents:UIControlEventTouchUpInside];</div><div class=\"line\">    </div><div class=\"line\">    //取消登录按钮</div><div class=\"line\">    UIButton *btnCancel=[UIButton buttonWithType:UIButtonTypeSystem];</div><div class=\"line\">    btnCancel.frame=CGRectMake(170, 270, 80, 30);</div><div class=\"line\">    [btnCancel setTitle:@\"取消\" forState:UIControlStateNormal];</div><div class=\"line\">    [self.view addSubview:btnCancel];</div><div class=\"line\">    [btnCancel addTarget:self action:@selector(cancel) forControlEvents:UIControlEventTouchUpInside];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 登录操作</div><div class=\"line\">-(void)login&#123;</div><div class=\"line\">    if ([_txtUserName.text isEqualToString:@\"kenshincui\"] &amp;&amp; [_txtPassword.text isEqualToString:@\"123\"] ) &#123;</div><div class=\"line\">        //发送通知</div><div class=\"line\">        [self postNotification];</div><div class=\"line\">        [self dismissViewControllerAnimated:YES completion:nil];</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">        //登录失败弹出提示信息</div><div class=\"line\">        UIAlertView *alertView=[[UIAlertView alloc]initWithTitle:@\"系统信息\" message:@\"用户名或密码错误，请重新输入！\" delegate:nil cancelButtonTitle:@\"取消\" otherButtonTitles:nil];</div><div class=\"line\">        [alertView show];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark 点击取消</div><div class=\"line\">-(void)cancel&#123;</div><div class=\"line\">    [self dismissViewControllerAnimated:YES completion:nil];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  添加通知，注意这里设置了附加信息</div><div class=\"line\"> */</div><div class=\"line\">-(void)postNotification&#123;</div><div class=\"line\">    NSDictionary *userInfo=@&#123;@\"loginInfo\":[NSString stringWithFormat:@\"Hello,%@!\",_txtUserName.text]&#125;;</div><div class=\"line\">    NSLog(@\"%@\",userInfo);</div><div class=\"line\">    NSNotification *notification=[NSNotification notificationWithName:UPDATE_LGOGIN_INFO_NOTIFICATION object:self userInfo:userInfo];</div><div class=\"line\">    [[NSNotificationCenter defaultCenter] postNotification:notification];</div><div class=\"line\">//也可直接采用下面的方法</div><div class=\"line\">//    [[NSNotificationCenter defaultCenter] postNotificationName:UPDATE_LGOGIN_INFO_NOTIFICATION object:self userInfo:userInfo];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">@end</div><div class=\"line\">运行效果：</div><div class=\"line\">NotificationCenter_CustomNotification</div><div class=\"line\">注意：</div><div class=\"line\">通过上面的介绍大家应该可以发现其实通知中心是一种低耦合设计，和前面文章中提到的代理模式有异曲同工之妙。相对于后者而言，通知中心可以将一个通知发送给多个监听者，而每个对象的代理却只能有一个。当然代理也有其优点，例如使用代理代码分布结构更加清晰，它不像通知一样随处都可以添加订阅等，实际使用过程中需要根据实际情况而定。</div></pre></td></tr></table></figure>"},{"title":"iOS隐藏状态栏","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n状态栏： 运营商时间电量的行\n#pragma mark  隐藏状态栏\n-(BOOL)prefersStatusBarHidden\n{\n    return YES;\n}\n```\n\n","source":"_posts/oc/iOS隐藏状态栏.md","raw":"---\ntitle: iOS隐藏状态栏\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n状态栏： 运营商时间电量的行\n#pragma mark  隐藏状态栏\n-(BOOL)prefersStatusBarHidden\n{\n    return YES;\n}\n```\n\n","slug":"oc/iOS隐藏状态栏","published":1,"updated":"2016-10-08T06:02:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98b003821xw0de87915","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">状态栏： 运营商时间电量的行</div><div class=\"line\"><span class=\"meta\">#pragma mark  隐藏状态栏</span></div><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)prefersStatusBarHidden</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">状态栏： 运营商时间电量的行</div><div class=\"line\"><span class=\"meta\">#pragma mark  隐藏状态栏</span></div><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)prefersStatusBarHidden</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"iPhone尺寸","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n/* 屏幕尺寸     物理pt     像素pxiPhone4     320 * 480    2倍iPhone4s   \n 320 * 480    2倍iPhone5\n     320 * 568    2倍iPhone6\n     375 * 667    2倍iPhone6plus\n 414 * 736    3倍iPhone6s    375\n * 667    2倍iPhone6splus\n 414 * 736    3倍 */\n/*Icon.png             –  57×57          iPhone (ios5/6) Icon@2x.png      – 114×114        iPhone Retina (ios5/6) \n\nIcon-72.png         – 72×72        iPad (ios5/6) Icon-72@2x.png  - 144×144     iPad Retina (ios5/6) \nIcon-60@2x.png  - 120x120     iphone & ipod touch (ios7/8) \nIcon-60@3x.png  - 180x180     iphone6 plus (ios8) \n\nIcon-76.png         - 76x76         ipad2 & ipad mini (ios7/8) \nIcon-76@2x.png - 152x152      ipad retina (ios7/8)*/","source":"_posts/oc/iPhone尺寸.md","raw":"---\ntitle: iPhone尺寸\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n/* 屏幕尺寸     物理pt     像素pxiPhone4     320 * 480    2倍iPhone4s   \n 320 * 480    2倍iPhone5\n     320 * 568    2倍iPhone6\n     375 * 667    2倍iPhone6plus\n 414 * 736    3倍iPhone6s    375\n * 667    2倍iPhone6splus\n 414 * 736    3倍 */\n/*Icon.png             –  57×57          iPhone (ios5/6) Icon@2x.png      – 114×114        iPhone Retina (ios5/6) \n\nIcon-72.png         – 72×72        iPad (ios5/6) Icon-72@2x.png  - 144×144     iPad Retina (ios5/6) \nIcon-60@2x.png  - 120x120     iphone & ipod touch (ios7/8) \nIcon-60@3x.png  - 180x180     iphone6 plus (ios8) \n\nIcon-76.png         - 76x76         ipad2 & ipad mini (ios7/8) \nIcon-76@2x.png - 152x152      ipad retina (ios7/8)*/","slug":"oc/iPhone尺寸","published":1,"updated":"2016-10-08T06:06:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98c003a21xw8qlngto6","content":"<a id=\"more\"></a>\n<p>/<em> 屏幕尺寸     物理pt     像素pxiPhone4     320 </em> 480    2倍iPhone4s<br> 320 <em> 480    2倍iPhone5<br>     320 </em> 568    2倍iPhone6<br>     375 <em> 667    2倍iPhone6plus<br> 414 </em> 736    3倍iPhone6s    375</p>\n<ul>\n<li>667    2倍iPhone6splus<br>414 <em> 736    3倍 </em>/<br>/*Icon.png             –  57×57          iPhone (ios5/6) Icon@2x.png      – 114×114        iPhone Retina (ios5/6) </li>\n</ul>\n<p>Icon-72.png         – 72×72        iPad (ios5/6) Icon-72@2x.png  - 144×144     iPad Retina (ios5/6)<br>Icon-60@2x.png  - 120x120     iphone &amp; ipod touch (ios7/8)<br>Icon-60@3x.png  - 180x180     iphone6 plus (ios8) </p>\n<p>Icon-76.png         - 76x76         ipad2 &amp; ipad mini (ios7/8)<br>Icon-76@2x.png - 152x152      ipad retina (ios7/8)*/</p>\n","excerpt":"","more":"<p>/<em> 屏幕尺寸     物理pt     像素pxiPhone4     320 </em> 480    2倍iPhone4s<br> 320 <em> 480    2倍iPhone5<br>     320 </em> 568    2倍iPhone6<br>     375 <em> 667    2倍iPhone6plus<br> 414 </em> 736    3倍iPhone6s    375</p>\n<ul>\n<li>667    2倍iPhone6splus<br>414 <em> 736    3倍 </em>/<br>/*Icon.png             –  57×57          iPhone (ios5/6) Icon@2x.png      – 114×114        iPhone Retina (ios5/6) </li>\n</ul>\n<p>Icon-72.png         – 72×72        iPad (ios5/6) Icon-72@2x.png  - 144×144     iPad Retina (ios5/6)<br>Icon-60@2x.png  - 120x120     iphone &amp; ipod touch (ios7/8)<br>Icon-60@3x.png  - 180x180     iphone6 plus (ios8) </p>\n<p>Icon-76.png         - 76x76         ipad2 &amp; ipad mini (ios7/8)<br>Icon-76@2x.png - 152x152      ipad retina (ios7/8)*/</p>"},{"title":"model归档","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n#import <Foundation/Foundation.h>\n\n#warning 归档第一步：让model签订NSCoding协议\n@interface Student : NSObject<NSCoding>\n\n@property(nonatomic,copy)NSString *name;\n@property(nonatomic,assign)NSInteger age;\n@property(nonatomic,copy)NSString *gender;\n@end\n\n\n#import \"Student.h\"\n\n@implementation Student\n\n#warning 归档第二步：对model属性进行编码\n-(void)encodeWithCoder:(NSCoder *)aCoder\n{\n    [aCoder encodeObject:self.name forKey:@\"name\"];\n    [aCoder encodeObject:self.gender forKey:@\"gender\"];\n    [aCoder encodeInteger:self.age forKey:@\"age\"];\n}\n#warning 归档第三步：对model进行解码\n-(id)initWithCoder:(NSCoder *)aDecoder\n{\n    self = [super init];\n    if (self) {\n        self.name =\n        [aDecoder decodeObjectForKey:@\"name\"];\n        self.gender =\n        [aDecoder decodeObjectForKey:@\"gender\"];\n        self.age =\n        [aDecoder decodeIntegerForKey:@\"age\"];\n    }\n    return self;\n}\n\n\n@end\n\n\n /***************写入model*************************/\n    //缓存自定义model模型数据\n    //需要使用iOS中归档/反归档，专门来存储model数据到本地\n   \n#warning 归档第四步：对model进行归档操作\n    Student *stu = [[Student alloc]init];\n    stu.name = @\"大水杯\";\n    stu.gender = @\"男\";\n    stu.age = 18;\n    NSString *archiverPath = [documentPath stringByAppendingPathComponent:@\"student\"];\n   \n    //归档类\n    BOOL result3 =\n    [NSKeyedArchiver archiveRootObject:stu toFile:archiverPath];\n   \n    if (result3) {\n        NSLog(@\"归档成功\");\n    }else\n    {\n        NSLog(@\"归档失败\");\n    }\n   \n    //反归档取出model数据\n    Student *stu1 = [NSKeyedUnarchiver unarchiveObjectWithFile:archiverPath];\n    NSLog(@\"name = %@ %@ %ld\",stu1.name,stu1.gender,stu1.age);\n    /***************写入model*************************/\n   \n```\n\n","source":"_posts/oc/model归档.md","raw":"---\ntitle: model归档\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n#import <Foundation/Foundation.h>\n\n#warning 归档第一步：让model签订NSCoding协议\n@interface Student : NSObject<NSCoding>\n\n@property(nonatomic,copy)NSString *name;\n@property(nonatomic,assign)NSInteger age;\n@property(nonatomic,copy)NSString *gender;\n@end\n\n\n#import \"Student.h\"\n\n@implementation Student\n\n#warning 归档第二步：对model属性进行编码\n-(void)encodeWithCoder:(NSCoder *)aCoder\n{\n    [aCoder encodeObject:self.name forKey:@\"name\"];\n    [aCoder encodeObject:self.gender forKey:@\"gender\"];\n    [aCoder encodeInteger:self.age forKey:@\"age\"];\n}\n#warning 归档第三步：对model进行解码\n-(id)initWithCoder:(NSCoder *)aDecoder\n{\n    self = [super init];\n    if (self) {\n        self.name =\n        [aDecoder decodeObjectForKey:@\"name\"];\n        self.gender =\n        [aDecoder decodeObjectForKey:@\"gender\"];\n        self.age =\n        [aDecoder decodeIntegerForKey:@\"age\"];\n    }\n    return self;\n}\n\n\n@end\n\n\n /***************写入model*************************/\n    //缓存自定义model模型数据\n    //需要使用iOS中归档/反归档，专门来存储model数据到本地\n   \n#warning 归档第四步：对model进行归档操作\n    Student *stu = [[Student alloc]init];\n    stu.name = @\"大水杯\";\n    stu.gender = @\"男\";\n    stu.age = 18;\n    NSString *archiverPath = [documentPath stringByAppendingPathComponent:@\"student\"];\n   \n    //归档类\n    BOOL result3 =\n    [NSKeyedArchiver archiveRootObject:stu toFile:archiverPath];\n   \n    if (result3) {\n        NSLog(@\"归档成功\");\n    }else\n    {\n        NSLog(@\"归档失败\");\n    }\n   \n    //反归档取出model数据\n    Student *stu1 = [NSKeyedUnarchiver unarchiveObjectWithFile:archiverPath];\n    NSLog(@\"name = %@ %@ %ld\",stu1.name,stu1.gender,stu1.age);\n    /***************写入model*************************/\n   \n```\n\n","slug":"oc/model归档","published":1,"updated":"2016-10-08T05:57:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98d003c21xwnanqe7b4","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#warning 归档第一步：让model签订NSCoding协议</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Student</span> : <span class=\"title\">NSObject</span>&lt;<span class=\"title\">NSCoding</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">copy</span>)<span class=\"built_in\">NSString</span> *name;</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">assign</span>)<span class=\"built_in\">NSInteger</span> age;</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">copy</span>)<span class=\"built_in\">NSString</span> *gender;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Student.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Student</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#warning 归档第二步：对model属性进行编码</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)aCoder</div><div class=\"line\">&#123;</div><div class=\"line\">    [aCoder encodeObject:<span class=\"keyword\">self</span>.name forKey:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\">    [aCoder encodeObject:<span class=\"keyword\">self</span>.gender forKey:<span class=\"string\">@\"gender\"</span>];</div><div class=\"line\">    [aCoder encodeInteger:<span class=\"keyword\">self</span>.age forKey:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#warning 归档第三步：对model进行解码</span></div><div class=\"line\">-(<span class=\"keyword\">id</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)aDecoder</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name =</div><div class=\"line\">        [aDecoder decodeObjectForKey:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\">        <span class=\"keyword\">self</span>.gender =</div><div class=\"line\">        [aDecoder decodeObjectForKey:<span class=\"string\">@\"gender\"</span>];</div><div class=\"line\">        <span class=\"keyword\">self</span>.age =</div><div class=\"line\">        [aDecoder decodeIntegerForKey:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">/***************写入model*************************/</span></div><div class=\"line\">    <span class=\"comment\">//缓存自定义model模型数据</span></div><div class=\"line\">    <span class=\"comment\">//需要使用iOS中归档/反归档，专门来存储model数据到本地</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#warning 归档第四步：对model进行归档操作</span></div><div class=\"line\">    Student *stu = [[Student alloc]init];</div><div class=\"line\">    stu.name = <span class=\"string\">@\"大水杯\"</span>;</div><div class=\"line\">    stu.gender = <span class=\"string\">@\"男\"</span>;</div><div class=\"line\">    stu.age = <span class=\"number\">18</span>;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *archiverPath = [documentPath stringByAppendingPathComponent:<span class=\"string\">@\"student\"</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//归档类</span></div><div class=\"line\">    <span class=\"built_in\">BOOL</span> result3 =</div><div class=\"line\">    [<span class=\"built_in\">NSKeyedArchiver</span> archiveRootObject:stu toFile:archiverPath];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">if</span> (result3) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"归档成功\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"归档失败\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//反归档取出model数据</span></div><div class=\"line\">    Student *stu1 = [<span class=\"built_in\">NSKeyedUnarchiver</span> unarchiveObjectWithFile:archiverPath];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"name = %@ %@ %ld\"</span>,stu1.name,stu1.gender,stu1.age);</div><div class=\"line\">    <span class=\"comment\">/***************写入model*************************/</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#warning 归档第一步：让model签订NSCoding协议</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Student</span> : <span class=\"title\">NSObject</span>&lt;<span class=\"title\">NSCoding</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">copy</span>)<span class=\"built_in\">NSString</span> *name;</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">assign</span>)<span class=\"built_in\">NSInteger</span> age;</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">copy</span>)<span class=\"built_in\">NSString</span> *gender;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"Student.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Student</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#warning 归档第二步：对model属性进行编码</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)aCoder</div><div class=\"line\">&#123;</div><div class=\"line\">    [aCoder encodeObject:<span class=\"keyword\">self</span>.name forKey:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\">    [aCoder encodeObject:<span class=\"keyword\">self</span>.gender forKey:<span class=\"string\">@\"gender\"</span>];</div><div class=\"line\">    [aCoder encodeInteger:<span class=\"keyword\">self</span>.age forKey:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#warning 归档第三步：对model进行解码</span></div><div class=\"line\">-(<span class=\"keyword\">id</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)aDecoder</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name =</div><div class=\"line\">        [aDecoder decodeObjectForKey:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\">        <span class=\"keyword\">self</span>.gender =</div><div class=\"line\">        [aDecoder decodeObjectForKey:<span class=\"string\">@\"gender\"</span>];</div><div class=\"line\">        <span class=\"keyword\">self</span>.age =</div><div class=\"line\">        [aDecoder decodeIntegerForKey:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">/***************写入model*************************/</span></div><div class=\"line\">    <span class=\"comment\">//缓存自定义model模型数据</span></div><div class=\"line\">    <span class=\"comment\">//需要使用iOS中归档/反归档，专门来存储model数据到本地</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"meta\">#warning 归档第四步：对model进行归档操作</span></div><div class=\"line\">    Student *stu = [[Student alloc]init];</div><div class=\"line\">    stu.name = <span class=\"string\">@\"大水杯\"</span>;</div><div class=\"line\">    stu.gender = <span class=\"string\">@\"男\"</span>;</div><div class=\"line\">    stu.age = <span class=\"number\">18</span>;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *archiverPath = [documentPath stringByAppendingPathComponent:<span class=\"string\">@\"student\"</span>];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//归档类</span></div><div class=\"line\">    <span class=\"built_in\">BOOL</span> result3 =</div><div class=\"line\">    [<span class=\"built_in\">NSKeyedArchiver</span> archiveRootObject:stu toFile:archiverPath];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">if</span> (result3) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"归档成功\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"归档失败\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//反归档取出model数据</span></div><div class=\"line\">    Student *stu1 = [<span class=\"built_in\">NSKeyedUnarchiver</span> unarchiveObjectWithFile:archiverPath];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"name = %@ %@ %ld\"</span>,stu1.name,stu1.gender,stu1.age);</div><div class=\"line\">    <span class=\"comment\">/***************写入model*************************/</span></div></pre></td></tr></table></figure>"},{"title":"oc 播放gif动画","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n// 设定位置和大小\n    CGRect frame = CGRectMake(50,50,0,0);\n    frame.size = [UIImage imageNamed:@\"load.gif\"].size;\n    // 读取gif图片数据\n    NSData *gif = [NSData dataWithContentsOfFile: [[NSBundle mainBundle] pathForResource:@\"load\" ofType:@\"gif\"]];\n    // view生成\n    UIWebView *webView = [[UIWebView alloc] initWithFrame:frame];\n    webView.userInteractionEnabled = NO;//用户不可交互\n    [webView loadData:gif MIMEType:@\"image/gif\" textEncodingName:nil baseURL:nil];\n    [self.view addSubview:webView];\n```\n\n","source":"_posts/oc/oc 播放gif动画.md","raw":"---\ntitle: oc 播放gif动画\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n// 设定位置和大小\n    CGRect frame = CGRectMake(50,50,0,0);\n    frame.size = [UIImage imageNamed:@\"load.gif\"].size;\n    // 读取gif图片数据\n    NSData *gif = [NSData dataWithContentsOfFile: [[NSBundle mainBundle] pathForResource:@\"load\" ofType:@\"gif\"]];\n    // view生成\n    UIWebView *webView = [[UIWebView alloc] initWithFrame:frame];\n    webView.userInteractionEnabled = NO;//用户不可交互\n    [webView loadData:gif MIMEType:@\"image/gif\" textEncodingName:nil baseURL:nil];\n    [self.view addSubview:webView];\n```\n\n","slug":"oc/oc 播放gif动画","published":1,"updated":"2016-10-08T09:09:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98f003e21xwf64nngrj","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设定位置和大小</span></div><div class=\"line\">    <span class=\"built_in\">CGRect</span> frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</div><div class=\"line\">    frame.size = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"load.gif\"</span>].size;</div><div class=\"line\">    <span class=\"comment\">// 读取gif图片数据</span></div><div class=\"line\">    <span class=\"built_in\">NSData</span> *gif = [<span class=\"built_in\">NSData</span> dataWithContentsOfFile: [[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"load\"</span> ofType:<span class=\"string\">@\"gif\"</span>]];</div><div class=\"line\">    <span class=\"comment\">// view生成</span></div><div class=\"line\">    <span class=\"built_in\">UIWebView</span> *webView = [[<span class=\"built_in\">UIWebView</span> alloc] initWithFrame:frame];</div><div class=\"line\">    webView.userInteractionEnabled = <span class=\"literal\">NO</span>;<span class=\"comment\">//用户不可交互</span></div><div class=\"line\">    [webView loadData:gif MIMEType:<span class=\"string\">@\"image/gif\"</span> textEncodingName:<span class=\"literal\">nil</span> baseURL:<span class=\"literal\">nil</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:webView];</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设定位置和大小</span></div><div class=\"line\">    <span class=\"built_in\">CGRect</span> frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">50</span>,<span class=\"number\">50</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</div><div class=\"line\">    frame.size = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"load.gif\"</span>].size;</div><div class=\"line\">    <span class=\"comment\">// 读取gif图片数据</span></div><div class=\"line\">    <span class=\"built_in\">NSData</span> *gif = [<span class=\"built_in\">NSData</span> dataWithContentsOfFile: [[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"load\"</span> ofType:<span class=\"string\">@\"gif\"</span>]];</div><div class=\"line\">    <span class=\"comment\">// view生成</span></div><div class=\"line\">    <span class=\"built_in\">UIWebView</span> *webView = [[<span class=\"built_in\">UIWebView</span> alloc] initWithFrame:frame];</div><div class=\"line\">    webView.userInteractionEnabled = <span class=\"literal\">NO</span>;<span class=\"comment\">//用户不可交互</span></div><div class=\"line\">    [webView loadData:gif MIMEType:<span class=\"string\">@\"image/gif\"</span> textEncodingName:<span class=\"literal\">nil</span> baseURL:<span class=\"literal\">nil</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:webView];</div></pre></td></tr></table></figure>"},{"title":"runtime 运行时机制 完全解读","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n我们前面已经讲过一篇runtime 原理，现在这篇文章主要介绍的是runtime是什么以及怎么用！希望对读者有所帮助！\n首先，第一个问题， \n1》runtime实现的机制是什么,怎么用，一般用于干嘛？ \n这个问题我就不跟大家绕弯子了，直接告诉大家， \nruntime是一套比较底层的纯C语言API, 属于1个C语言库, 包含了很多底层的C语言API。 \n在我们平时编写的OC代码中, 程序运行过程时, 其实最终都是转成了runtime的C语言代码, runtime算是OC的幕后工作者 \n比如说，下面一个创建对象的方法中， \n举例: \nOC : \n[[MJPerson alloc] init] \nruntime : \nobjc_msgSend(objc_msgSend(“MJPerson” , “alloc”), “init”)\n第二个问题 \nruntime 用来干什么呢？？用在那些地方呢？怎么用呢？ \nruntime是属于OC的底层, 可以进行一些非常底层的操作(用OC是无法现实的, 不好实现)\n- 在程序运行过程中, 动态创建一个类(比如KVO的底层实现)\n\n- 在程序运行过程中, 动态地为某个类添加属性\\方法, 修改属性值\\方法\n\n- 遍历一个类的所有成员变量(属性)\\所有方法 \n例如：我们需要对一个类的属性进行归档解档的时候属性特别的多，这时候，我们就会写很多对应的代码，但是如果使用了runtime就可以动态设置！ \n例如，PYPerson.h的文件如下所示\n#import \n\n\n[@interface](http://my.oschina.net/u/996807) PYPerson : NSObject \n@property (nonatomic, assign) int age; \n@property (nonatomic, assign) int height; \n@property (nonatomic, copy) NSString *name; \n@property (nonatomic, assign) int age2; \n@property (nonatomic, assign) int height2; \n@property (nonatomic, assign) int age3; \n@property (nonatomic, assign) int height3; \n@property (nonatomic, assign) int age4; \n@property (nonatomic, assign) int height4;\n[@end](http://my.oschina.net/u/567204)\n而PYPerson.m实现文件的内容如下\n\t*<!-- lang: cpp -->*\n\t#import \"PYPerson.h\"\n\t\n\n#import \n@implementation PYPerson\n- (void)encodeWithCoder:(NSCoder )encoder \n{ \nunsigned int count = 0; \nIvar ivars = class_copyIvarList([PYPerson class], &count);\nfor (int i = 0; i<count; i++) {\n\t*// 取出i位置对应的成员变量*\n\tIvar ivar = ivars[i];\n\t\n\t*// 查看成员变量*\n\tconst char *name = ivar_getName(ivar);\n\t\n\t*// 归档*\n\tNSString *key = [NSString stringWithUTF8String:name];\n\tid value = [self valueForKey:key];\n\t[encoder encodeObject:value forKey:key];\n\t\n\n}\nfree(ivars); \n}\n\n- (id)initWithCoder:(NSCoder *)decoder \n{ \nif (self = [super init]) {\n\tunsigned int count = 0;\n\tIvar *ivars = class_copyIvarList([PYPerson class], &count);\n\t\n\tfor (int i = 0; i<count; i++) {\n\t    *// 取出i位置对应的成员变量*\n\t    Ivar ivar = ivars[i];\n\t\n\t    *// 查看成员变量*\n\t    const char *name = ivar_getName(ivar);\n\t\n\t    *// 归档*\n\t    NSString *key = [NSString stringWithUTF8String:name];\n\t    id value = [decoder decodeObjectForKey:key];\n\t\n\t    *// 设置到成员变量身上*\n\t    [self setValue:value forKey:key];\n\t}\n\t\n\tfree(ivars);\n\t\n\n} \nreturn self; \n}\n\n\n[@end](http://my.oschina.net/u/567204)\n这样我们可以看到归档和解档的案例其实是runtime写下的\n学习，runtime机制首先要了解下面几个问题 \n1相关的头文件和函数 \n1> 头文件\n- \n利用头文件，我们可以查看到runtime中的各个方法！ \n\n2> 相关应用\n- NSCoding(归档和解档, 利用runtime遍历模型对象的所有属性)\n- 字典 –> 模型 (利用runtime遍历模型对象的所有属性, 根据属性名从字典中取出对应的值, 设置到模型的属性上)\n- KVO(利用runtime动态产生一个类)\n- 用于封装框架(想怎么改就怎么改) \n这就是我们runtime机制的只要运用方向\n\n3> 相关函数\n- objc_msgSend : 给对象发送消息\n- class_copyMethodList : 遍历某个类所有的方法\n- class_copyIvarList : 遍历某个类所有的成员变量\n- class_….. \n这是我们学习runtime必须知道的函数！\n\n4.必备常识 \n1> Ivar : 成员变量 \n2> Method : 成员方法 \n从上面例子中我们看到我们定义的成员变量，如果要是动态创建方法，可以使用Method，\n也许，看到这里，你是否对runtime有了更深入的了解呢？在这里，希望我们大家相互交流！有什么错误之处，还请指正 \n\nRunTime简称运行时。就是系统在运行的时候的一些机制，其中最主要的是消息机制。对于C语言，函数的调用在编译的时候会决定调用哪个函数（ C语言的函数调用请看这里 ）。编译完成之后直接顺序执行，无任何二义性。OC的函数调用成为消息发送。属于动态调用过程。在编译的时候并不能决定真正调用哪个函数（事实证明，在编 译阶段，OC可以调用任何函数，即使这个函数并未实现，只要申明过就不会报错。而C语言在编译阶段就会报错）。只有在真正运行的时候才会根据函数的名称找 到对应的函数来调用。\n那OC是怎么实现动态调用的呢？下面我们来看看OC通过发送消息来达到动态调用的秘密。假如在OC中写了这样的一个代码：\n1`[obj makeText];`其中obj是一个对象，makeText是一个函数名称。对于这样一个简单的调用。在编译时RunTime会将上述代码转化成\n1`objc_msgSend(obj,@selector(makeText));`首先我们来看看obj这个对象，iOS中的obj都继承于NSObject。\n123`@interface NSObject <nsobject> {``    ``Class isa  OBJC_ISA_AVAILABILITY;``}</nsobject>`在NSObjcet中存在一个Class的isa指针。然后我们看看Class：\n1234567891011121314`typedef struct objc_class *Class;``struct objc_class {``  ``Class isa; ``// 指向metaclass``  ` `  ``Class super_class ; ``// 指向其父类``  ``const char *name ; ``// 类名``  ``long version ; ``// 类的版本信息，初始化默认为0，可以通过runtime函数class_setVersion和class_getVersion进行修改、读取``  ``long info; ``// 一些标识信息,如CLS_CLASS (0x1L) 表示该类为普通 class ，其中包含对象方法和成员变量;CLS_META (0x2L) 表示该类为 metaclass，其中包含类方法;``  ``long instance_size ; ``// 该类的实例变量大小(包括从父类继承下来的实例变量);``  ``struct objc_ivar_list *ivars; ``// 用于存储每个成员变量的地址``  ``struct objc_method_list **methodLists ; ``// 与 info 的一些标志位有关,如CLS_CLASS (0x1L),则存储对象方法，如CLS_META (0x2L)，则存储类方法;``  ``struct objc_cache *cache; ``// 指向最近使用的方法的指针，用于提升效率；``  ``struct objc_protocol_list *protocols; ``// 存储该类遵守的协议``    ``}`\n\n我们可以看到，对于一个Class类中，存在很多东西，下面我来一一解释一下：\nClass isa：指向metaclass，也就是静态的Class。一般一个Obj对象中的isa会指向普通的Class，这个Class中存储普通成员变量和对 象方法（“-”开头的方法），普通Class中的isa指针指向静态Class，静态Class中存储static类型成员变量和类方法（“+”开头的方 法）。\nClass super_class:指向父类，如果这个类是根类，则为NULL。\n下面一张图片很好的描述了类和对象的继承关系：\n![iuqQFnm.png](cid:f919a9e0f1d396baac9ed7f8fdc4a3be \"1413628797629491.png\")\n**注意**：所有metaclass中isa指针都指向跟metaclass。而跟metaclass则指向自身。Root metaclass是通过继承Root class产生的。与root class结构体成员一致，也就是前面提到的结构。不同的是Root metaclass的isa指针指向自身。\nClass类中其他的成员这里就先不做过多解释了，下面我们来看看：\n**@selector (makeText)**：这是一个SEL方法选择器。SEL其主要作用是快速的通过方法名字（makeText）查找到对应方法的函数指针，然后调用其函 数。SEL其本身是一个Int类型的一个地址，地址中存放着方法的名字。对于一个类中。每一个方法对应着一个SEL。所以iOS类中不能存在2个名称相同 的方法，即使参数类型不同，因为SEL是根据方法名字生成的，相同的方法名称只能对应一个SEL。\n下面我们就来看看具体消息发送之后是怎么来动态查找对应的方法的。\n\n首先，编译器将代码[obj makeText];转化为objc_msgSend(obj, @selector (makeText));，在objc_msgSend函数中。首先通过obj的isa指针找到obj对应的class。在Class中先去cache中 通过SEL查找对应函数method（猜测cache中method列表是以SEL为key通过hash表来存储的，这样能提高函数查找速度），若 cache中未找到。再去methodList中查找，若methodlist中未找到，则取superClass中查找。若能找到，则将method加\n 入到cache中，以方便下次查找，并通过method中的函数指针跳转到对应的函数中去执行。 \n\n","source":"_posts/oc/runtime 运行时机制 完全解读.md","raw":"---\ntitle: runtime 运行时机制 完全解读\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n我们前面已经讲过一篇runtime 原理，现在这篇文章主要介绍的是runtime是什么以及怎么用！希望对读者有所帮助！\n首先，第一个问题， \n1》runtime实现的机制是什么,怎么用，一般用于干嘛？ \n这个问题我就不跟大家绕弯子了，直接告诉大家， \nruntime是一套比较底层的纯C语言API, 属于1个C语言库, 包含了很多底层的C语言API。 \n在我们平时编写的OC代码中, 程序运行过程时, 其实最终都是转成了runtime的C语言代码, runtime算是OC的幕后工作者 \n比如说，下面一个创建对象的方法中， \n举例: \nOC : \n[[MJPerson alloc] init] \nruntime : \nobjc_msgSend(objc_msgSend(“MJPerson” , “alloc”), “init”)\n第二个问题 \nruntime 用来干什么呢？？用在那些地方呢？怎么用呢？ \nruntime是属于OC的底层, 可以进行一些非常底层的操作(用OC是无法现实的, 不好实现)\n- 在程序运行过程中, 动态创建一个类(比如KVO的底层实现)\n\n- 在程序运行过程中, 动态地为某个类添加属性\\方法, 修改属性值\\方法\n\n- 遍历一个类的所有成员变量(属性)\\所有方法 \n例如：我们需要对一个类的属性进行归档解档的时候属性特别的多，这时候，我们就会写很多对应的代码，但是如果使用了runtime就可以动态设置！ \n例如，PYPerson.h的文件如下所示\n#import \n\n\n[@interface](http://my.oschina.net/u/996807) PYPerson : NSObject \n@property (nonatomic, assign) int age; \n@property (nonatomic, assign) int height; \n@property (nonatomic, copy) NSString *name; \n@property (nonatomic, assign) int age2; \n@property (nonatomic, assign) int height2; \n@property (nonatomic, assign) int age3; \n@property (nonatomic, assign) int height3; \n@property (nonatomic, assign) int age4; \n@property (nonatomic, assign) int height4;\n[@end](http://my.oschina.net/u/567204)\n而PYPerson.m实现文件的内容如下\n\t*<!-- lang: cpp -->*\n\t#import \"PYPerson.h\"\n\t\n\n#import \n@implementation PYPerson\n- (void)encodeWithCoder:(NSCoder )encoder \n{ \nunsigned int count = 0; \nIvar ivars = class_copyIvarList([PYPerson class], &count);\nfor (int i = 0; i<count; i++) {\n\t*// 取出i位置对应的成员变量*\n\tIvar ivar = ivars[i];\n\t\n\t*// 查看成员变量*\n\tconst char *name = ivar_getName(ivar);\n\t\n\t*// 归档*\n\tNSString *key = [NSString stringWithUTF8String:name];\n\tid value = [self valueForKey:key];\n\t[encoder encodeObject:value forKey:key];\n\t\n\n}\nfree(ivars); \n}\n\n- (id)initWithCoder:(NSCoder *)decoder \n{ \nif (self = [super init]) {\n\tunsigned int count = 0;\n\tIvar *ivars = class_copyIvarList([PYPerson class], &count);\n\t\n\tfor (int i = 0; i<count; i++) {\n\t    *// 取出i位置对应的成员变量*\n\t    Ivar ivar = ivars[i];\n\t\n\t    *// 查看成员变量*\n\t    const char *name = ivar_getName(ivar);\n\t\n\t    *// 归档*\n\t    NSString *key = [NSString stringWithUTF8String:name];\n\t    id value = [decoder decodeObjectForKey:key];\n\t\n\t    *// 设置到成员变量身上*\n\t    [self setValue:value forKey:key];\n\t}\n\t\n\tfree(ivars);\n\t\n\n} \nreturn self; \n}\n\n\n[@end](http://my.oschina.net/u/567204)\n这样我们可以看到归档和解档的案例其实是runtime写下的\n学习，runtime机制首先要了解下面几个问题 \n1相关的头文件和函数 \n1> 头文件\n- \n利用头文件，我们可以查看到runtime中的各个方法！ \n\n2> 相关应用\n- NSCoding(归档和解档, 利用runtime遍历模型对象的所有属性)\n- 字典 –> 模型 (利用runtime遍历模型对象的所有属性, 根据属性名从字典中取出对应的值, 设置到模型的属性上)\n- KVO(利用runtime动态产生一个类)\n- 用于封装框架(想怎么改就怎么改) \n这就是我们runtime机制的只要运用方向\n\n3> 相关函数\n- objc_msgSend : 给对象发送消息\n- class_copyMethodList : 遍历某个类所有的方法\n- class_copyIvarList : 遍历某个类所有的成员变量\n- class_….. \n这是我们学习runtime必须知道的函数！\n\n4.必备常识 \n1> Ivar : 成员变量 \n2> Method : 成员方法 \n从上面例子中我们看到我们定义的成员变量，如果要是动态创建方法，可以使用Method，\n也许，看到这里，你是否对runtime有了更深入的了解呢？在这里，希望我们大家相互交流！有什么错误之处，还请指正 \n\nRunTime简称运行时。就是系统在运行的时候的一些机制，其中最主要的是消息机制。对于C语言，函数的调用在编译的时候会决定调用哪个函数（ C语言的函数调用请看这里 ）。编译完成之后直接顺序执行，无任何二义性。OC的函数调用成为消息发送。属于动态调用过程。在编译的时候并不能决定真正调用哪个函数（事实证明，在编 译阶段，OC可以调用任何函数，即使这个函数并未实现，只要申明过就不会报错。而C语言在编译阶段就会报错）。只有在真正运行的时候才会根据函数的名称找 到对应的函数来调用。\n那OC是怎么实现动态调用的呢？下面我们来看看OC通过发送消息来达到动态调用的秘密。假如在OC中写了这样的一个代码：\n1`[obj makeText];`其中obj是一个对象，makeText是一个函数名称。对于这样一个简单的调用。在编译时RunTime会将上述代码转化成\n1`objc_msgSend(obj,@selector(makeText));`首先我们来看看obj这个对象，iOS中的obj都继承于NSObject。\n123`@interface NSObject <nsobject> {``    ``Class isa  OBJC_ISA_AVAILABILITY;``}</nsobject>`在NSObjcet中存在一个Class的isa指针。然后我们看看Class：\n1234567891011121314`typedef struct objc_class *Class;``struct objc_class {``  ``Class isa; ``// 指向metaclass``  ` `  ``Class super_class ; ``// 指向其父类``  ``const char *name ; ``// 类名``  ``long version ; ``// 类的版本信息，初始化默认为0，可以通过runtime函数class_setVersion和class_getVersion进行修改、读取``  ``long info; ``// 一些标识信息,如CLS_CLASS (0x1L) 表示该类为普通 class ，其中包含对象方法和成员变量;CLS_META (0x2L) 表示该类为 metaclass，其中包含类方法;``  ``long instance_size ; ``// 该类的实例变量大小(包括从父类继承下来的实例变量);``  ``struct objc_ivar_list *ivars; ``// 用于存储每个成员变量的地址``  ``struct objc_method_list **methodLists ; ``// 与 info 的一些标志位有关,如CLS_CLASS (0x1L),则存储对象方法，如CLS_META (0x2L)，则存储类方法;``  ``struct objc_cache *cache; ``// 指向最近使用的方法的指针，用于提升效率；``  ``struct objc_protocol_list *protocols; ``// 存储该类遵守的协议``    ``}`\n\n我们可以看到，对于一个Class类中，存在很多东西，下面我来一一解释一下：\nClass isa：指向metaclass，也就是静态的Class。一般一个Obj对象中的isa会指向普通的Class，这个Class中存储普通成员变量和对 象方法（“-”开头的方法），普通Class中的isa指针指向静态Class，静态Class中存储static类型成员变量和类方法（“+”开头的方 法）。\nClass super_class:指向父类，如果这个类是根类，则为NULL。\n下面一张图片很好的描述了类和对象的继承关系：\n![iuqQFnm.png](cid:f919a9e0f1d396baac9ed7f8fdc4a3be \"1413628797629491.png\")\n**注意**：所有metaclass中isa指针都指向跟metaclass。而跟metaclass则指向自身。Root metaclass是通过继承Root class产生的。与root class结构体成员一致，也就是前面提到的结构。不同的是Root metaclass的isa指针指向自身。\nClass类中其他的成员这里就先不做过多解释了，下面我们来看看：\n**@selector (makeText)**：这是一个SEL方法选择器。SEL其主要作用是快速的通过方法名字（makeText）查找到对应方法的函数指针，然后调用其函 数。SEL其本身是一个Int类型的一个地址，地址中存放着方法的名字。对于一个类中。每一个方法对应着一个SEL。所以iOS类中不能存在2个名称相同 的方法，即使参数类型不同，因为SEL是根据方法名字生成的，相同的方法名称只能对应一个SEL。\n下面我们就来看看具体消息发送之后是怎么来动态查找对应的方法的。\n\n首先，编译器将代码[obj makeText];转化为objc_msgSend(obj, @selector (makeText));，在objc_msgSend函数中。首先通过obj的isa指针找到obj对应的class。在Class中先去cache中 通过SEL查找对应函数method（猜测cache中method列表是以SEL为key通过hash表来存储的，这样能提高函数查找速度），若 cache中未找到。再去methodList中查找，若methodlist中未找到，则取superClass中查找。若能找到，则将method加\n 入到cache中，以方便下次查找，并通过method中的函数指针跳转到对应的函数中去执行。 \n\n","slug":"oc/runtime 运行时机制 完全解读","published":1,"updated":"2016-10-08T09:12:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98g003g21xwoe02kctq","content":"<a id=\"more\"></a>\n<p>我们前面已经讲过一篇runtime 原理，现在这篇文章主要介绍的是runtime是什么以及怎么用！希望对读者有所帮助！<br>首先，第一个问题，<br>1》runtime实现的机制是什么,怎么用，一般用于干嘛？<br>这个问题我就不跟大家绕弯子了，直接告诉大家，<br>runtime是一套比较底层的纯C语言API, 属于1个C语言库, 包含了很多底层的C语言API。<br>在我们平时编写的OC代码中, 程序运行过程时, 其实最终都是转成了runtime的C语言代码, runtime算是OC的幕后工作者<br>比如说，下面一个创建对象的方法中，<br>举例:<br>OC :<br>[[MJPerson alloc] init]<br>runtime :<br>objc_msgSend(objc_msgSend(“MJPerson” , “alloc”), “init”)<br>第二个问题<br>runtime 用来干什么呢？？用在那些地方呢？怎么用呢？<br>runtime是属于OC的底层, 可以进行一些非常底层的操作(用OC是无法现实的, 不好实现)</p>\n<ul>\n<li><p>在程序运行过程中, 动态创建一个类(比如KVO的底层实现)</p>\n</li>\n<li><p>在程序运行过程中, 动态地为某个类添加属性\\方法, 修改属性值\\方法</p>\n</li>\n<li><p>遍历一个类的所有成员变量(属性)\\所有方法<br>例如：我们需要对一个类的属性进行归档解档的时候属性特别的多，这时候，我们就会写很多对应的代码，但是如果使用了runtime就可以动态设置！<br>例如，PYPerson.h的文件如下所示<br>#import </p>\n</li>\n</ul>\n<p><a href=\"http://my.oschina.net/u/996807\" target=\"_blank\" rel=\"external\">@interface</a> PYPerson : NSObject<br>@property (nonatomic, assign) int age;<br>@property (nonatomic, assign) int height;<br>@property (nonatomic, copy) NSString <em>name;<br>@property (nonatomic, assign) int age2;<br>@property (nonatomic, assign) int height2;<br>@property (nonatomic, assign) int age3;<br>@property (nonatomic, assign) int height3;<br>@property (nonatomic, assign) int age4;<br>@property (nonatomic, assign) int height4;<br><a href=\"http://my.oschina.net/u/567204\" target=\"_blank\" rel=\"external\">@end</a><br>而PYPerson.m实现文件的内容如下\n    </em><!-- lang: cpp -->*</p>\n<pre><code>#import &quot;PYPerson.h&quot;\n</code></pre><p>#import<br>@implementation PYPerson</p>\n<ul>\n<li><p>(void)encodeWithCoder:(NSCoder )encoder<br>{<br>unsigned int count = 0;<br>Ivar ivars = class_copyIvarList([PYPerson class], &amp;count);<br>for (int i = 0; i&lt;count; i++) {<br>  <em>// 取出i位置对应的成员变量</em><br>  Ivar ivar = ivars[i];</p>\n<p>  <em>// 查看成员变量</em><br>  const char *name = ivar_getName(ivar);</p>\n<p>  <em>// 归档</em><br>  NSString *key = [NSString stringWithUTF8String:name];<br>  id value = [self valueForKey:key];<br>  [encoder encodeObject:value forKey:key];</p>\n</li>\n</ul>\n<p>}<br>free(ivars);<br>}</p>\n<ul>\n<li><p>(id)initWithCoder:(NSCoder <em>)decoder<br>{<br>if (self = [super init]) {<br>  unsigned int count = 0;<br>  Ivar </em>ivars = class_copyIvarList([PYPerson class], &amp;count);</p>\n<p>  for (int i = 0; i&lt;count; i++) {</p>\n<pre><code>*// 取出i位置对应的成员变量*\nIvar ivar = ivars[i];\n\n*// 查看成员变量*\nconst char *name = ivar_getName(ivar);\n\n*// 归档*\nNSString *key = [NSString stringWithUTF8String:name];\nid value = [decoder decodeObjectForKey:key];\n\n*// 设置到成员变量身上*\n[self setValue:value forKey:key];\n</code></pre><p>  }</p>\n<p>  free(ivars);</p>\n</li>\n</ul>\n<p>}<br>return self;<br>}</p>\n<p><a href=\"http://my.oschina.net/u/567204\" target=\"_blank\" rel=\"external\">@end</a><br>这样我们可以看到归档和解档的案例其实是runtime写下的<br>学习，runtime机制首先要了解下面几个问题<br>1相关的头文件和函数<br>1&gt; 头文件</p>\n<ul>\n<li>利用头文件，我们可以查看到runtime中的各个方法！ </li>\n</ul>\n<p>2&gt; 相关应用</p>\n<ul>\n<li>NSCoding(归档和解档, 利用runtime遍历模型对象的所有属性)</li>\n<li>字典 –&gt; 模型 (利用runtime遍历模型对象的所有属性, 根据属性名从字典中取出对应的值, 设置到模型的属性上)</li>\n<li>KVO(利用runtime动态产生一个类)</li>\n<li>用于封装框架(想怎么改就怎么改)<br>这就是我们runtime机制的只要运用方向</li>\n</ul>\n<p>3&gt; 相关函数</p>\n<ul>\n<li>objc_msgSend : 给对象发送消息</li>\n<li>class_copyMethodList : 遍历某个类所有的方法</li>\n<li>class_copyIvarList : 遍历某个类所有的成员变量</li>\n<li>class_…..<br>这是我们学习runtime必须知道的函数！</li>\n</ul>\n<p>4.必备常识<br>1&gt; Ivar : 成员变量<br>2&gt; Method : 成员方法<br>从上面例子中我们看到我们定义的成员变量，如果要是动态创建方法，可以使用Method，<br>也许，看到这里，你是否对runtime有了更深入的了解呢？在这里，希望我们大家相互交流！有什么错误之处，还请指正 </p>\n<p>RunTime简称运行时。就是系统在运行的时候的一些机制，其中最主要的是消息机制。对于C语言，函数的调用在编译的时候会决定调用哪个函数（ C语言的函数调用请看这里 ）。编译完成之后直接顺序执行，无任何二义性。OC的函数调用成为消息发送。属于动态调用过程。在编译的时候并不能决定真正调用哪个函数（事实证明，在编 译阶段，OC可以调用任何函数，即使这个函数并未实现，只要申明过就不会报错。而C语言在编译阶段就会报错）。只有在真正运行的时候才会根据函数的名称找 到对应的函数来调用。<br>那OC是怎么实现动态调用的呢？下面我们来看看OC通过发送消息来达到动态调用的秘密。假如在OC中写了这样的一个代码：<br>1<code>[obj makeText];</code>其中obj是一个对象，makeText是一个函数名称。对于这样一个简单的调用。在编译时RunTime会将上述代码转化成<br>1<code>objc_msgSend(obj,@selector(makeText));</code>首先我们来看看obj这个对象，iOS中的obj都继承于NSObject。<br>123<code>@interface NSObject &lt;nsobject&gt; {``    ``Class isa  OBJC_ISA_AVAILABILITY;``}&lt;/nsobject&gt;</code>在NSObjcet中存在一个Class的isa指针。然后我们看看Class：<br>1234567891011121314<code>typedef struct objc_class *Class;``struct objc_class {``  ``Class isa; ``// 指向metaclass`` </code> <code>``Class super_class ; ``// 指向其父类``  ``const char *name ; ``// 类名``  ``long version ; ``// 类的版本信息，初始化默认为0，可以通过runtime函数class_setVersion和class_getVersion进行修改、读取``  ``long info; ``// 一些标识信息,如CLS_CLASS (0x1L) 表示该类为普通 class ，其中包含对象方法和成员变量;CLS_META (0x2L) 表示该类为 metaclass，其中包含类方法;``  ``long instance_size ; ``// 该类的实例变量大小(包括从父类继承下来的实例变量);``  ``struct objc_ivar_list *ivars; ``// 用于存储每个成员变量的地址``  ``struct objc_method_list **methodLists ; ``// 与 info 的一些标志位有关,如CLS_CLASS (0x1L),则存储对象方法，如CLS_META (0x2L)，则存储类方法;``  ``struct objc_cache *cache; ``// 指向最近使用的方法的指针，用于提升效率；``  ``struct objc_protocol_list *protocols; ``// 存储该类遵守的协议``    ``}</code></p>\n<p>我们可以看到，对于一个Class类中，存在很多东西，下面我来一一解释一下：<br>Class isa：指向metaclass，也就是静态的Class。一般一个Obj对象中的isa会指向普通的Class，这个Class中存储普通成员变量和对 象方法（“-”开头的方法），普通Class中的isa指针指向静态Class，静态Class中存储static类型成员变量和类方法（“+”开头的方 法）。<br>Class super_class:指向父类，如果这个类是根类，则为NULL。<br>下面一张图片很好的描述了类和对象的继承关系：<br><img src=\"cid:f919a9e0f1d396baac9ed7f8fdc4a3be\" alt=\"iuqQFnm.png\" title=\"1413628797629491.png\"><br><strong>注意</strong>：所有metaclass中isa指针都指向跟metaclass。而跟metaclass则指向自身。Root metaclass是通过继承Root class产生的。与root class结构体成员一致，也就是前面提到的结构。不同的是Root metaclass的isa指针指向自身。<br>Class类中其他的成员这里就先不做过多解释了，下面我们来看看：<br><strong>@selector (makeText)</strong>：这是一个SEL方法选择器。SEL其主要作用是快速的通过方法名字（makeText）查找到对应方法的函数指针，然后调用其函 数。SEL其本身是一个Int类型的一个地址，地址中存放着方法的名字。对于一个类中。每一个方法对应着一个SEL。所以iOS类中不能存在2个名称相同 的方法，即使参数类型不同，因为SEL是根据方法名字生成的，相同的方法名称只能对应一个SEL。<br>下面我们就来看看具体消息发送之后是怎么来动态查找对应的方法的。</p>\n<p>首先，编译器将代码[obj makeText];转化为objc_msgSend(obj, @selector (makeText));，在objc_msgSend函数中。首先通过obj的isa指针找到obj对应的class。在Class中先去cache中 通过SEL查找对应函数method（猜测cache中method列表是以SEL为key通过hash表来存储的，这样能提高函数查找速度），若 cache中未找到。再去methodList中查找，若methodlist中未找到，则取superClass中查找。若能找到，则将method加<br> 入到cache中，以方便下次查找，并通过method中的函数指针跳转到对应的函数中去执行。 </p>\n","excerpt":"","more":"<p>我们前面已经讲过一篇runtime 原理，现在这篇文章主要介绍的是runtime是什么以及怎么用！希望对读者有所帮助！<br>首先，第一个问题，<br>1》runtime实现的机制是什么,怎么用，一般用于干嘛？<br>这个问题我就不跟大家绕弯子了，直接告诉大家，<br>runtime是一套比较底层的纯C语言API, 属于1个C语言库, 包含了很多底层的C语言API。<br>在我们平时编写的OC代码中, 程序运行过程时, 其实最终都是转成了runtime的C语言代码, runtime算是OC的幕后工作者<br>比如说，下面一个创建对象的方法中，<br>举例:<br>OC :<br>[[MJPerson alloc] init]<br>runtime :<br>objc_msgSend(objc_msgSend(“MJPerson” , “alloc”), “init”)<br>第二个问题<br>runtime 用来干什么呢？？用在那些地方呢？怎么用呢？<br>runtime是属于OC的底层, 可以进行一些非常底层的操作(用OC是无法现实的, 不好实现)</p>\n<ul>\n<li><p>在程序运行过程中, 动态创建一个类(比如KVO的底层实现)</p>\n</li>\n<li><p>在程序运行过程中, 动态地为某个类添加属性\\方法, 修改属性值\\方法</p>\n</li>\n<li><p>遍历一个类的所有成员变量(属性)\\所有方法<br>例如：我们需要对一个类的属性进行归档解档的时候属性特别的多，这时候，我们就会写很多对应的代码，但是如果使用了runtime就可以动态设置！<br>例如，PYPerson.h的文件如下所示<br>#import </p>\n</li>\n</ul>\n<p><a href=\"http://my.oschina.net/u/996807\">@interface</a> PYPerson : NSObject<br>@property (nonatomic, assign) int age;<br>@property (nonatomic, assign) int height;<br>@property (nonatomic, copy) NSString <em>name;<br>@property (nonatomic, assign) int age2;<br>@property (nonatomic, assign) int height2;<br>@property (nonatomic, assign) int age3;<br>@property (nonatomic, assign) int height3;<br>@property (nonatomic, assign) int age4;<br>@property (nonatomic, assign) int height4;<br><a href=\"http://my.oschina.net/u/567204\">@end</a><br>而PYPerson.m实现文件的内容如下\n    </em><!-- lang: cpp -->*</p>\n<pre><code>#import &quot;PYPerson.h&quot;\n</code></pre><p>#import<br>@implementation PYPerson</p>\n<ul>\n<li><p>(void)encodeWithCoder:(NSCoder )encoder<br>{<br>unsigned int count = 0;<br>Ivar ivars = class_copyIvarList([PYPerson class], &amp;count);<br>for (int i = 0; i&lt;count; i++) {<br>  <em>// 取出i位置对应的成员变量</em><br>  Ivar ivar = ivars[i];</p>\n<p>  <em>// 查看成员变量</em><br>  const char *name = ivar_getName(ivar);</p>\n<p>  <em>// 归档</em><br>  NSString *key = [NSString stringWithUTF8String:name];<br>  id value = [self valueForKey:key];<br>  [encoder encodeObject:value forKey:key];</p>\n</li>\n</ul>\n<p>}<br>free(ivars);<br>}</p>\n<ul>\n<li><p>(id)initWithCoder:(NSCoder <em>)decoder<br>{<br>if (self = [super init]) {<br>  unsigned int count = 0;<br>  Ivar </em>ivars = class_copyIvarList([PYPerson class], &amp;count);</p>\n<p>  for (int i = 0; i&lt;count; i++) {</p>\n<pre><code>*// 取出i位置对应的成员变量*\nIvar ivar = ivars[i];\n\n*// 查看成员变量*\nconst char *name = ivar_getName(ivar);\n\n*// 归档*\nNSString *key = [NSString stringWithUTF8String:name];\nid value = [decoder decodeObjectForKey:key];\n\n*// 设置到成员变量身上*\n[self setValue:value forKey:key];\n</code></pre><p>  }</p>\n<p>  free(ivars);</p>\n</li>\n</ul>\n<p>}<br>return self;<br>}</p>\n<p><a href=\"http://my.oschina.net/u/567204\">@end</a><br>这样我们可以看到归档和解档的案例其实是runtime写下的<br>学习，runtime机制首先要了解下面几个问题<br>1相关的头文件和函数<br>1&gt; 头文件</p>\n<ul>\n<li>利用头文件，我们可以查看到runtime中的各个方法！ </li>\n</ul>\n<p>2&gt; 相关应用</p>\n<ul>\n<li>NSCoding(归档和解档, 利用runtime遍历模型对象的所有属性)</li>\n<li>字典 –&gt; 模型 (利用runtime遍历模型对象的所有属性, 根据属性名从字典中取出对应的值, 设置到模型的属性上)</li>\n<li>KVO(利用runtime动态产生一个类)</li>\n<li>用于封装框架(想怎么改就怎么改)<br>这就是我们runtime机制的只要运用方向</li>\n</ul>\n<p>3&gt; 相关函数</p>\n<ul>\n<li>objc_msgSend : 给对象发送消息</li>\n<li>class_copyMethodList : 遍历某个类所有的方法</li>\n<li>class_copyIvarList : 遍历某个类所有的成员变量</li>\n<li>class_…..<br>这是我们学习runtime必须知道的函数！</li>\n</ul>\n<p>4.必备常识<br>1&gt; Ivar : 成员变量<br>2&gt; Method : 成员方法<br>从上面例子中我们看到我们定义的成员变量，如果要是动态创建方法，可以使用Method，<br>也许，看到这里，你是否对runtime有了更深入的了解呢？在这里，希望我们大家相互交流！有什么错误之处，还请指正 </p>\n<p>RunTime简称运行时。就是系统在运行的时候的一些机制，其中最主要的是消息机制。对于C语言，函数的调用在编译的时候会决定调用哪个函数（ C语言的函数调用请看这里 ）。编译完成之后直接顺序执行，无任何二义性。OC的函数调用成为消息发送。属于动态调用过程。在编译的时候并不能决定真正调用哪个函数（事实证明，在编 译阶段，OC可以调用任何函数，即使这个函数并未实现，只要申明过就不会报错。而C语言在编译阶段就会报错）。只有在真正运行的时候才会根据函数的名称找 到对应的函数来调用。<br>那OC是怎么实现动态调用的呢？下面我们来看看OC通过发送消息来达到动态调用的秘密。假如在OC中写了这样的一个代码：<br>1<code>[obj makeText];</code>其中obj是一个对象，makeText是一个函数名称。对于这样一个简单的调用。在编译时RunTime会将上述代码转化成<br>1<code>objc_msgSend(obj,@selector(makeText));</code>首先我们来看看obj这个对象，iOS中的obj都继承于NSObject。<br>123<code>@interface NSObject &lt;nsobject&gt; {``    ``Class isa  OBJC_ISA_AVAILABILITY;``}&lt;/nsobject&gt;</code>在NSObjcet中存在一个Class的isa指针。然后我们看看Class：<br>1234567891011121314<code>typedef struct objc_class *Class;``struct objc_class {``  ``Class isa; ``// 指向metaclass`` </code> <code>``Class super_class ; ``// 指向其父类``  ``const char *name ; ``// 类名``  ``long version ; ``// 类的版本信息，初始化默认为0，可以通过runtime函数class_setVersion和class_getVersion进行修改、读取``  ``long info; ``// 一些标识信息,如CLS_CLASS (0x1L) 表示该类为普通 class ，其中包含对象方法和成员变量;CLS_META (0x2L) 表示该类为 metaclass，其中包含类方法;``  ``long instance_size ; ``// 该类的实例变量大小(包括从父类继承下来的实例变量);``  ``struct objc_ivar_list *ivars; ``// 用于存储每个成员变量的地址``  ``struct objc_method_list **methodLists ; ``// 与 info 的一些标志位有关,如CLS_CLASS (0x1L),则存储对象方法，如CLS_META (0x2L)，则存储类方法;``  ``struct objc_cache *cache; ``// 指向最近使用的方法的指针，用于提升效率；``  ``struct objc_protocol_list *protocols; ``// 存储该类遵守的协议``    ``}</code></p>\n<p>我们可以看到，对于一个Class类中，存在很多东西，下面我来一一解释一下：<br>Class isa：指向metaclass，也就是静态的Class。一般一个Obj对象中的isa会指向普通的Class，这个Class中存储普通成员变量和对 象方法（“-”开头的方法），普通Class中的isa指针指向静态Class，静态Class中存储static类型成员变量和类方法（“+”开头的方 法）。<br>Class super_class:指向父类，如果这个类是根类，则为NULL。<br>下面一张图片很好的描述了类和对象的继承关系：<br><img src=\"cid:f919a9e0f1d396baac9ed7f8fdc4a3be\" alt=\"iuqQFnm.png\" title=\"1413628797629491.png\"><br><strong>注意</strong>：所有metaclass中isa指针都指向跟metaclass。而跟metaclass则指向自身。Root metaclass是通过继承Root class产生的。与root class结构体成员一致，也就是前面提到的结构。不同的是Root metaclass的isa指针指向自身。<br>Class类中其他的成员这里就先不做过多解释了，下面我们来看看：<br><strong>@selector (makeText)</strong>：这是一个SEL方法选择器。SEL其主要作用是快速的通过方法名字（makeText）查找到对应方法的函数指针，然后调用其函 数。SEL其本身是一个Int类型的一个地址，地址中存放着方法的名字。对于一个类中。每一个方法对应着一个SEL。所以iOS类中不能存在2个名称相同 的方法，即使参数类型不同，因为SEL是根据方法名字生成的，相同的方法名称只能对应一个SEL。<br>下面我们就来看看具体消息发送之后是怎么来动态查找对应的方法的。</p>\n<p>首先，编译器将代码[obj makeText];转化为objc_msgSend(obj, @selector (makeText));，在objc_msgSend函数中。首先通过obj的isa指针找到obj对应的class。在Class中先去cache中 通过SEL查找对应函数method（猜测cache中method列表是以SEL为key通过hash表来存储的，这样能提高函数查找速度），若 cache中未找到。再去methodList中查找，若methodlist中未找到，则取superClass中查找。若能找到，则将method加<br> 入到cache中，以方便下次查找，并通过method中的函数指针跳转到对应的函数中去执行。 </p>"},{"title":"scrollView加约束","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n#尊重原创 转自：http://www.jianshu.com/p/1cfeb1eab6c6\n#\n\n#先办到能设置contentSize\n- 得添加一个额外的视图,占位\n- scrollView中只添加个UIView\n- 其它的控件全部放在这个UIView上\n- 设置UIView的高度,即为scrollView的contendSize\n- 得设置水平居中\n- 约束完毕\n\n##上下滚动\n- 1.添加一个UIView类型的子控件(这将是UIScrollView唯一的一个子控件)\n- 2.上下左右0\n- 3.高度(contentSize的高度,可滚动的高度)\n- 4.水平居中\n\n##左右滚动\n- 1.添加一个UIView类型的子控件(这将是UIScrollView唯一的一个子控件)\n- 2.上下左右0\n- 3.宽度(contentSize的宽度,可滚动的宽度)\n- 4.竖直居中\n\n##上下左右都能滚动\n- 1.添加一个UIView类型的子控件(这将是UIScrollView唯一的一个子控件)\n- 2.上下左右0\n- 3.宽度,高度(contentSize的宽度,可滚动的宽度,contentSize的高度,可滚动的高度)\n\n\n\n","source":"_posts/oc/scrollView加约束.md","raw":"---\ntitle: scrollView加约束\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n#尊重原创 转自：http://www.jianshu.com/p/1cfeb1eab6c6\n#\n\n#先办到能设置contentSize\n- 得添加一个额外的视图,占位\n- scrollView中只添加个UIView\n- 其它的控件全部放在这个UIView上\n- 设置UIView的高度,即为scrollView的contendSize\n- 得设置水平居中\n- 约束完毕\n\n##上下滚动\n- 1.添加一个UIView类型的子控件(这将是UIScrollView唯一的一个子控件)\n- 2.上下左右0\n- 3.高度(contentSize的高度,可滚动的高度)\n- 4.水平居中\n\n##左右滚动\n- 1.添加一个UIView类型的子控件(这将是UIScrollView唯一的一个子控件)\n- 2.上下左右0\n- 3.宽度(contentSize的宽度,可滚动的宽度)\n- 4.竖直居中\n\n##上下左右都能滚动\n- 1.添加一个UIView类型的子控件(这将是UIScrollView唯一的一个子控件)\n- 2.上下左右0\n- 3.宽度,高度(contentSize的宽度,可滚动的宽度,contentSize的高度,可滚动的高度)\n\n\n\n","slug":"oc/scrollView加约束","published":1,"updated":"2016-10-08T09:03:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98h003i21xwyjb64u1e","content":"<a id=\"more\"></a>\n<p>#尊重原创 转自：<a href=\"http://www.jianshu.com/p/1cfeb1eab6c6\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/1cfeb1eab6c6</a><br>#</p>\n<p>#先办到能设置contentSize</p>\n<ul>\n<li>得添加一个额外的视图,占位</li>\n<li>scrollView中只添加个UIView</li>\n<li>其它的控件全部放在这个UIView上</li>\n<li>设置UIView的高度,即为scrollView的contendSize</li>\n<li>得设置水平居中</li>\n<li>约束完毕</li>\n</ul>\n<p>##上下滚动</p>\n<ul>\n<li>1.添加一个UIView类型的子控件(这将是UIScrollView唯一的一个子控件)</li>\n<li>2.上下左右0</li>\n<li>3.高度(contentSize的高度,可滚动的高度)</li>\n<li>4.水平居中</li>\n</ul>\n<p>##左右滚动</p>\n<ul>\n<li>1.添加一个UIView类型的子控件(这将是UIScrollView唯一的一个子控件)</li>\n<li>2.上下左右0</li>\n<li>3.宽度(contentSize的宽度,可滚动的宽度)</li>\n<li>4.竖直居中</li>\n</ul>\n<p>##上下左右都能滚动</p>\n<ul>\n<li>1.添加一个UIView类型的子控件(这将是UIScrollView唯一的一个子控件)</li>\n<li>2.上下左右0</li>\n<li>3.宽度,高度(contentSize的宽度,可滚动的宽度,contentSize的高度,可滚动的高度)</li>\n</ul>\n","excerpt":"","more":"<p>#尊重原创 转自：<a href=\"http://www.jianshu.com/p/1cfeb1eab6c6\">http://www.jianshu.com/p/1cfeb1eab6c6</a><br>#</p>\n<p>#先办到能设置contentSize</p>\n<ul>\n<li>得添加一个额外的视图,占位</li>\n<li>scrollView中只添加个UIView</li>\n<li>其它的控件全部放在这个UIView上</li>\n<li>设置UIView的高度,即为scrollView的contendSize</li>\n<li>得设置水平居中</li>\n<li>约束完毕</li>\n</ul>\n<p>##上下滚动</p>\n<ul>\n<li>1.添加一个UIView类型的子控件(这将是UIScrollView唯一的一个子控件)</li>\n<li>2.上下左右0</li>\n<li>3.高度(contentSize的高度,可滚动的高度)</li>\n<li>4.水平居中</li>\n</ul>\n<p>##左右滚动</p>\n<ul>\n<li>1.添加一个UIView类型的子控件(这将是UIScrollView唯一的一个子控件)</li>\n<li>2.上下左右0</li>\n<li>3.宽度(contentSize的宽度,可滚动的宽度)</li>\n<li>4.竖直居中</li>\n</ul>\n<p>##上下左右都能滚动</p>\n<ul>\n<li>1.添加一个UIView类型的子控件(这将是UIScrollView唯一的一个子控件)</li>\n<li>2.上下左右0</li>\n<li>3.宽度,高度(contentSize的宽度,可滚动的宽度,contentSize的高度,可滚动的高度)</li>\n</ul>"},{"title":"storyboard传值","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n#pragma mark - Navigation\n\n// In a storyboard-based application, you will often want to do a little preparation before navigation\n- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {\n    // Get the new view controller using [segue destinationViewController].\n    // Pass the selected object to the new view controller.\n    \n    \n    //得到点击的cell，sender是指触发跳转的那个控件，这里指的是点击的cell\n    UITableViewCell *cell = (UITableViewCell *)sender;\n    \n    //通过当前被点击的cell得到点击位置\n    NSIndexPath *selectedIndexPath = [self.tableView indexPathForCell:cell];\n    \n    Roster *roster = self.rosterArray[selectedIndexPath.row];\n    \n    //得到要跳转的viewcontroller\n    ChatTableViewController *chatTableViewController = (ChatTableViewController *)[segue destinationViewController];\n    \n    chatTableViewController.chatToRoster = roster;\n    \n}\n\n```\n\n","source":"_posts/oc/storyboard传值.md","raw":"---\ntitle: storyboard传值\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n#pragma mark - Navigation\n\n// In a storyboard-based application, you will often want to do a little preparation before navigation\n- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {\n    // Get the new view controller using [segue destinationViewController].\n    // Pass the selected object to the new view controller.\n    \n    \n    //得到点击的cell，sender是指触发跳转的那个控件，这里指的是点击的cell\n    UITableViewCell *cell = (UITableViewCell *)sender;\n    \n    //通过当前被点击的cell得到点击位置\n    NSIndexPath *selectedIndexPath = [self.tableView indexPathForCell:cell];\n    \n    Roster *roster = self.rosterArray[selectedIndexPath.row];\n    \n    //得到要跳转的viewcontroller\n    ChatTableViewController *chatTableViewController = (ChatTableViewController *)[segue destinationViewController];\n    \n    chatTableViewController.chatToRoster = roster;\n    \n}\n\n```\n\n","slug":"oc/storyboard传值","published":1,"updated":"2016-10-08T06:01:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98j003k21xwrsl1knls","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#pragma mark - Navigation</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// In a storyboard-based application, you will often want to do a little preparation before navigation</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)prepareForSegue:(<span class=\"built_in\">UIStoryboardSegue</span> *)segue sender:(<span class=\"keyword\">id</span>)sender &#123;</div><div class=\"line\">    <span class=\"comment\">// Get the new view controller using [segue destinationViewController].</span></div><div class=\"line\">    <span class=\"comment\">// Pass the selected object to the new view controller.</span></div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//得到点击的cell，sender是指触发跳转的那个控件，这里指的是点击的cell</span></div><div class=\"line\">    <span class=\"built_in\">UITableViewCell</span> *cell = (<span class=\"built_in\">UITableViewCell</span> *)sender;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//通过当前被点击的cell得到点击位置</span></div><div class=\"line\">    <span class=\"built_in\">NSIndexPath</span> *selectedIndexPath = [<span class=\"keyword\">self</span>.tableView indexPathForCell:cell];</div><div class=\"line\">    </div><div class=\"line\">    Roster *roster = <span class=\"keyword\">self</span>.rosterArray[selectedIndexPath.row];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//得到要跳转的viewcontroller</span></div><div class=\"line\">    ChatTableViewController *chatTableViewController = (ChatTableViewController *)[segue destinationViewController];</div><div class=\"line\">    </div><div class=\"line\">    chatTableViewController.chatToRoster = roster;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#pragma mark - Navigation</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// In a storyboard-based application, you will often want to do a little preparation before navigation</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)prepareForSegue:(<span class=\"built_in\">UIStoryboardSegue</span> *)segue sender:(<span class=\"keyword\">id</span>)sender &#123;</div><div class=\"line\">    <span class=\"comment\">// Get the new view controller using [segue destinationViewController].</span></div><div class=\"line\">    <span class=\"comment\">// Pass the selected object to the new view controller.</span></div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//得到点击的cell，sender是指触发跳转的那个控件，这里指的是点击的cell</span></div><div class=\"line\">    <span class=\"built_in\">UITableViewCell</span> *cell = (<span class=\"built_in\">UITableViewCell</span> *)sender;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//通过当前被点击的cell得到点击位置</span></div><div class=\"line\">    <span class=\"built_in\">NSIndexPath</span> *selectedIndexPath = [<span class=\"keyword\">self</span>.tableView indexPathForCell:cell];</div><div class=\"line\">    </div><div class=\"line\">    Roster *roster = <span class=\"keyword\">self</span>.rosterArray[selectedIndexPath.row];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//得到要跳转的viewcontroller</span></div><div class=\"line\">    ChatTableViewController *chatTableViewController = (ChatTableViewController *)[segue destinationViewController];</div><div class=\"line\">    </div><div class=\"line\">    chatTableViewController.chatToRoster = roster;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"tableview 下拉图片放大","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n\n#import \"RootViewController.h\"\n\n@interface RootViewController ()\n\n@end\n\n@implementation RootViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view.\n\n    self.view.backgroundColor = [UIColor lightGrayColor];\n\n    [self setAutomaticallyAdjustsScrollViewInsets:NO];\n\n    self.myTableView = [[UITableView alloc] initWithFrame:[[UIScreen mainScreen] bounds] style:UITableViewStylePlain];\n    [self.view addSubview:self.myTableView];\n    [_myTableView release];\n\n    //设置tableview的contentView距离上边界200\n    //相对于0点,已经向下偏移了-200\n    self.myTableView.contentInset = UIEdgeInsetsMake(200.0+64, 0, 0, 0);\n    self.myTableView.delegate = self;\n    self.myTableView.dataSource = self;\n\n\n    //相对于0点,图片坐标应该是(0,-200)\n    self.imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, -200.0, self.view.frame.size.width, 200)];\n    self.imageView.image = [UIImage imageNamed:@\"hua.jpg\"];\n    //设置imageView高度改变时宽度也跟着改变\n    self.imageView.contentMode = UIViewContentModeScaleAspectFill;\n    [self.myTableView addSubview:self.imageView];\n    [_imageView release];\n\n}\n\n\n//指定多少行\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n{\n    return 10;\n}\n\n//创建一个cell\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    NSString *cellIdentifier = @\"cell\";\n  UITableViewCell *cell =  [tableView dequeueReusableCellWithIdentifier:cellIdentifier];\n    if (!cell) {\n        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier];\n\n    }\n\n    cell.textLabel.text = [NSString stringWithFormat:@\"%ld\",indexPath.row];\n    cell.selectionStyle =  UITableViewCellSelectionStyleNone;\n\n    return cell;\n\n}\n//设置行高\n-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    return 80;\n}\n-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    //点击后自动取消选中置灰效果\n    [tableView deselectRowAtIndexPath:indexPath animated:YES];\n\n}\n-(void)scrollViewDidScroll:(UIScrollView *)scrollView\n{\n    //刚开始y的偏移量初始值就是-264\n    NSLog(@\"y1 === %f\",scrollView.contentOffset.y);\n    CGFloat y = scrollView.contentOffset.y + 64;//加上导航栏高度,第一次是-200\n    NSLog(@\"y2 === %f\",y);\n\n    if (y < -200) {\n        CGRect frame = self.imageView.frame;\n        frame.origin.y = y;//imageView的frame是不断往上偏移\n        frame.size.height =  -y;//tablview向下偏移了多少,高度就增加多少\n        self.imageView.frame = frame;\n    }\n\n}\n\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n\n@end\n```\n\n","source":"_posts/oc/tableview 下拉图片放大.md","raw":"---\ntitle: tableview 下拉图片放大\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n\n#import \"RootViewController.h\"\n\n@interface RootViewController ()\n\n@end\n\n@implementation RootViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view.\n\n    self.view.backgroundColor = [UIColor lightGrayColor];\n\n    [self setAutomaticallyAdjustsScrollViewInsets:NO];\n\n    self.myTableView = [[UITableView alloc] initWithFrame:[[UIScreen mainScreen] bounds] style:UITableViewStylePlain];\n    [self.view addSubview:self.myTableView];\n    [_myTableView release];\n\n    //设置tableview的contentView距离上边界200\n    //相对于0点,已经向下偏移了-200\n    self.myTableView.contentInset = UIEdgeInsetsMake(200.0+64, 0, 0, 0);\n    self.myTableView.delegate = self;\n    self.myTableView.dataSource = self;\n\n\n    //相对于0点,图片坐标应该是(0,-200)\n    self.imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, -200.0, self.view.frame.size.width, 200)];\n    self.imageView.image = [UIImage imageNamed:@\"hua.jpg\"];\n    //设置imageView高度改变时宽度也跟着改变\n    self.imageView.contentMode = UIViewContentModeScaleAspectFill;\n    [self.myTableView addSubview:self.imageView];\n    [_imageView release];\n\n}\n\n\n//指定多少行\n-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n{\n    return 10;\n}\n\n//创建一个cell\n-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    NSString *cellIdentifier = @\"cell\";\n  UITableViewCell *cell =  [tableView dequeueReusableCellWithIdentifier:cellIdentifier];\n    if (!cell) {\n        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier];\n\n    }\n\n    cell.textLabel.text = [NSString stringWithFormat:@\"%ld\",indexPath.row];\n    cell.selectionStyle =  UITableViewCellSelectionStyleNone;\n\n    return cell;\n\n}\n//设置行高\n-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    return 80;\n}\n-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    //点击后自动取消选中置灰效果\n    [tableView deselectRowAtIndexPath:indexPath animated:YES];\n\n}\n-(void)scrollViewDidScroll:(UIScrollView *)scrollView\n{\n    //刚开始y的偏移量初始值就是-264\n    NSLog(@\"y1 === %f\",scrollView.contentOffset.y);\n    CGFloat y = scrollView.contentOffset.y + 64;//加上导航栏高度,第一次是-200\n    NSLog(@\"y2 === %f\",y);\n\n    if (y < -200) {\n        CGRect frame = self.imageView.frame;\n        frame.origin.y = y;//imageView的frame是不断往上偏移\n        frame.size.height =  -y;//tablview向下偏移了多少,高度就增加多少\n        self.imageView.frame = frame;\n    }\n\n}\n\n\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n\n@end\n```\n\n","slug":"oc/tableview 下拉图片放大","published":1,"updated":"2016-10-08T09:18:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98l003m21xwiudaiss2","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"RootViewController.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">RootViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">RootViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> lightGrayColor];</div><div class=\"line\"></div><div class=\"line\">    [<span class=\"keyword\">self</span> setAutomaticallyAdjustsScrollViewInsets:<span class=\"literal\">NO</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView = [[<span class=\"built_in\">UITableView</span> alloc] initWithFrame:[[<span class=\"built_in\">UIScreen</span> mainScreen] bounds] style:<span class=\"built_in\">UITableViewStylePlain</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.myTableView];</div><div class=\"line\">    [_myTableView release];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//设置tableview的contentView距离上边界200</span></div><div class=\"line\">    <span class=\"comment\">//相对于0点,已经向下偏移了-200</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView.contentInset = <span class=\"built_in\">UIEdgeInsetsMake</span>(<span class=\"number\">200.0</span>+<span class=\"number\">64</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView.dataSource = <span class=\"keyword\">self</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//相对于0点,图片坐标应该是(0,-200)</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.imageView = [[<span class=\"built_in\">UIImageView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">-200.0</span>, <span class=\"keyword\">self</span>.view.frame.size.width, <span class=\"number\">200</span>)];</div><div class=\"line\">    <span class=\"keyword\">self</span>.imageView.image = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"hua.jpg\"</span>];</div><div class=\"line\">    <span class=\"comment\">//设置imageView高度改变时宽度也跟着改变</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.imageView.contentMode = <span class=\"built_in\">UIViewContentModeScaleAspectFill</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.myTableView addSubview:<span class=\"keyword\">self</span>.imageView];</div><div class=\"line\">    [_imageView release];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//指定多少行</span></div><div class=\"line\">-(<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建一个cell</span></div><div class=\"line\">-(<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *cellIdentifier = <span class=\"string\">@\"cell\"</span>;</div><div class=\"line\">  <span class=\"built_in\">UITableViewCell</span> *cell =  [tableView dequeueReusableCellWithIdentifier:cellIdentifier];</div><div class=\"line\">    <span class=\"keyword\">if</span> (!cell) &#123;</div><div class=\"line\">        cell = [[<span class=\"built_in\">UITableViewCell</span> alloc] initWithStyle:<span class=\"built_in\">UITableViewCellStyleDefault</span> reuseIdentifier:cellIdentifier];</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    cell.textLabel.text = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%ld\"</span>,indexPath.row];</div><div class=\"line\">    cell.selectionStyle =  <span class=\"built_in\">UITableViewCellSelectionStyleNone</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> cell;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//设置行高</span></div><div class=\"line\">-(<span class=\"built_in\">CGFloat</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">80</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//点击后自动取消选中置灰效果</span></div><div class=\"line\">    [tableView deselectRowAtIndexPath:indexPath animated:<span class=\"literal\">YES</span>];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)scrollViewDidScroll:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//刚开始y的偏移量初始值就是-264</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"y1 === %f\"</span>,scrollView.contentOffset.y);</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> y = scrollView.contentOffset.y + <span class=\"number\">64</span>;<span class=\"comment\">//加上导航栏高度,第一次是-200</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"y2 === %f\"</span>,y);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (y &lt; <span class=\"number\">-200</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">CGRect</span> frame = <span class=\"keyword\">self</span>.imageView.frame;</div><div class=\"line\">        frame.origin.y = y;<span class=\"comment\">//imageView的frame是不断往上偏移</span></div><div class=\"line\">        frame.size.height =  -y;<span class=\"comment\">//tablview向下偏移了多少,高度就增加多少</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.imageView.frame = frame;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)didReceiveMemoryWarning &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> didReceiveMemoryWarning];</div><div class=\"line\">    <span class=\"comment\">// Dispose of any resources that can be recreated.</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"RootViewController.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">RootViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">RootViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> lightGrayColor];</div><div class=\"line\"></div><div class=\"line\">    [<span class=\"keyword\">self</span> setAutomaticallyAdjustsScrollViewInsets:<span class=\"literal\">NO</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView = [[<span class=\"built_in\">UITableView</span> alloc] initWithFrame:[[<span class=\"built_in\">UIScreen</span> mainScreen] bounds] style:<span class=\"built_in\">UITableViewStylePlain</span>];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.myTableView];</div><div class=\"line\">    [_myTableView release];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//设置tableview的contentView距离上边界200</span></div><div class=\"line\">    <span class=\"comment\">//相对于0点,已经向下偏移了-200</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView.contentInset = <span class=\"built_in\">UIEdgeInsetsMake</span>(<span class=\"number\">200.0</span>+<span class=\"number\">64</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView.delegate = <span class=\"keyword\">self</span>;</div><div class=\"line\">    <span class=\"keyword\">self</span>.myTableView.dataSource = <span class=\"keyword\">self</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//相对于0点,图片坐标应该是(0,-200)</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.imageView = [[<span class=\"built_in\">UIImageView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">-200.0</span>, <span class=\"keyword\">self</span>.view.frame.size.width, <span class=\"number\">200</span>)];</div><div class=\"line\">    <span class=\"keyword\">self</span>.imageView.image = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"hua.jpg\"</span>];</div><div class=\"line\">    <span class=\"comment\">//设置imageView高度改变时宽度也跟着改变</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.imageView.contentMode = <span class=\"built_in\">UIViewContentModeScaleAspectFill</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.myTableView addSubview:<span class=\"keyword\">self</span>.imageView];</div><div class=\"line\">    [_imageView release];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//指定多少行</span></div><div class=\"line\">-(<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建一个cell</span></div><div class=\"line\">-(<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *cellIdentifier = <span class=\"string\">@\"cell\"</span>;</div><div class=\"line\">  <span class=\"built_in\">UITableViewCell</span> *cell =  [tableView dequeueReusableCellWithIdentifier:cellIdentifier];</div><div class=\"line\">    <span class=\"keyword\">if</span> (!cell) &#123;</div><div class=\"line\">        cell = [[<span class=\"built_in\">UITableViewCell</span> alloc] initWithStyle:<span class=\"built_in\">UITableViewCellStyleDefault</span> reuseIdentifier:cellIdentifier];</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    cell.textLabel.text = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%ld\"</span>,indexPath.row];</div><div class=\"line\">    cell.selectionStyle =  <span class=\"built_in\">UITableViewCellSelectionStyleNone</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> cell;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//设置行高</span></div><div class=\"line\">-(<span class=\"built_in\">CGFloat</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">80</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//点击后自动取消选中置灰效果</span></div><div class=\"line\">    [tableView deselectRowAtIndexPath:indexPath animated:<span class=\"literal\">YES</span>];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)scrollViewDidScroll:(<span class=\"built_in\">UIScrollView</span> *)scrollView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//刚开始y的偏移量初始值就是-264</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"y1 === %f\"</span>,scrollView.contentOffset.y);</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> y = scrollView.contentOffset.y + <span class=\"number\">64</span>;<span class=\"comment\">//加上导航栏高度,第一次是-200</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"y2 === %f\"</span>,y);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (y &lt; <span class=\"number\">-200</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">CGRect</span> frame = <span class=\"keyword\">self</span>.imageView.frame;</div><div class=\"line\">        frame.origin.y = y;<span class=\"comment\">//imageView的frame是不断往上偏移</span></div><div class=\"line\">        frame.size.height =  -y;<span class=\"comment\">//tablview向下偏移了多少,高度就增加多少</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.imageView.frame = frame;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)didReceiveMemoryWarning &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> didReceiveMemoryWarning];</div><div class=\"line\">    <span class=\"comment\">// Dispose of any resources that can be recreated.</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>"},{"title":"target action","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n//自定义target:\n action:方法\n#warning第一步声明target和action属性@property(nonatomic,assign)idmyTarget;\n@property(nonatomic,assign)SELmyAction;\n\n\n\n#warning第二部声明方法-(void)addmyTarget:(id)target\n Ation:(SEL)action;\n\n#warning第三步实现方法\n-(void)addmyTarget:(id)target\n Ation:(SEL)action{\n#warning第四步接收传进来的目标对象和行为方法   \n   self.myTarget= target;\n   self.myAction= action;\n  \n\n}\n\n\n#warning第五步使用目标对象去执行行为方法\n-(void)touchesBegan:(NSSet*)touches withEvent:(UIEvent*)event\n{\n\n    [self.myTargetperformSelector:self.myActionwithObject:nil];}","source":"_posts/oc/target action.md","raw":"---\ntitle: target action\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n//自定义target:\n action:方法\n#warning第一步声明target和action属性@property(nonatomic,assign)idmyTarget;\n@property(nonatomic,assign)SELmyAction;\n\n\n\n#warning第二部声明方法-(void)addmyTarget:(id)target\n Ation:(SEL)action;\n\n#warning第三步实现方法\n-(void)addmyTarget:(id)target\n Ation:(SEL)action{\n#warning第四步接收传进来的目标对象和行为方法   \n   self.myTarget= target;\n   self.myAction= action;\n  \n\n}\n\n\n#warning第五步使用目标对象去执行行为方法\n-(void)touchesBegan:(NSSet*)touches withEvent:(UIEvent*)event\n{\n\n    [self.myTargetperformSelector:self.myActionwithObject:nil];}","slug":"oc/target action","published":1,"updated":"2016-10-08T06:07:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98n003o21xwo6tec2km","content":"<a id=\"more\"></a>\n<p>//自定义target:<br> action:方法</p>\n<p>#warning第一步声明target和action属性@property(nonatomic,assign)idmyTarget;<br>@property(nonatomic,assign)SELmyAction;</p>\n<p>#warning第二部声明方法-(void)addmyTarget:(id)target<br> Ation:(SEL)action;</p>\n<p>#warning第三步实现方法<br>-(void)addmyTarget:(id)target<br> Ation:(SEL)action{</p>\n<p>#warning第四步接收传进来的目标对象和行为方法<br>   self.myTarget= target;<br>   self.myAction= action;</p>\n<p>}</p>\n<p>#warning第五步使用目标对象去执行行为方法<br>-(void)touchesBegan:(NSSet<em>)touches withEvent:(UIEvent</em>)event<br>{</p>\n<pre><code>[self.myTargetperformSelector:self.myActionwithObject:nil];}\n</code></pre>","excerpt":"","more":"<p>//自定义target:<br> action:方法</p>\n<p>#warning第一步声明target和action属性@property(nonatomic,assign)idmyTarget;<br>@property(nonatomic,assign)SELmyAction;</p>\n<p>#warning第二部声明方法-(void)addmyTarget:(id)target<br> Ation:(SEL)action;</p>\n<p>#warning第三步实现方法<br>-(void)addmyTarget:(id)target<br> Ation:(SEL)action{</p>\n<p>#warning第四步接收传进来的目标对象和行为方法<br>   self.myTarget= target;<br>   self.myAction= action;</p>\n<p>}</p>\n<p>#warning第五步使用目标对象去执行行为方法<br>-(void)touchesBegan:(NSSet<em>)touches withEvent:(UIEvent</em>)event<br>{</p>\n<pre><code>[self.myTargetperformSelector:self.myActionwithObject:nil];}\n</code></pre>"},{"title":"view 的 clipsToBounds属性","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n**取值：**BOOL（YES/NO）**作用：**决定了子视图的显示范围当取值为YES时，超出父视图范围的子视图被剪裁不显示；当取值为NO时，超出父视图范围的子视图不被剪裁，显示。默认值为NO。\n如下图所示：view2是view1的子视图\n**取值为NO时：**\n**取值为YES时：**![](http://img.blog.csdn.net/20160525095602290?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20160525095512445?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)","source":"_posts/oc/view 的 clipsToBounds属性.md","raw":"---\ntitle: view 的 clipsToBounds属性\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n**取值：**BOOL（YES/NO）**作用：**决定了子视图的显示范围当取值为YES时，超出父视图范围的子视图被剪裁不显示；当取值为NO时，超出父视图范围的子视图不被剪裁，显示。默认值为NO。\n如下图所示：view2是view1的子视图\n**取值为NO时：**\n**取值为YES时：**![](http://img.blog.csdn.net/20160525095602290?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n![](http://img.blog.csdn.net/20160525095512445?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)","slug":"oc/view 的 clipsToBounds属性","published":1,"updated":"2016-10-08T09:08:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98p003q21xwlyil9pxi","content":"<a id=\"more\"></a>\n<p><strong>取值：</strong>BOOL（YES/NO）<strong>作用：</strong>决定了子视图的显示范围当取值为YES时，超出父视图范围的子视图被剪裁不显示；当取值为NO时，超出父视图范围的子视图不被剪裁，显示。默认值为NO。<br>如下图所示：view2是view1的子视图<br><strong>取值为NO时：</strong><br><strong>取值为YES时：</strong><img src=\"http://img.blog.csdn.net/20160525095602290?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20160525095512445?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n","excerpt":"","more":"<p><strong>取值：</strong>BOOL（YES/NO）<strong>作用：</strong>决定了子视图的显示范围当取值为YES时，超出父视图范围的子视图被剪裁不显示；当取值为NO时，超出父视图范围的子视图不被剪裁，显示。默认值为NO。<br>如下图所示：view2是view1的子视图<br><strong>取值为NO时：</strong><br><strong>取值为YES时：</strong><img src=\"http://img.blog.csdn.net/20160525095602290?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20160525095512445?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>"},{"title":"不同数据类型转换","date":"2016-10-08T03:39:43.000Z","_content":"不同数据类型转换\n<!-- more -->\n\n```objc\n /****************NSString 相关********************/\n    //NSDictionary 转NSString\n    //用字符串将nsarray的元素拼接起来\n    NSArray *array = [NSArray arrayWithObjects:@\"hello\",@\"world\", nil];\n    NSString *string = [array componentsJoinedByString:@\" \"];\n    NSLog(@\"string = %@\",string );\n   \n \n   \n    //nsdata 转 nsstring\n    NSString *strurl = @\"www.\";\n    NSURL *url = [NSURL URLWithString:strurl];\n    NSData *data = [NSData dataWithContentsOfURL:url];\n    NSString *datastr1 = [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];\n   \n   \n //   NSString 转换成NSData 对象\n   \n    NSData* Data = [@\"testdata\" dataUsingEncoding:NSUTF8StringEncoding];\n   \n   \n   \n  //  NSData 转换成char*\n   \n    NSData *data2;\n    const  char* a=[data2 bytes];\n   \n  //nsstring zhuan char\n    NSString *str = @\"dad\";\n    const  char *q =[str UTF8String];\n   \n //   char* 转换成NSData对象\n   \n   \n   \n    Byte* tempData = malloc(sizeof(Byte)*16);\n    NSData *content=[NSData dataWithBytes:tempData length:16];\n   \n   \n//    NSNumber转NSString:\n   \n//    假设现有一NSNumber的变量A，要转换成NSString类型的B\n   \n//    方法如下：\n   \n    NSNumberFormatter* numberFormatter = [[NSNumberFormatter alloc] init];\n    NSNumber *A = [[NSNumber alloc]initWithInt:5];\n    NSString *B;\n    B = [numberFormatter stringFromNumber:A];\n   \n    [numberFormatter release];\n   \n   \n //   nsstring和float 还有int之间的转换\n   \n    NSString *tempA = @\"123\";\n   \n    NSString *tempB = @\"456\";\n   \n   \n//    1，字符串拼接\n   \n    NSString *newString = [NSString stringWithFormat:@\"%@%@\",tempA,tempB];\n   \n   \n//  2，字符转int\n   \n    int intString = [newString intValue];\n   \n   \n//   3，int转字符\n   \n    NSString *stringInt = [NSString stringWithFormat:@\"%d\",intString];\n   \n   \n//4，字符转float\n   \n    float floatString = [newString floatValue];\n   \n   \n//    5，万能公式其他转字符\n   \n    NSString *stringFloat = [NSString stringWithFormat:@\"%f\",floatString];\n\n\n//\n   \n   \n\n\n}\n   //nsdictionary 相关\n//字典nsdictionary 转成json\n- (NSString *)dictionaryToJason:(NSDictionary *)dic\n{\n    NSData *jsondata = [NSJSONSerialization dataWithJSONObject:dic options:NSJSONWritingPrettyPrinted error:nil];\n    return [[NSString alloc]initWithData:jsondata encoding:NSUTF8StringEncoding];\n   \n   \n}\n```\n\n","source":"_posts/oc/不同数据类型转换.md","raw":"---\ntitle: 不同数据类型转换\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n不同数据类型转换\n<!-- more -->\n\n```objc\n /****************NSString 相关********************/\n    //NSDictionary 转NSString\n    //用字符串将nsarray的元素拼接起来\n    NSArray *array = [NSArray arrayWithObjects:@\"hello\",@\"world\", nil];\n    NSString *string = [array componentsJoinedByString:@\" \"];\n    NSLog(@\"string = %@\",string );\n   \n \n   \n    //nsdata 转 nsstring\n    NSString *strurl = @\"www.\";\n    NSURL *url = [NSURL URLWithString:strurl];\n    NSData *data = [NSData dataWithContentsOfURL:url];\n    NSString *datastr1 = [[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding];\n   \n   \n //   NSString 转换成NSData 对象\n   \n    NSData* Data = [@\"testdata\" dataUsingEncoding:NSUTF8StringEncoding];\n   \n   \n   \n  //  NSData 转换成char*\n   \n    NSData *data2;\n    const  char* a=[data2 bytes];\n   \n  //nsstring zhuan char\n    NSString *str = @\"dad\";\n    const  char *q =[str UTF8String];\n   \n //   char* 转换成NSData对象\n   \n   \n   \n    Byte* tempData = malloc(sizeof(Byte)*16);\n    NSData *content=[NSData dataWithBytes:tempData length:16];\n   \n   \n//    NSNumber转NSString:\n   \n//    假设现有一NSNumber的变量A，要转换成NSString类型的B\n   \n//    方法如下：\n   \n    NSNumberFormatter* numberFormatter = [[NSNumberFormatter alloc] init];\n    NSNumber *A = [[NSNumber alloc]initWithInt:5];\n    NSString *B;\n    B = [numberFormatter stringFromNumber:A];\n   \n    [numberFormatter release];\n   \n   \n //   nsstring和float 还有int之间的转换\n   \n    NSString *tempA = @\"123\";\n   \n    NSString *tempB = @\"456\";\n   \n   \n//    1，字符串拼接\n   \n    NSString *newString = [NSString stringWithFormat:@\"%@%@\",tempA,tempB];\n   \n   \n//  2，字符转int\n   \n    int intString = [newString intValue];\n   \n   \n//   3，int转字符\n   \n    NSString *stringInt = [NSString stringWithFormat:@\"%d\",intString];\n   \n   \n//4，字符转float\n   \n    float floatString = [newString floatValue];\n   \n   \n//    5，万能公式其他转字符\n   \n    NSString *stringFloat = [NSString stringWithFormat:@\"%f\",floatString];\n\n\n//\n   \n   \n\n\n}\n   //nsdictionary 相关\n//字典nsdictionary 转成json\n- (NSString *)dictionaryToJason:(NSDictionary *)dic\n{\n    NSData *jsondata = [NSJSONSerialization dataWithJSONObject:dic options:NSJSONWritingPrettyPrinted error:nil];\n    return [[NSString alloc]initWithData:jsondata encoding:NSUTF8StringEncoding];\n   \n   \n}\n```\n\n","slug":"oc/不同数据类型转换","published":1,"updated":"2016-10-08T09:48:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98q003s21xwq5dev0pn","content":"<p>不同数据类型转换<br><a id=\"more\"></a></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/****************NSString 相关********************/</span></div><div class=\"line\">    <span class=\"comment\">//NSDictionary 转NSString</span></div><div class=\"line\">    <span class=\"comment\">//用字符串将nsarray的元素拼接起来</span></div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *array = [<span class=\"built_in\">NSArray</span> arrayWithObjects:<span class=\"string\">@\"hello\"</span>,<span class=\"string\">@\"world\"</span>, <span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = [array componentsJoinedByString:<span class=\"string\">@\" \"</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"string = %@\"</span>,string );</div><div class=\"line\">   </div><div class=\"line\"> </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//nsdata 转 nsstring</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *strurl = <span class=\"string\">@\"www.\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:strurl];</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *data = [<span class=\"built_in\">NSData</span> dataWithContentsOfURL:url];</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *datastr1 = [[<span class=\"built_in\">NSString</span> alloc]initWithData:data encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"> <span class=\"comment\">//   NSString 转换成NSData 对象</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSData</span>* Data = [<span class=\"string\">@\"testdata\"</span> dataUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">//  NSData 转换成char*</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSData</span> *data2;</div><div class=\"line\">    <span class=\"keyword\">const</span>  <span class=\"keyword\">char</span>* a=[data2 bytes];</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">//nsstring zhuan char</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *str = <span class=\"string\">@\"dad\"</span>;</div><div class=\"line\">    <span class=\"keyword\">const</span>  <span class=\"keyword\">char</span> *q =[str UTF8String];</div><div class=\"line\">   </div><div class=\"line\"> <span class=\"comment\">//   char* 转换成NSData对象</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    Byte* tempData = malloc(<span class=\"keyword\">sizeof</span>(Byte)*<span class=\"number\">16</span>);</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *content=[<span class=\"built_in\">NSData</span> dataWithBytes:tempData length:<span class=\"number\">16</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//    NSNumber转NSString:</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//    假设现有一NSNumber的变量A，要转换成NSString类型的B</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//    方法如下：</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSNumberFormatter</span>* numberFormatter = [[<span class=\"built_in\">NSNumberFormatter</span> alloc] init];</div><div class=\"line\">    <span class=\"built_in\">NSNumber</span> *A = [[<span class=\"built_in\">NSNumber</span> alloc]initWithInt:<span class=\"number\">5</span>];</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *B;</div><div class=\"line\">    B = [numberFormatter stringFromNumber:A];</div><div class=\"line\">   </div><div class=\"line\">    [numberFormatter release];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"> <span class=\"comment\">//   nsstring和float 还有int之间的转换</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSString</span> *tempA = <span class=\"string\">@\"123\"</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSString</span> *tempB = <span class=\"string\">@\"456\"</span>;</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//    1，字符串拼接</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSString</span> *newString = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@%@\"</span>,tempA,tempB];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//  2，字符转int</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">int</span> intString = [newString intValue];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//   3，int转字符</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSString</span> *stringInt = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%d\"</span>,intString];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//4，字符转float</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">float</span> floatString = [newString floatValue];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//    5，万能公式其他转字符</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSString</span> *stringFloat = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%f\"</span>,floatString];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">   <span class=\"comment\">//nsdictionary 相关</span></div><div class=\"line\"><span class=\"comment\">//字典nsdictionary 转成json</span></div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)dictionaryToJason:(<span class=\"built_in\">NSDictionary</span> *)dic</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *jsondata = [<span class=\"built_in\">NSJSONSerialization</span> dataWithJSONObject:dic options:<span class=\"built_in\">NSJSONWritingPrettyPrinted</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> [[<span class=\"built_in\">NSString</span> alloc]initWithData:jsondata encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>不同数据类型转换<br>","more":"</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/****************NSString 相关********************/</span></div><div class=\"line\">    <span class=\"comment\">//NSDictionary 转NSString</span></div><div class=\"line\">    <span class=\"comment\">//用字符串将nsarray的元素拼接起来</span></div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *array = [<span class=\"built_in\">NSArray</span> arrayWithObjects:<span class=\"string\">@\"hello\"</span>,<span class=\"string\">@\"world\"</span>, <span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *string = [array componentsJoinedByString:<span class=\"string\">@\" \"</span>];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"string = %@\"</span>,string );</div><div class=\"line\">   </div><div class=\"line\"> </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//nsdata 转 nsstring</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *strurl = <span class=\"string\">@\"www.\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:strurl];</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *data = [<span class=\"built_in\">NSData</span> dataWithContentsOfURL:url];</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *datastr1 = [[<span class=\"built_in\">NSString</span> alloc]initWithData:data encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"> <span class=\"comment\">//   NSString 转换成NSData 对象</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSData</span>* Data = [<span class=\"string\">@\"testdata\"</span> dataUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">//  NSData 转换成char*</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSData</span> *data2;</div><div class=\"line\">    <span class=\"keyword\">const</span>  <span class=\"keyword\">char</span>* a=[data2 bytes];</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"comment\">//nsstring zhuan char</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *str = <span class=\"string\">@\"dad\"</span>;</div><div class=\"line\">    <span class=\"keyword\">const</span>  <span class=\"keyword\">char</span> *q =[str UTF8String];</div><div class=\"line\">   </div><div class=\"line\"> <span class=\"comment\">//   char* 转换成NSData对象</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    Byte* tempData = malloc(<span class=\"keyword\">sizeof</span>(Byte)*<span class=\"number\">16</span>);</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *content=[<span class=\"built_in\">NSData</span> dataWithBytes:tempData length:<span class=\"number\">16</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//    NSNumber转NSString:</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//    假设现有一NSNumber的变量A，要转换成NSString类型的B</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//    方法如下：</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSNumberFormatter</span>* numberFormatter = [[<span class=\"built_in\">NSNumberFormatter</span> alloc] init];</div><div class=\"line\">    <span class=\"built_in\">NSNumber</span> *A = [[<span class=\"built_in\">NSNumber</span> alloc]initWithInt:<span class=\"number\">5</span>];</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *B;</div><div class=\"line\">    B = [numberFormatter stringFromNumber:A];</div><div class=\"line\">   </div><div class=\"line\">    [numberFormatter release];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"> <span class=\"comment\">//   nsstring和float 还有int之间的转换</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSString</span> *tempA = <span class=\"string\">@\"123\"</span>;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSString</span> *tempB = <span class=\"string\">@\"456\"</span>;</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//    1，字符串拼接</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSString</span> *newString = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@%@\"</span>,tempA,tempB];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//  2，字符转int</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">int</span> intString = [newString intValue];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//   3，int转字符</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSString</span> *stringInt = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%d\"</span>,intString];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//4，字符转float</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">float</span> floatString = [newString floatValue];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//    5，万能公式其他转字符</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSString</span> *stringFloat = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%f\"</span>,floatString];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">   <span class=\"comment\">//nsdictionary 相关</span></div><div class=\"line\"><span class=\"comment\">//字典nsdictionary 转成json</span></div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)dictionaryToJason:(<span class=\"built_in\">NSDictionary</span> *)dic</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *jsondata = [<span class=\"built_in\">NSJSONSerialization</span> dataWithJSONObject:dic options:<span class=\"built_in\">NSJSONWritingPrettyPrinted</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> [[<span class=\"built_in\">NSString</span> alloc]initWithData:jsondata encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"不规则瀑布流","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n#import <Foundation/Foundation.h>\n#import <UIKit/UIKit.h>\n@protocol WaterLayoutDelegate <NSObject>\n\n@required\n- (CGSize)collectionView:(UICollectionView *)collectionView\n                  layout:(UICollectionViewLayout *)collectionViewLayout\n  sizeForItemAtIndexPath:(NSIndexPath *)indexPath;\n\n\n\n\n@end\n@interface WJY_WaterFallLayout : UICollectionViewLayout\n@property (nonatomic, assign) id<WaterLayoutDelegate> delegate;\n// 行数\n@property (nonatomic, assign) NSInteger lineCount;\n// 水平间距\n@property (nonatomic, assign) CGFloat verticalSpacing;\n// 垂直间距\n@property (nonatomic, assign) CGFloat horizontalSpacing;\n@property (nonatomic, assign) UIEdgeInsets sectionInset;\n@end\n\n```\n\n\n```objc\n#import \"WJY_WaterFallLayout.h\"\n\n@interface WJY_WaterFallLayout()\n@property (nonatomic, retain) NSMutableArray *heights;\n@property (nonatomic, retain) NSMutableArray *originX;\n@property (nonatomic, retain) NSMutableDictionary *itemsArrange;\n\n@property (nonatomic, retain) NSMutableDictionary *itemsInitialArrange;\n\n@end\n@implementation WJY_WaterFallLayout\n#pragma mark - 重写，应 始终调用子类\n- (void)prepareLayout\n{\n    // 如果item 是0 返回\n    NSInteger cellCount = [self.collectionView numberOfItemsInSection:0];\n    if (cellCount == 0) {\n        return ;\n    }\n    // 调转系统的协议方法 并设置代理\n    self.delegate = (id<WaterLayoutDelegate>)self.collectionView.delegate;\n    \n    self.itemsArrange = [NSMutableDictionary dictionary];\n    self.itemsInitialArrange = [NSMutableDictionary dictionary];\n    \n    [self initAllarrays];\n\n    for (NSInteger i = 0; i < cellCount; i++) {\n        [\n         self layoutForItemAtIndexPath:[NSIndexPath indexPathForItem:i inSection:0]];\n    }\n\n}\n#pragma 初始化所以数组\n- (void)initAllarrays\n{\n    \n    self.heights = [NSMutableArray array];\n    self.originX = [NSMutableArray array];\n    // item宽度\n    CGFloat itemWidth   = ([UIScreen mainScreen].bounds.size.width - self.sectionInset.left - self.sectionInset.right - (self.lineCount - 1) * self.horizontalSpacing) / self.lineCount;\n    \n    for (NSInteger i = 0; i < self.lineCount; i++) {\n        \n        // 循环添加 每行的每个top的点到 height数组中\n        [self.heights addObject:[NSNumber numberWithDouble:self.sectionInset.top]];\n        \n        //设置oringin_x 为0\n        CGFloat oringin_x   = 0.0;\n        \n        if (i == 0) {\n         //i = 0 x点 = left;\n            oringin_x = self.sectionInset.left;\n        } else {\n            //  x = i + item宽 + 横向宽度\n            oringin_x = [self.originX[i - 1] doubleValue] + itemWidth + self.horizontalSpacing;\n        }\n         // 把得到的点加到 x数组中\n        [self.originX addObject:[NSNumber numberWithDouble: oringin_x]];\n    }\n\n}\n#pragma mark - itme设置\n- (void)layoutForItemAtIndexPath:(NSIndexPath *)indexPath\n{\n    \n    CGRect rect = CGRectZero;\n    // 协议方法\n    CGSize size = [self.delegate collectionView:self.collectionView layout:self sizeForItemAtIndexPath:indexPath];\n    \n    rect.size.height = size.height;\n    \n    rect.size.width  = ([UIScreen mainScreen].bounds.size.width  - self.sectionInset.left - self.sectionInset.right - (self.lineCount - 1) * self.horizontalSpacing) / self.lineCount;\n    \n    NSInteger index  = [self getLowerHeightRowIndex:self.heights];\n    \n    rect.origin.x = [self.originX[index] doubleValue];\n    rect.origin.y = [self.heights[index] doubleValue];\n    \n    CGFloat newHeight = rect.origin.y + rect.size.height + self.verticalSpacing;\n    \n    [self.heights replaceObjectAtIndex:index withObject:[NSNumber numberWithDouble: newHeight]];\n    \n    [self.itemsArrange setObject:indexPath forKey:NSStringFromCGRect(rect)];\n    \n    [self.itemsInitialArrange setObject:indexPath forKey:NSStringFromCGRect(CGRectMake(rect.origin.x, rect.origin.y - [UIScreen mainScreen].bounds.size.height, rect.size.width, rect.size.height))];\n}\n#pragma mark - 子类必须重写此方法并使用它来返回的宽度和高度的视图的内容。这些值表示的宽度和高度的所有内容，视图使用此信息来配置其自身内容的大小，以便滚动。\n- (CGSize)collectionViewContentSize\n{\n    \n    \n    CGFloat heightest = [self getHeightest:self.heights];\n    \n    CGSize size = CGSizeMake(0, heightest);\n    \n    return size;\n}\n#pragma mark - 设置布局信息\n- (UICollectionViewLayoutAttributes *)layoutAttributesForItemAtIndexPath:(NSIndexPath *)indexPath {\n    \n    UICollectionViewLayoutAttributes *attributes = [UICollectionViewLayoutAttributes layoutAttributesForCellWithIndexPath:indexPath];\n    \n    NSArray *keyArr = self.itemsArrange.allKeys;\n    \n    for (NSString *rectStr in keyArr) {\n\n        if (self.itemsArrange[rectStr] != indexPath) {\n            continue;\n        }\n        \n        CGRect rect = CGRectFromString(rectStr);\n        \n        attributes.frame = rect;\n        \n        break;\n        \n    }\n    \n    return attributes;\n}\n#pragma mark - 重新自定义layout\n- (UICollectionViewLayoutAttributes *)initialLayoutAttributesForAppearingItemAtIndexPath:(NSIndexPath *)itemIndexPath {\n    // layout初始化方法\n    UICollectionViewLayoutAttributes *attributes = [UICollectionViewLayoutAttributes layoutAttributesForCellWithIndexPath:itemIndexPath];\n    \n    NSArray *keyArr = self.itemsArrange.allKeys;\n    \n    for (NSString *rectStr in keyArr) {\n        // item的rect信息和布局信息不等 就跳出本次循环\n        if (self.itemsInitialArrange[rectStr] != itemIndexPath) {\n            continue;\n        }\n        \n        CGRect rect = CGRectFromString(rectStr);\n        \n        attributes.frame = rect;\n        \n        break;\n        \n    }\n    \n    return attributes;\n}\n\n#pragma mark - 布局属性返回数组 视图在给定矩形\n- (NSArray *)layoutAttributesForElementsInRect:(CGRect)rect {\n    \n    CGFloat up = rect.origin.y;\n    \n    CGFloat down = rect.origin.y + rect.size.height;\n    \n    NSMutableArray *attributes = [NSMutableArray array];\n    \n    for (NSString *rectStr in self.itemsArrange) {\n        \n        CGRect itemRect = CGRectFromString(rectStr);\n        \n        if (itemRect.origin.y <= down && itemRect.origin.y + itemRect.size.height >= up) {\n            \n            NSIndexPath *indexPath = [self.itemsArrange objectForKey:rectStr];\n            \n                    //设置布局信息 添加到数组里\n            [attributes addObject:[self layoutAttributesForItemAtIndexPath:indexPath]];\n        }\n    }\n    \n    return attributes;\n}\n# pragma mark - 获取低行高\n- (NSInteger)getLowerHeightRowIndex:(NSMutableArray *)height {\n    \n    if (height.count == 0) {\n        return 0;\n    }\n    \n    NSInteger index  = 0;\n    \n    CGFloat heightest = [height[0] doubleValue];\n    \n    for (NSInteger i  = 1; i < height.count; i++) {\n        // 判定获取低行位置\n        index = heightest > [height[i] doubleValue] ? i : index;\n    }\n    \n    return index;\n}\n# pragma mark - 获取高度\n- (CGFloat)getHeightest:(NSMutableArray *)height {\n    \n    if (height.count == 0) {\n        return 0;\n    }\n    \n    CGFloat heightest = self.sectionInset.top;\n    // 遍历最高点\n    for (NSInteger i  = 0; i < height.count; i++) {\n        // 如果heightest为最高点返回返回 如果不是则返回height\n        heightest  = heightest > [height[i] doubleValue] ? heightest : [height[i] doubleValue];\n    }\n    \n    return heightest;\n}\n\n\n@end\n\n```\n\n","source":"_posts/oc/不规则瀑布流.md","raw":"---\ntitle: 不规则瀑布流\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n#import <Foundation/Foundation.h>\n#import <UIKit/UIKit.h>\n@protocol WaterLayoutDelegate <NSObject>\n\n@required\n- (CGSize)collectionView:(UICollectionView *)collectionView\n                  layout:(UICollectionViewLayout *)collectionViewLayout\n  sizeForItemAtIndexPath:(NSIndexPath *)indexPath;\n\n\n\n\n@end\n@interface WJY_WaterFallLayout : UICollectionViewLayout\n@property (nonatomic, assign) id<WaterLayoutDelegate> delegate;\n// 行数\n@property (nonatomic, assign) NSInteger lineCount;\n// 水平间距\n@property (nonatomic, assign) CGFloat verticalSpacing;\n// 垂直间距\n@property (nonatomic, assign) CGFloat horizontalSpacing;\n@property (nonatomic, assign) UIEdgeInsets sectionInset;\n@end\n\n```\n\n\n```objc\n#import \"WJY_WaterFallLayout.h\"\n\n@interface WJY_WaterFallLayout()\n@property (nonatomic, retain) NSMutableArray *heights;\n@property (nonatomic, retain) NSMutableArray *originX;\n@property (nonatomic, retain) NSMutableDictionary *itemsArrange;\n\n@property (nonatomic, retain) NSMutableDictionary *itemsInitialArrange;\n\n@end\n@implementation WJY_WaterFallLayout\n#pragma mark - 重写，应 始终调用子类\n- (void)prepareLayout\n{\n    // 如果item 是0 返回\n    NSInteger cellCount = [self.collectionView numberOfItemsInSection:0];\n    if (cellCount == 0) {\n        return ;\n    }\n    // 调转系统的协议方法 并设置代理\n    self.delegate = (id<WaterLayoutDelegate>)self.collectionView.delegate;\n    \n    self.itemsArrange = [NSMutableDictionary dictionary];\n    self.itemsInitialArrange = [NSMutableDictionary dictionary];\n    \n    [self initAllarrays];\n\n    for (NSInteger i = 0; i < cellCount; i++) {\n        [\n         self layoutForItemAtIndexPath:[NSIndexPath indexPathForItem:i inSection:0]];\n    }\n\n}\n#pragma 初始化所以数组\n- (void)initAllarrays\n{\n    \n    self.heights = [NSMutableArray array];\n    self.originX = [NSMutableArray array];\n    // item宽度\n    CGFloat itemWidth   = ([UIScreen mainScreen].bounds.size.width - self.sectionInset.left - self.sectionInset.right - (self.lineCount - 1) * self.horizontalSpacing) / self.lineCount;\n    \n    for (NSInteger i = 0; i < self.lineCount; i++) {\n        \n        // 循环添加 每行的每个top的点到 height数组中\n        [self.heights addObject:[NSNumber numberWithDouble:self.sectionInset.top]];\n        \n        //设置oringin_x 为0\n        CGFloat oringin_x   = 0.0;\n        \n        if (i == 0) {\n         //i = 0 x点 = left;\n            oringin_x = self.sectionInset.left;\n        } else {\n            //  x = i + item宽 + 横向宽度\n            oringin_x = [self.originX[i - 1] doubleValue] + itemWidth + self.horizontalSpacing;\n        }\n         // 把得到的点加到 x数组中\n        [self.originX addObject:[NSNumber numberWithDouble: oringin_x]];\n    }\n\n}\n#pragma mark - itme设置\n- (void)layoutForItemAtIndexPath:(NSIndexPath *)indexPath\n{\n    \n    CGRect rect = CGRectZero;\n    // 协议方法\n    CGSize size = [self.delegate collectionView:self.collectionView layout:self sizeForItemAtIndexPath:indexPath];\n    \n    rect.size.height = size.height;\n    \n    rect.size.width  = ([UIScreen mainScreen].bounds.size.width  - self.sectionInset.left - self.sectionInset.right - (self.lineCount - 1) * self.horizontalSpacing) / self.lineCount;\n    \n    NSInteger index  = [self getLowerHeightRowIndex:self.heights];\n    \n    rect.origin.x = [self.originX[index] doubleValue];\n    rect.origin.y = [self.heights[index] doubleValue];\n    \n    CGFloat newHeight = rect.origin.y + rect.size.height + self.verticalSpacing;\n    \n    [self.heights replaceObjectAtIndex:index withObject:[NSNumber numberWithDouble: newHeight]];\n    \n    [self.itemsArrange setObject:indexPath forKey:NSStringFromCGRect(rect)];\n    \n    [self.itemsInitialArrange setObject:indexPath forKey:NSStringFromCGRect(CGRectMake(rect.origin.x, rect.origin.y - [UIScreen mainScreen].bounds.size.height, rect.size.width, rect.size.height))];\n}\n#pragma mark - 子类必须重写此方法并使用它来返回的宽度和高度的视图的内容。这些值表示的宽度和高度的所有内容，视图使用此信息来配置其自身内容的大小，以便滚动。\n- (CGSize)collectionViewContentSize\n{\n    \n    \n    CGFloat heightest = [self getHeightest:self.heights];\n    \n    CGSize size = CGSizeMake(0, heightest);\n    \n    return size;\n}\n#pragma mark - 设置布局信息\n- (UICollectionViewLayoutAttributes *)layoutAttributesForItemAtIndexPath:(NSIndexPath *)indexPath {\n    \n    UICollectionViewLayoutAttributes *attributes = [UICollectionViewLayoutAttributes layoutAttributesForCellWithIndexPath:indexPath];\n    \n    NSArray *keyArr = self.itemsArrange.allKeys;\n    \n    for (NSString *rectStr in keyArr) {\n\n        if (self.itemsArrange[rectStr] != indexPath) {\n            continue;\n        }\n        \n        CGRect rect = CGRectFromString(rectStr);\n        \n        attributes.frame = rect;\n        \n        break;\n        \n    }\n    \n    return attributes;\n}\n#pragma mark - 重新自定义layout\n- (UICollectionViewLayoutAttributes *)initialLayoutAttributesForAppearingItemAtIndexPath:(NSIndexPath *)itemIndexPath {\n    // layout初始化方法\n    UICollectionViewLayoutAttributes *attributes = [UICollectionViewLayoutAttributes layoutAttributesForCellWithIndexPath:itemIndexPath];\n    \n    NSArray *keyArr = self.itemsArrange.allKeys;\n    \n    for (NSString *rectStr in keyArr) {\n        // item的rect信息和布局信息不等 就跳出本次循环\n        if (self.itemsInitialArrange[rectStr] != itemIndexPath) {\n            continue;\n        }\n        \n        CGRect rect = CGRectFromString(rectStr);\n        \n        attributes.frame = rect;\n        \n        break;\n        \n    }\n    \n    return attributes;\n}\n\n#pragma mark - 布局属性返回数组 视图在给定矩形\n- (NSArray *)layoutAttributesForElementsInRect:(CGRect)rect {\n    \n    CGFloat up = rect.origin.y;\n    \n    CGFloat down = rect.origin.y + rect.size.height;\n    \n    NSMutableArray *attributes = [NSMutableArray array];\n    \n    for (NSString *rectStr in self.itemsArrange) {\n        \n        CGRect itemRect = CGRectFromString(rectStr);\n        \n        if (itemRect.origin.y <= down && itemRect.origin.y + itemRect.size.height >= up) {\n            \n            NSIndexPath *indexPath = [self.itemsArrange objectForKey:rectStr];\n            \n                    //设置布局信息 添加到数组里\n            [attributes addObject:[self layoutAttributesForItemAtIndexPath:indexPath]];\n        }\n    }\n    \n    return attributes;\n}\n# pragma mark - 获取低行高\n- (NSInteger)getLowerHeightRowIndex:(NSMutableArray *)height {\n    \n    if (height.count == 0) {\n        return 0;\n    }\n    \n    NSInteger index  = 0;\n    \n    CGFloat heightest = [height[0] doubleValue];\n    \n    for (NSInteger i  = 1; i < height.count; i++) {\n        // 判定获取低行位置\n        index = heightest > [height[i] doubleValue] ? i : index;\n    }\n    \n    return index;\n}\n# pragma mark - 获取高度\n- (CGFloat)getHeightest:(NSMutableArray *)height {\n    \n    if (height.count == 0) {\n        return 0;\n    }\n    \n    CGFloat heightest = self.sectionInset.top;\n    // 遍历最高点\n    for (NSInteger i  = 0; i < height.count; i++) {\n        // 如果heightest为最高点返回返回 如果不是则返回height\n        heightest  = heightest > [height[i] doubleValue] ? heightest : [height[i] doubleValue];\n    }\n    \n    return heightest;\n}\n\n\n@end\n\n```\n\n","slug":"oc/不规则瀑布流","published":1,"updated":"2016-10-08T09:15:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98v003u21xwklo08fpf","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIKit.h&gt;</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">WaterLayoutDelegate</span> &lt;<span class=\"title\">NSObject</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@required</span></div><div class=\"line\">- (<span class=\"built_in\">CGSize</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView</div><div class=\"line\">                  layout:(<span class=\"built_in\">UICollectionViewLayout</span> *)collectionViewLayout</div><div class=\"line\">  sizeForItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">WJY_WaterFallLayout</span> : <span class=\"title\">UICollectionViewLayout</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">id</span>&lt;WaterLayoutDelegate&gt; delegate;</div><div class=\"line\"><span class=\"comment\">// 行数</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">NSInteger</span> lineCount;</div><div class=\"line\"><span class=\"comment\">// 水平间距</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> verticalSpacing;</div><div class=\"line\"><span class=\"comment\">// 垂直间距</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> horizontalSpacing;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">UIEdgeInsets</span> sectionInset;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"WJY_WaterFallLayout.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">WJY_WaterFallLayout</span>()</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">NSMutableArray</span> *heights;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">NSMutableArray</span> *originX;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">NSMutableDictionary</span> *itemsArrange;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">NSMutableDictionary</span> *itemsInitialArrange;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">WJY_WaterFallLayout</span></span></div><div class=\"line\"><span class=\"meta\">#pragma mark - 重写，应 始终调用子类</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)prepareLayout</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 如果item 是0 返回</span></div><div class=\"line\">    <span class=\"built_in\">NSInteger</span> cellCount = [<span class=\"keyword\">self</span>.collectionView numberOfItemsInSection:<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (cellCount == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 调转系统的协议方法 并设置代理</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.delegate = (<span class=\"keyword\">id</span>&lt;WaterLayoutDelegate&gt;)<span class=\"keyword\">self</span>.collectionView.delegate;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">self</span>.itemsArrange = [<span class=\"built_in\">NSMutableDictionary</span> dictionary];</div><div class=\"line\">    <span class=\"keyword\">self</span>.itemsInitialArrange = [<span class=\"built_in\">NSMutableDictionary</span> dictionary];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> initAllarrays];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSInteger</span> i = <span class=\"number\">0</span>; i &lt; cellCount; i++) &#123;</div><div class=\"line\">        [</div><div class=\"line\">         <span class=\"keyword\">self</span> layoutForItemAtIndexPath:[<span class=\"built_in\">NSIndexPath</span> indexPathForItem:i inSection:<span class=\"number\">0</span>]];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma 初始化所以数组</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)initAllarrays</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">self</span>.heights = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">    <span class=\"keyword\">self</span>.originX = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">    <span class=\"comment\">// item宽度</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> itemWidth   = ([<span class=\"built_in\">UIScreen</span> mainScreen].bounds.size.width - <span class=\"keyword\">self</span>.sectionInset.left - <span class=\"keyword\">self</span>.sectionInset.right - (<span class=\"keyword\">self</span>.lineCount - <span class=\"number\">1</span>) * <span class=\"keyword\">self</span>.horizontalSpacing) / <span class=\"keyword\">self</span>.lineCount;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSInteger</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">self</span>.lineCount; i++) &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 循环添加 每行的每个top的点到 height数组中</span></div><div class=\"line\">        [<span class=\"keyword\">self</span>.heights addObject:[<span class=\"built_in\">NSNumber</span> numberWithDouble:<span class=\"keyword\">self</span>.sectionInset.top]];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//设置oringin_x 为0</span></div><div class=\"line\">        <span class=\"built_in\">CGFloat</span> oringin_x   = <span class=\"number\">0.0</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">         <span class=\"comment\">//i = 0 x点 = left;</span></div><div class=\"line\">            oringin_x = <span class=\"keyword\">self</span>.sectionInset.left;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//  x = i + item宽 + 横向宽度</span></div><div class=\"line\">            oringin_x = [<span class=\"keyword\">self</span>.originX[i - <span class=\"number\">1</span>] doubleValue] + itemWidth + <span class=\"keyword\">self</span>.horizontalSpacing;</div><div class=\"line\">        &#125;</div><div class=\"line\">         <span class=\"comment\">// 把得到的点加到 x数组中</span></div><div class=\"line\">        [<span class=\"keyword\">self</span>.originX addObject:[<span class=\"built_in\">NSNumber</span> numberWithDouble: oringin_x]];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark - itme设置</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)layoutForItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGRect</span> rect = <span class=\"built_in\">CGRectZero</span>;</div><div class=\"line\">    <span class=\"comment\">// 协议方法</span></div><div class=\"line\">    <span class=\"built_in\">CGSize</span> size = [<span class=\"keyword\">self</span>.delegate collectionView:<span class=\"keyword\">self</span>.collectionView layout:<span class=\"keyword\">self</span> sizeForItemAtIndexPath:indexPath];</div><div class=\"line\">    </div><div class=\"line\">    rect.size.height = size.height;</div><div class=\"line\">    </div><div class=\"line\">    rect.size.width  = ([<span class=\"built_in\">UIScreen</span> mainScreen].bounds.size.width  - <span class=\"keyword\">self</span>.sectionInset.left - <span class=\"keyword\">self</span>.sectionInset.right - (<span class=\"keyword\">self</span>.lineCount - <span class=\"number\">1</span>) * <span class=\"keyword\">self</span>.horizontalSpacing) / <span class=\"keyword\">self</span>.lineCount;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSInteger</span> index  = [<span class=\"keyword\">self</span> getLowerHeightRowIndex:<span class=\"keyword\">self</span>.heights];</div><div class=\"line\">    </div><div class=\"line\">    rect.origin.x = [<span class=\"keyword\">self</span>.originX[index] doubleValue];</div><div class=\"line\">    rect.origin.y = [<span class=\"keyword\">self</span>.heights[index] doubleValue];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> newHeight = rect.origin.y + rect.size.height + <span class=\"keyword\">self</span>.verticalSpacing;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.heights replaceObjectAtIndex:index withObject:[<span class=\"built_in\">NSNumber</span> numberWithDouble: newHeight]];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.itemsArrange setObject:indexPath forKey:<span class=\"built_in\">NSStringFromCGRect</span>(rect)];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.itemsInitialArrange setObject:indexPath forKey:<span class=\"built_in\">NSStringFromCGRect</span>(<span class=\"built_in\">CGRectMake</span>(rect.origin.x, rect.origin.y - [<span class=\"built_in\">UIScreen</span> mainScreen].bounds.size.height, rect.size.width, rect.size.height))];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark - 子类必须重写此方法并使用它来返回的宽度和高度的视图的内容。这些值表示的宽度和高度的所有内容，视图使用此信息来配置其自身内容的大小，以便滚动。</span></div><div class=\"line\">- (<span class=\"built_in\">CGSize</span>)collectionViewContentSize</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> heightest = [<span class=\"keyword\">self</span> getHeightest:<span class=\"keyword\">self</span>.heights];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGSize</span> size = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">0</span>, heightest);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> size;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark - 设置布局信息</span></div><div class=\"line\">- (<span class=\"built_in\">UICollectionViewLayoutAttributes</span> *)layoutAttributesForItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UICollectionViewLayoutAttributes</span> *attributes = [<span class=\"built_in\">UICollectionViewLayoutAttributes</span> layoutAttributesForCellWithIndexPath:indexPath];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *keyArr = <span class=\"keyword\">self</span>.itemsArrange.allKeys;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> *rectStr <span class=\"keyword\">in</span> keyArr) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.itemsArrange[rectStr] != indexPath) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">CGRect</span> rect = <span class=\"built_in\">CGRectFromString</span>(rectStr);</div><div class=\"line\">        </div><div class=\"line\">        attributes.frame = rect;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> attributes;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark - 重新自定义layout</span></div><div class=\"line\">- (<span class=\"built_in\">UICollectionViewLayoutAttributes</span> *)initialLayoutAttributesForAppearingItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)itemIndexPath &#123;</div><div class=\"line\">    <span class=\"comment\">// layout初始化方法</span></div><div class=\"line\">    <span class=\"built_in\">UICollectionViewLayoutAttributes</span> *attributes = [<span class=\"built_in\">UICollectionViewLayoutAttributes</span> layoutAttributesForCellWithIndexPath:itemIndexPath];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *keyArr = <span class=\"keyword\">self</span>.itemsArrange.allKeys;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> *rectStr <span class=\"keyword\">in</span> keyArr) &#123;</div><div class=\"line\">        <span class=\"comment\">// item的rect信息和布局信息不等 就跳出本次循环</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.itemsInitialArrange[rectStr] != itemIndexPath) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">CGRect</span> rect = <span class=\"built_in\">CGRectFromString</span>(rectStr);</div><div class=\"line\">        </div><div class=\"line\">        attributes.frame = rect;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> attributes;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 布局属性返回数组 视图在给定矩形</span></div><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)layoutAttributesForElementsInRect:(<span class=\"built_in\">CGRect</span>)rect &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> up = rect.origin.y;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> down = rect.origin.y + rect.size.height;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *attributes = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> *rectStr <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.itemsArrange) &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">CGRect</span> itemRect = <span class=\"built_in\">CGRectFromString</span>(rectStr);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (itemRect.origin.y &lt;= down &amp;&amp; itemRect.origin.y + itemRect.size.height &gt;= up) &#123;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"built_in\">NSIndexPath</span> *indexPath = [<span class=\"keyword\">self</span>.itemsArrange objectForKey:rectStr];</div><div class=\"line\">            </div><div class=\"line\">                    <span class=\"comment\">//设置布局信息 添加到数组里</span></div><div class=\"line\">            [attributes addObject:[<span class=\"keyword\">self</span> layoutAttributesForItemAtIndexPath:indexPath]];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> attributes;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\"># pragma mark - 获取低行高</span></div><div class=\"line\">- (<span class=\"built_in\">NSInteger</span>)getLowerHeightRowIndex:(<span class=\"built_in\">NSMutableArray</span> *)height &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (height.count == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSInteger</span> index  = <span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> heightest = [height[<span class=\"number\">0</span>] doubleValue];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSInteger</span> i  = <span class=\"number\">1</span>; i &lt; height.count; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">// 判定获取低行位置</span></div><div class=\"line\">        index = heightest &gt; [height[i] doubleValue] ? i : index;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> index;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\"># pragma mark - 获取高度</span></div><div class=\"line\">- (<span class=\"built_in\">CGFloat</span>)getHeightest:(<span class=\"built_in\">NSMutableArray</span> *)height &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (height.count == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> heightest = <span class=\"keyword\">self</span>.sectionInset.top;</div><div class=\"line\">    <span class=\"comment\">// 遍历最高点</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSInteger</span> i  = <span class=\"number\">0</span>; i &lt; height.count; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果heightest为最高点返回返回 如果不是则返回height</span></div><div class=\"line\">        heightest  = heightest &gt; [height[i] doubleValue] ? heightest : [height[i] doubleValue];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> heightest;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIKit.h&gt;</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">WaterLayoutDelegate</span> &lt;<span class=\"title\">NSObject</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@required</span></div><div class=\"line\">- (<span class=\"built_in\">CGSize</span>)collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView</div><div class=\"line\">                  layout:(<span class=\"built_in\">UICollectionViewLayout</span> *)collectionViewLayout</div><div class=\"line\">  sizeForItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">WJY_WaterFallLayout</span> : <span class=\"title\">UICollectionViewLayout</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">id</span>&lt;WaterLayoutDelegate&gt; delegate;</div><div class=\"line\"><span class=\"comment\">// 行数</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">NSInteger</span> lineCount;</div><div class=\"line\"><span class=\"comment\">// 水平间距</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> verticalSpacing;</div><div class=\"line\"><span class=\"comment\">// 垂直间距</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">CGFloat</span> horizontalSpacing;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">UIEdgeInsets</span> sectionInset;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"WJY_WaterFallLayout.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">WJY_WaterFallLayout</span>()</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">NSMutableArray</span> *heights;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">NSMutableArray</span> *originX;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">NSMutableDictionary</span> *itemsArrange;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">NSMutableDictionary</span> *itemsInitialArrange;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">WJY_WaterFallLayout</span></span></div><div class=\"line\"><span class=\"meta\">#pragma mark - 重写，应 始终调用子类</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)prepareLayout</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 如果item 是0 返回</span></div><div class=\"line\">    <span class=\"built_in\">NSInteger</span> cellCount = [<span class=\"keyword\">self</span>.collectionView numberOfItemsInSection:<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (cellCount == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 调转系统的协议方法 并设置代理</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.delegate = (<span class=\"keyword\">id</span>&lt;WaterLayoutDelegate&gt;)<span class=\"keyword\">self</span>.collectionView.delegate;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">self</span>.itemsArrange = [<span class=\"built_in\">NSMutableDictionary</span> dictionary];</div><div class=\"line\">    <span class=\"keyword\">self</span>.itemsInitialArrange = [<span class=\"built_in\">NSMutableDictionary</span> dictionary];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> initAllarrays];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSInteger</span> i = <span class=\"number\">0</span>; i &lt; cellCount; i++) &#123;</div><div class=\"line\">        [</div><div class=\"line\">         <span class=\"keyword\">self</span> layoutForItemAtIndexPath:[<span class=\"built_in\">NSIndexPath</span> indexPathForItem:i inSection:<span class=\"number\">0</span>]];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma 初始化所以数组</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)initAllarrays</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">self</span>.heights = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">    <span class=\"keyword\">self</span>.originX = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">    <span class=\"comment\">// item宽度</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> itemWidth   = ([<span class=\"built_in\">UIScreen</span> mainScreen].bounds.size.width - <span class=\"keyword\">self</span>.sectionInset.left - <span class=\"keyword\">self</span>.sectionInset.right - (<span class=\"keyword\">self</span>.lineCount - <span class=\"number\">1</span>) * <span class=\"keyword\">self</span>.horizontalSpacing) / <span class=\"keyword\">self</span>.lineCount;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSInteger</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">self</span>.lineCount; i++) &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 循环添加 每行的每个top的点到 height数组中</span></div><div class=\"line\">        [<span class=\"keyword\">self</span>.heights addObject:[<span class=\"built_in\">NSNumber</span> numberWithDouble:<span class=\"keyword\">self</span>.sectionInset.top]];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//设置oringin_x 为0</span></div><div class=\"line\">        <span class=\"built_in\">CGFloat</span> oringin_x   = <span class=\"number\">0.0</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">         <span class=\"comment\">//i = 0 x点 = left;</span></div><div class=\"line\">            oringin_x = <span class=\"keyword\">self</span>.sectionInset.left;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//  x = i + item宽 + 横向宽度</span></div><div class=\"line\">            oringin_x = [<span class=\"keyword\">self</span>.originX[i - <span class=\"number\">1</span>] doubleValue] + itemWidth + <span class=\"keyword\">self</span>.horizontalSpacing;</div><div class=\"line\">        &#125;</div><div class=\"line\">         <span class=\"comment\">// 把得到的点加到 x数组中</span></div><div class=\"line\">        [<span class=\"keyword\">self</span>.originX addObject:[<span class=\"built_in\">NSNumber</span> numberWithDouble: oringin_x]];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark - itme设置</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)layoutForItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGRect</span> rect = <span class=\"built_in\">CGRectZero</span>;</div><div class=\"line\">    <span class=\"comment\">// 协议方法</span></div><div class=\"line\">    <span class=\"built_in\">CGSize</span> size = [<span class=\"keyword\">self</span>.delegate collectionView:<span class=\"keyword\">self</span>.collectionView layout:<span class=\"keyword\">self</span> sizeForItemAtIndexPath:indexPath];</div><div class=\"line\">    </div><div class=\"line\">    rect.size.height = size.height;</div><div class=\"line\">    </div><div class=\"line\">    rect.size.width  = ([<span class=\"built_in\">UIScreen</span> mainScreen].bounds.size.width  - <span class=\"keyword\">self</span>.sectionInset.left - <span class=\"keyword\">self</span>.sectionInset.right - (<span class=\"keyword\">self</span>.lineCount - <span class=\"number\">1</span>) * <span class=\"keyword\">self</span>.horizontalSpacing) / <span class=\"keyword\">self</span>.lineCount;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSInteger</span> index  = [<span class=\"keyword\">self</span> getLowerHeightRowIndex:<span class=\"keyword\">self</span>.heights];</div><div class=\"line\">    </div><div class=\"line\">    rect.origin.x = [<span class=\"keyword\">self</span>.originX[index] doubleValue];</div><div class=\"line\">    rect.origin.y = [<span class=\"keyword\">self</span>.heights[index] doubleValue];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> newHeight = rect.origin.y + rect.size.height + <span class=\"keyword\">self</span>.verticalSpacing;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.heights replaceObjectAtIndex:index withObject:[<span class=\"built_in\">NSNumber</span> numberWithDouble: newHeight]];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.itemsArrange setObject:indexPath forKey:<span class=\"built_in\">NSStringFromCGRect</span>(rect)];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span>.itemsInitialArrange setObject:indexPath forKey:<span class=\"built_in\">NSStringFromCGRect</span>(<span class=\"built_in\">CGRectMake</span>(rect.origin.x, rect.origin.y - [<span class=\"built_in\">UIScreen</span> mainScreen].bounds.size.height, rect.size.width, rect.size.height))];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark - 子类必须重写此方法并使用它来返回的宽度和高度的视图的内容。这些值表示的宽度和高度的所有内容，视图使用此信息来配置其自身内容的大小，以便滚动。</span></div><div class=\"line\">- (<span class=\"built_in\">CGSize</span>)collectionViewContentSize</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> heightest = [<span class=\"keyword\">self</span> getHeightest:<span class=\"keyword\">self</span>.heights];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGSize</span> size = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">0</span>, heightest);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> size;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark - 设置布局信息</span></div><div class=\"line\">- (<span class=\"built_in\">UICollectionViewLayoutAttributes</span> *)layoutAttributesForItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UICollectionViewLayoutAttributes</span> *attributes = [<span class=\"built_in\">UICollectionViewLayoutAttributes</span> layoutAttributesForCellWithIndexPath:indexPath];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *keyArr = <span class=\"keyword\">self</span>.itemsArrange.allKeys;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> *rectStr <span class=\"keyword\">in</span> keyArr) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.itemsArrange[rectStr] != indexPath) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">CGRect</span> rect = <span class=\"built_in\">CGRectFromString</span>(rectStr);</div><div class=\"line\">        </div><div class=\"line\">        attributes.frame = rect;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> attributes;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark - 重新自定义layout</span></div><div class=\"line\">- (<span class=\"built_in\">UICollectionViewLayoutAttributes</span> *)initialLayoutAttributesForAppearingItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)itemIndexPath &#123;</div><div class=\"line\">    <span class=\"comment\">// layout初始化方法</span></div><div class=\"line\">    <span class=\"built_in\">UICollectionViewLayoutAttributes</span> *attributes = [<span class=\"built_in\">UICollectionViewLayoutAttributes</span> layoutAttributesForCellWithIndexPath:itemIndexPath];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *keyArr = <span class=\"keyword\">self</span>.itemsArrange.allKeys;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> *rectStr <span class=\"keyword\">in</span> keyArr) &#123;</div><div class=\"line\">        <span class=\"comment\">// item的rect信息和布局信息不等 就跳出本次循环</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.itemsInitialArrange[rectStr] != itemIndexPath) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">CGRect</span> rect = <span class=\"built_in\">CGRectFromString</span>(rectStr);</div><div class=\"line\">        </div><div class=\"line\">        attributes.frame = rect;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> attributes;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 布局属性返回数组 视图在给定矩形</span></div><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)layoutAttributesForElementsInRect:(<span class=\"built_in\">CGRect</span>)rect &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> up = rect.origin.y;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> down = rect.origin.y + rect.size.height;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *attributes = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> *rectStr <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.itemsArrange) &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">CGRect</span> itemRect = <span class=\"built_in\">CGRectFromString</span>(rectStr);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (itemRect.origin.y &lt;= down &amp;&amp; itemRect.origin.y + itemRect.size.height &gt;= up) &#123;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"built_in\">NSIndexPath</span> *indexPath = [<span class=\"keyword\">self</span>.itemsArrange objectForKey:rectStr];</div><div class=\"line\">            </div><div class=\"line\">                    <span class=\"comment\">//设置布局信息 添加到数组里</span></div><div class=\"line\">            [attributes addObject:[<span class=\"keyword\">self</span> layoutAttributesForItemAtIndexPath:indexPath]];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> attributes;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\"># pragma mark - 获取低行高</span></div><div class=\"line\">- (<span class=\"built_in\">NSInteger</span>)getLowerHeightRowIndex:(<span class=\"built_in\">NSMutableArray</span> *)height &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (height.count == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSInteger</span> index  = <span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> heightest = [height[<span class=\"number\">0</span>] doubleValue];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSInteger</span> i  = <span class=\"number\">1</span>; i &lt; height.count; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">// 判定获取低行位置</span></div><div class=\"line\">        index = heightest &gt; [height[i] doubleValue] ? i : index;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> index;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\"># pragma mark - 获取高度</span></div><div class=\"line\">- (<span class=\"built_in\">CGFloat</span>)getHeightest:(<span class=\"built_in\">NSMutableArray</span> *)height &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (height.count == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> heightest = <span class=\"keyword\">self</span>.sectionInset.top;</div><div class=\"line\">    <span class=\"comment\">// 遍历最高点</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSInteger</span> i  = <span class=\"number\">0</span>; i &lt; height.count; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果heightest为最高点返回返回 如果不是则返回height</span></div><div class=\"line\">        heightest  = heightest &gt; [height[i] doubleValue] ? heightest : [height[i] doubleValue];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> heightest;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>"},{"title":"协议","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n协议共分六步：1.声明协议2.声明代理人属性3.执行协议方法4.签订协议5.指定代理人6.实现协议方法/******************声明协议的类****************************/\n\n/******************声明协议的类.h****************************/#warning协议第一步声明协议@protocolMarry <NSObject>\n-(void)makeMoney:(NSString*)text;\n\n@end\n\n#warning协议第二步声明代理人@interfaceGirl :NSObject@property(nonatomic,assign)id<Marry>myDelegate;//assign弱引用，不会对内存引起记数变化\n-(void)getMessage:(NSString*)content;@end/*********************************************************/\n\n\n/******************声明协议的类.m****************************/#warning协议第三步执行协议方法@implementationGirl-(void)getMessage:(NSString*)content\n{\n\n   NSLog(@\"%@\",content);\n   //使用代理人去执行协议方法\n    [self.myDelegate makeMoney:@\"赶快去赚钱!!!\"];\n   \n}@end/******************************************************/\n\n\n/********************执行协议的类*************************/\n\n/********************执行协议的类.h***********************/#warning协议第四步签订协议#import\"Girl.h\"@interfaceBoy :NSObject<Marry>\n-(void)sendMessageToGirl:(NSString *)content;@end/*******************************************************/\n/********************执行协议的类.m*************************/#warning协议第五步指定代理人@implementationBoy\n-(void)sendMessageToGirl:(NSString*)content\n{\n\n   Girl*aGirl = [[Girlalloc]init];\n\n\n   //指定代理人，一定要找到声明协议类的对象，因为代理人是Girl的一个属性，所以用Girl对象调用属性.\n    aGirl.myDelegate=self;//成为奴隶\n    [aGirlgetMessage:content];\n}\n\n#warning协议第六步实现协议方法\n-(void)makeMoney:(NSString*)text\n{\n   NSLog(@\"%@\",text);\n}@end/******************************************************/\n```","source":"_posts/oc/协议.md","raw":"---\ntitle: 协议\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n协议共分六步：1.声明协议2.声明代理人属性3.执行协议方法4.签订协议5.指定代理人6.实现协议方法/******************声明协议的类****************************/\n\n/******************声明协议的类.h****************************/#warning协议第一步声明协议@protocolMarry <NSObject>\n-(void)makeMoney:(NSString*)text;\n\n@end\n\n#warning协议第二步声明代理人@interfaceGirl :NSObject@property(nonatomic,assign)id<Marry>myDelegate;//assign弱引用，不会对内存引起记数变化\n-(void)getMessage:(NSString*)content;@end/*********************************************************/\n\n\n/******************声明协议的类.m****************************/#warning协议第三步执行协议方法@implementationGirl-(void)getMessage:(NSString*)content\n{\n\n   NSLog(@\"%@\",content);\n   //使用代理人去执行协议方法\n    [self.myDelegate makeMoney:@\"赶快去赚钱!!!\"];\n   \n}@end/******************************************************/\n\n\n/********************执行协议的类*************************/\n\n/********************执行协议的类.h***********************/#warning协议第四步签订协议#import\"Girl.h\"@interfaceBoy :NSObject<Marry>\n-(void)sendMessageToGirl:(NSString *)content;@end/*******************************************************/\n/********************执行协议的类.m*************************/#warning协议第五步指定代理人@implementationBoy\n-(void)sendMessageToGirl:(NSString*)content\n{\n\n   Girl*aGirl = [[Girlalloc]init];\n\n\n   //指定代理人，一定要找到声明协议类的对象，因为代理人是Girl的一个属性，所以用Girl对象调用属性.\n    aGirl.myDelegate=self;//成为奴隶\n    [aGirlgetMessage:content];\n}\n\n#warning协议第六步实现协议方法\n-(void)makeMoney:(NSString*)text\n{\n   NSLog(@\"%@\",text);\n}@end/******************************************************/\n```","slug":"oc/协议","published":1,"updated":"2016-10-08T08:37:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98w003w21xwfhouxrp8","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">协议共分六步：<span class=\"number\">1.</span>声明协议<span class=\"number\">2.</span>声明代理人属性<span class=\"number\">3.</span>执行协议方法<span class=\"number\">4.</span>签订协议<span class=\"number\">5.</span>指定代理人<span class=\"number\">6.</span>实现协议方法<span class=\"comment\">/******************声明协议的类****************************/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/******************声明协议的类.h****************************/</span><span class=\"meta\">#warning协议第一步声明协议@protocolMarry <span class=\"meta-string\">&lt;NSObject&gt;</span></span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)makeMoney:(<span class=\"built_in\">NSString</span>*)text;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#warning协议第二步声明代理人@interfaceGirl :NSObject@property(nonatomic,assign)id<span class=\"meta-string\">&lt;Marry&gt;</span>myDelegate;//assign弱引用，不会对内存引起记数变化</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)getMessage:(<span class=\"built_in\">NSString</span>*)content;<span class=\"keyword\">@end</span><span class=\"comment\">/*********************************************************/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/******************声明协议的类.m****************************/</span><span class=\"meta\">#warning协议第三步执行协议方法@implementationGirl-(void)getMessage:(NSString*)content</span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,content);</div><div class=\"line\">   <span class=\"comment\">//使用代理人去执行协议方法</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.myDelegate makeMoney:<span class=\"string\">@\"赶快去赚钱!!!\"</span>];</div><div class=\"line\">   </div><div class=\"line\">&#125;<span class=\"keyword\">@end</span><span class=\"comment\">/******************************************************/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/********************执行协议的类*************************/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/********************执行协议的类.h***********************/</span><span class=\"meta\">#warning协议第四步签订协议#import<span class=\"meta-string\">\"Girl.h\"</span>@interfaceBoy :NSObject<span class=\"meta-string\">&lt;Marry&gt;</span></span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)sendMessageToGirl:(<span class=\"built_in\">NSString</span> *)content;<span class=\"keyword\">@end</span><span class=\"comment\">/*******************************************************/</span></div><div class=\"line\"><span class=\"comment\">/********************执行协议的类.m*************************/</span><span class=\"meta\">#warning协议第五步指定代理人@implementationBoy</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)sendMessageToGirl:(<span class=\"built_in\">NSString</span>*)content</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">   Girl*aGirl = [[Girlalloc]init];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//指定代理人，一定要找到声明协议类的对象，因为代理人是Girl的一个属性，所以用Girl对象调用属性.</span></div><div class=\"line\">    aGirl.myDelegate=<span class=\"keyword\">self</span>;<span class=\"comment\">//成为奴隶</span></div><div class=\"line\">    [aGirlgetMessage:content];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#warning协议第六步实现协议方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)makeMoney:(<span class=\"built_in\">NSString</span>*)text</div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,text);</div><div class=\"line\">&#125;<span class=\"keyword\">@end</span><span class=\"comment\">/******************************************************/</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">协议共分六步：<span class=\"number\">1.</span>声明协议<span class=\"number\">2.</span>声明代理人属性<span class=\"number\">3.</span>执行协议方法<span class=\"number\">4.</span>签订协议<span class=\"number\">5.</span>指定代理人<span class=\"number\">6.</span>实现协议方法<span class=\"comment\">/******************声明协议的类****************************/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/******************声明协议的类.h****************************/</span><span class=\"meta\">#warning协议第一步声明协议@protocolMarry <span class=\"meta-string\">&lt;NSObject&gt;</span></span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)makeMoney:(<span class=\"built_in\">NSString</span>*)text;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#warning协议第二步声明代理人@interfaceGirl :NSObject@property(nonatomic,assign)id<span class=\"meta-string\">&lt;Marry&gt;</span>myDelegate;//assign弱引用，不会对内存引起记数变化</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)getMessage:(<span class=\"built_in\">NSString</span>*)content;<span class=\"keyword\">@end</span><span class=\"comment\">/*********************************************************/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/******************声明协议的类.m****************************/</span><span class=\"meta\">#warning协议第三步执行协议方法@implementationGirl-(void)getMessage:(NSString*)content</span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,content);</div><div class=\"line\">   <span class=\"comment\">//使用代理人去执行协议方法</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.myDelegate makeMoney:<span class=\"string\">@\"赶快去赚钱!!!\"</span>];</div><div class=\"line\">   </div><div class=\"line\">&#125;<span class=\"keyword\">@end</span><span class=\"comment\">/******************************************************/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/********************执行协议的类*************************/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/********************执行协议的类.h***********************/</span><span class=\"meta\">#warning协议第四步签订协议#import<span class=\"meta-string\">\"Girl.h\"</span>@interfaceBoy :NSObject<span class=\"meta-string\">&lt;Marry&gt;</span></span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)sendMessageToGirl:(<span class=\"built_in\">NSString</span> *)content;<span class=\"keyword\">@end</span><span class=\"comment\">/*******************************************************/</span></div><div class=\"line\"><span class=\"comment\">/********************执行协议的类.m*************************/</span><span class=\"meta\">#warning协议第五步指定代理人@implementationBoy</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)sendMessageToGirl:(<span class=\"built_in\">NSString</span>*)content</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">   Girl*aGirl = [[Girlalloc]init];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//指定代理人，一定要找到声明协议类的对象，因为代理人是Girl的一个属性，所以用Girl对象调用属性.</span></div><div class=\"line\">    aGirl.myDelegate=<span class=\"keyword\">self</span>;<span class=\"comment\">//成为奴隶</span></div><div class=\"line\">    [aGirlgetMessage:content];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#warning协议第六步实现协议方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)makeMoney:(<span class=\"built_in\">NSString</span>*)text</div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,text);</div><div class=\"line\">&#125;<span class=\"keyword\">@end</span><span class=\"comment\">/******************************************************/</span></div></pre></td></tr></table></figure>"},{"title":"单例模式","date":"2016-10-08T03:39:43.000Z","_content":"单例模式：传值\n    单一的实例 唯一的对象 全工程中唯一的一个对象\n    作用是通过单例来保存工程中的多个页面中共享的对象和数据\n    生命周期和程序的生命周期一样 当程序结束时单例对象释放掉\n<!-- more -->\n/*****************单例类.h****************************/\n继承自NSObject：因为只处理数据，不需要显示，不需要控制传值\n#import<Foundation/Foundation.h>\n\n@interface DataHandle : NSObject\n\n+(instancetype)shareDateHandle;\n@property(nonatomic,copy)NSString *dataTitle;\n@property(nonatomic,retain)NSMutableArray *allKeysArray;\n\n@end\n/******************************************************/\n\n/*****************单例类.m****************************/\n#import \"DataHandle.h\"\n\n@implementation DataHandle\n+(instancetype)shareDateHandle\n{\n   \n    //static声明静态变量\n    //特点：静态变量存储在静态区（全局区）只能初始化一次\n   \n    static  DataHandle  *dataHandle = nil;\n    if (dataHandle == nil) {\n        dataHandle = [[DataHandle alloc]init];\n        [dataHandle setStudentDic];\n    }\n \n\n    return dataHandle;\n   \n}\n@end\n/*****************************************************/\n\n\n/***********************取出数据************************/\n-(void)setStudentDic\n{\n    NSString *filePath = [[NSBundle mainBundle] pathForResource:@\"Students\" ofType:@\"plist\"];\n    //通过文件路径取出字典\n    NSMutableDictionary *bigDic = [NSMutableDictionary dictionaryWithContentsOfFile:filePath];\n    NSLog(@\"bigDic = %@\",bigDic);\n\n    self.allStuDic = [NSMutableDictionary dictionary];\n\n    for (NSString *key in bigDic) {\n\n        NSMutableArray *array = [bigDic objectForKey:key];\n\n        NSMutableArray *stuArray = [NSMutableArray array];\n\n        for (NSMutableDictionary *dic in array) {\n\n            Student *stu = [[Student alloc] init];\n//            stu.name = [dic objectForKey:@\"name\"];\n            //使用KVC间接给属性赋值\n[stu setValuesForKeysWithDictionary:dic];\n            [stuArray addObject:stu];\n            [stu release];\n\n        }\n\n        [self.allStuDic setObject:stuArray forKey:key];\n\n    }\n\n\n     self.allKeysArray = [NSMutableArray       arrayWithArray:self.allStuDic.allKeys];\n\n    //数组排序\n    [self.allKeysArray sortUsingSelector:@selector(compare:)];\n\n\n}\n/****************************************************/\n\n\n\n\n\n```\n\n","source":"_posts/oc/单例模式.md","raw":"---\ntitle: 单例模式\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n单例模式：传值\n    单一的实例 唯一的对象 全工程中唯一的一个对象\n    作用是通过单例来保存工程中的多个页面中共享的对象和数据\n    生命周期和程序的生命周期一样 当程序结束时单例对象释放掉\n<!-- more -->\n/*****************单例类.h****************************/\n继承自NSObject：因为只处理数据，不需要显示，不需要控制传值\n#import<Foundation/Foundation.h>\n\n@interface DataHandle : NSObject\n\n+(instancetype)shareDateHandle;\n@property(nonatomic,copy)NSString *dataTitle;\n@property(nonatomic,retain)NSMutableArray *allKeysArray;\n\n@end\n/******************************************************/\n\n/*****************单例类.m****************************/\n#import \"DataHandle.h\"\n\n@implementation DataHandle\n+(instancetype)shareDateHandle\n{\n   \n    //static声明静态变量\n    //特点：静态变量存储在静态区（全局区）只能初始化一次\n   \n    static  DataHandle  *dataHandle = nil;\n    if (dataHandle == nil) {\n        dataHandle = [[DataHandle alloc]init];\n        [dataHandle setStudentDic];\n    }\n \n\n    return dataHandle;\n   \n}\n@end\n/*****************************************************/\n\n\n/***********************取出数据************************/\n-(void)setStudentDic\n{\n    NSString *filePath = [[NSBundle mainBundle] pathForResource:@\"Students\" ofType:@\"plist\"];\n    //通过文件路径取出字典\n    NSMutableDictionary *bigDic = [NSMutableDictionary dictionaryWithContentsOfFile:filePath];\n    NSLog(@\"bigDic = %@\",bigDic);\n\n    self.allStuDic = [NSMutableDictionary dictionary];\n\n    for (NSString *key in bigDic) {\n\n        NSMutableArray *array = [bigDic objectForKey:key];\n\n        NSMutableArray *stuArray = [NSMutableArray array];\n\n        for (NSMutableDictionary *dic in array) {\n\n            Student *stu = [[Student alloc] init];\n//            stu.name = [dic objectForKey:@\"name\"];\n            //使用KVC间接给属性赋值\n[stu setValuesForKeysWithDictionary:dic];\n            [stuArray addObject:stu];\n            [stu release];\n\n        }\n\n        [self.allStuDic setObject:stuArray forKey:key];\n\n    }\n\n\n     self.allKeysArray = [NSMutableArray       arrayWithArray:self.allStuDic.allKeys];\n\n    //数组排序\n    [self.allKeysArray sortUsingSelector:@selector(compare:)];\n\n\n}\n/****************************************************/\n\n\n\n\n\n```\n\n","slug":"oc/单例模式","published":1,"updated":"2016-10-08T06:03:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98x003y21xw7m875skh","content":"<p>单例模式：传值<br>    单一的实例 唯一的对象 全工程中唯一的一个对象<br>    作用是通过单例来保存工程中的多个页面中共享的对象和数据<br>    生命周期和程序的生命周期一样 当程序结束时单例对象释放掉<br><a id=\"more\"></a><br>/<strong><strong><strong><strong>*</strong></strong></strong></strong>单例类.h<strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong>/<br>继承自NSObject：因为只处理数据，不需要显示，不需要控制传值</p>\n<p>#import<foundation foundation.h=\"\"></foundation></p>\n<p>@interface DataHandle : NSObject</p>\n<p>+(instancetype)shareDateHandle;<br>@property(nonatomic,copy)NSString <em>dataTitle;<br>@property(nonatomic,retain)NSMutableArray </em>allKeysArray;</p>\n<p>@end<br>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p>\n<p>/<strong><strong><strong><strong>*</strong></strong></strong></strong>单例类.m<strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong>/</p>\n<p>#import “DataHandle.h”</p>\n<p>@implementation DataHandle<br>+(instancetype)shareDateHandle<br>{</p>\n<pre><code>//static声明静态变量\n//特点：静态变量存储在静态区（全局区）只能初始化一次\n\nstatic  DataHandle  *dataHandle = nil;\nif (dataHandle == nil) {\n    dataHandle = [[DataHandle alloc]init];\n    [dataHandle setStudentDic];\n}\n\n\nreturn dataHandle;\n</code></pre><p>}<br>@end<br>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p>\n<p>/<strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong>取出数据<strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong>/<br>-(void)setStudentDic<br>{<br>    NSString <em>filePath = [[NSBundle mainBundle] pathForResource:@”Students” ofType:@”plist”];<br>    //通过文件路径取出字典<br>    NSMutableDictionary </em>bigDic = [NSMutableDictionary dictionaryWithContentsOfFile:filePath];<br>    NSLog(@”bigDic = %@”,bigDic);</p>\n<pre><code>self.allStuDic = [NSMutableDictionary dictionary];\n\nfor (NSString *key in bigDic) {\n\n    NSMutableArray *array = [bigDic objectForKey:key];\n\n    NSMutableArray *stuArray = [NSMutableArray array];\n\n    for (NSMutableDictionary *dic in array) {\n\n        Student *stu = [[Student alloc] init];\n</code></pre><p>//            stu.name = [dic objectForKey:@”name”];<br>            //使用KVC间接给属性赋值<br>[stu setValuesForKeysWithDictionary:dic];<br>            [stuArray addObject:stu];<br>            [stu release];</p>\n<pre><code>    }\n\n    [self.allStuDic setObject:stuArray forKey:key];\n\n}\n\n\n self.allKeysArray = [NSMutableArray       arrayWithArray:self.allStuDic.allKeys];\n\n//数组排序\n[self.allKeysArray sortUsingSelector:@selector(compare:)];\n</code></pre><p>}<br>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p>\n<p>```</p>\n","excerpt":"<p>单例模式：传值<br>    单一的实例 唯一的对象 全工程中唯一的一个对象<br>    作用是通过单例来保存工程中的多个页面中共享的对象和数据<br>    生命周期和程序的生命周期一样 当程序结束时单例对象释放掉<br>","more":"<br>/<strong><strong><strong><strong>*</strong></strong></strong></strong>单例类.h<strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong>/<br>继承自NSObject：因为只处理数据，不需要显示，不需要控制传值</p>\n<p>#import<Foundation/Foundation.h></p>\n<p>@interface DataHandle : NSObject</p>\n<p>+(instancetype)shareDateHandle;<br>@property(nonatomic,copy)NSString <em>dataTitle;<br>@property(nonatomic,retain)NSMutableArray </em>allKeysArray;</p>\n<p>@end<br>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p>\n<p>/<strong><strong><strong><strong>*</strong></strong></strong></strong>单例类.m<strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong>/</p>\n<p>#import “DataHandle.h”</p>\n<p>@implementation DataHandle<br>+(instancetype)shareDateHandle<br>{</p>\n<pre><code>//static声明静态变量\n//特点：静态变量存储在静态区（全局区）只能初始化一次\n\nstatic  DataHandle  *dataHandle = nil;\nif (dataHandle == nil) {\n    dataHandle = [[DataHandle alloc]init];\n    [dataHandle setStudentDic];\n}\n\n\nreturn dataHandle;\n</code></pre><p>}<br>@end<br>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p>\n<p>/<strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong>取出数据<strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong>/<br>-(void)setStudentDic<br>{<br>    NSString <em>filePath = [[NSBundle mainBundle] pathForResource:@”Students” ofType:@”plist”];<br>    //通过文件路径取出字典<br>    NSMutableDictionary </em>bigDic = [NSMutableDictionary dictionaryWithContentsOfFile:filePath];<br>    NSLog(@”bigDic = %@”,bigDic);</p>\n<pre><code>self.allStuDic = [NSMutableDictionary dictionary];\n\nfor (NSString *key in bigDic) {\n\n    NSMutableArray *array = [bigDic objectForKey:key];\n\n    NSMutableArray *stuArray = [NSMutableArray array];\n\n    for (NSMutableDictionary *dic in array) {\n\n        Student *stu = [[Student alloc] init];\n</code></pre><p>//            stu.name = [dic objectForKey:@”name”];<br>            //使用KVC间接给属性赋值<br>[stu setValuesForKeysWithDictionary:dic];<br>            [stuArray addObject:stu];<br>            [stu release];</p>\n<pre><code>    }\n\n    [self.allStuDic setObject:stuArray forKey:key];\n\n}\n\n\n self.allKeysArray = [NSMutableArray       arrayWithArray:self.allStuDic.allKeys];\n\n//数组排序\n[self.allKeysArray sortUsingSelector:@selector(compare:)];\n</code></pre><p>}<br>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p>\n<p>```</p>"},{"title":"和CFStringRef相关的CFSTR与和NSString相关的","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\nCoreFoundation里面的CFStringRef和NSString*是可以直接转换的，两种也都有一个相似的用来直接赋常量的操作。例如：\n\nCFStringRef a = CFSTR(\"a\");\nNSString *b = @\"b\";\n\nCFSTR是一个宏，这个宏的定义可能是CFStringMakeConstantString，也可能是__builtin___CFStringMakeConstantString。如果是CFStringMakeConstantString，看看CFStringMakeConstantString的实现就会明白，CFSTR(\"a\")是存放在一个全局字典里面的，下次用到CFSTR(\"a\")的时候先查字典里面有没有，如果有就是用存在的，如果没有则分配一个，并且放到字典里面。\n\n所以这里有两个需要注意的，一：CFSTR分配出来的字符串对象是不能自己释放的，如果你释放了下次在使用就会使用到一个野对象；二：多线程使用可能会出问题，因为全局的字典是没有锁的。\n\n而NSString的@有些不一样，应该和__builtin___CFStringMakeConstantString有些类似，允许你多线程使用，同样也不需要你自己去release，可以理解为b是一个autorelease的对象，系统会自己自动收回b。如果想长时间持有b那就retain，但不要忘了release。\n\n他们俩直接类型转换就可以了，比如\nCFStringRef aCFString = (CFStringRef)aNSString;\nNSString *aNSString = (NSString *)aCFString;\n```\n\n","source":"_posts/oc/和CFStringRef相关的CFSTR与和NSString相关的@.md","raw":"---\ntitle: 和CFStringRef相关的CFSTR与和NSString相关的\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\nCoreFoundation里面的CFStringRef和NSString*是可以直接转换的，两种也都有一个相似的用来直接赋常量的操作。例如：\n\nCFStringRef a = CFSTR(\"a\");\nNSString *b = @\"b\";\n\nCFSTR是一个宏，这个宏的定义可能是CFStringMakeConstantString，也可能是__builtin___CFStringMakeConstantString。如果是CFStringMakeConstantString，看看CFStringMakeConstantString的实现就会明白，CFSTR(\"a\")是存放在一个全局字典里面的，下次用到CFSTR(\"a\")的时候先查字典里面有没有，如果有就是用存在的，如果没有则分配一个，并且放到字典里面。\n\n所以这里有两个需要注意的，一：CFSTR分配出来的字符串对象是不能自己释放的，如果你释放了下次在使用就会使用到一个野对象；二：多线程使用可能会出问题，因为全局的字典是没有锁的。\n\n而NSString的@有些不一样，应该和__builtin___CFStringMakeConstantString有些类似，允许你多线程使用，同样也不需要你自己去release，可以理解为b是一个autorelease的对象，系统会自己自动收回b。如果想长时间持有b那就retain，但不要忘了release。\n\n他们俩直接类型转换就可以了，比如\nCFStringRef aCFString = (CFStringRef)aNSString;\nNSString *aNSString = (NSString *)aCFString;\n```\n\n","slug":"oc/和CFStringRef相关的CFSTR与和NSString相关的@","published":1,"updated":"2016-10-08T09:16:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98x004021xwg5p03j1t","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">CoreFoundation里面的<span class=\"built_in\">CFStringRef</span>和<span class=\"built_in\">NSString</span>*是可以直接转换的，两种也都有一个相似的用来直接赋常量的操作。例如：</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">CFStringRef</span> a = <span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"a\"</span>);</div><div class=\"line\"><span class=\"built_in\">NSString</span> *b = <span class=\"string\">@\"b\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">CFSTR</span>是一个宏，这个宏的定义可能是<span class=\"built_in\">CFStringMakeConstantString</span>，也可能是__builtin___CFStringMakeConstantString。如果是<span class=\"built_in\">CFStringMakeConstantString</span>，看看<span class=\"built_in\">CFStringMakeConstantString</span>的实现就会明白，<span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"a\"</span>)是存放在一个全局字典里面的，下次用到<span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"a\"</span>)的时候先查字典里面有没有，如果有就是用存在的，如果没有则分配一个，并且放到字典里面。</div><div class=\"line\"></div><div class=\"line\">所以这里有两个需要注意的，一：<span class=\"built_in\">CFSTR</span>分配出来的字符串对象是不能自己释放的，如果你释放了下次在使用就会使用到一个野对象；二：多线程使用可能会出问题，因为全局的字典是没有锁的。</div><div class=\"line\"></div><div class=\"line\">而<span class=\"built_in\">NSString</span>的@有些不一样，应该和__builtin___CFStringMakeConstantString有些类似，允许你多线程使用，同样也不需要你自己去release，可以理解为b是一个autorelease的对象，系统会自己自动收回b。如果想长时间持有b那就<span class=\"keyword\">retain</span>，但不要忘了release。</div><div class=\"line\"></div><div class=\"line\">他们俩直接类型转换就可以了，比如</div><div class=\"line\"><span class=\"built_in\">CFStringRef</span> aCFString = (<span class=\"built_in\">CFStringRef</span>)aNSString;</div><div class=\"line\"><span class=\"built_in\">NSString</span> *aNSString = (<span class=\"built_in\">NSString</span> *)aCFString;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">CoreFoundation里面的<span class=\"built_in\">CFStringRef</span>和<span class=\"built_in\">NSString</span>*是可以直接转换的，两种也都有一个相似的用来直接赋常量的操作。例如：</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">CFStringRef</span> a = <span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"a\"</span>);</div><div class=\"line\"><span class=\"built_in\">NSString</span> *b = <span class=\"string\">@\"b\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">CFSTR</span>是一个宏，这个宏的定义可能是<span class=\"built_in\">CFStringMakeConstantString</span>，也可能是__builtin___CFStringMakeConstantString。如果是<span class=\"built_in\">CFStringMakeConstantString</span>，看看<span class=\"built_in\">CFStringMakeConstantString</span>的实现就会明白，<span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"a\"</span>)是存放在一个全局字典里面的，下次用到<span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"a\"</span>)的时候先查字典里面有没有，如果有就是用存在的，如果没有则分配一个，并且放到字典里面。</div><div class=\"line\"></div><div class=\"line\">所以这里有两个需要注意的，一：<span class=\"built_in\">CFSTR</span>分配出来的字符串对象是不能自己释放的，如果你释放了下次在使用就会使用到一个野对象；二：多线程使用可能会出问题，因为全局的字典是没有锁的。</div><div class=\"line\"></div><div class=\"line\">而<span class=\"built_in\">NSString</span>的@有些不一样，应该和__builtin___CFStringMakeConstantString有些类似，允许你多线程使用，同样也不需要你自己去release，可以理解为b是一个autorelease的对象，系统会自己自动收回b。如果想长时间持有b那就<span class=\"keyword\">retain</span>，但不要忘了release。</div><div class=\"line\"></div><div class=\"line\">他们俩直接类型转换就可以了，比如</div><div class=\"line\"><span class=\"built_in\">CFStringRef</span> aCFString = (<span class=\"built_in\">CFStringRef</span>)aNSString;</div><div class=\"line\"><span class=\"built_in\">NSString</span> *aNSString = (<span class=\"built_in\">NSString</span> *)aCFString;</div></pre></td></tr></table></figure>"},{"title":"在c的函数中调用oc的方法","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\nvoid soundCompleteCallback(SystemSoundID sound,void * clientData) {\n\n \n    [[Single shareDateHandle] a];\n}\n在程序中创建个单例\n使用单例调用方法，单例属于全局性的指针\n```\n\n","source":"_posts/oc/在c的函数中调用oc的方法.md","raw":"---\ntitle: 在c的函数中调用oc的方法\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\nvoid soundCompleteCallback(SystemSoundID sound,void * clientData) {\n\n \n    [[Single shareDateHandle] a];\n}\n在程序中创建个单例\n使用单例调用方法，单例属于全局性的指针\n```\n\n","slug":"oc/在c的函数中调用oc的方法","published":1,"updated":"2016-10-08T09:16:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98y004221xwi3gu7348","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> soundCompleteCallback(SystemSoundID sound,<span class=\"keyword\">void</span> * clientData) &#123;</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\">    [[Single shareDateHandle] a];</div><div class=\"line\">&#125;</div><div class=\"line\">在程序中创建个单例</div><div class=\"line\">使用单例调用方法，单例属于全局性的指针</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> soundCompleteCallback(SystemSoundID sound,<span class=\"keyword\">void</span> * clientData) &#123;</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\">    [[Single shareDateHandle] a];</div><div class=\"line\">&#125;</div><div class=\"line\">在程序中创建个单例</div><div class=\"line\">使用单例调用方法，单例属于全局性的指针</div></pre></td></tr></table></figure>"},{"title":"夜间模式","date":"2016-10-08T03:39:43.000Z","_content":"夜间模式：利用继承与NSUserDefaults1.创建基类，负责夜间模式的转换2.所有的类都继承于基类，基类的模式改变了，所有子类的模式也改变了3.夜间模式触发的按钮发送通知4.利用NSUserDefault把模式保存到本地\n<!-- more -->\n/*************基类.h***********/#import\"BaseViewController.h\"\n\n@interfaceBaseViewController()\n\n@end\n\n@implementationBaseViewController\n\n- (void)viewDidLoad {\n    [superviewDidLoad];\n   // Do any additional setup after loading the view.\n   \n   \n   //父亲默认颜色\n   self.view.backgroundColor= [UIColorredColor];\n   self.navigationController.navigationBar.barTintColor= [UIColorgreenColor];\n   \n   \n   //注册通知\n    [[NSNotificationCenterdefaultCenter]addObserver:selfselector:@selector(changeColor:)name:@\"changeColor\"object:nil];\n   \n   //判断模式\n   NSString*str = [[NSUserDefaultsstandardUserDefaults]objectForKey:@\"night\"];\n   if([strisEqualToString:@\"yes\"]) {\n       self.view.backgroundColor= [UIColorlightGrayColor];\n       self.navigationController.navigationBar.barTintColor= [UIColorblackColor];\n    }\n}\n//接受通知触发的方法\n-(void)changeColor:(NSNotification*)notification\n{\n   \n   NSString*str = [[NSUserDefaultsstandardUserDefaults]objectForKey:@\"night\"];\n   if([strisEqualToString:@\"yes\"]) {\n       self.view.backgroundColor= [UIColorlightGrayColor];\n       self.navigationController.navigationBar.barTintColor= [UIColorblackColor];\n    }else\n    {\n       self.view.backgroundColor= [UIColorredColor];\n       self.navigationController.navigationBar.barTintColor= [UIColorgreenColor];\n    }\n\n   \n}\n- (void)didReceiveMemoryWarning {\n    [superdidReceiveMemoryWarning];\n   // Dispose of any resources that can be recreated.}@end/*************基类.h***************/\n/*************夜间模式触发的按钮***************/ UIButton*button = [UIButtonbuttonWithType:UIButtonTypeCustom];\n    [self.viewaddSubview:button];\n    button.frame=CGRectMake(100,100,200,40);\n    button.backgroundColor= [UIColorblackColor];\n   \n    [buttonaddTarget:selfaction:@selector(buttonAction)forControlEvents:UIControlEventTouchUpInside];\n\n   \n}\n-(void)buttonAction\n{\n   NSString*str = [[NSUserDefaultsstandardUserDefaults]objectForKey:@\"night\"];\n   if([strisEqualToString:@\"yes\"]) {\n        [[NSUserDefaultsstandardUserDefaults]setObject:@\"no\"forKey:@\"night\"];\n       \n        [[NSNotificationCenterdefaultCenter]postNotificationName:@\"changeColor\"object:@\"no\"];\n    }else\n    {\n        [[NSUserDefaultsstandardUserDefaults]setObject:@\"yes\"forKey:@\"night\"];\n       \n        [[NSNotificationCenterdefaultCenter]postNotificationName:@\"changeColor\"object:@\"yes\"];\n    }\n\n   }/*************夜间模式触发的按钮***************/\n","source":"_posts/oc/夜间模式.md","raw":"---\ntitle: 夜间模式\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n夜间模式：利用继承与NSUserDefaults1.创建基类，负责夜间模式的转换2.所有的类都继承于基类，基类的模式改变了，所有子类的模式也改变了3.夜间模式触发的按钮发送通知4.利用NSUserDefault把模式保存到本地\n<!-- more -->\n/*************基类.h***********/#import\"BaseViewController.h\"\n\n@interfaceBaseViewController()\n\n@end\n\n@implementationBaseViewController\n\n- (void)viewDidLoad {\n    [superviewDidLoad];\n   // Do any additional setup after loading the view.\n   \n   \n   //父亲默认颜色\n   self.view.backgroundColor= [UIColorredColor];\n   self.navigationController.navigationBar.barTintColor= [UIColorgreenColor];\n   \n   \n   //注册通知\n    [[NSNotificationCenterdefaultCenter]addObserver:selfselector:@selector(changeColor:)name:@\"changeColor\"object:nil];\n   \n   //判断模式\n   NSString*str = [[NSUserDefaultsstandardUserDefaults]objectForKey:@\"night\"];\n   if([strisEqualToString:@\"yes\"]) {\n       self.view.backgroundColor= [UIColorlightGrayColor];\n       self.navigationController.navigationBar.barTintColor= [UIColorblackColor];\n    }\n}\n//接受通知触发的方法\n-(void)changeColor:(NSNotification*)notification\n{\n   \n   NSString*str = [[NSUserDefaultsstandardUserDefaults]objectForKey:@\"night\"];\n   if([strisEqualToString:@\"yes\"]) {\n       self.view.backgroundColor= [UIColorlightGrayColor];\n       self.navigationController.navigationBar.barTintColor= [UIColorblackColor];\n    }else\n    {\n       self.view.backgroundColor= [UIColorredColor];\n       self.navigationController.navigationBar.barTintColor= [UIColorgreenColor];\n    }\n\n   \n}\n- (void)didReceiveMemoryWarning {\n    [superdidReceiveMemoryWarning];\n   // Dispose of any resources that can be recreated.}@end/*************基类.h***************/\n/*************夜间模式触发的按钮***************/ UIButton*button = [UIButtonbuttonWithType:UIButtonTypeCustom];\n    [self.viewaddSubview:button];\n    button.frame=CGRectMake(100,100,200,40);\n    button.backgroundColor= [UIColorblackColor];\n   \n    [buttonaddTarget:selfaction:@selector(buttonAction)forControlEvents:UIControlEventTouchUpInside];\n\n   \n}\n-(void)buttonAction\n{\n   NSString*str = [[NSUserDefaultsstandardUserDefaults]objectForKey:@\"night\"];\n   if([strisEqualToString:@\"yes\"]) {\n        [[NSUserDefaultsstandardUserDefaults]setObject:@\"no\"forKey:@\"night\"];\n       \n        [[NSNotificationCenterdefaultCenter]postNotificationName:@\"changeColor\"object:@\"no\"];\n    }else\n    {\n        [[NSUserDefaultsstandardUserDefaults]setObject:@\"yes\"forKey:@\"night\"];\n       \n        [[NSNotificationCenterdefaultCenter]postNotificationName:@\"changeColor\"object:@\"yes\"];\n    }\n\n   }/*************夜间模式触发的按钮***************/\n","slug":"oc/夜间模式","published":1,"updated":"2016-10-08T06:04:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms98z004421xw2olzfs8d","content":"<p>夜间模式：利用继承与NSUserDefaults1.创建基类，负责夜间模式的转换2.所有的类都继承于基类，基类的模式改变了，所有子类的模式也改变了3.夜间模式触发的按钮发送通知4.利用NSUserDefault把模式保存到本地<br><a id=\"more\"></a><br>/<strong><strong><strong>*</strong></strong></strong>基类.h<strong><strong><em>*</em></strong></strong>/#import”BaseViewController.h”</p>\n<p>@interfaceBaseViewController()</p>\n<p>@end</p>\n<p>@implementationBaseViewController</p>\n<ul>\n<li>(void)viewDidLoad {<br>  [superviewDidLoad];<br> // Do any additional setup after loading the view.</li>\n</ul>\n<p>   //父亲默认颜色<br>   self.view.backgroundColor= [UIColorredColor];<br>   self.navigationController.navigationBar.barTintColor= [UIColorgreenColor];</p>\n<p>   //注册通知<br>    [[NSNotificationCenterdefaultCenter]addObserver:selfselector:@selector(changeColor:)name:@”changeColor”object:nil];</p>\n<p>   //判断模式<br>   NSString<em>str = [[NSUserDefaultsstandardUserDefaults]objectForKey:@”night”];<br>   if([strisEqualToString:@”yes”]) {<br>       self.view.backgroundColor= [UIColorlightGrayColor];<br>       self.navigationController.navigationBar.barTintColor= [UIColorblackColor];<br>    }<br>}<br>//接受通知触发的方法<br>-(void)changeColor:(NSNotification</em>)notification<br>{</p>\n<p>   NSString*str = [[NSUserDefaultsstandardUserDefaults]objectForKey:@”night”];<br>   if([strisEqualToString:@”yes”]) {<br>       self.view.backgroundColor= [UIColorlightGrayColor];<br>       self.navigationController.navigationBar.barTintColor= [UIColorblackColor];<br>    }else<br>    {<br>       self.view.backgroundColor= [UIColorredColor];<br>       self.navigationController.navigationBar.barTintColor= [UIColorgreenColor];<br>    }</p>\n<p>}</p>\n<ul>\n<li><p>(void)didReceiveMemoryWarning {<br>  [superdidReceiveMemoryWarning];<br> // Dispose of any resources that can be recreated.}@end/<strong><strong><strong>*</strong></strong></strong>基类.h<strong><strong><strong><em>*</em></strong></strong></strong>/<br>/<strong><strong><strong>*</strong></strong></strong>夜间模式触发的按钮<strong><strong><strong><em>*</em></strong></strong></strong>/ UIButton*button = [UIButtonbuttonWithType:UIButtonTypeCustom];<br>  [self.viewaddSubview:button];<br>  button.frame=CGRectMake(100,100,200,40);<br>  button.backgroundColor= [UIColorblackColor];</p>\n<p>  [buttonaddTarget:selfaction:@selector(buttonAction)forControlEvents:UIControlEventTouchUpInside];</p>\n</li>\n</ul>\n<p>}<br>-(void)buttonAction<br>{<br>   NSString*str = [[NSUserDefaultsstandardUserDefaults]objectForKey:@”night”];<br>   if([strisEqualToString:@”yes”]) {<br>        [[NSUserDefaultsstandardUserDefaults]setObject:@”no”forKey:@”night”];</p>\n<pre><code>    [[NSNotificationCenterdefaultCenter]postNotificationName:@&quot;changeColor&quot;object:@&quot;no&quot;];\n}else\n{\n    [[NSUserDefaultsstandardUserDefaults]setObject:@&quot;yes&quot;forKey:@&quot;night&quot;];\n\n    [[NSNotificationCenterdefaultCenter]postNotificationName:@&quot;changeColor&quot;object:@&quot;yes&quot;];\n}\n</code></pre><p>   }/<strong><strong><strong>*</strong></strong></strong>夜间模式触发的按钮<strong><strong><strong><em>*</em></strong></strong></strong>/</p>\n","excerpt":"<p>夜间模式：利用继承与NSUserDefaults1.创建基类，负责夜间模式的转换2.所有的类都继承于基类，基类的模式改变了，所有子类的模式也改变了3.夜间模式触发的按钮发送通知4.利用NSUserDefault把模式保存到本地<br>","more":"<br>/<strong><strong><strong>*</strong></strong></strong>基类.h<strong><strong><em>*</em></strong></strong>/#import”BaseViewController.h”</p>\n<p>@interfaceBaseViewController()</p>\n<p>@end</p>\n<p>@implementationBaseViewController</p>\n<ul>\n<li>(void)viewDidLoad {<br>  [superviewDidLoad];<br> // Do any additional setup after loading the view.</li>\n</ul>\n<p>   //父亲默认颜色<br>   self.view.backgroundColor= [UIColorredColor];<br>   self.navigationController.navigationBar.barTintColor= [UIColorgreenColor];</p>\n<p>   //注册通知<br>    [[NSNotificationCenterdefaultCenter]addObserver:selfselector:@selector(changeColor:)name:@”changeColor”object:nil];</p>\n<p>   //判断模式<br>   NSString<em>str = [[NSUserDefaultsstandardUserDefaults]objectForKey:@”night”];<br>   if([strisEqualToString:@”yes”]) {<br>       self.view.backgroundColor= [UIColorlightGrayColor];<br>       self.navigationController.navigationBar.barTintColor= [UIColorblackColor];<br>    }<br>}<br>//接受通知触发的方法<br>-(void)changeColor:(NSNotification</em>)notification<br>{</p>\n<p>   NSString*str = [[NSUserDefaultsstandardUserDefaults]objectForKey:@”night”];<br>   if([strisEqualToString:@”yes”]) {<br>       self.view.backgroundColor= [UIColorlightGrayColor];<br>       self.navigationController.navigationBar.barTintColor= [UIColorblackColor];<br>    }else<br>    {<br>       self.view.backgroundColor= [UIColorredColor];<br>       self.navigationController.navigationBar.barTintColor= [UIColorgreenColor];<br>    }</p>\n<p>}</p>\n<ul>\n<li><p>(void)didReceiveMemoryWarning {<br>  [superdidReceiveMemoryWarning];<br> // Dispose of any resources that can be recreated.}@end/<strong><strong><strong>*</strong></strong></strong>基类.h<strong><strong><strong><em>*</em></strong></strong></strong>/<br>/<strong><strong><strong>*</strong></strong></strong>夜间模式触发的按钮<strong><strong><strong><em>*</em></strong></strong></strong>/ UIButton*button = [UIButtonbuttonWithType:UIButtonTypeCustom];<br>  [self.viewaddSubview:button];<br>  button.frame=CGRectMake(100,100,200,40);<br>  button.backgroundColor= [UIColorblackColor];</p>\n<p>  [buttonaddTarget:selfaction:@selector(buttonAction)forControlEvents:UIControlEventTouchUpInside];</p>\n</li>\n</ul>\n<p>}<br>-(void)buttonAction<br>{<br>   NSString*str = [[NSUserDefaultsstandardUserDefaults]objectForKey:@”night”];<br>   if([strisEqualToString:@”yes”]) {<br>        [[NSUserDefaultsstandardUserDefaults]setObject:@”no”forKey:@”night”];</p>\n<pre><code>    [[NSNotificationCenterdefaultCenter]postNotificationName:@&quot;changeColor&quot;object:@&quot;no&quot;];\n}else\n{\n    [[NSUserDefaultsstandardUserDefaults]setObject:@&quot;yes&quot;forKey:@&quot;night&quot;];\n\n    [[NSNotificationCenterdefaultCenter]postNotificationName:@&quot;changeColor&quot;object:@&quot;yes&quot;];\n}\n</code></pre><p>   }/<strong><strong><strong>*</strong></strong></strong>夜间模式触发的按钮<strong><strong><strong><em>*</em></strong></strong></strong>/</p>"},{"title":"屏幕横屏竖屏转换","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n  //横屏\n    if ([[UIDevice currentDevice] respondsToSelector:@selector(setOrientation:)]) {\n        SEL selector = NSSelectorFromString(@\"setOrientation:\");\n        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:[UIDevice instanceMethodSignatureForSelector:selector]];\n        [invocation setSelector:selector];\n        [invocation setTarget:[UIDevice currentDevice]];\n        int val = UIInterfaceOrientationLandscapeRight;\n        [invocation setArgument:&val atIndex:2];\n        [invocation invoke];\n    }\n\n    //竖屏\n    if ([[UIDevice currentDevice] respondsToSelector:@selector(setOrientation:)]) {\n        SEL selector = NSSelectorFromString(@\"setOrientation:\");\n        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:[UIDevice instanceMethodSignatureForSelector:selector]];\n        [invocation setSelector:selector];\n        [invocation setTarget:[UIDevice currentDevice]];\n        int val = UIInterfaceOrientationPortrait;\n        [invocation setArgument:&val atIndex:2];\n        [invocation invoke];\n       \n       \n    }\n```\n\n","source":"_posts/oc/屏幕横屏竖屏转换.md","raw":"---\ntitle: 屏幕横屏竖屏转换\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n  //横屏\n    if ([[UIDevice currentDevice] respondsToSelector:@selector(setOrientation:)]) {\n        SEL selector = NSSelectorFromString(@\"setOrientation:\");\n        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:[UIDevice instanceMethodSignatureForSelector:selector]];\n        [invocation setSelector:selector];\n        [invocation setTarget:[UIDevice currentDevice]];\n        int val = UIInterfaceOrientationLandscapeRight;\n        [invocation setArgument:&val atIndex:2];\n        [invocation invoke];\n    }\n\n    //竖屏\n    if ([[UIDevice currentDevice] respondsToSelector:@selector(setOrientation:)]) {\n        SEL selector = NSSelectorFromString(@\"setOrientation:\");\n        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:[UIDevice instanceMethodSignatureForSelector:selector]];\n        [invocation setSelector:selector];\n        [invocation setTarget:[UIDevice currentDevice]];\n        int val = UIInterfaceOrientationPortrait;\n        [invocation setArgument:&val atIndex:2];\n        [invocation invoke];\n       \n       \n    }\n```\n\n","slug":"oc/屏幕横屏竖屏转换","published":1,"updated":"2016-10-08T05:58:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms990004621xwi6azkvhc","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//横屏</span></div><div class=\"line\">  <span class=\"keyword\">if</span> ([[<span class=\"built_in\">UIDevice</span> currentDevice] respondsToSelector:<span class=\"keyword\">@selector</span>(setOrientation:)]) &#123;</div><div class=\"line\">      SEL selector = <span class=\"built_in\">NSSelectorFromString</span>(<span class=\"string\">@\"setOrientation:\"</span>);</div><div class=\"line\">      <span class=\"built_in\">NSInvocation</span> *invocation = [<span class=\"built_in\">NSInvocation</span> invocationWithMethodSignature:[<span class=\"built_in\">UIDevice</span> instanceMethodSignatureForSelector:selector]];</div><div class=\"line\">      [invocation setSelector:selector];</div><div class=\"line\">      [invocation setTarget:[<span class=\"built_in\">UIDevice</span> currentDevice]];</div><div class=\"line\">      <span class=\"keyword\">int</span> val = <span class=\"built_in\">UIInterfaceOrientationLandscapeRight</span>;</div><div class=\"line\">      [invocation setArgument:&amp;val atIndex:<span class=\"number\">2</span>];</div><div class=\"line\">      [invocation invoke];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//竖屏</span></div><div class=\"line\">  <span class=\"keyword\">if</span> ([[<span class=\"built_in\">UIDevice</span> currentDevice] respondsToSelector:<span class=\"keyword\">@selector</span>(setOrientation:)]) &#123;</div><div class=\"line\">      SEL selector = <span class=\"built_in\">NSSelectorFromString</span>(<span class=\"string\">@\"setOrientation:\"</span>);</div><div class=\"line\">      <span class=\"built_in\">NSInvocation</span> *invocation = [<span class=\"built_in\">NSInvocation</span> invocationWithMethodSignature:[<span class=\"built_in\">UIDevice</span> instanceMethodSignatureForSelector:selector]];</div><div class=\"line\">      [invocation setSelector:selector];</div><div class=\"line\">      [invocation setTarget:[<span class=\"built_in\">UIDevice</span> currentDevice]];</div><div class=\"line\">      <span class=\"keyword\">int</span> val = <span class=\"built_in\">UIInterfaceOrientationPortrait</span>;</div><div class=\"line\">      [invocation setArgument:&amp;val atIndex:<span class=\"number\">2</span>];</div><div class=\"line\">      [invocation invoke];</div><div class=\"line\">     </div><div class=\"line\">     </div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//横屏</span></div><div class=\"line\">  <span class=\"keyword\">if</span> ([[<span class=\"built_in\">UIDevice</span> currentDevice] respondsToSelector:<span class=\"keyword\">@selector</span>(setOrientation:)]) &#123;</div><div class=\"line\">      SEL selector = <span class=\"built_in\">NSSelectorFromString</span>(<span class=\"string\">@\"setOrientation:\"</span>);</div><div class=\"line\">      <span class=\"built_in\">NSInvocation</span> *invocation = [<span class=\"built_in\">NSInvocation</span> invocationWithMethodSignature:[<span class=\"built_in\">UIDevice</span> instanceMethodSignatureForSelector:selector]];</div><div class=\"line\">      [invocation setSelector:selector];</div><div class=\"line\">      [invocation setTarget:[<span class=\"built_in\">UIDevice</span> currentDevice]];</div><div class=\"line\">      <span class=\"keyword\">int</span> val = <span class=\"built_in\">UIInterfaceOrientationLandscapeRight</span>;</div><div class=\"line\">      [invocation setArgument:&amp;val atIndex:<span class=\"number\">2</span>];</div><div class=\"line\">      [invocation invoke];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//竖屏</span></div><div class=\"line\">  <span class=\"keyword\">if</span> ([[<span class=\"built_in\">UIDevice</span> currentDevice] respondsToSelector:<span class=\"keyword\">@selector</span>(setOrientation:)]) &#123;</div><div class=\"line\">      SEL selector = <span class=\"built_in\">NSSelectorFromString</span>(<span class=\"string\">@\"setOrientation:\"</span>);</div><div class=\"line\">      <span class=\"built_in\">NSInvocation</span> *invocation = [<span class=\"built_in\">NSInvocation</span> invocationWithMethodSignature:[<span class=\"built_in\">UIDevice</span> instanceMethodSignatureForSelector:selector]];</div><div class=\"line\">      [invocation setSelector:selector];</div><div class=\"line\">      [invocation setTarget:[<span class=\"built_in\">UIDevice</span> currentDevice]];</div><div class=\"line\">      <span class=\"keyword\">int</span> val = <span class=\"built_in\">UIInterfaceOrientationPortrait</span>;</div><div class=\"line\">      [invocation setArgument:&amp;val atIndex:<span class=\"number\">2</span>];</div><div class=\"line\">      [invocation invoke];</div><div class=\"line\">     </div><div class=\"line\">     </div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>"},{"title":"按照时间排序","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n//排序 对时间进行排序\n    NSMutableArray *dataArray=[[NSMutableArray alloc]initWithCapacity:0];\n    NSMutableDictionary *dir=[[NSMutableDictionary alloc]init];\n    [dir setObject:@\"2012-12-02\" forKey:@\"time\"];\n    [dataArray addObject:dir];\n\n   \n    NSMutableDictionary *dir1=[[NSMutableDictionary alloc]init];\n    [dir1 setObject:@\"2012-02-15\" forKey:@\"time\"];\n    [dataArray addObject:dir1];\n\n   \n    NSMutableDictionary *dir2=[[NSMutableDictionary alloc]init];\n    [dir2 setObject:@\"2012-03-02\" forKey:@\"time\"];\n    [dataArray addObject:dir2];\n\n   \n    NSMutableDictionary *dir3=[[NSMutableDictionary alloc]init];\n    [dir3 setObject:@\"2000-03-02\" forKey:@\"time\"];\n    [dataArray addObject:dir3];\n\n   \n    NSMutableDictionary *dir4=[[NSMutableDictionary alloc]init];\n    [dir4 setObject:@\"2112-03-02\" forKey:@\"time\"];\n    [dataArray addObject:dir4];\n\n   \n    NSMutableArray *myArray=[[NSMutableArray alloc]initWithCapacity:0];\n    [myArray addObjectsFromArray:dataArray];\n    //[myArray release];\n\n   \n    for (int i=0; i<[myArray count]; i++) {\n        NSLog(@\"排序前----->>%@\",[[myArray objectAtIndex:i] objectForKey:@\"time\"]);\n    }\n   \n    NSSortDescriptor *sorter = [[NSSortDescriptor alloc]initWithKey:@\"time\" ascending:YES];\n    NSMutableArray *sortDescriptors=[[NSMutableArray alloc]initWithObjects:&sorter count:1];\n    NSArray *sortArray=[myArray sortedArrayUsingDescriptors:sortDescriptors];\n\n   \n   \n    for (int i=0; i<[sortArray count]; i++) {\n        NSLog(@\"排序后----->>%@\",[[sortArray objectAtIndex:i] objectForKey:@\"time\"]);\n    }\n```\n\n","source":"_posts/oc/按照时间排序.md","raw":"---\ntitle: 按照时间排序\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n//排序 对时间进行排序\n    NSMutableArray *dataArray=[[NSMutableArray alloc]initWithCapacity:0];\n    NSMutableDictionary *dir=[[NSMutableDictionary alloc]init];\n    [dir setObject:@\"2012-12-02\" forKey:@\"time\"];\n    [dataArray addObject:dir];\n\n   \n    NSMutableDictionary *dir1=[[NSMutableDictionary alloc]init];\n    [dir1 setObject:@\"2012-02-15\" forKey:@\"time\"];\n    [dataArray addObject:dir1];\n\n   \n    NSMutableDictionary *dir2=[[NSMutableDictionary alloc]init];\n    [dir2 setObject:@\"2012-03-02\" forKey:@\"time\"];\n    [dataArray addObject:dir2];\n\n   \n    NSMutableDictionary *dir3=[[NSMutableDictionary alloc]init];\n    [dir3 setObject:@\"2000-03-02\" forKey:@\"time\"];\n    [dataArray addObject:dir3];\n\n   \n    NSMutableDictionary *dir4=[[NSMutableDictionary alloc]init];\n    [dir4 setObject:@\"2112-03-02\" forKey:@\"time\"];\n    [dataArray addObject:dir4];\n\n   \n    NSMutableArray *myArray=[[NSMutableArray alloc]initWithCapacity:0];\n    [myArray addObjectsFromArray:dataArray];\n    //[myArray release];\n\n   \n    for (int i=0; i<[myArray count]; i++) {\n        NSLog(@\"排序前----->>%@\",[[myArray objectAtIndex:i] objectForKey:@\"time\"]);\n    }\n   \n    NSSortDescriptor *sorter = [[NSSortDescriptor alloc]initWithKey:@\"time\" ascending:YES];\n    NSMutableArray *sortDescriptors=[[NSMutableArray alloc]initWithObjects:&sorter count:1];\n    NSArray *sortArray=[myArray sortedArrayUsingDescriptors:sortDescriptors];\n\n   \n   \n    for (int i=0; i<[sortArray count]; i++) {\n        NSLog(@\"排序后----->>%@\",[[sortArray objectAtIndex:i] objectForKey:@\"time\"]);\n    }\n```\n\n","slug":"oc/按照时间排序","published":1,"updated":"2016-10-08T09:09:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms990004821xw38tzt2gr","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//排序 对时间进行排序</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *dataArray=[[<span class=\"built_in\">NSMutableArray</span> alloc]initWithCapacity:<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *dir=[[<span class=\"built_in\">NSMutableDictionary</span> alloc]init];</div><div class=\"line\">    [dir setObject:<span class=\"string\">@\"2012-12-02\"</span> forKey:<span class=\"string\">@\"time\"</span>];</div><div class=\"line\">    [dataArray addObject:dir];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *dir1=[[<span class=\"built_in\">NSMutableDictionary</span> alloc]init];</div><div class=\"line\">    [dir1 setObject:<span class=\"string\">@\"2012-02-15\"</span> forKey:<span class=\"string\">@\"time\"</span>];</div><div class=\"line\">    [dataArray addObject:dir1];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *dir2=[[<span class=\"built_in\">NSMutableDictionary</span> alloc]init];</div><div class=\"line\">    [dir2 setObject:<span class=\"string\">@\"2012-03-02\"</span> forKey:<span class=\"string\">@\"time\"</span>];</div><div class=\"line\">    [dataArray addObject:dir2];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *dir3=[[<span class=\"built_in\">NSMutableDictionary</span> alloc]init];</div><div class=\"line\">    [dir3 setObject:<span class=\"string\">@\"2000-03-02\"</span> forKey:<span class=\"string\">@\"time\"</span>];</div><div class=\"line\">    [dataArray addObject:dir3];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *dir4=[[<span class=\"built_in\">NSMutableDictionary</span> alloc]init];</div><div class=\"line\">    [dir4 setObject:<span class=\"string\">@\"2112-03-02\"</span> forKey:<span class=\"string\">@\"time\"</span>];</div><div class=\"line\">    [dataArray addObject:dir4];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *myArray=[[<span class=\"built_in\">NSMutableArray</span> alloc]initWithCapacity:<span class=\"number\">0</span>];</div><div class=\"line\">    [myArray addObjectsFromArray:dataArray];</div><div class=\"line\">    <span class=\"comment\">//[myArray release];</span></div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;[myArray count]; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"排序前-----&gt;&gt;%@\"</span>,[[myArray objectAtIndex:i] objectForKey:<span class=\"string\">@\"time\"</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSSortDescriptor</span> *sorter = [[<span class=\"built_in\">NSSortDescriptor</span> alloc]initWithKey:<span class=\"string\">@\"time\"</span> ascending:<span class=\"literal\">YES</span>];</div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *sortDescriptors=[[<span class=\"built_in\">NSMutableArray</span> alloc]initWithObjects:&amp;sorter count:<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *sortArray=[myArray sortedArrayUsingDescriptors:sortDescriptors];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;[sortArray count]; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"排序后-----&gt;&gt;%@\"</span>,[[sortArray objectAtIndex:i] objectForKey:<span class=\"string\">@\"time\"</span>]);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//排序 对时间进行排序</span></div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *dataArray=[[<span class=\"built_in\">NSMutableArray</span> alloc]initWithCapacity:<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *dir=[[<span class=\"built_in\">NSMutableDictionary</span> alloc]init];</div><div class=\"line\">    [dir setObject:<span class=\"string\">@\"2012-12-02\"</span> forKey:<span class=\"string\">@\"time\"</span>];</div><div class=\"line\">    [dataArray addObject:dir];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *dir1=[[<span class=\"built_in\">NSMutableDictionary</span> alloc]init];</div><div class=\"line\">    [dir1 setObject:<span class=\"string\">@\"2012-02-15\"</span> forKey:<span class=\"string\">@\"time\"</span>];</div><div class=\"line\">    [dataArray addObject:dir1];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *dir2=[[<span class=\"built_in\">NSMutableDictionary</span> alloc]init];</div><div class=\"line\">    [dir2 setObject:<span class=\"string\">@\"2012-03-02\"</span> forKey:<span class=\"string\">@\"time\"</span>];</div><div class=\"line\">    [dataArray addObject:dir2];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *dir3=[[<span class=\"built_in\">NSMutableDictionary</span> alloc]init];</div><div class=\"line\">    [dir3 setObject:<span class=\"string\">@\"2000-03-02\"</span> forKey:<span class=\"string\">@\"time\"</span>];</div><div class=\"line\">    [dataArray addObject:dir3];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *dir4=[[<span class=\"built_in\">NSMutableDictionary</span> alloc]init];</div><div class=\"line\">    [dir4 setObject:<span class=\"string\">@\"2112-03-02\"</span> forKey:<span class=\"string\">@\"time\"</span>];</div><div class=\"line\">    [dataArray addObject:dir4];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *myArray=[[<span class=\"built_in\">NSMutableArray</span> alloc]initWithCapacity:<span class=\"number\">0</span>];</div><div class=\"line\">    [myArray addObjectsFromArray:dataArray];</div><div class=\"line\">    <span class=\"comment\">//[myArray release];</span></div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;[myArray count]; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"排序前-----&gt;&gt;%@\"</span>,[[myArray objectAtIndex:i] objectForKey:<span class=\"string\">@\"time\"</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSSortDescriptor</span> *sorter = [[<span class=\"built_in\">NSSortDescriptor</span> alloc]initWithKey:<span class=\"string\">@\"time\"</span> ascending:<span class=\"literal\">YES</span>];</div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *sortDescriptors=[[<span class=\"built_in\">NSMutableArray</span> alloc]initWithObjects:&amp;sorter count:<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"built_in\">NSArray</span> *sortArray=[myArray sortedArrayUsingDescriptors:sortDescriptors];</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;[sortArray count]; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"排序后-----&gt;&gt;%@\"</span>,[[sortArray objectAtIndex:i] objectForKey:<span class=\"string\">@\"time\"</span>]);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>"},{"title":"推送通知","date":"2015-09-08T03:39:42.000Z","_content":"\n<!-- more -->\n\n\n\n和本地通知不同，推送通知是由应用服务提供商发起的，通过苹果的APNs（Apple Push Notification Server）发送到应用客户端。下面是苹果官方关于推送通知的过程示意图：\n\n\n\n推送通知的过程可以分为以下几步：\n\n应用服务提供商从服务器端把要发送的消息和设备令牌（device token）发送给苹果的消息推送服务器APNs。\nAPNs根据设备令牌在已注册的设备（iPhone、iPad、iTouch、mac等）查找对应的设备，将消息发送给相应的设备。\n客户端设备接将接收到的消息传递给相应的应用程序，应用程序根据用户设置弹出通知消息。\n当然，这只是一个简单的流程，有了这个流程我们还无从下手编写程序，将上面的流程细化可以得到如下流程图（图片来自互联网），在这个过程中会也会提到如何在程序中完成这些步骤：\n\n\n\n1.应用程序注册APNs推送消息。\n\n说明：\n\na.只有注册过的应用才有可能接收到消息，程序中通常通过UIApplication的registerUserNotificationSettings:方法注册，iOS8中通知注册的方法发生了改变，如果是iOS7及之前版本的iOS请参考其他代码。\n\nb.注册之前有两个前提条件必须准备好：开发配置文件（provisioning profile，也就是.mobileprovision后缀的文件）的App ID不能使用通配ID必须使用指定APP ID并且生成配置文件中选择Push Notifications服务，一般的开发配置文件无法完成注册；应用程序的Bundle Identifier必须和生成配置文件使用的APP ID完全一致。\n\n2.iOS从APNs接收device token，在应用程序获取device token。\n\n说明：\n\na.在UIApplication的-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken代理方法中获取令牌，此方法发生在注册之后。\n\nb.如果无法正确获得device token可以在UIApplication的-(void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error代理方法中查看详细错误信息，此方法发生在获取device token失败之后。\n\nc.必须真机调试，模拟器无法获取device token。\n\n3.iOS应用将device token发送给应用程序提供商，告诉服务器端当前设备允许接收消息。\n\n说明：\n\na.device token的生成算法只有Apple掌握，为了确保算法发生变化后仍然能够正常接收服务器端发送的通知，每次应用程序启动都重新获得device token（注意：device token的获取不会造成性能问题，苹果官方已经做过优化）。\n\nb.通常可以创建一个网络连接发送给应用程序提供商的服务器端， 在这个过程中最好将上一次获得的device token存储起来，避免重复发送，一旦发现device token发生了变化最好将原有的device token一块发送给服务器端，服务器端删除原有令牌存储新令牌避免服务器端发送无效消息。\n\n4.应用程序提供商在服务器端根据前面发送过来的device token组织信息发送给APNs。\n\n说明：\n\na.发送时指定device token和消息内容，并且完全按照苹果官方的消息格式组织消息内容，通常情况下可以借助其他第三方消息推送框架来完成。\n\n5.APNs根据消息中的device token查找已注册的设备推送消息。\n\n说明：\n\na.正常情况下可以根据device token将消息成功推送到客户端设备中，但是也不排除用户卸载程序的情况，此时推送消息失败，APNs会将这个错误消息通知服务器端以避免资源浪费（服 务器端此时可以根据错误删除已经存储的device token，下次不再发送）。\n\n下面将简单演示一下推送通知的简单流程:\n\n首先，看一下iOS客户端代码：\n\n```objc\n//\n//  AppDelegate.m\n//  pushnotification\n//\n//  Created by Kenshin Cui on 14/03/27.\n//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.\n//\n\n#import \"AppDelegate.h\"\n#import \"KCMainViewController.h\"\n\n@interface AppDelegate ()\n\n@end\n\n@implementation AppDelegate\n\n#pragma mark - 应用程序代理方法\n#pragma mark 应用程序启动之后\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    \n    _window=[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];\n    \n    _window.backgroundColor =[UIColor colorWithRed:249/255.0 green:249/255.0 blue:249/255.0 alpha:1];\n    \n    //设置全局导航条风格和颜色\n    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1]];\n    [[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];\n    \n    KCMainViewController *mainController=[[KCMainViewController alloc]init];\n    _window.rootViewController=mainController;\n    \n    [_window makeKeyAndVisible];\n    \n    //注册推送通知（注意iOS8注册方法发生了变化）\n    [application registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert|UIUserNotificationTypeBadge|UIUserNotificationTypeSound categories:nil]];\n    [application registerForRemoteNotifications];\n    \n    return YES;\n}\n#pragma mark 注册推送通知之后\n//在此接收设备令牌\n-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken{\n    [self addDeviceToken:deviceToken];\n    NSLog(@\"device token:%@\",deviceToken);\n}\n\n#pragma mark 获取device token失败后\n-(void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error{\n    NSLog(@\"didFailToRegisterForRemoteNotificationsWithError:%@\",error.localizedDescription);\n    [self addDeviceToken:nil];\n}\n\n#pragma mark 接收到推送通知之后\n-(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo{\n    NSLog(@\"receiveRemoteNotification,userInfo is %@\",userInfo);\n}\n\n#pragma mark - 私有方法\n/**\n *  添加设备令牌到服务器端\n *\n *  @param deviceToken 设备令牌\n */\n-(void)addDeviceToken:(NSData *)deviceToken{\n    NSString *key=@\"DeviceToken\";\n    NSData *oldToken= [[NSUserDefaults standardUserDefaults]objectForKey:key];\n    //如果偏好设置中的已存储设备令牌和新获取的令牌不同则存储新令牌并且发送给服务器端\n    if (![oldToken isEqualToData:deviceToken]) {\n        [[NSUserDefaults standardUserDefaults] setObject:deviceToken forKey:key];\n        [self sendDeviceTokenWidthOldDeviceToken:oldToken newDeviceToken:deviceToken];\n    }\n}\n\n-(void)sendDeviceTokenWidthOldDeviceToken:(NSData *)oldToken newDeviceToken:(NSData *)newToken{\n    //注意一定确保真机可以正常访问下面的地址\n    NSString *urlStr=@\"http://192.168.1.101/RegisterDeviceToken.aspx\";\n    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    NSURL *url=[NSURL URLWithString:urlStr];\n    NSMutableURLRequest *requestM=[NSMutableURLRequest requestWithURL:url cachePolicy:0 timeoutInterval:10.0];\n    [requestM setHTTPMethod:@\"POST\"];\n    NSString *bodyStr=[NSString stringWithFormat:@\"oldToken=%@&newToken=%@\",oldToken,newToken];\n    NSData *body=[bodyStr dataUsingEncoding:NSUTF8StringEncoding];\n    [requestM setHTTPBody:body];\n    NSURLSession *session=[NSURLSession sharedSession];\n    NSURLSessionDataTask *dataTask= [session dataTaskWithRequest:requestM completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n        if (error) {\n            NSLog(@\"Send failure,error is :%@\",error.localizedDescription);\n        }else{\n            NSLog(@\"Send Success!\");\n        }\n        \n    }];\n    [dataTask resume];\n}\n@end\n```\niOS客户端代码的代码比较简单，注册推送通知，获取device token存储到偏好设置中，并且如果新获取的device token不同于偏好设置中存储的数据则发送给服务器端，更新服务器端device token列表。\n\n其次，由于device token需要发送给服务器端，这里使用一个Web应用作为服务器端接收device token，这里使用了ASP.NET程序来处理令牌接收注册工作，当然你使用其他技术同样没有问题。下面是对应的后台代码：\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Web;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\nusing CMJ.Framework.Data;\n\nnamespace WebServer\n{\n    public partial class RegisterDeviceToken : System.Web.UI.Page\n    {\n        private string _appID = @\"com.cmjstudio.pushnotification\";\n        private SqlHelper _helper = new SqlHelper();\n        protected void Page_Load(object sender, EventArgs e)\n        {\n            try\n            {\n                string oldToken = Request[\"oldToken\"] + \"\";\n                string newToken = Request[\"newToken\"] + \"\";\n                string sql = \"\";\n                //如果传递旧的设备令牌则删除旧令牌添加新令牌\n                if (oldToken != \"\")\n                {\n                    sql = string.Format(\"DELETE FROM dbo.Device WHERE AppID='{0}' AND DeviceToken='{1}';\", _appID, oldToken);\n                }\n                sql += string.Format(@\"IF NOT EXISTS (SELECT ID FROM dbo.Device WHERE AppID='{0}' AND DeviceToken='{1}')\n                                        INSERT INTO dbo.Device ( AppID, DeviceToken ) VALUES ( N'{0}', N'{1}');\", _appID, newToken);\n                _helper.ExecuteNonQuery(sql);\n                Response.Write(\"注册成功！\");\n            }\n            catch(Exception ex)\n            {\n                Response.Write(\"注册失败，错误详情：\"+ex.ToString());\n            }\n        }\n    }\n}\n这个过程主要就是保存device token到数据库中，当然如果同时传递旧的设备令牌还需要先删除就的设备令牌，这里简单的在数据库中创建了一张Device表来保存设备令牌，其中记录了应用程序Id和设备令牌。\n\n第三步就是服务器端发送消息，如果要给APNs发送消息就必须按照Apple的标准消息格式组织消息内容。但是好在目前已经有很多开源的第三方类库供我们使用，具体消息如何包装完全不用自己组织，这里使用一个开源的类库Push Sharp来 给APNs发送消息 ,除了可以给Apple设备推送消息，Push Sharp还支持Android、Windows Phone等多种设备，更多详细内容大家可以参照官方说明。前面说过如果要开发消息推送应用不能使用一般的开发配置文件，这里还需要注意：如果服务器端要 给APNs发送消息其秘钥也必须是通过APNs Development iOS类型的证书来导出的，一般的iOS Development 类型的证书导出的秘钥无法用作服务器端发送秘钥。下面通过在一个简单的WinForm程序中调用Push Sharp给APNs发送消息，这里读取之前Device表中的所有设备令牌循环发送消息：\n\n\nusing System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\nusing PushSharp;\nusing PushSharp.Apple;\nusing CMJ.Framework.Data;\nusing CMJ.Framework.Logging;\nusing CMJ.Framework.Windows.Forms;\n\nnamespace PushNotificationServer\n{\n    public partial class frmMain : PersonalizeForm\n    {\n        private string _appID = @\"com.cmjstudio.pushnotification\";\n        private SqlHelper _helper = new SqlHelper();\n        public frmMain()\n        {\n            InitializeComponent();\n        }\n\n        private void btnClose_Click(object sender, EventArgs e)\n        {\n            this.Close();\n        }\n\n        private void btnSend_Click(object sender, EventArgs e)\n        {\n            List<string> deviceTokens = GetDeviceToken();\n            SendMessage(deviceTokens, tbMessage.Text);\n        }\n\n        #region 发送消息\n        /// <summary>\n        /// 取得所有设备令牌\n        /// </summary>\n        /// <returns>设备令牌</returns>\n        private List<string> GetDeviceToken()\n        {\n            List<string> deviceTokens = new List<string>();\n            string sql = string.Format(\"SELECT DeviceToken FROM dbo.Device WHERE AppID='{0}'\",_appID);\n            DataTable dt = _helper.GetDataTable(sql);\n            if(dt.Rows.Count>0)\n            {\n                foreach(DataRow dr in dt.Rows)\n                {\n                    deviceTokens.Add((dr[\"DeviceToken\"]+\"\").TrimStart('<').TrimEnd('>').Replace(\" \",\"\"));\n                }\n            }\n            return deviceTokens;\n        }\n        \n        /// <summary>\n        /// 发送消息\n        /// </summary>\n        /// <param name=\"deviceToken\">设备令牌</param>\n        /// <param name=\"message\">消息内容</param>\n        private void SendMessage(List<string> deviceToken, string message)\n        {\n            //创建推送对象\n            var pusher = new PushBroker();\n            pusher.OnNotificationSent += pusher_OnNotificationSent;//发送成功事件\n            pusher.OnNotificationFailed += pusher_OnNotificationFailed;//发送失败事件\n            pusher.OnChannelCreated += pusher_OnChannelCreated;\n            pusher.OnChannelDestroyed += pusher_OnChannelDestroyed;\n            pusher.OnChannelException += pusher_OnChannelException;\n            pusher.OnDeviceSubscriptionChanged += pusher_OnDeviceSubscriptionChanged;\n            pusher.OnDeviceSubscriptionExpired += pusher_OnDeviceSubscriptionExpired;\n            pusher.OnNotificationRequeue += pusher_OnNotificationRequeue;\n            pusher.OnServiceException += pusher_OnServiceException;\n            //注册推送服务\n            byte[] certificateData = File.ReadAllBytes(@\"E:\\KenshinCui_Push.p12\");\n            pusher.RegisterAppleService(new ApplePushChannelSettings(certificateData, \"123\"));\n            foreach (string token in deviceToken)\n            {\n                //给指定设备发送消息\n                pusher.QueueNotification(new AppleNotification()\n                    .ForDeviceToken(token)\n                    .WithAlert(message) \n                    .WithBadge(1)\n                    .WithSound(\"default\"));\n            }\n        }\n\n        void pusher_OnServiceException(object sender, Exception error)\n        {\n            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());\n            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\" + error.ToString(), \"系统提示\");\n        }\n\n        void pusher_OnNotificationRequeue(object sender, PushSharp.Core.NotificationRequeueEventArgs e)\n        {\n            Console.WriteLine(\"pusher_OnNotificationRequeue\");\n        }\n\n        void pusher_OnDeviceSubscriptionExpired(object sender, string expiredSubscriptionId, DateTime expirationDateUtc, PushSharp.Core.INotification notification)\n        {\n            Console.WriteLine(\"pusher_OnDeviceSubscriptionChanged\");\n        }\n\n        void pusher_OnDeviceSubscriptionChanged(object sender, string oldSubscriptionId, string newSubscriptionId, PushSharp.Core.INotification notification)\n        {\n            Console.WriteLine(\"pusher_OnDeviceSubscriptionChanged\");\n        }\n\n        void pusher_OnChannelException(object sender, PushSharp.Core.IPushChannel pushChannel, Exception error)\n        {\n            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());\n            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\" + error.ToString(), \"系统提示\");\n        }\n\n        void pusher_OnChannelDestroyed(object sender)\n        {\n            Console.WriteLine(\"pusher_OnChannelDestroyed\");\n        }\n\n        void pusher_OnChannelCreated(object sender, PushSharp.Core.IPushChannel pushChannel)\n        {\n            Console.WriteLine(\"pusher_OnChannelCreated\");\n        }\n\n        void pusher_OnNotificationFailed(object sender, PushSharp.Core.INotification notification, Exception error)\n        {\n            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());\n            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\"+error.ToString(), \"系统提示\");\n        }\n\n        void pusher_OnNotificationSent(object sender, PushSharp.Core.INotification notification)\n        {\n            Console.WriteLine(\"消息发送成功！\");\n            PersonalizeMessageBox.Show(this, \"消息发送成功！\", \"系统提示\");\n        }\n        #endregion\n    }\n}\n服务器端消息发送应用运行效果：\n\n\n\niOS客户端接收的消息的效果：\n\n\n\n到目前为止通过服务器端应用可以顺利发送消息给APNs并且iOS应用已经成功接收推送消息。\n\n补充--iOS开发证书、秘钥\n\niOS开发过程中如果需要进行真机调试、发布需要注册申请很多证书，对于初学者往往迷惑不解，再加上今天的文章中会牵扯到一些特殊配置，这里就简单的对iOS开发的常用证书和秘钥等做一说明。\n\n证书\n\niOS常用的证书包括开发证书和发布证书，无论是真机调试还是最终发布应用到App Store这两个证书都是必须的，它是iOS开发的基本证书。\n\na.开发证书：开发证书又分为普通开发证书和推送证书，如果仅仅是一般的应用则前者即可满足，但是如果开发推送应用则必须使用推送证书。\n\nb.发布证书：发布证书又可以分为普通发布证书、推送证书、Pass Type ID证书、站点发布证书、VoIP服务证书、苹果支付证书。同样的，对于需要使用特殊服务的应用则必须选择对应的证书。\n\n应用标识\n\nApp ID,应用程序的唯一标识，对应iOS应用的Bundle Identifier，App ID在苹果开发者中心中分为通配应用ID和明确的应用ID,前者一般用于普通应用开发，一个ID可以适用于多个不同标识的应用；但是对于使用消息推送、 Passbook、站点发布、iCloud等服务的应用必须配置明确的应用ID。\n\n设备标识\n\nUDID,用于标识每一台硬件设备的标示符。注意它不是device token，device token是根据UDID使用一个只有Apple自己才知道的算法生成的一组标示符。\n\n配置简介\n\nProvisioning Profiles,平时又称为PP文件。将UDID、App ID、开发证书打包在一起的配置文件，同样分为开发和发布两类配置文件。\n\n秘钥\n\n\n在申请开发证书时必须要首先提交一个秘钥请求文件，对于生成秘钥请求文件的mac，如果要做开发则只需要下载证书和配置简介即可开发。但是如果要想 在其他机器上做开发则必须将证书中的秘钥导出（导出之后是一个.p12文件），然后导入其他机器。同时对于类似于推送服务器端应用如果要给APNs发送消 息，同样需要使用.p12秘钥文件，并且这个秘钥文件需要是推送证书导出的对应秘钥。\n\n\n","source":"_posts/oc/推送通知.md","raw":"---\ntitle: 推送通知\ndate: 2015-9-08 11:39:42\ncategories: objective-c\n---\n\n<!-- more -->\n\n\n\n和本地通知不同，推送通知是由应用服务提供商发起的，通过苹果的APNs（Apple Push Notification Server）发送到应用客户端。下面是苹果官方关于推送通知的过程示意图：\n\n\n\n推送通知的过程可以分为以下几步：\n\n应用服务提供商从服务器端把要发送的消息和设备令牌（device token）发送给苹果的消息推送服务器APNs。\nAPNs根据设备令牌在已注册的设备（iPhone、iPad、iTouch、mac等）查找对应的设备，将消息发送给相应的设备。\n客户端设备接将接收到的消息传递给相应的应用程序，应用程序根据用户设置弹出通知消息。\n当然，这只是一个简单的流程，有了这个流程我们还无从下手编写程序，将上面的流程细化可以得到如下流程图（图片来自互联网），在这个过程中会也会提到如何在程序中完成这些步骤：\n\n\n\n1.应用程序注册APNs推送消息。\n\n说明：\n\na.只有注册过的应用才有可能接收到消息，程序中通常通过UIApplication的registerUserNotificationSettings:方法注册，iOS8中通知注册的方法发生了改变，如果是iOS7及之前版本的iOS请参考其他代码。\n\nb.注册之前有两个前提条件必须准备好：开发配置文件（provisioning profile，也就是.mobileprovision后缀的文件）的App ID不能使用通配ID必须使用指定APP ID并且生成配置文件中选择Push Notifications服务，一般的开发配置文件无法完成注册；应用程序的Bundle Identifier必须和生成配置文件使用的APP ID完全一致。\n\n2.iOS从APNs接收device token，在应用程序获取device token。\n\n说明：\n\na.在UIApplication的-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken代理方法中获取令牌，此方法发生在注册之后。\n\nb.如果无法正确获得device token可以在UIApplication的-(void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error代理方法中查看详细错误信息，此方法发生在获取device token失败之后。\n\nc.必须真机调试，模拟器无法获取device token。\n\n3.iOS应用将device token发送给应用程序提供商，告诉服务器端当前设备允许接收消息。\n\n说明：\n\na.device token的生成算法只有Apple掌握，为了确保算法发生变化后仍然能够正常接收服务器端发送的通知，每次应用程序启动都重新获得device token（注意：device token的获取不会造成性能问题，苹果官方已经做过优化）。\n\nb.通常可以创建一个网络连接发送给应用程序提供商的服务器端， 在这个过程中最好将上一次获得的device token存储起来，避免重复发送，一旦发现device token发生了变化最好将原有的device token一块发送给服务器端，服务器端删除原有令牌存储新令牌避免服务器端发送无效消息。\n\n4.应用程序提供商在服务器端根据前面发送过来的device token组织信息发送给APNs。\n\n说明：\n\na.发送时指定device token和消息内容，并且完全按照苹果官方的消息格式组织消息内容，通常情况下可以借助其他第三方消息推送框架来完成。\n\n5.APNs根据消息中的device token查找已注册的设备推送消息。\n\n说明：\n\na.正常情况下可以根据device token将消息成功推送到客户端设备中，但是也不排除用户卸载程序的情况，此时推送消息失败，APNs会将这个错误消息通知服务器端以避免资源浪费（服 务器端此时可以根据错误删除已经存储的device token，下次不再发送）。\n\n下面将简单演示一下推送通知的简单流程:\n\n首先，看一下iOS客户端代码：\n\n```objc\n//\n//  AppDelegate.m\n//  pushnotification\n//\n//  Created by Kenshin Cui on 14/03/27.\n//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.\n//\n\n#import \"AppDelegate.h\"\n#import \"KCMainViewController.h\"\n\n@interface AppDelegate ()\n\n@end\n\n@implementation AppDelegate\n\n#pragma mark - 应用程序代理方法\n#pragma mark 应用程序启动之后\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    \n    _window=[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];\n    \n    _window.backgroundColor =[UIColor colorWithRed:249/255.0 green:249/255.0 blue:249/255.0 alpha:1];\n    \n    //设置全局导航条风格和颜色\n    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:23/255.0 green:180/255.0 blue:237/255.0 alpha:1]];\n    [[UINavigationBar appearance] setBarStyle:UIBarStyleBlack];\n    \n    KCMainViewController *mainController=[[KCMainViewController alloc]init];\n    _window.rootViewController=mainController;\n    \n    [_window makeKeyAndVisible];\n    \n    //注册推送通知（注意iOS8注册方法发生了变化）\n    [application registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert|UIUserNotificationTypeBadge|UIUserNotificationTypeSound categories:nil]];\n    [application registerForRemoteNotifications];\n    \n    return YES;\n}\n#pragma mark 注册推送通知之后\n//在此接收设备令牌\n-(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken{\n    [self addDeviceToken:deviceToken];\n    NSLog(@\"device token:%@\",deviceToken);\n}\n\n#pragma mark 获取device token失败后\n-(void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error{\n    NSLog(@\"didFailToRegisterForRemoteNotificationsWithError:%@\",error.localizedDescription);\n    [self addDeviceToken:nil];\n}\n\n#pragma mark 接收到推送通知之后\n-(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo{\n    NSLog(@\"receiveRemoteNotification,userInfo is %@\",userInfo);\n}\n\n#pragma mark - 私有方法\n/**\n *  添加设备令牌到服务器端\n *\n *  @param deviceToken 设备令牌\n */\n-(void)addDeviceToken:(NSData *)deviceToken{\n    NSString *key=@\"DeviceToken\";\n    NSData *oldToken= [[NSUserDefaults standardUserDefaults]objectForKey:key];\n    //如果偏好设置中的已存储设备令牌和新获取的令牌不同则存储新令牌并且发送给服务器端\n    if (![oldToken isEqualToData:deviceToken]) {\n        [[NSUserDefaults standardUserDefaults] setObject:deviceToken forKey:key];\n        [self sendDeviceTokenWidthOldDeviceToken:oldToken newDeviceToken:deviceToken];\n    }\n}\n\n-(void)sendDeviceTokenWidthOldDeviceToken:(NSData *)oldToken newDeviceToken:(NSData *)newToken{\n    //注意一定确保真机可以正常访问下面的地址\n    NSString *urlStr=@\"http://192.168.1.101/RegisterDeviceToken.aspx\";\n    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    NSURL *url=[NSURL URLWithString:urlStr];\n    NSMutableURLRequest *requestM=[NSMutableURLRequest requestWithURL:url cachePolicy:0 timeoutInterval:10.0];\n    [requestM setHTTPMethod:@\"POST\"];\n    NSString *bodyStr=[NSString stringWithFormat:@\"oldToken=%@&newToken=%@\",oldToken,newToken];\n    NSData *body=[bodyStr dataUsingEncoding:NSUTF8StringEncoding];\n    [requestM setHTTPBody:body];\n    NSURLSession *session=[NSURLSession sharedSession];\n    NSURLSessionDataTask *dataTask= [session dataTaskWithRequest:requestM completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n        if (error) {\n            NSLog(@\"Send failure,error is :%@\",error.localizedDescription);\n        }else{\n            NSLog(@\"Send Success!\");\n        }\n        \n    }];\n    [dataTask resume];\n}\n@end\n```\niOS客户端代码的代码比较简单，注册推送通知，获取device token存储到偏好设置中，并且如果新获取的device token不同于偏好设置中存储的数据则发送给服务器端，更新服务器端device token列表。\n\n其次，由于device token需要发送给服务器端，这里使用一个Web应用作为服务器端接收device token，这里使用了ASP.NET程序来处理令牌接收注册工作，当然你使用其他技术同样没有问题。下面是对应的后台代码：\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Web;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\nusing CMJ.Framework.Data;\n\nnamespace WebServer\n{\n    public partial class RegisterDeviceToken : System.Web.UI.Page\n    {\n        private string _appID = @\"com.cmjstudio.pushnotification\";\n        private SqlHelper _helper = new SqlHelper();\n        protected void Page_Load(object sender, EventArgs e)\n        {\n            try\n            {\n                string oldToken = Request[\"oldToken\"] + \"\";\n                string newToken = Request[\"newToken\"] + \"\";\n                string sql = \"\";\n                //如果传递旧的设备令牌则删除旧令牌添加新令牌\n                if (oldToken != \"\")\n                {\n                    sql = string.Format(\"DELETE FROM dbo.Device WHERE AppID='{0}' AND DeviceToken='{1}';\", _appID, oldToken);\n                }\n                sql += string.Format(@\"IF NOT EXISTS (SELECT ID FROM dbo.Device WHERE AppID='{0}' AND DeviceToken='{1}')\n                                        INSERT INTO dbo.Device ( AppID, DeviceToken ) VALUES ( N'{0}', N'{1}');\", _appID, newToken);\n                _helper.ExecuteNonQuery(sql);\n                Response.Write(\"注册成功！\");\n            }\n            catch(Exception ex)\n            {\n                Response.Write(\"注册失败，错误详情：\"+ex.ToString());\n            }\n        }\n    }\n}\n这个过程主要就是保存device token到数据库中，当然如果同时传递旧的设备令牌还需要先删除就的设备令牌，这里简单的在数据库中创建了一张Device表来保存设备令牌，其中记录了应用程序Id和设备令牌。\n\n第三步就是服务器端发送消息，如果要给APNs发送消息就必须按照Apple的标准消息格式组织消息内容。但是好在目前已经有很多开源的第三方类库供我们使用，具体消息如何包装完全不用自己组织，这里使用一个开源的类库Push Sharp来 给APNs发送消息 ,除了可以给Apple设备推送消息，Push Sharp还支持Android、Windows Phone等多种设备，更多详细内容大家可以参照官方说明。前面说过如果要开发消息推送应用不能使用一般的开发配置文件，这里还需要注意：如果服务器端要 给APNs发送消息其秘钥也必须是通过APNs Development iOS类型的证书来导出的，一般的iOS Development 类型的证书导出的秘钥无法用作服务器端发送秘钥。下面通过在一个简单的WinForm程序中调用Push Sharp给APNs发送消息，这里读取之前Device表中的所有设备令牌循环发送消息：\n\n\nusing System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\nusing PushSharp;\nusing PushSharp.Apple;\nusing CMJ.Framework.Data;\nusing CMJ.Framework.Logging;\nusing CMJ.Framework.Windows.Forms;\n\nnamespace PushNotificationServer\n{\n    public partial class frmMain : PersonalizeForm\n    {\n        private string _appID = @\"com.cmjstudio.pushnotification\";\n        private SqlHelper _helper = new SqlHelper();\n        public frmMain()\n        {\n            InitializeComponent();\n        }\n\n        private void btnClose_Click(object sender, EventArgs e)\n        {\n            this.Close();\n        }\n\n        private void btnSend_Click(object sender, EventArgs e)\n        {\n            List<string> deviceTokens = GetDeviceToken();\n            SendMessage(deviceTokens, tbMessage.Text);\n        }\n\n        #region 发送消息\n        /// <summary>\n        /// 取得所有设备令牌\n        /// </summary>\n        /// <returns>设备令牌</returns>\n        private List<string> GetDeviceToken()\n        {\n            List<string> deviceTokens = new List<string>();\n            string sql = string.Format(\"SELECT DeviceToken FROM dbo.Device WHERE AppID='{0}'\",_appID);\n            DataTable dt = _helper.GetDataTable(sql);\n            if(dt.Rows.Count>0)\n            {\n                foreach(DataRow dr in dt.Rows)\n                {\n                    deviceTokens.Add((dr[\"DeviceToken\"]+\"\").TrimStart('<').TrimEnd('>').Replace(\" \",\"\"));\n                }\n            }\n            return deviceTokens;\n        }\n        \n        /// <summary>\n        /// 发送消息\n        /// </summary>\n        /// <param name=\"deviceToken\">设备令牌</param>\n        /// <param name=\"message\">消息内容</param>\n        private void SendMessage(List<string> deviceToken, string message)\n        {\n            //创建推送对象\n            var pusher = new PushBroker();\n            pusher.OnNotificationSent += pusher_OnNotificationSent;//发送成功事件\n            pusher.OnNotificationFailed += pusher_OnNotificationFailed;//发送失败事件\n            pusher.OnChannelCreated += pusher_OnChannelCreated;\n            pusher.OnChannelDestroyed += pusher_OnChannelDestroyed;\n            pusher.OnChannelException += pusher_OnChannelException;\n            pusher.OnDeviceSubscriptionChanged += pusher_OnDeviceSubscriptionChanged;\n            pusher.OnDeviceSubscriptionExpired += pusher_OnDeviceSubscriptionExpired;\n            pusher.OnNotificationRequeue += pusher_OnNotificationRequeue;\n            pusher.OnServiceException += pusher_OnServiceException;\n            //注册推送服务\n            byte[] certificateData = File.ReadAllBytes(@\"E:\\KenshinCui_Push.p12\");\n            pusher.RegisterAppleService(new ApplePushChannelSettings(certificateData, \"123\"));\n            foreach (string token in deviceToken)\n            {\n                //给指定设备发送消息\n                pusher.QueueNotification(new AppleNotification()\n                    .ForDeviceToken(token)\n                    .WithAlert(message) \n                    .WithBadge(1)\n                    .WithSound(\"default\"));\n            }\n        }\n\n        void pusher_OnServiceException(object sender, Exception error)\n        {\n            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());\n            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\" + error.ToString(), \"系统提示\");\n        }\n\n        void pusher_OnNotificationRequeue(object sender, PushSharp.Core.NotificationRequeueEventArgs e)\n        {\n            Console.WriteLine(\"pusher_OnNotificationRequeue\");\n        }\n\n        void pusher_OnDeviceSubscriptionExpired(object sender, string expiredSubscriptionId, DateTime expirationDateUtc, PushSharp.Core.INotification notification)\n        {\n            Console.WriteLine(\"pusher_OnDeviceSubscriptionChanged\");\n        }\n\n        void pusher_OnDeviceSubscriptionChanged(object sender, string oldSubscriptionId, string newSubscriptionId, PushSharp.Core.INotification notification)\n        {\n            Console.WriteLine(\"pusher_OnDeviceSubscriptionChanged\");\n        }\n\n        void pusher_OnChannelException(object sender, PushSharp.Core.IPushChannel pushChannel, Exception error)\n        {\n            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());\n            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\" + error.ToString(), \"系统提示\");\n        }\n\n        void pusher_OnChannelDestroyed(object sender)\n        {\n            Console.WriteLine(\"pusher_OnChannelDestroyed\");\n        }\n\n        void pusher_OnChannelCreated(object sender, PushSharp.Core.IPushChannel pushChannel)\n        {\n            Console.WriteLine(\"pusher_OnChannelCreated\");\n        }\n\n        void pusher_OnNotificationFailed(object sender, PushSharp.Core.INotification notification, Exception error)\n        {\n            Console.WriteLine(\"消息发送失败，错误详情：\" + error.ToString());\n            PersonalizeMessageBox.Show(this, \"消息发送失败，错误详情：\"+error.ToString(), \"系统提示\");\n        }\n\n        void pusher_OnNotificationSent(object sender, PushSharp.Core.INotification notification)\n        {\n            Console.WriteLine(\"消息发送成功！\");\n            PersonalizeMessageBox.Show(this, \"消息发送成功！\", \"系统提示\");\n        }\n        #endregion\n    }\n}\n服务器端消息发送应用运行效果：\n\n\n\niOS客户端接收的消息的效果：\n\n\n\n到目前为止通过服务器端应用可以顺利发送消息给APNs并且iOS应用已经成功接收推送消息。\n\n补充--iOS开发证书、秘钥\n\niOS开发过程中如果需要进行真机调试、发布需要注册申请很多证书，对于初学者往往迷惑不解，再加上今天的文章中会牵扯到一些特殊配置，这里就简单的对iOS开发的常用证书和秘钥等做一说明。\n\n证书\n\niOS常用的证书包括开发证书和发布证书，无论是真机调试还是最终发布应用到App Store这两个证书都是必须的，它是iOS开发的基本证书。\n\na.开发证书：开发证书又分为普通开发证书和推送证书，如果仅仅是一般的应用则前者即可满足，但是如果开发推送应用则必须使用推送证书。\n\nb.发布证书：发布证书又可以分为普通发布证书、推送证书、Pass Type ID证书、站点发布证书、VoIP服务证书、苹果支付证书。同样的，对于需要使用特殊服务的应用则必须选择对应的证书。\n\n应用标识\n\nApp ID,应用程序的唯一标识，对应iOS应用的Bundle Identifier，App ID在苹果开发者中心中分为通配应用ID和明确的应用ID,前者一般用于普通应用开发，一个ID可以适用于多个不同标识的应用；但是对于使用消息推送、 Passbook、站点发布、iCloud等服务的应用必须配置明确的应用ID。\n\n设备标识\n\nUDID,用于标识每一台硬件设备的标示符。注意它不是device token，device token是根据UDID使用一个只有Apple自己才知道的算法生成的一组标示符。\n\n配置简介\n\nProvisioning Profiles,平时又称为PP文件。将UDID、App ID、开发证书打包在一起的配置文件，同样分为开发和发布两类配置文件。\n\n秘钥\n\n\n在申请开发证书时必须要首先提交一个秘钥请求文件，对于生成秘钥请求文件的mac，如果要做开发则只需要下载证书和配置简介即可开发。但是如果要想 在其他机器上做开发则必须将证书中的秘钥导出（导出之后是一个.p12文件），然后导入其他机器。同时对于类似于推送服务器端应用如果要给APNs发送消 息，同样需要使用.p12秘钥文件，并且这个秘钥文件需要是推送证书导出的对应秘钥。\n\n\n","slug":"oc/推送通知","published":1,"updated":"2016-10-08T05:41:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms991004a21xw2euxhkh5","content":"<a id=\"more\"></a>\n<p>和本地通知不同，推送通知是由应用服务提供商发起的，通过苹果的APNs（Apple Push Notification Server）发送到应用客户端。下面是苹果官方关于推送通知的过程示意图：</p>\n<p>推送通知的过程可以分为以下几步：</p>\n<p>应用服务提供商从服务器端把要发送的消息和设备令牌（device token）发送给苹果的消息推送服务器APNs。<br>APNs根据设备令牌在已注册的设备（iPhone、iPad、iTouch、mac等）查找对应的设备，将消息发送给相应的设备。<br>客户端设备接将接收到的消息传递给相应的应用程序，应用程序根据用户设置弹出通知消息。<br>当然，这只是一个简单的流程，有了这个流程我们还无从下手编写程序，将上面的流程细化可以得到如下流程图（图片来自互联网），在这个过程中会也会提到如何在程序中完成这些步骤：</p>\n<p>1.应用程序注册APNs推送消息。</p>\n<p>说明：</p>\n<p>a.只有注册过的应用才有可能接收到消息，程序中通常通过UIApplication的registerUserNotificationSettings:方法注册，iOS8中通知注册的方法发生了改变，如果是iOS7及之前版本的iOS请参考其他代码。</p>\n<p>b.注册之前有两个前提条件必须准备好：开发配置文件（provisioning profile，也就是.mobileprovision后缀的文件）的App ID不能使用通配ID必须使用指定APP ID并且生成配置文件中选择Push Notifications服务，一般的开发配置文件无法完成注册；应用程序的Bundle Identifier必须和生成配置文件使用的APP ID完全一致。</p>\n<p>2.iOS从APNs接收device token，在应用程序获取device token。</p>\n<p>说明：</p>\n<p>a.在UIApplication的-(void)application:(UIApplication <em>)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData </em>)deviceToken代理方法中获取令牌，此方法发生在注册之后。</p>\n<p>b.如果无法正确获得device token可以在UIApplication的-(void)application:(UIApplication <em>)application didFailToRegisterForRemoteNotificationsWithError:(NSError </em>)error代理方法中查看详细错误信息，此方法发生在获取device token失败之后。</p>\n<p>c.必须真机调试，模拟器无法获取device token。</p>\n<p>3.iOS应用将device token发送给应用程序提供商，告诉服务器端当前设备允许接收消息。</p>\n<p>说明：</p>\n<p>a.device token的生成算法只有Apple掌握，为了确保算法发生变化后仍然能够正常接收服务器端发送的通知，每次应用程序启动都重新获得device token（注意：device token的获取不会造成性能问题，苹果官方已经做过优化）。</p>\n<p>b.通常可以创建一个网络连接发送给应用程序提供商的服务器端， 在这个过程中最好将上一次获得的device token存储起来，避免重复发送，一旦发现device token发生了变化最好将原有的device token一块发送给服务器端，服务器端删除原有令牌存储新令牌避免服务器端发送无效消息。</p>\n<p>4.应用程序提供商在服务器端根据前面发送过来的device token组织信息发送给APNs。</p>\n<p>说明：</p>\n<p>a.发送时指定device token和消息内容，并且完全按照苹果官方的消息格式组织消息内容，通常情况下可以借助其他第三方消息推送框架来完成。</p>\n<p>5.APNs根据消息中的device token查找已注册的设备推送消息。</p>\n<p>说明：</p>\n<p>a.正常情况下可以根据device token将消息成功推送到客户端设备中，但是也不排除用户卸载程序的情况，此时推送消息失败，APNs会将这个错误消息通知服务器端以避免资源浪费（服 务器端此时可以根据错误删除已经存储的device token，下次不再发送）。</p>\n<p>下面将简单演示一下推送通知的简单流程:</p>\n<p>首先，看一下iOS客户端代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  AppDelegate.m</span></div><div class=\"line\"><span class=\"comment\">//  pushnotification</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/27.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"AppDelegate.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"KCMainViewController.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AppDelegate</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">AppDelegate</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 应用程序代理方法</span></div><div class=\"line\"><span class=\"meta\">#pragma mark 应用程序启动之后</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions &#123;</div><div class=\"line\">    </div><div class=\"line\">    _window=[[<span class=\"built_in\">UIWindow</span> alloc]initWithFrame:[<span class=\"built_in\">UIScreen</span> mainScreen].bounds];</div><div class=\"line\">    </div><div class=\"line\">    _window.backgroundColor =[<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">249</span>/<span class=\"number\">255.0</span> green:<span class=\"number\">249</span>/<span class=\"number\">255.0</span> blue:<span class=\"number\">249</span>/<span class=\"number\">255.0</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//设置全局导航条风格和颜色</span></div><div class=\"line\">    [[<span class=\"built_in\">UINavigationBar</span> appearance] setBarTintColor:[<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">23</span>/<span class=\"number\">255.0</span> green:<span class=\"number\">180</span>/<span class=\"number\">255.0</span> blue:<span class=\"number\">237</span>/<span class=\"number\">255.0</span> alpha:<span class=\"number\">1</span>]];</div><div class=\"line\">    [[<span class=\"built_in\">UINavigationBar</span> appearance] setBarStyle:<span class=\"built_in\">UIBarStyleBlack</span>];</div><div class=\"line\">    </div><div class=\"line\">    KCMainViewController *mainController=[[KCMainViewController alloc]init];</div><div class=\"line\">    _window.rootViewController=mainController;</div><div class=\"line\">    </div><div class=\"line\">    [_window makeKeyAndVisible];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//注册推送通知（注意iOS8注册方法发生了变化）</span></div><div class=\"line\">    [application registerUserNotificationSettings:[<span class=\"built_in\">UIUserNotificationSettings</span> settingsForTypes:<span class=\"built_in\">UIUserNotificationTypeAlert</span>|<span class=\"built_in\">UIUserNotificationTypeBadge</span>|<span class=\"built_in\">UIUserNotificationTypeSound</span> categories:<span class=\"literal\">nil</span>]];</div><div class=\"line\">    [application registerForRemoteNotifications];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark 注册推送通知之后</span></div><div class=\"line\"><span class=\"comment\">//在此接收设备令牌</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didRegisterForRemoteNotificationsWithDeviceToken:(<span class=\"built_in\">NSData</span> *)deviceToken&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> addDeviceToken:deviceToken];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"device token:%@\"</span>,deviceToken);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark 获取device token失败后</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFailToRegisterForRemoteNotificationsWithError:(<span class=\"built_in\">NSError</span> *)error&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"didFailToRegisterForRemoteNotificationsWithError:%@\"</span>,error.localizedDescription);</div><div class=\"line\">    [<span class=\"keyword\">self</span> addDeviceToken:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark 接收到推送通知之后</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didReceiveRemoteNotification:(<span class=\"built_in\">NSDictionary</span> *)userInfo&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"receiveRemoteNotification,userInfo is %@\"</span>,userInfo);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  添加设备令牌到服务器端</div><div class=\"line\"> *</div><div class=\"line\"> *  @param deviceToken 设备令牌</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)addDeviceToken:(<span class=\"built_in\">NSData</span> *)deviceToken&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *key=<span class=\"string\">@\"DeviceToken\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *oldToken= [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults]objectForKey:key];</div><div class=\"line\">    <span class=\"comment\">//如果偏好设置中的已存储设备令牌和新获取的令牌不同则存储新令牌并且发送给服务器端</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (![oldToken isEqualToData:deviceToken]) &#123;</div><div class=\"line\">        [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults] setObject:deviceToken forKey:key];</div><div class=\"line\">        [<span class=\"keyword\">self</span> sendDeviceTokenWidthOldDeviceToken:oldToken newDeviceToken:deviceToken];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)sendDeviceTokenWidthOldDeviceToken:(<span class=\"built_in\">NSData</span> *)oldToken newDeviceToken:(<span class=\"built_in\">NSData</span> *)newToken&#123;</div><div class=\"line\">    <span class=\"comment\">//注意一定确保真机可以正常访问下面的地址</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=<span class=\"string\">@\"http://192.168.1.101/RegisterDeviceToken.aspx\"</span>;</div><div class=\"line\">    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> URLWithString:urlStr];</div><div class=\"line\">    <span class=\"built_in\">NSMutableURLRequest</span> *requestM=[<span class=\"built_in\">NSMutableURLRequest</span> requestWithURL:url cachePolicy:<span class=\"number\">0</span> timeoutInterval:<span class=\"number\">10.0</span>];</div><div class=\"line\">    [requestM setHTTPMethod:<span class=\"string\">@\"POST\"</span>];</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *bodyStr=[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"oldToken=%@&amp;newToken=%@\"</span>,oldToken,newToken];</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *body=[bodyStr dataUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">    [requestM setHTTPBody:body];</div><div class=\"line\">    <span class=\"built_in\">NSURLSession</span> *session=[<span class=\"built_in\">NSURLSession</span> sharedSession];</div><div class=\"line\">    <span class=\"built_in\">NSURLSessionDataTask</span> *dataTask= [session dataTaskWithRequest:requestM completionHandler:^(<span class=\"built_in\">NSData</span> *data, <span class=\"built_in\">NSURLResponse</span> *response, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Send failure,error is :%@\"</span>,error.localizedDescription);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Send Success!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;];</div><div class=\"line\">    [dataTask resume];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>iOS客户端代码的代码比较简单，注册推送通知，获取device token存储到偏好设置中，并且如果新获取的device token不同于偏好设置中存储的数据则发送给服务器端，更新服务器端device token列表。</p>\n<p>其次，由于device token需要发送给服务器端，这里使用一个Web应用作为服务器端接收device token，这里使用了ASP.NET程序来处理令牌接收注册工作，当然你使用其他技术同样没有问题。下面是对应的后台代码：</p>\n<p>using System;<br>using System.Collections.Generic;<br>using System.Web;<br>using System.Web.UI;<br>using System.Web.UI.WebControls;<br>using CMJ.Framework.Data;</p>\n<p>namespace WebServer<br>{<br>    public partial class RegisterDeviceToken : System.Web.UI.Page<br>    {<br>        private string _appID = @”com.cmjstudio.pushnotification”;<br>        private SqlHelper _helper = new SqlHelper();<br>        protected void Page_Load(object sender, EventArgs e)<br>        {<br>            try<br>            {<br>                string oldToken = Request[“oldToken”] + “”;<br>                string newToken = Request[“newToken”] + “”;<br>                string sql = “”;<br>                //如果传递旧的设备令牌则删除旧令牌添加新令牌<br>                if (oldToken != “”)<br>                {<br>                    sql = string.Format(“DELETE FROM dbo.Device WHERE AppID=’{0}’ AND DeviceToken=’{1}’;”, _appID, oldToken);<br>                }<br>                sql += string.Format(@”IF NOT EXISTS (SELECT ID FROM dbo.Device WHERE AppID=’{0}’ AND DeviceToken=’{1}’)<br>                                        INSERT INTO dbo.Device ( AppID, DeviceToken ) VALUES ( N’{0}’, N’{1}’);”, _appID, newToken);<br>                _helper.ExecuteNonQuery(sql);<br>                Response.Write(“注册成功！”);<br>            }<br>            catch(Exception ex)<br>            {<br>                Response.Write(“注册失败，错误详情：”+ex.ToString());<br>            }<br>        }<br>    }<br>}<br>这个过程主要就是保存device token到数据库中，当然如果同时传递旧的设备令牌还需要先删除就的设备令牌，这里简单的在数据库中创建了一张Device表来保存设备令牌，其中记录了应用程序Id和设备令牌。</p>\n<p>第三步就是服务器端发送消息，如果要给APNs发送消息就必须按照Apple的标准消息格式组织消息内容。但是好在目前已经有很多开源的第三方类库供我们使用，具体消息如何包装完全不用自己组织，这里使用一个开源的类库Push Sharp来 给APNs发送消息 ,除了可以给Apple设备推送消息，Push Sharp还支持Android、Windows Phone等多种设备，更多详细内容大家可以参照官方说明。前面说过如果要开发消息推送应用不能使用一般的开发配置文件，这里还需要注意：如果服务器端要 给APNs发送消息其秘钥也必须是通过APNs Development iOS类型的证书来导出的，一般的iOS Development 类型的证书导出的秘钥无法用作服务器端发送秘钥。下面通过在一个简单的WinForm程序中调用Push Sharp给APNs发送消息，这里读取之前Device表中的所有设备令牌循环发送消息：</p>\n<p>using System;<br>using System.IO;<br>using System.Collections.Generic;<br>using System.ComponentModel;<br>using System.Data;<br>using System.Drawing;<br>using System.Text;<br>using System.Windows.Forms;<br>using PushSharp;<br>using PushSharp.Apple;<br>using CMJ.Framework.Data;<br>using CMJ.Framework.Logging;<br>using CMJ.Framework.Windows.Forms;</p>\n<p>namespace PushNotificationServer<br>{<br>    public partial class frmMain : PersonalizeForm<br>    {<br>        private string _appID = @”com.cmjstudio.pushnotification”;<br>        private SqlHelper _helper = new SqlHelper();<br>        public frmMain()<br>        {<br>            InitializeComponent();<br>        }</p>\n<pre><code>    private void btnClose_Click(object sender, EventArgs e)\n    {\n        this.Close();\n    }\n\n    private void btnSend_Click(object sender, EventArgs e)\n    {\n        List&lt;string&gt; deviceTokens = GetDeviceToken();\n        SendMessage(deviceTokens, tbMessage.Text);\n    }\n\n    #region 发送消息\n    /// &lt;summary&gt;\n    /// 取得所有设备令牌\n    /// &lt;/summary&gt;\n    /// &lt;returns&gt;设备令牌&lt;/returns&gt;\n    private List&lt;string&gt; GetDeviceToken()\n    {\n        List&lt;string&gt; deviceTokens = new List&lt;string&gt;();\n        string sql = string.Format(&quot;SELECT DeviceToken FROM dbo.Device WHERE AppID=&apos;{0}&apos;&quot;,_appID);\n        DataTable dt = _helper.GetDataTable(sql);\n        if(dt.Rows.Count&gt;0)\n        {\n            foreach(DataRow dr in dt.Rows)\n            {\n                deviceTokens.Add((dr[&quot;DeviceToken&quot;]+&quot;&quot;).TrimStart(&apos;&lt;&apos;).TrimEnd(&apos;&gt;&apos;).Replace(&quot; &quot;,&quot;&quot;));\n            }\n        }\n        return deviceTokens;\n    }\n\n    /// &lt;summary&gt;\n    /// 发送消息\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;deviceToken&quot;&gt;设备令牌&lt;/param&gt;\n    /// &lt;param name=&quot;message&quot;&gt;消息内容&lt;/param&gt;\n    private void SendMessage(List&lt;string&gt; deviceToken, string message)\n    {\n        //创建推送对象\n        var pusher = new PushBroker();\n        pusher.OnNotificationSent += pusher_OnNotificationSent;//发送成功事件\n        pusher.OnNotificationFailed += pusher_OnNotificationFailed;//发送失败事件\n        pusher.OnChannelCreated += pusher_OnChannelCreated;\n        pusher.OnChannelDestroyed += pusher_OnChannelDestroyed;\n        pusher.OnChannelException += pusher_OnChannelException;\n        pusher.OnDeviceSubscriptionChanged += pusher_OnDeviceSubscriptionChanged;\n        pusher.OnDeviceSubscriptionExpired += pusher_OnDeviceSubscriptionExpired;\n        pusher.OnNotificationRequeue += pusher_OnNotificationRequeue;\n        pusher.OnServiceException += pusher_OnServiceException;\n        //注册推送服务\n        byte[] certificateData = File.ReadAllBytes(@&quot;E:\\KenshinCui_Push.p12&quot;);\n        pusher.RegisterAppleService(new ApplePushChannelSettings(certificateData, &quot;123&quot;));\n        foreach (string token in deviceToken)\n        {\n            //给指定设备发送消息\n            pusher.QueueNotification(new AppleNotification()\n                .ForDeviceToken(token)\n                .WithAlert(message) \n                .WithBadge(1)\n                .WithSound(&quot;default&quot;));\n        }\n    }\n\n    void pusher_OnServiceException(object sender, Exception error)\n    {\n        Console.WriteLine(&quot;消息发送失败，错误详情：&quot; + error.ToString());\n        PersonalizeMessageBox.Show(this, &quot;消息发送失败，错误详情：&quot; + error.ToString(), &quot;系统提示&quot;);\n    }\n\n    void pusher_OnNotificationRequeue(object sender, PushSharp.Core.NotificationRequeueEventArgs e)\n    {\n        Console.WriteLine(&quot;pusher_OnNotificationRequeue&quot;);\n    }\n\n    void pusher_OnDeviceSubscriptionExpired(object sender, string expiredSubscriptionId, DateTime expirationDateUtc, PushSharp.Core.INotification notification)\n    {\n        Console.WriteLine(&quot;pusher_OnDeviceSubscriptionChanged&quot;);\n    }\n\n    void pusher_OnDeviceSubscriptionChanged(object sender, string oldSubscriptionId, string newSubscriptionId, PushSharp.Core.INotification notification)\n    {\n        Console.WriteLine(&quot;pusher_OnDeviceSubscriptionChanged&quot;);\n    }\n\n    void pusher_OnChannelException(object sender, PushSharp.Core.IPushChannel pushChannel, Exception error)\n    {\n        Console.WriteLine(&quot;消息发送失败，错误详情：&quot; + error.ToString());\n        PersonalizeMessageBox.Show(this, &quot;消息发送失败，错误详情：&quot; + error.ToString(), &quot;系统提示&quot;);\n    }\n\n    void pusher_OnChannelDestroyed(object sender)\n    {\n        Console.WriteLine(&quot;pusher_OnChannelDestroyed&quot;);\n    }\n\n    void pusher_OnChannelCreated(object sender, PushSharp.Core.IPushChannel pushChannel)\n    {\n        Console.WriteLine(&quot;pusher_OnChannelCreated&quot;);\n    }\n\n    void pusher_OnNotificationFailed(object sender, PushSharp.Core.INotification notification, Exception error)\n    {\n        Console.WriteLine(&quot;消息发送失败，错误详情：&quot; + error.ToString());\n        PersonalizeMessageBox.Show(this, &quot;消息发送失败，错误详情：&quot;+error.ToString(), &quot;系统提示&quot;);\n    }\n\n    void pusher_OnNotificationSent(object sender, PushSharp.Core.INotification notification)\n    {\n        Console.WriteLine(&quot;消息发送成功！&quot;);\n        PersonalizeMessageBox.Show(this, &quot;消息发送成功！&quot;, &quot;系统提示&quot;);\n    }\n    #endregion\n}\n</code></pre><p>}<br>服务器端消息发送应用运行效果：</p>\n<p>iOS客户端接收的消息的效果：</p>\n<p>到目前为止通过服务器端应用可以顺利发送消息给APNs并且iOS应用已经成功接收推送消息。</p>\n<p>补充–iOS开发证书、秘钥</p>\n<p>iOS开发过程中如果需要进行真机调试、发布需要注册申请很多证书，对于初学者往往迷惑不解，再加上今天的文章中会牵扯到一些特殊配置，这里就简单的对iOS开发的常用证书和秘钥等做一说明。</p>\n<p>证书</p>\n<p>iOS常用的证书包括开发证书和发布证书，无论是真机调试还是最终发布应用到App Store这两个证书都是必须的，它是iOS开发的基本证书。</p>\n<p>a.开发证书：开发证书又分为普通开发证书和推送证书，如果仅仅是一般的应用则前者即可满足，但是如果开发推送应用则必须使用推送证书。</p>\n<p>b.发布证书：发布证书又可以分为普通发布证书、推送证书、Pass Type ID证书、站点发布证书、VoIP服务证书、苹果支付证书。同样的，对于需要使用特殊服务的应用则必须选择对应的证书。</p>\n<p>应用标识</p>\n<p>App ID,应用程序的唯一标识，对应iOS应用的Bundle Identifier，App ID在苹果开发者中心中分为通配应用ID和明确的应用ID,前者一般用于普通应用开发，一个ID可以适用于多个不同标识的应用；但是对于使用消息推送、 Passbook、站点发布、iCloud等服务的应用必须配置明确的应用ID。</p>\n<p>设备标识</p>\n<p>UDID,用于标识每一台硬件设备的标示符。注意它不是device token，device token是根据UDID使用一个只有Apple自己才知道的算法生成的一组标示符。</p>\n<p>配置简介</p>\n<p>Provisioning Profiles,平时又称为PP文件。将UDID、App ID、开发证书打包在一起的配置文件，同样分为开发和发布两类配置文件。</p>\n<p>秘钥</p>\n<p>在申请开发证书时必须要首先提交一个秘钥请求文件，对于生成秘钥请求文件的mac，如果要做开发则只需要下载证书和配置简介即可开发。但是如果要想 在其他机器上做开发则必须将证书中的秘钥导出（导出之后是一个.p12文件），然后导入其他机器。同时对于类似于推送服务器端应用如果要给APNs发送消 息，同样需要使用.p12秘钥文件，并且这个秘钥文件需要是推送证书导出的对应秘钥。</p>\n","excerpt":"","more":"<p>和本地通知不同，推送通知是由应用服务提供商发起的，通过苹果的APNs（Apple Push Notification Server）发送到应用客户端。下面是苹果官方关于推送通知的过程示意图：</p>\n<p>推送通知的过程可以分为以下几步：</p>\n<p>应用服务提供商从服务器端把要发送的消息和设备令牌（device token）发送给苹果的消息推送服务器APNs。<br>APNs根据设备令牌在已注册的设备（iPhone、iPad、iTouch、mac等）查找对应的设备，将消息发送给相应的设备。<br>客户端设备接将接收到的消息传递给相应的应用程序，应用程序根据用户设置弹出通知消息。<br>当然，这只是一个简单的流程，有了这个流程我们还无从下手编写程序，将上面的流程细化可以得到如下流程图（图片来自互联网），在这个过程中会也会提到如何在程序中完成这些步骤：</p>\n<p>1.应用程序注册APNs推送消息。</p>\n<p>说明：</p>\n<p>a.只有注册过的应用才有可能接收到消息，程序中通常通过UIApplication的registerUserNotificationSettings:方法注册，iOS8中通知注册的方法发生了改变，如果是iOS7及之前版本的iOS请参考其他代码。</p>\n<p>b.注册之前有两个前提条件必须准备好：开发配置文件（provisioning profile，也就是.mobileprovision后缀的文件）的App ID不能使用通配ID必须使用指定APP ID并且生成配置文件中选择Push Notifications服务，一般的开发配置文件无法完成注册；应用程序的Bundle Identifier必须和生成配置文件使用的APP ID完全一致。</p>\n<p>2.iOS从APNs接收device token，在应用程序获取device token。</p>\n<p>说明：</p>\n<p>a.在UIApplication的-(void)application:(UIApplication <em>)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData </em>)deviceToken代理方法中获取令牌，此方法发生在注册之后。</p>\n<p>b.如果无法正确获得device token可以在UIApplication的-(void)application:(UIApplication <em>)application didFailToRegisterForRemoteNotificationsWithError:(NSError </em>)error代理方法中查看详细错误信息，此方法发生在获取device token失败之后。</p>\n<p>c.必须真机调试，模拟器无法获取device token。</p>\n<p>3.iOS应用将device token发送给应用程序提供商，告诉服务器端当前设备允许接收消息。</p>\n<p>说明：</p>\n<p>a.device token的生成算法只有Apple掌握，为了确保算法发生变化后仍然能够正常接收服务器端发送的通知，每次应用程序启动都重新获得device token（注意：device token的获取不会造成性能问题，苹果官方已经做过优化）。</p>\n<p>b.通常可以创建一个网络连接发送给应用程序提供商的服务器端， 在这个过程中最好将上一次获得的device token存储起来，避免重复发送，一旦发现device token发生了变化最好将原有的device token一块发送给服务器端，服务器端删除原有令牌存储新令牌避免服务器端发送无效消息。</p>\n<p>4.应用程序提供商在服务器端根据前面发送过来的device token组织信息发送给APNs。</p>\n<p>说明：</p>\n<p>a.发送时指定device token和消息内容，并且完全按照苹果官方的消息格式组织消息内容，通常情况下可以借助其他第三方消息推送框架来完成。</p>\n<p>5.APNs根据消息中的device token查找已注册的设备推送消息。</p>\n<p>说明：</p>\n<p>a.正常情况下可以根据device token将消息成功推送到客户端设备中，但是也不排除用户卸载程序的情况，此时推送消息失败，APNs会将这个错误消息通知服务器端以避免资源浪费（服 务器端此时可以根据错误删除已经存储的device token，下次不再发送）。</p>\n<p>下面将简单演示一下推送通知的简单流程:</p>\n<p>首先，看一下iOS客户端代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  AppDelegate.m</span></div><div class=\"line\"><span class=\"comment\">//  pushnotification</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/27.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"AppDelegate.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"KCMainViewController.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AppDelegate</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">AppDelegate</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 应用程序代理方法</span></div><div class=\"line\"><span class=\"meta\">#pragma mark 应用程序启动之后</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions &#123;</div><div class=\"line\">    </div><div class=\"line\">    _window=[[<span class=\"built_in\">UIWindow</span> alloc]initWithFrame:[<span class=\"built_in\">UIScreen</span> mainScreen].bounds];</div><div class=\"line\">    </div><div class=\"line\">    _window.backgroundColor =[<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">249</span>/<span class=\"number\">255.0</span> green:<span class=\"number\">249</span>/<span class=\"number\">255.0</span> blue:<span class=\"number\">249</span>/<span class=\"number\">255.0</span> alpha:<span class=\"number\">1</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//设置全局导航条风格和颜色</span></div><div class=\"line\">    [[<span class=\"built_in\">UINavigationBar</span> appearance] setBarTintColor:[<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">23</span>/<span class=\"number\">255.0</span> green:<span class=\"number\">180</span>/<span class=\"number\">255.0</span> blue:<span class=\"number\">237</span>/<span class=\"number\">255.0</span> alpha:<span class=\"number\">1</span>]];</div><div class=\"line\">    [[<span class=\"built_in\">UINavigationBar</span> appearance] setBarStyle:<span class=\"built_in\">UIBarStyleBlack</span>];</div><div class=\"line\">    </div><div class=\"line\">    KCMainViewController *mainController=[[KCMainViewController alloc]init];</div><div class=\"line\">    _window.rootViewController=mainController;</div><div class=\"line\">    </div><div class=\"line\">    [_window makeKeyAndVisible];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//注册推送通知（注意iOS8注册方法发生了变化）</span></div><div class=\"line\">    [application registerUserNotificationSettings:[<span class=\"built_in\">UIUserNotificationSettings</span> settingsForTypes:<span class=\"built_in\">UIUserNotificationTypeAlert</span>|<span class=\"built_in\">UIUserNotificationTypeBadge</span>|<span class=\"built_in\">UIUserNotificationTypeSound</span> categories:<span class=\"literal\">nil</span>]];</div><div class=\"line\">    [application registerForRemoteNotifications];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark 注册推送通知之后</span></div><div class=\"line\"><span class=\"comment\">//在此接收设备令牌</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didRegisterForRemoteNotificationsWithDeviceToken:(<span class=\"built_in\">NSData</span> *)deviceToken&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> addDeviceToken:deviceToken];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"device token:%@\"</span>,deviceToken);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark 获取device token失败后</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFailToRegisterForRemoteNotificationsWithError:(<span class=\"built_in\">NSError</span> *)error&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"didFailToRegisterForRemoteNotificationsWithError:%@\"</span>,error.localizedDescription);</div><div class=\"line\">    [<span class=\"keyword\">self</span> addDeviceToken:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark 接收到推送通知之后</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didReceiveRemoteNotification:(<span class=\"built_in\">NSDictionary</span> *)userInfo&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"receiveRemoteNotification,userInfo is %@\"</span>,userInfo);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  添加设备令牌到服务器端</div><div class=\"line\"> *</div><div class=\"line\"> *  @param deviceToken 设备令牌</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)addDeviceToken:(<span class=\"built_in\">NSData</span> *)deviceToken&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *key=<span class=\"string\">@\"DeviceToken\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *oldToken= [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults]objectForKey:key];</div><div class=\"line\">    <span class=\"comment\">//如果偏好设置中的已存储设备令牌和新获取的令牌不同则存储新令牌并且发送给服务器端</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (![oldToken isEqualToData:deviceToken]) &#123;</div><div class=\"line\">        [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults] setObject:deviceToken forKey:key];</div><div class=\"line\">        [<span class=\"keyword\">self</span> sendDeviceTokenWidthOldDeviceToken:oldToken newDeviceToken:deviceToken];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)sendDeviceTokenWidthOldDeviceToken:(<span class=\"built_in\">NSData</span> *)oldToken newDeviceToken:(<span class=\"built_in\">NSData</span> *)newToken&#123;</div><div class=\"line\">    <span class=\"comment\">//注意一定确保真机可以正常访问下面的地址</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=<span class=\"string\">@\"http://192.168.1.101/RegisterDeviceToken.aspx\"</span>;</div><div class=\"line\">    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> URLWithString:urlStr];</div><div class=\"line\">    <span class=\"built_in\">NSMutableURLRequest</span> *requestM=[<span class=\"built_in\">NSMutableURLRequest</span> requestWithURL:url cachePolicy:<span class=\"number\">0</span> timeoutInterval:<span class=\"number\">10.0</span>];</div><div class=\"line\">    [requestM setHTTPMethod:<span class=\"string\">@\"POST\"</span>];</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *bodyStr=[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"oldToken=%@&amp;newToken=%@\"</span>,oldToken,newToken];</div><div class=\"line\">    <span class=\"built_in\">NSData</span> *body=[bodyStr dataUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">    [requestM setHTTPBody:body];</div><div class=\"line\">    <span class=\"built_in\">NSURLSession</span> *session=[<span class=\"built_in\">NSURLSession</span> sharedSession];</div><div class=\"line\">    <span class=\"built_in\">NSURLSessionDataTask</span> *dataTask= [session dataTaskWithRequest:requestM completionHandler:^(<span class=\"built_in\">NSData</span> *data, <span class=\"built_in\">NSURLResponse</span> *response, <span class=\"built_in\">NSError</span> *error) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Send failure,error is :%@\"</span>,error.localizedDescription);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Send Success!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;];</div><div class=\"line\">    [dataTask resume];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>iOS客户端代码的代码比较简单，注册推送通知，获取device token存储到偏好设置中，并且如果新获取的device token不同于偏好设置中存储的数据则发送给服务器端，更新服务器端device token列表。</p>\n<p>其次，由于device token需要发送给服务器端，这里使用一个Web应用作为服务器端接收device token，这里使用了ASP.NET程序来处理令牌接收注册工作，当然你使用其他技术同样没有问题。下面是对应的后台代码：</p>\n<p>using System;<br>using System.Collections.Generic;<br>using System.Web;<br>using System.Web.UI;<br>using System.Web.UI.WebControls;<br>using CMJ.Framework.Data;</p>\n<p>namespace WebServer<br>{<br>    public partial class RegisterDeviceToken : System.Web.UI.Page<br>    {<br>        private string _appID = @”com.cmjstudio.pushnotification”;<br>        private SqlHelper _helper = new SqlHelper();<br>        protected void Page_Load(object sender, EventArgs e)<br>        {<br>            try<br>            {<br>                string oldToken = Request[“oldToken”] + “”;<br>                string newToken = Request[“newToken”] + “”;<br>                string sql = “”;<br>                //如果传递旧的设备令牌则删除旧令牌添加新令牌<br>                if (oldToken != “”)<br>                {<br>                    sql = string.Format(“DELETE FROM dbo.Device WHERE AppID=’{0}’ AND DeviceToken=’{1}’;”, _appID, oldToken);<br>                }<br>                sql += string.Format(@”IF NOT EXISTS (SELECT ID FROM dbo.Device WHERE AppID=’{0}’ AND DeviceToken=’{1}’)<br>                                        INSERT INTO dbo.Device ( AppID, DeviceToken ) VALUES ( N’{0}’, N’{1}’);”, _appID, newToken);<br>                _helper.ExecuteNonQuery(sql);<br>                Response.Write(“注册成功！”);<br>            }<br>            catch(Exception ex)<br>            {<br>                Response.Write(“注册失败，错误详情：”+ex.ToString());<br>            }<br>        }<br>    }<br>}<br>这个过程主要就是保存device token到数据库中，当然如果同时传递旧的设备令牌还需要先删除就的设备令牌，这里简单的在数据库中创建了一张Device表来保存设备令牌，其中记录了应用程序Id和设备令牌。</p>\n<p>第三步就是服务器端发送消息，如果要给APNs发送消息就必须按照Apple的标准消息格式组织消息内容。但是好在目前已经有很多开源的第三方类库供我们使用，具体消息如何包装完全不用自己组织，这里使用一个开源的类库Push Sharp来 给APNs发送消息 ,除了可以给Apple设备推送消息，Push Sharp还支持Android、Windows Phone等多种设备，更多详细内容大家可以参照官方说明。前面说过如果要开发消息推送应用不能使用一般的开发配置文件，这里还需要注意：如果服务器端要 给APNs发送消息其秘钥也必须是通过APNs Development iOS类型的证书来导出的，一般的iOS Development 类型的证书导出的秘钥无法用作服务器端发送秘钥。下面通过在一个简单的WinForm程序中调用Push Sharp给APNs发送消息，这里读取之前Device表中的所有设备令牌循环发送消息：</p>\n<p>using System;<br>using System.IO;<br>using System.Collections.Generic;<br>using System.ComponentModel;<br>using System.Data;<br>using System.Drawing;<br>using System.Text;<br>using System.Windows.Forms;<br>using PushSharp;<br>using PushSharp.Apple;<br>using CMJ.Framework.Data;<br>using CMJ.Framework.Logging;<br>using CMJ.Framework.Windows.Forms;</p>\n<p>namespace PushNotificationServer<br>{<br>    public partial class frmMain : PersonalizeForm<br>    {<br>        private string _appID = @”com.cmjstudio.pushnotification”;<br>        private SqlHelper _helper = new SqlHelper();<br>        public frmMain()<br>        {<br>            InitializeComponent();<br>        }</p>\n<pre><code>    private void btnClose_Click(object sender, EventArgs e)\n    {\n        this.Close();\n    }\n\n    private void btnSend_Click(object sender, EventArgs e)\n    {\n        List&lt;string&gt; deviceTokens = GetDeviceToken();\n        SendMessage(deviceTokens, tbMessage.Text);\n    }\n\n    #region 发送消息\n    /// &lt;summary&gt;\n    /// 取得所有设备令牌\n    /// &lt;/summary&gt;\n    /// &lt;returns&gt;设备令牌&lt;/returns&gt;\n    private List&lt;string&gt; GetDeviceToken()\n    {\n        List&lt;string&gt; deviceTokens = new List&lt;string&gt;();\n        string sql = string.Format(&quot;SELECT DeviceToken FROM dbo.Device WHERE AppID=&apos;{0}&apos;&quot;,_appID);\n        DataTable dt = _helper.GetDataTable(sql);\n        if(dt.Rows.Count&gt;0)\n        {\n            foreach(DataRow dr in dt.Rows)\n            {\n                deviceTokens.Add((dr[&quot;DeviceToken&quot;]+&quot;&quot;).TrimStart(&apos;&lt;&apos;).TrimEnd(&apos;&gt;&apos;).Replace(&quot; &quot;,&quot;&quot;));\n            }\n        }\n        return deviceTokens;\n    }\n\n    /// &lt;summary&gt;\n    /// 发送消息\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;deviceToken&quot;&gt;设备令牌&lt;/param&gt;\n    /// &lt;param name=&quot;message&quot;&gt;消息内容&lt;/param&gt;\n    private void SendMessage(List&lt;string&gt; deviceToken, string message)\n    {\n        //创建推送对象\n        var pusher = new PushBroker();\n        pusher.OnNotificationSent += pusher_OnNotificationSent;//发送成功事件\n        pusher.OnNotificationFailed += pusher_OnNotificationFailed;//发送失败事件\n        pusher.OnChannelCreated += pusher_OnChannelCreated;\n        pusher.OnChannelDestroyed += pusher_OnChannelDestroyed;\n        pusher.OnChannelException += pusher_OnChannelException;\n        pusher.OnDeviceSubscriptionChanged += pusher_OnDeviceSubscriptionChanged;\n        pusher.OnDeviceSubscriptionExpired += pusher_OnDeviceSubscriptionExpired;\n        pusher.OnNotificationRequeue += pusher_OnNotificationRequeue;\n        pusher.OnServiceException += pusher_OnServiceException;\n        //注册推送服务\n        byte[] certificateData = File.ReadAllBytes(@&quot;E:\\KenshinCui_Push.p12&quot;);\n        pusher.RegisterAppleService(new ApplePushChannelSettings(certificateData, &quot;123&quot;));\n        foreach (string token in deviceToken)\n        {\n            //给指定设备发送消息\n            pusher.QueueNotification(new AppleNotification()\n                .ForDeviceToken(token)\n                .WithAlert(message) \n                .WithBadge(1)\n                .WithSound(&quot;default&quot;));\n        }\n    }\n\n    void pusher_OnServiceException(object sender, Exception error)\n    {\n        Console.WriteLine(&quot;消息发送失败，错误详情：&quot; + error.ToString());\n        PersonalizeMessageBox.Show(this, &quot;消息发送失败，错误详情：&quot; + error.ToString(), &quot;系统提示&quot;);\n    }\n\n    void pusher_OnNotificationRequeue(object sender, PushSharp.Core.NotificationRequeueEventArgs e)\n    {\n        Console.WriteLine(&quot;pusher_OnNotificationRequeue&quot;);\n    }\n\n    void pusher_OnDeviceSubscriptionExpired(object sender, string expiredSubscriptionId, DateTime expirationDateUtc, PushSharp.Core.INotification notification)\n    {\n        Console.WriteLine(&quot;pusher_OnDeviceSubscriptionChanged&quot;);\n    }\n\n    void pusher_OnDeviceSubscriptionChanged(object sender, string oldSubscriptionId, string newSubscriptionId, PushSharp.Core.INotification notification)\n    {\n        Console.WriteLine(&quot;pusher_OnDeviceSubscriptionChanged&quot;);\n    }\n\n    void pusher_OnChannelException(object sender, PushSharp.Core.IPushChannel pushChannel, Exception error)\n    {\n        Console.WriteLine(&quot;消息发送失败，错误详情：&quot; + error.ToString());\n        PersonalizeMessageBox.Show(this, &quot;消息发送失败，错误详情：&quot; + error.ToString(), &quot;系统提示&quot;);\n    }\n\n    void pusher_OnChannelDestroyed(object sender)\n    {\n        Console.WriteLine(&quot;pusher_OnChannelDestroyed&quot;);\n    }\n\n    void pusher_OnChannelCreated(object sender, PushSharp.Core.IPushChannel pushChannel)\n    {\n        Console.WriteLine(&quot;pusher_OnChannelCreated&quot;);\n    }\n\n    void pusher_OnNotificationFailed(object sender, PushSharp.Core.INotification notification, Exception error)\n    {\n        Console.WriteLine(&quot;消息发送失败，错误详情：&quot; + error.ToString());\n        PersonalizeMessageBox.Show(this, &quot;消息发送失败，错误详情：&quot;+error.ToString(), &quot;系统提示&quot;);\n    }\n\n    void pusher_OnNotificationSent(object sender, PushSharp.Core.INotification notification)\n    {\n        Console.WriteLine(&quot;消息发送成功！&quot;);\n        PersonalizeMessageBox.Show(this, &quot;消息发送成功！&quot;, &quot;系统提示&quot;);\n    }\n    #endregion\n}\n</code></pre><p>}<br>服务器端消息发送应用运行效果：</p>\n<p>iOS客户端接收的消息的效果：</p>\n<p>到目前为止通过服务器端应用可以顺利发送消息给APNs并且iOS应用已经成功接收推送消息。</p>\n<p>补充–iOS开发证书、秘钥</p>\n<p>iOS开发过程中如果需要进行真机调试、发布需要注册申请很多证书，对于初学者往往迷惑不解，再加上今天的文章中会牵扯到一些特殊配置，这里就简单的对iOS开发的常用证书和秘钥等做一说明。</p>\n<p>证书</p>\n<p>iOS常用的证书包括开发证书和发布证书，无论是真机调试还是最终发布应用到App Store这两个证书都是必须的，它是iOS开发的基本证书。</p>\n<p>a.开发证书：开发证书又分为普通开发证书和推送证书，如果仅仅是一般的应用则前者即可满足，但是如果开发推送应用则必须使用推送证书。</p>\n<p>b.发布证书：发布证书又可以分为普通发布证书、推送证书、Pass Type ID证书、站点发布证书、VoIP服务证书、苹果支付证书。同样的，对于需要使用特殊服务的应用则必须选择对应的证书。</p>\n<p>应用标识</p>\n<p>App ID,应用程序的唯一标识，对应iOS应用的Bundle Identifier，App ID在苹果开发者中心中分为通配应用ID和明确的应用ID,前者一般用于普通应用开发，一个ID可以适用于多个不同标识的应用；但是对于使用消息推送、 Passbook、站点发布、iCloud等服务的应用必须配置明确的应用ID。</p>\n<p>设备标识</p>\n<p>UDID,用于标识每一台硬件设备的标示符。注意它不是device token，device token是根据UDID使用一个只有Apple自己才知道的算法生成的一组标示符。</p>\n<p>配置简介</p>\n<p>Provisioning Profiles,平时又称为PP文件。将UDID、App ID、开发证书打包在一起的配置文件，同样分为开发和发布两类配置文件。</p>\n<p>秘钥</p>\n<p>在申请开发证书时必须要首先提交一个秘钥请求文件，对于生成秘钥请求文件的mac，如果要做开发则只需要下载证书和配置简介即可开发。但是如果要想 在其他机器上做开发则必须将证书中的秘钥导出（导出之后是一个.p12文件），然后导入其他机器。同时对于类似于推送服务器端应用如果要给APNs发送消 息，同样需要使用.p12秘钥文件，并且这个秘钥文件需要是推送证书导出的对应秘钥。</p>"},{"title":"数组 基本用法和排序","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n1.创建数组\n\n**[objc]** [view\n plain](http://blog.csdn.net/daiyelang/article/details/18726947# \"view plain\")[copy](http://blog.csdn.net/daiyelang/article/details/18726947# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/169157 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/169157/fork \"派生到我的代码片\")1. // 创建一个空的数组  \n2. NSArray *array = [NSArray array];      \n3. // 创建有1个元素的数组  \n4. array = [NSArray arrayWithObject:@\"123\"];  \n5. // 创建有多个元素的数组  \n6. array = [NSArray arrayWithObjects:@\"a\", @\"b\", @\"c\", nil nil];  \n7. NSArray *array3 = [array arrayByAddingObjectsFromArray:[NSArray arrayWithObjects:@\"4\", @\"5\", nil nil]];  \n8.   \n9. NSArray *array4 = [NSArray arrayWithObjects:@\"1\", @\"2\", @\"3\", @\"4\", nil nil];  \n10. NSRange range = NSMakeRange(1, 2);  \n11. NSArray *array5 = [array4 subarrayWithRange:range];  \n\n\n\n\n2.数组的一些基本方法\n\n\n**[objc]** [view\n plain](http://blog.csdn.net/daiyelang/article/details/18726947# \"view plain\")[copy](http://blog.csdn.net/daiyelang/article/details/18726947# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/169157 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/169157/fork \"派生到我的代码片\")1. int count = [array count];//个数  \n2. // 判断是否包含了某个元素  \n3. if ([array containsObject:@\"a\"]) {  \n4.     NSLog(@\"包含了字符串a\");  \n5. }  \n6. NSString *last = [array lastObject];最后一个元素  \n7. NSString *str = [array objectAtIndex:1];根据索引获取数组中的元素  \n8. int index = [array indexOfObject:@\"c\"];获取指定元素的索引  \n9. // 让数组里面的所有对象都调用test方法，123为参数  \n10. NSArray *array = [NSArray arrayWithObjects:stu1, stu2, stu3, nil nil];  \n11. [array makeObjectsPerformSelector:@selector(test2:) withObject:@\"123\"];  \n12. NSArray *array = [NSArray arrayWithObjects:@\"1\", @\"2\", @\"3\", @\"4\", nil nil];  \n13. // 1-2-3-4  \n14. // 利用分隔符-拼接所有的数组元素  \n15. NSString *str = [array componentsJoinedByString:@\"-\"];  \n16. // 将一个数组写入文件（生成的是一个xml文件）  \n17. NSString *path = @\"/Users/apple/Desktop/array.xml\";  \n18. [array writeToFile:path atomically:YES];  \n19. path = @\"/Users/apple/Desktop/array.txt\";  \n20. // 从文件中读取数组内容（文件有严格的格式要求）  \n21. NSArray *array2 = [NSArray arrayWithContentsOfFile:path];  \n\n\n3.遍历数组\n\n**[objc]** [view\n plain](http://blog.csdn.net/daiyelang/article/details/18726947# \"view plain\")[copy](http://blog.csdn.net/daiyelang/article/details/18726947# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/169157 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/169157/fork \"派生到我的代码片\")1. #pragma mark 遍历数组1  \n2. void arrayFor1() {  \n3.     NSArray *array = [NSArray arrayWithObjects:stu1, @\"1\", @\"2\", @\"3\", nil nil];  \n4.     int count = array.count;  \n5.     for (int i = 0; i<count; i++) {  \n6.         id obj = [array objectAtIndex:i];  \n7.     }  \n8. }  \n9.   \n10. #pragma mark 遍历数组2 快速遍历  \n11. void arrayFor2() {  \n12.     Student *stu1 = [Student student];  \n13.     NSArray *array = [NSArray arrayWithObjects:stu1, @\"1\", @\"2\", @\"3\", nil nil];  \n14.     int i =0;  \n15.     for (id obj in array) {  \n16.         NSLog(@\"%i-%@\", i, obj);  \n17.         i++;  \n18.     }  \n19. }  \n20.   \n21. #pragma mark 遍历数组3  \n22. void arrayFor3() {  \n23.     Student *stu1 = [Student student];  \n24.     NSArray *array = [NSArray arrayWithObjects:stu1, @\"1\", @\"2\", @\"3\", nil nil];  \n25.     [array enumerateObjectsUsingBlock:  \n26.      ^(id obj, NSUInteger idx, BOOLBOOL *stop) {  \n27.         NSLog(@\"%i-%@\", idx, obj);  \n28.          // 如果索引为1，就停止遍历  \n29.          if (idx == 1) {  \n30.              // 利用指针修改外面BOOL变量的值  \n31.              *stop = YES;  \n32.          }  \n33.     }];  \n34. }  \n35.   \n36. #pragma mark 遍历数组4  \n37. void arrayFor4() {  \n38.     Student *stu1 = [Student student];  \n39.     NSArray *array = [NSArray arrayWithObjects:stu1, @\"1\", @\"2\", @\"3\", nil nil];  \n40.     // 获取数组的迭代器  \n41.     // NSEnumerator *enumerator = [array objectEnumerator];  \n42.     // 反序迭代器（从尾部开始遍历元素）  \n43.     NSEnumerator *enumerator = [array reverseObjectEnumerator];  \n44.     // allObjects是取出没有被遍历过的对象  \n45.     NSArray *array2 = [enumerator allObjects];  \n46.     NSLog(@\"array2:%@\", array2);  \n47.     // 获取下一个需要遍历的元素  \n48.     id obj = nil;  \n49.     while (obj = [enumerator nextObject]) {  \n50.         NSLog(@\"obj=%@\", obj);  \n51.     }  \n52. }  \n\n\n\n\n4.数组排序\n\n**[objc]** [view\n plain](http://blog.csdn.net/daiyelang/article/details/18726947# \"view plain\")[copy](http://blog.csdn.net/daiyelang/article/details/18726947# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/169157 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/169157/fork \"派生到我的代码片\")1. #pragma mark 数组排序1  \n2. void arraySort1() {  \n3.     NSArray *array = [NSArray arrayWithObjects:@\"2\", @\"3\", @\"1\", @\"4\", nil nil];  \n4.       \n5.     // 返回一个排好序的数组，原来数组的元素顺序不会改变  \n6.     // 指定元素的比较方法：compare:  \n7.     NSArray *array2 = [array sortedArrayUsingSelector:@selector(compare:)];  \n8.     NSLog(@\"array2:%@\", array2);  \n9. }  \n10.   \n11. #pragma mark 数组排序2  \n12. void arraySort2() {  \n13.     Student *stu1 = [Student studentWithFirstname:@\"MingJie\" lastname:@\"Li\"];  \n14.     Student *stu2 = [Student studentWithFirstname:@\"LongHu\" lastname:@\"Huang\"];  \n15.     Student *stu3 = [Student studentWithFirstname:@\"LianJie\" lastname:@\"Li\"];  \n16.     Student *stu4 = [Student studentWithFirstname:@\"Jian\" lastname:@\"Xiao\"];  \n17.     NSArray *array = [NSArray arrayWithObjects:stu1,stu2,stu3, stu4, nil nil];  \n18.     // 指定排序的比较方法  \n19.     NSArray *array2 = [array sortedArrayUsingSelector:@selector(compareStudent:)];  \n20.     NSLog(@\"array2:%@\", array2);  \n21. }  \n22. - (NSComparisonResult)compareStudent:(Student *)stu {  \n23.     // 先按照姓排序  \n24.     NSComparisonResult result = [self.lastname compare:stu.lastname];  \n25.     // 如果有相同的姓，就比较名字  \n26.     if (result == NSOrderedSame) {  \n27.         result = [self.firstname compare:stu.firstname];  \n28.     }  \n29.     return result;  \n30. }  \n31.   \n32. #pragma mark 数组排序3  \n33. void arraySort3() {  \n34.     Student *stu1 = [Student studentWithFirstname:@\"MingJie\" lastname:@\"Li\"];  \n35.     Student *stu2 = [Student studentWithFirstname:@\"LongHu\" lastname:@\"Huang\"];  \n36.     Student *stu3 = [Student studentWithFirstname:@\"LianJie\" lastname:@\"Li\"];  \n37.     Student *stu4 = [Student studentWithFirstname:@\"Jian\" lastname:@\"Xiao\"];  \n38.     NSArray *array = [NSArray arrayWithObjects:stu1,stu2,stu3, stu4, nil nil];  \n39.       \n40.     // 利用block进行排序  \n41.     NSArray *array2 = [array sortedArrayUsingComparator:  \n42.      ^NSComparisonResult(Student *obj1, Student *obj2) {  \n43.          // 先按照姓排序  \n44.          NSComparisonResult result = [obj1.lastname compare:obj2.lastname];  \n45.          // 如果有相同的姓，就比较名字  \n46.          if (result == NSOrderedSame) {  \n47.              result = [obj1.firstname compare:obj2.firstname];  \n48.          }  \n49.            \n50.          return result;  \n51.     }];  \n52.       \n53.     NSLog(@\"array2:%@\", array2);  \n54. }  \n55.   \n56. #pragma mark 数组排序4-高级排序  \n57. void arraySort4() {  \n58.     Student *stu1 = [Student studentWithFirstname:@\"MingJie\" lastname:@\"Li\" bookName:@\"book1\"];  \n59.     Student *stu2 = [Student studentWithFirstname:@\"LongHu\" lastname:@\"Huang\" bookName:@\"book2\"];  \n60.     Student *stu3 = [Student studentWithFirstname:@\"LianJie\" lastname:@\"Li\" bookName:@\"book2\"];  \n61.     Student *stu4 = [Student studentWithFirstname:@\"Jian\" lastname:@\"Xiao\" bookName:@\"book1\"];  \n62.     NSArray *array = [NSArray arrayWithObjects:stu1,stu2,stu3, stu4, nil nil];  \n63.       \n64.     // 1.先按照书名进行排序  \n65.     // 这里的key写的是@property的名称  \n66.     NSSortDescriptor *bookNameDesc = [NSSortDescriptor sortDescriptorWithKey:@\"book.name\" ascending:YES];  \n67.     // 2.再按照姓进行排序  \n68.     NSSortDescriptor *lastnameDesc = [NSSortDescriptor sortDescriptorWithKey:@\"lastname\" ascending:YES];  \n69.     // 3.再按照名进行排序  \n70.     NSSortDescriptor *firstnameDesc = [NSSortDescriptor sortDescriptorWithKey:@\"firstname\" ascending:YES];  \n71.     // 按顺序添加排序描述器  \n72.     NSArray *descs = [NSArray arrayWithObjects:bookNameDesc, lastnameDesc, firstnameDesc, nil nil];  \n73.       \n74.     NSArray *array2 = [array sortedArrayUsingDescriptors:descs];  \n75.       \n76.     NSLog(@\"array2:%@\", array2);  \n77. }  \n\n","source":"_posts/oc/数组 基本用法和排序.md","raw":"---\ntitle: 数组 基本用法和排序\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n1.创建数组\n\n**[objc]** [view\n plain](http://blog.csdn.net/daiyelang/article/details/18726947# \"view plain\")[copy](http://blog.csdn.net/daiyelang/article/details/18726947# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/169157 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/169157/fork \"派生到我的代码片\")1. // 创建一个空的数组  \n2. NSArray *array = [NSArray array];      \n3. // 创建有1个元素的数组  \n4. array = [NSArray arrayWithObject:@\"123\"];  \n5. // 创建有多个元素的数组  \n6. array = [NSArray arrayWithObjects:@\"a\", @\"b\", @\"c\", nil nil];  \n7. NSArray *array3 = [array arrayByAddingObjectsFromArray:[NSArray arrayWithObjects:@\"4\", @\"5\", nil nil]];  \n8.   \n9. NSArray *array4 = [NSArray arrayWithObjects:@\"1\", @\"2\", @\"3\", @\"4\", nil nil];  \n10. NSRange range = NSMakeRange(1, 2);  \n11. NSArray *array5 = [array4 subarrayWithRange:range];  \n\n\n\n\n2.数组的一些基本方法\n\n\n**[objc]** [view\n plain](http://blog.csdn.net/daiyelang/article/details/18726947# \"view plain\")[copy](http://blog.csdn.net/daiyelang/article/details/18726947# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/169157 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/169157/fork \"派生到我的代码片\")1. int count = [array count];//个数  \n2. // 判断是否包含了某个元素  \n3. if ([array containsObject:@\"a\"]) {  \n4.     NSLog(@\"包含了字符串a\");  \n5. }  \n6. NSString *last = [array lastObject];最后一个元素  \n7. NSString *str = [array objectAtIndex:1];根据索引获取数组中的元素  \n8. int index = [array indexOfObject:@\"c\"];获取指定元素的索引  \n9. // 让数组里面的所有对象都调用test方法，123为参数  \n10. NSArray *array = [NSArray arrayWithObjects:stu1, stu2, stu3, nil nil];  \n11. [array makeObjectsPerformSelector:@selector(test2:) withObject:@\"123\"];  \n12. NSArray *array = [NSArray arrayWithObjects:@\"1\", @\"2\", @\"3\", @\"4\", nil nil];  \n13. // 1-2-3-4  \n14. // 利用分隔符-拼接所有的数组元素  \n15. NSString *str = [array componentsJoinedByString:@\"-\"];  \n16. // 将一个数组写入文件（生成的是一个xml文件）  \n17. NSString *path = @\"/Users/apple/Desktop/array.xml\";  \n18. [array writeToFile:path atomically:YES];  \n19. path = @\"/Users/apple/Desktop/array.txt\";  \n20. // 从文件中读取数组内容（文件有严格的格式要求）  \n21. NSArray *array2 = [NSArray arrayWithContentsOfFile:path];  \n\n\n3.遍历数组\n\n**[objc]** [view\n plain](http://blog.csdn.net/daiyelang/article/details/18726947# \"view plain\")[copy](http://blog.csdn.net/daiyelang/article/details/18726947# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/169157 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/169157/fork \"派生到我的代码片\")1. #pragma mark 遍历数组1  \n2. void arrayFor1() {  \n3.     NSArray *array = [NSArray arrayWithObjects:stu1, @\"1\", @\"2\", @\"3\", nil nil];  \n4.     int count = array.count;  \n5.     for (int i = 0; i<count; i++) {  \n6.         id obj = [array objectAtIndex:i];  \n7.     }  \n8. }  \n9.   \n10. #pragma mark 遍历数组2 快速遍历  \n11. void arrayFor2() {  \n12.     Student *stu1 = [Student student];  \n13.     NSArray *array = [NSArray arrayWithObjects:stu1, @\"1\", @\"2\", @\"3\", nil nil];  \n14.     int i =0;  \n15.     for (id obj in array) {  \n16.         NSLog(@\"%i-%@\", i, obj);  \n17.         i++;  \n18.     }  \n19. }  \n20.   \n21. #pragma mark 遍历数组3  \n22. void arrayFor3() {  \n23.     Student *stu1 = [Student student];  \n24.     NSArray *array = [NSArray arrayWithObjects:stu1, @\"1\", @\"2\", @\"3\", nil nil];  \n25.     [array enumerateObjectsUsingBlock:  \n26.      ^(id obj, NSUInteger idx, BOOLBOOL *stop) {  \n27.         NSLog(@\"%i-%@\", idx, obj);  \n28.          // 如果索引为1，就停止遍历  \n29.          if (idx == 1) {  \n30.              // 利用指针修改外面BOOL变量的值  \n31.              *stop = YES;  \n32.          }  \n33.     }];  \n34. }  \n35.   \n36. #pragma mark 遍历数组4  \n37. void arrayFor4() {  \n38.     Student *stu1 = [Student student];  \n39.     NSArray *array = [NSArray arrayWithObjects:stu1, @\"1\", @\"2\", @\"3\", nil nil];  \n40.     // 获取数组的迭代器  \n41.     // NSEnumerator *enumerator = [array objectEnumerator];  \n42.     // 反序迭代器（从尾部开始遍历元素）  \n43.     NSEnumerator *enumerator = [array reverseObjectEnumerator];  \n44.     // allObjects是取出没有被遍历过的对象  \n45.     NSArray *array2 = [enumerator allObjects];  \n46.     NSLog(@\"array2:%@\", array2);  \n47.     // 获取下一个需要遍历的元素  \n48.     id obj = nil;  \n49.     while (obj = [enumerator nextObject]) {  \n50.         NSLog(@\"obj=%@\", obj);  \n51.     }  \n52. }  \n\n\n\n\n4.数组排序\n\n**[objc]** [view\n plain](http://blog.csdn.net/daiyelang/article/details/18726947# \"view plain\")[copy](http://blog.csdn.net/daiyelang/article/details/18726947# \"copy\")[![在CODE上查看代码片](https://code.csdn.net/assets/CODE_ico.png)](https://code.csdn.net/snippets/169157 \"在CODE上查看代码片\")[![派生到我的代码片](https://code.csdn.net/assets/ico_fork.svg)](https://code.csdn.net/snippets/169157/fork \"派生到我的代码片\")1. #pragma mark 数组排序1  \n2. void arraySort1() {  \n3.     NSArray *array = [NSArray arrayWithObjects:@\"2\", @\"3\", @\"1\", @\"4\", nil nil];  \n4.       \n5.     // 返回一个排好序的数组，原来数组的元素顺序不会改变  \n6.     // 指定元素的比较方法：compare:  \n7.     NSArray *array2 = [array sortedArrayUsingSelector:@selector(compare:)];  \n8.     NSLog(@\"array2:%@\", array2);  \n9. }  \n10.   \n11. #pragma mark 数组排序2  \n12. void arraySort2() {  \n13.     Student *stu1 = [Student studentWithFirstname:@\"MingJie\" lastname:@\"Li\"];  \n14.     Student *stu2 = [Student studentWithFirstname:@\"LongHu\" lastname:@\"Huang\"];  \n15.     Student *stu3 = [Student studentWithFirstname:@\"LianJie\" lastname:@\"Li\"];  \n16.     Student *stu4 = [Student studentWithFirstname:@\"Jian\" lastname:@\"Xiao\"];  \n17.     NSArray *array = [NSArray arrayWithObjects:stu1,stu2,stu3, stu4, nil nil];  \n18.     // 指定排序的比较方法  \n19.     NSArray *array2 = [array sortedArrayUsingSelector:@selector(compareStudent:)];  \n20.     NSLog(@\"array2:%@\", array2);  \n21. }  \n22. - (NSComparisonResult)compareStudent:(Student *)stu {  \n23.     // 先按照姓排序  \n24.     NSComparisonResult result = [self.lastname compare:stu.lastname];  \n25.     // 如果有相同的姓，就比较名字  \n26.     if (result == NSOrderedSame) {  \n27.         result = [self.firstname compare:stu.firstname];  \n28.     }  \n29.     return result;  \n30. }  \n31.   \n32. #pragma mark 数组排序3  \n33. void arraySort3() {  \n34.     Student *stu1 = [Student studentWithFirstname:@\"MingJie\" lastname:@\"Li\"];  \n35.     Student *stu2 = [Student studentWithFirstname:@\"LongHu\" lastname:@\"Huang\"];  \n36.     Student *stu3 = [Student studentWithFirstname:@\"LianJie\" lastname:@\"Li\"];  \n37.     Student *stu4 = [Student studentWithFirstname:@\"Jian\" lastname:@\"Xiao\"];  \n38.     NSArray *array = [NSArray arrayWithObjects:stu1,stu2,stu3, stu4, nil nil];  \n39.       \n40.     // 利用block进行排序  \n41.     NSArray *array2 = [array sortedArrayUsingComparator:  \n42.      ^NSComparisonResult(Student *obj1, Student *obj2) {  \n43.          // 先按照姓排序  \n44.          NSComparisonResult result = [obj1.lastname compare:obj2.lastname];  \n45.          // 如果有相同的姓，就比较名字  \n46.          if (result == NSOrderedSame) {  \n47.              result = [obj1.firstname compare:obj2.firstname];  \n48.          }  \n49.            \n50.          return result;  \n51.     }];  \n52.       \n53.     NSLog(@\"array2:%@\", array2);  \n54. }  \n55.   \n56. #pragma mark 数组排序4-高级排序  \n57. void arraySort4() {  \n58.     Student *stu1 = [Student studentWithFirstname:@\"MingJie\" lastname:@\"Li\" bookName:@\"book1\"];  \n59.     Student *stu2 = [Student studentWithFirstname:@\"LongHu\" lastname:@\"Huang\" bookName:@\"book2\"];  \n60.     Student *stu3 = [Student studentWithFirstname:@\"LianJie\" lastname:@\"Li\" bookName:@\"book2\"];  \n61.     Student *stu4 = [Student studentWithFirstname:@\"Jian\" lastname:@\"Xiao\" bookName:@\"book1\"];  \n62.     NSArray *array = [NSArray arrayWithObjects:stu1,stu2,stu3, stu4, nil nil];  \n63.       \n64.     // 1.先按照书名进行排序  \n65.     // 这里的key写的是@property的名称  \n66.     NSSortDescriptor *bookNameDesc = [NSSortDescriptor sortDescriptorWithKey:@\"book.name\" ascending:YES];  \n67.     // 2.再按照姓进行排序  \n68.     NSSortDescriptor *lastnameDesc = [NSSortDescriptor sortDescriptorWithKey:@\"lastname\" ascending:YES];  \n69.     // 3.再按照名进行排序  \n70.     NSSortDescriptor *firstnameDesc = [NSSortDescriptor sortDescriptorWithKey:@\"firstname\" ascending:YES];  \n71.     // 按顺序添加排序描述器  \n72.     NSArray *descs = [NSArray arrayWithObjects:bookNameDesc, lastnameDesc, firstnameDesc, nil nil];  \n73.       \n74.     NSArray *array2 = [array sortedArrayUsingDescriptors:descs];  \n75.       \n76.     NSLog(@\"array2:%@\", array2);  \n77. }  \n\n","slug":"oc/数组 基本用法和排序","published":1,"updated":"2016-10-08T06:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms992004c21xwr85j5r9r","content":"<a id=\"more\"></a>\n<p>1.创建数组</p>\n<p><strong>[objc]</strong> <a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a><a href=\"https://code.csdn.net/snippets/169157\" title=\"在CODE上查看代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/169157/fork\" title=\"派生到我的代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. // 创建一个空的数组  </p>\n<ol>\n<li>NSArray *array = [NSArray array];      </li>\n<li>// 创建有1个元素的数组  </li>\n<li>array = [NSArray arrayWithObject:@”123”];  </li>\n<li>// 创建有多个元素的数组  </li>\n<li>array = [NSArray arrayWithObjects:@”a”, @”b”, @”c”, nil nil];  </li>\n<li>NSArray *array3 = [array arrayByAddingObjectsFromArray:[NSArray arrayWithObjects:@”4”, @”5”, nil nil]];  </li>\n<li></li>\n<li>NSArray *array4 = [NSArray arrayWithObjects:@”1”, @”2”, @”3”, @”4”, nil nil];  </li>\n<li>NSRange range = NSMakeRange(1, 2);  </li>\n<li>NSArray *array5 = [array4 subarrayWithRange:range];  </li>\n</ol>\n<p>2.数组的一些基本方法</p>\n<p><strong>[objc]</strong> <a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a><a href=\"https://code.csdn.net/snippets/169157\" title=\"在CODE上查看代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/169157/fork\" title=\"派生到我的代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. int count = [array count];//个数  </p>\n<ol>\n<li>// 判断是否包含了某个元素  </li>\n<li>if ([array containsObject:@”a”]) {  </li>\n<li>NSLog(@”包含了字符串a”);  </li>\n<li>}  </li>\n<li>NSString *last = [array lastObject];最后一个元素  </li>\n<li>NSString *str = [array objectAtIndex:1];根据索引获取数组中的元素  </li>\n<li>int index = [array indexOfObject:@”c”];获取指定元素的索引  </li>\n<li>// 让数组里面的所有对象都调用test方法，123为参数  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1, stu2, stu3, nil nil];  </li>\n<li>[array makeObjectsPerformSelector:@selector(test2:) withObject:@”123”];  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:@”1”, @”2”, @”3”, @”4”, nil nil];  </li>\n<li>// 1-2-3-4  </li>\n<li>// 利用分隔符-拼接所有的数组元素  </li>\n<li>NSString *str = [array componentsJoinedByString:@”-“];  </li>\n<li>// 将一个数组写入文件（生成的是一个xml文件）  </li>\n<li>NSString *path = @”/Users/apple/Desktop/array.xml”;  </li>\n<li>[array writeToFile:path atomically:YES];  </li>\n<li>path = @”/Users/apple/Desktop/array.txt”;  </li>\n<li>// 从文件中读取数组内容（文件有严格的格式要求）  </li>\n<li>NSArray *array2 = [NSArray arrayWithContentsOfFile:path];  </li>\n</ol>\n<p>3.遍历数组</p>\n<p><strong>[objc]</strong> <a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a><a href=\"https://code.csdn.net/snippets/169157\" title=\"在CODE上查看代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/169157/fork\" title=\"派生到我的代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. #pragma mark 遍历数组1  </p>\n<ol>\n<li>void arrayFor1() {  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1, @”1”, @”2”, @”3”, nil nil];  </li>\n<li>int count = array.count;  </li>\n<li>for (int i = 0; i&lt;count; i++) {  </li>\n<li>id obj = [array objectAtIndex:i];  </li>\n<li>}  </li>\n<li>}  </li>\n<li></li>\n<li>#pragma mark 遍历数组2 快速遍历  </li>\n<li>void arrayFor2() {  </li>\n<li>Student *stu1 = [Student student];  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1, @”1”, @”2”, @”3”, nil nil];  </li>\n<li>int i =0;  </li>\n<li>for (id obj in array) {  </li>\n<li>NSLog(@”%i-%@”, i, obj);  </li>\n<li>i++;  </li>\n<li>}  </li>\n<li>}  </li>\n<li></li>\n<li>#pragma mark 遍历数组3  </li>\n<li>void arrayFor3() {  </li>\n<li>Student *stu1 = [Student student];  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1, @”1”, @”2”, @”3”, nil nil];  </li>\n<li>[array enumerateObjectsUsingBlock:  </li>\n<li>^(id obj, NSUInteger idx, BOOLBOOL *stop) {  </li>\n<li>NSLog(@”%i-%@”, idx, obj);  </li>\n<li>// 如果索引为1，就停止遍历  </li>\n<li>if (idx == 1) {  </li>\n<li>// 利用指针修改外面BOOL变量的值  </li>\n<li>*stop = YES;  </li>\n<li>}  </li>\n<li>}];  </li>\n<li>}  </li>\n<li></li>\n<li>#pragma mark 遍历数组4  </li>\n<li>void arrayFor4() {  </li>\n<li>Student *stu1 = [Student student];  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1, @”1”, @”2”, @”3”, nil nil];  </li>\n<li>// 获取数组的迭代器  </li>\n<li>// NSEnumerator *enumerator = [array objectEnumerator];  </li>\n<li>// 反序迭代器（从尾部开始遍历元素）  </li>\n<li>NSEnumerator *enumerator = [array reverseObjectEnumerator];  </li>\n<li>// allObjects是取出没有被遍历过的对象  </li>\n<li>NSArray *array2 = [enumerator allObjects];  </li>\n<li>NSLog(@”array2:%@”, array2);  </li>\n<li>// 获取下一个需要遍历的元素  </li>\n<li>id obj = nil;  </li>\n<li>while (obj = [enumerator nextObject]) {  </li>\n<li>NSLog(@”obj=%@”, obj);  </li>\n<li>}  </li>\n<li>}  </li>\n</ol>\n<p>4.数组排序</p>\n<p><strong>[objc]</strong> <a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"view plain\" target=\"_blank\" rel=\"external\">view<br> plain</a><a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"copy\" target=\"_blank\" rel=\"external\">copy</a><a href=\"https://code.csdn.net/snippets/169157\" title=\"在CODE上查看代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/169157/fork\" title=\"派生到我的代码片\" target=\"_blank\" rel=\"external\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. #pragma mark 数组排序1  </p>\n<ol>\n<li>void arraySort1() {  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:@”2”, @”3”, @”1”, @”4”, nil nil];  </li>\n<li></li>\n<li>// 返回一个排好序的数组，原来数组的元素顺序不会改变  </li>\n<li>// 指定元素的比较方法：compare:  </li>\n<li>NSArray *array2 = [array sortedArrayUsingSelector:@selector(compare:)];  </li>\n<li>NSLog(@”array2:%@”, array2);  </li>\n<li>}  </li>\n<li></li>\n<li>#pragma mark 数组排序2  </li>\n<li>void arraySort2() {  </li>\n<li>Student *stu1 = [Student studentWithFirstname:@”MingJie” lastname:@”Li”];  </li>\n<li>Student *stu2 = [Student studentWithFirstname:@”LongHu” lastname:@”Huang”];  </li>\n<li>Student *stu3 = [Student studentWithFirstname:@”LianJie” lastname:@”Li”];  </li>\n<li>Student *stu4 = [Student studentWithFirstname:@”Jian” lastname:@”Xiao”];  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1,stu2,stu3, stu4, nil nil];  </li>\n<li>// 指定排序的比较方法  </li>\n<li>NSArray *array2 = [array sortedArrayUsingSelector:@selector(compareStudent:)];  </li>\n<li>NSLog(@”array2:%@”, array2);  </li>\n<li>}  </li>\n<li><ul>\n<li>(NSComparisonResult)compareStudent:(Student *)stu {  </li>\n</ul>\n</li>\n<li>// 先按照姓排序  </li>\n<li>NSComparisonResult result = [self.lastname compare:stu.lastname];  </li>\n<li>// 如果有相同的姓，就比较名字  </li>\n<li>if (result == NSOrderedSame) {  </li>\n<li>result = [self.firstname compare:stu.firstname];  </li>\n<li>}  </li>\n<li>return result;  </li>\n<li>}  </li>\n<li></li>\n<li>#pragma mark 数组排序3  </li>\n<li>void arraySort3() {  </li>\n<li>Student *stu1 = [Student studentWithFirstname:@”MingJie” lastname:@”Li”];  </li>\n<li>Student *stu2 = [Student studentWithFirstname:@”LongHu” lastname:@”Huang”];  </li>\n<li>Student *stu3 = [Student studentWithFirstname:@”LianJie” lastname:@”Li”];  </li>\n<li>Student *stu4 = [Student studentWithFirstname:@”Jian” lastname:@”Xiao”];  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1,stu2,stu3, stu4, nil nil];  </li>\n<li></li>\n<li>// 利用block进行排序  </li>\n<li>NSArray *array2 = [array sortedArrayUsingComparator:  </li>\n<li>^NSComparisonResult(Student <em>obj1, Student </em>obj2) {  </li>\n<li>// 先按照姓排序  </li>\n<li>NSComparisonResult result = [obj1.lastname compare:obj2.lastname];  </li>\n<li>// 如果有相同的姓，就比较名字  </li>\n<li>if (result == NSOrderedSame) {  </li>\n<li>result = [obj1.firstname compare:obj2.firstname];  </li>\n<li>}  </li>\n<li></li>\n<li>return result;  </li>\n<li>}];  </li>\n<li></li>\n<li>NSLog(@”array2:%@”, array2);  </li>\n<li>}  </li>\n<li></li>\n<li>#pragma mark 数组排序4-高级排序  </li>\n<li>void arraySort4() {  </li>\n<li>Student *stu1 = [Student studentWithFirstname:@”MingJie” lastname:@”Li” bookName:@”book1”];  </li>\n<li>Student *stu2 = [Student studentWithFirstname:@”LongHu” lastname:@”Huang” bookName:@”book2”];  </li>\n<li>Student *stu3 = [Student studentWithFirstname:@”LianJie” lastname:@”Li” bookName:@”book2”];  </li>\n<li>Student *stu4 = [Student studentWithFirstname:@”Jian” lastname:@”Xiao” bookName:@”book1”];  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1,stu2,stu3, stu4, nil nil];  </li>\n<li></li>\n<li>// 1.先按照书名进行排序  </li>\n<li>// 这里的key写的是@property的名称  </li>\n<li>NSSortDescriptor *bookNameDesc = [NSSortDescriptor sortDescriptorWithKey:@”book.name” ascending:YES];  </li>\n<li>// 2.再按照姓进行排序  </li>\n<li>NSSortDescriptor *lastnameDesc = [NSSortDescriptor sortDescriptorWithKey:@”lastname” ascending:YES];  </li>\n<li>// 3.再按照名进行排序  </li>\n<li>NSSortDescriptor *firstnameDesc = [NSSortDescriptor sortDescriptorWithKey:@”firstname” ascending:YES];  </li>\n<li>// 按顺序添加排序描述器  </li>\n<li>NSArray *descs = [NSArray arrayWithObjects:bookNameDesc, lastnameDesc, firstnameDesc, nil nil];  </li>\n<li></li>\n<li>NSArray *array2 = [array sortedArrayUsingDescriptors:descs];  </li>\n<li></li>\n<li>NSLog(@”array2:%@”, array2);  </li>\n<li>}  </li>\n</ol>\n","excerpt":"","more":"<p>1.创建数组</p>\n<p><strong>[objc]</strong> <a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"copy\">copy</a><a href=\"https://code.csdn.net/snippets/169157\" title=\"在CODE上查看代码片\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/169157/fork\" title=\"派生到我的代码片\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. // 创建一个空的数组  </p>\n<ol>\n<li>NSArray *array = [NSArray array];      </li>\n<li>// 创建有1个元素的数组  </li>\n<li>array = [NSArray arrayWithObject:@”123”];  </li>\n<li>// 创建有多个元素的数组  </li>\n<li>array = [NSArray arrayWithObjects:@”a”, @”b”, @”c”, nil nil];  </li>\n<li>NSArray *array3 = [array arrayByAddingObjectsFromArray:[NSArray arrayWithObjects:@”4”, @”5”, nil nil]];  </li>\n<li></li>\n<li>NSArray *array4 = [NSArray arrayWithObjects:@”1”, @”2”, @”3”, @”4”, nil nil];  </li>\n<li>NSRange range = NSMakeRange(1, 2);  </li>\n<li>NSArray *array5 = [array4 subarrayWithRange:range];  </li>\n</ol>\n<p>2.数组的一些基本方法</p>\n<p><strong>[objc]</strong> <a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"copy\">copy</a><a href=\"https://code.csdn.net/snippets/169157\" title=\"在CODE上查看代码片\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/169157/fork\" title=\"派生到我的代码片\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. int count = [array count];//个数  </p>\n<ol>\n<li>// 判断是否包含了某个元素  </li>\n<li>if ([array containsObject:@”a”]) {  </li>\n<li>NSLog(@”包含了字符串a”);  </li>\n<li>}  </li>\n<li>NSString *last = [array lastObject];最后一个元素  </li>\n<li>NSString *str = [array objectAtIndex:1];根据索引获取数组中的元素  </li>\n<li>int index = [array indexOfObject:@”c”];获取指定元素的索引  </li>\n<li>// 让数组里面的所有对象都调用test方法，123为参数  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1, stu2, stu3, nil nil];  </li>\n<li>[array makeObjectsPerformSelector:@selector(test2:) withObject:@”123”];  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:@”1”, @”2”, @”3”, @”4”, nil nil];  </li>\n<li>// 1-2-3-4  </li>\n<li>// 利用分隔符-拼接所有的数组元素  </li>\n<li>NSString *str = [array componentsJoinedByString:@”-“];  </li>\n<li>// 将一个数组写入文件（生成的是一个xml文件）  </li>\n<li>NSString *path = @”/Users/apple/Desktop/array.xml”;  </li>\n<li>[array writeToFile:path atomically:YES];  </li>\n<li>path = @”/Users/apple/Desktop/array.txt”;  </li>\n<li>// 从文件中读取数组内容（文件有严格的格式要求）  </li>\n<li>NSArray *array2 = [NSArray arrayWithContentsOfFile:path];  </li>\n</ol>\n<p>3.遍历数组</p>\n<p><strong>[objc]</strong> <a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"copy\">copy</a><a href=\"https://code.csdn.net/snippets/169157\" title=\"在CODE上查看代码片\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/169157/fork\" title=\"派生到我的代码片\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. #pragma mark 遍历数组1  </p>\n<ol>\n<li>void arrayFor1() {  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1, @”1”, @”2”, @”3”, nil nil];  </li>\n<li>int count = array.count;  </li>\n<li>for (int i = 0; i&lt;count; i++) {  </li>\n<li>id obj = [array objectAtIndex:i];  </li>\n<li>}  </li>\n<li>}  </li>\n<li></li>\n<li>#pragma mark 遍历数组2 快速遍历  </li>\n<li>void arrayFor2() {  </li>\n<li>Student *stu1 = [Student student];  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1, @”1”, @”2”, @”3”, nil nil];  </li>\n<li>int i =0;  </li>\n<li>for (id obj in array) {  </li>\n<li>NSLog(@”%i-%@”, i, obj);  </li>\n<li>i++;  </li>\n<li>}  </li>\n<li>}  </li>\n<li></li>\n<li>#pragma mark 遍历数组3  </li>\n<li>void arrayFor3() {  </li>\n<li>Student *stu1 = [Student student];  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1, @”1”, @”2”, @”3”, nil nil];  </li>\n<li>[array enumerateObjectsUsingBlock:  </li>\n<li>^(id obj, NSUInteger idx, BOOLBOOL *stop) {  </li>\n<li>NSLog(@”%i-%@”, idx, obj);  </li>\n<li>// 如果索引为1，就停止遍历  </li>\n<li>if (idx == 1) {  </li>\n<li>// 利用指针修改外面BOOL变量的值  </li>\n<li>*stop = YES;  </li>\n<li>}  </li>\n<li>}];  </li>\n<li>}  </li>\n<li></li>\n<li>#pragma mark 遍历数组4  </li>\n<li>void arrayFor4() {  </li>\n<li>Student *stu1 = [Student student];  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1, @”1”, @”2”, @”3”, nil nil];  </li>\n<li>// 获取数组的迭代器  </li>\n<li>// NSEnumerator *enumerator = [array objectEnumerator];  </li>\n<li>// 反序迭代器（从尾部开始遍历元素）  </li>\n<li>NSEnumerator *enumerator = [array reverseObjectEnumerator];  </li>\n<li>// allObjects是取出没有被遍历过的对象  </li>\n<li>NSArray *array2 = [enumerator allObjects];  </li>\n<li>NSLog(@”array2:%@”, array2);  </li>\n<li>// 获取下一个需要遍历的元素  </li>\n<li>id obj = nil;  </li>\n<li>while (obj = [enumerator nextObject]) {  </li>\n<li>NSLog(@”obj=%@”, obj);  </li>\n<li>}  </li>\n<li>}  </li>\n</ol>\n<p>4.数组排序</p>\n<p><strong>[objc]</strong> <a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"view plain\">view<br> plain</a><a href=\"http://blog.csdn.net/daiyelang/article/details/18726947#\" title=\"copy\">copy</a><a href=\"https://code.csdn.net/snippets/169157\" title=\"在CODE上查看代码片\"><img src=\"https://code.csdn.net/assets/CODE_ico.png\" alt=\"在CODE上查看代码片\"></a><a href=\"https://code.csdn.net/snippets/169157/fork\" title=\"派生到我的代码片\"><img src=\"https://code.csdn.net/assets/ico_fork.svg\" alt=\"派生到我的代码片\"></a>1. #pragma mark 数组排序1  </p>\n<ol>\n<li>void arraySort1() {  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:@”2”, @”3”, @”1”, @”4”, nil nil];  </li>\n<li></li>\n<li>// 返回一个排好序的数组，原来数组的元素顺序不会改变  </li>\n<li>// 指定元素的比较方法：compare:  </li>\n<li>NSArray *array2 = [array sortedArrayUsingSelector:@selector(compare:)];  </li>\n<li>NSLog(@”array2:%@”, array2);  </li>\n<li>}  </li>\n<li></li>\n<li>#pragma mark 数组排序2  </li>\n<li>void arraySort2() {  </li>\n<li>Student *stu1 = [Student studentWithFirstname:@”MingJie” lastname:@”Li”];  </li>\n<li>Student *stu2 = [Student studentWithFirstname:@”LongHu” lastname:@”Huang”];  </li>\n<li>Student *stu3 = [Student studentWithFirstname:@”LianJie” lastname:@”Li”];  </li>\n<li>Student *stu4 = [Student studentWithFirstname:@”Jian” lastname:@”Xiao”];  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1,stu2,stu3, stu4, nil nil];  </li>\n<li>// 指定排序的比较方法  </li>\n<li>NSArray *array2 = [array sortedArrayUsingSelector:@selector(compareStudent:)];  </li>\n<li>NSLog(@”array2:%@”, array2);  </li>\n<li>}  </li>\n<li><ul>\n<li>(NSComparisonResult)compareStudent:(Student *)stu {  </li>\n</ul>\n</li>\n<li>// 先按照姓排序  </li>\n<li>NSComparisonResult result = [self.lastname compare:stu.lastname];  </li>\n<li>// 如果有相同的姓，就比较名字  </li>\n<li>if (result == NSOrderedSame) {  </li>\n<li>result = [self.firstname compare:stu.firstname];  </li>\n<li>}  </li>\n<li>return result;  </li>\n<li>}  </li>\n<li></li>\n<li>#pragma mark 数组排序3  </li>\n<li>void arraySort3() {  </li>\n<li>Student *stu1 = [Student studentWithFirstname:@”MingJie” lastname:@”Li”];  </li>\n<li>Student *stu2 = [Student studentWithFirstname:@”LongHu” lastname:@”Huang”];  </li>\n<li>Student *stu3 = [Student studentWithFirstname:@”LianJie” lastname:@”Li”];  </li>\n<li>Student *stu4 = [Student studentWithFirstname:@”Jian” lastname:@”Xiao”];  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1,stu2,stu3, stu4, nil nil];  </li>\n<li></li>\n<li>// 利用block进行排序  </li>\n<li>NSArray *array2 = [array sortedArrayUsingComparator:  </li>\n<li>^NSComparisonResult(Student <em>obj1, Student </em>obj2) {  </li>\n<li>// 先按照姓排序  </li>\n<li>NSComparisonResult result = [obj1.lastname compare:obj2.lastname];  </li>\n<li>// 如果有相同的姓，就比较名字  </li>\n<li>if (result == NSOrderedSame) {  </li>\n<li>result = [obj1.firstname compare:obj2.firstname];  </li>\n<li>}  </li>\n<li></li>\n<li>return result;  </li>\n<li>}];  </li>\n<li></li>\n<li>NSLog(@”array2:%@”, array2);  </li>\n<li>}  </li>\n<li></li>\n<li>#pragma mark 数组排序4-高级排序  </li>\n<li>void arraySort4() {  </li>\n<li>Student *stu1 = [Student studentWithFirstname:@”MingJie” lastname:@”Li” bookName:@”book1”];  </li>\n<li>Student *stu2 = [Student studentWithFirstname:@”LongHu” lastname:@”Huang” bookName:@”book2”];  </li>\n<li>Student *stu3 = [Student studentWithFirstname:@”LianJie” lastname:@”Li” bookName:@”book2”];  </li>\n<li>Student *stu4 = [Student studentWithFirstname:@”Jian” lastname:@”Xiao” bookName:@”book1”];  </li>\n<li>NSArray *array = [NSArray arrayWithObjects:stu1,stu2,stu3, stu4, nil nil];  </li>\n<li></li>\n<li>// 1.先按照书名进行排序  </li>\n<li>// 这里的key写的是@property的名称  </li>\n<li>NSSortDescriptor *bookNameDesc = [NSSortDescriptor sortDescriptorWithKey:@”book.name” ascending:YES];  </li>\n<li>// 2.再按照姓进行排序  </li>\n<li>NSSortDescriptor *lastnameDesc = [NSSortDescriptor sortDescriptorWithKey:@”lastname” ascending:YES];  </li>\n<li>// 3.再按照名进行排序  </li>\n<li>NSSortDescriptor *firstnameDesc = [NSSortDescriptor sortDescriptorWithKey:@”firstname” ascending:YES];  </li>\n<li>// 按顺序添加排序描述器  </li>\n<li>NSArray *descs = [NSArray arrayWithObjects:bookNameDesc, lastnameDesc, firstnameDesc, nil nil];  </li>\n<li></li>\n<li>NSArray *array2 = [array sortedArrayUsingDescriptors:descs];  </li>\n<li></li>\n<li>NSLog(@”array2:%@”, array2);  </li>\n<li>}  </li>\n</ol>"},{"title":"标题自动旋转滚动效果","date":"2017-03-31T09:09:07.000Z","_content":"标题自动旋转滚动效果\n<!-- more -->\n\n<img src=\"/gifs/1.gif\" width=\"300\" height=\"573\" />\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/oc/标题自动旋转滚动效果.md","raw":"---\ntitle: 标题自动旋转滚动效果\ndate: 2017-03-31 17:09:07\ncategories: [ios端效果]\ntags: [oc]\n---\n标题自动旋转滚动效果\n<!-- more -->\n\n<img src=\"/gifs/1.gif\" width=\"300\" height=\"573\" />\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"oc/标题自动旋转滚动效果","published":1,"updated":"2017-03-31T09:16:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms994004e21xwqllr2qfl","content":"<p>标题自动旋转滚动效果<br><a id=\"more\"></a></p>\n<p><img src=\"/gifs/1.gif\" width=\"300\" height=\"573\"></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>标题自动旋转滚动效果<br>","more":"</p>\n<p><img src=\"/gifs/1.gif\" width=\"300\" height=\"573\" /></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"模态","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n/*模态：就是从一个页面中弹出一个临时的页面，用来收集用户信息，常用于登陆注册页面*/\n\naViewController.m中调用bViewController.m的模态\n\naViewController.m/*****************************************/在  - (void)viewDidLoad\n  中用Button调用action方法-(void)action{      //1.用bViewController创建bViewController的对象bVC   bViewController*bVC = [[bViewControlleralloc]init];      //2.用self 调用模态控制器方法    //animated:是否有动画    [selfpresentViewController:bVCanimated:YEScompletion:^{   //可以设置方法处理事件       \n    }];       //3.设置模态样式     [bVCsetModalTransitionStyle:UIModalTransitionStyleFlipHorizontal];   \n   \n   \n   }/*****************************************/\n\n\n\nbViewController.m /*****************************************/在  - (void)viewDidLoad\n  中用Button调用action方法-(void)action{\n       //用self 调用模态控制器方法\n 模态消失    [selfdismissViewControllerAnimated:YEScompletion:^{    //可以设置方法处理事件         \n    }];}/*****************************************/","source":"_posts/oc/模态.md","raw":"---\ntitle: 模态\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n/*模态：就是从一个页面中弹出一个临时的页面，用来收集用户信息，常用于登陆注册页面*/\n\naViewController.m中调用bViewController.m的模态\n\naViewController.m/*****************************************/在  - (void)viewDidLoad\n  中用Button调用action方法-(void)action{      //1.用bViewController创建bViewController的对象bVC   bViewController*bVC = [[bViewControlleralloc]init];      //2.用self 调用模态控制器方法    //animated:是否有动画    [selfpresentViewController:bVCanimated:YEScompletion:^{   //可以设置方法处理事件       \n    }];       //3.设置模态样式     [bVCsetModalTransitionStyle:UIModalTransitionStyleFlipHorizontal];   \n   \n   \n   }/*****************************************/\n\n\n\nbViewController.m /*****************************************/在  - (void)viewDidLoad\n  中用Button调用action方法-(void)action{\n       //用self 调用模态控制器方法\n 模态消失    [selfdismissViewControllerAnimated:YEScompletion:^{    //可以设置方法处理事件         \n    }];}/*****************************************/","slug":"oc/模态","published":1,"updated":"2016-10-08T08:58:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms995004g21xwejh25l5a","content":"<a id=\"more\"></a>\n<p>/<em>模态：就是从一个页面中弹出一个临时的页面，用来收集用户信息，常用于登陆注册页面</em>/</p>\n<p>aViewController.m中调用bViewController.m的模态</p>\n<p>aViewController.m/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/在  - (void)viewDidLoad<br>  中用Button调用action方法-(void)action{      //1.用bViewController创建bViewController的对象bVC   bViewController*bVC = [[bViewControlleralloc]init];      //2.用self 调用模态控制器方法    //animated:是否有动画    [selfpresentViewController:bVCanimated:YEScompletion:^{   //可以设置方法处理事件<br>    }];       //3.设置模态样式     [bVCsetModalTransitionStyle:UIModalTransitionStyleFlipHorizontal];   </p>\n<p>   }/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p>\n<p>bViewController.m /<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/在  - (void)viewDidLoad<br>  中用Button调用action方法-(void)action{<br>       //用self 调用模态控制器方法<br> 模态消失    [selfdismissViewControllerAnimated:YEScompletion:^{    //可以设置方法处理事件<br>    }];}/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p>\n","excerpt":"","more":"<p>/<em>模态：就是从一个页面中弹出一个临时的页面，用来收集用户信息，常用于登陆注册页面</em>/</p>\n<p>aViewController.m中调用bViewController.m的模态</p>\n<p>aViewController.m/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/在  - (void)viewDidLoad<br>  中用Button调用action方法-(void)action{      //1.用bViewController创建bViewController的对象bVC   bViewController*bVC = [[bViewControlleralloc]init];      //2.用self 调用模态控制器方法    //animated:是否有动画    [selfpresentViewController:bVCanimated:YEScompletion:^{   //可以设置方法处理事件<br>    }];       //3.设置模态样式     [bVCsetModalTransitionStyle:UIModalTransitionStyleFlipHorizontal];   </p>\n<p>   }/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p>\n<p>bViewController.m /<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/在  - (void)viewDidLoad<br>  中用Button调用action方法-(void)action{<br>       //用self 调用模态控制器方法<br> 模态消失    [selfdismissViewControllerAnimated:YEScompletion:^{    //可以设置方法处理事件<br>    }];}/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p>"},{"title":"汉字转拼音","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n带音标\nCFMutableStringRefstring = CFStringCreateMutableCopy(NULL,0,CFSTR(\"中国\"));\n   CFStringTransform(string,NULL,kCFStringTransformMandarinLatin,NO);\n    NSLog(@\"%@\", string);\n \n不带音标\nCFMutableStringRefstring = CFStringCreateMutableCopy(NULL,0,CFSTR(\"中国\"));\n   CFStringTransform(string,NULL,kCFStringTransformMandarinLatin,NO);\n    CFStringTransform(string,NULL,kCFStringTransformStripDiacritics,NO);\n   NSLog(@\"%@\", string);\n```\n\n\n","source":"_posts/oc/汉字转拼音.md","raw":"---\ntitle: 汉字转拼音\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n带音标\nCFMutableStringRefstring = CFStringCreateMutableCopy(NULL,0,CFSTR(\"中国\"));\n   CFStringTransform(string,NULL,kCFStringTransformMandarinLatin,NO);\n    NSLog(@\"%@\", string);\n \n不带音标\nCFMutableStringRefstring = CFStringCreateMutableCopy(NULL,0,CFSTR(\"中国\"));\n   CFStringTransform(string,NULL,kCFStringTransformMandarinLatin,NO);\n    CFStringTransform(string,NULL,kCFStringTransformStripDiacritics,NO);\n   NSLog(@\"%@\", string);\n```\n\n\n","slug":"oc/汉字转拼音","published":1,"updated":"2016-10-08T08:58:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms997004k21xw9y9ylaja","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">带音标</div><div class=\"line\"><span class=\"built_in\">CFMutableStringRefstring</span> = <span class=\"built_in\">CFStringCreateMutableCopy</span>(<span class=\"literal\">NULL</span>,<span class=\"number\">0</span>,<span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"中国\"</span>));</div><div class=\"line\">   <span class=\"built_in\">CFStringTransform</span>(string,<span class=\"literal\">NULL</span>,kCFStringTransformMandarinLatin,<span class=\"literal\">NO</span>);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, string);</div><div class=\"line\"> </div><div class=\"line\">不带音标</div><div class=\"line\"><span class=\"built_in\">CFMutableStringRefstring</span> = <span class=\"built_in\">CFStringCreateMutableCopy</span>(<span class=\"literal\">NULL</span>,<span class=\"number\">0</span>,<span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"中国\"</span>));</div><div class=\"line\">   <span class=\"built_in\">CFStringTransform</span>(string,<span class=\"literal\">NULL</span>,kCFStringTransformMandarinLatin,<span class=\"literal\">NO</span>);</div><div class=\"line\">    <span class=\"built_in\">CFStringTransform</span>(string,<span class=\"literal\">NULL</span>,kCFStringTransformStripDiacritics,<span class=\"literal\">NO</span>);</div><div class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, string);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">带音标</div><div class=\"line\"><span class=\"built_in\">CFMutableStringRefstring</span> = <span class=\"built_in\">CFStringCreateMutableCopy</span>(<span class=\"literal\">NULL</span>,<span class=\"number\">0</span>,<span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"中国\"</span>));</div><div class=\"line\">   <span class=\"built_in\">CFStringTransform</span>(string,<span class=\"literal\">NULL</span>,kCFStringTransformMandarinLatin,<span class=\"literal\">NO</span>);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, string);</div><div class=\"line\"> </div><div class=\"line\">不带音标</div><div class=\"line\"><span class=\"built_in\">CFMutableStringRefstring</span> = <span class=\"built_in\">CFStringCreateMutableCopy</span>(<span class=\"literal\">NULL</span>,<span class=\"number\">0</span>,<span class=\"built_in\">CFSTR</span>(<span class=\"string\">\"中国\"</span>));</div><div class=\"line\">   <span class=\"built_in\">CFStringTransform</span>(string,<span class=\"literal\">NULL</span>,kCFStringTransformMandarinLatin,<span class=\"literal\">NO</span>);</div><div class=\"line\">    <span class=\"built_in\">CFStringTransform</span>(string,<span class=\"literal\">NULL</span>,kCFStringTransformStripDiacritics,<span class=\"literal\">NO</span>);</div><div class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, string);</div></pre></td></tr></table></figure>"},{"title":"获取当前时间","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n    //获取当前时间\n    NSDate *date = [NSDate date];\n    //时间格式\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc]init];\n    dateFormatter.dateFormat = @\"YYYY-MM-dd HH:mm:ss\";\n    //时间转换\n    NSString *time = [dateFormatter stringFromDate:date];\n```\n\n","source":"_posts/oc/获取当前时间.md","raw":"---\ntitle: 获取当前时间\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n    //获取当前时间\n    NSDate *date = [NSDate date];\n    //时间格式\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc]init];\n    dateFormatter.dateFormat = @\"YYYY-MM-dd HH:mm:ss\";\n    //时间转换\n    NSString *time = [dateFormatter stringFromDate:date];\n```\n\n","slug":"oc/获取当前时间","published":1,"updated":"2016-10-08T05:59:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms998004m21xwwpjwzrm3","content":"<a id=\"more\"></a>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取当前时间</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"comment\">//时间格式</span></div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *dateFormatter = [[<span class=\"built_in\">NSDateFormatter</span> alloc]init];</div><div class=\"line\">dateFormatter.dateFormat = <span class=\"string\">@\"YYYY-MM-dd HH:mm:ss\"</span>;</div><div class=\"line\"><span class=\"comment\">//时间转换</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *time = [dateFormatter stringFromDate:date];</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取当前时间</span></div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"><span class=\"comment\">//时间格式</span></div><div class=\"line\"><span class=\"built_in\">NSDateFormatter</span> *dateFormatter = [[<span class=\"built_in\">NSDateFormatter</span> alloc]init];</div><div class=\"line\">dateFormatter.dateFormat = <span class=\"string\">@\"YYYY-MM-dd HH:mm:ss\"</span>;</div><div class=\"line\"><span class=\"comment\">//时间转换</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *time = [dateFormatter stringFromDate:date];</div></pre></td></tr></table></figure>"},{"title":"计算字符串的宽或者高","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n/** *返回值是该字符串所占的大小(width,\n height)\n *font :该字符串所用的字体(字体大小不一样,显示出来的面积也不同)\n *maxSize :为限制改字体的最大宽和高(如果显示一行,则宽高都设置为MAXFLOAT,如果显示为多行,只需将宽设置一个有限定长值,高设置为MAXFLOAT)\n */+(CGSize)sizeWithFont:(UIFont *)font maxSize:(CGSize)maxSize\n content:(NSString *)content;\n//返回字符串所占用的尺寸.\n+(CGSize)sizeWithFont:(UIFont*)font maxSize:(CGSize)maxSize content:(NSString*)content\n{\n   NSDictionary*attrs =@{NSFontAttributeName: font};\n   \n   return[contentboundingRectWithSize:maxSizeoptions:NSStringDrawingUsesLineFragmentOriginattributes:attrscontext:nil].size;}","source":"_posts/oc/计算字符串的宽或者高.md","raw":"---\ntitle: 计算字符串的宽或者高\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n/** *返回值是该字符串所占的大小(width,\n height)\n *font :该字符串所用的字体(字体大小不一样,显示出来的面积也不同)\n *maxSize :为限制改字体的最大宽和高(如果显示一行,则宽高都设置为MAXFLOAT,如果显示为多行,只需将宽设置一个有限定长值,高设置为MAXFLOAT)\n */+(CGSize)sizeWithFont:(UIFont *)font maxSize:(CGSize)maxSize\n content:(NSString *)content;\n//返回字符串所占用的尺寸.\n+(CGSize)sizeWithFont:(UIFont*)font maxSize:(CGSize)maxSize content:(NSString*)content\n{\n   NSDictionary*attrs =@{NSFontAttributeName: font};\n   \n   return[contentboundingRectWithSize:maxSizeoptions:NSStringDrawingUsesLineFragmentOriginattributes:attrscontext:nil].size;}","slug":"oc/计算字符串的宽或者高","published":1,"updated":"2016-10-08T09:01:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99a004o21xwcyz381gu","content":"<a id=\"more\"></a>\n<p>```objc<br>/<em>* </em>返回值是该字符串所占的大小(width,<br> height)<br> <em>font :该字符串所用的字体(字体大小不一样,显示出来的面积也不同)\n </em>maxSize :为限制改字体的最大宽和高(如果显示一行,则宽高都设置为MAXFLOAT,如果显示为多行,只需将宽设置一个有限定长值,高设置为MAXFLOAT)<br> <em>/+(CGSize)sizeWithFont:(UIFont </em>)font maxSize:(CGSize)maxSize<br> content:(NSString <em>)content;<br>//返回字符串所占用的尺寸.<br>+(CGSize)sizeWithFont:(UIFont</em>)font maxSize:(CGSize)maxSize content:(NSString<em>)content<br>{<br>   NSDictionary</em>attrs =@{NSFontAttributeName: font};</p>\n<p>   return[contentboundingRectWithSize:maxSizeoptions:NSStringDrawingUsesLineFragmentOriginattributes:attrscontext:nil].size;}</p>\n","excerpt":"","more":"<p>```objc<br>/<em>* </em>返回值是该字符串所占的大小(width,<br> height)<br> <em>font :该字符串所用的字体(字体大小不一样,显示出来的面积也不同)\n </em>maxSize :为限制改字体的最大宽和高(如果显示一行,则宽高都设置为MAXFLOAT,如果显示为多行,只需将宽设置一个有限定长值,高设置为MAXFLOAT)<br> <em>/+(CGSize)sizeWithFont:(UIFont </em>)font maxSize:(CGSize)maxSize<br> content:(NSString <em>)content;<br>//返回字符串所占用的尺寸.<br>+(CGSize)sizeWithFont:(UIFont</em>)font maxSize:(CGSize)maxSize content:(NSString<em>)content<br>{<br>   NSDictionary</em>attrs =@{NSFontAttributeName: font};</p>\n<p>   return[contentboundingRectWithSize:maxSizeoptions:NSStringDrawingUsesLineFragmentOriginattributes:attrscontext:nil].size;}</p>"},{"title":"让超出自己视图范围的子视图响应事件","date":"2016-10-08T03:39:43.000Z","_content":"有时需要让子视图的位置超出父视图，这时子视图不会响应点击事件，在父视图中实现这个方法，可以让子视图超出的部分也响应点击事件\n父视图需要是view的子类\n这个方法可以判断出自己的子视图，和子视图的子视图，在多层的话需要继续遍历\n<!-- more -->\n\n```objc\n//让超出自己视图范围的子视图响应事件\n- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event {\n   \n    //没有剪裁子视图 没有隐藏 透明度大于0.0\n    if(!self.clipsToBounds && !self.hidden && self.alpha > 0.0){\n       \n        //遍历子视图\n        for (UIView *member in self.subviews){\n          \n            //将相对于自己的点坐标转化为相对于子视图的点坐标\n            CGPoint subPoint = [member convertPoint:point fromView:self];\n            //返回响应的view\n            UIView *result = [member hitTest:subPoint withEvent:event];\n           \n            if(result != nil){\n                return result;\n            }else{\n                //遍历下一级子视图\n                if(!member.clipsToBounds && !member.hidden && member.alpha > 0.0){\n                    for (UIView *member1 in member.subviews){\n                       \n                        CGPoint subPoint1 = [member1 convertPoint:subPoint fromView:member];\n                        UIView *result1 = [member hitTest:subPoint1 withEvent:event];\n                        if(result1 != nil){\n                            return result1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n   \n    return nil;\n}\n```\n\n","source":"_posts/oc/让超出自己视图范围的子视图响应事件.md","raw":"---\ntitle: 让超出自己视图范围的子视图响应事件\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n有时需要让子视图的位置超出父视图，这时子视图不会响应点击事件，在父视图中实现这个方法，可以让子视图超出的部分也响应点击事件\n父视图需要是view的子类\n这个方法可以判断出自己的子视图，和子视图的子视图，在多层的话需要继续遍历\n<!-- more -->\n\n```objc\n//让超出自己视图范围的子视图响应事件\n- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event {\n   \n    //没有剪裁子视图 没有隐藏 透明度大于0.0\n    if(!self.clipsToBounds && !self.hidden && self.alpha > 0.0){\n       \n        //遍历子视图\n        for (UIView *member in self.subviews){\n          \n            //将相对于自己的点坐标转化为相对于子视图的点坐标\n            CGPoint subPoint = [member convertPoint:point fromView:self];\n            //返回响应的view\n            UIView *result = [member hitTest:subPoint withEvent:event];\n           \n            if(result != nil){\n                return result;\n            }else{\n                //遍历下一级子视图\n                if(!member.clipsToBounds && !member.hidden && member.alpha > 0.0){\n                    for (UIView *member1 in member.subviews){\n                       \n                        CGPoint subPoint1 = [member1 convertPoint:subPoint fromView:member];\n                        UIView *result1 = [member hitTest:subPoint1 withEvent:event];\n                        if(result1 != nil){\n                            return result1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n   \n    return nil;\n}\n```\n\n","slug":"oc/让超出自己视图范围的子视图响应事件","published":1,"updated":"2016-10-08T09:06:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99b004r21xwb14iir9t","content":"<p>有时需要让子视图的位置超出父视图，这时子视图不会响应点击事件，在父视图中实现这个方法，可以让子视图超出的部分也响应点击事件<br>父视图需要是view的子类<br>这个方法可以判断出自己的子视图，和子视图的子视图，在多层的话需要继续遍历<br><a id=\"more\"></a></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//让超出自己视图范围的子视图响应事件</span></div><div class=\"line\">- (<span class=\"built_in\">UIView</span> *)hitTest:(<span class=\"built_in\">CGPoint</span>)point withEvent:(<span class=\"built_in\">UIEvent</span> *)event &#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//没有剪裁子视图 没有隐藏 透明度大于0.0</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">self</span>.clipsToBounds &amp;&amp; !<span class=\"keyword\">self</span>.hidden &amp;&amp; <span class=\"keyword\">self</span>.alpha &gt; <span class=\"number\">0.0</span>)&#123;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"comment\">//遍历子视图</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *member <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.subviews)&#123;</div><div class=\"line\">          </div><div class=\"line\">            <span class=\"comment\">//将相对于自己的点坐标转化为相对于子视图的点坐标</span></div><div class=\"line\">            <span class=\"built_in\">CGPoint</span> subPoint = [member convertPoint:point fromView:<span class=\"keyword\">self</span>];</div><div class=\"line\">            <span class=\"comment\">//返回响应的view</span></div><div class=\"line\">            <span class=\"built_in\">UIView</span> *result = [member hitTest:subPoint withEvent:event];</div><div class=\"line\">           </div><div class=\"line\">            <span class=\"keyword\">if</span>(result != <span class=\"literal\">nil</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> result;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                <span class=\"comment\">//遍历下一级子视图</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(!member.clipsToBounds &amp;&amp; !member.hidden &amp;&amp; member.alpha &gt; <span class=\"number\">0.0</span>)&#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *member1 <span class=\"keyword\">in</span> member.subviews)&#123;</div><div class=\"line\">                       </div><div class=\"line\">                        <span class=\"built_in\">CGPoint</span> subPoint1 = [member1 convertPoint:subPoint fromView:member];</div><div class=\"line\">                        <span class=\"built_in\">UIView</span> *result1 = [member hitTest:subPoint1 withEvent:event];</div><div class=\"line\">                        <span class=\"keyword\">if</span>(result1 != <span class=\"literal\">nil</span>)&#123;</div><div class=\"line\">                            <span class=\"keyword\">return</span> result1;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>有时需要让子视图的位置超出父视图，这时子视图不会响应点击事件，在父视图中实现这个方法，可以让子视图超出的部分也响应点击事件<br>父视图需要是view的子类<br>这个方法可以判断出自己的子视图，和子视图的子视图，在多层的话需要继续遍历<br>","more":"</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//让超出自己视图范围的子视图响应事件</span></div><div class=\"line\">- (<span class=\"built_in\">UIView</span> *)hitTest:(<span class=\"built_in\">CGPoint</span>)point withEvent:(<span class=\"built_in\">UIEvent</span> *)event &#123;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">//没有剪裁子视图 没有隐藏 透明度大于0.0</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">self</span>.clipsToBounds &amp;&amp; !<span class=\"keyword\">self</span>.hidden &amp;&amp; <span class=\"keyword\">self</span>.alpha &gt; <span class=\"number\">0.0</span>)&#123;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"comment\">//遍历子视图</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *member <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.subviews)&#123;</div><div class=\"line\">          </div><div class=\"line\">            <span class=\"comment\">//将相对于自己的点坐标转化为相对于子视图的点坐标</span></div><div class=\"line\">            <span class=\"built_in\">CGPoint</span> subPoint = [member convertPoint:point fromView:<span class=\"keyword\">self</span>];</div><div class=\"line\">            <span class=\"comment\">//返回响应的view</span></div><div class=\"line\">            <span class=\"built_in\">UIView</span> *result = [member hitTest:subPoint withEvent:event];</div><div class=\"line\">           </div><div class=\"line\">            <span class=\"keyword\">if</span>(result != <span class=\"literal\">nil</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> result;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                <span class=\"comment\">//遍历下一级子视图</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(!member.clipsToBounds &amp;&amp; !member.hidden &amp;&amp; member.alpha &gt; <span class=\"number\">0.0</span>)&#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *member1 <span class=\"keyword\">in</span> member.subviews)&#123;</div><div class=\"line\">                       </div><div class=\"line\">                        <span class=\"built_in\">CGPoint</span> subPoint1 = [member1 convertPoint:subPoint fromView:member];</div><div class=\"line\">                        <span class=\"built_in\">UIView</span> *result1 = [member hitTest:subPoint1 withEvent:event];</div><div class=\"line\">                        <span class=\"keyword\">if</span>(result1 != <span class=\"literal\">nil</span>)&#123;</div><div class=\"line\">                            <span class=\"keyword\">return</span> result1;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"进程和线程","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n**一、进程和线程**\n1.什么是进程\n \n进程是指在系统中正在运行的一个应用程序\n每个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内\n![](http://images.cnitblog.com/i/450136/201406/241224432836121.png)\n \n \n比如同时打开QQ、Xcode，系统就会分别启动2个进程\n通过“活动监视器”可以查看Mac系统中所开启的进程\n \n2.什么是线程\n1个进程要想执行任务，必须得有线程（每1个进程至少要有1条线程）\n线程是进程的基本执行单元，一个进程（程序）的所有任务都在线程中执行\n比如使用酷狗播放音乐、使用迅雷下载电影，都需要在线程中执行\n 　　![](http://images.cnitblog.com/i/450136/201406/241225080809896.png)\n \n3.线程的串行\n \n1个线程中任务的执行是串行的\n如果要在1个线程中执行多个任务，那么只能一个一个地按顺序执行这些任务\n也就是说，在同一时间内，1个线程只能执行1个任务\n比如在1个线程中下载3个文件（分别是文件A、文件B、文件C）\n ![](http://images.cnitblog.com/i/450136/201406/241225242528638.png)\n \n二、多线程\n \n1.什么是多线程\n1个进程中可以开启多条线程，每条线程可以并行（同时）执行不同的任务\n进程 ->车间，线程->车间工人\n多线程技术可以提高程序的执行效率\n比如同时开启3条线程分别下载3个文件（分别是文件A、文件B、文件C）\n![](http://images.cnitblog.com/i/450136/201406/241226293143615.png)\n![](http://images.cnitblog.com/i/450136/201406/241227387673566.png)\n \n2.多线程的原理\n \n同一时间，CPU只能处理1条线程，只有1条线程在工作（执行）\n多线程并发（同时）执行，其实是CPU快速地在多条线程之间调度（切换）\n如果CPU调度线程的时间足够快，就造成了多线程并发执行的假象\n思考：如果线程非常非常多，会发生什么情况？\nCPU会在N多线程之间调度，CPU会累死，消耗大量的CPU资源\n每条线程被调度执行的频次会降低（线程的执行效率降低）\n \n3.多线程的优缺点\n \n多线程的优点\n能适当提高程序的执行效率\n能适当提高资源利用率（CPU、内存利用率）\n \n多线程的缺点\n开启线程需要占用一定的内存空间（默认情况下，主线程占用1M，子线程占用512KB），如果开启大量的线程，会占用大量的内存空间，降低程序的性能\n线程越多，CPU在调度线程上的开销就越大\n程序设计更加复杂：比如线程之间的通信、多线程的数据共享\n \n4.多线程在iOS开发中的应用\n主线程:一个iOS程序运行后，默认会开启1条线程，称为“主线程”或“UI线程”\n主线程的主要作用\n显示\\刷新UI界面\n处理UI事件（比如点击事件、滚动事件、拖拽事件等）\n \n \n主线程的使用注意:别将比较耗时的操作放到主线程中。\n耗时操作会卡住主线程，严重影响UI的流畅度，给用户一种“卡”的坏体验\n \n5.代码示例\n![](http://images.cnitblog.com/i/450136/201406/241233129086114.png)\n[![复制代码](http://common.cnblogs.com/images/copycode.gif)]( \"复制代码\")\t 1 //\n\t 2 //  YYViewController.m 3 //  01-阻塞主线程 4 //\n\t 5 //  Created by apple on 14-6-23. 6 //  Copyright (c) 2014年 itcase. All rights reserved. 7 // 8 \n\t 9 #import \"YYViewController.h\"\n\t10 \n\t11 @interface YYViewController ()12 - (IBAction)btnClick;13 @end\n\t14 \n\t15 \n\t16 @implementation YYViewController17 \n\t18 \n\t19 - (void)viewDidLoad20 {21     [super viewDidLoad];22 }23 \n\t24 \n\t25 //按钮的点击事件\n\t26 - (IBAction)btnClick {27     //1.获取当前线程\n\t28     NSThread *current=[NSThread currentThread];29     //2.使用for循环执行一些耗时操作\n\t30     for (int i=0; i<10000; i++) {31         //3.输出线程\n\t32         NSLog(@\"btnClick---%d---%@\",i,current);33     }34 }35 \n\t36 @end\n[![复制代码](http://common.cnblogs.com/images/copycode.gif)]( \"复制代码\")[]( \"复制代码\") 执行效果：\n![](http://images.cnitblog.com/i/450136/201406/241235051118926.png)\n说明：当点击执行的时候，textView点击无响应。\n![](http://images.cnitblog.com/i/450136/201406/241236350808178.png)\n执行分析：等待主线程串行执行。\n![](http://images.cnitblog.com/i/450136/201406/241238095028893.png)\n开启子线程。\n![](http://images.cnitblog.com/i/450136/201406/241238382996357.png)\n\n","source":"_posts/oc/进程和线程.md","raw":"---\ntitle: 进程和线程\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n**一、进程和线程**\n1.什么是进程\n \n进程是指在系统中正在运行的一个应用程序\n每个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内\n![](http://images.cnitblog.com/i/450136/201406/241224432836121.png)\n \n \n比如同时打开QQ、Xcode，系统就会分别启动2个进程\n通过“活动监视器”可以查看Mac系统中所开启的进程\n \n2.什么是线程\n1个进程要想执行任务，必须得有线程（每1个进程至少要有1条线程）\n线程是进程的基本执行单元，一个进程（程序）的所有任务都在线程中执行\n比如使用酷狗播放音乐、使用迅雷下载电影，都需要在线程中执行\n 　　![](http://images.cnitblog.com/i/450136/201406/241225080809896.png)\n \n3.线程的串行\n \n1个线程中任务的执行是串行的\n如果要在1个线程中执行多个任务，那么只能一个一个地按顺序执行这些任务\n也就是说，在同一时间内，1个线程只能执行1个任务\n比如在1个线程中下载3个文件（分别是文件A、文件B、文件C）\n ![](http://images.cnitblog.com/i/450136/201406/241225242528638.png)\n \n二、多线程\n \n1.什么是多线程\n1个进程中可以开启多条线程，每条线程可以并行（同时）执行不同的任务\n进程 ->车间，线程->车间工人\n多线程技术可以提高程序的执行效率\n比如同时开启3条线程分别下载3个文件（分别是文件A、文件B、文件C）\n![](http://images.cnitblog.com/i/450136/201406/241226293143615.png)\n![](http://images.cnitblog.com/i/450136/201406/241227387673566.png)\n \n2.多线程的原理\n \n同一时间，CPU只能处理1条线程，只有1条线程在工作（执行）\n多线程并发（同时）执行，其实是CPU快速地在多条线程之间调度（切换）\n如果CPU调度线程的时间足够快，就造成了多线程并发执行的假象\n思考：如果线程非常非常多，会发生什么情况？\nCPU会在N多线程之间调度，CPU会累死，消耗大量的CPU资源\n每条线程被调度执行的频次会降低（线程的执行效率降低）\n \n3.多线程的优缺点\n \n多线程的优点\n能适当提高程序的执行效率\n能适当提高资源利用率（CPU、内存利用率）\n \n多线程的缺点\n开启线程需要占用一定的内存空间（默认情况下，主线程占用1M，子线程占用512KB），如果开启大量的线程，会占用大量的内存空间，降低程序的性能\n线程越多，CPU在调度线程上的开销就越大\n程序设计更加复杂：比如线程之间的通信、多线程的数据共享\n \n4.多线程在iOS开发中的应用\n主线程:一个iOS程序运行后，默认会开启1条线程，称为“主线程”或“UI线程”\n主线程的主要作用\n显示\\刷新UI界面\n处理UI事件（比如点击事件、滚动事件、拖拽事件等）\n \n \n主线程的使用注意:别将比较耗时的操作放到主线程中。\n耗时操作会卡住主线程，严重影响UI的流畅度，给用户一种“卡”的坏体验\n \n5.代码示例\n![](http://images.cnitblog.com/i/450136/201406/241233129086114.png)\n[![复制代码](http://common.cnblogs.com/images/copycode.gif)]( \"复制代码\")\t 1 //\n\t 2 //  YYViewController.m 3 //  01-阻塞主线程 4 //\n\t 5 //  Created by apple on 14-6-23. 6 //  Copyright (c) 2014年 itcase. All rights reserved. 7 // 8 \n\t 9 #import \"YYViewController.h\"\n\t10 \n\t11 @interface YYViewController ()12 - (IBAction)btnClick;13 @end\n\t14 \n\t15 \n\t16 @implementation YYViewController17 \n\t18 \n\t19 - (void)viewDidLoad20 {21     [super viewDidLoad];22 }23 \n\t24 \n\t25 //按钮的点击事件\n\t26 - (IBAction)btnClick {27     //1.获取当前线程\n\t28     NSThread *current=[NSThread currentThread];29     //2.使用for循环执行一些耗时操作\n\t30     for (int i=0; i<10000; i++) {31         //3.输出线程\n\t32         NSLog(@\"btnClick---%d---%@\",i,current);33     }34 }35 \n\t36 @end\n[![复制代码](http://common.cnblogs.com/images/copycode.gif)]( \"复制代码\")[]( \"复制代码\") 执行效果：\n![](http://images.cnitblog.com/i/450136/201406/241235051118926.png)\n说明：当点击执行的时候，textView点击无响应。\n![](http://images.cnitblog.com/i/450136/201406/241236350808178.png)\n执行分析：等待主线程串行执行。\n![](http://images.cnitblog.com/i/450136/201406/241238095028893.png)\n开启子线程。\n![](http://images.cnitblog.com/i/450136/201406/241238382996357.png)\n\n","slug":"oc/进程和线程","published":1,"updated":"2016-10-08T09:13:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99c004t21xw4i4oay29","content":"<a id=\"more\"></a>\n<p><strong>一、进程和线程</strong><br>1.什么是进程</p>\n<p>进程是指在系统中正在运行的一个应用程序<br>每个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内<br><img src=\"http://images.cnitblog.com/i/450136/201406/241224432836121.png\" alt=\"\"></p>\n<p>比如同时打开QQ、Xcode，系统就会分别启动2个进程<br>通过“活动监视器”可以查看Mac系统中所开启的进程</p>\n<p>2.什么是线程<br>1个进程要想执行任务，必须得有线程（每1个进程至少要有1条线程）<br>线程是进程的基本执行单元，一个进程（程序）的所有任务都在线程中执行<br>比如使用酷狗播放音乐、使用迅雷下载电影，都需要在线程中执行<br> 　　<img src=\"http://images.cnitblog.com/i/450136/201406/241225080809896.png\" alt=\"\"></p>\n<p>3.线程的串行</p>\n<p>1个线程中任务的执行是串行的<br>如果要在1个线程中执行多个任务，那么只能一个一个地按顺序执行这些任务<br>也就是说，在同一时间内，1个线程只能执行1个任务<br>比如在1个线程中下载3个文件（分别是文件A、文件B、文件C）<br> <img src=\"http://images.cnitblog.com/i/450136/201406/241225242528638.png\" alt=\"\"></p>\n<p>二、多线程</p>\n<p>1.什么是多线程<br>1个进程中可以开启多条线程，每条线程可以并行（同时）执行不同的任务<br>进程 -&gt;车间，线程-&gt;车间工人<br>多线程技术可以提高程序的执行效率<br>比如同时开启3条线程分别下载3个文件（分别是文件A、文件B、文件C）<br><img src=\"http://images.cnitblog.com/i/450136/201406/241226293143615.png\" alt=\"\"><br><img src=\"http://images.cnitblog.com/i/450136/201406/241227387673566.png\" alt=\"\"></p>\n<p>2.多线程的原理</p>\n<p>同一时间，CPU只能处理1条线程，只有1条线程在工作（执行）<br>多线程并发（同时）执行，其实是CPU快速地在多条线程之间调度（切换）<br>如果CPU调度线程的时间足够快，就造成了多线程并发执行的假象<br>思考：如果线程非常非常多，会发生什么情况？<br>CPU会在N多线程之间调度，CPU会累死，消耗大量的CPU资源<br>每条线程被调度执行的频次会降低（线程的执行效率降低）</p>\n<p>3.多线程的优缺点</p>\n<p>多线程的优点<br>能适当提高程序的执行效率<br>能适当提高资源利用率（CPU、内存利用率）</p>\n<p>多线程的缺点<br>开启线程需要占用一定的内存空间（默认情况下，主线程占用1M，子线程占用512KB），如果开启大量的线程，会占用大量的内存空间，降低程序的性能<br>线程越多，CPU在调度线程上的开销就越大<br>程序设计更加复杂：比如线程之间的通信、多线程的数据共享</p>\n<p>4.多线程在iOS开发中的应用<br>主线程:一个iOS程序运行后，默认会开启1条线程，称为“主线程”或“UI线程”<br>主线程的主要作用<br>显示\\刷新UI界面<br>处理UI事件（比如点击事件、滚动事件、拖拽事件等）</p>\n<p>主线程的使用注意:别将比较耗时的操作放到主线程中。<br>耗时操作会卡住主线程，严重影响UI的流畅度，给用户一种“卡”的坏体验</p>\n<p>5.代码示例<br><img src=\"http://images.cnitblog.com/i/450136/201406/241233129086114.png\" alt=\"\"><br><a href=\"&quot;复制代码&quot;\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a>     1 //<br>     2 //  YYViewController.m 3 //  01-阻塞主线程 4 //<br>     5 //  Created by apple on 14-6-23. 6 //  Copyright (c) 2014年 itcase. All rights reserved. 7 // 8<br>     9 #import “YYViewController.h”<br>    10<br>    11 @interface YYViewController ()12 - (IBAction)btnClick;13 @end<br>    14<br>    15<br>    16 @implementation YYViewController17<br>    18<br>    19 - (void)viewDidLoad20 {21     [super viewDidLoad];22 }23<br>    24<br>    25 //按钮的点击事件<br>    26 - (IBAction)btnClick {27     //1.获取当前线程<br>    28     NSThread *current=[NSThread currentThread];29     //2.使用for循环执行一些耗时操作<br>    30     for (int i=0; i&lt;10000; i++) {31         //3.输出线程<br>    32         NSLog(@”btnClick—%d—%@”,i,current);33     }34 }35<br>    36 @end<br><a href=\"&quot;复制代码&quot;\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a><a href=\"&quot;复制代码&quot;\"></a> 执行效果：<br><img src=\"http://images.cnitblog.com/i/450136/201406/241235051118926.png\" alt=\"\"><br>说明：当点击执行的时候，textView点击无响应。<br><img src=\"http://images.cnitblog.com/i/450136/201406/241236350808178.png\" alt=\"\"><br>执行分析：等待主线程串行执行。<br><img src=\"http://images.cnitblog.com/i/450136/201406/241238095028893.png\" alt=\"\"><br>开启子线程。<br><img src=\"http://images.cnitblog.com/i/450136/201406/241238382996357.png\" alt=\"\"></p>\n","excerpt":"","more":"<p><strong>一、进程和线程</strong><br>1.什么是进程</p>\n<p>进程是指在系统中正在运行的一个应用程序<br>每个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内<br><img src=\"http://images.cnitblog.com/i/450136/201406/241224432836121.png\" alt=\"\"></p>\n<p>比如同时打开QQ、Xcode，系统就会分别启动2个进程<br>通过“活动监视器”可以查看Mac系统中所开启的进程</p>\n<p>2.什么是线程<br>1个进程要想执行任务，必须得有线程（每1个进程至少要有1条线程）<br>线程是进程的基本执行单元，一个进程（程序）的所有任务都在线程中执行<br>比如使用酷狗播放音乐、使用迅雷下载电影，都需要在线程中执行<br> 　　<img src=\"http://images.cnitblog.com/i/450136/201406/241225080809896.png\" alt=\"\"></p>\n<p>3.线程的串行</p>\n<p>1个线程中任务的执行是串行的<br>如果要在1个线程中执行多个任务，那么只能一个一个地按顺序执行这些任务<br>也就是说，在同一时间内，1个线程只能执行1个任务<br>比如在1个线程中下载3个文件（分别是文件A、文件B、文件C）<br> <img src=\"http://images.cnitblog.com/i/450136/201406/241225242528638.png\" alt=\"\"></p>\n<p>二、多线程</p>\n<p>1.什么是多线程<br>1个进程中可以开启多条线程，每条线程可以并行（同时）执行不同的任务<br>进程 -&gt;车间，线程-&gt;车间工人<br>多线程技术可以提高程序的执行效率<br>比如同时开启3条线程分别下载3个文件（分别是文件A、文件B、文件C）<br><img src=\"http://images.cnitblog.com/i/450136/201406/241226293143615.png\" alt=\"\"><br><img src=\"http://images.cnitblog.com/i/450136/201406/241227387673566.png\" alt=\"\"></p>\n<p>2.多线程的原理</p>\n<p>同一时间，CPU只能处理1条线程，只有1条线程在工作（执行）<br>多线程并发（同时）执行，其实是CPU快速地在多条线程之间调度（切换）<br>如果CPU调度线程的时间足够快，就造成了多线程并发执行的假象<br>思考：如果线程非常非常多，会发生什么情况？<br>CPU会在N多线程之间调度，CPU会累死，消耗大量的CPU资源<br>每条线程被调度执行的频次会降低（线程的执行效率降低）</p>\n<p>3.多线程的优缺点</p>\n<p>多线程的优点<br>能适当提高程序的执行效率<br>能适当提高资源利用率（CPU、内存利用率）</p>\n<p>多线程的缺点<br>开启线程需要占用一定的内存空间（默认情况下，主线程占用1M，子线程占用512KB），如果开启大量的线程，会占用大量的内存空间，降低程序的性能<br>线程越多，CPU在调度线程上的开销就越大<br>程序设计更加复杂：比如线程之间的通信、多线程的数据共享</p>\n<p>4.多线程在iOS开发中的应用<br>主线程:一个iOS程序运行后，默认会开启1条线程，称为“主线程”或“UI线程”<br>主线程的主要作用<br>显示\\刷新UI界面<br>处理UI事件（比如点击事件、滚动事件、拖拽事件等）</p>\n<p>主线程的使用注意:别将比较耗时的操作放到主线程中。<br>耗时操作会卡住主线程，严重影响UI的流畅度，给用户一种“卡”的坏体验</p>\n<p>5.代码示例<br><img src=\"http://images.cnitblog.com/i/450136/201406/241233129086114.png\" alt=\"\"><br><a href=\"&quot;复制代码&quot;\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a>     1 //<br>     2 //  YYViewController.m 3 //  01-阻塞主线程 4 //<br>     5 //  Created by apple on 14-6-23. 6 //  Copyright (c) 2014年 itcase. All rights reserved. 7 // 8<br>     9 #import “YYViewController.h”<br>    10<br>    11 @interface YYViewController ()12 - (IBAction)btnClick;13 @end<br>    14<br>    15<br>    16 @implementation YYViewController17<br>    18<br>    19 - (void)viewDidLoad20 {21     [super viewDidLoad];22 }23<br>    24<br>    25 //按钮的点击事件<br>    26 - (IBAction)btnClick {27     //1.获取当前线程<br>    28     NSThread *current=[NSThread currentThread];29     //2.使用for循环执行一些耗时操作<br>    30     for (int i=0; i&lt;10000; i++) {31         //3.输出线程<br>    32         NSLog(@”btnClick—%d—%@”,i,current);33     }34 }35<br>    36 @end<br><a href=\"&quot;复制代码&quot;\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a><a href=\"&quot;复制代码&quot;\"></a> 执行效果：<br><img src=\"http://images.cnitblog.com/i/450136/201406/241235051118926.png\" alt=\"\"><br>说明：当点击执行的时候，textView点击无响应。<br><img src=\"http://images.cnitblog.com/i/450136/201406/241236350808178.png\" alt=\"\"><br>执行分析：等待主线程串行执行。<br><img src=\"http://images.cnitblog.com/i/450136/201406/241238095028893.png\" alt=\"\"><br>开启子线程。<br><img src=\"http://images.cnitblog.com/i/450136/201406/241238382996357.png\" alt=\"\"></p>"},{"title":"通知","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n#warning通知第一步，注册通知\n   //    NSNotification消息通知类，是抽象类，使用他的子类，消息中心单例    [[NSNotificationCenterdefaultCenter] addObserver:selfselector:@selector(changeColor:)name:@\"changeColor\"object:nil];   #warning通知第二步，实现通知触发的方法\n//当收到通知后，该方法会被执行\n-(void)changeColor:(NSNotification*)notification\n{\n#warning通知第四步，接收消息\n   UIColor*color = (UIColor*)[notificationobject];\n   self.view.backgroundColor= color;}\n#warning通知第三步，发送通知\n    [[NSNotificationCenterdefaultCenter]postNotificationName:@\"changeColor\"object:[UIColorredColor]];    [[NSNotificationCenterdefaultCenter]postNotificationName:@\"changeColor2\"object:[UIColorredColor]];  \n- (void)dealloc\n{\n    [[NSNotificationCenterdefaultCenter]removeObserver:selfname:@\"changeColor\"object:nil];\n    [superdealloc];}","source":"_posts/oc/通知.md","raw":"---\ntitle: 通知\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n#warning通知第一步，注册通知\n   //    NSNotification消息通知类，是抽象类，使用他的子类，消息中心单例    [[NSNotificationCenterdefaultCenter] addObserver:selfselector:@selector(changeColor:)name:@\"changeColor\"object:nil];   #warning通知第二步，实现通知触发的方法\n//当收到通知后，该方法会被执行\n-(void)changeColor:(NSNotification*)notification\n{\n#warning通知第四步，接收消息\n   UIColor*color = (UIColor*)[notificationobject];\n   self.view.backgroundColor= color;}\n#warning通知第三步，发送通知\n    [[NSNotificationCenterdefaultCenter]postNotificationName:@\"changeColor\"object:[UIColorredColor]];    [[NSNotificationCenterdefaultCenter]postNotificationName:@\"changeColor2\"object:[UIColorredColor]];  \n- (void)dealloc\n{\n    [[NSNotificationCenterdefaultCenter]removeObserver:selfname:@\"changeColor\"object:nil];\n    [superdealloc];}","slug":"oc/通知","published":1,"updated":"2016-10-08T06:06:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99d004v21xww57j6br4","content":"<a id=\"more\"></a>\n<p>#warning通知第一步，注册通知<br>   //    NSNotification消息通知类，是抽象类，使用他的子类，消息中心单例    [[NSNotificationCenterdefaultCenter] addObserver:selfselector:@selector(changeColor:)name:@”changeColor”object:nil];   #warning通知第二步，实现通知触发的方法<br>//当收到通知后，该方法会被执行<br>-(void)changeColor:(NSNotification*)notification<br>{</p>\n<p>#warning通知第四步，接收消息<br>   UIColor<em>color = (UIColor</em>)[notificationobject];<br>   self.view.backgroundColor= color;}</p>\n<p>#warning通知第三步，发送通知<br>    [[NSNotificationCenterdefaultCenter]postNotificationName:@”changeColor”object:[UIColorredColor]];    [[NSNotificationCenterdefaultCenter]postNotificationName:@”changeColor2”object:[UIColorredColor]];  </p>\n<ul>\n<li>(void)dealloc<br>{<br>  [[NSNotificationCenterdefaultCenter]removeObserver:selfname:@”changeColor”object:nil];<br>  [superdealloc];}</li>\n</ul>\n","excerpt":"","more":"<p>#warning通知第一步，注册通知<br>   //    NSNotification消息通知类，是抽象类，使用他的子类，消息中心单例    [[NSNotificationCenterdefaultCenter] addObserver:selfselector:@selector(changeColor:)name:@”changeColor”object:nil];   #warning通知第二步，实现通知触发的方法<br>//当收到通知后，该方法会被执行<br>-(void)changeColor:(NSNotification*)notification<br>{</p>\n<p>#warning通知第四步，接收消息<br>   UIColor<em>color = (UIColor</em>)[notificationobject];<br>   self.view.backgroundColor= color;}</p>\n<p>#warning通知第三步，发送通知<br>    [[NSNotificationCenterdefaultCenter]postNotificationName:@”changeColor”object:[UIColorredColor]];    [[NSNotificationCenterdefaultCenter]postNotificationName:@”changeColor2”object:[UIColorredColor]];  </p>\n<ul>\n<li>(void)dealloc<br>{<br>  [[NSNotificationCenterdefaultCenter]removeObserver:selfname:@”changeColor”object:nil];<br>  [superdealloc];}</li>\n</ul>"},{"title":"通讯录","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n通讯录\nAddressBook\niOS中带有一个Contacts应用程序来管理联系人，但是有些时候我们希望自己的应用能够访问或者修改这些信息，这个时候就要用到AddressBook.framework框架。iOS中的通讯录是存储在数据库中的，由于iOS的权限设计，开发人员是不允许直接访问通讯录数据库的，必须依靠AddressBook提供的标准API来实现通讯录操作。通过AddressBook.framework开发者可以从底层去操作AddressBook.framework的所有信息，但是需要注意的是这个框架是基于C语言编写的，无法使用ARC来管理内存，开发者需要自己管理内存。下面大致介绍一下通讯录操作中常用的类型：\nABAddressBookRef：代表通讯录对象，通过该对象开发人员不用过多的关注通讯录的存储方式，可以直接以透明的方式去访问、保存（在使用AddressBook.framework操作联系人时，所有的增加、删除、修改后都必须执行保存操作，类似于Core Data）等。\nABRecordRef：代表一个通用的记录对象，可以是一条联系人信息，也可以是一个群组，可以通过ABRecordGetRecordType()函数获得具体类型。如果作为联系人（事实上也经常使用它作为联系人），那么这个记录记录了一个完整的联系人信息（姓名、性别、电话、邮件等），每条记录都有一个唯一的ID标示这条记录（可以通过ABRecordGetRecordID()函数获得）。\nABPersonRef：代表联系人信息，很少直接使用，实际开发过程中通常会使用类型为“kABPersonType”的ABRecordRef来表示联系人（由此可见ABPersonRef其实是一种类型为“kABPersonType”的ABRecordRef）\nABGroupRef：代表群组，与ABPersonRef类似，很少直接使用ABGroupRef，而是使用类型为“kABGroupType”的ABRecordRef来表示群组，一个群组可以包含多个联系人，一个联系人也同样可以多个群组。\n由于通讯录操作的关键是对ABRecordRef的操作，首先看一下常用的操作通讯录记录的方法：\nABPersonCreate():创建一个类型为“kABPersonType”的ABRecordRef。\nABRecordCopyValue():取得指定属性的值。\nABRecordCopyCompositeName():取得联系人（或群组）的复合信息（对于联系人则包括：姓、名、公司等信息，对于群组则返回组名称）。\nABRecordSetValue():设置ABRecordRef的属性值。注意在设置ABRecordRef的值时又分为单值属性和多值属性：单值属性设置只要通过ABRecordSetValue()方法指定属性名和值即可；多值属性则要先通过创建一个ABMutableMultiValueRef类型的变量，然后通过ABMultiValueAddValueAndLabel()方法依次添加属性值，最后通过ABRecordSetValue()方法将ABMutableMultiValueRef类型的变量设置为记录值。\nABRecordRemoveValue():删除指定的属性值。\n注意：\n由于联系人访问时（读取、设置、删除时）牵扯到大量联系人属性，可以到ABPerson.h中查询或者直接到帮助文档“Personal Information Properties”\n通讯录的访问步骤一般如下：\n调用ABAddressBookCreateWithOptions()方法创建通讯录对象ABAddressBookRef。\n调用ABAddressBookRequestAccessWithCompletion()方法获得用户授权访问通讯录。\n调用ABAddressBookCopyArrayOfAllPeople()、ABAddressBookCopyPeopleWithName()方法查询联系人信息。\n读取联系人后如果要显示联系人信息则可以调用ABRecord相关方法读取相应的数据；如果要进行修改联系人信息，则可以使用对应的方法修改ABRecord信息，然后调用ABAddressBookSave()方法提交修改；如果要删除联系人，则可以调用ABAddressBookRemoveRecord()方法删除，然后调用ABAddressBookSave()提交修改操作。\n也就是说如果要修改或者删除都需要首先查询对应的联系人，然后修改或删除后提交更改。如果用户要增加一个联系人则不用进行查询，直接调用ABPersonCreate()方法创建一个ABRecord然后设置具体的属性，调用ABAddressBookAddRecord方法添加即可。\n下面就通过一个示例演示一下如何通过ABAddressBook.framework访问通讯录，这个例子中通过一个UITableViewController模拟一下通讯录的查看、删除、添加操作。\n主控制器视图，用于显示联系人，修改删除联系人：\n\n```objc\nKCContactViewController.h\n//\n//  KCTableViewController.h\n//  AddressBook\n//\n//  Created by Kenshin Cui on 14/04/05.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import <UIKit/UIKit.h>\n\n/**\n *  定义一个协议作为代理\n */\n@protocol KCContactDelegate\n//新增或修改联系人\n-(void)editPersonWithFirstName:(NSString *)firstName lastName:(NSString *)lastName workNumber:(NSString *)workNumber;\n//取消修改或新增\n-(void)cancelEdit;\n@end\n\n@interface KCContactTableViewController : UITableViewController\n\n@end\nKCContactViewController.m\n//\n//  KCTableViewController.m\n//  AddressBook\n//\n//  Created by Kenshin Cui on 14/04/05.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"KCContactTableViewController.h\"\n#import <AddressBook/AddressBook.h>\n#import \"KCAddPersonViewController.h\"\n\n@interface KCContactTableViewController ()<KCContactDelegate>\n\n@property (assign,nonatomic) ABAddressBookRef addressBook;//通讯录\n@property (strong,nonatomic) NSMutableArray *allPerson;//通讯录所有人员\n\n@property (assign,nonatomic) int isModify;//标识是修改还是新增，通过选择cell进行导航则认为是修改，否则视为新增\n@property (assign,nonatomic) UITableViewCell *selectedCell;//当前选中的单元格\n\n@end\n\n@implementation KCContactTableViewController\n\n#pragma mark - 控制器视图\n- (void)viewDidLoad {\n    [super viewDidLoad];\n \n    //请求访问通讯录并初始化数据\n    [self requestAddressBook];\n}\n\n//由于在整个视图控制器周期内addressBook都驻留在内存中，所有当控制器视图销毁时销毁该对象\n-(void)dealloc{\n    if (self.addressBook!=NULL) {\n        CFRelease(self.addressBook);\n    }\n}\n\n#pragma mark - UI事件\n//点击删除按钮\n- (IBAction)trashClick:(UIBarButtonItem *)sender {\n    self.tableView.editing=!self.tableView.editing;\n}\n\n\n#pragma mark - UITableView数据源方法\n\n- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {\n    return 1;\n}\n\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    return self.allPerson.count;\n}\n\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n    static NSString *identtityKey=@\"myTableViewCellIdentityKey1\";\n    UITableViewCell *cell=[tableView dequeueReusableCellWithIdentifier:identtityKey];\n    if(cell==nil){\n        cell=[[UITableViewCell alloc]initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:identtityKey];\n    }\n    //取得一条人员记录\n    ABRecordRef recordRef=(__bridge ABRecordRef)self.allPerson[indexPath.row];\n    //取得记录中得信息\n    NSString *firstName=(__bridge NSString *) ABRecordCopyValue(recordRef, kABPersonFirstNameProperty);//注意这里进行了强转，不用自己释放资源\n    NSString *lastName=(__bridge NSString *)ABRecordCopyValue(recordRef, kABPersonLastNameProperty);\n    \n    ABMultiValueRef phoneNumbersRef= ABRecordCopyValue(recordRef, kABPersonPhoneProperty);//获取手机号，注意手机号是ABMultiValueRef类，有可能有多条\n//    NSArray *phoneNumbers=(__bridge NSArray *)ABMultiValueCopyArrayOfAllValues(phoneNumbersRef);//取得CFArraryRef类型的手机记录并转化为NSArrary\n    long count= ABMultiValueGetCount(phoneNumbersRef);\n//    for(int i=0;i<count;++i){\n//        NSString *phoneLabel= (__bridge NSString *)(ABMultiValueCopyLabelAtIndex(phoneNumbersRef, i));\n//        NSString *phoneNumber=(__bridge NSString *)(ABMultiValueCopyValueAtIndex(phoneNumbersRef, i));\n//        NSLog(@\"%@:%@\",phoneLabel,phoneNumber);\n//    }\n    \n    cell.textLabel.text=[NSString stringWithFormat:@\"%@ %@\",firstName,lastName];\n    if (count>0) {\n        cell.detailTextLabel.text=(__bridge NSString *)(ABMultiValueCopyValueAtIndex(phoneNumbersRef, 0));\n    }\n    if(ABPersonHasImageData(recordRef)){//如果有照片数据\n        NSData *imageData= (__bridge NSData *)(ABPersonCopyImageData(recordRef));\n        cell.imageView.image=[UIImage imageWithData:imageData];\n    }else{\n        cell.imageView.image=[UIImage imageNamed:@\"avatar\"];//没有图片使用默认头像\n    }\n    //使用cell的tag存储记录id\n    cell.tag=ABRecordGetRecordID(recordRef);\n    \n    return cell;\n}\n\n\n- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {\n    if (editingStyle == UITableViewCellEditingStyleDelete) {\n        ABRecordRef recordRef=(__bridge ABRecordRef )self.allPerson[indexPath.row];\n        [self removePersonWithRecord:recordRef];//从通讯录删除\n        [self.allPerson removeObjectAtIndex:indexPath.row];//从数组移除\n        [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];//从列表删除\n    } else if (editingStyle == UITableViewCellEditingStyleInsert) {\n        // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view\n    }   \n}\n\n#pragma mark - UITableView代理方法\n-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{\n    self.isModify=1;\n    self.selectedCell=[tableView cellForRowAtIndexPath:indexPath];\n    [self performSegueWithIdentifier:@\"AddPerson\" sender:self];\n}\n\n#pragma mark - Navigation\n- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {\n    if([segue.identifier isEqualToString:@\"AddPerson\"]){\n        UINavigationController *navigationController=(UINavigationController *)segue.destinationViewController;\n        //根据导航控制器取得添加/修改人员的控制器视图\n        KCAddPersonViewController *addPersonController=(KCAddPersonViewController *)navigationController.topViewController;\n        addPersonController.delegate=self;\n        //如果是通过选择cell进行的导航操作说明是修改，否则为添加\n        if (self.isModify) {\n            UITableViewCell *cell=self.selectedCell;\n            addPersonController.recordID=(ABRecordID)cell.tag;//设置\n            NSArray *array=[cell.textLabel.text componentsSeparatedByString:@\" \"];\n            if (array.count>0) {\n                addPersonController.firstNameText=[array firstObject];\n            }\n            if (array.count>1) {\n                addPersonController.lastNameText=[array lastObject];\n            }\n            addPersonController.workPhoneText=cell.detailTextLabel.text;\n            \n        }\n    }\n}\n\n\n#pragma mark - KCContact代理方法\n-(void)editPersonWithFirstName:(NSString *)firstName lastName:(NSString *)lastName workNumber:(NSString *)workNumber{\n    if (self.isModify) {\n        UITableViewCell *cell=self.selectedCell;\n        NSIndexPath *indexPath= [self.tableView indexPathForCell:cell];\n        [self modifyPersonWithRecordID:(ABRecordID)cell.tag firstName:firstName lastName:lastName workNumber:workNumber];\n        [self.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationRight];\n    }else{\n        [self addPersonWithFirstName:firstName lastName:lastName workNumber:workNumber];//通讯簿中添加信息\n        [self initAllPerson];//重新初始化数据\n        [self.tableView reloadData];\n    }\n    self.isModify=0;\n}\n-(void)cancelEdit{\n    self.isModify=0;\n}\n\n#pragma mark - 私有方法\n/**\n *  请求访问通讯录\n */\n-(void)requestAddressBook{\n    //创建通讯录对象\n    self.addressBook=ABAddressBookCreateWithOptions(NULL, NULL);\n    \n    //请求访问用户通讯录,注意无论成功与否block都会调用\n    ABAddressBookRequestAccessWithCompletion(self.addressBook, ^(bool granted, CFErrorRef error) {\n        if (!granted) {\n            NSLog(@\"未获得通讯录访问权限！\");\n        }\n        [self initAllPerson];\n        \n    });\n}\n/**\n *  取得所有通讯录记录\n */\n-(void)initAllPerson{\n    //取得通讯录访问授权\n    ABAuthorizationStatus authorization= ABAddressBookGetAuthorizationStatus();\n    //如果未获得授权\n    if (authorization!=kABAuthorizationStatusAuthorized) {\n        NSLog(@\"尚未获得通讯录访问授权！\");\n        return ;\n    }\n    //取得通讯录中所有人员记录\n    CFArrayRef allPeople= ABAddressBookCopyArrayOfAllPeople(self.addressBook);\n    self.allPerson=(__bridge NSMutableArray *)allPeople;\n    \n    //释放资源\n    CFRelease(allPeople);\n\n}\n\n/**\n *  删除指定的记录\n *\n *  @param recordRef 要删除的记录\n */\n-(void)removePersonWithRecord:(ABRecordRef)recordRef{\n    ABAddressBookRemoveRecord(self.addressBook, recordRef, NULL);//删除\n    ABAddressBookSave(self.addressBook, NULL);//删除之后提交更改\n}\n/**\n *  根据姓名删除记录\n */\n-(void)removePersonWithName:(NSString *)personName{\n    CFStringRef personNameRef=(__bridge CFStringRef)(personName);\n    CFArrayRef recordsRef= ABAddressBookCopyPeopleWithName(self.addressBook, personNameRef);//根据人员姓名查找\n    CFIndex count= CFArrayGetCount(recordsRef);//取得记录数\n    for (CFIndex i=0; i<count; ++i) {\n        ABRecordRef recordRef=CFArrayGetValueAtIndex(recordsRef, i);//取得指定的记录\n        ABAddressBookRemoveRecord(self.addressBook, recordRef, NULL);//删除\n    }\n    ABAddressBookSave(self.addressBook, NULL);//删除之后提交更改\n    CFRelease(recordsRef);\n}\n\n/**\n *  添加一条记录\n *\n *  @param firstName  名\n *  @param lastName   姓\n *  @param iPhoneName iPhone手机号\n */\n-(void)addPersonWithFirstName:(NSString *)firstName lastName:(NSString *)lastName workNumber:(NSString *)workNumber{\n    //创建一条记录\n    ABRecordRef recordRef= ABPersonCreate();\n    ABRecordSetValue(recordRef, kABPersonFirstNameProperty, (__bridge CFTypeRef)(firstName), NULL);//添加名\n    ABRecordSetValue(recordRef, kABPersonLastNameProperty, (__bridge CFTypeRef)(lastName), NULL);//添加姓\n    \n    ABMutableMultiValueRef multiValueRef =ABMultiValueCreateMutable(kABStringPropertyType);//添加设置多值属性\n    ABMultiValueAddValueAndLabel(multiValueRef, (__bridge CFStringRef)(workNumber), kABWorkLabel, NULL);//添加工作电话\n    ABRecordSetValue(recordRef, kABPersonPhoneProperty, multiValueRef, NULL);\n    \n    //添加记录\n    ABAddressBookAddRecord(self.addressBook, recordRef, NULL);\n    \n    //保存通讯录，提交更改\n    ABAddressBookSave(self.addressBook, NULL);\n    //释放资源\n    CFRelease(recordRef);\n    CFRelease(multiValueRef);\n}\n\n/**\n *  根据RecordID修改联系人信息\n *\n *  @param recordID   记录唯一ID\n *  @param firstName  姓\n *  @param lastName   名\n *  @param homeNumber 工作电话\n */\n-(void)modifyPersonWithRecordID:(ABRecordID)recordID firstName:(NSString *)firstName lastName:(NSString *)lastName workNumber:(NSString *)workNumber{\n    ABRecordRef recordRef=ABAddressBookGetPersonWithRecordID(self.addressBook,recordID);\n    ABRecordSetValue(recordRef, kABPersonFirstNameProperty, (__bridge CFTypeRef)(firstName), NULL);//添加名\n    ABRecordSetValue(recordRef, kABPersonLastNameProperty, (__bridge CFTypeRef)(lastName), NULL);//添加姓\n    \n    ABMutableMultiValueRef multiValueRef =ABMultiValueCreateMutable(kABStringPropertyType);\n    ABMultiValueAddValueAndLabel(multiValueRef, (__bridge CFStringRef)(workNumber), kABWorkLabel, NULL);\n    ABRecordSetValue(recordRef, kABPersonPhoneProperty, multiValueRef, NULL);\n    //保存记录，提交更改\n    ABAddressBookSave(self.addressBook, NULL);\n    //释放资源\n    CFRelease(multiValueRef);\n}\n@end\n新增或修改控制器视图，用于显示一个联系人的信息或者新增一个联系人：\nKCAddPersonViewController.h\n//\n//  KCAddPersonViewController.h\n//  AddressBook\n//\n//  kABPersonFirstNameProperty\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import <UIKit/UIKit.h>\n@protocol KCContactDelegate;\n\n@interface KCAddPersonViewController : UIViewController\n\n@property (assign,nonatomic) int recordID;//通讯录记录id，如果ID不为0则代表修改否则认为是新增\n@property (strong,nonatomic) NSString *firstNameText;\n@property (strong,nonatomic) NSString *lastNameText;\n@property (strong,nonatomic) NSString *workPhoneText;\n\n@property (strong,nonatomic) id<KCContactDelegate> delegate;\n\n@end\nKCAddPersonViewController.m\n//\n//  KCAddPersonViewController.m\n//  AddressBook\n//\n//  kABPersonFirstNameProperty\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"KCAddPersonViewController.h\"\n#import \"KCContactTableViewController.h\"\n\n@interface KCAddPersonViewController ()\n\n@property (weak, nonatomic) IBOutlet UITextField *firstName;\n@property (weak, nonatomic) IBOutlet UITextField *lastName;\n@property (weak, nonatomic) IBOutlet UITextField *workPhone;\n@end\n\n@implementation KCAddPersonViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self setupUI];\n}\n\n#pragma mark - UI事件\n- (IBAction)cancelClick:(UIBarButtonItem *)sender {\n    [self.delegate cancelEdit];\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\n- (IBAction)doneClick:(UIBarButtonItem *)sender {\n    //调用代理方法\n    [self.delegate editPersonWithFirstName:self.firstName.text lastName:self.lastName.text workNumber:self.workPhone.text];\n    \n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\n#pragma mark - 私有方法\n-(void)setupUI{\n    if (self.recordID) {//如果ID不为0则认为是修改，此时需要初始化界面\n        self.firstName.text=self.firstNameText;\n        self.lastName.text=self.lastNameText;\n        self.workPhone.text=self.workPhoneText;\n    }\n}\n@end\n```\n\n","source":"_posts/oc/通讯录.md","raw":"---\ntitle: 通讯录\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n通讯录\nAddressBook\niOS中带有一个Contacts应用程序来管理联系人，但是有些时候我们希望自己的应用能够访问或者修改这些信息，这个时候就要用到AddressBook.framework框架。iOS中的通讯录是存储在数据库中的，由于iOS的权限设计，开发人员是不允许直接访问通讯录数据库的，必须依靠AddressBook提供的标准API来实现通讯录操作。通过AddressBook.framework开发者可以从底层去操作AddressBook.framework的所有信息，但是需要注意的是这个框架是基于C语言编写的，无法使用ARC来管理内存，开发者需要自己管理内存。下面大致介绍一下通讯录操作中常用的类型：\nABAddressBookRef：代表通讯录对象，通过该对象开发人员不用过多的关注通讯录的存储方式，可以直接以透明的方式去访问、保存（在使用AddressBook.framework操作联系人时，所有的增加、删除、修改后都必须执行保存操作，类似于Core Data）等。\nABRecordRef：代表一个通用的记录对象，可以是一条联系人信息，也可以是一个群组，可以通过ABRecordGetRecordType()函数获得具体类型。如果作为联系人（事实上也经常使用它作为联系人），那么这个记录记录了一个完整的联系人信息（姓名、性别、电话、邮件等），每条记录都有一个唯一的ID标示这条记录（可以通过ABRecordGetRecordID()函数获得）。\nABPersonRef：代表联系人信息，很少直接使用，实际开发过程中通常会使用类型为“kABPersonType”的ABRecordRef来表示联系人（由此可见ABPersonRef其实是一种类型为“kABPersonType”的ABRecordRef）\nABGroupRef：代表群组，与ABPersonRef类似，很少直接使用ABGroupRef，而是使用类型为“kABGroupType”的ABRecordRef来表示群组，一个群组可以包含多个联系人，一个联系人也同样可以多个群组。\n由于通讯录操作的关键是对ABRecordRef的操作，首先看一下常用的操作通讯录记录的方法：\nABPersonCreate():创建一个类型为“kABPersonType”的ABRecordRef。\nABRecordCopyValue():取得指定属性的值。\nABRecordCopyCompositeName():取得联系人（或群组）的复合信息（对于联系人则包括：姓、名、公司等信息，对于群组则返回组名称）。\nABRecordSetValue():设置ABRecordRef的属性值。注意在设置ABRecordRef的值时又分为单值属性和多值属性：单值属性设置只要通过ABRecordSetValue()方法指定属性名和值即可；多值属性则要先通过创建一个ABMutableMultiValueRef类型的变量，然后通过ABMultiValueAddValueAndLabel()方法依次添加属性值，最后通过ABRecordSetValue()方法将ABMutableMultiValueRef类型的变量设置为记录值。\nABRecordRemoveValue():删除指定的属性值。\n注意：\n由于联系人访问时（读取、设置、删除时）牵扯到大量联系人属性，可以到ABPerson.h中查询或者直接到帮助文档“Personal Information Properties”\n通讯录的访问步骤一般如下：\n调用ABAddressBookCreateWithOptions()方法创建通讯录对象ABAddressBookRef。\n调用ABAddressBookRequestAccessWithCompletion()方法获得用户授权访问通讯录。\n调用ABAddressBookCopyArrayOfAllPeople()、ABAddressBookCopyPeopleWithName()方法查询联系人信息。\n读取联系人后如果要显示联系人信息则可以调用ABRecord相关方法读取相应的数据；如果要进行修改联系人信息，则可以使用对应的方法修改ABRecord信息，然后调用ABAddressBookSave()方法提交修改；如果要删除联系人，则可以调用ABAddressBookRemoveRecord()方法删除，然后调用ABAddressBookSave()提交修改操作。\n也就是说如果要修改或者删除都需要首先查询对应的联系人，然后修改或删除后提交更改。如果用户要增加一个联系人则不用进行查询，直接调用ABPersonCreate()方法创建一个ABRecord然后设置具体的属性，调用ABAddressBookAddRecord方法添加即可。\n下面就通过一个示例演示一下如何通过ABAddressBook.framework访问通讯录，这个例子中通过一个UITableViewController模拟一下通讯录的查看、删除、添加操作。\n主控制器视图，用于显示联系人，修改删除联系人：\n\n```objc\nKCContactViewController.h\n//\n//  KCTableViewController.h\n//  AddressBook\n//\n//  Created by Kenshin Cui on 14/04/05.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import <UIKit/UIKit.h>\n\n/**\n *  定义一个协议作为代理\n */\n@protocol KCContactDelegate\n//新增或修改联系人\n-(void)editPersonWithFirstName:(NSString *)firstName lastName:(NSString *)lastName workNumber:(NSString *)workNumber;\n//取消修改或新增\n-(void)cancelEdit;\n@end\n\n@interface KCContactTableViewController : UITableViewController\n\n@end\nKCContactViewController.m\n//\n//  KCTableViewController.m\n//  AddressBook\n//\n//  Created by Kenshin Cui on 14/04/05.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"KCContactTableViewController.h\"\n#import <AddressBook/AddressBook.h>\n#import \"KCAddPersonViewController.h\"\n\n@interface KCContactTableViewController ()<KCContactDelegate>\n\n@property (assign,nonatomic) ABAddressBookRef addressBook;//通讯录\n@property (strong,nonatomic) NSMutableArray *allPerson;//通讯录所有人员\n\n@property (assign,nonatomic) int isModify;//标识是修改还是新增，通过选择cell进行导航则认为是修改，否则视为新增\n@property (assign,nonatomic) UITableViewCell *selectedCell;//当前选中的单元格\n\n@end\n\n@implementation KCContactTableViewController\n\n#pragma mark - 控制器视图\n- (void)viewDidLoad {\n    [super viewDidLoad];\n \n    //请求访问通讯录并初始化数据\n    [self requestAddressBook];\n}\n\n//由于在整个视图控制器周期内addressBook都驻留在内存中，所有当控制器视图销毁时销毁该对象\n-(void)dealloc{\n    if (self.addressBook!=NULL) {\n        CFRelease(self.addressBook);\n    }\n}\n\n#pragma mark - UI事件\n//点击删除按钮\n- (IBAction)trashClick:(UIBarButtonItem *)sender {\n    self.tableView.editing=!self.tableView.editing;\n}\n\n\n#pragma mark - UITableView数据源方法\n\n- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {\n    return 1;\n}\n\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    return self.allPerson.count;\n}\n\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n    static NSString *identtityKey=@\"myTableViewCellIdentityKey1\";\n    UITableViewCell *cell=[tableView dequeueReusableCellWithIdentifier:identtityKey];\n    if(cell==nil){\n        cell=[[UITableViewCell alloc]initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:identtityKey];\n    }\n    //取得一条人员记录\n    ABRecordRef recordRef=(__bridge ABRecordRef)self.allPerson[indexPath.row];\n    //取得记录中得信息\n    NSString *firstName=(__bridge NSString *) ABRecordCopyValue(recordRef, kABPersonFirstNameProperty);//注意这里进行了强转，不用自己释放资源\n    NSString *lastName=(__bridge NSString *)ABRecordCopyValue(recordRef, kABPersonLastNameProperty);\n    \n    ABMultiValueRef phoneNumbersRef= ABRecordCopyValue(recordRef, kABPersonPhoneProperty);//获取手机号，注意手机号是ABMultiValueRef类，有可能有多条\n//    NSArray *phoneNumbers=(__bridge NSArray *)ABMultiValueCopyArrayOfAllValues(phoneNumbersRef);//取得CFArraryRef类型的手机记录并转化为NSArrary\n    long count= ABMultiValueGetCount(phoneNumbersRef);\n//    for(int i=0;i<count;++i){\n//        NSString *phoneLabel= (__bridge NSString *)(ABMultiValueCopyLabelAtIndex(phoneNumbersRef, i));\n//        NSString *phoneNumber=(__bridge NSString *)(ABMultiValueCopyValueAtIndex(phoneNumbersRef, i));\n//        NSLog(@\"%@:%@\",phoneLabel,phoneNumber);\n//    }\n    \n    cell.textLabel.text=[NSString stringWithFormat:@\"%@ %@\",firstName,lastName];\n    if (count>0) {\n        cell.detailTextLabel.text=(__bridge NSString *)(ABMultiValueCopyValueAtIndex(phoneNumbersRef, 0));\n    }\n    if(ABPersonHasImageData(recordRef)){//如果有照片数据\n        NSData *imageData= (__bridge NSData *)(ABPersonCopyImageData(recordRef));\n        cell.imageView.image=[UIImage imageWithData:imageData];\n    }else{\n        cell.imageView.image=[UIImage imageNamed:@\"avatar\"];//没有图片使用默认头像\n    }\n    //使用cell的tag存储记录id\n    cell.tag=ABRecordGetRecordID(recordRef);\n    \n    return cell;\n}\n\n\n- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {\n    if (editingStyle == UITableViewCellEditingStyleDelete) {\n        ABRecordRef recordRef=(__bridge ABRecordRef )self.allPerson[indexPath.row];\n        [self removePersonWithRecord:recordRef];//从通讯录删除\n        [self.allPerson removeObjectAtIndex:indexPath.row];//从数组移除\n        [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];//从列表删除\n    } else if (editingStyle == UITableViewCellEditingStyleInsert) {\n        // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view\n    }   \n}\n\n#pragma mark - UITableView代理方法\n-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{\n    self.isModify=1;\n    self.selectedCell=[tableView cellForRowAtIndexPath:indexPath];\n    [self performSegueWithIdentifier:@\"AddPerson\" sender:self];\n}\n\n#pragma mark - Navigation\n- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {\n    if([segue.identifier isEqualToString:@\"AddPerson\"]){\n        UINavigationController *navigationController=(UINavigationController *)segue.destinationViewController;\n        //根据导航控制器取得添加/修改人员的控制器视图\n        KCAddPersonViewController *addPersonController=(KCAddPersonViewController *)navigationController.topViewController;\n        addPersonController.delegate=self;\n        //如果是通过选择cell进行的导航操作说明是修改，否则为添加\n        if (self.isModify) {\n            UITableViewCell *cell=self.selectedCell;\n            addPersonController.recordID=(ABRecordID)cell.tag;//设置\n            NSArray *array=[cell.textLabel.text componentsSeparatedByString:@\" \"];\n            if (array.count>0) {\n                addPersonController.firstNameText=[array firstObject];\n            }\n            if (array.count>1) {\n                addPersonController.lastNameText=[array lastObject];\n            }\n            addPersonController.workPhoneText=cell.detailTextLabel.text;\n            \n        }\n    }\n}\n\n\n#pragma mark - KCContact代理方法\n-(void)editPersonWithFirstName:(NSString *)firstName lastName:(NSString *)lastName workNumber:(NSString *)workNumber{\n    if (self.isModify) {\n        UITableViewCell *cell=self.selectedCell;\n        NSIndexPath *indexPath= [self.tableView indexPathForCell:cell];\n        [self modifyPersonWithRecordID:(ABRecordID)cell.tag firstName:firstName lastName:lastName workNumber:workNumber];\n        [self.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationRight];\n    }else{\n        [self addPersonWithFirstName:firstName lastName:lastName workNumber:workNumber];//通讯簿中添加信息\n        [self initAllPerson];//重新初始化数据\n        [self.tableView reloadData];\n    }\n    self.isModify=0;\n}\n-(void)cancelEdit{\n    self.isModify=0;\n}\n\n#pragma mark - 私有方法\n/**\n *  请求访问通讯录\n */\n-(void)requestAddressBook{\n    //创建通讯录对象\n    self.addressBook=ABAddressBookCreateWithOptions(NULL, NULL);\n    \n    //请求访问用户通讯录,注意无论成功与否block都会调用\n    ABAddressBookRequestAccessWithCompletion(self.addressBook, ^(bool granted, CFErrorRef error) {\n        if (!granted) {\n            NSLog(@\"未获得通讯录访问权限！\");\n        }\n        [self initAllPerson];\n        \n    });\n}\n/**\n *  取得所有通讯录记录\n */\n-(void)initAllPerson{\n    //取得通讯录访问授权\n    ABAuthorizationStatus authorization= ABAddressBookGetAuthorizationStatus();\n    //如果未获得授权\n    if (authorization!=kABAuthorizationStatusAuthorized) {\n        NSLog(@\"尚未获得通讯录访问授权！\");\n        return ;\n    }\n    //取得通讯录中所有人员记录\n    CFArrayRef allPeople= ABAddressBookCopyArrayOfAllPeople(self.addressBook);\n    self.allPerson=(__bridge NSMutableArray *)allPeople;\n    \n    //释放资源\n    CFRelease(allPeople);\n\n}\n\n/**\n *  删除指定的记录\n *\n *  @param recordRef 要删除的记录\n */\n-(void)removePersonWithRecord:(ABRecordRef)recordRef{\n    ABAddressBookRemoveRecord(self.addressBook, recordRef, NULL);//删除\n    ABAddressBookSave(self.addressBook, NULL);//删除之后提交更改\n}\n/**\n *  根据姓名删除记录\n */\n-(void)removePersonWithName:(NSString *)personName{\n    CFStringRef personNameRef=(__bridge CFStringRef)(personName);\n    CFArrayRef recordsRef= ABAddressBookCopyPeopleWithName(self.addressBook, personNameRef);//根据人员姓名查找\n    CFIndex count= CFArrayGetCount(recordsRef);//取得记录数\n    for (CFIndex i=0; i<count; ++i) {\n        ABRecordRef recordRef=CFArrayGetValueAtIndex(recordsRef, i);//取得指定的记录\n        ABAddressBookRemoveRecord(self.addressBook, recordRef, NULL);//删除\n    }\n    ABAddressBookSave(self.addressBook, NULL);//删除之后提交更改\n    CFRelease(recordsRef);\n}\n\n/**\n *  添加一条记录\n *\n *  @param firstName  名\n *  @param lastName   姓\n *  @param iPhoneName iPhone手机号\n */\n-(void)addPersonWithFirstName:(NSString *)firstName lastName:(NSString *)lastName workNumber:(NSString *)workNumber{\n    //创建一条记录\n    ABRecordRef recordRef= ABPersonCreate();\n    ABRecordSetValue(recordRef, kABPersonFirstNameProperty, (__bridge CFTypeRef)(firstName), NULL);//添加名\n    ABRecordSetValue(recordRef, kABPersonLastNameProperty, (__bridge CFTypeRef)(lastName), NULL);//添加姓\n    \n    ABMutableMultiValueRef multiValueRef =ABMultiValueCreateMutable(kABStringPropertyType);//添加设置多值属性\n    ABMultiValueAddValueAndLabel(multiValueRef, (__bridge CFStringRef)(workNumber), kABWorkLabel, NULL);//添加工作电话\n    ABRecordSetValue(recordRef, kABPersonPhoneProperty, multiValueRef, NULL);\n    \n    //添加记录\n    ABAddressBookAddRecord(self.addressBook, recordRef, NULL);\n    \n    //保存通讯录，提交更改\n    ABAddressBookSave(self.addressBook, NULL);\n    //释放资源\n    CFRelease(recordRef);\n    CFRelease(multiValueRef);\n}\n\n/**\n *  根据RecordID修改联系人信息\n *\n *  @param recordID   记录唯一ID\n *  @param firstName  姓\n *  @param lastName   名\n *  @param homeNumber 工作电话\n */\n-(void)modifyPersonWithRecordID:(ABRecordID)recordID firstName:(NSString *)firstName lastName:(NSString *)lastName workNumber:(NSString *)workNumber{\n    ABRecordRef recordRef=ABAddressBookGetPersonWithRecordID(self.addressBook,recordID);\n    ABRecordSetValue(recordRef, kABPersonFirstNameProperty, (__bridge CFTypeRef)(firstName), NULL);//添加名\n    ABRecordSetValue(recordRef, kABPersonLastNameProperty, (__bridge CFTypeRef)(lastName), NULL);//添加姓\n    \n    ABMutableMultiValueRef multiValueRef =ABMultiValueCreateMutable(kABStringPropertyType);\n    ABMultiValueAddValueAndLabel(multiValueRef, (__bridge CFStringRef)(workNumber), kABWorkLabel, NULL);\n    ABRecordSetValue(recordRef, kABPersonPhoneProperty, multiValueRef, NULL);\n    //保存记录，提交更改\n    ABAddressBookSave(self.addressBook, NULL);\n    //释放资源\n    CFRelease(multiValueRef);\n}\n@end\n新增或修改控制器视图，用于显示一个联系人的信息或者新增一个联系人：\nKCAddPersonViewController.h\n//\n//  KCAddPersonViewController.h\n//  AddressBook\n//\n//  kABPersonFirstNameProperty\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import <UIKit/UIKit.h>\n@protocol KCContactDelegate;\n\n@interface KCAddPersonViewController : UIViewController\n\n@property (assign,nonatomic) int recordID;//通讯录记录id，如果ID不为0则代表修改否则认为是新增\n@property (strong,nonatomic) NSString *firstNameText;\n@property (strong,nonatomic) NSString *lastNameText;\n@property (strong,nonatomic) NSString *workPhoneText;\n\n@property (strong,nonatomic) id<KCContactDelegate> delegate;\n\n@end\nKCAddPersonViewController.m\n//\n//  KCAddPersonViewController.m\n//  AddressBook\n//\n//  kABPersonFirstNameProperty\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"KCAddPersonViewController.h\"\n#import \"KCContactTableViewController.h\"\n\n@interface KCAddPersonViewController ()\n\n@property (weak, nonatomic) IBOutlet UITextField *firstName;\n@property (weak, nonatomic) IBOutlet UITextField *lastName;\n@property (weak, nonatomic) IBOutlet UITextField *workPhone;\n@end\n\n@implementation KCAddPersonViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self setupUI];\n}\n\n#pragma mark - UI事件\n- (IBAction)cancelClick:(UIBarButtonItem *)sender {\n    [self.delegate cancelEdit];\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\n- (IBAction)doneClick:(UIBarButtonItem *)sender {\n    //调用代理方法\n    [self.delegate editPersonWithFirstName:self.firstName.text lastName:self.lastName.text workNumber:self.workPhone.text];\n    \n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\n#pragma mark - 私有方法\n-(void)setupUI{\n    if (self.recordID) {//如果ID不为0则认为是修改，此时需要初始化界面\n        self.firstName.text=self.firstNameText;\n        self.lastName.text=self.lastNameText;\n        self.workPhone.text=self.workPhoneText;\n    }\n}\n@end\n```\n\n","slug":"oc/通讯录","published":1,"updated":"2016-10-08T09:15:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99d004x21xw1s24neg6","content":"<a id=\"more\"></a>\n<p>通讯录<br>AddressBook<br>iOS中带有一个Contacts应用程序来管理联系人，但是有些时候我们希望自己的应用能够访问或者修改这些信息，这个时候就要用到AddressBook.framework框架。iOS中的通讯录是存储在数据库中的，由于iOS的权限设计，开发人员是不允许直接访问通讯录数据库的，必须依靠AddressBook提供的标准API来实现通讯录操作。通过AddressBook.framework开发者可以从底层去操作AddressBook.framework的所有信息，但是需要注意的是这个框架是基于C语言编写的，无法使用ARC来管理内存，开发者需要自己管理内存。下面大致介绍一下通讯录操作中常用的类型：<br>ABAddressBookRef：代表通讯录对象，通过该对象开发人员不用过多的关注通讯录的存储方式，可以直接以透明的方式去访问、保存（在使用AddressBook.framework操作联系人时，所有的增加、删除、修改后都必须执行保存操作，类似于Core Data）等。<br>ABRecordRef：代表一个通用的记录对象，可以是一条联系人信息，也可以是一个群组，可以通过ABRecordGetRecordType()函数获得具体类型。如果作为联系人（事实上也经常使用它作为联系人），那么这个记录记录了一个完整的联系人信息（姓名、性别、电话、邮件等），每条记录都有一个唯一的ID标示这条记录（可以通过ABRecordGetRecordID()函数获得）。<br>ABPersonRef：代表联系人信息，很少直接使用，实际开发过程中通常会使用类型为“kABPersonType”的ABRecordRef来表示联系人（由此可见ABPersonRef其实是一种类型为“kABPersonType”的ABRecordRef）<br>ABGroupRef：代表群组，与ABPersonRef类似，很少直接使用ABGroupRef，而是使用类型为“kABGroupType”的ABRecordRef来表示群组，一个群组可以包含多个联系人，一个联系人也同样可以多个群组。<br>由于通讯录操作的关键是对ABRecordRef的操作，首先看一下常用的操作通讯录记录的方法：<br>ABPersonCreate():创建一个类型为“kABPersonType”的ABRecordRef。<br>ABRecordCopyValue():取得指定属性的值。<br>ABRecordCopyCompositeName():取得联系人（或群组）的复合信息（对于联系人则包括：姓、名、公司等信息，对于群组则返回组名称）。<br>ABRecordSetValue():设置ABRecordRef的属性值。注意在设置ABRecordRef的值时又分为单值属性和多值属性：单值属性设置只要通过ABRecordSetValue()方法指定属性名和值即可；多值属性则要先通过创建一个ABMutableMultiValueRef类型的变量，然后通过ABMultiValueAddValueAndLabel()方法依次添加属性值，最后通过ABRecordSetValue()方法将ABMutableMultiValueRef类型的变量设置为记录值。<br>ABRecordRemoveValue():删除指定的属性值。<br>注意：<br>由于联系人访问时（读取、设置、删除时）牵扯到大量联系人属性，可以到ABPerson.h中查询或者直接到帮助文档“Personal Information Properties”<br>通讯录的访问步骤一般如下：<br>调用ABAddressBookCreateWithOptions()方法创建通讯录对象ABAddressBookRef。<br>调用ABAddressBookRequestAccessWithCompletion()方法获得用户授权访问通讯录。<br>调用ABAddressBookCopyArrayOfAllPeople()、ABAddressBookCopyPeopleWithName()方法查询联系人信息。<br>读取联系人后如果要显示联系人信息则可以调用ABRecord相关方法读取相应的数据；如果要进行修改联系人信息，则可以使用对应的方法修改ABRecord信息，然后调用ABAddressBookSave()方法提交修改；如果要删除联系人，则可以调用ABAddressBookRemoveRecord()方法删除，然后调用ABAddressBookSave()提交修改操作。<br>也就是说如果要修改或者删除都需要首先查询对应的联系人，然后修改或删除后提交更改。如果用户要增加一个联系人则不用进行查询，直接调用ABPersonCreate()方法创建一个ABRecord然后设置具体的属性，调用ABAddressBookAddRecord方法添加即可。<br>下面就通过一个示例演示一下如何通过ABAddressBook.framework访问通讯录，这个例子中通过一个UITableViewController模拟一下通讯录的查看、删除、添加操作。<br>主控制器视图，用于显示联系人，修改删除联系人：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div></pre></td><td class=\"code\"><pre><div class=\"line\">KCContactViewController.h</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  KCTableViewController.h</span></div><div class=\"line\"><span class=\"comment\">//  AddressBook</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/04/05.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIKit.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  定义一个协议作为代理</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">KCContactDelegate</span></span></div><div class=\"line\"><span class=\"comment\">//新增或修改联系人</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)editPersonWithFirstName:(<span class=\"built_in\">NSString</span> *)firstName lastName:(<span class=\"built_in\">NSString</span> *)lastName workNumber:(<span class=\"built_in\">NSString</span> *)workNumber;</div><div class=\"line\"><span class=\"comment\">//取消修改或新增</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)cancelEdit;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">KCContactTableViewController</span> : <span class=\"title\">UITableViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">KCContactViewController.m</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  KCTableViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  AddressBook</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/04/05.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"KCContactTableViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AddressBook/AddressBook.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"KCAddPersonViewController.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">KCContactTableViewController</span> ()&lt;<span class=\"title\">KCContactDelegate</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>,<span class=\"keyword\">nonatomic</span>) ABAddressBookRef addressBook;<span class=\"comment\">//通讯录</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSMutableArray</span> *allPerson;<span class=\"comment\">//通讯录所有人员</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">int</span> isModify;<span class=\"comment\">//标识是修改还是新增，通过选择cell进行导航则认为是修改，否则视为新增</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UITableViewCell</span> *selectedCell;<span class=\"comment\">//当前选中的单元格</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">KCContactTableViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器视图</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">//请求访问通讯录并初始化数据</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> requestAddressBook];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//由于在整个视图控制器周期内addressBook都驻留在内存中，所有当控制器视图销毁时销毁该对象</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.addressBook!=<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">CFRelease</span>(<span class=\"keyword\">self</span>.addressBook);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - UI事件</span></div><div class=\"line\"><span class=\"comment\">//点击删除按钮</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)trashClick:(<span class=\"built_in\">UIBarButtonItem</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.tableView.editing=!<span class=\"keyword\">self</span>.tableView.editing;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - UITableView数据源方法</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSInteger</span>)numberOfSectionsInTableView:(<span class=\"built_in\">UITableView</span> *)tableView &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.allPerson.count;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">NSString</span> *identtityKey=<span class=\"string\">@\"myTableViewCellIdentityKey1\"</span>;</div><div class=\"line\">    <span class=\"built_in\">UITableViewCell</span> *cell=[tableView dequeueReusableCellWithIdentifier:identtityKey];</div><div class=\"line\">    <span class=\"keyword\">if</span>(cell==<span class=\"literal\">nil</span>)&#123;</div><div class=\"line\">        cell=[[<span class=\"built_in\">UITableViewCell</span> alloc]initWithStyle:<span class=\"built_in\">UITableViewCellStyleValue1</span> reuseIdentifier:identtityKey];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//取得一条人员记录</span></div><div class=\"line\">    ABRecordRef recordRef=(__bridge ABRecordRef)<span class=\"keyword\">self</span>.allPerson[indexPath.row];</div><div class=\"line\">    <span class=\"comment\">//取得记录中得信息</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *firstName=(__bridge <span class=\"built_in\">NSString</span> *) ABRecordCopyValue(recordRef, kABPersonFirstNameProperty);<span class=\"comment\">//注意这里进行了强转，不用自己释放资源</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *lastName=(__bridge <span class=\"built_in\">NSString</span> *)ABRecordCopyValue(recordRef, kABPersonLastNameProperty);</div><div class=\"line\">    </div><div class=\"line\">    ABMultiValueRef phoneNumbersRef= ABRecordCopyValue(recordRef, kABPersonPhoneProperty);<span class=\"comment\">//获取手机号，注意手机号是ABMultiValueRef类，有可能有多条</span></div><div class=\"line\"><span class=\"comment\">//    NSArray *phoneNumbers=(__bridge NSArray *)ABMultiValueCopyArrayOfAllValues(phoneNumbersRef);//取得CFArraryRef类型的手机记录并转化为NSArrary</span></div><div class=\"line\">    <span class=\"keyword\">long</span> count= ABMultiValueGetCount(phoneNumbersRef);</div><div class=\"line\"><span class=\"comment\">//    for(int i=0;i&lt;count;++i)&#123;</span></div><div class=\"line\"><span class=\"comment\">//        NSString *phoneLabel= (__bridge NSString *)(ABMultiValueCopyLabelAtIndex(phoneNumbersRef, i));</span></div><div class=\"line\"><span class=\"comment\">//        NSString *phoneNumber=(__bridge NSString *)(ABMultiValueCopyValueAtIndex(phoneNumbersRef, i));</span></div><div class=\"line\"><span class=\"comment\">//        NSLog(@\"%@:%@\",phoneLabel,phoneNumber);</span></div><div class=\"line\"><span class=\"comment\">//    &#125;</span></div><div class=\"line\">    </div><div class=\"line\">    cell.textLabel.text=[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@ %@\"</span>,firstName,lastName];</div><div class=\"line\">    <span class=\"keyword\">if</span> (count&gt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">        cell.detailTextLabel.text=(__bridge <span class=\"built_in\">NSString</span> *)(ABMultiValueCopyValueAtIndex(phoneNumbersRef, <span class=\"number\">0</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ABPersonHasImageData(recordRef))&#123;<span class=\"comment\">//如果有照片数据</span></div><div class=\"line\">        <span class=\"built_in\">NSData</span> *imageData= (__bridge <span class=\"built_in\">NSData</span> *)(ABPersonCopyImageData(recordRef));</div><div class=\"line\">        cell.imageView.image=[<span class=\"built_in\">UIImage</span> imageWithData:imageData];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        cell.imageView.image=[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"avatar\"</span>];<span class=\"comment\">//没有图片使用默认头像</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//使用cell的tag存储记录id</span></div><div class=\"line\">    cell.tag=ABRecordGetRecordID(recordRef);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> cell;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView commitEditingStyle:(<span class=\"built_in\">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (editingStyle == <span class=\"built_in\">UITableViewCellEditingStyleDelete</span>) &#123;</div><div class=\"line\">        ABRecordRef recordRef=(__bridge ABRecordRef )<span class=\"keyword\">self</span>.allPerson[indexPath.row];</div><div class=\"line\">        [<span class=\"keyword\">self</span> removePersonWithRecord:recordRef];<span class=\"comment\">//从通讯录删除</span></div><div class=\"line\">        [<span class=\"keyword\">self</span>.allPerson removeObjectAtIndex:indexPath.row];<span class=\"comment\">//从数组移除</span></div><div class=\"line\">        [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:<span class=\"built_in\">UITableViewRowAnimationFade</span>];<span class=\"comment\">//从列表删除</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (editingStyle == <span class=\"built_in\">UITableViewCellEditingStyleInsert</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view</span></div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - UITableView代理方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.isModify=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">self</span>.selectedCell=[tableView cellForRowAtIndexPath:indexPath];</div><div class=\"line\">    [<span class=\"keyword\">self</span> performSegueWithIdentifier:<span class=\"string\">@\"AddPerson\"</span> sender:<span class=\"keyword\">self</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - Navigation</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)prepareForSegue:(<span class=\"built_in\">UIStoryboardSegue</span> *)segue sender:(<span class=\"keyword\">id</span>)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>([segue.identifier isEqualToString:<span class=\"string\">@\"AddPerson\"</span>])&#123;</div><div class=\"line\">        <span class=\"built_in\">UINavigationController</span> *navigationController=(<span class=\"built_in\">UINavigationController</span> *)segue.destinationViewController;</div><div class=\"line\">        <span class=\"comment\">//根据导航控制器取得添加/修改人员的控制器视图</span></div><div class=\"line\">        KCAddPersonViewController *addPersonController=(KCAddPersonViewController *)navigationController.topViewController;</div><div class=\"line\">        addPersonController.delegate=<span class=\"keyword\">self</span>;</div><div class=\"line\">        <span class=\"comment\">//如果是通过选择cell进行的导航操作说明是修改，否则为添加</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.isModify) &#123;</div><div class=\"line\">            <span class=\"built_in\">UITableViewCell</span> *cell=<span class=\"keyword\">self</span>.selectedCell;</div><div class=\"line\">            addPersonController.recordID=(ABRecordID)cell.tag;<span class=\"comment\">//设置</span></div><div class=\"line\">            <span class=\"built_in\">NSArray</span> *array=[cell.textLabel.text componentsSeparatedByString:<span class=\"string\">@\" \"</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span> (array.count&gt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">                addPersonController.firstNameText=[array firstObject];</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (array.count&gt;<span class=\"number\">1</span>) &#123;</div><div class=\"line\">                addPersonController.lastNameText=[array lastObject];</div><div class=\"line\">            &#125;</div><div class=\"line\">            addPersonController.workPhoneText=cell.detailTextLabel.text;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - KCContact代理方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)editPersonWithFirstName:(<span class=\"built_in\">NSString</span> *)firstName lastName:(<span class=\"built_in\">NSString</span> *)lastName workNumber:(<span class=\"built_in\">NSString</span> *)workNumber&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.isModify) &#123;</div><div class=\"line\">        <span class=\"built_in\">UITableViewCell</span> *cell=<span class=\"keyword\">self</span>.selectedCell;</div><div class=\"line\">        <span class=\"built_in\">NSIndexPath</span> *indexPath= [<span class=\"keyword\">self</span>.tableView indexPathForCell:cell];</div><div class=\"line\">        [<span class=\"keyword\">self</span> modifyPersonWithRecordID:(ABRecordID)cell.tag firstName:firstName lastName:lastName workNumber:workNumber];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:<span class=\"built_in\">UITableViewRowAnimationRight</span>];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> addPersonWithFirstName:firstName lastName:lastName workNumber:workNumber];<span class=\"comment\">//通讯簿中添加信息</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> initAllPerson];<span class=\"comment\">//重新初始化数据</span></div><div class=\"line\">        [<span class=\"keyword\">self</span>.tableView reloadData];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">self</span>.isModify=<span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)cancelEdit&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.isModify=<span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  请求访问通讯录</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)requestAddressBook&#123;</div><div class=\"line\">    <span class=\"comment\">//创建通讯录对象</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.addressBook=ABAddressBookCreateWithOptions(<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//请求访问用户通讯录,注意无论成功与否block都会调用</span></div><div class=\"line\">    ABAddressBookRequestAccessWithCompletion(<span class=\"keyword\">self</span>.addressBook, ^(<span class=\"keyword\">bool</span> granted, <span class=\"built_in\">CFErrorRef</span> error) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!granted) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"未获得通讯录访问权限！\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        [<span class=\"keyword\">self</span> initAllPerson];</div><div class=\"line\">        </div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  取得所有通讯录记录</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)initAllPerson&#123;</div><div class=\"line\">    <span class=\"comment\">//取得通讯录访问授权</span></div><div class=\"line\">    ABAuthorizationStatus authorization= ABAddressBookGetAuthorizationStatus();</div><div class=\"line\">    <span class=\"comment\">//如果未获得授权</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (authorization!=kABAuthorizationStatusAuthorized) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"尚未获得通讯录访问授权！\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//取得通讯录中所有人员记录</span></div><div class=\"line\">    <span class=\"built_in\">CFArrayRef</span> allPeople= ABAddressBookCopyArrayOfAllPeople(<span class=\"keyword\">self</span>.addressBook);</div><div class=\"line\">    <span class=\"keyword\">self</span>.allPerson=(__bridge <span class=\"built_in\">NSMutableArray</span> *)allPeople;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//释放资源</span></div><div class=\"line\">    <span class=\"built_in\">CFRelease</span>(allPeople);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  删除指定的记录</div><div class=\"line\"> *</div><div class=\"line\"> *  @param recordRef 要删除的记录</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)removePersonWithRecord:(ABRecordRef)recordRef&#123;</div><div class=\"line\">    ABAddressBookRemoveRecord(<span class=\"keyword\">self</span>.addressBook, recordRef, <span class=\"literal\">NULL</span>);<span class=\"comment\">//删除</span></div><div class=\"line\">    ABAddressBookSave(<span class=\"keyword\">self</span>.addressBook, <span class=\"literal\">NULL</span>);<span class=\"comment\">//删除之后提交更改</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  根据姓名删除记录</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)removePersonWithName:(<span class=\"built_in\">NSString</span> *)personName&#123;</div><div class=\"line\">    <span class=\"built_in\">CFStringRef</span> personNameRef=(__bridge <span class=\"built_in\">CFStringRef</span>)(personName);</div><div class=\"line\">    <span class=\"built_in\">CFArrayRef</span> recordsRef= ABAddressBookCopyPeopleWithName(<span class=\"keyword\">self</span>.addressBook, personNameRef);<span class=\"comment\">//根据人员姓名查找</span></div><div class=\"line\">    <span class=\"built_in\">CFIndex</span> count= <span class=\"built_in\">CFArrayGetCount</span>(recordsRef);<span class=\"comment\">//取得记录数</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">CFIndex</span> i=<span class=\"number\">0</span>; i&lt;count; ++i) &#123;</div><div class=\"line\">        ABRecordRef recordRef=<span class=\"built_in\">CFArrayGetValueAtIndex</span>(recordsRef, i);<span class=\"comment\">//取得指定的记录</span></div><div class=\"line\">        ABAddressBookRemoveRecord(<span class=\"keyword\">self</span>.addressBook, recordRef, <span class=\"literal\">NULL</span>);<span class=\"comment\">//删除</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    ABAddressBookSave(<span class=\"keyword\">self</span>.addressBook, <span class=\"literal\">NULL</span>);<span class=\"comment\">//删除之后提交更改</span></div><div class=\"line\">    <span class=\"built_in\">CFRelease</span>(recordsRef);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  添加一条记录</div><div class=\"line\"> *</div><div class=\"line\"> *  @param firstName  名</div><div class=\"line\"> *  @param lastName   姓</div><div class=\"line\"> *  @param iPhoneName iPhone手机号</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)addPersonWithFirstName:(<span class=\"built_in\">NSString</span> *)firstName lastName:(<span class=\"built_in\">NSString</span> *)lastName workNumber:(<span class=\"built_in\">NSString</span> *)workNumber&#123;</div><div class=\"line\">    <span class=\"comment\">//创建一条记录</span></div><div class=\"line\">    ABRecordRef recordRef= ABPersonCreate();</div><div class=\"line\">    ABRecordSetValue(recordRef, kABPersonFirstNameProperty, (__bridge <span class=\"built_in\">CFTypeRef</span>)(firstName), <span class=\"literal\">NULL</span>);<span class=\"comment\">//添加名</span></div><div class=\"line\">    ABRecordSetValue(recordRef, kABPersonLastNameProperty, (__bridge <span class=\"built_in\">CFTypeRef</span>)(lastName), <span class=\"literal\">NULL</span>);<span class=\"comment\">//添加姓</span></div><div class=\"line\">    </div><div class=\"line\">    ABMutableMultiValueRef multiValueRef =ABMultiValueCreateMutable(kABStringPropertyType);<span class=\"comment\">//添加设置多值属性</span></div><div class=\"line\">    ABMultiValueAddValueAndLabel(multiValueRef, (__bridge <span class=\"built_in\">CFStringRef</span>)(workNumber), kABWorkLabel, <span class=\"literal\">NULL</span>);<span class=\"comment\">//添加工作电话</span></div><div class=\"line\">    ABRecordSetValue(recordRef, kABPersonPhoneProperty, multiValueRef, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//添加记录</span></div><div class=\"line\">    ABAddressBookAddRecord(<span class=\"keyword\">self</span>.addressBook, recordRef, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//保存通讯录，提交更改</span></div><div class=\"line\">    ABAddressBookSave(<span class=\"keyword\">self</span>.addressBook, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    <span class=\"comment\">//释放资源</span></div><div class=\"line\">    <span class=\"built_in\">CFRelease</span>(recordRef);</div><div class=\"line\">    <span class=\"built_in\">CFRelease</span>(multiValueRef);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  根据RecordID修改联系人信息</div><div class=\"line\"> *</div><div class=\"line\"> *  @param recordID   记录唯一ID</div><div class=\"line\"> *  @param firstName  姓</div><div class=\"line\"> *  @param lastName   名</div><div class=\"line\"> *  @param homeNumber 工作电话</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)modifyPersonWithRecordID:(ABRecordID)recordID firstName:(<span class=\"built_in\">NSString</span> *)firstName lastName:(<span class=\"built_in\">NSString</span> *)lastName workNumber:(<span class=\"built_in\">NSString</span> *)workNumber&#123;</div><div class=\"line\">    ABRecordRef recordRef=ABAddressBookGetPersonWithRecordID(<span class=\"keyword\">self</span>.addressBook,recordID);</div><div class=\"line\">    ABRecordSetValue(recordRef, kABPersonFirstNameProperty, (__bridge <span class=\"built_in\">CFTypeRef</span>)(firstName), <span class=\"literal\">NULL</span>);<span class=\"comment\">//添加名</span></div><div class=\"line\">    ABRecordSetValue(recordRef, kABPersonLastNameProperty, (__bridge <span class=\"built_in\">CFTypeRef</span>)(lastName), <span class=\"literal\">NULL</span>);<span class=\"comment\">//添加姓</span></div><div class=\"line\">    </div><div class=\"line\">    ABMutableMultiValueRef multiValueRef =ABMultiValueCreateMutable(kABStringPropertyType);</div><div class=\"line\">    ABMultiValueAddValueAndLabel(multiValueRef, (__bridge <span class=\"built_in\">CFStringRef</span>)(workNumber), kABWorkLabel, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    ABRecordSetValue(recordRef, kABPersonPhoneProperty, multiValueRef, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    <span class=\"comment\">//保存记录，提交更改</span></div><div class=\"line\">    ABAddressBookSave(<span class=\"keyword\">self</span>.addressBook, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    <span class=\"comment\">//释放资源</span></div><div class=\"line\">    <span class=\"built_in\">CFRelease</span>(multiValueRef);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">新增或修改控制器视图，用于显示一个联系人的信息或者新增一个联系人：</div><div class=\"line\">KCAddPersonViewController.h</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  KCAddPersonViewController.h</span></div><div class=\"line\"><span class=\"comment\">//  AddressBook</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  kABPersonFirstNameProperty</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIKit.h&gt;</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">KCContactDelegate</span>;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">KCAddPersonViewController</span> : <span class=\"title\">UIViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">int</span> recordID;<span class=\"comment\">//通讯录记录id，如果ID不为0则代表修改否则认为是新增</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span> *firstNameText;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span> *lastNameText;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span> *workPhoneText;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">id</span>&lt;KCContactDelegate&gt; delegate;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">KCAddPersonViewController.m</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  KCAddPersonViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  AddressBook</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  kABPersonFirstNameProperty</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"KCAddPersonViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"KCContactTableViewController.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">KCAddPersonViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UITextField</span> *firstName;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UITextField</span> *lastName;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UITextField</span> *workPhone;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">KCAddPersonViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    [<span class=\"keyword\">self</span> setupUI];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - UI事件</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)cancelClick:(<span class=\"built_in\">UIBarButtonItem</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.delegate cancelEdit];</div><div class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)doneClick:(<span class=\"built_in\">UIBarButtonItem</span> *)sender &#123;</div><div class=\"line\">    <span class=\"comment\">//调用代理方法</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.delegate editPersonWithFirstName:<span class=\"keyword\">self</span>.firstName.text lastName:<span class=\"keyword\">self</span>.lastName.text workNumber:<span class=\"keyword\">self</span>.workPhone.text];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)setupUI&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.recordID) &#123;<span class=\"comment\">//如果ID不为0则认为是修改，此时需要初始化界面</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.firstName.text=<span class=\"keyword\">self</span>.firstNameText;</div><div class=\"line\">        <span class=\"keyword\">self</span>.lastName.text=<span class=\"keyword\">self</span>.lastNameText;</div><div class=\"line\">        <span class=\"keyword\">self</span>.workPhone.text=<span class=\"keyword\">self</span>.workPhoneText;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>通讯录<br>AddressBook<br>iOS中带有一个Contacts应用程序来管理联系人，但是有些时候我们希望自己的应用能够访问或者修改这些信息，这个时候就要用到AddressBook.framework框架。iOS中的通讯录是存储在数据库中的，由于iOS的权限设计，开发人员是不允许直接访问通讯录数据库的，必须依靠AddressBook提供的标准API来实现通讯录操作。通过AddressBook.framework开发者可以从底层去操作AddressBook.framework的所有信息，但是需要注意的是这个框架是基于C语言编写的，无法使用ARC来管理内存，开发者需要自己管理内存。下面大致介绍一下通讯录操作中常用的类型：<br>ABAddressBookRef：代表通讯录对象，通过该对象开发人员不用过多的关注通讯录的存储方式，可以直接以透明的方式去访问、保存（在使用AddressBook.framework操作联系人时，所有的增加、删除、修改后都必须执行保存操作，类似于Core Data）等。<br>ABRecordRef：代表一个通用的记录对象，可以是一条联系人信息，也可以是一个群组，可以通过ABRecordGetRecordType()函数获得具体类型。如果作为联系人（事实上也经常使用它作为联系人），那么这个记录记录了一个完整的联系人信息（姓名、性别、电话、邮件等），每条记录都有一个唯一的ID标示这条记录（可以通过ABRecordGetRecordID()函数获得）。<br>ABPersonRef：代表联系人信息，很少直接使用，实际开发过程中通常会使用类型为“kABPersonType”的ABRecordRef来表示联系人（由此可见ABPersonRef其实是一种类型为“kABPersonType”的ABRecordRef）<br>ABGroupRef：代表群组，与ABPersonRef类似，很少直接使用ABGroupRef，而是使用类型为“kABGroupType”的ABRecordRef来表示群组，一个群组可以包含多个联系人，一个联系人也同样可以多个群组。<br>由于通讯录操作的关键是对ABRecordRef的操作，首先看一下常用的操作通讯录记录的方法：<br>ABPersonCreate():创建一个类型为“kABPersonType”的ABRecordRef。<br>ABRecordCopyValue():取得指定属性的值。<br>ABRecordCopyCompositeName():取得联系人（或群组）的复合信息（对于联系人则包括：姓、名、公司等信息，对于群组则返回组名称）。<br>ABRecordSetValue():设置ABRecordRef的属性值。注意在设置ABRecordRef的值时又分为单值属性和多值属性：单值属性设置只要通过ABRecordSetValue()方法指定属性名和值即可；多值属性则要先通过创建一个ABMutableMultiValueRef类型的变量，然后通过ABMultiValueAddValueAndLabel()方法依次添加属性值，最后通过ABRecordSetValue()方法将ABMutableMultiValueRef类型的变量设置为记录值。<br>ABRecordRemoveValue():删除指定的属性值。<br>注意：<br>由于联系人访问时（读取、设置、删除时）牵扯到大量联系人属性，可以到ABPerson.h中查询或者直接到帮助文档“Personal Information Properties”<br>通讯录的访问步骤一般如下：<br>调用ABAddressBookCreateWithOptions()方法创建通讯录对象ABAddressBookRef。<br>调用ABAddressBookRequestAccessWithCompletion()方法获得用户授权访问通讯录。<br>调用ABAddressBookCopyArrayOfAllPeople()、ABAddressBookCopyPeopleWithName()方法查询联系人信息。<br>读取联系人后如果要显示联系人信息则可以调用ABRecord相关方法读取相应的数据；如果要进行修改联系人信息，则可以使用对应的方法修改ABRecord信息，然后调用ABAddressBookSave()方法提交修改；如果要删除联系人，则可以调用ABAddressBookRemoveRecord()方法删除，然后调用ABAddressBookSave()提交修改操作。<br>也就是说如果要修改或者删除都需要首先查询对应的联系人，然后修改或删除后提交更改。如果用户要增加一个联系人则不用进行查询，直接调用ABPersonCreate()方法创建一个ABRecord然后设置具体的属性，调用ABAddressBookAddRecord方法添加即可。<br>下面就通过一个示例演示一下如何通过ABAddressBook.framework访问通讯录，这个例子中通过一个UITableViewController模拟一下通讯录的查看、删除、添加操作。<br>主控制器视图，用于显示联系人，修改删除联系人：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div></pre></td><td class=\"code\"><pre><div class=\"line\">KCContactViewController.h</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  KCTableViewController.h</span></div><div class=\"line\"><span class=\"comment\">//  AddressBook</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/04/05.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIKit.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  定义一个协议作为代理</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">KCContactDelegate</span></span></div><div class=\"line\"><span class=\"comment\">//新增或修改联系人</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)editPersonWithFirstName:(<span class=\"built_in\">NSString</span> *)firstName lastName:(<span class=\"built_in\">NSString</span> *)lastName workNumber:(<span class=\"built_in\">NSString</span> *)workNumber;</div><div class=\"line\"><span class=\"comment\">//取消修改或新增</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)cancelEdit;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">KCContactTableViewController</span> : <span class=\"title\">UITableViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">KCContactViewController.m</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  KCTableViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  AddressBook</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/04/05.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"KCContactTableViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AddressBook/AddressBook.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"KCAddPersonViewController.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">KCContactTableViewController</span> ()&lt;<span class=\"title\">KCContactDelegate</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>,<span class=\"keyword\">nonatomic</span>) ABAddressBookRef addressBook;<span class=\"comment\">//通讯录</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSMutableArray</span> *allPerson;<span class=\"comment\">//通讯录所有人员</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">int</span> isModify;<span class=\"comment\">//标识是修改还是新增，通过选择cell进行导航则认为是修改，否则视为新增</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UITableViewCell</span> *selectedCell;<span class=\"comment\">//当前选中的单元格</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">KCContactTableViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器视图</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">//请求访问通讯录并初始化数据</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> requestAddressBook];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//由于在整个视图控制器周期内addressBook都驻留在内存中，所有当控制器视图销毁时销毁该对象</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.addressBook!=<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">CFRelease</span>(<span class=\"keyword\">self</span>.addressBook);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - UI事件</span></div><div class=\"line\"><span class=\"comment\">//点击删除按钮</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)trashClick:(<span class=\"built_in\">UIBarButtonItem</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.tableView.editing=!<span class=\"keyword\">self</span>.tableView.editing;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - UITableView数据源方法</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSInteger</span>)numberOfSectionsInTableView:(<span class=\"built_in\">UITableView</span> *)tableView &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.allPerson.count;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">NSString</span> *identtityKey=<span class=\"string\">@\"myTableViewCellIdentityKey1\"</span>;</div><div class=\"line\">    <span class=\"built_in\">UITableViewCell</span> *cell=[tableView dequeueReusableCellWithIdentifier:identtityKey];</div><div class=\"line\">    <span class=\"keyword\">if</span>(cell==<span class=\"literal\">nil</span>)&#123;</div><div class=\"line\">        cell=[[<span class=\"built_in\">UITableViewCell</span> alloc]initWithStyle:<span class=\"built_in\">UITableViewCellStyleValue1</span> reuseIdentifier:identtityKey];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//取得一条人员记录</span></div><div class=\"line\">    ABRecordRef recordRef=(__bridge ABRecordRef)<span class=\"keyword\">self</span>.allPerson[indexPath.row];</div><div class=\"line\">    <span class=\"comment\">//取得记录中得信息</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *firstName=(__bridge <span class=\"built_in\">NSString</span> *) ABRecordCopyValue(recordRef, kABPersonFirstNameProperty);<span class=\"comment\">//注意这里进行了强转，不用自己释放资源</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *lastName=(__bridge <span class=\"built_in\">NSString</span> *)ABRecordCopyValue(recordRef, kABPersonLastNameProperty);</div><div class=\"line\">    </div><div class=\"line\">    ABMultiValueRef phoneNumbersRef= ABRecordCopyValue(recordRef, kABPersonPhoneProperty);<span class=\"comment\">//获取手机号，注意手机号是ABMultiValueRef类，有可能有多条</span></div><div class=\"line\"><span class=\"comment\">//    NSArray *phoneNumbers=(__bridge NSArray *)ABMultiValueCopyArrayOfAllValues(phoneNumbersRef);//取得CFArraryRef类型的手机记录并转化为NSArrary</span></div><div class=\"line\">    <span class=\"keyword\">long</span> count= ABMultiValueGetCount(phoneNumbersRef);</div><div class=\"line\"><span class=\"comment\">//    for(int i=0;i&lt;count;++i)&#123;</span></div><div class=\"line\"><span class=\"comment\">//        NSString *phoneLabel= (__bridge NSString *)(ABMultiValueCopyLabelAtIndex(phoneNumbersRef, i));</span></div><div class=\"line\"><span class=\"comment\">//        NSString *phoneNumber=(__bridge NSString *)(ABMultiValueCopyValueAtIndex(phoneNumbersRef, i));</span></div><div class=\"line\"><span class=\"comment\">//        NSLog(@\"%@:%@\",phoneLabel,phoneNumber);</span></div><div class=\"line\"><span class=\"comment\">//    &#125;</span></div><div class=\"line\">    </div><div class=\"line\">    cell.textLabel.text=[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%@ %@\"</span>,firstName,lastName];</div><div class=\"line\">    <span class=\"keyword\">if</span> (count&gt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">        cell.detailTextLabel.text=(__bridge <span class=\"built_in\">NSString</span> *)(ABMultiValueCopyValueAtIndex(phoneNumbersRef, <span class=\"number\">0</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ABPersonHasImageData(recordRef))&#123;<span class=\"comment\">//如果有照片数据</span></div><div class=\"line\">        <span class=\"built_in\">NSData</span> *imageData= (__bridge <span class=\"built_in\">NSData</span> *)(ABPersonCopyImageData(recordRef));</div><div class=\"line\">        cell.imageView.image=[<span class=\"built_in\">UIImage</span> imageWithData:imageData];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        cell.imageView.image=[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"avatar\"</span>];<span class=\"comment\">//没有图片使用默认头像</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//使用cell的tag存储记录id</span></div><div class=\"line\">    cell.tag=ABRecordGetRecordID(recordRef);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> cell;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView commitEditingStyle:(<span class=\"built_in\">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (editingStyle == <span class=\"built_in\">UITableViewCellEditingStyleDelete</span>) &#123;</div><div class=\"line\">        ABRecordRef recordRef=(__bridge ABRecordRef )<span class=\"keyword\">self</span>.allPerson[indexPath.row];</div><div class=\"line\">        [<span class=\"keyword\">self</span> removePersonWithRecord:recordRef];<span class=\"comment\">//从通讯录删除</span></div><div class=\"line\">        [<span class=\"keyword\">self</span>.allPerson removeObjectAtIndex:indexPath.row];<span class=\"comment\">//从数组移除</span></div><div class=\"line\">        [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:<span class=\"built_in\">UITableViewRowAnimationFade</span>];<span class=\"comment\">//从列表删除</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (editingStyle == <span class=\"built_in\">UITableViewCellEditingStyleInsert</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view</span></div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - UITableView代理方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.isModify=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">self</span>.selectedCell=[tableView cellForRowAtIndexPath:indexPath];</div><div class=\"line\">    [<span class=\"keyword\">self</span> performSegueWithIdentifier:<span class=\"string\">@\"AddPerson\"</span> sender:<span class=\"keyword\">self</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - Navigation</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)prepareForSegue:(<span class=\"built_in\">UIStoryboardSegue</span> *)segue sender:(<span class=\"keyword\">id</span>)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>([segue.identifier isEqualToString:<span class=\"string\">@\"AddPerson\"</span>])&#123;</div><div class=\"line\">        <span class=\"built_in\">UINavigationController</span> *navigationController=(<span class=\"built_in\">UINavigationController</span> *)segue.destinationViewController;</div><div class=\"line\">        <span class=\"comment\">//根据导航控制器取得添加/修改人员的控制器视图</span></div><div class=\"line\">        KCAddPersonViewController *addPersonController=(KCAddPersonViewController *)navigationController.topViewController;</div><div class=\"line\">        addPersonController.delegate=<span class=\"keyword\">self</span>;</div><div class=\"line\">        <span class=\"comment\">//如果是通过选择cell进行的导航操作说明是修改，否则为添加</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.isModify) &#123;</div><div class=\"line\">            <span class=\"built_in\">UITableViewCell</span> *cell=<span class=\"keyword\">self</span>.selectedCell;</div><div class=\"line\">            addPersonController.recordID=(ABRecordID)cell.tag;<span class=\"comment\">//设置</span></div><div class=\"line\">            <span class=\"built_in\">NSArray</span> *array=[cell.textLabel.text componentsSeparatedByString:<span class=\"string\">@\" \"</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span> (array.count&gt;<span class=\"number\">0</span>) &#123;</div><div class=\"line\">                addPersonController.firstNameText=[array firstObject];</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (array.count&gt;<span class=\"number\">1</span>) &#123;</div><div class=\"line\">                addPersonController.lastNameText=[array lastObject];</div><div class=\"line\">            &#125;</div><div class=\"line\">            addPersonController.workPhoneText=cell.detailTextLabel.text;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - KCContact代理方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)editPersonWithFirstName:(<span class=\"built_in\">NSString</span> *)firstName lastName:(<span class=\"built_in\">NSString</span> *)lastName workNumber:(<span class=\"built_in\">NSString</span> *)workNumber&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.isModify) &#123;</div><div class=\"line\">        <span class=\"built_in\">UITableViewCell</span> *cell=<span class=\"keyword\">self</span>.selectedCell;</div><div class=\"line\">        <span class=\"built_in\">NSIndexPath</span> *indexPath= [<span class=\"keyword\">self</span>.tableView indexPathForCell:cell];</div><div class=\"line\">        [<span class=\"keyword\">self</span> modifyPersonWithRecordID:(ABRecordID)cell.tag firstName:firstName lastName:lastName workNumber:workNumber];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:<span class=\"built_in\">UITableViewRowAnimationRight</span>];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> addPersonWithFirstName:firstName lastName:lastName workNumber:workNumber];<span class=\"comment\">//通讯簿中添加信息</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> initAllPerson];<span class=\"comment\">//重新初始化数据</span></div><div class=\"line\">        [<span class=\"keyword\">self</span>.tableView reloadData];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">self</span>.isModify=<span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)cancelEdit&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.isModify=<span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  请求访问通讯录</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)requestAddressBook&#123;</div><div class=\"line\">    <span class=\"comment\">//创建通讯录对象</span></div><div class=\"line\">    <span class=\"keyword\">self</span>.addressBook=ABAddressBookCreateWithOptions(<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//请求访问用户通讯录,注意无论成功与否block都会调用</span></div><div class=\"line\">    ABAddressBookRequestAccessWithCompletion(<span class=\"keyword\">self</span>.addressBook, ^(<span class=\"keyword\">bool</span> granted, <span class=\"built_in\">CFErrorRef</span> error) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!granted) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"未获得通讯录访问权限！\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        [<span class=\"keyword\">self</span> initAllPerson];</div><div class=\"line\">        </div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  取得所有通讯录记录</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)initAllPerson&#123;</div><div class=\"line\">    <span class=\"comment\">//取得通讯录访问授权</span></div><div class=\"line\">    ABAuthorizationStatus authorization= ABAddressBookGetAuthorizationStatus();</div><div class=\"line\">    <span class=\"comment\">//如果未获得授权</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (authorization!=kABAuthorizationStatusAuthorized) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"尚未获得通讯录访问授权！\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//取得通讯录中所有人员记录</span></div><div class=\"line\">    <span class=\"built_in\">CFArrayRef</span> allPeople= ABAddressBookCopyArrayOfAllPeople(<span class=\"keyword\">self</span>.addressBook);</div><div class=\"line\">    <span class=\"keyword\">self</span>.allPerson=(__bridge <span class=\"built_in\">NSMutableArray</span> *)allPeople;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//释放资源</span></div><div class=\"line\">    <span class=\"built_in\">CFRelease</span>(allPeople);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  删除指定的记录</div><div class=\"line\"> *</div><div class=\"line\"> *  @param recordRef 要删除的记录</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)removePersonWithRecord:(ABRecordRef)recordRef&#123;</div><div class=\"line\">    ABAddressBookRemoveRecord(<span class=\"keyword\">self</span>.addressBook, recordRef, <span class=\"literal\">NULL</span>);<span class=\"comment\">//删除</span></div><div class=\"line\">    ABAddressBookSave(<span class=\"keyword\">self</span>.addressBook, <span class=\"literal\">NULL</span>);<span class=\"comment\">//删除之后提交更改</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  根据姓名删除记录</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)removePersonWithName:(<span class=\"built_in\">NSString</span> *)personName&#123;</div><div class=\"line\">    <span class=\"built_in\">CFStringRef</span> personNameRef=(__bridge <span class=\"built_in\">CFStringRef</span>)(personName);</div><div class=\"line\">    <span class=\"built_in\">CFArrayRef</span> recordsRef= ABAddressBookCopyPeopleWithName(<span class=\"keyword\">self</span>.addressBook, personNameRef);<span class=\"comment\">//根据人员姓名查找</span></div><div class=\"line\">    <span class=\"built_in\">CFIndex</span> count= <span class=\"built_in\">CFArrayGetCount</span>(recordsRef);<span class=\"comment\">//取得记录数</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">CFIndex</span> i=<span class=\"number\">0</span>; i&lt;count; ++i) &#123;</div><div class=\"line\">        ABRecordRef recordRef=<span class=\"built_in\">CFArrayGetValueAtIndex</span>(recordsRef, i);<span class=\"comment\">//取得指定的记录</span></div><div class=\"line\">        ABAddressBookRemoveRecord(<span class=\"keyword\">self</span>.addressBook, recordRef, <span class=\"literal\">NULL</span>);<span class=\"comment\">//删除</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    ABAddressBookSave(<span class=\"keyword\">self</span>.addressBook, <span class=\"literal\">NULL</span>);<span class=\"comment\">//删除之后提交更改</span></div><div class=\"line\">    <span class=\"built_in\">CFRelease</span>(recordsRef);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  添加一条记录</div><div class=\"line\"> *</div><div class=\"line\"> *  @param firstName  名</div><div class=\"line\"> *  @param lastName   姓</div><div class=\"line\"> *  @param iPhoneName iPhone手机号</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)addPersonWithFirstName:(<span class=\"built_in\">NSString</span> *)firstName lastName:(<span class=\"built_in\">NSString</span> *)lastName workNumber:(<span class=\"built_in\">NSString</span> *)workNumber&#123;</div><div class=\"line\">    <span class=\"comment\">//创建一条记录</span></div><div class=\"line\">    ABRecordRef recordRef= ABPersonCreate();</div><div class=\"line\">    ABRecordSetValue(recordRef, kABPersonFirstNameProperty, (__bridge <span class=\"built_in\">CFTypeRef</span>)(firstName), <span class=\"literal\">NULL</span>);<span class=\"comment\">//添加名</span></div><div class=\"line\">    ABRecordSetValue(recordRef, kABPersonLastNameProperty, (__bridge <span class=\"built_in\">CFTypeRef</span>)(lastName), <span class=\"literal\">NULL</span>);<span class=\"comment\">//添加姓</span></div><div class=\"line\">    </div><div class=\"line\">    ABMutableMultiValueRef multiValueRef =ABMultiValueCreateMutable(kABStringPropertyType);<span class=\"comment\">//添加设置多值属性</span></div><div class=\"line\">    ABMultiValueAddValueAndLabel(multiValueRef, (__bridge <span class=\"built_in\">CFStringRef</span>)(workNumber), kABWorkLabel, <span class=\"literal\">NULL</span>);<span class=\"comment\">//添加工作电话</span></div><div class=\"line\">    ABRecordSetValue(recordRef, kABPersonPhoneProperty, multiValueRef, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//添加记录</span></div><div class=\"line\">    ABAddressBookAddRecord(<span class=\"keyword\">self</span>.addressBook, recordRef, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//保存通讯录，提交更改</span></div><div class=\"line\">    ABAddressBookSave(<span class=\"keyword\">self</span>.addressBook, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    <span class=\"comment\">//释放资源</span></div><div class=\"line\">    <span class=\"built_in\">CFRelease</span>(recordRef);</div><div class=\"line\">    <span class=\"built_in\">CFRelease</span>(multiValueRef);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  根据RecordID修改联系人信息</div><div class=\"line\"> *</div><div class=\"line\"> *  @param recordID   记录唯一ID</div><div class=\"line\"> *  @param firstName  姓</div><div class=\"line\"> *  @param lastName   名</div><div class=\"line\"> *  @param homeNumber 工作电话</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)modifyPersonWithRecordID:(ABRecordID)recordID firstName:(<span class=\"built_in\">NSString</span> *)firstName lastName:(<span class=\"built_in\">NSString</span> *)lastName workNumber:(<span class=\"built_in\">NSString</span> *)workNumber&#123;</div><div class=\"line\">    ABRecordRef recordRef=ABAddressBookGetPersonWithRecordID(<span class=\"keyword\">self</span>.addressBook,recordID);</div><div class=\"line\">    ABRecordSetValue(recordRef, kABPersonFirstNameProperty, (__bridge <span class=\"built_in\">CFTypeRef</span>)(firstName), <span class=\"literal\">NULL</span>);<span class=\"comment\">//添加名</span></div><div class=\"line\">    ABRecordSetValue(recordRef, kABPersonLastNameProperty, (__bridge <span class=\"built_in\">CFTypeRef</span>)(lastName), <span class=\"literal\">NULL</span>);<span class=\"comment\">//添加姓</span></div><div class=\"line\">    </div><div class=\"line\">    ABMutableMultiValueRef multiValueRef =ABMultiValueCreateMutable(kABStringPropertyType);</div><div class=\"line\">    ABMultiValueAddValueAndLabel(multiValueRef, (__bridge <span class=\"built_in\">CFStringRef</span>)(workNumber), kABWorkLabel, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    ABRecordSetValue(recordRef, kABPersonPhoneProperty, multiValueRef, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    <span class=\"comment\">//保存记录，提交更改</span></div><div class=\"line\">    ABAddressBookSave(<span class=\"keyword\">self</span>.addressBook, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    <span class=\"comment\">//释放资源</span></div><div class=\"line\">    <span class=\"built_in\">CFRelease</span>(multiValueRef);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">新增或修改控制器视图，用于显示一个联系人的信息或者新增一个联系人：</div><div class=\"line\">KCAddPersonViewController.h</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  KCAddPersonViewController.h</span></div><div class=\"line\"><span class=\"comment\">//  AddressBook</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  kABPersonFirstNameProperty</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIKit.h&gt;</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">KCContactDelegate</span>;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">KCAddPersonViewController</span> : <span class=\"title\">UIViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">int</span> recordID;<span class=\"comment\">//通讯录记录id，如果ID不为0则代表修改否则认为是新增</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span> *firstNameText;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span> *lastNameText;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span> *workPhoneText;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>,<span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">id</span>&lt;KCContactDelegate&gt; delegate;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">KCAddPersonViewController.m</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  KCAddPersonViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  AddressBook</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  kABPersonFirstNameProperty</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"KCAddPersonViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"KCContactTableViewController.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">KCAddPersonViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UITextField</span> *firstName;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UITextField</span> *lastName;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UITextField</span> *workPhone;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">KCAddPersonViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    [<span class=\"keyword\">self</span> setupUI];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - UI事件</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)cancelClick:(<span class=\"built_in\">UIBarButtonItem</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.delegate cancelEdit];</div><div class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)doneClick:(<span class=\"built_in\">UIBarButtonItem</span> *)sender &#123;</div><div class=\"line\">    <span class=\"comment\">//调用代理方法</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.delegate editPersonWithFirstName:<span class=\"keyword\">self</span>.firstName.text lastName:<span class=\"keyword\">self</span>.lastName.text workNumber:<span class=\"keyword\">self</span>.workPhone.text];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)setupUI&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.recordID) &#123;<span class=\"comment\">//如果ID不为0则认为是修改，此时需要初始化界面</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.firstName.text=<span class=\"keyword\">self</span>.firstNameText;</div><div class=\"line\">        <span class=\"keyword\">self</span>.lastName.text=<span class=\"keyword\">self</span>.lastNameText;</div><div class=\"line\">        <span class=\"keyword\">self</span>.workPhone.text=<span class=\"keyword\">self</span>.workPhoneText;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>"},{"title":"长按保存图片到本地","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n  //创建UILongPressGestureRecognizer     UILongPressGestureRecognizer*longPG = [[UILongPressGestureRecognizeralloc]initWithTarget:selfaction:@selector(longAction:)\n ];    [selfaddGestureRecognizer:longPG];\n   \n}\n\n//长按触发的方法\n-(void)longAction:(UILongPressGestureRecognizer*)longPG\n{\n   \n   if(longPG.state==UIGestureRecognizerStateBegan)\n    {\n   \n       //创建UIAlertView对象\n       UIAlertView*alert = [[UIAlertViewalloc]initWithTitle:@\"提示\"message:@\"是否保存图片到本地\"delegate:selfcancelButtonTitle:@\"取消\"otherButtonTitles:@\"确定\",nil];\n       //调用show方法\n        [alertshow];\n       //释放\n        [alertrelease];\n       \n       \n    }\n}\n- (void)alertView:(UIAlertView*)alertView clickedButtonAtIndex:(NSInteger)buttonIndex\n{\n   if(buttonIndex ==1) {\n       \n       //UIImage写入本地的方法\n       UIImageWriteToSavedPhotosAlbum(self.photo.image,nil,nil,nil);\n       \n       //创建UIAlertView对象\n       UIAlertView*alert = [[UIAlertViewalloc]initWithTitle:@\"提示\"message:@\"图片已保存成功\"delegate:selfcancelButtonTitle:nilotherButtonTitles:nil];\n       //调用show方法\n        [alertshow];\n       //释放\n        [alertrelease];\n       \n       dispatch_after(dispatch_time(DISPATCH_TIME_NOW,\n (int64_t)(1.0f*NSEC_PER_SEC)),dispatch_get_main_queue(), ^{\n           \n            [alertdismissWithClickedButtonIndex:0animated:YES];\n        });\n    }\n\n   }","source":"_posts/oc/长按保存图片到本地.md","raw":"---\ntitle: 长按保存图片到本地\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n  //创建UILongPressGestureRecognizer     UILongPressGestureRecognizer*longPG = [[UILongPressGestureRecognizeralloc]initWithTarget:selfaction:@selector(longAction:)\n ];    [selfaddGestureRecognizer:longPG];\n   \n}\n\n//长按触发的方法\n-(void)longAction:(UILongPressGestureRecognizer*)longPG\n{\n   \n   if(longPG.state==UIGestureRecognizerStateBegan)\n    {\n   \n       //创建UIAlertView对象\n       UIAlertView*alert = [[UIAlertViewalloc]initWithTitle:@\"提示\"message:@\"是否保存图片到本地\"delegate:selfcancelButtonTitle:@\"取消\"otherButtonTitles:@\"确定\",nil];\n       //调用show方法\n        [alertshow];\n       //释放\n        [alertrelease];\n       \n       \n    }\n}\n- (void)alertView:(UIAlertView*)alertView clickedButtonAtIndex:(NSInteger)buttonIndex\n{\n   if(buttonIndex ==1) {\n       \n       //UIImage写入本地的方法\n       UIImageWriteToSavedPhotosAlbum(self.photo.image,nil,nil,nil);\n       \n       //创建UIAlertView对象\n       UIAlertView*alert = [[UIAlertViewalloc]initWithTitle:@\"提示\"message:@\"图片已保存成功\"delegate:selfcancelButtonTitle:nilotherButtonTitles:nil];\n       //调用show方法\n        [alertshow];\n       //释放\n        [alertrelease];\n       \n       dispatch_after(dispatch_time(DISPATCH_TIME_NOW,\n (int64_t)(1.0f*NSEC_PER_SEC)),dispatch_get_main_queue(), ^{\n           \n            [alertdismissWithClickedButtonIndex:0animated:YES];\n        });\n    }\n\n   }","slug":"oc/长按保存图片到本地","published":1,"updated":"2016-10-08T09:00:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99f004z21xwq2e4qubg","content":"<a id=\"more\"></a>\n<p>```objc<br>  //创建UILongPressGestureRecognizer     UILongPressGestureRecognizer*longPG = [[UILongPressGestureRecognizeralloc]initWithTarget:selfaction:@selector(longAction:)<br> ];    [selfaddGestureRecognizer:longPG];</p>\n<p>}</p>\n<p>//长按触发的方法<br>-(void)longAction:(UILongPressGestureRecognizer*)longPG<br>{</p>\n<p>   if(longPG.state==UIGestureRecognizerStateBegan)<br>    {</p>\n<pre><code>   //创建UIAlertView对象\n   UIAlertView*alert = [[UIAlertViewalloc]initWithTitle:@&quot;提示&quot;message:@&quot;是否保存图片到本地&quot;delegate:selfcancelButtonTitle:@&quot;取消&quot;otherButtonTitles:@&quot;确定&quot;,nil];\n   //调用show方法\n    [alertshow];\n   //释放\n    [alertrelease];\n\n\n}\n</code></pre><p>}</p>\n<ul>\n<li><p>(void)alertView:(UIAlertView*)alertView clickedButtonAtIndex:(NSInteger)buttonIndex<br>{<br> if(buttonIndex ==1) {</p>\n<pre><code>//UIImage写入本地的方法\nUIImageWriteToSavedPhotosAlbum(self.photo.image,nil,nil,nil);\n\n//创建UIAlertView对象\nUIAlertView*alert = [[UIAlertViewalloc]initWithTitle:@&quot;提示&quot;message:@&quot;图片已保存成功&quot;delegate:selfcancelButtonTitle:nilotherButtonTitles:nil];\n//调用show方法\n [alertshow];\n//释放\n [alertrelease];\n\ndispatch_after(dispatch_time(DISPATCH_TIME_NOW,\n</code></pre><p>(int64_t)(1.0f*NSEC_PER_SEC)),dispatch_get_main_queue(), ^{</p>\n<pre><code>    [alertdismissWithClickedButtonIndex:0animated:YES];\n});\n</code></pre><p>  }</p>\n<p> }</p>\n</li>\n</ul>\n","excerpt":"","more":"<p>```objc<br>  //创建UILongPressGestureRecognizer     UILongPressGestureRecognizer*longPG = [[UILongPressGestureRecognizeralloc]initWithTarget:selfaction:@selector(longAction:)<br> ];    [selfaddGestureRecognizer:longPG];</p>\n<p>}</p>\n<p>//长按触发的方法<br>-(void)longAction:(UILongPressGestureRecognizer*)longPG<br>{</p>\n<p>   if(longPG.state==UIGestureRecognizerStateBegan)<br>    {</p>\n<pre><code>   //创建UIAlertView对象\n   UIAlertView*alert = [[UIAlertViewalloc]initWithTitle:@&quot;提示&quot;message:@&quot;是否保存图片到本地&quot;delegate:selfcancelButtonTitle:@&quot;取消&quot;otherButtonTitles:@&quot;确定&quot;,nil];\n   //调用show方法\n    [alertshow];\n   //释放\n    [alertrelease];\n\n\n}\n</code></pre><p>}</p>\n<ul>\n<li><p>(void)alertView:(UIAlertView*)alertView clickedButtonAtIndex:(NSInteger)buttonIndex<br>{<br> if(buttonIndex ==1) {</p>\n<pre><code>//UIImage写入本地的方法\nUIImageWriteToSavedPhotosAlbum(self.photo.image,nil,nil,nil);\n\n//创建UIAlertView对象\nUIAlertView*alert = [[UIAlertViewalloc]initWithTitle:@&quot;提示&quot;message:@&quot;图片已保存成功&quot;delegate:selfcancelButtonTitle:nilotherButtonTitles:nil];\n//调用show方法\n [alertshow];\n//释放\n [alertrelease];\n\ndispatch_after(dispatch_time(DISPATCH_TIME_NOW,\n</code></pre><p>(int64_t)(1.0f*NSEC_PER_SEC)),dispatch_get_main_queue(), ^{</p>\n<pre><code>    [alertdismissWithClickedButtonIndex:0animated:YES];\n});\n</code></pre><p>  }</p>\n<p> }</p>\n</li>\n</ul>"},{"title":"音乐播放器时间","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n```objc\n NSNumber*n = [self.dataDicvalueForKey:@\"duration\"];\n\n   self.progressSilder.maximumValue= n.floatValue;\n   self.progressSilder.value= progress;\n \n\n   //当前时长进度progress\n   NSIntegerproMin = (NSInteger)progress /60;//当前秒\n   NSIntegerproSec = (NSInteger)progress %60;//当前分钟\n   \n   //duration总时长\n   NSIntegerdurMin = (NSInteger)n.floatValue/60;//总秒\n   NSIntegerdurSec = (NSInteger)n.floatValue%60;//总分钟\n   \n   self.curentTimeLabel.text= [NSStringstringWithFormat:@\"%02ld:%02ld\",\n proMin, proSec];   self.totalTimeLabel.text = [NSStringstringWithFormat:@\"%02ld:%02ld\",durMin,durSec];","source":"_posts/oc/音乐播放器时间.md","raw":"---\ntitle: 音乐播放器时间\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n```objc\n NSNumber*n = [self.dataDicvalueForKey:@\"duration\"];\n\n   self.progressSilder.maximumValue= n.floatValue;\n   self.progressSilder.value= progress;\n \n\n   //当前时长进度progress\n   NSIntegerproMin = (NSInteger)progress /60;//当前秒\n   NSIntegerproSec = (NSInteger)progress %60;//当前分钟\n   \n   //duration总时长\n   NSIntegerdurMin = (NSInteger)n.floatValue/60;//总秒\n   NSIntegerdurSec = (NSInteger)n.floatValue%60;//总分钟\n   \n   self.curentTimeLabel.text= [NSStringstringWithFormat:@\"%02ld:%02ld\",\n proMin, proSec];   self.totalTimeLabel.text = [NSStringstringWithFormat:@\"%02ld:%02ld\",durMin,durSec];","slug":"oc/音乐播放器时间","published":1,"updated":"2016-10-08T08:59:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99h005121xwu2sn4kl2","content":"<a id=\"more\"></a>\n<p>```objc<br> NSNumber*n = [self.dataDicvalueForKey:@”duration”];</p>\n<p>   self.progressSilder.maximumValue= n.floatValue;<br>   self.progressSilder.value= progress;</p>\n<p>   //当前时长进度progress<br>   NSIntegerproMin = (NSInteger)progress /60;//当前秒<br>   NSIntegerproSec = (NSInteger)progress %60;//当前分钟</p>\n<p>   //duration总时长<br>   NSIntegerdurMin = (NSInteger)n.floatValue/60;//总秒<br>   NSIntegerdurSec = (NSInteger)n.floatValue%60;//总分钟</p>\n<p>   self.curentTimeLabel.text= [NSStringstringWithFormat:@”%02ld:%02ld”,<br> proMin, proSec];   self.totalTimeLabel.text = [NSStringstringWithFormat:@”%02ld:%02ld”,durMin,durSec];</p>\n","excerpt":"","more":"<p>```objc<br> NSNumber*n = [self.dataDicvalueForKey:@”duration”];</p>\n<p>   self.progressSilder.maximumValue= n.floatValue;<br>   self.progressSilder.value= progress;</p>\n<p>   //当前时长进度progress<br>   NSIntegerproMin = (NSInteger)progress /60;//当前秒<br>   NSIntegerproSec = (NSInteger)progress %60;//当前分钟</p>\n<p>   //duration总时长<br>   NSIntegerdurMin = (NSInteger)n.floatValue/60;//总秒<br>   NSIntegerdurSec = (NSInteger)n.floatValue%60;//总分钟</p>\n<p>   self.curentTimeLabel.text= [NSStringstringWithFormat:@”%02ld:%02ld”,<br> proMin, proSec];   self.totalTimeLabel.text = [NSStringstringWithFormat:@”%02ld:%02ld”,durMin,durSec];</p>"},{"title":"mac下的php环境配置","date":"2016-10-10T06:08:56.000Z","_content":"mac下配置php环境的方法注意事项\n<!-- more -->\n\n服务器 Apache\n----\n\nMac OS自带Apache，只需要启动Apache就行。\n打开终端，输入命令：sudo apachectl start\n打开浏览器，在地址栏中输入localhost或者127.0.0.1，出现It Works字符串，就说明Apache已经成功启动\n<img src=\"/images/2.png\" width=\"500\" height=\"200\" /> \n\nApache的常用命令\n启动Apache服务\nsudo apachectl start\n重启Apache服务\nsudo apachectl restart\n停止Apache服务\nsudo apachectl stop\n查看Apache版本\nhttpd -v\n![](/images/1.png)  \n\nApache的网站服务器根目录在/Library/WebServer/Documents路径下\n\n\n配置PHP\n----\n\nMac OS 同样自带PHP，只需要在Apache的配置文件中添加Apache对PHP的支持就好了\n\n打开apache的配置文件\n/etc/apache2/httpd.conf\n\n前往指定文件夹的快捷键\ncommand + shift + g\n\n去掉此行的注释\nLoadModule php5_module libexec/apache2/libphp5.so\n然后保存\n![](/images/3.png)  \n重启Apache服务\nsudo apachectl restart\n\n创建test.php 放入Apache的网站服务器根目录/Library/WebServer/Documents路径下\n<img src=\"/images/4.png\" width=\"300\" height=\"300\" /> \n\n<img src=\"/images/5.png\" width=\"842\" height=\"230\" /> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/php/mac下的php环境配置.md","raw":"---\ntitle: mac下的php环境配置\ndate: 2016-10-10 14:08:56\ncategories: php\n---\nmac下配置php环境的方法注意事项\n<!-- more -->\n\n服务器 Apache\n----\n\nMac OS自带Apache，只需要启动Apache就行。\n打开终端，输入命令：sudo apachectl start\n打开浏览器，在地址栏中输入localhost或者127.0.0.1，出现It Works字符串，就说明Apache已经成功启动\n<img src=\"/images/2.png\" width=\"500\" height=\"200\" /> \n\nApache的常用命令\n启动Apache服务\nsudo apachectl start\n重启Apache服务\nsudo apachectl restart\n停止Apache服务\nsudo apachectl stop\n查看Apache版本\nhttpd -v\n![](/images/1.png)  \n\nApache的网站服务器根目录在/Library/WebServer/Documents路径下\n\n\n配置PHP\n----\n\nMac OS 同样自带PHP，只需要在Apache的配置文件中添加Apache对PHP的支持就好了\n\n打开apache的配置文件\n/etc/apache2/httpd.conf\n\n前往指定文件夹的快捷键\ncommand + shift + g\n\n去掉此行的注释\nLoadModule php5_module libexec/apache2/libphp5.so\n然后保存\n![](/images/3.png)  \n重启Apache服务\nsudo apachectl restart\n\n创建test.php 放入Apache的网站服务器根目录/Library/WebServer/Documents路径下\n<img src=\"/images/4.png\" width=\"300\" height=\"300\" /> \n\n<img src=\"/images/5.png\" width=\"842\" height=\"230\" /> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"php/mac下的php环境配置","published":1,"updated":"2016-10-10T08:47:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99i005321xwjj0b4qk2","content":"<p>mac下配置php环境的方法注意事项<br><a id=\"more\"></a></p>\n<h2 id=\"服务器-Apache\"><a href=\"#服务器-Apache\" class=\"headerlink\" title=\"服务器 Apache\"></a>服务器 Apache</h2><p>Mac OS自带Apache，只需要启动Apache就行。<br>打开终端，输入命令：sudo apachectl start<br>打开浏览器，在地址栏中输入localhost或者127.0.0.1，出现It Works字符串，就说明Apache已经成功启动<br><img src=\"/images/2.png\" width=\"500\" height=\"200\"> </p>\n<p>Apache的常用命令<br>启动Apache服务<br>sudo apachectl start<br>重启Apache服务<br>sudo apachectl restart<br>停止Apache服务<br>sudo apachectl stop<br>查看Apache版本<br>httpd -v<br><img src=\"/images/1.png\" alt=\"\">  </p>\n<p>Apache的网站服务器根目录在/Library/WebServer/Documents路径下</p>\n<h2 id=\"配置PHP\"><a href=\"#配置PHP\" class=\"headerlink\" title=\"配置PHP\"></a>配置PHP</h2><p>Mac OS 同样自带PHP，只需要在Apache的配置文件中添加Apache对PHP的支持就好了</p>\n<p>打开apache的配置文件<br>/etc/apache2/httpd.conf</p>\n<p>前往指定文件夹的快捷键<br>command + shift + g</p>\n<p>去掉此行的注释<br>LoadModule php5_module libexec/apache2/libphp5.so<br>然后保存<br><img src=\"/images/3.png\" alt=\"\"><br>重启Apache服务<br>sudo apachectl restart</p>\n<p>创建test.php 放入Apache的网站服务器根目录/Library/WebServer/Documents路径下<br><img src=\"/images/4.png\" width=\"300\" height=\"300\"> </p>\n<p><img src=\"/images/5.png\" width=\"842\" height=\"230\"> </p>\n","excerpt":"<p>mac下配置php环境的方法注意事项<br>","more":"</p>\n<h2 id=\"服务器-Apache\"><a href=\"#服务器-Apache\" class=\"headerlink\" title=\"服务器 Apache\"></a>服务器 Apache</h2><p>Mac OS自带Apache，只需要启动Apache就行。<br>打开终端，输入命令：sudo apachectl start<br>打开浏览器，在地址栏中输入localhost或者127.0.0.1，出现It Works字符串，就说明Apache已经成功启动<br><img src=\"/images/2.png\" width=\"500\" height=\"200\" /> </p>\n<p>Apache的常用命令<br>启动Apache服务<br>sudo apachectl start<br>重启Apache服务<br>sudo apachectl restart<br>停止Apache服务<br>sudo apachectl stop<br>查看Apache版本<br>httpd -v<br><img src=\"/images/1.png\" alt=\"\">  </p>\n<p>Apache的网站服务器根目录在/Library/WebServer/Documents路径下</p>\n<h2 id=\"配置PHP\"><a href=\"#配置PHP\" class=\"headerlink\" title=\"配置PHP\"></a>配置PHP</h2><p>Mac OS 同样自带PHP，只需要在Apache的配置文件中添加Apache对PHP的支持就好了</p>\n<p>打开apache的配置文件<br>/etc/apache2/httpd.conf</p>\n<p>前往指定文件夹的快捷键<br>command + shift + g</p>\n<p>去掉此行的注释<br>LoadModule php5_module libexec/apache2/libphp5.so<br>然后保存<br><img src=\"/images/3.png\" alt=\"\"><br>重启Apache服务<br>sudo apachectl restart</p>\n<p>创建test.php 放入Apache的网站服务器根目录/Library/WebServer/Documents路径下<br><img src=\"/images/4.png\" width=\"300\" height=\"300\" /> </p>\n<p><img src=\"/images/5.png\" width=\"842\" height=\"230\" /> </p>"},{"title":"php函数","date":"2016-10-14T03:44:24.000Z","_content":"php函数\n<!-- more -->\nPHP内置了超过1000个函数，因此函数使得PHP成为一门非常强大的语言。大多数时候我们j使用系统的内置函数就可以满足需求，但是自定义函数通过将一组代码封装起来，使代码进行复用，程序结构与逻辑更加清晰。\n\n<h2>自定义函数</h2>\nPHP函数的定义方式：\n+ 1.使用关键字“function”开始\n+ 2.函数名可以是字母或下划线开头：function name()\n+ 3.在大括号中编写函数体：\n\n```php\n<?php\nfunction say()\n{\n    echo 'hello world';\n}\n//在这里调用函数\nsay();\n?>\n\n<?php\nfunction sum($a, $b) {\n    echo $a + $b;\n}\n//在这里调用函数计算1+2的值\nsum(1,2);\n?>\n\n<?php\nfunction sum($a, $b) {\n    return $a+$b;\n}\n//在这里调用函数取得返回值\n$s = sum(1,2);\nprint_r($s);\n?>\n```\n\n<h3>可变函数</h3>\n所谓可变函数，即通过变量的值来调用函数，因为变量的值是可变的，所以可以通过改变一个变量的值来实现调用不同的函数。经常会用在回调函数、函数列表，或者根据动态参数来调用不同的函数。可变函数的调用方法为变量名加括号。\n\n```php\n<?php\nfunction func() {\n    echo 'my function called.';\n}\n$name = 'func';\n//调用可变函数\n\n$name();\n?>\n```\n\n<h2>内置函数</h2>\n内置函数指的是PHP默认支持的函数，PHP内置了很多标准的常用的处理函数，包括字符串处理、数组函数、文件处理、session与cookie处理等。\n另外一些函数是通过其他扩展来支持的，比如mysql数据库处理函数，GD图像处理函数，邮件处理函数等，PHP默认加载了一些常用的扩展库，我们可以安装或者加载其他扩展库来增加PHP的处理函数。\n\n```php\n<?php\n$str = '苹果很好吃。';\n//请将变量$str中的苹果替换成香蕉\n$str = str_replace('苹果','香蕉',$str);\n?>\n```\n\n<h2>判断函数是否存在</h2>\n为了确保程序调用的函数是存在的，先使用function_exists判断一下函数是否存在。同样的method_exists可以用来检测类的方法是否存在。\n\n```php\n<?php\nfunction func() {\n    echo 'exists';\n}\n$name = 'func';\nif (function_exists('func')) { //判断函数是否存在\n    $name();\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/php/php函数.md","raw":"---\ntitle: php函数\ndate: 2016-10-14 11:44:24\ncategories:\n---\nphp函数\n<!-- more -->\nPHP内置了超过1000个函数，因此函数使得PHP成为一门非常强大的语言。大多数时候我们j使用系统的内置函数就可以满足需求，但是自定义函数通过将一组代码封装起来，使代码进行复用，程序结构与逻辑更加清晰。\n\n<h2>自定义函数</h2>\nPHP函数的定义方式：\n+ 1.使用关键字“function”开始\n+ 2.函数名可以是字母或下划线开头：function name()\n+ 3.在大括号中编写函数体：\n\n```php\n<?php\nfunction say()\n{\n    echo 'hello world';\n}\n//在这里调用函数\nsay();\n?>\n\n<?php\nfunction sum($a, $b) {\n    echo $a + $b;\n}\n//在这里调用函数计算1+2的值\nsum(1,2);\n?>\n\n<?php\nfunction sum($a, $b) {\n    return $a+$b;\n}\n//在这里调用函数取得返回值\n$s = sum(1,2);\nprint_r($s);\n?>\n```\n\n<h3>可变函数</h3>\n所谓可变函数，即通过变量的值来调用函数，因为变量的值是可变的，所以可以通过改变一个变量的值来实现调用不同的函数。经常会用在回调函数、函数列表，或者根据动态参数来调用不同的函数。可变函数的调用方法为变量名加括号。\n\n```php\n<?php\nfunction func() {\n    echo 'my function called.';\n}\n$name = 'func';\n//调用可变函数\n\n$name();\n?>\n```\n\n<h2>内置函数</h2>\n内置函数指的是PHP默认支持的函数，PHP内置了很多标准的常用的处理函数，包括字符串处理、数组函数、文件处理、session与cookie处理等。\n另外一些函数是通过其他扩展来支持的，比如mysql数据库处理函数，GD图像处理函数，邮件处理函数等，PHP默认加载了一些常用的扩展库，我们可以安装或者加载其他扩展库来增加PHP的处理函数。\n\n```php\n<?php\n$str = '苹果很好吃。';\n//请将变量$str中的苹果替换成香蕉\n$str = str_replace('苹果','香蕉',$str);\n?>\n```\n\n<h2>判断函数是否存在</h2>\n为了确保程序调用的函数是存在的，先使用function_exists判断一下函数是否存在。同样的method_exists可以用来检测类的方法是否存在。\n\n```php\n<?php\nfunction func() {\n    echo 'exists';\n}\n$name = 'func';\nif (function_exists('func')) { //判断函数是否存在\n    $name();\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"php/php函数","published":1,"updated":"2016-10-14T04:44:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99i005521xwpcbc45dr","content":"<p>php函数<br><a id=\"more\"></a><br>PHP内置了超过1000个函数，因此函数使得PHP成为一门非常强大的语言。大多数时候我们j使用系统的内置函数就可以满足需求，但是自定义函数通过将一组代码封装起来，使代码进行复用，程序结构与逻辑更加清晰。</p>\n<p></p><h2>自定义函数</h2><br>PHP函数的定义方式：<p></p>\n<ul>\n<li>1.使用关键字“function”开始</li>\n<li>2.函数名可以是字母或下划线开头：function name()</li>\n<li>3.在大括号中编写函数体：</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'hello world'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//在这里调用函数</span></div><div class=\"line\">say();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span><span class=\"params\">($a, $b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> $a + $b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//在这里调用函数计算1+2的值</span></div><div class=\"line\">sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span><span class=\"params\">($a, $b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> $a+$b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//在这里调用函数取得返回值</span></div><div class=\"line\">$s = sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div><div class=\"line\">print_r($s);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p></p><h3>可变函数</h3><br>所谓可变函数，即通过变量的值来调用函数，因为变量的值是可变的，所以可以通过改变一个变量的值来实现调用不同的函数。经常会用在回调函数、函数列表，或者根据动态参数来调用不同的函数。可变函数的调用方法为变量名加括号。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'my function called.'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">$name = <span class=\"string\">'func'</span>;</div><div class=\"line\"><span class=\"comment\">//调用可变函数</span></div><div class=\"line\"></div><div class=\"line\">$name();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p></p><h2>内置函数</h2><br>内置函数指的是PHP默认支持的函数，PHP内置了很多标准的常用的处理函数，包括字符串处理、数组函数、文件处理、session与cookie处理等。<br>另外一些函数是通过其他扩展来支持的，比如mysql数据库处理函数，GD图像处理函数，邮件处理函数等，PHP默认加载了一些常用的扩展库，我们可以安装或者加载其他扩展库来增加PHP的处理函数。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$str = <span class=\"string\">'苹果很好吃。'</span>;</div><div class=\"line\"><span class=\"comment\">//请将变量$str中的苹果替换成香蕉</span></div><div class=\"line\">$str = str_replace(<span class=\"string\">'苹果'</span>,<span class=\"string\">'香蕉'</span>,$str);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p></p><h2>判断函数是否存在</h2><br>为了确保程序调用的函数是存在的，先使用function_exists判断一下函数是否存在。同样的method_exists可以用来检测类的方法是否存在。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'exists'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">$name = <span class=\"string\">'func'</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (function_exists(<span class=\"string\">'func'</span>)) &#123; <span class=\"comment\">//判断函数是否存在</span></div><div class=\"line\">    $name();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>php函数<br>","more":"<br>PHP内置了超过1000个函数，因此函数使得PHP成为一门非常强大的语言。大多数时候我们j使用系统的内置函数就可以满足需求，但是自定义函数通过将一组代码封装起来，使代码进行复用，程序结构与逻辑更加清晰。</p>\n<p><h2>自定义函数</h2><br>PHP函数的定义方式：</p>\n<ul>\n<li>1.使用关键字“function”开始</li>\n<li>2.函数名可以是字母或下划线开头：function name()</li>\n<li>3.在大括号中编写函数体：</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'hello world'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//在这里调用函数</span></div><div class=\"line\">say();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span><span class=\"params\">($a, $b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> $a + $b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//在这里调用函数计算1+2的值</span></div><div class=\"line\">sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span><span class=\"params\">($a, $b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> $a+$b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//在这里调用函数取得返回值</span></div><div class=\"line\">$s = sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div><div class=\"line\">print_r($s);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p><h3>可变函数</h3><br>所谓可变函数，即通过变量的值来调用函数，因为变量的值是可变的，所以可以通过改变一个变量的值来实现调用不同的函数。经常会用在回调函数、函数列表，或者根据动态参数来调用不同的函数。可变函数的调用方法为变量名加括号。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'my function called.'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">$name = <span class=\"string\">'func'</span>;</div><div class=\"line\"><span class=\"comment\">//调用可变函数</span></div><div class=\"line\"></div><div class=\"line\">$name();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p><h2>内置函数</h2><br>内置函数指的是PHP默认支持的函数，PHP内置了很多标准的常用的处理函数，包括字符串处理、数组函数、文件处理、session与cookie处理等。<br>另外一些函数是通过其他扩展来支持的，比如mysql数据库处理函数，GD图像处理函数，邮件处理函数等，PHP默认加载了一些常用的扩展库，我们可以安装或者加载其他扩展库来增加PHP的处理函数。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$str = <span class=\"string\">'苹果很好吃。'</span>;</div><div class=\"line\"><span class=\"comment\">//请将变量$str中的苹果替换成香蕉</span></div><div class=\"line\">$str = str_replace(<span class=\"string\">'苹果'</span>,<span class=\"string\">'香蕉'</span>,$str);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p><h2>判断函数是否存在</h2><br>为了确保程序调用的函数是存在的，先使用function_exists判断一下函数是否存在。同样的method_exists可以用来检测类的方法是否存在。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'exists'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">$name = <span class=\"string\">'func'</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (function_exists(<span class=\"string\">'func'</span>)) &#123; <span class=\"comment\">//判断函数是否存在</span></div><div class=\"line\">    $name();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"php变量","date":"2016-10-12T02:42:53.000Z","_content":"变量的声明 变量的数据类型\n<!-- more -->\n\n<h2>变量</h2>\n<h3>变量声明</h3>\n1、变量名需要<font color=#FF6666>$</font>进行标识\n2、变量名必须以字母或下划线<font color=#FF6666>\\_</font>开头\n3、变量名只能由字母、数字、以及下划线<font color=#FF6666>\\_</font>组成，\n<font color=#FF6666>PHP中变量名是区分大小写的</font>\n\n```php\n<?php\n$var_name = \"苹果\";\n$n = 10;\n?>\n```\n\n<h3>变量的数据类型</h3>\n在php中，支持8种原始类型，其中包括四种标量类型、两种复合类型和两种特殊类型。php是一门松散类型的语言，不必向php声明变量的数据类型，php会自动把变量转换为自动的数据类型，\nvar_dump()函数获取变量的数据\n\n```php\n<?php \n $string = \"就\";\n var_dump($string);\n echo \"<br />\";\n $string = 9494; \n var_dump($string);\n  echo \"<br />\";\n?>\n结果\nstring(3) \"就\" \nint(9494)\n```\n<h3>标量类型—布尔类型</h3>\n布尔类型（boolean）：只有两个值，一个是<font color=#FF6666>TRUE</font>,另一个<font color=#FF6666>FALSE</font>,\n它不区分大小写，也就是说”TRUE”和“true”效果是一样的\n\n```php\n<?php \n    $man = \"男\";\n\t$flag = $man == \"男\";\n\techo $flag ;\n\techo \"<br />\" ;\n\tvar_dump($flag);\n?>\n结果\n1\nbool(true)\n```\n<h3>标量类型—整型</h3>\n整型（integer）：类似于常见的整数。它可以用十进制、八进制、十六进制指定。十进制就是日常使用的数字；八进制，数字前必须加上<font color=#FF6666>0</font>(这个<font color=#FF6666>0</font>是阿拉伯数字<font color=#FF6666>0</font>，可不是英文字母“欧”哦)；十六进制，数字前必须加<font color=#FF6666>0x</font> (这个<font color=#FF6666>0</font>也是阿拉伯数字<font color=#FF6666>0</font>，不是“欧”哦)。如：\n\n```php\n<?php\n\t$data_int1 = 123;\n\techo $data_int1;\n\techo \"<br />\";\n\t$data_int2 = -123;\n\techo $data_int2;\n\techo \"<br />\";\n\t$data_int3 = 0123;\n\techo $data_int3;\n\techo \"<br />\";\n\t$data_int4 = 0x123;\n\techo $data_int4;\n\techo \"<br />\";\n?>\n结果\n123\n-123\n83\n291\n```\n\n<h3>标量类型—浮点型</h3>\n浮点型（浮点数、双精度数或实数），也就是通常说的小数，可以用小数点或者科学计数法表示。科学计数法可以使用小写的e，也可以使用大写的E\n\n```php\n<?php\n$num_float = 1.234;    //小数点  \n$num_float = 1.2e3;    //科学计数法，小写e  \n$num_float = 7.0E-10;  //科学计数法，大写E  \n?>\n\n结果\n1.234\n1200\n0.007\n```\n<font color=#FF6666>e3是10的三次方，E-3是10的-3次方</font>\n\n<h3>标量类型—字符串</h3>\n字符串是由一系列字符组成，在PHP中，字符和字节一样，也就是说，一共有256种不同字符的可能性。字符串型可以用三种方法定义：单引号形式、双引号形式和Heredoc结构形式。\n\n```php\n<?php \n$str_string1 = '我是字符串'; \n$str_string2 = \"我也是字符串哦\";\necho $str_string1;\necho \"<br />\";\necho $str_string2;\n?>\n\n结果\n我是字符串\n我也是字符串哦\n```\n\n<h4>字符串中包括引号</h4>\n单引号中嵌入双引号，直接嵌入\n双引号中嵌入单引号，直接嵌入\n单引号中嵌入单引号，使用转义字符<font color=#FF6666>\\'</font>\n双引号中嵌入双引号，使用转义字符<font color=#FF6666>\\\"</font>\n\n```php\n<?php \n$str_string1 = '甲问：\"你在哪里学的PHP？\"';//单引号中嵌入双引号，直接嵌入\n$str_string2 = \"乙毫不犹豫地回答：'当然是慕课网咯！'\";//双引号中嵌入单引号，直接嵌入\n$str_string3 = '甲问:\\'能告诉我网址吗？\\'';//单引号中嵌入单引号，使用转义字符\\'\n$str_string4 = \"乙答道:\\\"www.imooc.com\\\"\";//双引号中嵌入双引号，使用转义字符\\\"\necho $str_string1;\necho \"<br />\";\necho $str_string2;\necho \"<br />\";\necho $str_string3;\necho \"<br />\";\necho $str_string4;\necho \"<br />\";\n?>\n\n结果\n甲问：\"你在哪里学的PHP？\"\n乙毫不犹豫地回答：'当然是慕课网咯！'\n甲问:'能告诉我网址吗？'\n乙答道:\"www.imooc.com\"\n```\n\n<h4>当引号遇到美元符号标识的变量</h4>\n当双引号中包含变量时，变量会与双引号中的内容连接在一起；\n当单引号中包含变量时，变量会被当做字符串输出。\n\n```php\n<?php \n$love = \"I love you!\"; \n$string1 = \"慕课网,$love\";\n$string2 = '慕课网,$love';\necho $string1;\necho \"<br />\";\necho $string2;\n?>\n\n结果\n慕课网,I love you!\n慕课网,$love\n```\n<h4>字符串很长</h4>\n我们可以使用Heredoc结构形式\n以<font color=#FF6666>&lt;&lt;&lt;GOD</font>开头\n️以<font color=#FF6666>GOD</font>结尾\n\n```php\n<?php \n$string = <<<GOD\n我有一只小毛驴，我从来也不骑。\n有一天我心血来潮，骑着去赶集。\n我手里拿着小皮鞭，我心里正得意。\n不知怎么哗啦啦啦啦，我摔了一身泥.\nGOD;\n\necho $string;\n?>\n\n结果\n我有一只小毛驴，我从来也不骑。 有一天我心血来潮，骑着去赶集。 我手里拿着小皮鞭，我心里正得意。 不知怎么哗啦啦啦啦，我摔了一身泥.\n```\n\n<h3>特殊类型—资源</h3>\n资源（resource）：资源是由专门的函数来建立和使用的，例如打开文件、数据连接、图形画布。我们可以对资源进行操作（创建、使用和释放）。任何资源，在不需要的时候应该被及时释放。如果我们忘记了释放资源，系统自动启用垃圾回收机制，在页面执行完毕后回收资源，以避免内存被消耗殆尽。\n\n```php\n<?php\n$file=fopen(\"f.txt\",\"r\");   //打开文件\n$con=mysql_connect(\"localhost\",\"root\",\"root\");  //连接数据库\n$img=imagecreate(100,100);//图形画布\n?>\n\n<?php \n//首先采用“fopen”函数打开文件，得到返回值的就是资源类型。\n$file_handle = fopen(\"http://127.0.0.1/test.txt\",\"r\");\nif ($file_handle){\n    //接着采用while循环（后面语言结构语句中的循环结构会详细介绍）一行行地读取文件，然后输出每行的文字\n    while (!feof($file_handle)) { //判断是否到最后一行\n        $line = fgets($file_handle); //读取一行文本\n        echo $line; //输出一行文本\n        echo \"<br />\"; //换行\n    }\n}\nfclose($file_handle);//关闭文件\n?>\n\n结果\n我是第一行 \n我是第二行 \n我是第三行 \n我是第四行 \n我是第五行 \n```\n\n<h3>特殊类型—空类型</h3>\nNULL（NULL）：NULL是空类型，对大小写不敏感，NULL类型只有一个取值，表示一个变量没有值，\n+ 当被赋值为NULL\n+ 未被赋值\n+ 被unset()\n这三种情况下变量被认为为NULL。\n\n```php\n<?php \n $var;\n var_dump($var);\n $var1 = null;\n var_dump($var1);\n $var2 = NULL;\n var_dump($var2);\n $var3 = \"节日快乐！\";\n unset($var3);\n var_dump($var3);\n?>\n\n结果\nNULL NULL NULL NULL\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/php/php变量.md","raw":"---\ntitle: php变量\ndate: 2016-10-12 10:42:53\ncategories: php\n---\n变量的声明 变量的数据类型\n<!-- more -->\n\n<h2>变量</h2>\n<h3>变量声明</h3>\n1、变量名需要<font color=#FF6666>$</font>进行标识\n2、变量名必须以字母或下划线<font color=#FF6666>\\_</font>开头\n3、变量名只能由字母、数字、以及下划线<font color=#FF6666>\\_</font>组成，\n<font color=#FF6666>PHP中变量名是区分大小写的</font>\n\n```php\n<?php\n$var_name = \"苹果\";\n$n = 10;\n?>\n```\n\n<h3>变量的数据类型</h3>\n在php中，支持8种原始类型，其中包括四种标量类型、两种复合类型和两种特殊类型。php是一门松散类型的语言，不必向php声明变量的数据类型，php会自动把变量转换为自动的数据类型，\nvar_dump()函数获取变量的数据\n\n```php\n<?php \n $string = \"就\";\n var_dump($string);\n echo \"<br />\";\n $string = 9494; \n var_dump($string);\n  echo \"<br />\";\n?>\n结果\nstring(3) \"就\" \nint(9494)\n```\n<h3>标量类型—布尔类型</h3>\n布尔类型（boolean）：只有两个值，一个是<font color=#FF6666>TRUE</font>,另一个<font color=#FF6666>FALSE</font>,\n它不区分大小写，也就是说”TRUE”和“true”效果是一样的\n\n```php\n<?php \n    $man = \"男\";\n\t$flag = $man == \"男\";\n\techo $flag ;\n\techo \"<br />\" ;\n\tvar_dump($flag);\n?>\n结果\n1\nbool(true)\n```\n<h3>标量类型—整型</h3>\n整型（integer）：类似于常见的整数。它可以用十进制、八进制、十六进制指定。十进制就是日常使用的数字；八进制，数字前必须加上<font color=#FF6666>0</font>(这个<font color=#FF6666>0</font>是阿拉伯数字<font color=#FF6666>0</font>，可不是英文字母“欧”哦)；十六进制，数字前必须加<font color=#FF6666>0x</font> (这个<font color=#FF6666>0</font>也是阿拉伯数字<font color=#FF6666>0</font>，不是“欧”哦)。如：\n\n```php\n<?php\n\t$data_int1 = 123;\n\techo $data_int1;\n\techo \"<br />\";\n\t$data_int2 = -123;\n\techo $data_int2;\n\techo \"<br />\";\n\t$data_int3 = 0123;\n\techo $data_int3;\n\techo \"<br />\";\n\t$data_int4 = 0x123;\n\techo $data_int4;\n\techo \"<br />\";\n?>\n结果\n123\n-123\n83\n291\n```\n\n<h3>标量类型—浮点型</h3>\n浮点型（浮点数、双精度数或实数），也就是通常说的小数，可以用小数点或者科学计数法表示。科学计数法可以使用小写的e，也可以使用大写的E\n\n```php\n<?php\n$num_float = 1.234;    //小数点  \n$num_float = 1.2e3;    //科学计数法，小写e  \n$num_float = 7.0E-10;  //科学计数法，大写E  \n?>\n\n结果\n1.234\n1200\n0.007\n```\n<font color=#FF6666>e3是10的三次方，E-3是10的-3次方</font>\n\n<h3>标量类型—字符串</h3>\n字符串是由一系列字符组成，在PHP中，字符和字节一样，也就是说，一共有256种不同字符的可能性。字符串型可以用三种方法定义：单引号形式、双引号形式和Heredoc结构形式。\n\n```php\n<?php \n$str_string1 = '我是字符串'; \n$str_string2 = \"我也是字符串哦\";\necho $str_string1;\necho \"<br />\";\necho $str_string2;\n?>\n\n结果\n我是字符串\n我也是字符串哦\n```\n\n<h4>字符串中包括引号</h4>\n单引号中嵌入双引号，直接嵌入\n双引号中嵌入单引号，直接嵌入\n单引号中嵌入单引号，使用转义字符<font color=#FF6666>\\'</font>\n双引号中嵌入双引号，使用转义字符<font color=#FF6666>\\\"</font>\n\n```php\n<?php \n$str_string1 = '甲问：\"你在哪里学的PHP？\"';//单引号中嵌入双引号，直接嵌入\n$str_string2 = \"乙毫不犹豫地回答：'当然是慕课网咯！'\";//双引号中嵌入单引号，直接嵌入\n$str_string3 = '甲问:\\'能告诉我网址吗？\\'';//单引号中嵌入单引号，使用转义字符\\'\n$str_string4 = \"乙答道:\\\"www.imooc.com\\\"\";//双引号中嵌入双引号，使用转义字符\\\"\necho $str_string1;\necho \"<br />\";\necho $str_string2;\necho \"<br />\";\necho $str_string3;\necho \"<br />\";\necho $str_string4;\necho \"<br />\";\n?>\n\n结果\n甲问：\"你在哪里学的PHP？\"\n乙毫不犹豫地回答：'当然是慕课网咯！'\n甲问:'能告诉我网址吗？'\n乙答道:\"www.imooc.com\"\n```\n\n<h4>当引号遇到美元符号标识的变量</h4>\n当双引号中包含变量时，变量会与双引号中的内容连接在一起；\n当单引号中包含变量时，变量会被当做字符串输出。\n\n```php\n<?php \n$love = \"I love you!\"; \n$string1 = \"慕课网,$love\";\n$string2 = '慕课网,$love';\necho $string1;\necho \"<br />\";\necho $string2;\n?>\n\n结果\n慕课网,I love you!\n慕课网,$love\n```\n<h4>字符串很长</h4>\n我们可以使用Heredoc结构形式\n以<font color=#FF6666>&lt;&lt;&lt;GOD</font>开头\n️以<font color=#FF6666>GOD</font>结尾\n\n```php\n<?php \n$string = <<<GOD\n我有一只小毛驴，我从来也不骑。\n有一天我心血来潮，骑着去赶集。\n我手里拿着小皮鞭，我心里正得意。\n不知怎么哗啦啦啦啦，我摔了一身泥.\nGOD;\n\necho $string;\n?>\n\n结果\n我有一只小毛驴，我从来也不骑。 有一天我心血来潮，骑着去赶集。 我手里拿着小皮鞭，我心里正得意。 不知怎么哗啦啦啦啦，我摔了一身泥.\n```\n\n<h3>特殊类型—资源</h3>\n资源（resource）：资源是由专门的函数来建立和使用的，例如打开文件、数据连接、图形画布。我们可以对资源进行操作（创建、使用和释放）。任何资源，在不需要的时候应该被及时释放。如果我们忘记了释放资源，系统自动启用垃圾回收机制，在页面执行完毕后回收资源，以避免内存被消耗殆尽。\n\n```php\n<?php\n$file=fopen(\"f.txt\",\"r\");   //打开文件\n$con=mysql_connect(\"localhost\",\"root\",\"root\");  //连接数据库\n$img=imagecreate(100,100);//图形画布\n?>\n\n<?php \n//首先采用“fopen”函数打开文件，得到返回值的就是资源类型。\n$file_handle = fopen(\"http://127.0.0.1/test.txt\",\"r\");\nif ($file_handle){\n    //接着采用while循环（后面语言结构语句中的循环结构会详细介绍）一行行地读取文件，然后输出每行的文字\n    while (!feof($file_handle)) { //判断是否到最后一行\n        $line = fgets($file_handle); //读取一行文本\n        echo $line; //输出一行文本\n        echo \"<br />\"; //换行\n    }\n}\nfclose($file_handle);//关闭文件\n?>\n\n结果\n我是第一行 \n我是第二行 \n我是第三行 \n我是第四行 \n我是第五行 \n```\n\n<h3>特殊类型—空类型</h3>\nNULL（NULL）：NULL是空类型，对大小写不敏感，NULL类型只有一个取值，表示一个变量没有值，\n+ 当被赋值为NULL\n+ 未被赋值\n+ 被unset()\n这三种情况下变量被认为为NULL。\n\n```php\n<?php \n $var;\n var_dump($var);\n $var1 = null;\n var_dump($var1);\n $var2 = NULL;\n var_dump($var2);\n $var3 = \"节日快乐！\";\n unset($var3);\n var_dump($var3);\n?>\n\n结果\nNULL NULL NULL NULL\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"php/php变量","published":1,"updated":"2016-10-12T08:28:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99j005821xwvioq6uxu","content":"<p>变量的声明 变量的数据类型<br><a id=\"more\"></a></p>\n<p></p><h2>变量</h2><p></p>\n<p></p><h3>变量声明</h3><br>1、变量名需要<font color=\"#FF6666\">$</font>进行标识<br>2、变量名必须以字母或下划线<font color=\"#FF6666\">_</font>开头<br>3、变量名只能由字母、数字、以及下划线<font color=\"#FF6666\">_</font>组成，<p></p>\n<font color=\"#FF6666\">PHP中变量名是区分大小写的</font>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$var_name = <span class=\"string\">\"苹果\"</span>;</div><div class=\"line\">$n = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p></p><h3>变量的数据类型</h3><br>在php中，支持8种原始类型，其中包括四种标量类型、两种复合类型和两种特殊类型。php是一门松散类型的语言，不必向php声明变量的数据类型，php会自动把变量转换为自动的数据类型，<br>var_dump()函数获取变量的数据<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\"> $string = <span class=\"string\">\"就\"</span>;</div><div class=\"line\"> var_dump($string);</div><div class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"> $string = <span class=\"number\">9494</span>; </div><div class=\"line\"> var_dump($string);</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\">结果</div><div class=\"line\">string(<span class=\"number\">3</span>) <span class=\"string\">\"就\"</span> </div><div class=\"line\">int(<span class=\"number\">9494</span>)</div></pre></td></tr></table></figure>\n<p></p><h3>标量类型—布尔类型</h3><br>布尔类型（boolean）：只有两个值，一个是<font color=\"#FF6666\">TRUE</font>,另一个<font color=\"#FF6666\">FALSE</font>,<br>它不区分大小写，也就是说”TRUE”和“true”效果是一样的<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">    $man = <span class=\"string\">\"男\"</span>;</div><div class=\"line\">\t$flag = $man == <span class=\"string\">\"男\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $flag ;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span> ;</div><div class=\"line\">\tvar_dump($flag);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\">结果</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\">bool(<span class=\"keyword\">true</span>)</div></pre></td></tr></table></figure>\n<p></p><h3>标量类型—整型</h3><br>整型（integer）：类似于常见的整数。它可以用十进制、八进制、十六进制指定。十进制就是日常使用的数字；八进制，数字前必须加上<font color=\"#FF6666\">0</font>(这个<font color=\"#FF6666\">0</font>是阿拉伯数字<font color=\"#FF6666\">0</font>，可不是英文字母“欧”哦)；十六进制，数字前必须加<font color=\"#FF6666\">0x</font> (这个<font color=\"#FF6666\">0</font>也是阿拉伯数字<font color=\"#FF6666\">0</font>，不是“欧”哦)。如：<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">\t$data_int1 = <span class=\"number\">123</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $data_int1;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t$data_int2 = <span class=\"number\">-123</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $data_int2;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t$data_int3 = <span class=\"number\">0123</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $data_int3;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t$data_int4 = <span class=\"number\">0x123</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $data_int4;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\">结果</div><div class=\"line\"><span class=\"number\">123</span></div><div class=\"line\"><span class=\"number\">-123</span></div><div class=\"line\"><span class=\"number\">83</span></div><div class=\"line\"><span class=\"number\">291</span></div></pre></td></tr></table></figure>\n<p></p><h3>标量类型—浮点型</h3><br>浮点型（浮点数、双精度数或实数），也就是通常说的小数，可以用小数点或者科学计数法表示。科学计数法可以使用小写的e，也可以使用大写的E<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$num_float = <span class=\"number\">1.234</span>;    <span class=\"comment\">//小数点  </span></div><div class=\"line\">$num_float = <span class=\"number\">1.2e3</span>;    <span class=\"comment\">//科学计数法，小写e  </span></div><div class=\"line\">$num_float = <span class=\"number\">7.0E-10</span>;  <span class=\"comment\">//科学计数法，大写E  </span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\"><span class=\"number\">1.234</span></div><div class=\"line\"><span class=\"number\">1200</span></div><div class=\"line\"><span class=\"number\">0.007</span></div></pre></td></tr></table></figure>\n<font color=\"#FF6666\">e3是10的三次方，E-3是10的-3次方</font>\n\n<p></p><h3>标量类型—字符串</h3><br>字符串是由一系列字符组成，在PHP中，字符和字节一样，也就是说，一共有256种不同字符的可能性。字符串型可以用三种方法定义：单引号形式、双引号形式和Heredoc结构形式。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">$str_string1 = <span class=\"string\">'我是字符串'</span>; </div><div class=\"line\">$str_string2 = <span class=\"string\">\"我也是字符串哦\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $str_string1;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $str_string2;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">我是字符串</div><div class=\"line\">我也是字符串哦</div></pre></td></tr></table></figure>\n<p></p><h4>字符串中包括引号</h4><br>单引号中嵌入双引号，直接嵌入<br>双引号中嵌入单引号，直接嵌入<br>单引号中嵌入单引号，使用转义字符<font color=\"#FF6666\">\\’</font><br>双引号中嵌入双引号，使用转义字符<font color=\"#FF6666\">\\”</font><p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">$str_string1 = <span class=\"string\">'甲问：\"你在哪里学的PHP？\"'</span>;<span class=\"comment\">//单引号中嵌入双引号，直接嵌入</span></div><div class=\"line\">$str_string2 = <span class=\"string\">\"乙毫不犹豫地回答：'当然是慕课网咯！'\"</span>;<span class=\"comment\">//双引号中嵌入单引号，直接嵌入</span></div><div class=\"line\">$str_string3 = <span class=\"string\">'甲问:\\'能告诉我网址吗？\\''</span>;<span class=\"comment\">//单引号中嵌入单引号，使用转义字符\\'</span></div><div class=\"line\">$str_string4 = <span class=\"string\">\"乙答道:\\\"www.imooc.com\\\"\"</span>;<span class=\"comment\">//双引号中嵌入双引号，使用转义字符\\\"</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $str_string1;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $str_string2;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $str_string3;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $str_string4;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">甲问：<span class=\"string\">\"你在哪里学的PHP？\"</span></div><div class=\"line\">乙毫不犹豫地回答：<span class=\"string\">'当然是慕课网咯！'</span></div><div class=\"line\">甲问:<span class=\"string\">'能告诉我网址吗？'</span></div><div class=\"line\">乙答道:<span class=\"string\">\"www.imooc.com\"</span></div></pre></td></tr></table></figure>\n<p></p><h4>当引号遇到美元符号标识的变量</h4><br>当双引号中包含变量时，变量会与双引号中的内容连接在一起；<br>当单引号中包含变量时，变量会被当做字符串输出。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">$love = <span class=\"string\">\"I love you!\"</span>; </div><div class=\"line\">$string1 = <span class=\"string\">\"慕课网,$love\"</span>;</div><div class=\"line\">$string2 = <span class=\"string\">'慕课网,$love'</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $string1;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $string2;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">慕课网,I love you!</div><div class=\"line\">慕课网,$love</div></pre></td></tr></table></figure>\n<p></p><h4>字符串很长</h4><br>我们可以使用Heredoc结构形式<br>以<font color=\"#FF6666\">&lt;&lt;&lt;GOD</font>开头<br>️以<font color=\"#FF6666\">GOD</font>结尾<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">$string = <span class=\"string\">&lt;&lt;&lt;GOD</span></div><div class=\"line\">我有一只小毛驴，我从来也不骑。</div><div class=\"line\">有一天我心血来潮，骑着去赶集。</div><div class=\"line\">我手里拿着小皮鞭，我心里正得意。</div><div class=\"line\">不知怎么哗啦啦啦啦，我摔了一身泥.</div><div class=\"line\">GOD;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $string;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">我有一只小毛驴，我从来也不骑。 有一天我心血来潮，骑着去赶集。 我手里拿着小皮鞭，我心里正得意。 不知怎么哗啦啦啦啦，我摔了一身泥.</div></pre></td></tr></table></figure>\n<p></p><h3>特殊类型—资源</h3><br>资源（resource）：资源是由专门的函数来建立和使用的，例如打开文件、数据连接、图形画布。我们可以对资源进行操作（创建、使用和释放）。任何资源，在不需要的时候应该被及时释放。如果我们忘记了释放资源，系统自动启用垃圾回收机制，在页面执行完毕后回收资源，以避免内存被消耗殆尽。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$file=fopen(<span class=\"string\">\"f.txt\"</span>,<span class=\"string\">\"r\"</span>);   <span class=\"comment\">//打开文件</span></div><div class=\"line\">$con=mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"root\"</span>);  <span class=\"comment\">//连接数据库</span></div><div class=\"line\">$img=imagecreate(<span class=\"number\">100</span>,<span class=\"number\">100</span>);<span class=\"comment\">//图形画布</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\"><span class=\"comment\">//首先采用“fopen”函数打开文件，得到返回值的就是资源类型。</span></div><div class=\"line\">$file_handle = fopen(<span class=\"string\">\"http://127.0.0.1/test.txt\"</span>,<span class=\"string\">\"r\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> ($file_handle)&#123;</div><div class=\"line\">    <span class=\"comment\">//接着采用while循环（后面语言结构语句中的循环结构会详细介绍）一行行地读取文件，然后输出每行的文字</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (!feof($file_handle)) &#123; <span class=\"comment\">//判断是否到最后一行</span></div><div class=\"line\">        $line = fgets($file_handle); <span class=\"comment\">//读取一行文本</span></div><div class=\"line\">        <span class=\"keyword\">echo</span> $line; <span class=\"comment\">//输出一行文本</span></div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>; <span class=\"comment\">//换行</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">fclose($file_handle);<span class=\"comment\">//关闭文件</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">我是第一行 </div><div class=\"line\">我是第二行 </div><div class=\"line\">我是第三行 </div><div class=\"line\">我是第四行 </div><div class=\"line\">我是第五行</div></pre></td></tr></table></figure>\n<p></p><h3>特殊类型—空类型</h3><br>NULL（NULL）：NULL是空类型，对大小写不敏感，NULL类型只有一个取值，表示一个变量没有值，<p></p>\n<ul>\n<li>当被赋值为NULL</li>\n<li>未被赋值</li>\n<li>被unset()<br>这三种情况下变量被认为为NULL。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\"> $var;</div><div class=\"line\"> var_dump($var);</div><div class=\"line\"> $var1 = <span class=\"keyword\">null</span>;</div><div class=\"line\"> var_dump($var1);</div><div class=\"line\"> $var2 = <span class=\"keyword\">NULL</span>;</div><div class=\"line\"> var_dump($var2);</div><div class=\"line\"> $var3 = <span class=\"string\">\"节日快乐！\"</span>;</div><div class=\"line\"> <span class=\"keyword\">unset</span>($var3);</div><div class=\"line\"> var_dump($var3);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\"><span class=\"keyword\">NULL</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">NULL</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>变量的声明 变量的数据类型<br>","more":"</p>\n<p><h2>变量</h2></p>\n<p><h3>变量声明</h3><br>1、变量名需要<font color=#FF6666>$</font>进行标识<br>2、变量名必须以字母或下划线<font color=#FF6666>_</font>开头<br>3、变量名只能由字母、数字、以及下划线<font color=#FF6666>_</font>组成，</p>\n<font color=#FF6666>PHP中变量名是区分大小写的</font>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$var_name = <span class=\"string\">\"苹果\"</span>;</div><div class=\"line\">$n = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p><h3>变量的数据类型</h3><br>在php中，支持8种原始类型，其中包括四种标量类型、两种复合类型和两种特殊类型。php是一门松散类型的语言，不必向php声明变量的数据类型，php会自动把变量转换为自动的数据类型，<br>var_dump()函数获取变量的数据</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\"> $string = <span class=\"string\">\"就\"</span>;</div><div class=\"line\"> var_dump($string);</div><div class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"> $string = <span class=\"number\">9494</span>; </div><div class=\"line\"> var_dump($string);</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\">结果</div><div class=\"line\">string(<span class=\"number\">3</span>) <span class=\"string\">\"就\"</span> </div><div class=\"line\">int(<span class=\"number\">9494</span>)</div></pre></td></tr></table></figure>\n<p><h3>标量类型—布尔类型</h3><br>布尔类型（boolean）：只有两个值，一个是<font color=#FF6666>TRUE</font>,另一个<font color=#FF6666>FALSE</font>,<br>它不区分大小写，也就是说”TRUE”和“true”效果是一样的</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">    $man = <span class=\"string\">\"男\"</span>;</div><div class=\"line\">\t$flag = $man == <span class=\"string\">\"男\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $flag ;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span> ;</div><div class=\"line\">\tvar_dump($flag);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\">结果</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\">bool(<span class=\"keyword\">true</span>)</div></pre></td></tr></table></figure>\n<p><h3>标量类型—整型</h3><br>整型（integer）：类似于常见的整数。它可以用十进制、八进制、十六进制指定。十进制就是日常使用的数字；八进制，数字前必须加上<font color=#FF6666>0</font>(这个<font color=#FF6666>0</font>是阿拉伯数字<font color=#FF6666>0</font>，可不是英文字母“欧”哦)；十六进制，数字前必须加<font color=#FF6666>0x</font> (这个<font color=#FF6666>0</font>也是阿拉伯数字<font color=#FF6666>0</font>，不是“欧”哦)。如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">\t$data_int1 = <span class=\"number\">123</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $data_int1;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t$data_int2 = <span class=\"number\">-123</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $data_int2;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t$data_int3 = <span class=\"number\">0123</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $data_int3;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t$data_int4 = <span class=\"number\">0x123</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $data_int4;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\">结果</div><div class=\"line\"><span class=\"number\">123</span></div><div class=\"line\"><span class=\"number\">-123</span></div><div class=\"line\"><span class=\"number\">83</span></div><div class=\"line\"><span class=\"number\">291</span></div></pre></td></tr></table></figure>\n<p><h3>标量类型—浮点型</h3><br>浮点型（浮点数、双精度数或实数），也就是通常说的小数，可以用小数点或者科学计数法表示。科学计数法可以使用小写的e，也可以使用大写的E</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$num_float = <span class=\"number\">1.234</span>;    <span class=\"comment\">//小数点  </span></div><div class=\"line\">$num_float = <span class=\"number\">1.2e3</span>;    <span class=\"comment\">//科学计数法，小写e  </span></div><div class=\"line\">$num_float = <span class=\"number\">7.0E-10</span>;  <span class=\"comment\">//科学计数法，大写E  </span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\"><span class=\"number\">1.234</span></div><div class=\"line\"><span class=\"number\">1200</span></div><div class=\"line\"><span class=\"number\">0.007</span></div></pre></td></tr></table></figure>\n<font color=#FF6666>e3是10的三次方，E-3是10的-3次方</font>\n\n<p><h3>标量类型—字符串</h3><br>字符串是由一系列字符组成，在PHP中，字符和字节一样，也就是说，一共有256种不同字符的可能性。字符串型可以用三种方法定义：单引号形式、双引号形式和Heredoc结构形式。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">$str_string1 = <span class=\"string\">'我是字符串'</span>; </div><div class=\"line\">$str_string2 = <span class=\"string\">\"我也是字符串哦\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $str_string1;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $str_string2;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">我是字符串</div><div class=\"line\">我也是字符串哦</div></pre></td></tr></table></figure>\n<p><h4>字符串中包括引号</h4><br>单引号中嵌入双引号，直接嵌入<br>双引号中嵌入单引号，直接嵌入<br>单引号中嵌入单引号，使用转义字符<font color=#FF6666>\\’</font><br>双引号中嵌入双引号，使用转义字符<font color=#FF6666>\\”</font></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">$str_string1 = <span class=\"string\">'甲问：\"你在哪里学的PHP？\"'</span>;<span class=\"comment\">//单引号中嵌入双引号，直接嵌入</span></div><div class=\"line\">$str_string2 = <span class=\"string\">\"乙毫不犹豫地回答：'当然是慕课网咯！'\"</span>;<span class=\"comment\">//双引号中嵌入单引号，直接嵌入</span></div><div class=\"line\">$str_string3 = <span class=\"string\">'甲问:\\'能告诉我网址吗？\\''</span>;<span class=\"comment\">//单引号中嵌入单引号，使用转义字符\\'</span></div><div class=\"line\">$str_string4 = <span class=\"string\">\"乙答道:\\\"www.imooc.com\\\"\"</span>;<span class=\"comment\">//双引号中嵌入双引号，使用转义字符\\\"</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $str_string1;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $str_string2;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $str_string3;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $str_string4;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">甲问：<span class=\"string\">\"你在哪里学的PHP？\"</span></div><div class=\"line\">乙毫不犹豫地回答：<span class=\"string\">'当然是慕课网咯！'</span></div><div class=\"line\">甲问:<span class=\"string\">'能告诉我网址吗？'</span></div><div class=\"line\">乙答道:<span class=\"string\">\"www.imooc.com\"</span></div></pre></td></tr></table></figure>\n<p><h4>当引号遇到美元符号标识的变量</h4><br>当双引号中包含变量时，变量会与双引号中的内容连接在一起；<br>当单引号中包含变量时，变量会被当做字符串输出。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">$love = <span class=\"string\">\"I love you!\"</span>; </div><div class=\"line\">$string1 = <span class=\"string\">\"慕课网,$love\"</span>;</div><div class=\"line\">$string2 = <span class=\"string\">'慕课网,$love'</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $string1;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $string2;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">慕课网,I love you!</div><div class=\"line\">慕课网,$love</div></pre></td></tr></table></figure>\n<p><h4>字符串很长</h4><br>我们可以使用Heredoc结构形式<br>以<font color=#FF6666>&lt;&lt;&lt;GOD</font>开头<br>️以<font color=#FF6666>GOD</font>结尾</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">$string = <span class=\"string\">&lt;&lt;&lt;GOD</div><div class=\"line\">我有一只小毛驴，我从来也不骑。</div><div class=\"line\">有一天我心血来潮，骑着去赶集。</div><div class=\"line\">我手里拿着小皮鞭，我心里正得意。</div><div class=\"line\">不知怎么哗啦啦啦啦，我摔了一身泥.</div><div class=\"line\">GOD;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $string;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">我有一只小毛驴，我从来也不骑。 有一天我心血来潮，骑着去赶集。 我手里拿着小皮鞭，我心里正得意。 不知怎么哗啦啦啦啦，我摔了一身泥.</div></pre></td></tr></table></figure>\n<p><h3>特殊类型—资源</h3><br>资源（resource）：资源是由专门的函数来建立和使用的，例如打开文件、数据连接、图形画布。我们可以对资源进行操作（创建、使用和释放）。任何资源，在不需要的时候应该被及时释放。如果我们忘记了释放资源，系统自动启用垃圾回收机制，在页面执行完毕后回收资源，以避免内存被消耗殆尽。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$file=fopen(<span class=\"string\">\"f.txt\"</span>,<span class=\"string\">\"r\"</span>);   <span class=\"comment\">//打开文件</span></div><div class=\"line\">$con=mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"root\"</span>);  <span class=\"comment\">//连接数据库</span></div><div class=\"line\">$img=imagecreate(<span class=\"number\">100</span>,<span class=\"number\">100</span>);<span class=\"comment\">//图形画布</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\"><span class=\"comment\">//首先采用“fopen”函数打开文件，得到返回值的就是资源类型。</span></div><div class=\"line\">$file_handle = fopen(<span class=\"string\">\"http://127.0.0.1/test.txt\"</span>,<span class=\"string\">\"r\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> ($file_handle)&#123;</div><div class=\"line\">    <span class=\"comment\">//接着采用while循环（后面语言结构语句中的循环结构会详细介绍）一行行地读取文件，然后输出每行的文字</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (!feof($file_handle)) &#123; <span class=\"comment\">//判断是否到最后一行</span></div><div class=\"line\">        $line = fgets($file_handle); <span class=\"comment\">//读取一行文本</span></div><div class=\"line\">        <span class=\"keyword\">echo</span> $line; <span class=\"comment\">//输出一行文本</span></div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>; <span class=\"comment\">//换行</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">fclose($file_handle);<span class=\"comment\">//关闭文件</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">我是第一行 </div><div class=\"line\">我是第二行 </div><div class=\"line\">我是第三行 </div><div class=\"line\">我是第四行 </div><div class=\"line\">我是第五行</div></pre></td></tr></table></figure>\n<p><h3>特殊类型—空类型</h3><br>NULL（NULL）：NULL是空类型，对大小写不敏感，NULL类型只有一个取值，表示一个变量没有值，</p>\n<ul>\n<li>当被赋值为NULL</li>\n<li>未被赋值</li>\n<li>被unset()<br>这三种情况下变量被认为为NULL。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\"> $var;</div><div class=\"line\"> var_dump($var);</div><div class=\"line\"> $var1 = <span class=\"keyword\">null</span>;</div><div class=\"line\"> var_dump($var1);</div><div class=\"line\"> $var2 = <span class=\"keyword\">NULL</span>;</div><div class=\"line\"> var_dump($var2);</div><div class=\"line\"> $var3 = <span class=\"string\">\"节日快乐！\"</span>;</div><div class=\"line\"> <span class=\"keyword\">unset</span>($var3);</div><div class=\"line\"> var_dump($var3);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\"><span class=\"keyword\">NULL</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">NULL</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"php图形操作","date":"2016-10-17T05:58:32.000Z","_content":"php图形操作\n<!-- more -->\nGD指的是Graphic Device，PHP的GD库是用来处理图形的扩展库，通过GD库提供的一系列API，可以对图像进行处理或者直接生成新的图片。\nPHP除了能进行文本处理以外，通过GD库，可以对JPG、PNG、GIF、SWF等图片进行处理。GD库常用在图片加水印，验证码生成等方面。\nPHP默认已经集成了GD库，只需要在安装的时候开启就行。\n\n```php\nheader(\"content-type: image/png\");\n$img=imagecreatetruecolor(100, 100);\n$red=imagecolorallocate($img, 0xFF, 0x00, 0x00);\nimagefill($img, 0, 0, $red);\nimagepng($img);\nimagedestroy($img);\n```\n\n<h2>绘制线条</h2>\n要对图形进行操作，首先要新建一个画布，通过imagecreatetruecolor函数可以创建一个真彩色的空白图片：\n\n```php\n$img = imagecreatetruecolor(100, 100);\n```\nGD库中对于画笔所用的颜色，需要通过imagecolorallocate函数进行分配，通过参数设定RGB的颜色值来确定画笔的颜色：\n\n```php\n$red = imagecolorallocate($img, 0xFF, 0x00, 0x00);\n```\n然后我们通过调用绘制线段函数imageline进行线条的绘制，通过指定起点跟终点来最终得到线条。\n\n```php\nimageline($img, 0, 0, 100, 100, $red);\n```\n线条绘制好以后，通过header与imagepng进行图像的输出。\n\n```php\nheader(\"content-type: image/png\");\nimagepng($img);\n```\n最后可以调用imagedestroy释放该图片占用的内存。\n\n```php\nimagedestroy($img);\n```\n通过上面的步骤，可以发现PHP绘制图形非常的简单，但很多时候我们不只是需要输出图片，可能我们还需要得到一个图片文件，可以通过imagepng函数指定文件名将绘制后的图像保存到文件中。\n\n```php\nimagepng($img, 'img.png');\n```\n<h2>生成图像验证码</h2>\n```php\n<?php\n$img = imagecreatetruecolor(100, 40);\n$black = imagecolorallocate($img, 0x00, 0x00, 0x00);\n$green = imagecolorallocate($img, 0x00, 0xFF, 0x00);\n$white = imagecolorallocate($img, 0xFF, 0xFF, 0xFF);\nimagefill($img,0,0,$white);\n//生成随机的验证码\n$code = '';\nfor($i = 0; $i < 4; $i++) {\n    $code .= rand(0, 9);\n}\nimagestring($img, 5, 10, 10, $code, $black);\n//加入噪点干扰\nfor($i=0;$i<50;$i++) {\n  imagesetpixel($img, rand(0, 100) , rand(0, 100) , $black); \n  imagesetpixel($img, rand(0, 100) , rand(0, 100) , $green);\n}\n//输出验证码\nheader(\"content-type: image/png\");\nimagepng($img);\nimagedestroy($img);\n?>\n```\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/php/php图形操作.md","raw":"---\ntitle: php图形操作\ndate: 2016-10-17 13:58:32\ncategories: php\n---\nphp图形操作\n<!-- more -->\nGD指的是Graphic Device，PHP的GD库是用来处理图形的扩展库，通过GD库提供的一系列API，可以对图像进行处理或者直接生成新的图片。\nPHP除了能进行文本处理以外，通过GD库，可以对JPG、PNG、GIF、SWF等图片进行处理。GD库常用在图片加水印，验证码生成等方面。\nPHP默认已经集成了GD库，只需要在安装的时候开启就行。\n\n```php\nheader(\"content-type: image/png\");\n$img=imagecreatetruecolor(100, 100);\n$red=imagecolorallocate($img, 0xFF, 0x00, 0x00);\nimagefill($img, 0, 0, $red);\nimagepng($img);\nimagedestroy($img);\n```\n\n<h2>绘制线条</h2>\n要对图形进行操作，首先要新建一个画布，通过imagecreatetruecolor函数可以创建一个真彩色的空白图片：\n\n```php\n$img = imagecreatetruecolor(100, 100);\n```\nGD库中对于画笔所用的颜色，需要通过imagecolorallocate函数进行分配，通过参数设定RGB的颜色值来确定画笔的颜色：\n\n```php\n$red = imagecolorallocate($img, 0xFF, 0x00, 0x00);\n```\n然后我们通过调用绘制线段函数imageline进行线条的绘制，通过指定起点跟终点来最终得到线条。\n\n```php\nimageline($img, 0, 0, 100, 100, $red);\n```\n线条绘制好以后，通过header与imagepng进行图像的输出。\n\n```php\nheader(\"content-type: image/png\");\nimagepng($img);\n```\n最后可以调用imagedestroy释放该图片占用的内存。\n\n```php\nimagedestroy($img);\n```\n通过上面的步骤，可以发现PHP绘制图形非常的简单，但很多时候我们不只是需要输出图片，可能我们还需要得到一个图片文件，可以通过imagepng函数指定文件名将绘制后的图像保存到文件中。\n\n```php\nimagepng($img, 'img.png');\n```\n<h2>生成图像验证码</h2>\n```php\n<?php\n$img = imagecreatetruecolor(100, 40);\n$black = imagecolorallocate($img, 0x00, 0x00, 0x00);\n$green = imagecolorallocate($img, 0x00, 0xFF, 0x00);\n$white = imagecolorallocate($img, 0xFF, 0xFF, 0xFF);\nimagefill($img,0,0,$white);\n//生成随机的验证码\n$code = '';\nfor($i = 0; $i < 4; $i++) {\n    $code .= rand(0, 9);\n}\nimagestring($img, 5, 10, 10, $code, $black);\n//加入噪点干扰\nfor($i=0;$i<50;$i++) {\n  imagesetpixel($img, rand(0, 100) , rand(0, 100) , $black); \n  imagesetpixel($img, rand(0, 100) , rand(0, 100) , $green);\n}\n//输出验证码\nheader(\"content-type: image/png\");\nimagepng($img);\nimagedestroy($img);\n?>\n```\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"php/php图形操作","published":1,"updated":"2016-10-17T08:33:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99l005a21xwhyvhk7fo","content":"<p>php图形操作<br><a id=\"more\"></a><br>GD指的是Graphic Device，PHP的GD库是用来处理图形的扩展库，通过GD库提供的一系列API，可以对图像进行处理或者直接生成新的图片。<br>PHP除了能进行文本处理以外，通过GD库，可以对JPG、PNG、GIF、SWF等图片进行处理。GD库常用在图片加水印，验证码生成等方面。<br>PHP默认已经集成了GD库，只需要在安装的时候开启就行。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">header(<span class=\"string\">\"content-type: image/png\"</span>);</div><div class=\"line\">$img=imagecreatetruecolor(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">$red=imagecolorallocate($img, <span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>);</div><div class=\"line\">imagefill($img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, $red);</div><div class=\"line\">imagepng($img);</div><div class=\"line\">imagedestroy($img);</div></pre></td></tr></table></figure>\n<p></p><h2>绘制线条</h2><br>要对图形进行操作，首先要新建一个画布，通过imagecreatetruecolor函数可以创建一个真彩色的空白图片：<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$img = imagecreatetruecolor(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</div></pre></td></tr></table></figure>\n<p>GD库中对于画笔所用的颜色，需要通过imagecolorallocate函数进行分配，通过参数设定RGB的颜色值来确定画笔的颜色：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$red = imagecolorallocate($img, <span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>);</div></pre></td></tr></table></figure>\n<p>然后我们通过调用绘制线段函数imageline进行线条的绘制，通过指定起点跟终点来最终得到线条。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">imageline($img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, $red);</div></pre></td></tr></table></figure>\n<p>线条绘制好以后，通过header与imagepng进行图像的输出。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">header(<span class=\"string\">\"content-type: image/png\"</span>);</div><div class=\"line\">imagepng($img);</div></pre></td></tr></table></figure>\n<p>最后可以调用imagedestroy释放该图片占用的内存。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">imagedestroy($img);</div></pre></td></tr></table></figure>\n<p>通过上面的步骤，可以发现PHP绘制图形非常的简单，但很多时候我们不只是需要输出图片，可能我们还需要得到一个图片文件，可以通过imagepng函数指定文件名将绘制后的图像保存到文件中。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">imagepng($img, <span class=\"string\">'img.png'</span>);</div></pre></td></tr></table></figure>\n<p></p><h2>生成图像验证码</h2><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$img = imagecreatetruecolor(<span class=\"number\">100</span>, <span class=\"number\">40</span>);</div><div class=\"line\">$black = imagecolorallocate($img, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>);</div><div class=\"line\">$green = imagecolorallocate($img, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>);</div><div class=\"line\">$white = imagecolorallocate($img, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>);</div><div class=\"line\">imagefill($img,<span class=\"number\">0</span>,<span class=\"number\">0</span>,$white);</div><div class=\"line\"><span class=\"comment\">//生成随机的验证码</span></div><div class=\"line\">$code = <span class=\"string\">''</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>($i = <span class=\"number\">0</span>; $i &lt; <span class=\"number\">4</span>; $i++) &#123;</div><div class=\"line\">    $code .= rand(<span class=\"number\">0</span>, <span class=\"number\">9</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">imagestring($img, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, $code, $black);</div><div class=\"line\"><span class=\"comment\">//加入噪点干扰</span></div><div class=\"line\"><span class=\"keyword\">for</span>($i=<span class=\"number\">0</span>;$i&lt;<span class=\"number\">50</span>;$i++) &#123;</div><div class=\"line\">  imagesetpixel($img, rand(<span class=\"number\">0</span>, <span class=\"number\">100</span>) , rand(<span class=\"number\">0</span>, <span class=\"number\">100</span>) , $black); </div><div class=\"line\">  imagesetpixel($img, rand(<span class=\"number\">0</span>, <span class=\"number\">100</span>) , rand(<span class=\"number\">0</span>, <span class=\"number\">100</span>) , $green);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//输出验证码</span></div><div class=\"line\">header(<span class=\"string\">\"content-type: image/png\"</span>);</div><div class=\"line\">imagepng($img);</div><div class=\"line\">imagedestroy($img);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure><p></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>php图形操作<br>","more":"<br>GD指的是Graphic Device，PHP的GD库是用来处理图形的扩展库，通过GD库提供的一系列API，可以对图像进行处理或者直接生成新的图片。<br>PHP除了能进行文本处理以外，通过GD库，可以对JPG、PNG、GIF、SWF等图片进行处理。GD库常用在图片加水印，验证码生成等方面。<br>PHP默认已经集成了GD库，只需要在安装的时候开启就行。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">header(<span class=\"string\">\"content-type: image/png\"</span>);</div><div class=\"line\">$img=imagecreatetruecolor(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">$red=imagecolorallocate($img, <span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>);</div><div class=\"line\">imagefill($img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, $red);</div><div class=\"line\">imagepng($img);</div><div class=\"line\">imagedestroy($img);</div></pre></td></tr></table></figure>\n<p><h2>绘制线条</h2><br>要对图形进行操作，首先要新建一个画布，通过imagecreatetruecolor函数可以创建一个真彩色的空白图片：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$img = imagecreatetruecolor(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</div></pre></td></tr></table></figure>\n<p>GD库中对于画笔所用的颜色，需要通过imagecolorallocate函数进行分配，通过参数设定RGB的颜色值来确定画笔的颜色：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$red = imagecolorallocate($img, <span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>);</div></pre></td></tr></table></figure>\n<p>然后我们通过调用绘制线段函数imageline进行线条的绘制，通过指定起点跟终点来最终得到线条。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">imageline($img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, $red);</div></pre></td></tr></table></figure>\n<p>线条绘制好以后，通过header与imagepng进行图像的输出。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">header(<span class=\"string\">\"content-type: image/png\"</span>);</div><div class=\"line\">imagepng($img);</div></pre></td></tr></table></figure>\n<p>最后可以调用imagedestroy释放该图片占用的内存。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">imagedestroy($img);</div></pre></td></tr></table></figure>\n<p>通过上面的步骤，可以发现PHP绘制图形非常的简单，但很多时候我们不只是需要输出图片，可能我们还需要得到一个图片文件，可以通过imagepng函数指定文件名将绘制后的图像保存到文件中。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">imagepng($img, <span class=\"string\">'img.png'</span>);</div></pre></td></tr></table></figure>\n<p><h2>生成图像验证码</h2><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$img = imagecreatetruecolor(<span class=\"number\">100</span>, <span class=\"number\">40</span>);</div><div class=\"line\">$black = imagecolorallocate($img, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>);</div><div class=\"line\">$green = imagecolorallocate($img, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>);</div><div class=\"line\">$white = imagecolorallocate($img, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>);</div><div class=\"line\">imagefill($img,<span class=\"number\">0</span>,<span class=\"number\">0</span>,$white);</div><div class=\"line\"><span class=\"comment\">//生成随机的验证码</span></div><div class=\"line\">$code = <span class=\"string\">''</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>($i = <span class=\"number\">0</span>; $i &lt; <span class=\"number\">4</span>; $i++) &#123;</div><div class=\"line\">    $code .= rand(<span class=\"number\">0</span>, <span class=\"number\">9</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">imagestring($img, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, $code, $black);</div><div class=\"line\"><span class=\"comment\">//加入噪点干扰</span></div><div class=\"line\"><span class=\"keyword\">for</span>($i=<span class=\"number\">0</span>;$i&lt;<span class=\"number\">50</span>;$i++) &#123;</div><div class=\"line\">  imagesetpixel($img, rand(<span class=\"number\">0</span>, <span class=\"number\">100</span>) , rand(<span class=\"number\">0</span>, <span class=\"number\">100</span>) , $black); </div><div class=\"line\">  imagesetpixel($img, rand(<span class=\"number\">0</span>, <span class=\"number\">100</span>) , rand(<span class=\"number\">0</span>, <span class=\"number\">100</span>) , $green);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//输出验证码</span></div><div class=\"line\">header(<span class=\"string\">\"content-type: image/png\"</span>);</div><div class=\"line\">imagepng($img);</div><div class=\"line\">imagedestroy($img);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"php基本语法格式","date":"2016-10-11T02:56:04.000Z","_content":"php基本语法格式的记录，对于有基础的人试用\n<!-- more -->\n\n<h2>基本格式</h2>\n以 <font color=#ff6666><?php</font>开头 \n以 <font color=#ff6666>?></font> 结尾\n\n```php\n<?php\necho \"hello world\";\n?>\n```\n\n每条语句以 <font color=#ff6666>;</font> 结尾\n\n```php\n<?php\necho \"hello world\";\n?>\n```\n注释\n单行注释<font color=#ff6666>//</font>\n多行注释<font color=#ff6666>/\\*\\*/</font>\n\n```php\n <?php\n //这是单行注释\n /*\n 这是多行注释\n  */\n echo \"hello world\";\n ?>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/php/php基本语法格式.md","raw":"---\ntitle: php基本语法格式\ndate: 2016-10-11 10:56:04\ncategories: php\n---\nphp基本语法格式的记录，对于有基础的人试用\n<!-- more -->\n\n<h2>基本格式</h2>\n以 <font color=#ff6666><?php</font>开头 \n以 <font color=#ff6666>?></font> 结尾\n\n```php\n<?php\necho \"hello world\";\n?>\n```\n\n每条语句以 <font color=#ff6666>;</font> 结尾\n\n```php\n<?php\necho \"hello world\";\n?>\n```\n注释\n单行注释<font color=#ff6666>//</font>\n多行注释<font color=#ff6666>/\\*\\*/</font>\n\n```php\n <?php\n //这是单行注释\n /*\n 这是多行注释\n  */\n echo \"hello world\";\n ?>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"php/php基本语法格式","published":1,"updated":"2016-10-12T03:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99m005c21xwhgq93z0x","content":"<p>php基本语法格式的记录，对于有基础的人试用<br><a id=\"more\"></a></p>\n<p></p><h2>基本格式</h2><br>以 <font color=\"#ff6666\">&lt;?php</font>开头<br>以 <font color=\"#ff6666\">?&gt;</font> 结尾<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p>每条语句以 <font color=\"#ff6666\">;</font> 结尾</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p>注释<br>单行注释<font color=\"#ff6666\">//</font><br>多行注释<font color=\"#ff6666\">/**/</font></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//这是单行注释</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">这是多行注释</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n","excerpt":"<p>php基本语法格式的记录，对于有基础的人试用<br>","more":"</p>\n<p><h2>基本格式</h2><br>以 <font color=#ff6666>&lt;?php</font>开头<br>以 <font color=#ff6666>?&gt;</font> 结尾</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p>每条语句以 <font color=#ff6666>;</font> 结尾</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p>注释<br>单行注释<font color=#ff6666>//</font><br>多行注释<font color=#ff6666>/**/</font></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//这是单行注释</span></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">这是多行注释</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>"},{"title":"php字符串","date":"2016-10-14T09:19:35.000Z","_content":"php字符串\n<!-- more -->\n\n<h2>字符串的定义</h2>\n一个字符串 通过下面的3种方法来定义：\n1、单引号\n2、双引号\n3、heredoc语法结构\n\n```php\n//单引号定义的字符串\n$hello = 'hello world';\n//双引号定义的字符串\n$hello = \"hello world\";\n//heredoc语法结构定义的字符串\n$hello = <<<TAG\nhello world\nTAG;\n```\n\nPHP允许我们在双引号串中直接包含字串变量。\n而单引号串中的内容总被认为是普通字符。\n比如：\n\n```php\n$str='hello';\necho \"str is $str\"; //运行结果: str is hello\necho 'str is $str'; //运行结果: str is $str\n```\n\n<h2>字符串的连接</h2>\nPHP中用英文的点号.来连接两个字符串。\n\n```php\n$hello='hello';\n\n$world=' world';\n\n$hi = $hello.$world;\n\necho $hi;//我们可以用echo函数输出一下这个字符串连接。\n```\n\n<h2>去除字符串首尾的空格</h2>\nPHP中有三个函数可以去掉字符串的空格\n+ trim去除一个字符串两端空格。\n+ rtrim是去除一个字符串右部空格，其中的r是right的缩写。\n+ ltrim是去除一个字符串左部空格，其中的l是left的缩写。\n \n例子如下：\n\n```php\necho trim(\" 空格 \").\"<br>\";\necho rtrim(\" 空格 \").\"<br>\";\necho ltrim(\" 空格 \").\"<br>\";\n```\n\n<h2>获取字符串的长度</h2>\n函数strlen()\n\n```php\n$str = 'hello';\n$len = strlen($str);\necho $len;//输出结果是5\n```\nstrlen函数对于计算英文字符是非常的擅长，但是如果有中文汉字，要计算长度该怎么办？\n可以使用mb_strlen()函数获取字符串中中文长度。\n例子如下：\n\n```php\n$str = \"我爱你\";\necho mb_strlen($str,\"UTF8\");//结果：3，此处的UTF8表示中文编码是UTF8格式，中文一般采用UTF8编码\n```\n\n<h2>字符串的截取</h2>\n+ 英文字符串的截取函数substr()\n+ 中文字符串的截取函数mb_substr()\n\n英文字符串的截取函数substr()\n函数说明：substr(字符串变量,开始截取的位置,截取个数）\n例如：\n\n```php\n$str='i love you';\n//截取love这几个字母\necho substr($str, 2, 4);\n//为什么开始位置是2呢，因为substr函数计算字符串位置是从0开始的，也就是0的位置是i,1的位置是空格，l的位置是2。从位置2开始取4个字符，就是love。\n```\n中文字符串的截取函数mb_substr()\n函数说明：mb_substr(字符串变量,开始截取的位置，截取个数, 网页编码）\n例如：\n\n```php\n$str='我爱你，中国';\n//截取中国两个字\necho mb_substr($str, 4, 2, 'utf8');\n//为什么开始位置是4呢，和上一个例子一样，因为mb_substr函数计算汉字位置是从0开始的，也就是0的位置是我,1的位置是爱，4的位置是中。从位置4开始取2个汉字，就是中国。中文编码一般是utf8格式\n```\n\n<h2>查找字符串</h2>\n查找字符串函数strpos();\n函数说明：strpos(要处理的字符串, 要定位的字符串, 定位的起始位置[可选])\n例子：\n\n```php\n$str = 'I want to study at imooc';\n$pos = strpos($str, 'imooc');\necho $pos;//结果显示19，表示从位置0开始，imooc在第19个位置开始出现\n```\n\n<h2>替换字符串</h2>\n替换函数str_replace()\n函数说明：str_replace(要查找的字符串, 要替换的字符串, 被搜索的字符串, 替换进行计数[可选])\n例子：\n\n```php\n$str = 'I want to learn js';\n$replace = str_replace('js', 'php', $str);\necho $replace;//结果显示I want to learn php\n```\n\n<h2>格式化字符串</h2>\n格式化字符串函数sprintf()\n函数说明：sprintf(格式, 要转化的字符串)\n返回：格式化好的字符串\n例子：\n\n```php\n$str = '99.9';\n$result = sprintf('%01.2f', $str);\necho $result;//结果显示99.90\n```\n\n<h2>字符串的合并</h2>\n字符串合并函数implode()\n函数说明：implode(分隔符[可选], 数组)\n返回值：把数组元素组合为一个字符串\n例子：\n\n```php\n$arr = array('Hello', 'World!');\n$result = implode('', $arr);\nprint_r($result);//结果显示Hello World!\n```\n<h2>字符串的分隔</h2>\n字符串分隔函数explode()\n函数说明：explode(分隔符[可选], 字符串)\n返回值：函数返回由字符串组成的数组\n例子：\n\n```php\n$str = 'apple,banana';\n$result = explode(',', $str);\nprint_r($result);//结果显示array('apple','banana')\n```\n\n<h2>字符串的转义</h2>\n字符串转义函数addslashes()\n函数说明：用于对特殊字符加上转义字符，返回一个字符串\n返回值：一个经过转义后的字符串\n例子：\n\n```php\n$str = \"what's your name?\";\necho addslashes($str);//输出：what\\'s your name?\n```\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/php/php字符串.md","raw":"---\ntitle: php字符串\ndate: 2016-10-14 17:19:35\ncategories: php\n---\nphp字符串\n<!-- more -->\n\n<h2>字符串的定义</h2>\n一个字符串 通过下面的3种方法来定义：\n1、单引号\n2、双引号\n3、heredoc语法结构\n\n```php\n//单引号定义的字符串\n$hello = 'hello world';\n//双引号定义的字符串\n$hello = \"hello world\";\n//heredoc语法结构定义的字符串\n$hello = <<<TAG\nhello world\nTAG;\n```\n\nPHP允许我们在双引号串中直接包含字串变量。\n而单引号串中的内容总被认为是普通字符。\n比如：\n\n```php\n$str='hello';\necho \"str is $str\"; //运行结果: str is hello\necho 'str is $str'; //运行结果: str is $str\n```\n\n<h2>字符串的连接</h2>\nPHP中用英文的点号.来连接两个字符串。\n\n```php\n$hello='hello';\n\n$world=' world';\n\n$hi = $hello.$world;\n\necho $hi;//我们可以用echo函数输出一下这个字符串连接。\n```\n\n<h2>去除字符串首尾的空格</h2>\nPHP中有三个函数可以去掉字符串的空格\n+ trim去除一个字符串两端空格。\n+ rtrim是去除一个字符串右部空格，其中的r是right的缩写。\n+ ltrim是去除一个字符串左部空格，其中的l是left的缩写。\n \n例子如下：\n\n```php\necho trim(\" 空格 \").\"<br>\";\necho rtrim(\" 空格 \").\"<br>\";\necho ltrim(\" 空格 \").\"<br>\";\n```\n\n<h2>获取字符串的长度</h2>\n函数strlen()\n\n```php\n$str = 'hello';\n$len = strlen($str);\necho $len;//输出结果是5\n```\nstrlen函数对于计算英文字符是非常的擅长，但是如果有中文汉字，要计算长度该怎么办？\n可以使用mb_strlen()函数获取字符串中中文长度。\n例子如下：\n\n```php\n$str = \"我爱你\";\necho mb_strlen($str,\"UTF8\");//结果：3，此处的UTF8表示中文编码是UTF8格式，中文一般采用UTF8编码\n```\n\n<h2>字符串的截取</h2>\n+ 英文字符串的截取函数substr()\n+ 中文字符串的截取函数mb_substr()\n\n英文字符串的截取函数substr()\n函数说明：substr(字符串变量,开始截取的位置,截取个数）\n例如：\n\n```php\n$str='i love you';\n//截取love这几个字母\necho substr($str, 2, 4);\n//为什么开始位置是2呢，因为substr函数计算字符串位置是从0开始的，也就是0的位置是i,1的位置是空格，l的位置是2。从位置2开始取4个字符，就是love。\n```\n中文字符串的截取函数mb_substr()\n函数说明：mb_substr(字符串变量,开始截取的位置，截取个数, 网页编码）\n例如：\n\n```php\n$str='我爱你，中国';\n//截取中国两个字\necho mb_substr($str, 4, 2, 'utf8');\n//为什么开始位置是4呢，和上一个例子一样，因为mb_substr函数计算汉字位置是从0开始的，也就是0的位置是我,1的位置是爱，4的位置是中。从位置4开始取2个汉字，就是中国。中文编码一般是utf8格式\n```\n\n<h2>查找字符串</h2>\n查找字符串函数strpos();\n函数说明：strpos(要处理的字符串, 要定位的字符串, 定位的起始位置[可选])\n例子：\n\n```php\n$str = 'I want to study at imooc';\n$pos = strpos($str, 'imooc');\necho $pos;//结果显示19，表示从位置0开始，imooc在第19个位置开始出现\n```\n\n<h2>替换字符串</h2>\n替换函数str_replace()\n函数说明：str_replace(要查找的字符串, 要替换的字符串, 被搜索的字符串, 替换进行计数[可选])\n例子：\n\n```php\n$str = 'I want to learn js';\n$replace = str_replace('js', 'php', $str);\necho $replace;//结果显示I want to learn php\n```\n\n<h2>格式化字符串</h2>\n格式化字符串函数sprintf()\n函数说明：sprintf(格式, 要转化的字符串)\n返回：格式化好的字符串\n例子：\n\n```php\n$str = '99.9';\n$result = sprintf('%01.2f', $str);\necho $result;//结果显示99.90\n```\n\n<h2>字符串的合并</h2>\n字符串合并函数implode()\n函数说明：implode(分隔符[可选], 数组)\n返回值：把数组元素组合为一个字符串\n例子：\n\n```php\n$arr = array('Hello', 'World!');\n$result = implode('', $arr);\nprint_r($result);//结果显示Hello World!\n```\n<h2>字符串的分隔</h2>\n字符串分隔函数explode()\n函数说明：explode(分隔符[可选], 字符串)\n返回值：函数返回由字符串组成的数组\n例子：\n\n```php\n$str = 'apple,banana';\n$result = explode(',', $str);\nprint_r($result);//结果显示array('apple','banana')\n```\n\n<h2>字符串的转义</h2>\n字符串转义函数addslashes()\n函数说明：用于对特殊字符加上转义字符，返回一个字符串\n返回值：一个经过转义后的字符串\n例子：\n\n```php\n$str = \"what's your name?\";\necho addslashes($str);//输出：what\\'s your name?\n```\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"php/php字符串","published":1,"updated":"2016-10-17T02:13:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99n005f21xw3azjafls","content":"<p>php字符串<br><a id=\"more\"></a></p>\n<p></p><h2>字符串的定义</h2><br>一个字符串 通过下面的3种方法来定义：<br>1、单引号<br>2、双引号<br>3、heredoc语法结构<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//单引号定义的字符串</span></div><div class=\"line\">$hello = <span class=\"string\">'hello world'</span>;</div><div class=\"line\"><span class=\"comment\">//双引号定义的字符串</span></div><div class=\"line\">$hello = <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\"><span class=\"comment\">//heredoc语法结构定义的字符串</span></div><div class=\"line\">$hello = <span class=\"string\">&lt;&lt;&lt;TAG</span></div><div class=\"line\">hello world</div><div class=\"line\">TAG;</div></pre></td></tr></table></figure>\n<p>PHP允许我们在双引号串中直接包含字串变量。<br>而单引号串中的内容总被认为是普通字符。<br>比如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str=<span class=\"string\">'hello'</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"str is $str\"</span>; <span class=\"comment\">//运行结果: str is hello</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'str is $str'</span>; <span class=\"comment\">//运行结果: str is $str</span></div></pre></td></tr></table></figure>\n<p></p><h2>字符串的连接</h2><br>PHP中用英文的点号.来连接两个字符串。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$hello=<span class=\"string\">'hello'</span>;</div><div class=\"line\"></div><div class=\"line\">$world=<span class=\"string\">' world'</span>;</div><div class=\"line\"></div><div class=\"line\">$hi = $hello.$world;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $hi;<span class=\"comment\">//我们可以用echo函数输出一下这个字符串连接。</span></div></pre></td></tr></table></figure>\n<p></p><h2>去除字符串首尾的空格</h2><br>PHP中有三个函数可以去掉字符串的空格<p></p>\n<ul>\n<li>trim去除一个字符串两端空格。</li>\n<li>rtrim是去除一个字符串右部空格，其中的r是right的缩写。</li>\n<li>ltrim是去除一个字符串左部空格，其中的l是left的缩写。</li>\n</ul>\n<p>例子如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> trim(<span class=\"string\">\" 空格 \"</span>).<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> rtrim(<span class=\"string\">\" 空格 \"</span>).<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> ltrim(<span class=\"string\">\" 空格 \"</span>).<span class=\"string\">\"&lt;br&gt;\"</span>;</div></pre></td></tr></table></figure>\n<p></p><h2>获取字符串的长度</h2><br>函数strlen()<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">'hello'</span>;</div><div class=\"line\">$len = strlen($str);</div><div class=\"line\"><span class=\"keyword\">echo</span> $len;<span class=\"comment\">//输出结果是5</span></div></pre></td></tr></table></figure>\n<p>strlen函数对于计算英文字符是非常的擅长，但是如果有中文汉字，要计算长度该怎么办？<br>可以使用mb_strlen()函数获取字符串中中文长度。<br>例子如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">\"我爱你\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> mb_strlen($str,<span class=\"string\">\"UTF8\"</span>);<span class=\"comment\">//结果：3，此处的UTF8表示中文编码是UTF8格式，中文一般采用UTF8编码</span></div></pre></td></tr></table></figure>\n<p></p><h2>字符串的截取</h2><p></p>\n<ul>\n<li>英文字符串的截取函数substr()</li>\n<li>中文字符串的截取函数mb_substr()</li>\n</ul>\n<p>英文字符串的截取函数substr()<br>函数说明：substr(字符串变量,开始截取的位置,截取个数）<br>例如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str=<span class=\"string\">'i love you'</span>;</div><div class=\"line\"><span class=\"comment\">//截取love这几个字母</span></div><div class=\"line\"><span class=\"keyword\">echo</span> substr($str, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">//为什么开始位置是2呢，因为substr函数计算字符串位置是从0开始的，也就是0的位置是i,1的位置是空格，l的位置是2。从位置2开始取4个字符，就是love。</span></div></pre></td></tr></table></figure>\n<p>中文字符串的截取函数mb_substr()<br>函数说明：mb_substr(字符串变量,开始截取的位置，截取个数, 网页编码）<br>例如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str=<span class=\"string\">'我爱你，中国'</span>;</div><div class=\"line\"><span class=\"comment\">//截取中国两个字</span></div><div class=\"line\"><span class=\"keyword\">echo</span> mb_substr($str, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"string\">'utf8'</span>);</div><div class=\"line\"><span class=\"comment\">//为什么开始位置是4呢，和上一个例子一样，因为mb_substr函数计算汉字位置是从0开始的，也就是0的位置是我,1的位置是爱，4的位置是中。从位置4开始取2个汉字，就是中国。中文编码一般是utf8格式</span></div></pre></td></tr></table></figure>\n<p></p><h2>查找字符串</h2><br>查找字符串函数strpos();<br>函数说明：strpos(要处理的字符串, 要定位的字符串, 定位的起始位置[可选])<br>例子：<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">'I want to study at imooc'</span>;</div><div class=\"line\">$pos = strpos($str, <span class=\"string\">'imooc'</span>);</div><div class=\"line\"><span class=\"keyword\">echo</span> $pos;<span class=\"comment\">//结果显示19，表示从位置0开始，imooc在第19个位置开始出现</span></div></pre></td></tr></table></figure>\n<p></p><h2>替换字符串</h2><br>替换函数str_replace()<br>函数说明：str_replace(要查找的字符串, 要替换的字符串, 被搜索的字符串, 替换进行计数[可选])<br>例子：<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">'I want to learn js'</span>;</div><div class=\"line\">$replace = str_replace(<span class=\"string\">'js'</span>, <span class=\"string\">'php'</span>, $str);</div><div class=\"line\"><span class=\"keyword\">echo</span> $replace;<span class=\"comment\">//结果显示I want to learn php</span></div></pre></td></tr></table></figure>\n<p></p><h2>格式化字符串</h2><br>格式化字符串函数sprintf()<br>函数说明：sprintf(格式, 要转化的字符串)<br>返回：格式化好的字符串<br>例子：<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">'99.9'</span>;</div><div class=\"line\">$result = sprintf(<span class=\"string\">'%01.2f'</span>, $str);</div><div class=\"line\"><span class=\"keyword\">echo</span> $result;<span class=\"comment\">//结果显示99.90</span></div></pre></td></tr></table></figure>\n<p></p><h2>字符串的合并</h2><br>字符串合并函数implode()<br>函数说明：implode(分隔符[可选], 数组)<br>返回值：把数组元素组合为一个字符串<br>例子：<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">'Hello'</span>, <span class=\"string\">'World!'</span>);</div><div class=\"line\">$result = implode(<span class=\"string\">''</span>, $arr);</div><div class=\"line\">print_r($result);<span class=\"comment\">//结果显示Hello World!</span></div></pre></td></tr></table></figure>\n<p></p><h2>字符串的分隔</h2><br>字符串分隔函数explode()<br>函数说明：explode(分隔符[可选], 字符串)<br>返回值：函数返回由字符串组成的数组<br>例子：<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">'apple,banana'</span>;</div><div class=\"line\">$result = explode(<span class=\"string\">','</span>, $str);</div><div class=\"line\">print_r($result);<span class=\"comment\">//结果显示array('apple','banana')</span></div></pre></td></tr></table></figure>\n<p></p><h2>字符串的转义</h2><br>字符串转义函数addslashes()<br>函数说明：用于对特殊字符加上转义字符，返回一个字符串<br>返回值：一个经过转义后的字符串<br>例子：<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">\"what's your name?\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> addslashes($str);<span class=\"comment\">//输出：what\\'s your name?</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>php字符串<br>","more":"</p>\n<p><h2>字符串的定义</h2><br>一个字符串 通过下面的3种方法来定义：<br>1、单引号<br>2、双引号<br>3、heredoc语法结构</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//单引号定义的字符串</span></div><div class=\"line\">$hello = <span class=\"string\">'hello world'</span>;</div><div class=\"line\"><span class=\"comment\">//双引号定义的字符串</span></div><div class=\"line\">$hello = <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\"><span class=\"comment\">//heredoc语法结构定义的字符串</span></div><div class=\"line\">$hello = <span class=\"string\">&lt;&lt;&lt;TAG</div><div class=\"line\">hello world</div><div class=\"line\">TAG;</span></div></pre></td></tr></table></figure>\n<p>PHP允许我们在双引号串中直接包含字串变量。<br>而单引号串中的内容总被认为是普通字符。<br>比如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str=<span class=\"string\">'hello'</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"str is $str\"</span>; <span class=\"comment\">//运行结果: str is hello</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'str is $str'</span>; <span class=\"comment\">//运行结果: str is $str</span></div></pre></td></tr></table></figure>\n<p><h2>字符串的连接</h2><br>PHP中用英文的点号.来连接两个字符串。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$hello=<span class=\"string\">'hello'</span>;</div><div class=\"line\"></div><div class=\"line\">$world=<span class=\"string\">' world'</span>;</div><div class=\"line\"></div><div class=\"line\">$hi = $hello.$world;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $hi;<span class=\"comment\">//我们可以用echo函数输出一下这个字符串连接。</span></div></pre></td></tr></table></figure>\n<p><h2>去除字符串首尾的空格</h2><br>PHP中有三个函数可以去掉字符串的空格</p>\n<ul>\n<li>trim去除一个字符串两端空格。</li>\n<li>rtrim是去除一个字符串右部空格，其中的r是right的缩写。</li>\n<li>ltrim是去除一个字符串左部空格，其中的l是left的缩写。</li>\n</ul>\n<p>例子如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> trim(<span class=\"string\">\" 空格 \"</span>).<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> rtrim(<span class=\"string\">\" 空格 \"</span>).<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> ltrim(<span class=\"string\">\" 空格 \"</span>).<span class=\"string\">\"&lt;br&gt;\"</span>;</div></pre></td></tr></table></figure>\n<p><h2>获取字符串的长度</h2><br>函数strlen()</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">'hello'</span>;</div><div class=\"line\">$len = strlen($str);</div><div class=\"line\"><span class=\"keyword\">echo</span> $len;<span class=\"comment\">//输出结果是5</span></div></pre></td></tr></table></figure>\n<p>strlen函数对于计算英文字符是非常的擅长，但是如果有中文汉字，要计算长度该怎么办？<br>可以使用mb_strlen()函数获取字符串中中文长度。<br>例子如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">\"我爱你\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> mb_strlen($str,<span class=\"string\">\"UTF8\"</span>);<span class=\"comment\">//结果：3，此处的UTF8表示中文编码是UTF8格式，中文一般采用UTF8编码</span></div></pre></td></tr></table></figure>\n<p><h2>字符串的截取</h2></p>\n<ul>\n<li>英文字符串的截取函数substr()</li>\n<li>中文字符串的截取函数mb_substr()</li>\n</ul>\n<p>英文字符串的截取函数substr()<br>函数说明：substr(字符串变量,开始截取的位置,截取个数）<br>例如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str=<span class=\"string\">'i love you'</span>;</div><div class=\"line\"><span class=\"comment\">//截取love这几个字母</span></div><div class=\"line\"><span class=\"keyword\">echo</span> substr($str, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">//为什么开始位置是2呢，因为substr函数计算字符串位置是从0开始的，也就是0的位置是i,1的位置是空格，l的位置是2。从位置2开始取4个字符，就是love。</span></div></pre></td></tr></table></figure>\n<p>中文字符串的截取函数mb_substr()<br>函数说明：mb_substr(字符串变量,开始截取的位置，截取个数, 网页编码）<br>例如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str=<span class=\"string\">'我爱你，中国'</span>;</div><div class=\"line\"><span class=\"comment\">//截取中国两个字</span></div><div class=\"line\"><span class=\"keyword\">echo</span> mb_substr($str, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"string\">'utf8'</span>);</div><div class=\"line\"><span class=\"comment\">//为什么开始位置是4呢，和上一个例子一样，因为mb_substr函数计算汉字位置是从0开始的，也就是0的位置是我,1的位置是爱，4的位置是中。从位置4开始取2个汉字，就是中国。中文编码一般是utf8格式</span></div></pre></td></tr></table></figure>\n<p><h2>查找字符串</h2><br>查找字符串函数strpos();<br>函数说明：strpos(要处理的字符串, 要定位的字符串, 定位的起始位置[可选])<br>例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">'I want to study at imooc'</span>;</div><div class=\"line\">$pos = strpos($str, <span class=\"string\">'imooc'</span>);</div><div class=\"line\"><span class=\"keyword\">echo</span> $pos;<span class=\"comment\">//结果显示19，表示从位置0开始，imooc在第19个位置开始出现</span></div></pre></td></tr></table></figure>\n<p><h2>替换字符串</h2><br>替换函数str_replace()<br>函数说明：str_replace(要查找的字符串, 要替换的字符串, 被搜索的字符串, 替换进行计数[可选])<br>例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">'I want to learn js'</span>;</div><div class=\"line\">$replace = str_replace(<span class=\"string\">'js'</span>, <span class=\"string\">'php'</span>, $str);</div><div class=\"line\"><span class=\"keyword\">echo</span> $replace;<span class=\"comment\">//结果显示I want to learn php</span></div></pre></td></tr></table></figure>\n<p><h2>格式化字符串</h2><br>格式化字符串函数sprintf()<br>函数说明：sprintf(格式, 要转化的字符串)<br>返回：格式化好的字符串<br>例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">'99.9'</span>;</div><div class=\"line\">$result = sprintf(<span class=\"string\">'%01.2f'</span>, $str);</div><div class=\"line\"><span class=\"keyword\">echo</span> $result;<span class=\"comment\">//结果显示99.90</span></div></pre></td></tr></table></figure>\n<p><h2>字符串的合并</h2><br>字符串合并函数implode()<br>函数说明：implode(分隔符[可选], 数组)<br>返回值：把数组元素组合为一个字符串<br>例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">'Hello'</span>, <span class=\"string\">'World!'</span>);</div><div class=\"line\">$result = implode(<span class=\"string\">''</span>, $arr);</div><div class=\"line\">print_r($result);<span class=\"comment\">//结果显示Hello World!</span></div></pre></td></tr></table></figure>\n<p><h2>字符串的分隔</h2><br>字符串分隔函数explode()<br>函数说明：explode(分隔符[可选], 字符串)<br>返回值：函数返回由字符串组成的数组<br>例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">'apple,banana'</span>;</div><div class=\"line\">$result = explode(<span class=\"string\">','</span>, $str);</div><div class=\"line\">print_r($result);<span class=\"comment\">//结果显示array('apple','banana')</span></div></pre></td></tr></table></figure>\n<p><h2>字符串的转义</h2><br>字符串转义函数addslashes()<br>函数说明：用于对特殊字符加上转义字符，返回一个字符串<br>返回值：一个经过转义后的字符串<br>例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">\"what's your name?\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> addslashes($str);<span class=\"comment\">//输出：what\\'s your name?</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"php常量","date":"2016-10-12T08:20:51.000Z","_content":"php常量的分类和定义\n<!-- more -->\n常量可以理解为值不变的量（如圆周率）；或者是常量值被定义后，在脚本的其他任何地方都不可以被改变。\nPHP中的常量分为\n+ 自定义常量\n+ 系统常量\n常量主要功效是可以避免重复定义，篡改变量值。在我们进行团队开发时，或者代码量很大的时候，对于一些第一次定义后不改变的量，如果我们使用变量，在不知情的情况下，使用同一变量名时，变量值就会被替换掉，从而会引发服务器执行错误的任务。\n\n<h2>自定义常量</h2>\n```php\ndefine()函数的语法格式为：\nbool define(string $constant_name, mixed $value[, $case_sensitive = true])\n//参数\n//“constant_name”  必选参数 常量名称\n//即标志符，常量的命名规则与变量的一致，但是要注意哦，它可不带美元符号哦。\n//“value”          必选参数 常量的值\n//“case_sensitive” 可选参数 指定是否大小写敏感，\n//设定为true表示不敏感，一般不指定第三个参数的情况下，默认第三个参数的值为false。\n（注： string表示参数类型为字符串类型，mixed表示参数类型可以接受为多种不同的类型，case_sensitive = true表示默认为布尔类型TRUE）\n\n<?php\ndefine(\"PI\",3.14);\necho PI;\necho \"<br />\";\n\n$p = \"PII\";\ndefine($p,3.14);\necho PII;\n?>\n\n结果\n3.14\n3.14\n```\n\n<h2>系统常量</h2>\n系统常量是PHP已经定义好的常量，我们可以直接拿来使用，常见的系统常量有：\n（1）__FILE__ :php程序文件名。它可以帮助我们获取当前文件在服务器的物理位置。\n（2）__LINE__ :PHP程序文件行数。它可以告诉我们，当前代码在第几行。\n（3）PHP_VERSION\n:当前解析器的版本号。它可以告诉我们当前PHP解析器的版本号，我们可以提前知道我们的PHP代码是否可被该PHP解析器解析。\n（4）PHP_OS\n：执行当前PHP版本的操作系统名称。它可以告诉我们服务器所用的操作系统名称，我们可以根据该操作系统优化我们的代码。\n\n```php\n<?php\necho __FILE__;\necho \"<br />\";\necho __LINE__;\necho \"<br />\";\necho PHP_VERSION;\necho \"<br />\";\necho PHP_OS;\necho \"<br />\";\n?>\n\n结果\n/Library/WebServer/Documents/test.php\n13\n5.5.36\nDarwin\n```\n\n<h2>常量取值</h2>\n+ 常量名直接获取值\n+ 使用constant()函数\n它和直接使用常量名输出的效果是一样的，但函数可以动态的输出不同的常量，在使用上要灵活、方便，其语法格式如下\n\n```php\n<?php\ndefine(\"PI\",3.14);\n$r=1;\n$area = PI*$r*$r; //计算圆的面积\n?>\n\n<?php \n$p=\"\";\n//定义圆周率的两种取值\ndefine(\"PI1\",3.14);\ndefine(\"PI2\",3.142);\n//定义值的精度\n$height = \"中\";\n//根据精度返回常量名，将常量变成了一个可变的常量\nif($height == \"中\"){\n    $p = \"PI1\";\n}else if($height == \"低\"){\n\t$p = \"PI2\";\n}\n$r=1;\n$area= constant($p)*$r*$r;\necho $area;\n?>\n```\n\n<h2>如何判定常量是否被定义</h2>\ndefined()函数判断一个常量是否已经定义\n\n```php\n其语法格式为：\nbool defined(string constants_name)\n\n\n<?php \ndefine(\"PI1\",3.14);\n$p = \"PI1\";\n$is1 = defined($p);\n$is2 = defined(\"PI2\");\nvar_dump($is1);\nvar_dump($is2);\n?>\n\n结果\nbool(true) bool(false)\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/php/php常量.md","raw":"---\ntitle: php常量\ndate: 2016-10-12 16:20:51\ncategories:\n---\nphp常量的分类和定义\n<!-- more -->\n常量可以理解为值不变的量（如圆周率）；或者是常量值被定义后，在脚本的其他任何地方都不可以被改变。\nPHP中的常量分为\n+ 自定义常量\n+ 系统常量\n常量主要功效是可以避免重复定义，篡改变量值。在我们进行团队开发时，或者代码量很大的时候，对于一些第一次定义后不改变的量，如果我们使用变量，在不知情的情况下，使用同一变量名时，变量值就会被替换掉，从而会引发服务器执行错误的任务。\n\n<h2>自定义常量</h2>\n```php\ndefine()函数的语法格式为：\nbool define(string $constant_name, mixed $value[, $case_sensitive = true])\n//参数\n//“constant_name”  必选参数 常量名称\n//即标志符，常量的命名规则与变量的一致，但是要注意哦，它可不带美元符号哦。\n//“value”          必选参数 常量的值\n//“case_sensitive” 可选参数 指定是否大小写敏感，\n//设定为true表示不敏感，一般不指定第三个参数的情况下，默认第三个参数的值为false。\n（注： string表示参数类型为字符串类型，mixed表示参数类型可以接受为多种不同的类型，case_sensitive = true表示默认为布尔类型TRUE）\n\n<?php\ndefine(\"PI\",3.14);\necho PI;\necho \"<br />\";\n\n$p = \"PII\";\ndefine($p,3.14);\necho PII;\n?>\n\n结果\n3.14\n3.14\n```\n\n<h2>系统常量</h2>\n系统常量是PHP已经定义好的常量，我们可以直接拿来使用，常见的系统常量有：\n（1）__FILE__ :php程序文件名。它可以帮助我们获取当前文件在服务器的物理位置。\n（2）__LINE__ :PHP程序文件行数。它可以告诉我们，当前代码在第几行。\n（3）PHP_VERSION\n:当前解析器的版本号。它可以告诉我们当前PHP解析器的版本号，我们可以提前知道我们的PHP代码是否可被该PHP解析器解析。\n（4）PHP_OS\n：执行当前PHP版本的操作系统名称。它可以告诉我们服务器所用的操作系统名称，我们可以根据该操作系统优化我们的代码。\n\n```php\n<?php\necho __FILE__;\necho \"<br />\";\necho __LINE__;\necho \"<br />\";\necho PHP_VERSION;\necho \"<br />\";\necho PHP_OS;\necho \"<br />\";\n?>\n\n结果\n/Library/WebServer/Documents/test.php\n13\n5.5.36\nDarwin\n```\n\n<h2>常量取值</h2>\n+ 常量名直接获取值\n+ 使用constant()函数\n它和直接使用常量名输出的效果是一样的，但函数可以动态的输出不同的常量，在使用上要灵活、方便，其语法格式如下\n\n```php\n<?php\ndefine(\"PI\",3.14);\n$r=1;\n$area = PI*$r*$r; //计算圆的面积\n?>\n\n<?php \n$p=\"\";\n//定义圆周率的两种取值\ndefine(\"PI1\",3.14);\ndefine(\"PI2\",3.142);\n//定义值的精度\n$height = \"中\";\n//根据精度返回常量名，将常量变成了一个可变的常量\nif($height == \"中\"){\n    $p = \"PI1\";\n}else if($height == \"低\"){\n\t$p = \"PI2\";\n}\n$r=1;\n$area= constant($p)*$r*$r;\necho $area;\n?>\n```\n\n<h2>如何判定常量是否被定义</h2>\ndefined()函数判断一个常量是否已经定义\n\n```php\n其语法格式为：\nbool defined(string constants_name)\n\n\n<?php \ndefine(\"PI1\",3.14);\n$p = \"PI1\";\n$is1 = defined($p);\n$is2 = defined(\"PI2\");\nvar_dump($is1);\nvar_dump($is2);\n?>\n\n结果\nbool(true) bool(false)\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"php/php常量","published":1,"updated":"2016-10-13T03:33:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99o005h21xw16uohg6p","content":"<p>php常量的分类和定义<br><a id=\"more\"></a><br>常量可以理解为值不变的量（如圆周率）；或者是常量值被定义后，在脚本的其他任何地方都不可以被改变。<br>PHP中的常量分为</p>\n<ul>\n<li>自定义常量</li>\n<li>系统常量<br>常量主要功效是可以避免重复定义，篡改变量值。在我们进行团队开发时，或者代码量很大的时候，对于一些第一次定义后不改变的量，如果我们使用变量，在不知情的情况下，使用同一变量名时，变量值就会被替换掉，从而会引发服务器执行错误的任务。</li>\n</ul>\n<p></p><h2>自定义常量</h2><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">define()函数的语法格式为：</div><div class=\"line\">bool define(string $constant_name, mixed $value[, $case_sensitive = <span class=\"keyword\">true</span>])</div><div class=\"line\"><span class=\"comment\">//参数</span></div><div class=\"line\"><span class=\"comment\">//“constant_name”  必选参数 常量名称</span></div><div class=\"line\"><span class=\"comment\">//即标志符，常量的命名规则与变量的一致，但是要注意哦，它可不带美元符号哦。</span></div><div class=\"line\"><span class=\"comment\">//“value”          必选参数 常量的值</span></div><div class=\"line\"><span class=\"comment\">//“case_sensitive” 可选参数 指定是否大小写敏感，</span></div><div class=\"line\"><span class=\"comment\">//设定为true表示不敏感，一般不指定第三个参数的情况下，默认第三个参数的值为false。</span></div><div class=\"line\">（注： string表示参数类型为字符串类型，mixed表示参数类型可以接受为多种不同的类型，case_sensitive = <span class=\"keyword\">true</span>表示默认为布尔类型<span class=\"keyword\">TRUE</span>）</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">define(<span class=\"string\">\"PI\"</span>,<span class=\"number\">3.14</span>);</div><div class=\"line\"><span class=\"keyword\">echo</span> PI;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"></div><div class=\"line\">$p = <span class=\"string\">\"PII\"</span>;</div><div class=\"line\">define($p,<span class=\"number\">3.14</span>);</div><div class=\"line\"><span class=\"keyword\">echo</span> PII;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\"><span class=\"number\">3.14</span></div><div class=\"line\"><span class=\"number\">3.14</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h2>系统常量</h2><br>系统常量是PHP已经定义好的常量，我们可以直接拿来使用，常见的系统常量有：<br>（1）<strong>FILE</strong> :php程序文件名。它可以帮助我们获取当前文件在服务器的物理位置。<br>（2）<strong>LINE</strong> :PHP程序文件行数。它可以告诉我们，当前代码在第几行。<br>（3）PHP_VERSION<br>:当前解析器的版本号。它可以告诉我们当前PHP解析器的版本号，我们可以提前知道我们的PHP代码是否可被该PHP解析器解析。<br>（4）PHP_OS<br>：执行当前PHP版本的操作系统名称。它可以告诉我们服务器所用的操作系统名称，我们可以根据该操作系统优化我们的代码。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"keyword\">__FILE__</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"keyword\">__LINE__</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> PHP_VERSION;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> PHP_OS;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">/Library/WebServer/Documents/test.php</div><div class=\"line\"><span class=\"number\">13</span></div><div class=\"line\"><span class=\"number\">5.5</span><span class=\"number\">.36</span></div><div class=\"line\">Darwin</div></pre></td></tr></table></figure>\n<p></p><h2>常量取值</h2><p></p>\n<ul>\n<li>常量名直接获取值</li>\n<li>使用constant()函数<br>它和直接使用常量名输出的效果是一样的，但函数可以动态的输出不同的常量，在使用上要灵活、方便，其语法格式如下</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">define(<span class=\"string\">\"PI\"</span>,<span class=\"number\">3.14</span>);</div><div class=\"line\">$r=<span class=\"number\">1</span>;</div><div class=\"line\">$area = PI*$r*$r; <span class=\"comment\">//计算圆的面积</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">$p=<span class=\"string\">\"\"</span>;</div><div class=\"line\"><span class=\"comment\">//定义圆周率的两种取值</span></div><div class=\"line\">define(<span class=\"string\">\"PI1\"</span>,<span class=\"number\">3.14</span>);</div><div class=\"line\">define(<span class=\"string\">\"PI2\"</span>,<span class=\"number\">3.142</span>);</div><div class=\"line\"><span class=\"comment\">//定义值的精度</span></div><div class=\"line\">$height = <span class=\"string\">\"中\"</span>;</div><div class=\"line\"><span class=\"comment\">//根据精度返回常量名，将常量变成了一个可变的常量</span></div><div class=\"line\"><span class=\"keyword\">if</span>($height == <span class=\"string\">\"中\"</span>)&#123;</div><div class=\"line\">    $p = <span class=\"string\">\"PI1\"</span>;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>($height == <span class=\"string\">\"低\"</span>)&#123;</div><div class=\"line\">\t$p = <span class=\"string\">\"PI2\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">$r=<span class=\"number\">1</span>;</div><div class=\"line\">$area= constant($p)*$r*$r;</div><div class=\"line\"><span class=\"keyword\">echo</span> $area;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p></p><h2>如何判定常量是否被定义</h2><br>defined()函数判断一个常量是否已经定义<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">其语法格式为：</div><div class=\"line\">bool defined(string constants_name)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">define(<span class=\"string\">\"PI1\"</span>,<span class=\"number\">3.14</span>);</div><div class=\"line\">$p = <span class=\"string\">\"PI1\"</span>;</div><div class=\"line\">$is1 = defined($p);</div><div class=\"line\">$is2 = defined(<span class=\"string\">\"PI2\"</span>);</div><div class=\"line\">var_dump($is1);</div><div class=\"line\">var_dump($is2);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">bool(<span class=\"keyword\">true</span>) bool(<span class=\"keyword\">false</span>)</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>php常量的分类和定义<br>","more":"<br>常量可以理解为值不变的量（如圆周率）；或者是常量值被定义后，在脚本的其他任何地方都不可以被改变。<br>PHP中的常量分为</p>\n<ul>\n<li>自定义常量</li>\n<li>系统常量<br>常量主要功效是可以避免重复定义，篡改变量值。在我们进行团队开发时，或者代码量很大的时候，对于一些第一次定义后不改变的量，如果我们使用变量，在不知情的情况下，使用同一变量名时，变量值就会被替换掉，从而会引发服务器执行错误的任务。</li>\n</ul>\n<p><h2>自定义常量</h2><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">define()函数的语法格式为：</div><div class=\"line\">bool define(string $constant_name, mixed $value[, $case_sensitive = <span class=\"keyword\">true</span>])</div><div class=\"line\"><span class=\"comment\">//参数</span></div><div class=\"line\"><span class=\"comment\">//“constant_name”  必选参数 常量名称</span></div><div class=\"line\"><span class=\"comment\">//即标志符，常量的命名规则与变量的一致，但是要注意哦，它可不带美元符号哦。</span></div><div class=\"line\"><span class=\"comment\">//“value”          必选参数 常量的值</span></div><div class=\"line\"><span class=\"comment\">//“case_sensitive” 可选参数 指定是否大小写敏感，</span></div><div class=\"line\"><span class=\"comment\">//设定为true表示不敏感，一般不指定第三个参数的情况下，默认第三个参数的值为false。</span></div><div class=\"line\">（注： string表示参数类型为字符串类型，mixed表示参数类型可以接受为多种不同的类型，case_sensitive = <span class=\"keyword\">true</span>表示默认为布尔类型<span class=\"keyword\">TRUE</span>）</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">define(<span class=\"string\">\"PI\"</span>,<span class=\"number\">3.14</span>);</div><div class=\"line\"><span class=\"keyword\">echo</span> PI;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"></div><div class=\"line\">$p = <span class=\"string\">\"PII\"</span>;</div><div class=\"line\">define($p,<span class=\"number\">3.14</span>);</div><div class=\"line\"><span class=\"keyword\">echo</span> PII;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\"><span class=\"number\">3.14</span></div><div class=\"line\"><span class=\"number\">3.14</span></div></pre></td></tr></table></figure></p>\n<p><h2>系统常量</h2><br>系统常量是PHP已经定义好的常量，我们可以直接拿来使用，常见的系统常量有：<br>（1）<strong>FILE</strong> :php程序文件名。它可以帮助我们获取当前文件在服务器的物理位置。<br>（2）<strong>LINE</strong> :PHP程序文件行数。它可以告诉我们，当前代码在第几行。<br>（3）PHP_VERSION<br>:当前解析器的版本号。它可以告诉我们当前PHP解析器的版本号，我们可以提前知道我们的PHP代码是否可被该PHP解析器解析。<br>（4）PHP_OS<br>：执行当前PHP版本的操作系统名称。它可以告诉我们服务器所用的操作系统名称，我们可以根据该操作系统优化我们的代码。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"keyword\">__FILE__</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"keyword\">__LINE__</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> PHP_VERSION;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> PHP_OS;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">/Library/WebServer/Documents/test.php</div><div class=\"line\"><span class=\"number\">13</span></div><div class=\"line\"><span class=\"number\">5.5</span><span class=\"number\">.36</span></div><div class=\"line\">Darwin</div></pre></td></tr></table></figure>\n<p><h2>常量取值</h2></p>\n<ul>\n<li>常量名直接获取值</li>\n<li>使用constant()函数<br>它和直接使用常量名输出的效果是一样的，但函数可以动态的输出不同的常量，在使用上要灵活、方便，其语法格式如下</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">define(<span class=\"string\">\"PI\"</span>,<span class=\"number\">3.14</span>);</div><div class=\"line\">$r=<span class=\"number\">1</span>;</div><div class=\"line\">$area = PI*$r*$r; <span class=\"comment\">//计算圆的面积</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">$p=<span class=\"string\">\"\"</span>;</div><div class=\"line\"><span class=\"comment\">//定义圆周率的两种取值</span></div><div class=\"line\">define(<span class=\"string\">\"PI1\"</span>,<span class=\"number\">3.14</span>);</div><div class=\"line\">define(<span class=\"string\">\"PI2\"</span>,<span class=\"number\">3.142</span>);</div><div class=\"line\"><span class=\"comment\">//定义值的精度</span></div><div class=\"line\">$height = <span class=\"string\">\"中\"</span>;</div><div class=\"line\"><span class=\"comment\">//根据精度返回常量名，将常量变成了一个可变的常量</span></div><div class=\"line\"><span class=\"keyword\">if</span>($height == <span class=\"string\">\"中\"</span>)&#123;</div><div class=\"line\">    $p = <span class=\"string\">\"PI1\"</span>;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>($height == <span class=\"string\">\"低\"</span>)&#123;</div><div class=\"line\">\t$p = <span class=\"string\">\"PI2\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">$r=<span class=\"number\">1</span>;</div><div class=\"line\">$area= constant($p)*$r*$r;</div><div class=\"line\"><span class=\"keyword\">echo</span> $area;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p><h2>如何判定常量是否被定义</h2><br>defined()函数判断一个常量是否已经定义</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">其语法格式为：</div><div class=\"line\">bool defined(string constants_name)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">define(<span class=\"string\">\"PI1\"</span>,<span class=\"number\">3.14</span>);</div><div class=\"line\">$p = <span class=\"string\">\"PI1\"</span>;</div><div class=\"line\">$is1 = defined($p);</div><div class=\"line\">$is2 = defined(<span class=\"string\">\"PI2\"</span>);</div><div class=\"line\">var_dump($is1);</div><div class=\"line\">var_dump($is2);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">bool(<span class=\"keyword\">true</span>) bool(<span class=\"keyword\">false</span>)</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"php数组","date":"2016-10-14T03:20:49.000Z","_content":"php数组\n<!-- more -->\nPHP有两种数组：\n+ 索引数组\n+ 关联数组\n索引和关联两个词都是针对数组的键而言的。\n先介绍下索引数组，索引数组是指数组的键是整数的数组，并且键的整数顺序是从0开始，依次类推。\n\n<h2>定义</h2>\n```php\n$arr = array();\n//表示创建一个空数组，并把创建的空数组赋值给变量$arr。\n```\n\n<h2>索引数组</h2>\n<h3>索引数组初始化</h3>\n```php\n<?php\n//创建一个索引数组，索引数组的键是“0”，值是“苹果”\n$fruit = array(\"苹果\",\"香蕉\",\"菠萝\");\nprint_r($fruit);\n?>\n\n结果\nArray\n( \n\t[0] => 苹果 \n\t[1] => 香蕉 \n\t[2] => 菠萝 \n)\n```\n<h3>索引数组赋值</h3>\n索引数组赋值有三种方式:\n+ 第一种：用数组变量的名字后面跟一个中括号的方式赋值，当然，索引数组中，中括号内的键一定是整数。比如，$arr[0]='苹果';\n+ 第二种：用array()创建一个空数组，使用=>符号来分隔键和值，左侧表示键，右侧表示值。当然，索引数组中，键一定是整数。比如，array('0'=>'苹果');\n+ 第三种：用array()创建一个空数组，直接在数组里用英文的单引号'或者英文的双引号\"赋值，数组会默认建立从0开始的整数的键。比如array('苹果');这个数组相当于array('0'=>'苹果');\n\n<h3>索引数组访问</h3>\n```php\n<?php\n//从数组变量$arr中，读取键为0的值\n$arr = array('苹果','香蕉');\n$arr0 = $arr[0];\nif( isset($arr0) ) {print_r($arr0);}\n?>\n\n<?php\n$fruit=array('苹果','香蕉','菠萝');\nfor($index=0; $index<3; $index++){\n    echo '<br>数组第'.$index.'值是：'.$fruit[$index];\n}\n?>\n\n<?php\n$fruit=array('苹果','香蕉','菠萝');\nforeach($fruit as $key=>$value){\n    echo '<br>第'.$key.'值是：'.$value;\n}\n?>\n```\n\n\n<h2>关联数组</h2>\n<h3>关联数组初始化</h3>\n```php\n<?php\n//创建一个关联数组，关联数组的键“orange”，值是“橘子”\n$fruit = array(\n    'apple'=>\"苹果\",\n    \"banana\"=>\"香蕉\",\n    \"pineapple\"=>\"菠萝\",\n    );\n    print_r($fruit);\n?>\n```\n<h3>关联数组赋值</h3>\n+ 第一种：用数组变量的名字后面跟一个中括号的方式赋值，当然，关联数组中，中括号内的键一定是字符串。比如，$arr['apple']='苹果';\n \n+ 第二种：用array()创建一个空数组，使用=>符号来分隔键和值，左侧表示键，右侧表示值。当然，关联数组中，键一定是字符串。比如，array('apple'=>'苹果');\n\n<h3>关联数组访问</h3>\n用数组变量的名字后跟中括号+键的方式来访问数组中的值，键使用单引号或者双引号括起来。\n\n```php\n<?php\n//从数组变量$arr中，读取键为apple的值\n$arr = array('apple'=>\"苹果\",'banana'=>\"香蕉\",'pineapple'=>\"菠萝\");\n$arr0 = $arr['apple'];\nif( isset($arr0) ) {print_r($arr0);}\n?>\n```\nforeach循环可以将数组里的所有值都访问到，下面我们展示下，用foreach循环访问关联数组里的值。\n\n```php\n<?php\n$fruit=array('apple'=>\"苹果\",'banana'=>\"香蕉\",'pineapple'=>\"菠萝\");\nforeach($fruit as $key=>$value){\n    echo '<br>键是：'.$key.'，对应的值是：'.$value;\n}\n\n?>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/php/php数组.md","raw":"---\ntitle: php数组\ndate: 2016-10-14 11:20:49\ncategories: php\n---\nphp数组\n<!-- more -->\nPHP有两种数组：\n+ 索引数组\n+ 关联数组\n索引和关联两个词都是针对数组的键而言的。\n先介绍下索引数组，索引数组是指数组的键是整数的数组，并且键的整数顺序是从0开始，依次类推。\n\n<h2>定义</h2>\n```php\n$arr = array();\n//表示创建一个空数组，并把创建的空数组赋值给变量$arr。\n```\n\n<h2>索引数组</h2>\n<h3>索引数组初始化</h3>\n```php\n<?php\n//创建一个索引数组，索引数组的键是“0”，值是“苹果”\n$fruit = array(\"苹果\",\"香蕉\",\"菠萝\");\nprint_r($fruit);\n?>\n\n结果\nArray\n( \n\t[0] => 苹果 \n\t[1] => 香蕉 \n\t[2] => 菠萝 \n)\n```\n<h3>索引数组赋值</h3>\n索引数组赋值有三种方式:\n+ 第一种：用数组变量的名字后面跟一个中括号的方式赋值，当然，索引数组中，中括号内的键一定是整数。比如，$arr[0]='苹果';\n+ 第二种：用array()创建一个空数组，使用=>符号来分隔键和值，左侧表示键，右侧表示值。当然，索引数组中，键一定是整数。比如，array('0'=>'苹果');\n+ 第三种：用array()创建一个空数组，直接在数组里用英文的单引号'或者英文的双引号\"赋值，数组会默认建立从0开始的整数的键。比如array('苹果');这个数组相当于array('0'=>'苹果');\n\n<h3>索引数组访问</h3>\n```php\n<?php\n//从数组变量$arr中，读取键为0的值\n$arr = array('苹果','香蕉');\n$arr0 = $arr[0];\nif( isset($arr0) ) {print_r($arr0);}\n?>\n\n<?php\n$fruit=array('苹果','香蕉','菠萝');\nfor($index=0; $index<3; $index++){\n    echo '<br>数组第'.$index.'值是：'.$fruit[$index];\n}\n?>\n\n<?php\n$fruit=array('苹果','香蕉','菠萝');\nforeach($fruit as $key=>$value){\n    echo '<br>第'.$key.'值是：'.$value;\n}\n?>\n```\n\n\n<h2>关联数组</h2>\n<h3>关联数组初始化</h3>\n```php\n<?php\n//创建一个关联数组，关联数组的键“orange”，值是“橘子”\n$fruit = array(\n    'apple'=>\"苹果\",\n    \"banana\"=>\"香蕉\",\n    \"pineapple\"=>\"菠萝\",\n    );\n    print_r($fruit);\n?>\n```\n<h3>关联数组赋值</h3>\n+ 第一种：用数组变量的名字后面跟一个中括号的方式赋值，当然，关联数组中，中括号内的键一定是字符串。比如，$arr['apple']='苹果';\n \n+ 第二种：用array()创建一个空数组，使用=>符号来分隔键和值，左侧表示键，右侧表示值。当然，关联数组中，键一定是字符串。比如，array('apple'=>'苹果');\n\n<h3>关联数组访问</h3>\n用数组变量的名字后跟中括号+键的方式来访问数组中的值，键使用单引号或者双引号括起来。\n\n```php\n<?php\n//从数组变量$arr中，读取键为apple的值\n$arr = array('apple'=>\"苹果\",'banana'=>\"香蕉\",'pineapple'=>\"菠萝\");\n$arr0 = $arr['apple'];\nif( isset($arr0) ) {print_r($arr0);}\n?>\n```\nforeach循环可以将数组里的所有值都访问到，下面我们展示下，用foreach循环访问关联数组里的值。\n\n```php\n<?php\n$fruit=array('apple'=>\"苹果\",'banana'=>\"香蕉\",'pineapple'=>\"菠萝\");\nforeach($fruit as $key=>$value){\n    echo '<br>键是：'.$key.'，对应的值是：'.$value;\n}\n\n?>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"php/php数组","published":1,"updated":"2016-10-14T03:43:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99q005j21xwywv2rdkr","content":"<p>php数组<br><a id=\"more\"></a><br>PHP有两种数组：</p>\n<ul>\n<li>索引数组</li>\n<li>关联数组<br>索引和关联两个词都是针对数组的键而言的。<br>先介绍下索引数组，索引数组是指数组的键是整数的数组，并且键的整数顺序是从0开始，依次类推。</li>\n</ul>\n<p></p><h2>定义</h2><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$arr = <span class=\"keyword\">array</span>();</div><div class=\"line\"><span class=\"comment\">//表示创建一个空数组，并把创建的空数组赋值给变量$arr。</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h2>索引数组</h2><p></p>\n<p></p><h3>索引数组初始化</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//创建一个索引数组，索引数组的键是“0”，值是“苹果”</span></div><div class=\"line\">$fruit = <span class=\"keyword\">array</span>(<span class=\"string\">\"苹果\"</span>,<span class=\"string\">\"香蕉\"</span>,<span class=\"string\">\"菠萝\"</span>);</div><div class=\"line\">print_r($fruit);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\"><span class=\"keyword\">Array</span></div><div class=\"line\">( </div><div class=\"line\">\t[<span class=\"number\">0</span>] =&gt; 苹果 </div><div class=\"line\">\t[<span class=\"number\">1</span>] =&gt; 香蕉 </div><div class=\"line\">\t[<span class=\"number\">2</span>] =&gt; 菠萝 </div><div class=\"line\">)</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>索引数组赋值</h3><br>索引数组赋值有三种方式:<p></p>\n<ul>\n<li>第一种：用数组变量的名字后面跟一个中括号的方式赋值，当然，索引数组中，中括号内的键一定是整数。比如，$arr[0]=’苹果’;</li>\n<li>第二种：用array()创建一个空数组，使用=&gt;符号来分隔键和值，左侧表示键，右侧表示值。当然，索引数组中，键一定是整数。比如，array(‘0’=&gt;’苹果’);</li>\n<li>第三种：用array()创建一个空数组，直接在数组里用英文的单引号’或者英文的双引号”赋值，数组会默认建立从0开始的整数的键。比如array(‘苹果’);这个数组相当于array(‘0’=&gt;’苹果’);</li>\n</ul>\n<p></p><h3>索引数组访问</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//从数组变量$arr中，读取键为0的值</span></div><div class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">'苹果'</span>,<span class=\"string\">'香蕉'</span>);</div><div class=\"line\">$arr0 = $arr[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">isset</span>($arr0) ) &#123;print_r($arr0);&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$fruit=<span class=\"keyword\">array</span>(<span class=\"string\">'苹果'</span>,<span class=\"string\">'香蕉'</span>,<span class=\"string\">'菠萝'</span>);</div><div class=\"line\"><span class=\"keyword\">for</span>($index=<span class=\"number\">0</span>; $index&lt;<span class=\"number\">3</span>; $index++)&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;br&gt;数组第'</span>.$index.<span class=\"string\">'值是：'</span>.$fruit[$index];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$fruit=<span class=\"keyword\">array</span>(<span class=\"string\">'苹果'</span>,<span class=\"string\">'香蕉'</span>,<span class=\"string\">'菠萝'</span>);</div><div class=\"line\"><span class=\"keyword\">foreach</span>($fruit <span class=\"keyword\">as</span> $key=&gt;$value)&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;br&gt;第'</span>.$key.<span class=\"string\">'值是：'</span>.$value;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h2>关联数组</h2><p></p>\n<p></p><h3>关联数组初始化</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//创建一个关联数组，关联数组的键“orange”，值是“橘子”</span></div><div class=\"line\">$fruit = <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"string\">'apple'</span>=&gt;<span class=\"string\">\"苹果\"</span>,</div><div class=\"line\">    <span class=\"string\">\"banana\"</span>=&gt;<span class=\"string\">\"香蕉\"</span>,</div><div class=\"line\">    <span class=\"string\">\"pineapple\"</span>=&gt;<span class=\"string\">\"菠萝\"</span>,</div><div class=\"line\">    );</div><div class=\"line\">    print_r($fruit);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h3>关联数组赋值</h3><p></p>\n<ul>\n<li><p>第一种：用数组变量的名字后面跟一个中括号的方式赋值，当然，关联数组中，中括号内的键一定是字符串。比如，$arr[‘apple’]=’苹果’;</p>\n</li>\n<li><p>第二种：用array()创建一个空数组，使用=&gt;符号来分隔键和值，左侧表示键，右侧表示值。当然，关联数组中，键一定是字符串。比如，array(‘apple’=&gt;’苹果’);</p>\n</li>\n</ul>\n<p></p><h3>关联数组访问</h3><br>用数组变量的名字后跟中括号+键的方式来访问数组中的值，键使用单引号或者双引号括起来。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//从数组变量$arr中，读取键为apple的值</span></div><div class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">'apple'</span>=&gt;<span class=\"string\">\"苹果\"</span>,<span class=\"string\">'banana'</span>=&gt;<span class=\"string\">\"香蕉\"</span>,<span class=\"string\">'pineapple'</span>=&gt;<span class=\"string\">\"菠萝\"</span>);</div><div class=\"line\">$arr0 = $arr[<span class=\"string\">'apple'</span>];</div><div class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">isset</span>($arr0) ) &#123;print_r($arr0);&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p>foreach循环可以将数组里的所有值都访问到，下面我们展示下，用foreach循环访问关联数组里的值。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$fruit=<span class=\"keyword\">array</span>(<span class=\"string\">'apple'</span>=&gt;<span class=\"string\">\"苹果\"</span>,<span class=\"string\">'banana'</span>=&gt;<span class=\"string\">\"香蕉\"</span>,<span class=\"string\">'pineapple'</span>=&gt;<span class=\"string\">\"菠萝\"</span>);</div><div class=\"line\"><span class=\"keyword\">foreach</span>($fruit <span class=\"keyword\">as</span> $key=&gt;$value)&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;br&gt;键是：'</span>.$key.<span class=\"string\">'，对应的值是：'</span>.$value;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>php数组<br>","more":"<br>PHP有两种数组：</p>\n<ul>\n<li>索引数组</li>\n<li>关联数组<br>索引和关联两个词都是针对数组的键而言的。<br>先介绍下索引数组，索引数组是指数组的键是整数的数组，并且键的整数顺序是从0开始，依次类推。</li>\n</ul>\n<p><h2>定义</h2><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$arr = <span class=\"keyword\">array</span>();</div><div class=\"line\"><span class=\"comment\">//表示创建一个空数组，并把创建的空数组赋值给变量$arr。</span></div></pre></td></tr></table></figure></p>\n<p><h2>索引数组</h2></p>\n<p><h3>索引数组初始化</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//创建一个索引数组，索引数组的键是“0”，值是“苹果”</span></div><div class=\"line\">$fruit = <span class=\"keyword\">array</span>(<span class=\"string\">\"苹果\"</span>,<span class=\"string\">\"香蕉\"</span>,<span class=\"string\">\"菠萝\"</span>);</div><div class=\"line\">print_r($fruit);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\"><span class=\"keyword\">Array</span></div><div class=\"line\">( </div><div class=\"line\">\t[<span class=\"number\">0</span>] =&gt; 苹果 </div><div class=\"line\">\t[<span class=\"number\">1</span>] =&gt; 香蕉 </div><div class=\"line\">\t[<span class=\"number\">2</span>] =&gt; 菠萝 </div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p><h3>索引数组赋值</h3><br>索引数组赋值有三种方式:</p>\n<ul>\n<li>第一种：用数组变量的名字后面跟一个中括号的方式赋值，当然，索引数组中，中括号内的键一定是整数。比如，$arr[0]=’苹果’;</li>\n<li>第二种：用array()创建一个空数组，使用=&gt;符号来分隔键和值，左侧表示键，右侧表示值。当然，索引数组中，键一定是整数。比如，array(‘0’=&gt;’苹果’);</li>\n<li>第三种：用array()创建一个空数组，直接在数组里用英文的单引号’或者英文的双引号”赋值，数组会默认建立从0开始的整数的键。比如array(‘苹果’);这个数组相当于array(‘0’=&gt;’苹果’);</li>\n</ul>\n<p><h3>索引数组访问</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//从数组变量$arr中，读取键为0的值</span></div><div class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">'苹果'</span>,<span class=\"string\">'香蕉'</span>);</div><div class=\"line\">$arr0 = $arr[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">isset</span>($arr0) ) &#123;print_r($arr0);&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$fruit=<span class=\"keyword\">array</span>(<span class=\"string\">'苹果'</span>,<span class=\"string\">'香蕉'</span>,<span class=\"string\">'菠萝'</span>);</div><div class=\"line\"><span class=\"keyword\">for</span>($index=<span class=\"number\">0</span>; $index&lt;<span class=\"number\">3</span>; $index++)&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;br&gt;数组第'</span>.$index.<span class=\"string\">'值是：'</span>.$fruit[$index];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$fruit=<span class=\"keyword\">array</span>(<span class=\"string\">'苹果'</span>,<span class=\"string\">'香蕉'</span>,<span class=\"string\">'菠萝'</span>);</div><div class=\"line\"><span class=\"keyword\">foreach</span>($fruit <span class=\"keyword\">as</span> $key=&gt;$value)&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;br&gt;第'</span>.$key.<span class=\"string\">'值是：'</span>.$value;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p><h2>关联数组</h2></p>\n<p><h3>关联数组初始化</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//创建一个关联数组，关联数组的键“orange”，值是“橘子”</span></div><div class=\"line\">$fruit = <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"string\">'apple'</span>=&gt;<span class=\"string\">\"苹果\"</span>,</div><div class=\"line\">    <span class=\"string\">\"banana\"</span>=&gt;<span class=\"string\">\"香蕉\"</span>,</div><div class=\"line\">    <span class=\"string\">\"pineapple\"</span>=&gt;<span class=\"string\">\"菠萝\"</span>,</div><div class=\"line\">    );</div><div class=\"line\">    print_r($fruit);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p><h3>关联数组赋值</h3></p>\n<ul>\n<li><p>第一种：用数组变量的名字后面跟一个中括号的方式赋值，当然，关联数组中，中括号内的键一定是字符串。比如，$arr[‘apple’]=’苹果’;</p>\n</li>\n<li><p>第二种：用array()创建一个空数组，使用=&gt;符号来分隔键和值，左侧表示键，右侧表示值。当然，关联数组中，键一定是字符串。比如，array(‘apple’=&gt;’苹果’);</p>\n</li>\n</ul>\n<p><h3>关联数组访问</h3><br>用数组变量的名字后跟中括号+键的方式来访问数组中的值，键使用单引号或者双引号括起来。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//从数组变量$arr中，读取键为apple的值</span></div><div class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">'apple'</span>=&gt;<span class=\"string\">\"苹果\"</span>,<span class=\"string\">'banana'</span>=&gt;<span class=\"string\">\"香蕉\"</span>,<span class=\"string\">'pineapple'</span>=&gt;<span class=\"string\">\"菠萝\"</span>);</div><div class=\"line\">$arr0 = $arr[<span class=\"string\">'apple'</span>];</div><div class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">isset</span>($arr0) ) &#123;print_r($arr0);&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p>foreach循环可以将数组里的所有值都访问到，下面我们展示下，用foreach循环访问关联数组里的值。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$fruit=<span class=\"keyword\">array</span>(<span class=\"string\">'apple'</span>=&gt;<span class=\"string\">\"苹果\"</span>,<span class=\"string\">'banana'</span>=&gt;<span class=\"string\">\"香蕉\"</span>,<span class=\"string\">'pineapple'</span>=&gt;<span class=\"string\">\"菠萝\"</span>);</div><div class=\"line\"><span class=\"keyword\">foreach</span>($fruit <span class=\"keyword\">as</span> $key=&gt;$value)&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;br&gt;键是：'</span>.$key.<span class=\"string\">'，对应的值是：'</span>.$value;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"php文件系统","date":"2016-10-17T04:38:53.000Z","_content":"php文件系统\n<!-- more -->\n\n<h2>读取文件内容</h2>\nPHP具有丰富的文件操作函数，最简单的读取文件的函数为file_get_contents，可以将整个文件全部读取到一个字符串中。\n\n```php\n$content = file_get_contents('./test.txt');\n```\nfile_get_contents也可以通过参数控制读取内容的开始点以及长度。\n\n```php\n$content = file_get_contents('./test.txt', null, null, 100, 500);\n```\nPHP也提供类似于C语言操作文件的方法，使用fopen，fgets，fread等方法，fgets可以从文件指针中读取一行，freads可以读取指定长度的字符串。\n\n```php\n$fp = fopen('./text.txt', 'rb');\nwhile(!feof($fp)) {\n    echo fgets($fp); //读取一行\n}\nfclose($fp);\n \n$fp = fopen('./text.txt', 'rb');\n$contents = '';\nwhile(!feof($fp)) {\n    $contents .= fread($fp, 4096); //一次读取4096个字符\n}\nfclose($fp);\n```\n使用fopen打开的文件，最好使用fclose关闭文件指针，以避免文件句柄被占用。\n\n<h2>判断文件是否存在</h2>\n一般情况下在对文件进行操作的时候需要先判断文件是否存在，PHP中常用来判断文件存在的函数有两个is_file与file_exists.\n\n```php\n$filename = './test.txt';\nif (file_exists($filename)) {\n    echo file_get_contents($filename);\n}\n```\n如果只是判断文件存在，使用file_exists就行，file_exists不仅可以判断文件是否存在，同时也可以判断目录是否存在，从函数名可以看出，is_file是确切的判断给定的路径是否是一个文件。\n\n```php\n$filename = './test.txt';\nif (is_file($filename)) {\n    echo file_get_contents($filename);\n}\n```\n更加精确的可以使用is_readable与is_writeable在文件是否存在的基础上，判断文件是否可读与可写。\n\n```php\n$filename = './test.txt';\nif (is_writeable($filename)) {\n    file_put_contents($filename, 'test');\n}\nif (is_readable($filename)) {\n    echo file_get_contents($filename);\n}\n```\n\n<h2>取得文件的修改时间</h2>\n文件有很多元属性，包括：文件的所有者、创建时间、修改时间、最后的访问时间等。\n+ fileowner：获得文件的所有者\n+ filectime：获取文件的创建时间\n+ filemtime：获取文件的修改时间\n+ fileatime：获取文件的访问时间\n其中最常用的是文件的修改时间，通过文件的修改时间，可以判断文件的时效性，经常用在静态文件或者缓存数据的更新。\n\n```php\n$mtime = filemtime($filename);\necho '修改时间：'.date('Y-m-d H:i:s', filemtime($filename));\n```\n\n<h2>取得文件的大小</h2>\n通过filesize函数可以取得文件的大小，文件大小是以字节数表示的。\n\n```php\n$filename = '/data/webroot/usercode/resource/test.txt';\n$size = filesize($filename);\n```\n如果要转换文件大小的单位，可以自己定义函数来实现。\n\n```php\nfunction getsize($size, $format = 'kb') {\n    $p = 0;\n    if ($format == 'kb') {\n        $p = 1;\n    } elseif ($format == 'mb') {\n        $p = 2;\n    } elseif ($format == 'gb') {\n        $p = 3;\n    }\n    $size /= pow(1024, $p);\n    return number_format($size, 3);\n}\n\n$filename = '/data/webroot/usercode/code/resource/test.txt';\n$size = filesize($filename);\n\n$size = getsize($size, 'kb'); //进行单位转换\necho $size.'kb';\n```\n值得注意的是，没法通过简单的函数来取得目录的大小，目录的大小是该目录下所有子目录以及文件大小的总和，因此需要通过递归的方法来循环计算目录的大小。\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/php/php文件系统.md","raw":"---\ntitle: php文件系统\ndate: 2016-10-17 12:38:53\ncategories: php\n---\nphp文件系统\n<!-- more -->\n\n<h2>读取文件内容</h2>\nPHP具有丰富的文件操作函数，最简单的读取文件的函数为file_get_contents，可以将整个文件全部读取到一个字符串中。\n\n```php\n$content = file_get_contents('./test.txt');\n```\nfile_get_contents也可以通过参数控制读取内容的开始点以及长度。\n\n```php\n$content = file_get_contents('./test.txt', null, null, 100, 500);\n```\nPHP也提供类似于C语言操作文件的方法，使用fopen，fgets，fread等方法，fgets可以从文件指针中读取一行，freads可以读取指定长度的字符串。\n\n```php\n$fp = fopen('./text.txt', 'rb');\nwhile(!feof($fp)) {\n    echo fgets($fp); //读取一行\n}\nfclose($fp);\n \n$fp = fopen('./text.txt', 'rb');\n$contents = '';\nwhile(!feof($fp)) {\n    $contents .= fread($fp, 4096); //一次读取4096个字符\n}\nfclose($fp);\n```\n使用fopen打开的文件，最好使用fclose关闭文件指针，以避免文件句柄被占用。\n\n<h2>判断文件是否存在</h2>\n一般情况下在对文件进行操作的时候需要先判断文件是否存在，PHP中常用来判断文件存在的函数有两个is_file与file_exists.\n\n```php\n$filename = './test.txt';\nif (file_exists($filename)) {\n    echo file_get_contents($filename);\n}\n```\n如果只是判断文件存在，使用file_exists就行，file_exists不仅可以判断文件是否存在，同时也可以判断目录是否存在，从函数名可以看出，is_file是确切的判断给定的路径是否是一个文件。\n\n```php\n$filename = './test.txt';\nif (is_file($filename)) {\n    echo file_get_contents($filename);\n}\n```\n更加精确的可以使用is_readable与is_writeable在文件是否存在的基础上，判断文件是否可读与可写。\n\n```php\n$filename = './test.txt';\nif (is_writeable($filename)) {\n    file_put_contents($filename, 'test');\n}\nif (is_readable($filename)) {\n    echo file_get_contents($filename);\n}\n```\n\n<h2>取得文件的修改时间</h2>\n文件有很多元属性，包括：文件的所有者、创建时间、修改时间、最后的访问时间等。\n+ fileowner：获得文件的所有者\n+ filectime：获取文件的创建时间\n+ filemtime：获取文件的修改时间\n+ fileatime：获取文件的访问时间\n其中最常用的是文件的修改时间，通过文件的修改时间，可以判断文件的时效性，经常用在静态文件或者缓存数据的更新。\n\n```php\n$mtime = filemtime($filename);\necho '修改时间：'.date('Y-m-d H:i:s', filemtime($filename));\n```\n\n<h2>取得文件的大小</h2>\n通过filesize函数可以取得文件的大小，文件大小是以字节数表示的。\n\n```php\n$filename = '/data/webroot/usercode/resource/test.txt';\n$size = filesize($filename);\n```\n如果要转换文件大小的单位，可以自己定义函数来实现。\n\n```php\nfunction getsize($size, $format = 'kb') {\n    $p = 0;\n    if ($format == 'kb') {\n        $p = 1;\n    } elseif ($format == 'mb') {\n        $p = 2;\n    } elseif ($format == 'gb') {\n        $p = 3;\n    }\n    $size /= pow(1024, $p);\n    return number_format($size, 3);\n}\n\n$filename = '/data/webroot/usercode/code/resource/test.txt';\n$size = filesize($filename);\n\n$size = getsize($size, 'kb'); //进行单位转换\necho $size.'kb';\n```\n值得注意的是，没法通过简单的函数来取得目录的大小，目录的大小是该目录下所有子目录以及文件大小的总和，因此需要通过递归的方法来循环计算目录的大小。\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"php/php文件系统","published":1,"updated":"2016-10-17T05:00:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99q005l21xwa0d1thqb","content":"<p>php文件系统<br><a id=\"more\"></a></p>\n<p></p><h2>读取文件内容</h2><br>PHP具有丰富的文件操作函数，最简单的读取文件的函数为file_get_contents，可以将整个文件全部读取到一个字符串中。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$content = file_get_contents(<span class=\"string\">'./test.txt'</span>);</div></pre></td></tr></table></figure>\n<p>file_get_contents也可以通过参数控制读取内容的开始点以及长度。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$content = file_get_contents(<span class=\"string\">'./test.txt'</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"number\">100</span>, <span class=\"number\">500</span>);</div></pre></td></tr></table></figure>\n<p>PHP也提供类似于C语言操作文件的方法，使用fopen，fgets，fread等方法，fgets可以从文件指针中读取一行，freads可以读取指定长度的字符串。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$fp = fopen(<span class=\"string\">'./text.txt'</span>, <span class=\"string\">'rb'</span>);</div><div class=\"line\"><span class=\"keyword\">while</span>(!feof($fp)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> fgets($fp); <span class=\"comment\">//读取一行</span></div><div class=\"line\">&#125;</div><div class=\"line\">fclose($fp);</div><div class=\"line\"> </div><div class=\"line\">$fp = fopen(<span class=\"string\">'./text.txt'</span>, <span class=\"string\">'rb'</span>);</div><div class=\"line\">$contents = <span class=\"string\">''</span>;</div><div class=\"line\"><span class=\"keyword\">while</span>(!feof($fp)) &#123;</div><div class=\"line\">    $contents .= fread($fp, <span class=\"number\">4096</span>); <span class=\"comment\">//一次读取4096个字符</span></div><div class=\"line\">&#125;</div><div class=\"line\">fclose($fp);</div></pre></td></tr></table></figure>\n<p>使用fopen打开的文件，最好使用fclose关闭文件指针，以避免文件句柄被占用。</p>\n<p></p><h2>判断文件是否存在</h2><br>一般情况下在对文件进行操作的时候需要先判断文件是否存在，PHP中常用来判断文件存在的函数有两个is_file与file_exists.<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$filename = <span class=\"string\">'./test.txt'</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (file_exists($filename)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> file_get_contents($filename);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果只是判断文件存在，使用file_exists就行，file_exists不仅可以判断文件是否存在，同时也可以判断目录是否存在，从函数名可以看出，is_file是确切的判断给定的路径是否是一个文件。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$filename = <span class=\"string\">'./test.txt'</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (is_file($filename)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> file_get_contents($filename);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>更加精确的可以使用is_readable与is_writeable在文件是否存在的基础上，判断文件是否可读与可写。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$filename = <span class=\"string\">'./test.txt'</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (is_writeable($filename)) &#123;</div><div class=\"line\">    file_put_contents($filename, <span class=\"string\">'test'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (is_readable($filename)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> file_get_contents($filename);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p></p><h2>取得文件的修改时间</h2><br>文件有很多元属性，包括：文件的所有者、创建时间、修改时间、最后的访问时间等。<p></p>\n<ul>\n<li>fileowner：获得文件的所有者</li>\n<li>filectime：获取文件的创建时间</li>\n<li>filemtime：获取文件的修改时间</li>\n<li>fileatime：获取文件的访问时间<br>其中最常用的是文件的修改时间，通过文件的修改时间，可以判断文件的时效性，经常用在静态文件或者缓存数据的更新。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$mtime = filemtime($filename);</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'修改时间：'</span>.date(<span class=\"string\">'Y-m-d H:i:s'</span>, filemtime($filename));</div></pre></td></tr></table></figure>\n<p></p><h2>取得文件的大小</h2><br>通过filesize函数可以取得文件的大小，文件大小是以字节数表示的。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$filename = <span class=\"string\">'/data/webroot/usercode/resource/test.txt'</span>;</div><div class=\"line\">$size = filesize($filename);</div></pre></td></tr></table></figure>\n<p>如果要转换文件大小的单位，可以自己定义函数来实现。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getsize</span><span class=\"params\">($size, $format = <span class=\"string\">'kb'</span>)</span> </span>&#123;</div><div class=\"line\">    $p = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> ($format == <span class=\"string\">'kb'</span>) &#123;</div><div class=\"line\">        $p = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">elseif</span> ($format == <span class=\"string\">'mb'</span>) &#123;</div><div class=\"line\">        $p = <span class=\"number\">2</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">elseif</span> ($format == <span class=\"string\">'gb'</span>) &#123;</div><div class=\"line\">        $p = <span class=\"number\">3</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    $size /= pow(<span class=\"number\">1024</span>, $p);</div><div class=\"line\">    <span class=\"keyword\">return</span> number_format($size, <span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$filename = <span class=\"string\">'/data/webroot/usercode/code/resource/test.txt'</span>;</div><div class=\"line\">$size = filesize($filename);</div><div class=\"line\"></div><div class=\"line\">$size = getsize($size, <span class=\"string\">'kb'</span>); <span class=\"comment\">//进行单位转换</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $size.<span class=\"string\">'kb'</span>;</div></pre></td></tr></table></figure>\n<p>值得注意的是，没法通过简单的函数来取得目录的大小，目录的大小是该目录下所有子目录以及文件大小的总和，因此需要通过递归的方法来循环计算目录的大小。</p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>php文件系统<br>","more":"</p>\n<p><h2>读取文件内容</h2><br>PHP具有丰富的文件操作函数，最简单的读取文件的函数为file_get_contents，可以将整个文件全部读取到一个字符串中。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$content = file_get_contents(<span class=\"string\">'./test.txt'</span>);</div></pre></td></tr></table></figure>\n<p>file_get_contents也可以通过参数控制读取内容的开始点以及长度。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$content = file_get_contents(<span class=\"string\">'./test.txt'</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"number\">100</span>, <span class=\"number\">500</span>);</div></pre></td></tr></table></figure>\n<p>PHP也提供类似于C语言操作文件的方法，使用fopen，fgets，fread等方法，fgets可以从文件指针中读取一行，freads可以读取指定长度的字符串。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$fp = fopen(<span class=\"string\">'./text.txt'</span>, <span class=\"string\">'rb'</span>);</div><div class=\"line\"><span class=\"keyword\">while</span>(!feof($fp)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> fgets($fp); <span class=\"comment\">//读取一行</span></div><div class=\"line\">&#125;</div><div class=\"line\">fclose($fp);</div><div class=\"line\"> </div><div class=\"line\">$fp = fopen(<span class=\"string\">'./text.txt'</span>, <span class=\"string\">'rb'</span>);</div><div class=\"line\">$contents = <span class=\"string\">''</span>;</div><div class=\"line\"><span class=\"keyword\">while</span>(!feof($fp)) &#123;</div><div class=\"line\">    $contents .= fread($fp, <span class=\"number\">4096</span>); <span class=\"comment\">//一次读取4096个字符</span></div><div class=\"line\">&#125;</div><div class=\"line\">fclose($fp);</div></pre></td></tr></table></figure>\n<p>使用fopen打开的文件，最好使用fclose关闭文件指针，以避免文件句柄被占用。</p>\n<p><h2>判断文件是否存在</h2><br>一般情况下在对文件进行操作的时候需要先判断文件是否存在，PHP中常用来判断文件存在的函数有两个is_file与file_exists.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$filename = <span class=\"string\">'./test.txt'</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (file_exists($filename)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> file_get_contents($filename);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果只是判断文件存在，使用file_exists就行，file_exists不仅可以判断文件是否存在，同时也可以判断目录是否存在，从函数名可以看出，is_file是确切的判断给定的路径是否是一个文件。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$filename = <span class=\"string\">'./test.txt'</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (is_file($filename)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> file_get_contents($filename);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>更加精确的可以使用is_readable与is_writeable在文件是否存在的基础上，判断文件是否可读与可写。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$filename = <span class=\"string\">'./test.txt'</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (is_writeable($filename)) &#123;</div><div class=\"line\">    file_put_contents($filename, <span class=\"string\">'test'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (is_readable($filename)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> file_get_contents($filename);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><h2>取得文件的修改时间</h2><br>文件有很多元属性，包括：文件的所有者、创建时间、修改时间、最后的访问时间等。</p>\n<ul>\n<li>fileowner：获得文件的所有者</li>\n<li>filectime：获取文件的创建时间</li>\n<li>filemtime：获取文件的修改时间</li>\n<li>fileatime：获取文件的访问时间<br>其中最常用的是文件的修改时间，通过文件的修改时间，可以判断文件的时效性，经常用在静态文件或者缓存数据的更新。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$mtime = filemtime($filename);</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'修改时间：'</span>.date(<span class=\"string\">'Y-m-d H:i:s'</span>, filemtime($filename));</div></pre></td></tr></table></figure>\n<p><h2>取得文件的大小</h2><br>通过filesize函数可以取得文件的大小，文件大小是以字节数表示的。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$filename = <span class=\"string\">'/data/webroot/usercode/resource/test.txt'</span>;</div><div class=\"line\">$size = filesize($filename);</div></pre></td></tr></table></figure>\n<p>如果要转换文件大小的单位，可以自己定义函数来实现。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getsize</span><span class=\"params\">($size, $format = <span class=\"string\">'kb'</span>)</span> </span>&#123;</div><div class=\"line\">    $p = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> ($format == <span class=\"string\">'kb'</span>) &#123;</div><div class=\"line\">        $p = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">elseif</span> ($format == <span class=\"string\">'mb'</span>) &#123;</div><div class=\"line\">        $p = <span class=\"number\">2</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">elseif</span> ($format == <span class=\"string\">'gb'</span>) &#123;</div><div class=\"line\">        $p = <span class=\"number\">3</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    $size /= pow(<span class=\"number\">1024</span>, $p);</div><div class=\"line\">    <span class=\"keyword\">return</span> number_format($size, <span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$filename = <span class=\"string\">'/data/webroot/usercode/code/resource/test.txt'</span>;</div><div class=\"line\">$size = filesize($filename);</div><div class=\"line\"></div><div class=\"line\">$size = getsize($size, <span class=\"string\">'kb'</span>); <span class=\"comment\">//进行单位转换</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $size.<span class=\"string\">'kb'</span>;</div></pre></td></tr></table></figure>\n<p>值得注意的是，没法通过简单的函数来取得目录的大小，目录的大小是该目录下所有子目录以及文件大小的总和，因此需要通过递归的方法来循环计算目录的大小。</p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"php日期和时间","date":"2016-10-17T05:00:08.000Z","_content":"php日期和时间\n<!-- more -->\n\n<h2>取得当前的Unix时间戳</h2>\nUNIX 时间戳（英文叫做：timestamp）是 PHP 中关于时间与日期的一个很重要的概念，它表示从 1970年1月1日 00:00:00 到当前时间的秒数之和。\nPHP提供了内置函数 time() 来取得服务器当前时间的时间戳。那么获取当前的UNIX时间戳就很简单了。\n\n```php\n$time = time();\necho $time;//1396193923，这个数字表示从1970年1月1日 00:00:00 到我输出这个脚本时经历了1396193923秒\n```\n\n<h2>取得当前的日期</h2>\nphp内置了date()函数，来取得当前的日期。\n函数说明：date(时间戳的格式, 规定时间戳【默认是当前的日期和时间，可选】)\n返回值：函数日期和时间\n例子：\n\n```php\n//date函数，第二个参数取默认值的情况\necho date(\"Y-m-d\");//2014-03-30\n//date函数，第二个参数有值的情况\necho date(\"Y-m-d\",'1396193923');//2014-03-30,1396193923表示2014-03-30的unix时间戳\n```\n<h2>取得日期的Unix时间戳</h2>\nPHP提供了内置函数strtotime实现功能：获取某个日期的时间戳，或获取某个时间的时间戳。例如：\n\n```php\necho strtotime('2014-04-29');//1398700800，这个数字表示从1970年1月1日 00:00:00 到2014年4月29号经历了1398700800秒\n\necho strtotime('2014-04-29 00:00:01');//1398700801，这个数字表示从1970年1月1日 00:00:00 到2014-04-29 00:00:01时经历了1398700801秒\n\n//大家发现上面的规律了吗，其实strtotime('2014-04-29')相当于strtotime('2014-04-29 00:00:00')\n```\n\n<h2>将格式化的日期字符串转换为Unix时间戳</h2>\nstrtotime函数预期接受一个包含美国英语日期格式的字符串并尝试将其解析为 Unix 时间戳。\n函数说明：strtotime(要解析的时间字符串, 计算返回值的时间戳【默认是当前的时间，可选】)\n返回值：成功则返回时间戳，否则返回 FALSE\n比如\n\n```php\necho strtotime(\"now\");//相当于将英文单词now直接等于现在的日期和时间，并把这个日期时间转化为unix时间戳。这个效果跟echo time();一样。\necho strtotime(\"+1 seconds\");//相当于将现在的日期和时间加上了1秒，并把这个日期时间转化为unix时间戳。这个效果跟echo time()+1;一样。\necho strtotime(\"+1 day\");//相当于将现在的日期和时间加上了1天。\necho strtotime(\"+1 week\");//相当于将现在的日期和时间加上了1周。\necho strtotime(\"+1 week 3 days 7 hours 5 seconds\");//相当于将现在的日期和时间加上了1周3天7小时5秒。\n```\n\n<h2>格式化格林威治（GMT）标准时间</h2>\ngmdate函数能格式化一个GMT的日期和时间，返回的是格林威治标准时（GMT）。\n举个例子，我们现在所在的中国时区是东八区，领先格林威治时间8个小时，有时候也叫GMT+8，那么服务器运行以下脚本返回的时间应该是这样的：\n当前时间假定是2014-05-01 15:15:22\n\n```php\necho date('Y-m-d H:i:s', time()); //输出为：2014-05-01 15:15:22 \necho gmdate('Y-m-d H:i:s', time()); //输出为：2014-05-01 07:15:22 因为格林威治时间是现在中国时区的时间减去8个小时，所以相对于现在时间要少8个小时\n```\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/php/php日期和时间.md","raw":"---\ntitle: php日期和时间\ndate: 2016-10-17 13:00:08\ncategories: php\n---\nphp日期和时间\n<!-- more -->\n\n<h2>取得当前的Unix时间戳</h2>\nUNIX 时间戳（英文叫做：timestamp）是 PHP 中关于时间与日期的一个很重要的概念，它表示从 1970年1月1日 00:00:00 到当前时间的秒数之和。\nPHP提供了内置函数 time() 来取得服务器当前时间的时间戳。那么获取当前的UNIX时间戳就很简单了。\n\n```php\n$time = time();\necho $time;//1396193923，这个数字表示从1970年1月1日 00:00:00 到我输出这个脚本时经历了1396193923秒\n```\n\n<h2>取得当前的日期</h2>\nphp内置了date()函数，来取得当前的日期。\n函数说明：date(时间戳的格式, 规定时间戳【默认是当前的日期和时间，可选】)\n返回值：函数日期和时间\n例子：\n\n```php\n//date函数，第二个参数取默认值的情况\necho date(\"Y-m-d\");//2014-03-30\n//date函数，第二个参数有值的情况\necho date(\"Y-m-d\",'1396193923');//2014-03-30,1396193923表示2014-03-30的unix时间戳\n```\n<h2>取得日期的Unix时间戳</h2>\nPHP提供了内置函数strtotime实现功能：获取某个日期的时间戳，或获取某个时间的时间戳。例如：\n\n```php\necho strtotime('2014-04-29');//1398700800，这个数字表示从1970年1月1日 00:00:00 到2014年4月29号经历了1398700800秒\n\necho strtotime('2014-04-29 00:00:01');//1398700801，这个数字表示从1970年1月1日 00:00:00 到2014-04-29 00:00:01时经历了1398700801秒\n\n//大家发现上面的规律了吗，其实strtotime('2014-04-29')相当于strtotime('2014-04-29 00:00:00')\n```\n\n<h2>将格式化的日期字符串转换为Unix时间戳</h2>\nstrtotime函数预期接受一个包含美国英语日期格式的字符串并尝试将其解析为 Unix 时间戳。\n函数说明：strtotime(要解析的时间字符串, 计算返回值的时间戳【默认是当前的时间，可选】)\n返回值：成功则返回时间戳，否则返回 FALSE\n比如\n\n```php\necho strtotime(\"now\");//相当于将英文单词now直接等于现在的日期和时间，并把这个日期时间转化为unix时间戳。这个效果跟echo time();一样。\necho strtotime(\"+1 seconds\");//相当于将现在的日期和时间加上了1秒，并把这个日期时间转化为unix时间戳。这个效果跟echo time()+1;一样。\necho strtotime(\"+1 day\");//相当于将现在的日期和时间加上了1天。\necho strtotime(\"+1 week\");//相当于将现在的日期和时间加上了1周。\necho strtotime(\"+1 week 3 days 7 hours 5 seconds\");//相当于将现在的日期和时间加上了1周3天7小时5秒。\n```\n\n<h2>格式化格林威治（GMT）标准时间</h2>\ngmdate函数能格式化一个GMT的日期和时间，返回的是格林威治标准时（GMT）。\n举个例子，我们现在所在的中国时区是东八区，领先格林威治时间8个小时，有时候也叫GMT+8，那么服务器运行以下脚本返回的时间应该是这样的：\n当前时间假定是2014-05-01 15:15:22\n\n```php\necho date('Y-m-d H:i:s', time()); //输出为：2014-05-01 15:15:22 \necho gmdate('Y-m-d H:i:s', time()); //输出为：2014-05-01 07:15:22 因为格林威治时间是现在中国时区的时间减去8个小时，所以相对于现在时间要少8个小时\n```\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"php/php日期和时间","published":1,"updated":"2016-10-17T05:58:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99r005n21xw2dvkicj7","content":"<p>php日期和时间<br><a id=\"more\"></a></p>\n<p></p><h2>取得当前的Unix时间戳</h2><br>UNIX 时间戳（英文叫做：timestamp）是 PHP 中关于时间与日期的一个很重要的概念，它表示从 1970年1月1日 00:00:00 到当前时间的秒数之和。<br>PHP提供了内置函数 time() 来取得服务器当前时间的时间戳。那么获取当前的UNIX时间戳就很简单了。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$time = time();</div><div class=\"line\"><span class=\"keyword\">echo</span> $time;<span class=\"comment\">//1396193923，这个数字表示从1970年1月1日 00:00:00 到我输出这个脚本时经历了1396193923秒</span></div></pre></td></tr></table></figure>\n<p></p><h2>取得当前的日期</h2><br>php内置了date()函数，来取得当前的日期。<br>函数说明：date(时间戳的格式, 规定时间戳【默认是当前的日期和时间，可选】)<br>返回值：函数日期和时间<br>例子：<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//date函数，第二个参数取默认值的情况</span></div><div class=\"line\"><span class=\"keyword\">echo</span> date(<span class=\"string\">\"Y-m-d\"</span>);<span class=\"comment\">//2014-03-30</span></div><div class=\"line\"><span class=\"comment\">//date函数，第二个参数有值的情况</span></div><div class=\"line\"><span class=\"keyword\">echo</span> date(<span class=\"string\">\"Y-m-d\"</span>,<span class=\"string\">'1396193923'</span>);<span class=\"comment\">//2014-03-30,1396193923表示2014-03-30的unix时间戳</span></div></pre></td></tr></table></figure>\n<p></p><h2>取得日期的Unix时间戳</h2><br>PHP提供了内置函数strtotime实现功能：获取某个日期的时间戳，或获取某个时间的时间戳。例如：<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> strtotime(<span class=\"string\">'2014-04-29'</span>);<span class=\"comment\">//1398700800，这个数字表示从1970年1月1日 00:00:00 到2014年4月29号经历了1398700800秒</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> strtotime(<span class=\"string\">'2014-04-29 00:00:01'</span>);<span class=\"comment\">//1398700801，这个数字表示从1970年1月1日 00:00:00 到2014-04-29 00:00:01时经历了1398700801秒</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//大家发现上面的规律了吗，其实strtotime('2014-04-29')相当于strtotime('2014-04-29 00:00:00')</span></div></pre></td></tr></table></figure>\n<p></p><h2>将格式化的日期字符串转换为Unix时间戳</h2><br>strtotime函数预期接受一个包含美国英语日期格式的字符串并尝试将其解析为 Unix 时间戳。<br>函数说明：strtotime(要解析的时间字符串, 计算返回值的时间戳【默认是当前的时间，可选】)<br>返回值：成功则返回时间戳，否则返回 FALSE<br>比如<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> strtotime(<span class=\"string\">\"now\"</span>);<span class=\"comment\">//相当于将英文单词now直接等于现在的日期和时间，并把这个日期时间转化为unix时间戳。这个效果跟echo time();一样。</span></div><div class=\"line\"><span class=\"keyword\">echo</span> strtotime(<span class=\"string\">\"+1 seconds\"</span>);<span class=\"comment\">//相当于将现在的日期和时间加上了1秒，并把这个日期时间转化为unix时间戳。这个效果跟echo time()+1;一样。</span></div><div class=\"line\"><span class=\"keyword\">echo</span> strtotime(<span class=\"string\">\"+1 day\"</span>);<span class=\"comment\">//相当于将现在的日期和时间加上了1天。</span></div><div class=\"line\"><span class=\"keyword\">echo</span> strtotime(<span class=\"string\">\"+1 week\"</span>);<span class=\"comment\">//相当于将现在的日期和时间加上了1周。</span></div><div class=\"line\"><span class=\"keyword\">echo</span> strtotime(<span class=\"string\">\"+1 week 3 days 7 hours 5 seconds\"</span>);<span class=\"comment\">//相当于将现在的日期和时间加上了1周3天7小时5秒。</span></div></pre></td></tr></table></figure>\n<p></p><h2>格式化格林威治（GMT）标准时间</h2><br>gmdate函数能格式化一个GMT的日期和时间，返回的是格林威治标准时（GMT）。<br>举个例子，我们现在所在的中国时区是东八区，领先格林威治时间8个小时，有时候也叫GMT+8，那么服务器运行以下脚本返回的时间应该是这样的：<br>当前时间假定是2014-05-01 15:15:22<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> date(<span class=\"string\">'Y-m-d H:i:s'</span>, time()); <span class=\"comment\">//输出为：2014-05-01 15:15:22 </span></div><div class=\"line\"><span class=\"keyword\">echo</span> gmdate(<span class=\"string\">'Y-m-d H:i:s'</span>, time()); <span class=\"comment\">//输出为：2014-05-01 07:15:22 因为格林威治时间是现在中国时区的时间减去8个小时，所以相对于现在时间要少8个小时</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>php日期和时间<br>","more":"</p>\n<p><h2>取得当前的Unix时间戳</h2><br>UNIX 时间戳（英文叫做：timestamp）是 PHP 中关于时间与日期的一个很重要的概念，它表示从 1970年1月1日 00:00:00 到当前时间的秒数之和。<br>PHP提供了内置函数 time() 来取得服务器当前时间的时间戳。那么获取当前的UNIX时间戳就很简单了。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$time = time();</div><div class=\"line\"><span class=\"keyword\">echo</span> $time;<span class=\"comment\">//1396193923，这个数字表示从1970年1月1日 00:00:00 到我输出这个脚本时经历了1396193923秒</span></div></pre></td></tr></table></figure>\n<p><h2>取得当前的日期</h2><br>php内置了date()函数，来取得当前的日期。<br>函数说明：date(时间戳的格式, 规定时间戳【默认是当前的日期和时间，可选】)<br>返回值：函数日期和时间<br>例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//date函数，第二个参数取默认值的情况</span></div><div class=\"line\"><span class=\"keyword\">echo</span> date(<span class=\"string\">\"Y-m-d\"</span>);<span class=\"comment\">//2014-03-30</span></div><div class=\"line\"><span class=\"comment\">//date函数，第二个参数有值的情况</span></div><div class=\"line\"><span class=\"keyword\">echo</span> date(<span class=\"string\">\"Y-m-d\"</span>,<span class=\"string\">'1396193923'</span>);<span class=\"comment\">//2014-03-30,1396193923表示2014-03-30的unix时间戳</span></div></pre></td></tr></table></figure>\n<p><h2>取得日期的Unix时间戳</h2><br>PHP提供了内置函数strtotime实现功能：获取某个日期的时间戳，或获取某个时间的时间戳。例如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> strtotime(<span class=\"string\">'2014-04-29'</span>);<span class=\"comment\">//1398700800，这个数字表示从1970年1月1日 00:00:00 到2014年4月29号经历了1398700800秒</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> strtotime(<span class=\"string\">'2014-04-29 00:00:01'</span>);<span class=\"comment\">//1398700801，这个数字表示从1970年1月1日 00:00:00 到2014-04-29 00:00:01时经历了1398700801秒</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//大家发现上面的规律了吗，其实strtotime('2014-04-29')相当于strtotime('2014-04-29 00:00:00')</span></div></pre></td></tr></table></figure>\n<p><h2>将格式化的日期字符串转换为Unix时间戳</h2><br>strtotime函数预期接受一个包含美国英语日期格式的字符串并尝试将其解析为 Unix 时间戳。<br>函数说明：strtotime(要解析的时间字符串, 计算返回值的时间戳【默认是当前的时间，可选】)<br>返回值：成功则返回时间戳，否则返回 FALSE<br>比如</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> strtotime(<span class=\"string\">\"now\"</span>);<span class=\"comment\">//相当于将英文单词now直接等于现在的日期和时间，并把这个日期时间转化为unix时间戳。这个效果跟echo time();一样。</span></div><div class=\"line\"><span class=\"keyword\">echo</span> strtotime(<span class=\"string\">\"+1 seconds\"</span>);<span class=\"comment\">//相当于将现在的日期和时间加上了1秒，并把这个日期时间转化为unix时间戳。这个效果跟echo time()+1;一样。</span></div><div class=\"line\"><span class=\"keyword\">echo</span> strtotime(<span class=\"string\">\"+1 day\"</span>);<span class=\"comment\">//相当于将现在的日期和时间加上了1天。</span></div><div class=\"line\"><span class=\"keyword\">echo</span> strtotime(<span class=\"string\">\"+1 week\"</span>);<span class=\"comment\">//相当于将现在的日期和时间加上了1周。</span></div><div class=\"line\"><span class=\"keyword\">echo</span> strtotime(<span class=\"string\">\"+1 week 3 days 7 hours 5 seconds\"</span>);<span class=\"comment\">//相当于将现在的日期和时间加上了1周3天7小时5秒。</span></div></pre></td></tr></table></figure>\n<p><h2>格式化格林威治（GMT）标准时间</h2><br>gmdate函数能格式化一个GMT的日期和时间，返回的是格林威治标准时（GMT）。<br>举个例子，我们现在所在的中国时区是东八区，领先格林威治时间8个小时，有时候也叫GMT+8，那么服务器运行以下脚本返回的时间应该是这样的：<br>当前时间假定是2014-05-01 15:15:22</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> date(<span class=\"string\">'Y-m-d H:i:s'</span>, time()); <span class=\"comment\">//输出为：2014-05-01 15:15:22 </span></div><div class=\"line\"><span class=\"keyword\">echo</span> gmdate(<span class=\"string\">'Y-m-d H:i:s'</span>, time()); <span class=\"comment\">//输出为：2014-05-01 07:15:22 因为格林威治时间是现在中国时区的时间减去8个小时，所以相对于现在时间要少8个小时</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"php类","date":"2016-10-14T04:45:26.000Z","_content":"php类\n<!-- more -->\n\n```php\n<?php\n//定义一个类\nclass Car {\n    var $name = '汽车';\n    function getName() {\n        return $this->name;\n    }\n}\n\n//实例化一个car对象\n$car = new Car();\n$car->name = '奥迪A6'; //设置对象的属性值\necho $car->getName();  //调用对象的方法 输出对象的名字\n?>\n```\n<h2>属性</h2>\n在类中定义的变量称之为属性，通常属性跟数据库中的字段有一定的关联，因此也可以称作“字段”。属性声明是由关键字 public，protected 或者 private 开头，后面跟一个普通的变量声明来组成。属性的变量可以设置初始化的默认值，默认值必须是常量。\n访问控制的关键字代表的意义为：\n+ public：公开的\n+ protected：受保护的\n+ private：私有的\n\n```php\nclass Car {\n    //定义公共属性\n    public $name = '汽车';\n\n    //定义受保护的属性\n    protected $corlor = '白色';\n\n    //定义私有属性\n    private $price = '100000';\n}\n```\n默认都为public，外部可以访问。一般通过->对象操作符来访问对象的属性或者方法，对于静态属性则使用::双冒号进行访问。当在类成员方法内部调用的时候，可以使用$this伪变量调用当前对象的属性。\n\n```php\n$car = new Car();\necho $car->name;   //调用对象的属性\necho $car->color;  //错误 受保护的属性不允许外部调用\necho $car->price;  //错误 私有属性不允许外部调用\n```\n受保护的属性与私有属性不允许外部调用，在类的成员方法内部是可以调用的。\n\n```php\nclass Car{\n    private $price = '1000';\n    public function getPrice() {\n        return $this->price; //内部访问私有属性\n​    }\n}\n```\n<h2>方法</h2>\n方法就是在类中的function，很多时候我们分不清方法与函数有什么差别，在面向过程的程序设计中function叫做函数，在面向对象中function则被称之为方法。\n同属性一样，类的方法也具有public，protected 以及 private 的访问控制。\n访问控制的关键字代表的意义为：\npublic：公开的\nprotected：受保护的\nprivate：私有的\n我们可以这样定义方法：\n\n```php\nclass Car {\n    public function getName() {\n        return '汽车';\n    }\n​}\n$car = new Car();\necho $car->getName();\n```\n使用关键字static修饰的，称之为静态方法，静态方法不需要实例化对象，可以通过类名直接调用，操作符为双冒号::。\n\n```php\nclass Car {\n    public static function getName() {\n        return '汽车';\n    }\n​}\necho Car::getName(); //结果为“汽车”\n```\n<h2>构造函数和析构函数</h2>\nPHP5可以在类中使用__construct()定义一个构造函数，具有构造函数的类，会在每次对象创建的时候调用该函数，因此常用来在对象创建的时候进行一些初始化工作。\n\n```php\nclass Car {\n   function __construct() {\n       print \"构造函数被调用\\n\";\n   }\n}\n$car = new Car(); //实例化的时候 会自动调用构造函数__construct，这里会输出一个字符串\n```\n在子类中如果定义了__construct则不会调用父类的__construct，如果需要同时调用父类的构造函数，需要使用parent::__construct()显式的调用。\n\n```php\nclass Car {\n   function __construct() {\n       print \"父类构造函数被调用\\n\";\n   }\n}\nclass Truck extends Car {\n   function __construct() {\n       print \"子类构造函数被调用\\n\";\n       parent::__construct();\n   }\n}\n$car = new Truck();\n```\n同样，PHP5支持析构函数，使用__destruct()进行定义，析构函数指的是当某个对象的所有引用被删除，或者对象被显式的销毁时会执行的函数。\n\n```php\nclass Car {\n   function __construct() {\n       print \"构造函数被调用 \\n\";\n   }\n   function __destruct() {\n       print \"析构函数被调用 \\n\";\n   }\n}\n$car = new Car(); //实例化时会调用构造函数\necho '使用后，准备销毁car对象 \\n';\nunset($car); //销毁时会调用析构函数\n```\n当PHP代码执行完毕以后，会自动回收与销毁对象，因此一般情况下不需要显式的去销毁对象。\n\n<h2>重载</h2>\nHP中的重载指的是动态的创建属性与方法，是通过魔术方法来实现的。属性的重载通过__set，__get，__isset，__unset来分别实现对不存在属性的赋值、读取、判断属性是否设置、销毁属性。\n\n```php\nclass Car {\n    private $ary = array();\n    \n    public function __set($key, $val) {\n        $this->ary[$key] = $val;\n    }\n    \n    public function __get($key) {\n        if (isset($this->ary[$key])) {\n            return $this->ary[$key];\n        }\n        return null;\n    }\n    \n    public function __isset($key) {\n        if (isset($this->ary[$key])) {\n            return true;\n        }\n        return false;\n    }\n    \n    public function __unset($key) {\n        unset($this->ary[$key]);\n    }\n}\n$car = new Car();\n$car->name = '汽车';  //name属性动态创建并赋值\necho $car->name;\n```\n\n方法的重载通过__call来实现，当调用不存在的方法的时候，将会转为参数调用__call方法，当调用不存在的静态方法时会使用__callStatic重载。\n\n```php\nclass Car {\n    public $speed = 0;\n    \n    public function __call($name, $args) {\n        if ($name == 'speedUp') {\n            $this->speed += 10;\n        }\n    }\n}\n$car = new Car();\n$car->speedUp(); //调用不存在的方法会使用重载\necho $car->speed;\n```\n\n\n\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/php/php类.md","raw":"---\ntitle: php类\ndate: 2016-10-14 12:45:26\ncategories:\n---\nphp类\n<!-- more -->\n\n```php\n<?php\n//定义一个类\nclass Car {\n    var $name = '汽车';\n    function getName() {\n        return $this->name;\n    }\n}\n\n//实例化一个car对象\n$car = new Car();\n$car->name = '奥迪A6'; //设置对象的属性值\necho $car->getName();  //调用对象的方法 输出对象的名字\n?>\n```\n<h2>属性</h2>\n在类中定义的变量称之为属性，通常属性跟数据库中的字段有一定的关联，因此也可以称作“字段”。属性声明是由关键字 public，protected 或者 private 开头，后面跟一个普通的变量声明来组成。属性的变量可以设置初始化的默认值，默认值必须是常量。\n访问控制的关键字代表的意义为：\n+ public：公开的\n+ protected：受保护的\n+ private：私有的\n\n```php\nclass Car {\n    //定义公共属性\n    public $name = '汽车';\n\n    //定义受保护的属性\n    protected $corlor = '白色';\n\n    //定义私有属性\n    private $price = '100000';\n}\n```\n默认都为public，外部可以访问。一般通过->对象操作符来访问对象的属性或者方法，对于静态属性则使用::双冒号进行访问。当在类成员方法内部调用的时候，可以使用$this伪变量调用当前对象的属性。\n\n```php\n$car = new Car();\necho $car->name;   //调用对象的属性\necho $car->color;  //错误 受保护的属性不允许外部调用\necho $car->price;  //错误 私有属性不允许外部调用\n```\n受保护的属性与私有属性不允许外部调用，在类的成员方法内部是可以调用的。\n\n```php\nclass Car{\n    private $price = '1000';\n    public function getPrice() {\n        return $this->price; //内部访问私有属性\n​    }\n}\n```\n<h2>方法</h2>\n方法就是在类中的function，很多时候我们分不清方法与函数有什么差别，在面向过程的程序设计中function叫做函数，在面向对象中function则被称之为方法。\n同属性一样，类的方法也具有public，protected 以及 private 的访问控制。\n访问控制的关键字代表的意义为：\npublic：公开的\nprotected：受保护的\nprivate：私有的\n我们可以这样定义方法：\n\n```php\nclass Car {\n    public function getName() {\n        return '汽车';\n    }\n​}\n$car = new Car();\necho $car->getName();\n```\n使用关键字static修饰的，称之为静态方法，静态方法不需要实例化对象，可以通过类名直接调用，操作符为双冒号::。\n\n```php\nclass Car {\n    public static function getName() {\n        return '汽车';\n    }\n​}\necho Car::getName(); //结果为“汽车”\n```\n<h2>构造函数和析构函数</h2>\nPHP5可以在类中使用__construct()定义一个构造函数，具有构造函数的类，会在每次对象创建的时候调用该函数，因此常用来在对象创建的时候进行一些初始化工作。\n\n```php\nclass Car {\n   function __construct() {\n       print \"构造函数被调用\\n\";\n   }\n}\n$car = new Car(); //实例化的时候 会自动调用构造函数__construct，这里会输出一个字符串\n```\n在子类中如果定义了__construct则不会调用父类的__construct，如果需要同时调用父类的构造函数，需要使用parent::__construct()显式的调用。\n\n```php\nclass Car {\n   function __construct() {\n       print \"父类构造函数被调用\\n\";\n   }\n}\nclass Truck extends Car {\n   function __construct() {\n       print \"子类构造函数被调用\\n\";\n       parent::__construct();\n   }\n}\n$car = new Truck();\n```\n同样，PHP5支持析构函数，使用__destruct()进行定义，析构函数指的是当某个对象的所有引用被删除，或者对象被显式的销毁时会执行的函数。\n\n```php\nclass Car {\n   function __construct() {\n       print \"构造函数被调用 \\n\";\n   }\n   function __destruct() {\n       print \"析构函数被调用 \\n\";\n   }\n}\n$car = new Car(); //实例化时会调用构造函数\necho '使用后，准备销毁car对象 \\n';\nunset($car); //销毁时会调用析构函数\n```\n当PHP代码执行完毕以后，会自动回收与销毁对象，因此一般情况下不需要显式的去销毁对象。\n\n<h2>重载</h2>\nHP中的重载指的是动态的创建属性与方法，是通过魔术方法来实现的。属性的重载通过__set，__get，__isset，__unset来分别实现对不存在属性的赋值、读取、判断属性是否设置、销毁属性。\n\n```php\nclass Car {\n    private $ary = array();\n    \n    public function __set($key, $val) {\n        $this->ary[$key] = $val;\n    }\n    \n    public function __get($key) {\n        if (isset($this->ary[$key])) {\n            return $this->ary[$key];\n        }\n        return null;\n    }\n    \n    public function __isset($key) {\n        if (isset($this->ary[$key])) {\n            return true;\n        }\n        return false;\n    }\n    \n    public function __unset($key) {\n        unset($this->ary[$key]);\n    }\n}\n$car = new Car();\n$car->name = '汽车';  //name属性动态创建并赋值\necho $car->name;\n```\n\n方法的重载通过__call来实现，当调用不存在的方法的时候，将会转为参数调用__call方法，当调用不存在的静态方法时会使用__callStatic重载。\n\n```php\nclass Car {\n    public $speed = 0;\n    \n    public function __call($name, $args) {\n        if ($name == 'speedUp') {\n            $this->speed += 10;\n        }\n    }\n}\n$car = new Car();\n$car->speedUp(); //调用不存在的方法会使用重载\necho $car->speed;\n```\n\n\n\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"php/php类","published":1,"updated":"2016-10-17T01:53:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99s005p21xw5ty8315t","content":"<p>php类<br><a id=\"more\"></a></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//定义一个类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> $name = <span class=\"string\">'汽车'</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实例化一个car对象</span></div><div class=\"line\">$car = <span class=\"keyword\">new</span> Car();</div><div class=\"line\">$car-&gt;name = <span class=\"string\">'奥迪A6'</span>; <span class=\"comment\">//设置对象的属性值</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $car-&gt;getName();  <span class=\"comment\">//调用对象的方法 输出对象的名字</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p></p><h2>属性</h2><br>在类中定义的变量称之为属性，通常属性跟数据库中的字段有一定的关联，因此也可以称作“字段”。属性声明是由关键字 public，protected 或者 private 开头，后面跟一个普通的变量声明来组成。属性的变量可以设置初始化的默认值，默认值必须是常量。<br>访问控制的关键字代表的意义为：<p></p>\n<ul>\n<li>public：公开的</li>\n<li>protected：受保护的</li>\n<li>private：私有的</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//定义公共属性</span></div><div class=\"line\">    <span class=\"keyword\">public</span> $name = <span class=\"string\">'汽车'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//定义受保护的属性</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> $corlor = <span class=\"string\">'白色'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//定义私有属性</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $price = <span class=\"string\">'100000'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>默认都为public，外部可以访问。一般通过-&gt;对象操作符来访问对象的属性或者方法，对于静态属性则使用::双冒号进行访问。当在类成员方法内部调用的时候，可以使用$this伪变量调用当前对象的属性。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$car = <span class=\"keyword\">new</span> Car();</div><div class=\"line\"><span class=\"keyword\">echo</span> $car-&gt;name;   <span class=\"comment\">//调用对象的属性</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $car-&gt;color;  <span class=\"comment\">//错误 受保护的属性不允许外部调用</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $car-&gt;price;  <span class=\"comment\">//错误 私有属性不允许外部调用</span></div></pre></td></tr></table></figure>\n<p>受保护的属性与私有属性不允许外部调用，在类的成员方法内部是可以调用的。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $price = <span class=\"string\">'1000'</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;price; <span class=\"comment\">//内部访问私有属性</span></div><div class=\"line\">​    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p></p><h2>方法</h2><br>方法就是在类中的function，很多时候我们分不清方法与函数有什么差别，在面向过程的程序设计中function叫做函数，在面向对象中function则被称之为方法。<br>同属性一样，类的方法也具有public，protected 以及 private 的访问控制。<br>访问控制的关键字代表的意义为：<br>public：公开的<br>protected：受保护的<br>private：私有的<br>我们可以这样定义方法：<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'汽车'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">​&#125;</div><div class=\"line\">$car = <span class=\"keyword\">new</span> Car();</div><div class=\"line\"><span class=\"keyword\">echo</span> $car-&gt;getName();</div></pre></td></tr></table></figure>\n<p>使用关键字static修饰的，称之为静态方法，静态方法不需要实例化对象，可以通过类名直接调用，操作符为双冒号::。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'汽车'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">​&#125;</div><div class=\"line\"><span class=\"keyword\">echo</span> Car::getName(); <span class=\"comment\">//结果为“汽车”</span></div></pre></td></tr></table></figure>\n<p></p><h2>构造函数和析构函数</h2><br>PHP5可以在类中使用__construct()定义一个构造函数，具有构造函数的类，会在每次对象创建的时候调用该函数，因此常用来在对象创建的时候进行一些初始化工作。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">\"构造函数被调用\\n\"</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">$car = <span class=\"keyword\">new</span> Car(); <span class=\"comment\">//实例化的时候 会自动调用构造函数__construct，这里会输出一个字符串</span></div></pre></td></tr></table></figure>\n<p>在子类中如果定义了<strong>construct则不会调用父类的</strong>construct，如果需要同时调用父类的构造函数，需要使用parent::__construct()显式的调用。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">\"父类构造函数被调用\\n\"</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Truck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">\"子类构造函数被调用\\n\"</span>;</div><div class=\"line\">       <span class=\"keyword\">parent</span>::__construct();</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">$car = <span class=\"keyword\">new</span> Truck();</div></pre></td></tr></table></figure>\n<p>同样，PHP5支持析构函数，使用__destruct()进行定义，析构函数指的是当某个对象的所有引用被删除，或者对象被显式的销毁时会执行的函数。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">\"构造函数被调用 \\n\"</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">\"析构函数被调用 \\n\"</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">$car = <span class=\"keyword\">new</span> Car(); <span class=\"comment\">//实例化时会调用构造函数</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'使用后，准备销毁car对象 \\n'</span>;</div><div class=\"line\"><span class=\"keyword\">unset</span>($car); <span class=\"comment\">//销毁时会调用析构函数</span></div></pre></td></tr></table></figure>\n<p>当PHP代码执行完毕以后，会自动回收与销毁对象，因此一般情况下不需要显式的去销毁对象。</p>\n<p></p><h2>重载</h2><br>HP中的重载指的是动态的创建属性与方法，是通过魔术方法来实现的。属性的重载通过<strong>set，</strong>get，<strong>isset，</strong>unset来分别实现对不存在属性的赋值、读取、判断属性是否设置、销毁属性。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $ary = <span class=\"keyword\">array</span>();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__set</span><span class=\"params\">($key, $val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;ary[$key] = $val;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__get</span><span class=\"params\">($key)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;ary[$key])) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;ary[$key];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__isset</span><span class=\"params\">($key)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;ary[$key])) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__unset</span><span class=\"params\">($key)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;ary[$key]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">$car = <span class=\"keyword\">new</span> Car();</div><div class=\"line\">$car-&gt;name = <span class=\"string\">'汽车'</span>;  <span class=\"comment\">//name属性动态创建并赋值</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $car-&gt;name;</div></pre></td></tr></table></figure>\n<p>方法的重载通过<strong>call来实现，当调用不存在的方法的时候，将会转为参数调用</strong>call方法，当调用不存在的静态方法时会使用__callStatic重载。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $speed = <span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span><span class=\"params\">($name, $args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ($name == <span class=\"string\">'speedUp'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;speed += <span class=\"number\">10</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">$car = <span class=\"keyword\">new</span> Car();</div><div class=\"line\">$car-&gt;speedUp(); <span class=\"comment\">//调用不存在的方法会使用重载</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $car-&gt;speed;</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>php类<br>","more":"</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//定义一个类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> $name = <span class=\"string\">'汽车'</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实例化一个car对象</span></div><div class=\"line\">$car = <span class=\"keyword\">new</span> Car();</div><div class=\"line\">$car-&gt;name = <span class=\"string\">'奥迪A6'</span>; <span class=\"comment\">//设置对象的属性值</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $car-&gt;getName();  <span class=\"comment\">//调用对象的方法 输出对象的名字</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<p><h2>属性</h2><br>在类中定义的变量称之为属性，通常属性跟数据库中的字段有一定的关联，因此也可以称作“字段”。属性声明是由关键字 public，protected 或者 private 开头，后面跟一个普通的变量声明来组成。属性的变量可以设置初始化的默认值，默认值必须是常量。<br>访问控制的关键字代表的意义为：</p>\n<ul>\n<li>public：公开的</li>\n<li>protected：受保护的</li>\n<li>private：私有的</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//定义公共属性</span></div><div class=\"line\">    <span class=\"keyword\">public</span> $name = <span class=\"string\">'汽车'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//定义受保护的属性</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> $corlor = <span class=\"string\">'白色'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//定义私有属性</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $price = <span class=\"string\">'100000'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>默认都为public，外部可以访问。一般通过-&gt;对象操作符来访问对象的属性或者方法，对于静态属性则使用::双冒号进行访问。当在类成员方法内部调用的时候，可以使用$this伪变量调用当前对象的属性。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$car = <span class=\"keyword\">new</span> Car();</div><div class=\"line\"><span class=\"keyword\">echo</span> $car-&gt;name;   <span class=\"comment\">//调用对象的属性</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $car-&gt;color;  <span class=\"comment\">//错误 受保护的属性不允许外部调用</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $car-&gt;price;  <span class=\"comment\">//错误 私有属性不允许外部调用</span></div></pre></td></tr></table></figure>\n<p>受保护的属性与私有属性不允许外部调用，在类的成员方法内部是可以调用的。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $price = <span class=\"string\">'1000'</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;price; <span class=\"comment\">//内部访问私有属性</span></div><div class=\"line\">​    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><h2>方法</h2><br>方法就是在类中的function，很多时候我们分不清方法与函数有什么差别，在面向过程的程序设计中function叫做函数，在面向对象中function则被称之为方法。<br>同属性一样，类的方法也具有public，protected 以及 private 的访问控制。<br>访问控制的关键字代表的意义为：<br>public：公开的<br>protected：受保护的<br>private：私有的<br>我们可以这样定义方法：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'汽车'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">​&#125;</div><div class=\"line\">$car = <span class=\"keyword\">new</span> Car();</div><div class=\"line\"><span class=\"keyword\">echo</span> $car-&gt;getName();</div></pre></td></tr></table></figure>\n<p>使用关键字static修饰的，称之为静态方法，静态方法不需要实例化对象，可以通过类名直接调用，操作符为双冒号::。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'汽车'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">​&#125;</div><div class=\"line\"><span class=\"keyword\">echo</span> Car::getName(); <span class=\"comment\">//结果为“汽车”</span></div></pre></td></tr></table></figure>\n<p><h2>构造函数和析构函数</h2><br>PHP5可以在类中使用__construct()定义一个构造函数，具有构造函数的类，会在每次对象创建的时候调用该函数，因此常用来在对象创建的时候进行一些初始化工作。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">\"构造函数被调用\\n\"</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">$car = <span class=\"keyword\">new</span> Car(); <span class=\"comment\">//实例化的时候 会自动调用构造函数__construct，这里会输出一个字符串</span></div></pre></td></tr></table></figure>\n<p>在子类中如果定义了<strong>construct则不会调用父类的</strong>construct，如果需要同时调用父类的构造函数，需要使用parent::__construct()显式的调用。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">\"父类构造函数被调用\\n\"</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Truck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">\"子类构造函数被调用\\n\"</span>;</div><div class=\"line\">       <span class=\"keyword\">parent</span>::__construct();</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">$car = <span class=\"keyword\">new</span> Truck();</div></pre></td></tr></table></figure>\n<p>同样，PHP5支持析构函数，使用__destruct()进行定义，析构函数指的是当某个对象的所有引用被删除，或者对象被显式的销毁时会执行的函数。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">\"构造函数被调用 \\n\"</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">\"析构函数被调用 \\n\"</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">$car = <span class=\"keyword\">new</span> Car(); <span class=\"comment\">//实例化时会调用构造函数</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'使用后，准备销毁car对象 \\n'</span>;</div><div class=\"line\"><span class=\"keyword\">unset</span>($car); <span class=\"comment\">//销毁时会调用析构函数</span></div></pre></td></tr></table></figure>\n<p>当PHP代码执行完毕以后，会自动回收与销毁对象，因此一般情况下不需要显式的去销毁对象。</p>\n<p><h2>重载</h2><br>HP中的重载指的是动态的创建属性与方法，是通过魔术方法来实现的。属性的重载通过<strong>set，</strong>get，<strong>isset，</strong>unset来分别实现对不存在属性的赋值、读取、判断属性是否设置、销毁属性。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $ary = <span class=\"keyword\">array</span>();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__set</span><span class=\"params\">($key, $val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;ary[$key] = $val;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__get</span><span class=\"params\">($key)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;ary[$key])) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;ary[$key];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__isset</span><span class=\"params\">($key)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;ary[$key])) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__unset</span><span class=\"params\">($key)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;ary[$key]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">$car = <span class=\"keyword\">new</span> Car();</div><div class=\"line\">$car-&gt;name = <span class=\"string\">'汽车'</span>;  <span class=\"comment\">//name属性动态创建并赋值</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $car-&gt;name;</div></pre></td></tr></table></figure>\n<p>方法的重载通过<strong>call来实现，当调用不存在的方法的时候，将会转为参数调用</strong>call方法，当调用不存在的静态方法时会使用__callStatic重载。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $speed = <span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span><span class=\"params\">($name, $args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ($name == <span class=\"string\">'speedUp'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;speed += <span class=\"number\">10</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">$car = <span class=\"keyword\">new</span> Car();</div><div class=\"line\">$car-&gt;speedUp(); <span class=\"comment\">//调用不存在的方法会使用重载</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $car-&gt;speed;</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"php结构语句","date":"2016-10-14T01:51:50.000Z","_content":"顺序结构 条件结构 循环结构 \n<!-- more -->\n\n<h2>顺序结构</h2>\n顺序结构就像一条直线，按着顺序一直往下执行。我们编写的代码默认都是按照顺序结构执行的。\n\n<h2>条件结构</h2>\n\n<h3>if else</h3>\n```php\n<?php\nif(条件){\n     //分配服务器干的任务A\n}else{\n     //分配服务器干的任务B\n}\n?>\n\n<?php\nif(条件一){\n     //分配服务器干的任务A\n}else if(条件二){\n     //分配服务器干的任务B\n}\n?>\n\n<?php\nif(条件一){\n     //分配服务器干的任务A\n}else if(条件二){\n     //分配服务器干的任务B\n}else{\n     //分配服务器干的任务C\n}\n?>\n```\n<h3>switch</h3>\n```php\n<?php\nswitch (条件)\n{\ncase 条件值一:\n  //任务一\n  break; \ncase 条件值二:\n  //任务二\n  break;\ndefault:\n  //默认任务\n}\n?>\nbreak的作用是阻止代码进入下一个case 中继续执行\n```\n\n<h2>循环结构</h2>\n\n<h3>while</h3>\n```php\n<?php\nwhile(条件){ \n     //执行任务\n}\n?>\n```\n<h3>do while</h3>\n```php\n<?php\ndo{ \n     //执行任务\n}while(条件)\n?>\n```\n<h3>for</h3>\n```php\n<?php\nfor(初始化;循环条件;递增项){\n      //执行任务\n}\n?>\n```\n\n<h3>foreach</h3>\n在PHP中foreach循环语句，常用于遍历数组，一般有两种使用方式:\n+ 不取下标\n+ 取下标\n\n```php\n（1）只取值，不取下标\n<?php\n foreach (数组 as 值){\n//执行的任务\n}\n?>\n（2）同时取下标和值\n<?php\nforeach (数组 as 下标 => 值){\n //执行的任务\n}\n?>\n```\n```php\n<?php\n$students = array(\n'2010'=>'令狐冲',\n'2011'=>'林平之',\n'2012'=>'曲洋',\n'2013'=>'任盈盈',\n'2014'=>'向问天',\n'2015'=>'任我行',\n'2016'=>'冲虚',\n'2017'=>'方正',\n'2018'=>'岳不群',\n'2019'=>'宁中则',\n);//10个学生的学号和姓名，用数组存储\n\n//使用循环结构遍历数组,获取学号和姓名  \nforeach($students as  $v)\n{ \n    echo $v;//输出（打印）姓名\n\techo \"<br />\";\n}\n?>\n\n结果\n令狐冲\n林平之\n曲洋\n任盈盈\n向问天\n任我行\n冲虚\n方正\n岳不群\n宁中则\n```\n\n```php\n<?php\n$students = array(\n'2010'=>'令狐冲',\n'2011'=>'林平之',\n'2012'=>'曲洋',\n'2013'=>'任盈盈',\n'2014'=>'向问天',\n'2015'=>'任我行',\n'2016'=>'冲虚',\n'2017'=>'方正',\n'2018'=>'岳不群',\n'2019'=>'宁中则',\n);//10个学生的学号和姓名，用数组存储\n\n//使用循环结构遍历数组,获取学号和姓名  \nforeach($students as $key =>$v)\n{ \n    echo $key.\":\".$v;//输出（打印）学号：姓名\n\techo \"<br />\";\n}\n?>\n\n结果\n2010:令狐冲\n2011:林平之\n2012:曲洋\n2013:任盈盈\n2014:向问天\n2015:任我行\n2016:冲虚\n2017:方正\n2018:岳不群\n2019:宁中则\n```\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/php/php结构语句.md","raw":"---\ntitle: php结构语句\ndate: 2016-10-14 09:51:50\ncategories: php\n---\n顺序结构 条件结构 循环结构 \n<!-- more -->\n\n<h2>顺序结构</h2>\n顺序结构就像一条直线，按着顺序一直往下执行。我们编写的代码默认都是按照顺序结构执行的。\n\n<h2>条件结构</h2>\n\n<h3>if else</h3>\n```php\n<?php\nif(条件){\n     //分配服务器干的任务A\n}else{\n     //分配服务器干的任务B\n}\n?>\n\n<?php\nif(条件一){\n     //分配服务器干的任务A\n}else if(条件二){\n     //分配服务器干的任务B\n}\n?>\n\n<?php\nif(条件一){\n     //分配服务器干的任务A\n}else if(条件二){\n     //分配服务器干的任务B\n}else{\n     //分配服务器干的任务C\n}\n?>\n```\n<h3>switch</h3>\n```php\n<?php\nswitch (条件)\n{\ncase 条件值一:\n  //任务一\n  break; \ncase 条件值二:\n  //任务二\n  break;\ndefault:\n  //默认任务\n}\n?>\nbreak的作用是阻止代码进入下一个case 中继续执行\n```\n\n<h2>循环结构</h2>\n\n<h3>while</h3>\n```php\n<?php\nwhile(条件){ \n     //执行任务\n}\n?>\n```\n<h3>do while</h3>\n```php\n<?php\ndo{ \n     //执行任务\n}while(条件)\n?>\n```\n<h3>for</h3>\n```php\n<?php\nfor(初始化;循环条件;递增项){\n      //执行任务\n}\n?>\n```\n\n<h3>foreach</h3>\n在PHP中foreach循环语句，常用于遍历数组，一般有两种使用方式:\n+ 不取下标\n+ 取下标\n\n```php\n（1）只取值，不取下标\n<?php\n foreach (数组 as 值){\n//执行的任务\n}\n?>\n（2）同时取下标和值\n<?php\nforeach (数组 as 下标 => 值){\n //执行的任务\n}\n?>\n```\n```php\n<?php\n$students = array(\n'2010'=>'令狐冲',\n'2011'=>'林平之',\n'2012'=>'曲洋',\n'2013'=>'任盈盈',\n'2014'=>'向问天',\n'2015'=>'任我行',\n'2016'=>'冲虚',\n'2017'=>'方正',\n'2018'=>'岳不群',\n'2019'=>'宁中则',\n);//10个学生的学号和姓名，用数组存储\n\n//使用循环结构遍历数组,获取学号和姓名  \nforeach($students as  $v)\n{ \n    echo $v;//输出（打印）姓名\n\techo \"<br />\";\n}\n?>\n\n结果\n令狐冲\n林平之\n曲洋\n任盈盈\n向问天\n任我行\n冲虚\n方正\n岳不群\n宁中则\n```\n\n```php\n<?php\n$students = array(\n'2010'=>'令狐冲',\n'2011'=>'林平之',\n'2012'=>'曲洋',\n'2013'=>'任盈盈',\n'2014'=>'向问天',\n'2015'=>'任我行',\n'2016'=>'冲虚',\n'2017'=>'方正',\n'2018'=>'岳不群',\n'2019'=>'宁中则',\n);//10个学生的学号和姓名，用数组存储\n\n//使用循环结构遍历数组,获取学号和姓名  \nforeach($students as $key =>$v)\n{ \n    echo $key.\":\".$v;//输出（打印）学号：姓名\n\techo \"<br />\";\n}\n?>\n\n结果\n2010:令狐冲\n2011:林平之\n2012:曲洋\n2013:任盈盈\n2014:向问天\n2015:任我行\n2016:冲虚\n2017:方正\n2018:岳不群\n2019:宁中则\n```\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"php/php结构语句","published":1,"updated":"2016-10-14T03:19:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99t005r21xwtl97c4qd","content":"<p>顺序结构 条件结构 循环结构<br><a id=\"more\"></a></p>\n<h2>顺序结构</h2><br>顺序结构就像一条直线，按着顺序一直往下执行。我们编写的代码默认都是按照顺序结构执行的。<br><br><h2>条件结构</h2>\n\n<p></p><h3>if else</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">if</span>(条件)&#123;</div><div class=\"line\">     <span class=\"comment\">//分配服务器干的任务A</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">     <span class=\"comment\">//分配服务器干的任务B</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">if</span>(条件一)&#123;</div><div class=\"line\">     <span class=\"comment\">//分配服务器干的任务A</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(条件二)&#123;</div><div class=\"line\">     <span class=\"comment\">//分配服务器干的任务B</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">if</span>(条件一)&#123;</div><div class=\"line\">     <span class=\"comment\">//分配服务器干的任务A</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(条件二)&#123;</div><div class=\"line\">     <span class=\"comment\">//分配服务器干的任务B</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">     <span class=\"comment\">//分配服务器干的任务C</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h3>switch</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">switch</span> (条件)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">case</span> 条件值一:</div><div class=\"line\">  <span class=\"comment\">//任务一</span></div><div class=\"line\">  <span class=\"keyword\">break</span>; </div><div class=\"line\"><span class=\"keyword\">case</span> 条件值二:</div><div class=\"line\">  <span class=\"comment\">//任务二</span></div><div class=\"line\">  <span class=\"keyword\">break</span>;</div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">  <span class=\"comment\">//默认任务</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"><span class=\"keyword\">break</span>的作用是阻止代码进入下一个<span class=\"keyword\">case</span> 中继续执行</div></pre></td></tr></table></figure><p></p>\n<h2>循环结构</h2>\n\n<p></p><h3>while</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">while</span>(条件)&#123; </div><div class=\"line\">     <span class=\"comment\">//执行任务</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h3>do while</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">do</span>&#123; </div><div class=\"line\">     <span class=\"comment\">//执行任务</span></div><div class=\"line\">&#125;<span class=\"keyword\">while</span>(条件)</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h3>for</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">for</span>(初始化;循环条件;递增项)&#123;</div><div class=\"line\">      <span class=\"comment\">//执行任务</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h3>foreach</h3><br>在PHP中foreach循环语句，常用于遍历数组，一般有两种使用方式:<p></p>\n<ul>\n<li>不取下标</li>\n<li>取下标</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">（<span class=\"number\">1</span>）只取值，不取下标</div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"> <span class=\"keyword\">foreach</span> (数组 <span class=\"keyword\">as</span> 值)&#123;</div><div class=\"line\"><span class=\"comment\">//执行的任务</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\">（<span class=\"number\">2</span>）同时取下标和值</div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">foreach</span> (数组 <span class=\"keyword\">as</span> 下标 =&gt; 值)&#123;</div><div class=\"line\"> <span class=\"comment\">//执行的任务</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$students = <span class=\"keyword\">array</span>(</div><div class=\"line\"><span class=\"string\">'2010'</span>=&gt;<span class=\"string\">'令狐冲'</span>,</div><div class=\"line\"><span class=\"string\">'2011'</span>=&gt;<span class=\"string\">'林平之'</span>,</div><div class=\"line\"><span class=\"string\">'2012'</span>=&gt;<span class=\"string\">'曲洋'</span>,</div><div class=\"line\"><span class=\"string\">'2013'</span>=&gt;<span class=\"string\">'任盈盈'</span>,</div><div class=\"line\"><span class=\"string\">'2014'</span>=&gt;<span class=\"string\">'向问天'</span>,</div><div class=\"line\"><span class=\"string\">'2015'</span>=&gt;<span class=\"string\">'任我行'</span>,</div><div class=\"line\"><span class=\"string\">'2016'</span>=&gt;<span class=\"string\">'冲虚'</span>,</div><div class=\"line\"><span class=\"string\">'2017'</span>=&gt;<span class=\"string\">'方正'</span>,</div><div class=\"line\"><span class=\"string\">'2018'</span>=&gt;<span class=\"string\">'岳不群'</span>,</div><div class=\"line\"><span class=\"string\">'2019'</span>=&gt;<span class=\"string\">'宁中则'</span>,</div><div class=\"line\">);<span class=\"comment\">//10个学生的学号和姓名，用数组存储</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用循环结构遍历数组,获取学号和姓名  </span></div><div class=\"line\"><span class=\"keyword\">foreach</span>($students <span class=\"keyword\">as</span>  $v)</div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"keyword\">echo</span> $v;<span class=\"comment\">//输出（打印）姓名</span></div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">令狐冲</div><div class=\"line\">林平之</div><div class=\"line\">曲洋</div><div class=\"line\">任盈盈</div><div class=\"line\">向问天</div><div class=\"line\">任我行</div><div class=\"line\">冲虚</div><div class=\"line\">方正</div><div class=\"line\">岳不群</div><div class=\"line\">宁中则</div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$students = <span class=\"keyword\">array</span>(</div><div class=\"line\"><span class=\"string\">'2010'</span>=&gt;<span class=\"string\">'令狐冲'</span>,</div><div class=\"line\"><span class=\"string\">'2011'</span>=&gt;<span class=\"string\">'林平之'</span>,</div><div class=\"line\"><span class=\"string\">'2012'</span>=&gt;<span class=\"string\">'曲洋'</span>,</div><div class=\"line\"><span class=\"string\">'2013'</span>=&gt;<span class=\"string\">'任盈盈'</span>,</div><div class=\"line\"><span class=\"string\">'2014'</span>=&gt;<span class=\"string\">'向问天'</span>,</div><div class=\"line\"><span class=\"string\">'2015'</span>=&gt;<span class=\"string\">'任我行'</span>,</div><div class=\"line\"><span class=\"string\">'2016'</span>=&gt;<span class=\"string\">'冲虚'</span>,</div><div class=\"line\"><span class=\"string\">'2017'</span>=&gt;<span class=\"string\">'方正'</span>,</div><div class=\"line\"><span class=\"string\">'2018'</span>=&gt;<span class=\"string\">'岳不群'</span>,</div><div class=\"line\"><span class=\"string\">'2019'</span>=&gt;<span class=\"string\">'宁中则'</span>,</div><div class=\"line\">);<span class=\"comment\">//10个学生的学号和姓名，用数组存储</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用循环结构遍历数组,获取学号和姓名  </span></div><div class=\"line\"><span class=\"keyword\">foreach</span>($students <span class=\"keyword\">as</span> $key =&gt;$v)</div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"keyword\">echo</span> $key.<span class=\"string\">\":\"</span>.$v;<span class=\"comment\">//输出（打印）学号：姓名</span></div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\"><span class=\"number\">2010</span>:令狐冲</div><div class=\"line\"><span class=\"number\">2011</span>:林平之</div><div class=\"line\"><span class=\"number\">2012</span>:曲洋</div><div class=\"line\"><span class=\"number\">2013</span>:任盈盈</div><div class=\"line\"><span class=\"number\">2014</span>:向问天</div><div class=\"line\"><span class=\"number\">2015</span>:任我行</div><div class=\"line\"><span class=\"number\">2016</span>:冲虚</div><div class=\"line\"><span class=\"number\">2017</span>:方正</div><div class=\"line\"><span class=\"number\">2018</span>:岳不群</div><div class=\"line\"><span class=\"number\">2019</span>:宁中则</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>顺序结构 条件结构 循环结构<br>","more":"</p>\n<h2>顺序结构</h2><br>顺序结构就像一条直线，按着顺序一直往下执行。我们编写的代码默认都是按照顺序结构执行的。<br><br><h2>条件结构</h2>\n\n<p><h3>if else</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">if</span>(条件)&#123;</div><div class=\"line\">     <span class=\"comment\">//分配服务器干的任务A</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">     <span class=\"comment\">//分配服务器干的任务B</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">if</span>(条件一)&#123;</div><div class=\"line\">     <span class=\"comment\">//分配服务器干的任务A</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(条件二)&#123;</div><div class=\"line\">     <span class=\"comment\">//分配服务器干的任务B</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">if</span>(条件一)&#123;</div><div class=\"line\">     <span class=\"comment\">//分配服务器干的任务A</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(条件二)&#123;</div><div class=\"line\">     <span class=\"comment\">//分配服务器干的任务B</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">     <span class=\"comment\">//分配服务器干的任务C</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p><h3>switch</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">switch</span> (条件)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">case</span> 条件值一:</div><div class=\"line\">  <span class=\"comment\">//任务一</span></div><div class=\"line\">  <span class=\"keyword\">break</span>; </div><div class=\"line\"><span class=\"keyword\">case</span> 条件值二:</div><div class=\"line\">  <span class=\"comment\">//任务二</span></div><div class=\"line\">  <span class=\"keyword\">break</span>;</div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">  <span class=\"comment\">//默认任务</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"><span class=\"keyword\">break</span>的作用是阻止代码进入下一个<span class=\"keyword\">case</span> 中继续执行</div></pre></td></tr></table></figure></p>\n<h2>循环结构</h2>\n\n<p><h3>while</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">while</span>(条件)&#123; </div><div class=\"line\">     <span class=\"comment\">//执行任务</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p><h3>do while</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">do</span>&#123; </div><div class=\"line\">     <span class=\"comment\">//执行任务</span></div><div class=\"line\">&#125;<span class=\"keyword\">while</span>(条件)</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p><h3>for</h3><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">for</span>(初始化;循环条件;递增项)&#123;</div><div class=\"line\">      <span class=\"comment\">//执行任务</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p><h3>foreach</h3><br>在PHP中foreach循环语句，常用于遍历数组，一般有两种使用方式:</p>\n<ul>\n<li>不取下标</li>\n<li>取下标</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">（<span class=\"number\">1</span>）只取值，不取下标</div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"> <span class=\"keyword\">foreach</span> (数组 <span class=\"keyword\">as</span> 值)&#123;</div><div class=\"line\"><span class=\"comment\">//执行的任务</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\">（<span class=\"number\">2</span>）同时取下标和值</div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">foreach</span> (数组 <span class=\"keyword\">as</span> 下标 =&gt; 值)&#123;</div><div class=\"line\"> <span class=\"comment\">//执行的任务</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$students = <span class=\"keyword\">array</span>(</div><div class=\"line\"><span class=\"string\">'2010'</span>=&gt;<span class=\"string\">'令狐冲'</span>,</div><div class=\"line\"><span class=\"string\">'2011'</span>=&gt;<span class=\"string\">'林平之'</span>,</div><div class=\"line\"><span class=\"string\">'2012'</span>=&gt;<span class=\"string\">'曲洋'</span>,</div><div class=\"line\"><span class=\"string\">'2013'</span>=&gt;<span class=\"string\">'任盈盈'</span>,</div><div class=\"line\"><span class=\"string\">'2014'</span>=&gt;<span class=\"string\">'向问天'</span>,</div><div class=\"line\"><span class=\"string\">'2015'</span>=&gt;<span class=\"string\">'任我行'</span>,</div><div class=\"line\"><span class=\"string\">'2016'</span>=&gt;<span class=\"string\">'冲虚'</span>,</div><div class=\"line\"><span class=\"string\">'2017'</span>=&gt;<span class=\"string\">'方正'</span>,</div><div class=\"line\"><span class=\"string\">'2018'</span>=&gt;<span class=\"string\">'岳不群'</span>,</div><div class=\"line\"><span class=\"string\">'2019'</span>=&gt;<span class=\"string\">'宁中则'</span>,</div><div class=\"line\">);<span class=\"comment\">//10个学生的学号和姓名，用数组存储</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用循环结构遍历数组,获取学号和姓名  </span></div><div class=\"line\"><span class=\"keyword\">foreach</span>($students <span class=\"keyword\">as</span>  $v)</div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"keyword\">echo</span> $v;<span class=\"comment\">//输出（打印）姓名</span></div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">令狐冲</div><div class=\"line\">林平之</div><div class=\"line\">曲洋</div><div class=\"line\">任盈盈</div><div class=\"line\">向问天</div><div class=\"line\">任我行</div><div class=\"line\">冲虚</div><div class=\"line\">方正</div><div class=\"line\">岳不群</div><div class=\"line\">宁中则</div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$students = <span class=\"keyword\">array</span>(</div><div class=\"line\"><span class=\"string\">'2010'</span>=&gt;<span class=\"string\">'令狐冲'</span>,</div><div class=\"line\"><span class=\"string\">'2011'</span>=&gt;<span class=\"string\">'林平之'</span>,</div><div class=\"line\"><span class=\"string\">'2012'</span>=&gt;<span class=\"string\">'曲洋'</span>,</div><div class=\"line\"><span class=\"string\">'2013'</span>=&gt;<span class=\"string\">'任盈盈'</span>,</div><div class=\"line\"><span class=\"string\">'2014'</span>=&gt;<span class=\"string\">'向问天'</span>,</div><div class=\"line\"><span class=\"string\">'2015'</span>=&gt;<span class=\"string\">'任我行'</span>,</div><div class=\"line\"><span class=\"string\">'2016'</span>=&gt;<span class=\"string\">'冲虚'</span>,</div><div class=\"line\"><span class=\"string\">'2017'</span>=&gt;<span class=\"string\">'方正'</span>,</div><div class=\"line\"><span class=\"string\">'2018'</span>=&gt;<span class=\"string\">'岳不群'</span>,</div><div class=\"line\"><span class=\"string\">'2019'</span>=&gt;<span class=\"string\">'宁中则'</span>,</div><div class=\"line\">);<span class=\"comment\">//10个学生的学号和姓名，用数组存储</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用循环结构遍历数组,获取学号和姓名  </span></div><div class=\"line\"><span class=\"keyword\">foreach</span>($students <span class=\"keyword\">as</span> $key =&gt;$v)</div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"keyword\">echo</span> $key.<span class=\"string\">\":\"</span>.$v;<span class=\"comment\">//输出（打印）学号：姓名</span></div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\"><span class=\"number\">2010</span>:令狐冲</div><div class=\"line\"><span class=\"number\">2011</span>:林平之</div><div class=\"line\"><span class=\"number\">2012</span>:曲洋</div><div class=\"line\"><span class=\"number\">2013</span>:任盈盈</div><div class=\"line\"><span class=\"number\">2014</span>:向问天</div><div class=\"line\"><span class=\"number\">2015</span>:任我行</div><div class=\"line\"><span class=\"number\">2016</span>:冲虚</div><div class=\"line\"><span class=\"number\">2017</span>:方正</div><div class=\"line\"><span class=\"number\">2018</span>:岳不群</div><div class=\"line\"><span class=\"number\">2019</span>:宁中则</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"php运算符","date":"2016-10-12T09:13:21.000Z","_content":"php算数运算符 赋值运算符 比较运算符\n<!-- more -->\n\n<h2>算数运算符</h2>\n<img src=\"/images/7.png\" width=\"530\" height=\"240\" />\n\n<h2>赋值运算符</h2>\nPHP的赋值运算符有两种，分别是：\n+ =：把右边表达式的值赋给左边的运算数。它将右边表达式值复制一份，交给左边的运算数。换而言之，首先给左边的运算数申请了一块内存，然后把复制的值放到这个内存中。\n+ &amp;：引用赋值，意味着两个变量都指向同一个数据。它将使两个变量共享一块内存，如果这个内存存储的数据变了，那么两个变量的值都会发生变化。\n\n```php\n<?php \n    $a = \"我在慕课网学习PHP！\";\n\t$b = $a;\n    $c = &$a;\n\t$a = \"我天天在慕课网学习PHP！\";\n\techo $b.\"<br />\";\n\techo $c.\"<br />\";\n?>\n\n结果\n我在慕课网学习PHP！\n我天天在慕课网学习PHP！\n```\n<h2>比较运算符</h2>\n<img src=\"/images/8.png\" width=\"660\" height=\"409\" />\n\n```php\n<?php  \n    $a = 1;\n    $b = \"1\";\n\tvar_dump($a == $b);\n\techo \"<br />\";\n\tvar_dump($a === $b);\n\techo \"<br />\";\n\tvar_dump($a != $b);\n\techo \"<br />\";\n\tvar_dump($a <> $b);\n\techo \"<br />\";\n\tvar_dump($a !== $b);\n\techo \"<br />\";\n\tvar_dump($a < $b);\n\techo \"<br />\";\n    echo \"<br />111<br />\";\n\t$c = 5;\n\tvar_dump($a < $c);\n\techo \"<br />\";\n\tvar_dump($a > $c);\n\techo \"<br />\";\n\tvar_dump($a <= $c);\n\techo \"<br />\";\n\tvar_dump($a >= $b);\n\techo \"<br />\";\n\tvar_dump($a >= $b);\n\techo \"<br />\";\n?>\n\n结果\nbool(true) \nbool(false) \nbool(false) \nbool(false) \nbool(true) \nbool(false) \n\n111\nbool(true) \nbool(false) \nbool(true) \nbool(true) \nbool(true) \n```\n\n<h2>三元运算符</h2>\n(“?:”)三元运算符也是一个比较运算符，对于表达式(expr1)?(expr2):(expr3)，如果expr1的值为true，则此表达式的值为expr2，否则为expr3。\n\n\n```php\n<?php \n    $a = 78;//成绩\n\t$b = $a >= 60 ? \"及格\": \"不及格\"; \n\techo $b;\n?>\n\n结果\n及格\n```\n\n<h2>逻辑运算符</h2>\n+ 逻辑与：都为真 则为真\n+ 逻辑或：有一个为真 则为真\n+ 逻辑非：真为假 假为真\n+ 逻辑异或：有且只有一个为真 则为真\n\n\n```php\n<?php \n    $a = TRUE; \n    $b = TRUE; \n\t$c = FALSE; \n\t$d = FALSE; \n\techo ($a and $b)?\"通过\":\"不通过\";\n\techo \"<br />\";\n\techo($a or $c)?\"通过\":\"不通过\";\n\techo \"<br />\";\n\techo ($a xor $c xor $d)?\"通过\":\"不通过\";\n\techo \"<br />\";\n\techo !$c?\"通过\":\"不通过\";\n\techo \"<br />\";\n    echo $a && $d?\"通过\":\"不通过\";\n\techo \"<br />\";\n\techo $b || $c || $d?\"通过\":\"不通过\";\n\t\n?>\n\n结果\n通过\n通过\n通过\n通过\n不通过\n通过\n\n```\n\n<h2>字符串连接运算符</h2>\n字符串连接运算符是为了将两个字符串进行连接，PHP中提供的字符串连\n+ 连接运算符<font color=#FF6666>.</font>：它返回将右参数附加到左参数后面所得的字符串。\n+ 连接赋值运算符<font color=#FF6666>.=</font>：它将右边参数附加到左边的参数后。\n\n```php\n<?php \n    $a = \"张先生\";\n\t$tip = $a.\",欢迎您在慕课网学习PHP！\";\n\t\n    $b = \"东边日出西边雨\";\t\n    $b .= \",道是无晴却有晴\";\n    \n\t$c = \"东边日出西边雨\";\t\n    $c = $c.\",道是无晴却有晴\";\n    \n\techo  $tip.\"<br />\";\n\techo  $b.\"<br />\";\n\techo  $c.\"<br />\";\n?>\n\n结果\n张先生,欢迎您在慕课网学习PHP！\n东边日出西边雨,道是无晴却有晴\n东边日出西边雨,道是无晴却有晴\n```\n\n<h2>错误控制运算符</h2>\nPHP中提供了一个错误控制运算符“@”，对于一些可能会在运行过程中出错的表达式时，我们不希望出错的时候给客户显示错误信息，这样对用户不友好。于是，可以将@放置在一个PHP表达式之前，该表达式可能产生的任何错误信息都被忽略掉；\n如果激活了track_error（这个玩意在php.ini中设置）特性，表达式所产生的任何错误信息都被存放在变量$php_errormsg中，此变量在每次出错时都会被覆盖，所以如果想用它的话必须尽早检查。\n需要注意的是：错误控制前缀“@”不会屏蔽解析错误的信息，不能把它放在函数或类的定义之前，也不能用于条件结构例如if和foreach等。\n\n```php\n<?php  \n $conn = @mysql_connect(\"localhost\",\"username\",\"password\");\n echo \"出错了，错误原因是：\".$php_errormsg;\n?>\n```\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/php/php运算符.md","raw":"---\ntitle: php运算符\ndate: 2016-10-12 17:13:21\ncategories: php\n---\nphp算数运算符 赋值运算符 比较运算符\n<!-- more -->\n\n<h2>算数运算符</h2>\n<img src=\"/images/7.png\" width=\"530\" height=\"240\" />\n\n<h2>赋值运算符</h2>\nPHP的赋值运算符有两种，分别是：\n+ =：把右边表达式的值赋给左边的运算数。它将右边表达式值复制一份，交给左边的运算数。换而言之，首先给左边的运算数申请了一块内存，然后把复制的值放到这个内存中。\n+ &amp;：引用赋值，意味着两个变量都指向同一个数据。它将使两个变量共享一块内存，如果这个内存存储的数据变了，那么两个变量的值都会发生变化。\n\n```php\n<?php \n    $a = \"我在慕课网学习PHP！\";\n\t$b = $a;\n    $c = &$a;\n\t$a = \"我天天在慕课网学习PHP！\";\n\techo $b.\"<br />\";\n\techo $c.\"<br />\";\n?>\n\n结果\n我在慕课网学习PHP！\n我天天在慕课网学习PHP！\n```\n<h2>比较运算符</h2>\n<img src=\"/images/8.png\" width=\"660\" height=\"409\" />\n\n```php\n<?php  \n    $a = 1;\n    $b = \"1\";\n\tvar_dump($a == $b);\n\techo \"<br />\";\n\tvar_dump($a === $b);\n\techo \"<br />\";\n\tvar_dump($a != $b);\n\techo \"<br />\";\n\tvar_dump($a <> $b);\n\techo \"<br />\";\n\tvar_dump($a !== $b);\n\techo \"<br />\";\n\tvar_dump($a < $b);\n\techo \"<br />\";\n    echo \"<br />111<br />\";\n\t$c = 5;\n\tvar_dump($a < $c);\n\techo \"<br />\";\n\tvar_dump($a > $c);\n\techo \"<br />\";\n\tvar_dump($a <= $c);\n\techo \"<br />\";\n\tvar_dump($a >= $b);\n\techo \"<br />\";\n\tvar_dump($a >= $b);\n\techo \"<br />\";\n?>\n\n结果\nbool(true) \nbool(false) \nbool(false) \nbool(false) \nbool(true) \nbool(false) \n\n111\nbool(true) \nbool(false) \nbool(true) \nbool(true) \nbool(true) \n```\n\n<h2>三元运算符</h2>\n(“?:”)三元运算符也是一个比较运算符，对于表达式(expr1)?(expr2):(expr3)，如果expr1的值为true，则此表达式的值为expr2，否则为expr3。\n\n\n```php\n<?php \n    $a = 78;//成绩\n\t$b = $a >= 60 ? \"及格\": \"不及格\"; \n\techo $b;\n?>\n\n结果\n及格\n```\n\n<h2>逻辑运算符</h2>\n+ 逻辑与：都为真 则为真\n+ 逻辑或：有一个为真 则为真\n+ 逻辑非：真为假 假为真\n+ 逻辑异或：有且只有一个为真 则为真\n\n\n```php\n<?php \n    $a = TRUE; \n    $b = TRUE; \n\t$c = FALSE; \n\t$d = FALSE; \n\techo ($a and $b)?\"通过\":\"不通过\";\n\techo \"<br />\";\n\techo($a or $c)?\"通过\":\"不通过\";\n\techo \"<br />\";\n\techo ($a xor $c xor $d)?\"通过\":\"不通过\";\n\techo \"<br />\";\n\techo !$c?\"通过\":\"不通过\";\n\techo \"<br />\";\n    echo $a && $d?\"通过\":\"不通过\";\n\techo \"<br />\";\n\techo $b || $c || $d?\"通过\":\"不通过\";\n\t\n?>\n\n结果\n通过\n通过\n通过\n通过\n不通过\n通过\n\n```\n\n<h2>字符串连接运算符</h2>\n字符串连接运算符是为了将两个字符串进行连接，PHP中提供的字符串连\n+ 连接运算符<font color=#FF6666>.</font>：它返回将右参数附加到左参数后面所得的字符串。\n+ 连接赋值运算符<font color=#FF6666>.=</font>：它将右边参数附加到左边的参数后。\n\n```php\n<?php \n    $a = \"张先生\";\n\t$tip = $a.\",欢迎您在慕课网学习PHP！\";\n\t\n    $b = \"东边日出西边雨\";\t\n    $b .= \",道是无晴却有晴\";\n    \n\t$c = \"东边日出西边雨\";\t\n    $c = $c.\",道是无晴却有晴\";\n    \n\techo  $tip.\"<br />\";\n\techo  $b.\"<br />\";\n\techo  $c.\"<br />\";\n?>\n\n结果\n张先生,欢迎您在慕课网学习PHP！\n东边日出西边雨,道是无晴却有晴\n东边日出西边雨,道是无晴却有晴\n```\n\n<h2>错误控制运算符</h2>\nPHP中提供了一个错误控制运算符“@”，对于一些可能会在运行过程中出错的表达式时，我们不希望出错的时候给客户显示错误信息，这样对用户不友好。于是，可以将@放置在一个PHP表达式之前，该表达式可能产生的任何错误信息都被忽略掉；\n如果激活了track_error（这个玩意在php.ini中设置）特性，表达式所产生的任何错误信息都被存放在变量$php_errormsg中，此变量在每次出错时都会被覆盖，所以如果想用它的话必须尽早检查。\n需要注意的是：错误控制前缀“@”不会屏蔽解析错误的信息，不能把它放在函数或类的定义之前，也不能用于条件结构例如if和foreach等。\n\n```php\n<?php  \n $conn = @mysql_connect(\"localhost\",\"username\",\"password\");\n echo \"出错了，错误原因是：\".$php_errormsg;\n?>\n```\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"php/php运算符","published":1,"updated":"2016-10-14T01:48:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99u005t21xwgacp9wzn","content":"<p>php算数运算符 赋值运算符 比较运算符<br><a id=\"more\"></a></p>\n<p></p><h2>算数运算符</h2><br><img src=\"/images/7.png\" width=\"530\" height=\"240\"><p></p>\n<p></p><h2>赋值运算符</h2><br>PHP的赋值运算符有两种，分别是：<p></p>\n<ul>\n<li>=：把右边表达式的值赋给左边的运算数。它将右边表达式值复制一份，交给左边的运算数。换而言之，首先给左边的运算数申请了一块内存，然后把复制的值放到这个内存中。</li>\n<li>&amp;：引用赋值，意味着两个变量都指向同一个数据。它将使两个变量共享一块内存，如果这个内存存储的数据变了，那么两个变量的值都会发生变化。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">    $a = <span class=\"string\">\"我在慕课网学习PHP！\"</span>;</div><div class=\"line\">\t$b = $a;</div><div class=\"line\">    $c = &amp;$a;</div><div class=\"line\">\t$a = <span class=\"string\">\"我天天在慕课网学习PHP！\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $b.<span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $c.<span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">我在慕课网学习PHP！</div><div class=\"line\">我天天在慕课网学习PHP！</div></pre></td></tr></table></figure>\n<p></p><h2>比较运算符</h2><br><img src=\"/images/8.png\" width=\"660\" height=\"409\"><p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span>  </div><div class=\"line\">    $a = <span class=\"number\">1</span>;</div><div class=\"line\">    $b = <span class=\"string\">\"1\"</span>;</div><div class=\"line\">\tvar_dump($a == $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a === $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a != $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a &lt;&gt; $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a !== $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a &lt; $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;111&lt;br /&gt;\"</span>;</div><div class=\"line\">\t$c = <span class=\"number\">5</span>;</div><div class=\"line\">\tvar_dump($a &lt; $c);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a &gt; $c);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a &lt;= $c);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a &gt;= $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a &gt;= $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">bool(<span class=\"keyword\">true</span>) </div><div class=\"line\">bool(<span class=\"keyword\">false</span>) </div><div class=\"line\">bool(<span class=\"keyword\">false</span>) </div><div class=\"line\">bool(<span class=\"keyword\">false</span>) </div><div class=\"line\">bool(<span class=\"keyword\">true</span>) </div><div class=\"line\">bool(<span class=\"keyword\">false</span>) </div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">111</span></div><div class=\"line\">bool(<span class=\"keyword\">true</span>) </div><div class=\"line\">bool(<span class=\"keyword\">false</span>) </div><div class=\"line\">bool(<span class=\"keyword\">true</span>) </div><div class=\"line\">bool(<span class=\"keyword\">true</span>) </div><div class=\"line\">bool(<span class=\"keyword\">true</span>)</div></pre></td></tr></table></figure>\n<p></p><h2>三元运算符</h2><br>(“?:”)三元运算符也是一个比较运算符，对于表达式(expr1)?(expr2):(expr3)，如果expr1的值为true，则此表达式的值为expr2，否则为expr3。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">    $a = <span class=\"number\">78</span>;<span class=\"comment\">//成绩</span></div><div class=\"line\">\t$b = $a &gt;= <span class=\"number\">60</span> ? <span class=\"string\">\"及格\"</span>: <span class=\"string\">\"不及格\"</span>; </div><div class=\"line\">\t<span class=\"keyword\">echo</span> $b;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">及格</div></pre></td></tr></table></figure>\n<p></p><h2>逻辑运算符</h2><p></p>\n<ul>\n<li>逻辑与：都为真 则为真</li>\n<li>逻辑或：有一个为真 则为真</li>\n<li>逻辑非：真为假 假为真</li>\n<li>逻辑异或：有且只有一个为真 则为真</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">    $a = <span class=\"keyword\">TRUE</span>; </div><div class=\"line\">    $b = <span class=\"keyword\">TRUE</span>; </div><div class=\"line\">\t$c = <span class=\"keyword\">FALSE</span>; </div><div class=\"line\">\t$d = <span class=\"keyword\">FALSE</span>; </div><div class=\"line\">\t<span class=\"keyword\">echo</span> ($a <span class=\"keyword\">and</span> $b)?<span class=\"string\">\"通过\"</span>:<span class=\"string\">\"不通过\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span>($a <span class=\"keyword\">or</span> $c)?<span class=\"string\">\"通过\"</span>:<span class=\"string\">\"不通过\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> ($a <span class=\"keyword\">xor</span> $c <span class=\"keyword\">xor</span> $d)?<span class=\"string\">\"通过\"</span>:<span class=\"string\">\"不通过\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> !$c?<span class=\"string\">\"通过\"</span>:<span class=\"string\">\"不通过\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">    <span class=\"keyword\">echo</span> $a &amp;&amp; $d?<span class=\"string\">\"通过\"</span>:<span class=\"string\">\"不通过\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $b || $c || $d?<span class=\"string\">\"通过\"</span>:<span class=\"string\">\"不通过\"</span>;</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">通过</div><div class=\"line\">通过</div><div class=\"line\">通过</div><div class=\"line\">通过</div><div class=\"line\">不通过</div><div class=\"line\">通过</div></pre></td></tr></table></figure>\n<p></p><h2>字符串连接运算符</h2><br>字符串连接运算符是为了将两个字符串进行连接，PHP中提供的字符串连<p></p>\n<ul>\n<li>连接运算符<font color=\"#FF6666\">.</font>：它返回将右参数附加到左参数后面所得的字符串。</li>\n<li>连接赋值运算符<font color=\"#FF6666\">.=</font>：它将右边参数附加到左边的参数后。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">    $a = <span class=\"string\">\"张先生\"</span>;</div><div class=\"line\">\t$tip = $a.<span class=\"string\">\",欢迎您在慕课网学习PHP！\"</span>;</div><div class=\"line\">\t</div><div class=\"line\">    $b = <span class=\"string\">\"东边日出西边雨\"</span>;\t</div><div class=\"line\">    $b .= <span class=\"string\">\",道是无晴却有晴\"</span>;</div><div class=\"line\">    </div><div class=\"line\">\t$c = <span class=\"string\">\"东边日出西边雨\"</span>;\t</div><div class=\"line\">    $c = $c.<span class=\"string\">\",道是无晴却有晴\"</span>;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"keyword\">echo</span>  $tip.<span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span>  $b.<span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span>  $c.<span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">张先生,欢迎您在慕课网学习PHP！</div><div class=\"line\">东边日出西边雨,道是无晴却有晴</div><div class=\"line\">东边日出西边雨,道是无晴却有晴</div></pre></td></tr></table></figure>\n<p></p><h2>错误控制运算符</h2><br>PHP中提供了一个错误控制运算符“@”，对于一些可能会在运行过程中出错的表达式时，我们不希望出错的时候给客户显示错误信息，这样对用户不友好。于是，可以将@放置在一个PHP表达式之前，该表达式可能产生的任何错误信息都被忽略掉；<br>如果激活了track_error（这个玩意在php.ini中设置）特性，表达式所产生的任何错误信息都被存放在变量$php_errormsg中，此变量在每次出错时都会被覆盖，所以如果想用它的话必须尽早检查。<br>需要注意的是：错误控制前缀“@”不会屏蔽解析错误的信息，不能把它放在函数或类的定义之前，也不能用于条件结构例如if和foreach等。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span>  </div><div class=\"line\"> $conn = @mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"username\"</span>,<span class=\"string\">\"password\"</span>);</div><div class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">\"出错了，错误原因是：\"</span>.$php_errormsg;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>php算数运算符 赋值运算符 比较运算符<br>","more":"</p>\n<p><h2>算数运算符</h2><br><img src=\"/images/7.png\" width=\"530\" height=\"240\" /></p>\n<p><h2>赋值运算符</h2><br>PHP的赋值运算符有两种，分别是：</p>\n<ul>\n<li>=：把右边表达式的值赋给左边的运算数。它将右边表达式值复制一份，交给左边的运算数。换而言之，首先给左边的运算数申请了一块内存，然后把复制的值放到这个内存中。</li>\n<li>&amp;：引用赋值，意味着两个变量都指向同一个数据。它将使两个变量共享一块内存，如果这个内存存储的数据变了，那么两个变量的值都会发生变化。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">    $a = <span class=\"string\">\"我在慕课网学习PHP！\"</span>;</div><div class=\"line\">\t$b = $a;</div><div class=\"line\">    $c = &amp;$a;</div><div class=\"line\">\t$a = <span class=\"string\">\"我天天在慕课网学习PHP！\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $b.<span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $c.<span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">我在慕课网学习PHP！</div><div class=\"line\">我天天在慕课网学习PHP！</div></pre></td></tr></table></figure>\n<p><h2>比较运算符</h2><br><img src=\"/images/8.png\" width=\"660\" height=\"409\" /></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span>  </div><div class=\"line\">    $a = <span class=\"number\">1</span>;</div><div class=\"line\">    $b = <span class=\"string\">\"1\"</span>;</div><div class=\"line\">\tvar_dump($a == $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a === $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a != $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a &lt;&gt; $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a !== $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a &lt; $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;111&lt;br /&gt;\"</span>;</div><div class=\"line\">\t$c = <span class=\"number\">5</span>;</div><div class=\"line\">\tvar_dump($a &lt; $c);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a &gt; $c);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a &lt;= $c);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a &gt;= $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\tvar_dump($a &gt;= $b);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">bool(<span class=\"keyword\">true</span>) </div><div class=\"line\">bool(<span class=\"keyword\">false</span>) </div><div class=\"line\">bool(<span class=\"keyword\">false</span>) </div><div class=\"line\">bool(<span class=\"keyword\">false</span>) </div><div class=\"line\">bool(<span class=\"keyword\">true</span>) </div><div class=\"line\">bool(<span class=\"keyword\">false</span>) </div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">111</span></div><div class=\"line\">bool(<span class=\"keyword\">true</span>) </div><div class=\"line\">bool(<span class=\"keyword\">false</span>) </div><div class=\"line\">bool(<span class=\"keyword\">true</span>) </div><div class=\"line\">bool(<span class=\"keyword\">true</span>) </div><div class=\"line\">bool(<span class=\"keyword\">true</span>)</div></pre></td></tr></table></figure>\n<p><h2>三元运算符</h2><br>(“?:”)三元运算符也是一个比较运算符，对于表达式(expr1)?(expr2):(expr3)，如果expr1的值为true，则此表达式的值为expr2，否则为expr3。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">    $a = <span class=\"number\">78</span>;<span class=\"comment\">//成绩</span></div><div class=\"line\">\t$b = $a &gt;= <span class=\"number\">60</span> ? <span class=\"string\">\"及格\"</span>: <span class=\"string\">\"不及格\"</span>; </div><div class=\"line\">\t<span class=\"keyword\">echo</span> $b;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">及格</div></pre></td></tr></table></figure>\n<p><h2>逻辑运算符</h2></p>\n<ul>\n<li>逻辑与：都为真 则为真</li>\n<li>逻辑或：有一个为真 则为真</li>\n<li>逻辑非：真为假 假为真</li>\n<li>逻辑异或：有且只有一个为真 则为真</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">    $a = <span class=\"keyword\">TRUE</span>; </div><div class=\"line\">    $b = <span class=\"keyword\">TRUE</span>; </div><div class=\"line\">\t$c = <span class=\"keyword\">FALSE</span>; </div><div class=\"line\">\t$d = <span class=\"keyword\">FALSE</span>; </div><div class=\"line\">\t<span class=\"keyword\">echo</span> ($a <span class=\"keyword\">and</span> $b)?<span class=\"string\">\"通过\"</span>:<span class=\"string\">\"不通过\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span>($a <span class=\"keyword\">or</span> $c)?<span class=\"string\">\"通过\"</span>:<span class=\"string\">\"不通过\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> ($a <span class=\"keyword\">xor</span> $c <span class=\"keyword\">xor</span> $d)?<span class=\"string\">\"通过\"</span>:<span class=\"string\">\"不通过\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> !$c?<span class=\"string\">\"通过\"</span>:<span class=\"string\">\"不通过\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">    <span class=\"keyword\">echo</span> $a &amp;&amp; $d?<span class=\"string\">\"通过\"</span>:<span class=\"string\">\"不通过\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $b || $c || $d?<span class=\"string\">\"通过\"</span>:<span class=\"string\">\"不通过\"</span>;</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">通过</div><div class=\"line\">通过</div><div class=\"line\">通过</div><div class=\"line\">通过</div><div class=\"line\">不通过</div><div class=\"line\">通过</div></pre></td></tr></table></figure>\n<p><h2>字符串连接运算符</h2><br>字符串连接运算符是为了将两个字符串进行连接，PHP中提供的字符串连</p>\n<ul>\n<li>连接运算符<font color=#FF6666>.</font>：它返回将右参数附加到左参数后面所得的字符串。</li>\n<li>连接赋值运算符<font color=#FF6666>.=</font>：它将右边参数附加到左边的参数后。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">    $a = <span class=\"string\">\"张先生\"</span>;</div><div class=\"line\">\t$tip = $a.<span class=\"string\">\",欢迎您在慕课网学习PHP！\"</span>;</div><div class=\"line\">\t</div><div class=\"line\">    $b = <span class=\"string\">\"东边日出西边雨\"</span>;\t</div><div class=\"line\">    $b .= <span class=\"string\">\",道是无晴却有晴\"</span>;</div><div class=\"line\">    </div><div class=\"line\">\t$c = <span class=\"string\">\"东边日出西边雨\"</span>;\t</div><div class=\"line\">    $c = $c.<span class=\"string\">\",道是无晴却有晴\"</span>;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"keyword\">echo</span>  $tip.<span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span>  $b.<span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">echo</span>  $c.<span class=\"string\">\"&lt;br /&gt;\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div><div class=\"line\"></div><div class=\"line\">结果</div><div class=\"line\">张先生,欢迎您在慕课网学习PHP！</div><div class=\"line\">东边日出西边雨,道是无晴却有晴</div><div class=\"line\">东边日出西边雨,道是无晴却有晴</div></pre></td></tr></table></figure>\n<p><h2>错误控制运算符</h2><br>PHP中提供了一个错误控制运算符“@”，对于一些可能会在运行过程中出错的表达式时，我们不希望出错的时候给客户显示错误信息，这样对用户不友好。于是，可以将@放置在一个PHP表达式之前，该表达式可能产生的任何错误信息都被忽略掉；<br>如果激活了track_error（这个玩意在php.ini中设置）特性，表达式所产生的任何错误信息都被存放在变量$php_errormsg中，此变量在每次出错时都会被覆盖，所以如果想用它的话必须尽早检查。<br>需要注意的是：错误控制前缀“@”不会屏蔽解析错误的信息，不能把它放在函数或类的定义之前，也不能用于条件结构例如if和foreach等。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span>  </div><div class=\"line\"> $conn = @mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"username\"</span>,<span class=\"string\">\"password\"</span>);</div><div class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">\"出错了，错误原因是：\"</span>.$php_errormsg;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"php静态关键字static","date":"2016-10-14T08:33:33.000Z","_content":"php静态关键字static\n<!-- more -->\n静态属性与方法可以在不实例化类的情况下调用，直接使用类名::方法名的方式进行调用。静态属性不允许对象使用->操作符调用。\n\n```php\nclass Car {\n    private static $speed = 10;\n    \n    public static function getSpeed() {\n        return self::$speed;\n    }\n}\necho Car::getSpeed();  //调用静态方法\n```\n静态方法也可以通过变量来进行动态调用\n\n```php\n$func = 'getSpeed';\n$className = 'Car';\necho $className::$func();  //动态调用静态方法\n```\n静态方法中，$this伪变量不允许使用。可以使用self，parent，static在内部调用静态方法与属性。\n\n```php\nclass Car {\n    private static $speed = 10;\n    \n    public static function getSpeed() {\n        return self::$speed;\n    }\n    \n    public static function speedUp() {\n        return self::$speed+=10;\n    }\n}\nclass BigCar extends Car {\n    public static function start() {\n        parent::speedUp();\n    }\n}\n\nBigCar::start();\necho BigCar::getSpeed();\n```\n如果构造函数定义成了私有方法，则不允许直接实例化对象了，这时候一般通过静态方法进行实例化，在设计模式中会经常使用这样的方法来控制对象的创建，比如单例模式只允许有一个全局唯一的对象。\n\n```php\nclass Car {\n    private function __construct() {\n        echo 'object create';\n    }\n\n    private static $_object = null;\n    public static function getInstance() {\n        if (empty(self::$_object)) {\n            self::$_object = new Car(); //内部方法可以调用私有方法，因此这里可以创建对象\n        }\n        return self::$_object;\n    }\n}\n//$car = new Car(); //这里不允许直接实例化对象\n$car = Car::getInstance(); //通过静态方法来获得一个实例\n```\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/php/php静态关键字static.md","raw":"---\ntitle: php静态关键字static\ndate: 2016-10-14 16:33:33\ncategories: php\n---\nphp静态关键字static\n<!-- more -->\n静态属性与方法可以在不实例化类的情况下调用，直接使用类名::方法名的方式进行调用。静态属性不允许对象使用->操作符调用。\n\n```php\nclass Car {\n    private static $speed = 10;\n    \n    public static function getSpeed() {\n        return self::$speed;\n    }\n}\necho Car::getSpeed();  //调用静态方法\n```\n静态方法也可以通过变量来进行动态调用\n\n```php\n$func = 'getSpeed';\n$className = 'Car';\necho $className::$func();  //动态调用静态方法\n```\n静态方法中，$this伪变量不允许使用。可以使用self，parent，static在内部调用静态方法与属性。\n\n```php\nclass Car {\n    private static $speed = 10;\n    \n    public static function getSpeed() {\n        return self::$speed;\n    }\n    \n    public static function speedUp() {\n        return self::$speed+=10;\n    }\n}\nclass BigCar extends Car {\n    public static function start() {\n        parent::speedUp();\n    }\n}\n\nBigCar::start();\necho BigCar::getSpeed();\n```\n如果构造函数定义成了私有方法，则不允许直接实例化对象了，这时候一般通过静态方法进行实例化，在设计模式中会经常使用这样的方法来控制对象的创建，比如单例模式只允许有一个全局唯一的对象。\n\n```php\nclass Car {\n    private function __construct() {\n        echo 'object create';\n    }\n\n    private static $_object = null;\n    public static function getInstance() {\n        if (empty(self::$_object)) {\n            self::$_object = new Car(); //内部方法可以调用私有方法，因此这里可以创建对象\n        }\n        return self::$_object;\n    }\n}\n//$car = new Car(); //这里不允许直接实例化对象\n$car = Car::getInstance(); //通过静态方法来获得一个实例\n```\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"php/php静态关键字static","published":1,"updated":"2016-10-17T01:54:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99v005v21xw86tcpvaw","content":"<p>php静态关键字static<br><a id=\"more\"></a><br>静态属性与方法可以在不实例化类的情况下调用，直接使用类名::方法名的方式进行调用。静态属性不允许对象使用-&gt;操作符调用。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $speed = <span class=\"number\">10</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSpeed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$speed;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">echo</span> Car::getSpeed();  <span class=\"comment\">//调用静态方法</span></div></pre></td></tr></table></figure>\n<p>静态方法也可以通过变量来进行动态调用</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$func = <span class=\"string\">'getSpeed'</span>;</div><div class=\"line\">$className = <span class=\"string\">'Car'</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $className::$func();  <span class=\"comment\">//动态调用静态方法</span></div></pre></td></tr></table></figure>\n<p>静态方法中，$this伪变量不允许使用。可以使用self，parent，static在内部调用静态方法与属性。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $speed = <span class=\"number\">10</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSpeed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$speed;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speedUp</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$speed+=<span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigCar</span> <span class=\"keyword\">extends</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">parent</span>::speedUp();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">BigCar::start();</div><div class=\"line\"><span class=\"keyword\">echo</span> BigCar::getSpeed();</div></pre></td></tr></table></figure>\n<p>如果构造函数定义成了私有方法，则不允许直接实例化对象了，这时候一般通过静态方法进行实例化，在设计模式中会经常使用这样的方法来控制对象的创建，比如单例模式只允许有一个全局唯一的对象。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'object create'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_object = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"keyword\">self</span>::$_object)) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_object = <span class=\"keyword\">new</span> Car(); <span class=\"comment\">//内部方法可以调用私有方法，因此这里可以创建对象</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_object;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//$car = new Car(); //这里不允许直接实例化对象</span></div><div class=\"line\">$car = Car::getInstance(); <span class=\"comment\">//通过静态方法来获得一个实例</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>php静态关键字static<br>","more":"<br>静态属性与方法可以在不实例化类的情况下调用，直接使用类名::方法名的方式进行调用。静态属性不允许对象使用-&gt;操作符调用。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $speed = <span class=\"number\">10</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSpeed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$speed;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">echo</span> Car::getSpeed();  <span class=\"comment\">//调用静态方法</span></div></pre></td></tr></table></figure>\n<p>静态方法也可以通过变量来进行动态调用</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$func = <span class=\"string\">'getSpeed'</span>;</div><div class=\"line\">$className = <span class=\"string\">'Car'</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $className::$func();  <span class=\"comment\">//动态调用静态方法</span></div></pre></td></tr></table></figure>\n<p>静态方法中，$this伪变量不允许使用。可以使用self，parent，static在内部调用静态方法与属性。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $speed = <span class=\"number\">10</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSpeed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$speed;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speedUp</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$speed+=<span class=\"number\">10</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigCar</span> <span class=\"keyword\">extends</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">parent</span>::speedUp();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">BigCar::start();</div><div class=\"line\"><span class=\"keyword\">echo</span> BigCar::getSpeed();</div></pre></td></tr></table></figure>\n<p>如果构造函数定义成了私有方法，则不允许直接实例化对象了，这时候一般通过静态方法进行实例化，在设计模式中会经常使用这样的方法来控制对象的创建，比如单例模式只允许有一个全局唯一的对象。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'object create'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $_object = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"keyword\">self</span>::$_object)) &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>::$_object = <span class=\"keyword\">new</span> Car(); <span class=\"comment\">//内部方法可以调用私有方法，因此这里可以创建对象</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$_object;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//$car = new Car(); //这里不允许直接实例化对象</span></div><div class=\"line\">$car = Car::getInstance(); <span class=\"comment\">//通过静态方法来获得一个实例</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"会话控制（session与cookie）","date":"2016-10-17T03:19:03.000Z","_content":"会话控制（session与cookie）\n<!-- more -->\n\n<h2>cookie</h2>\nCookie是存储在客户端浏览器中的数据，我们通过Cookie来跟踪与存储用户数据。一般情况下，Cookie通过HTTP headers从服务端返回到客户端。多数web程序都支持Cookie的操作，因为Cookie是存在于HTTP的标头之中，所以必须在其他信息输出以前进行设置，类似于header函数的使用限制。\nPHP通过setcookie函数进行Cookie的设置，任何从浏览器发回的Cookie，PHP都会自动的将他存储在$_COOKIE的全局变量之中，因此我们可以通过$_COOKIE['key']的形式来读取某个Cookie值。\nPHP中的Cookie具有非常广泛的使用，经常用来存储用户的登录信息，购物车等，且在使用会话Session时通常使用Cookie来存储会话id来识别用户，Cookie具备有效期，当有效期结束之后，Cookie会自动的从客户端删除。同时为了进行安全控制，Cookie还可以设置域跟路径，我们会在稍后的章节中详细的讲解他们。\n\n<h3>设置Cookie</h3>\nPHP设置Cookie最常用的方法就是使用setcookie函数，setcookie具有7个可选参数，我们常用到的为前5个：\n+ name（ Cookie名）可以通过$_COOKIE['name'] 进行访问\n+ value（Cookie的值）\n+ expire（过期时间）Unix时间戳格式，默认为0，表示浏览器关闭即失效\n+ path（有效路径）如果路径设置为'/'，则整个网站都有效\n+ domain（有效域）默认整个域名都有效，如果设置了'www.imooc.com',则只在www子域中有效\n\n```php\n$value = 'test';\nsetcookie(\"TestCookie\", $value);\nsetcookie(\"TestCookie\", $value, time()+3600);  //有效期一小时\nsetcookie(\"TestCookie\", $value, time()+3600, \"/path/\", \"imooc.com\"); //设置路径与域\n```\nPHP中还有一个设置Cookie的函数setrawcookie，setrawcookie跟setcookie基本一样，唯一的不同就是value值不会自动的进行urlencode，因此在需要的时候要手动的进行urlencode。\n\n```php\nsetrawcookie('cookie_name', rawurlencode($value), time()+60*60*24*365); \n//因为Cookie是通过HTTP标头进行设置的，所以也可以直接使用header方法进行设置。\nheader(\"Set-Cookie:cookie_name=value\");\n```\n<h3>cookie的删除与过期时间</h3>\nsetcookie('test', '', time()-1); \n可以看到将cookie的过期时间设置到当前时间之前，则该cookie会自动失效，也就达到了删除cookie的目的。之所以这么设计是因为cookie是通过HTTP的标头来传递的，客户端根据服务端返回的Set-Cookie段来进行cookie的设置，如果删除cookie需要使用新的Del-Cookie来实现，则HTTP头就会变得复杂，实际上仅通过Set-Cookie就可以简单明了的实现Cookie的设置、更新与删除。\n了解原理以后，我们也可以直接通过header来删除cookie。\n\n```php\nheader(\"Set-Cookie:test=1393832059; expires=\".gmdate('D, d M Y H:i:s \\G\\M\\T', time()-1));\n```\n这里用到了gmdate，用来生成格林威治标准时间，以便排除时差的影响。\n\n<h3>cookie的有效路径</h3>\ncookie中的路径用来控制设置的cookie在哪个路径下有效，默认为'/'，在所有路径下都有，当设定了其他路径之后，则只在设定的路径以及子路径下有效，例如：\nsetcookie('test', time(), 0, '/path');\n上面的设置会使test在/path以及子路径/path/abc下都有效，但是在根目录下就读取不到test的cookie值。\n一般情况下，大多是使用所有路径的，只有在极少数有特殊需求的时候，会设置路径，这种情况下只在指定的路径中才会传递cookie值，可以节省数据的传输，增强安全性以及提高性能。\n当我们设置了有效路径的时候，不在当前路径的时候则看不到当前cookie。\n\n```php\nsetcookie('test', '1',0, '/path');  \nvar_dump($_COOKIE['test']);  \n```\n<h3>session</h3>\n<h3>session与cookie的异同</h3>\ncookie将数据存储在客户端，建立起用户与服务器之间的联系，通常可以解决很多问题，但是cookie仍然具有一些局限：\ncookie相对不是太安全，容易被盗用导致cookie欺骗\n<font color=#FF6666>单个cookie的值最大只能存储4k</font>\n每次请求都要进行网络传输，占用带宽\nsession是将用户的会话数据存储在服务端，没有大小限制，通过一个session_id进行用户识别，PHP默认情况下session id是通过cookie来保存的，因此从某种程度上来说，seesion依赖于cookie。但这不是绝对的，session id也可以通过参数来实现，只要能将session id传递到服务端进行识别的机制都可以使用session。\n\n```php\n<?php\n//开始使用session\nsession_start();\n//设置一个session\n$_SESSION['test'] = time();\n//显示当前的session_id\necho \"session_id:\".session_id();\necho \"<br>\";\n\n//读取session值\necho $_SESSION['test'];\n\n//销毁一个session\nunset($_SESSION['test']);\necho \"<br>\";\nvar_dump($_SESSION);\n```\n\n<h3>使用session</h3>\n在PHP中使用session非常简单，先执行session_start方法开启session，然后通过全局变量$_SESSION进行session的读写。\n\n```php\nsession_start();\n$_SESSION['test'] = time();\nvar_dump($_SESSION);\n```\n\nsession会自动的对要设置的值进行encode与decode，因此session可以支持任意数据类型，包括数据与对象等。\n\n```php\nsession_start();\n$_SESSION['ary'] = array('name' => 'jobs');\n$_SESSION['obj'] = new stdClass();\nvar_dump($_SESSION);\n```\n默认情况下，session是以文件形式存储在服务器上的，因此当一个页面开启了session之后，会独占这个session文件，这样会导致当前用户的其他并发访问无法执行而等待。可以采用缓存或者数据库的形式存储来解决这个问题，\n\n<h3>删除与销毁session</h3>\n删除某个session值可以使用PHP的unset函数，删除后就会从全局变量$_SESSION中去除，无法访问。\n\n```php\nsession_start();\n$_SESSION['name'] = 'jobs';\nunset($_SESSION['name']);\necho $_SESSION['name']; //提示name不存在\n```\n如果要删除所有的session，可以使用session_destroy函数销毁当前session，session_destroy会删除所有数据，但是session_id仍然存在。\n\n```php\nsession_start();\n$_SESSION['name'] = 'jobs';\n$_SESSION['time'] = time();\nsession_destroy();\n```\n值得注意的是，session_destroy并不会立即的销毁全局变量$_SESSION中的值，只有当下次再访问的时候，$_SESSION才为空，因此如果需要立即销毁$_SESSION，可以使用unset函数。\n\n```php\nsession_start();\n$_SESSION['name'] = 'jobs';\n$_SESSION['time'] = time();\nunset($_SESSION);\nsession_destroy(); \nvar_dump($_SESSION); //此时已为空\n```\n如果需要同时销毁cookie中的session_id，通常在用户退出的时候可能会用到，则还需要显式的调用setcookie方法删除session_id的cookie值。\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/php/会话控制（session与cookie）.md","raw":"---\ntitle: 会话控制（session与cookie）\ndate: 2016-10-17 11:19:03\ncategories: php\n---\n会话控制（session与cookie）\n<!-- more -->\n\n<h2>cookie</h2>\nCookie是存储在客户端浏览器中的数据，我们通过Cookie来跟踪与存储用户数据。一般情况下，Cookie通过HTTP headers从服务端返回到客户端。多数web程序都支持Cookie的操作，因为Cookie是存在于HTTP的标头之中，所以必须在其他信息输出以前进行设置，类似于header函数的使用限制。\nPHP通过setcookie函数进行Cookie的设置，任何从浏览器发回的Cookie，PHP都会自动的将他存储在$_COOKIE的全局变量之中，因此我们可以通过$_COOKIE['key']的形式来读取某个Cookie值。\nPHP中的Cookie具有非常广泛的使用，经常用来存储用户的登录信息，购物车等，且在使用会话Session时通常使用Cookie来存储会话id来识别用户，Cookie具备有效期，当有效期结束之后，Cookie会自动的从客户端删除。同时为了进行安全控制，Cookie还可以设置域跟路径，我们会在稍后的章节中详细的讲解他们。\n\n<h3>设置Cookie</h3>\nPHP设置Cookie最常用的方法就是使用setcookie函数，setcookie具有7个可选参数，我们常用到的为前5个：\n+ name（ Cookie名）可以通过$_COOKIE['name'] 进行访问\n+ value（Cookie的值）\n+ expire（过期时间）Unix时间戳格式，默认为0，表示浏览器关闭即失效\n+ path（有效路径）如果路径设置为'/'，则整个网站都有效\n+ domain（有效域）默认整个域名都有效，如果设置了'www.imooc.com',则只在www子域中有效\n\n```php\n$value = 'test';\nsetcookie(\"TestCookie\", $value);\nsetcookie(\"TestCookie\", $value, time()+3600);  //有效期一小时\nsetcookie(\"TestCookie\", $value, time()+3600, \"/path/\", \"imooc.com\"); //设置路径与域\n```\nPHP中还有一个设置Cookie的函数setrawcookie，setrawcookie跟setcookie基本一样，唯一的不同就是value值不会自动的进行urlencode，因此在需要的时候要手动的进行urlencode。\n\n```php\nsetrawcookie('cookie_name', rawurlencode($value), time()+60*60*24*365); \n//因为Cookie是通过HTTP标头进行设置的，所以也可以直接使用header方法进行设置。\nheader(\"Set-Cookie:cookie_name=value\");\n```\n<h3>cookie的删除与过期时间</h3>\nsetcookie('test', '', time()-1); \n可以看到将cookie的过期时间设置到当前时间之前，则该cookie会自动失效，也就达到了删除cookie的目的。之所以这么设计是因为cookie是通过HTTP的标头来传递的，客户端根据服务端返回的Set-Cookie段来进行cookie的设置，如果删除cookie需要使用新的Del-Cookie来实现，则HTTP头就会变得复杂，实际上仅通过Set-Cookie就可以简单明了的实现Cookie的设置、更新与删除。\n了解原理以后，我们也可以直接通过header来删除cookie。\n\n```php\nheader(\"Set-Cookie:test=1393832059; expires=\".gmdate('D, d M Y H:i:s \\G\\M\\T', time()-1));\n```\n这里用到了gmdate，用来生成格林威治标准时间，以便排除时差的影响。\n\n<h3>cookie的有效路径</h3>\ncookie中的路径用来控制设置的cookie在哪个路径下有效，默认为'/'，在所有路径下都有，当设定了其他路径之后，则只在设定的路径以及子路径下有效，例如：\nsetcookie('test', time(), 0, '/path');\n上面的设置会使test在/path以及子路径/path/abc下都有效，但是在根目录下就读取不到test的cookie值。\n一般情况下，大多是使用所有路径的，只有在极少数有特殊需求的时候，会设置路径，这种情况下只在指定的路径中才会传递cookie值，可以节省数据的传输，增强安全性以及提高性能。\n当我们设置了有效路径的时候，不在当前路径的时候则看不到当前cookie。\n\n```php\nsetcookie('test', '1',0, '/path');  \nvar_dump($_COOKIE['test']);  \n```\n<h3>session</h3>\n<h3>session与cookie的异同</h3>\ncookie将数据存储在客户端，建立起用户与服务器之间的联系，通常可以解决很多问题，但是cookie仍然具有一些局限：\ncookie相对不是太安全，容易被盗用导致cookie欺骗\n<font color=#FF6666>单个cookie的值最大只能存储4k</font>\n每次请求都要进行网络传输，占用带宽\nsession是将用户的会话数据存储在服务端，没有大小限制，通过一个session_id进行用户识别，PHP默认情况下session id是通过cookie来保存的，因此从某种程度上来说，seesion依赖于cookie。但这不是绝对的，session id也可以通过参数来实现，只要能将session id传递到服务端进行识别的机制都可以使用session。\n\n```php\n<?php\n//开始使用session\nsession_start();\n//设置一个session\n$_SESSION['test'] = time();\n//显示当前的session_id\necho \"session_id:\".session_id();\necho \"<br>\";\n\n//读取session值\necho $_SESSION['test'];\n\n//销毁一个session\nunset($_SESSION['test']);\necho \"<br>\";\nvar_dump($_SESSION);\n```\n\n<h3>使用session</h3>\n在PHP中使用session非常简单，先执行session_start方法开启session，然后通过全局变量$_SESSION进行session的读写。\n\n```php\nsession_start();\n$_SESSION['test'] = time();\nvar_dump($_SESSION);\n```\n\nsession会自动的对要设置的值进行encode与decode，因此session可以支持任意数据类型，包括数据与对象等。\n\n```php\nsession_start();\n$_SESSION['ary'] = array('name' => 'jobs');\n$_SESSION['obj'] = new stdClass();\nvar_dump($_SESSION);\n```\n默认情况下，session是以文件形式存储在服务器上的，因此当一个页面开启了session之后，会独占这个session文件，这样会导致当前用户的其他并发访问无法执行而等待。可以采用缓存或者数据库的形式存储来解决这个问题，\n\n<h3>删除与销毁session</h3>\n删除某个session值可以使用PHP的unset函数，删除后就会从全局变量$_SESSION中去除，无法访问。\n\n```php\nsession_start();\n$_SESSION['name'] = 'jobs';\nunset($_SESSION['name']);\necho $_SESSION['name']; //提示name不存在\n```\n如果要删除所有的session，可以使用session_destroy函数销毁当前session，session_destroy会删除所有数据，但是session_id仍然存在。\n\n```php\nsession_start();\n$_SESSION['name'] = 'jobs';\n$_SESSION['time'] = time();\nsession_destroy();\n```\n值得注意的是，session_destroy并不会立即的销毁全局变量$_SESSION中的值，只有当下次再访问的时候，$_SESSION才为空，因此如果需要立即销毁$_SESSION，可以使用unset函数。\n\n```php\nsession_start();\n$_SESSION['name'] = 'jobs';\n$_SESSION['time'] = time();\nunset($_SESSION);\nsession_destroy(); \nvar_dump($_SESSION); //此时已为空\n```\n如果需要同时销毁cookie中的session_id，通常在用户退出的时候可能会用到，则还需要显式的调用setcookie方法删除session_id的cookie值。\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"php/会话控制（session与cookie）","published":1,"updated":"2016-10-17T05:00:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99w005x21xwd1p7wa1f","content":"<p>会话控制（session与cookie）<br><a id=\"more\"></a></p>\n<p></p><h2>cookie</h2><br>Cookie是存储在客户端浏览器中的数据，我们通过Cookie来跟踪与存储用户数据。一般情况下，Cookie通过HTTP headers从服务端返回到客户端。多数web程序都支持Cookie的操作，因为Cookie是存在于HTTP的标头之中，所以必须在其他信息输出以前进行设置，类似于header函数的使用限制。<br>PHP通过setcookie函数进行Cookie的设置，任何从浏览器发回的Cookie，PHP都会自动的将他存储在$_COOKIE的全局变量之中，因此我们可以通过$_COOKIE[‘key’]的形式来读取某个Cookie值。<br>PHP中的Cookie具有非常广泛的使用，经常用来存储用户的登录信息，购物车等，且在使用会话Session时通常使用Cookie来存储会话id来识别用户，Cookie具备有效期，当有效期结束之后，Cookie会自动的从客户端删除。同时为了进行安全控制，Cookie还可以设置域跟路径，我们会在稍后的章节中详细的讲解他们。<p></p>\n<p></p><h3>设置Cookie</h3><br>PHP设置Cookie最常用的方法就是使用setcookie函数，setcookie具有7个可选参数，我们常用到的为前5个：<p></p>\n<ul>\n<li>name（ Cookie名）可以通过$_COOKIE[‘name’] 进行访问</li>\n<li>value（Cookie的值）</li>\n<li>expire（过期时间）Unix时间戳格式，默认为0，表示浏览器关闭即失效</li>\n<li>path（有效路径）如果路径设置为’/‘，则整个网站都有效</li>\n<li>domain（有效域）默认整个域名都有效，如果设置了’www.imooc.com’,则只在www子域中有效</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$value = <span class=\"string\">'test'</span>;</div><div class=\"line\">setcookie(<span class=\"string\">\"TestCookie\"</span>, $value);</div><div class=\"line\">setcookie(<span class=\"string\">\"TestCookie\"</span>, $value, time()+<span class=\"number\">3600</span>);  <span class=\"comment\">//有效期一小时</span></div><div class=\"line\">setcookie(<span class=\"string\">\"TestCookie\"</span>, $value, time()+<span class=\"number\">3600</span>, <span class=\"string\">\"/path/\"</span>, <span class=\"string\">\"imooc.com\"</span>); <span class=\"comment\">//设置路径与域</span></div></pre></td></tr></table></figure>\n<p>PHP中还有一个设置Cookie的函数setrawcookie，setrawcookie跟setcookie基本一样，唯一的不同就是value值不会自动的进行urlencode，因此在需要的时候要手动的进行urlencode。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">setrawcookie(<span class=\"string\">'cookie_name'</span>, rawurlencode($value), time()+<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">24</span>*<span class=\"number\">365</span>); </div><div class=\"line\"><span class=\"comment\">//因为Cookie是通过HTTP标头进行设置的，所以也可以直接使用header方法进行设置。</span></div><div class=\"line\">header(<span class=\"string\">\"Set-Cookie:cookie_name=value\"</span>);</div></pre></td></tr></table></figure>\n<p></p><h3>cookie的删除与过期时间</h3><br>setcookie(‘test’, ‘’, time()-1);<br>可以看到将cookie的过期时间设置到当前时间之前，则该cookie会自动失效，也就达到了删除cookie的目的。之所以这么设计是因为cookie是通过HTTP的标头来传递的，客户端根据服务端返回的Set-Cookie段来进行cookie的设置，如果删除cookie需要使用新的Del-Cookie来实现，则HTTP头就会变得复杂，实际上仅通过Set-Cookie就可以简单明了的实现Cookie的设置、更新与删除。<br>了解原理以后，我们也可以直接通过header来删除cookie。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">header(<span class=\"string\">\"Set-Cookie:test=1393832059; expires=\"</span>.gmdate(<span class=\"string\">'D, d M Y H:i:s \\G\\M\\T'</span>, time()<span class=\"number\">-1</span>));</div></pre></td></tr></table></figure>\n<p>这里用到了gmdate，用来生成格林威治标准时间，以便排除时差的影响。</p>\n<p></p><h3>cookie的有效路径</h3><br>cookie中的路径用来控制设置的cookie在哪个路径下有效，默认为’/‘，在所有路径下都有，当设定了其他路径之后，则只在设定的路径以及子路径下有效，例如：<br>setcookie(‘test’, time(), 0, ‘/path’);<br>上面的设置会使test在/path以及子路径/path/abc下都有效，但是在根目录下就读取不到test的cookie值。<br>一般情况下，大多是使用所有路径的，只有在极少数有特殊需求的时候，会设置路径，这种情况下只在指定的路径中才会传递cookie值，可以节省数据的传输，增强安全性以及提高性能。<br>当我们设置了有效路径的时候，不在当前路径的时候则看不到当前cookie。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">setcookie(<span class=\"string\">'test'</span>, <span class=\"string\">'1'</span>,<span class=\"number\">0</span>, <span class=\"string\">'/path'</span>);  </div><div class=\"line\">var_dump($_COOKIE[<span class=\"string\">'test'</span>]);</div></pre></td></tr></table></figure>\n<p></p><h3>session</h3><p></p>\n<p></p><h3>session与cookie的异同</h3><br>cookie将数据存储在客户端，建立起用户与服务器之间的联系，通常可以解决很多问题，但是cookie仍然具有一些局限：<br>cookie相对不是太安全，容易被盗用导致cookie欺骗<p></p>\n<p><font color=\"#FF6666\">单个cookie的值最大只能存储4k</font><br>每次请求都要进行网络传输，占用带宽<br>session是将用户的会话数据存储在服务端，没有大小限制，通过一个session_id进行用户识别，PHP默认情况下session id是通过cookie来保存的，因此从某种程度上来说，seesion依赖于cookie。但这不是绝对的，session id也可以通过参数来实现，只要能将session id传递到服务端进行识别的机制都可以使用session。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//开始使用session</span></div><div class=\"line\">session_start();</div><div class=\"line\"><span class=\"comment\">//设置一个session</span></div><div class=\"line\">$_SESSION[<span class=\"string\">'test'</span>] = time();</div><div class=\"line\"><span class=\"comment\">//显示当前的session_id</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"session_id:\"</span>.session_id();</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//读取session值</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $_SESSION[<span class=\"string\">'test'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//销毁一个session</span></div><div class=\"line\"><span class=\"keyword\">unset</span>($_SESSION[<span class=\"string\">'test'</span>]);</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">var_dump($_SESSION);</div></pre></td></tr></table></figure>\n<p></p><h3>使用session</h3><br>在PHP中使用session非常简单，先执行session_start方法开启session，然后通过全局变量$_SESSION进行session的读写。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">session_start();</div><div class=\"line\">$_SESSION[<span class=\"string\">'test'</span>] = time();</div><div class=\"line\">var_dump($_SESSION);</div></pre></td></tr></table></figure>\n<p>session会自动的对要设置的值进行encode与decode，因此session可以支持任意数据类型，包括数据与对象等。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">session_start();</div><div class=\"line\">$_SESSION[<span class=\"string\">'ary'</span>] = <span class=\"keyword\">array</span>(<span class=\"string\">'name'</span> =&gt; <span class=\"string\">'jobs'</span>);</div><div class=\"line\">$_SESSION[<span class=\"string\">'obj'</span>] = <span class=\"keyword\">new</span> stdClass();</div><div class=\"line\">var_dump($_SESSION);</div></pre></td></tr></table></figure>\n<p>默认情况下，session是以文件形式存储在服务器上的，因此当一个页面开启了session之后，会独占这个session文件，这样会导致当前用户的其他并发访问无法执行而等待。可以采用缓存或者数据库的形式存储来解决这个问题，</p>\n<p></p><h3>删除与销毁session</h3><br>删除某个session值可以使用PHP的unset函数，删除后就会从全局变量$_SESSION中去除，无法访问。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">session_start();</div><div class=\"line\">$_SESSION[<span class=\"string\">'name'</span>] = <span class=\"string\">'jobs'</span>;</div><div class=\"line\"><span class=\"keyword\">unset</span>($_SESSION[<span class=\"string\">'name'</span>]);</div><div class=\"line\"><span class=\"keyword\">echo</span> $_SESSION[<span class=\"string\">'name'</span>]; <span class=\"comment\">//提示name不存在</span></div></pre></td></tr></table></figure>\n<p>如果要删除所有的session，可以使用session_destroy函数销毁当前session，session_destroy会删除所有数据，但是session_id仍然存在。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">session_start();</div><div class=\"line\">$_SESSION[<span class=\"string\">'name'</span>] = <span class=\"string\">'jobs'</span>;</div><div class=\"line\">$_SESSION[<span class=\"string\">'time'</span>] = time();</div><div class=\"line\">session_destroy();</div></pre></td></tr></table></figure>\n<p>值得注意的是，session_destroy并不会立即的销毁全局变量$_SESSION中的值，只有当下次再访问的时候，$_SESSION才为空，因此如果需要立即销毁$_SESSION，可以使用unset函数。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">session_start();</div><div class=\"line\">$_SESSION[<span class=\"string\">'name'</span>] = <span class=\"string\">'jobs'</span>;</div><div class=\"line\">$_SESSION[<span class=\"string\">'time'</span>] = time();</div><div class=\"line\"><span class=\"keyword\">unset</span>($_SESSION);</div><div class=\"line\">session_destroy(); </div><div class=\"line\">var_dump($_SESSION); <span class=\"comment\">//此时已为空</span></div></pre></td></tr></table></figure>\n<p>如果需要同时销毁cookie中的session_id，通常在用户退出的时候可能会用到，则还需要显式的调用setcookie方法删除session_id的cookie值。</p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>会话控制（session与cookie）<br>","more":"</p>\n<p><h2>cookie</h2><br>Cookie是存储在客户端浏览器中的数据，我们通过Cookie来跟踪与存储用户数据。一般情况下，Cookie通过HTTP headers从服务端返回到客户端。多数web程序都支持Cookie的操作，因为Cookie是存在于HTTP的标头之中，所以必须在其他信息输出以前进行设置，类似于header函数的使用限制。<br>PHP通过setcookie函数进行Cookie的设置，任何从浏览器发回的Cookie，PHP都会自动的将他存储在$_COOKIE的全局变量之中，因此我们可以通过$_COOKIE[‘key’]的形式来读取某个Cookie值。<br>PHP中的Cookie具有非常广泛的使用，经常用来存储用户的登录信息，购物车等，且在使用会话Session时通常使用Cookie来存储会话id来识别用户，Cookie具备有效期，当有效期结束之后，Cookie会自动的从客户端删除。同时为了进行安全控制，Cookie还可以设置域跟路径，我们会在稍后的章节中详细的讲解他们。</p>\n<p><h3>设置Cookie</h3><br>PHP设置Cookie最常用的方法就是使用setcookie函数，setcookie具有7个可选参数，我们常用到的为前5个：</p>\n<ul>\n<li>name（ Cookie名）可以通过$_COOKIE[‘name’] 进行访问</li>\n<li>value（Cookie的值）</li>\n<li>expire（过期时间）Unix时间戳格式，默认为0，表示浏览器关闭即失效</li>\n<li>path（有效路径）如果路径设置为’/‘，则整个网站都有效</li>\n<li>domain（有效域）默认整个域名都有效，如果设置了’www.imooc.com’,则只在www子域中有效</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$value = <span class=\"string\">'test'</span>;</div><div class=\"line\">setcookie(<span class=\"string\">\"TestCookie\"</span>, $value);</div><div class=\"line\">setcookie(<span class=\"string\">\"TestCookie\"</span>, $value, time()+<span class=\"number\">3600</span>);  <span class=\"comment\">//有效期一小时</span></div><div class=\"line\">setcookie(<span class=\"string\">\"TestCookie\"</span>, $value, time()+<span class=\"number\">3600</span>, <span class=\"string\">\"/path/\"</span>, <span class=\"string\">\"imooc.com\"</span>); <span class=\"comment\">//设置路径与域</span></div></pre></td></tr></table></figure>\n<p>PHP中还有一个设置Cookie的函数setrawcookie，setrawcookie跟setcookie基本一样，唯一的不同就是value值不会自动的进行urlencode，因此在需要的时候要手动的进行urlencode。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">setrawcookie(<span class=\"string\">'cookie_name'</span>, rawurlencode($value), time()+<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">24</span>*<span class=\"number\">365</span>); </div><div class=\"line\"><span class=\"comment\">//因为Cookie是通过HTTP标头进行设置的，所以也可以直接使用header方法进行设置。</span></div><div class=\"line\">header(<span class=\"string\">\"Set-Cookie:cookie_name=value\"</span>);</div></pre></td></tr></table></figure>\n<p><h3>cookie的删除与过期时间</h3><br>setcookie(‘test’, ‘’, time()-1);<br>可以看到将cookie的过期时间设置到当前时间之前，则该cookie会自动失效，也就达到了删除cookie的目的。之所以这么设计是因为cookie是通过HTTP的标头来传递的，客户端根据服务端返回的Set-Cookie段来进行cookie的设置，如果删除cookie需要使用新的Del-Cookie来实现，则HTTP头就会变得复杂，实际上仅通过Set-Cookie就可以简单明了的实现Cookie的设置、更新与删除。<br>了解原理以后，我们也可以直接通过header来删除cookie。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">header(<span class=\"string\">\"Set-Cookie:test=1393832059; expires=\"</span>.gmdate(<span class=\"string\">'D, d M Y H:i:s \\G\\M\\T'</span>, time()<span class=\"number\">-1</span>));</div></pre></td></tr></table></figure>\n<p>这里用到了gmdate，用来生成格林威治标准时间，以便排除时差的影响。</p>\n<p><h3>cookie的有效路径</h3><br>cookie中的路径用来控制设置的cookie在哪个路径下有效，默认为’/‘，在所有路径下都有，当设定了其他路径之后，则只在设定的路径以及子路径下有效，例如：<br>setcookie(‘test’, time(), 0, ‘/path’);<br>上面的设置会使test在/path以及子路径/path/abc下都有效，但是在根目录下就读取不到test的cookie值。<br>一般情况下，大多是使用所有路径的，只有在极少数有特殊需求的时候，会设置路径，这种情况下只在指定的路径中才会传递cookie值，可以节省数据的传输，增强安全性以及提高性能。<br>当我们设置了有效路径的时候，不在当前路径的时候则看不到当前cookie。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">setcookie(<span class=\"string\">'test'</span>, <span class=\"string\">'1'</span>,<span class=\"number\">0</span>, <span class=\"string\">'/path'</span>);  </div><div class=\"line\">var_dump($_COOKIE[<span class=\"string\">'test'</span>]);</div></pre></td></tr></table></figure>\n<p><h3>session</h3></p>\n<p><h3>session与cookie的异同</h3><br>cookie将数据存储在客户端，建立起用户与服务器之间的联系，通常可以解决很多问题，但是cookie仍然具有一些局限：<br>cookie相对不是太安全，容易被盗用导致cookie欺骗</p>\n<p><font color=#FF6666>单个cookie的值最大只能存储4k</font><br>每次请求都要进行网络传输，占用带宽<br>session是将用户的会话数据存储在服务端，没有大小限制，通过一个session_id进行用户识别，PHP默认情况下session id是通过cookie来保存的，因此从某种程度上来说，seesion依赖于cookie。但这不是绝对的，session id也可以通过参数来实现，只要能将session id传递到服务端进行识别的机制都可以使用session。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">//开始使用session</span></div><div class=\"line\">session_start();</div><div class=\"line\"><span class=\"comment\">//设置一个session</span></div><div class=\"line\">$_SESSION[<span class=\"string\">'test'</span>] = time();</div><div class=\"line\"><span class=\"comment\">//显示当前的session_id</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"session_id:\"</span>.session_id();</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//读取session值</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $_SESSION[<span class=\"string\">'test'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//销毁一个session</span></div><div class=\"line\"><span class=\"keyword\">unset</span>($_SESSION[<span class=\"string\">'test'</span>]);</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">var_dump($_SESSION);</div></pre></td></tr></table></figure>\n<p><h3>使用session</h3><br>在PHP中使用session非常简单，先执行session_start方法开启session，然后通过全局变量$_SESSION进行session的读写。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">session_start();</div><div class=\"line\">$_SESSION[<span class=\"string\">'test'</span>] = time();</div><div class=\"line\">var_dump($_SESSION);</div></pre></td></tr></table></figure>\n<p>session会自动的对要设置的值进行encode与decode，因此session可以支持任意数据类型，包括数据与对象等。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">session_start();</div><div class=\"line\">$_SESSION[<span class=\"string\">'ary'</span>] = <span class=\"keyword\">array</span>(<span class=\"string\">'name'</span> =&gt; <span class=\"string\">'jobs'</span>);</div><div class=\"line\">$_SESSION[<span class=\"string\">'obj'</span>] = <span class=\"keyword\">new</span> stdClass();</div><div class=\"line\">var_dump($_SESSION);</div></pre></td></tr></table></figure>\n<p>默认情况下，session是以文件形式存储在服务器上的，因此当一个页面开启了session之后，会独占这个session文件，这样会导致当前用户的其他并发访问无法执行而等待。可以采用缓存或者数据库的形式存储来解决这个问题，</p>\n<p><h3>删除与销毁session</h3><br>删除某个session值可以使用PHP的unset函数，删除后就会从全局变量$_SESSION中去除，无法访问。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">session_start();</div><div class=\"line\">$_SESSION[<span class=\"string\">'name'</span>] = <span class=\"string\">'jobs'</span>;</div><div class=\"line\"><span class=\"keyword\">unset</span>($_SESSION[<span class=\"string\">'name'</span>]);</div><div class=\"line\"><span class=\"keyword\">echo</span> $_SESSION[<span class=\"string\">'name'</span>]; <span class=\"comment\">//提示name不存在</span></div></pre></td></tr></table></figure>\n<p>如果要删除所有的session，可以使用session_destroy函数销毁当前session，session_destroy会删除所有数据，但是session_id仍然存在。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">session_start();</div><div class=\"line\">$_SESSION[<span class=\"string\">'name'</span>] = <span class=\"string\">'jobs'</span>;</div><div class=\"line\">$_SESSION[<span class=\"string\">'time'</span>] = time();</div><div class=\"line\">session_destroy();</div></pre></td></tr></table></figure>\n<p>值得注意的是，session_destroy并不会立即的销毁全局变量$_SESSION中的值，只有当下次再访问的时候，$_SESSION才为空，因此如果需要立即销毁$_SESSION，可以使用unset函数。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">session_start();</div><div class=\"line\">$_SESSION[<span class=\"string\">'name'</span>] = <span class=\"string\">'jobs'</span>;</div><div class=\"line\">$_SESSION[<span class=\"string\">'time'</span>] = time();</div><div class=\"line\"><span class=\"keyword\">unset</span>($_SESSION);</div><div class=\"line\">session_destroy(); </div><div class=\"line\">var_dump($_SESSION); <span class=\"comment\">//此时已为空</span></div></pre></td></tr></table></figure>\n<p>如果需要同时销毁cookie中的session_id，通常在用户退出的时候可能会用到，则还需要显式的调用setcookie方法删除session_id的cookie值。</p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"正则表达式","date":"2016-10-17T02:19:26.000Z","_content":"正则表达式\n<!-- more -->\nPHP使用PCRE库函数来进行正则处理，通过设定好模式，然后调用相关的处理函数来取得匹配结果。\n\n<h2>preg_match</h2>\npreg_match用来执行一个匹配，可以简单的用来判断模式是否匹配成功，或者取得一个匹配结果，他的返回值是匹配成功的次数0或者1，在匹配到1次以后就会停止搜索。\n\n```php\n$subject = \"abcdef\";\n$pattern = '/def/';\npreg_match($pattern, $subject, $matches);\nprint_r($matches); //结果为：Array ( [0] => def )\n```\n上面的代码简单的执行了一个匹配，简单的判断def是否能匹配成功，但是正则表达式的强大的地方是进行模式匹配，因此更多的时候，会使用模式：\n\n```php\n$subject = \"abcdef\";\n$pattern = '/a(.*?)d/';\npreg_match($pattern, $subject, $matches);\nprint_r($matches); //结果为：Array ( [0] => abcd [1] => bc )\n```\n通过正则表达式可以匹配一个模式，得到更多的有用的数据。\n\n<h2>preg_match_all</h2>\npreg_match_all可以循环获取一个列表的匹配结果数组。\n\n```php\n$p = \"|<[^>]+>(.*?)</[^>]+>|i\";\n$str = \"<b>example: </b><div align=left>this is a test</div>\";\npreg_match_all($p, $str, $matches);\nprint_r($matches);\n```\n可以使用preg_match_all匹配一个表格中的数据：\n\n```php\n$p = \"/<tr><td>(.*?)<\\/td>\\s*<td>(.*?)<\\/td>\\s*<\\/tr>/i\";\n$str = \"<table> <tr><td>Eric</td><td>25</td></tr> <tr><td>John</td><td>26</td></tr> </table>\";\npreg_match_all($p, $str, $matches);\nprint_r($matches);\n$matches结果排序为$matches[0]保存完整模式的所有匹配, $matches[1] 保存第一个子组的所有匹配，以此类推。\n```\n\n<h2>正则表达式的基本语法</h2>\nPCRE库函数中，正则匹配模式使用分隔符与元字符组成，分隔符可以是非数字、非反斜线、非空格的任意字符。经常使用的分隔符是正斜线(/)、hash符号(#) 以及取反符号(~)，例如：\n\n```php\n/foo bar/\n#^[^0-9]$#\n~php~\n```\n\n如果模式中包含分隔符，则分隔符需要使用反斜杠（\\）进行转义。\n\n```php\n/http:\\/\\//\n```\n\n如果模式中包含较多的分割字符，建议更换其他的字符作为分隔符，也可以采用preg_quote进行转义。\n\n```php\n$p = 'http://';\n$p = '/'.preg_quote($p, '/').'/';\necho $p;\n分隔符后面可以使用模式修饰符，模式修饰符包括：i, m, s, x等，例如使用i修饰符可以忽略大小写匹配：\n$str = \"Http://www.imooc.com/\";\nif (preg_match('/http/i', $str)) {\n    echo '匹配成功';\n}\n```\n\n<h2>元字符与转义</h2>\n正则表达式中具有特殊含义的字符称之为元字符，常用的元字符有：\n\n```mark\n\\ 一般用于转义字符\n^ 断言目标的开始位置(或在多行模式下是行首)\n$ 断言目标的结束位置(或在多行模式下是行尾)\n. 匹配除换行符外的任何字符(默认)\n[ 开始字符类定义\n] 结束字符类定义\n| 开始一个可选分支\n( 子组的开始标记\n) 子组的结束标记\n? 作为量词，表示 0 次或 1 次匹配。位于量词后面用于改变量词的贪婪特性。 (查阅量词)\n* 量词，0 次或多次匹配\n+ 量词，1 次或多次匹配\n{ 自定义量词开始标记\n} 自定义量词结束标记\n```\n```php\n//下面的\\s匹配任意的空白符，包括空格，制表符，换行符。[^\\s]代表非空白符。[^\\s]+表示一次或多次匹配非空白符。\n$p = '/^我[^\\s]+(苹果|香蕉)$/';\n$str = \"我喜欢吃苹果\";\nif (preg_match($p, $str)) {\n    echo '匹配成功';\n}\n```\n\n元字符具有两种使用场景，一种是可以在任何地方都能使用，另一种是只能在方括号内使用，在方括号内使用的有：\n\n```mark\n\\ 转义字符\n^ 仅在作为第一个字符(方括号内)时，表明字符类取反\n- 标记字符范围\n```\n其中^在反括号外面，表示断言目标的开始位置，但在方括号内部则代表字符类取反，方括号内的减号-可以标记字符范围，例如0-9表示0到9之间的所有数字。\n\n```php\n//下面的\\w匹配字母或数字或下划线。\n$p = '/[\\w\\.\\-]+@[a-z0-9\\-]+\\.(com|cn)/';\n$str = \"我的邮箱是Spark.eric@imooc.com\";\npreg_match($p, $str, $match);\necho $match[0];\n```\n<h2>贪婪模式与懒惰模式</h2>\n正则表达式中每个元字符匹配一个字符，当使用+之后将会变的贪婪，它将匹配尽可能多的字符，但使用问号?字符时，它将尽可能少的匹配字符，既是懒惰模式。\n贪婪模式：在可匹配与可不匹配的时候，优先匹配\n\n```php\n//下面的\\d表示匹配数字\n$p = '/\\d+\\-\\d+/';\n$str = \"我的电话是010-12345678\";\npreg_match($p, $str, $match);\necho $match[0]; //结果为：010-12345678\n```\n懒惰模式：在可匹配与可不匹配的时候，优先不匹配\n\n```php\n$p = '/\\d?\\-\\d?/';\n$str = \"我的电话是010-12345678\";\npreg_match($p, $str, $match);\necho $match[0];  //结果为：0-1\n```\n当我们确切的知道所匹配的字符长度的时候，可以使用{}指定匹配字符数\n\n```php\n$p = '/\\d{3}\\-\\d{8}/';\n$str = \"我的电话是010-12345678\";\npreg_match($p, $str, $match);\necho $match[0]; //结果为：010-12345678\n```\n\n<h2>正则表达式的搜索和替换</h2>\n正则表达式的搜索与替换在某些方面具有重要用途，比如调整目标字符串的格式，改变目标字符串中匹配字符串的顺序等。\n例如我们可以简单的调整字符串的日期格式：\n\n```php\n$string = 'April 15, 2014';\n$pattern = '/(\\w+) (\\d+), (\\d+)/i';\n$replacement = '$3, ${1} $2';\necho preg_replace($pattern, $replacement, $string); //结果为：2014, April 15\n```\n其中${1}与$1的写法是等效的，表示第一个匹配的字串，$2代表第二个匹配的。\n通过复杂的模式，我们可以更加精确的替换目标字符串的内容。\n\n```php\n$patterns = array ('/(19|20)(\\d{2})-(\\d{1,2})-(\\d{1,2})/',\n                   '/^\\s*{(\\w+)}\\s*=/');\n$replace = array ('\\3/\\4/\\1\\2', '$\\1 =');\n//\\3等效于$3,\\4等效于$4，依次类推\necho preg_replace($patterns, $replace, '{startDate} = 1999-5-27'); \n//结果为：$startDate = 5/27/1999\n//详细解释下结果：(19|20)表示取19或者20中任意一个数字，(\\d{2})表示两个数字，(\\d{1,2})表示1个或2个数字，(\\d{1,2})表示1个或2个数字。^\\s*{(\\w+)\\s*=}表示以任意空格开头的，并且包含在{}中的字符，并且以任意空格结尾的，最后有个=号的。\n```\n用正则替换来去掉多余的空格与字符：\n\n```php\n$str = 'one     two';\n$str = preg_replace('/\\s+/', ' ', $str);\necho $str; // 结果改变为'one two'\n```\n\n```php\n<?php\n$user = array(\n    'name' => 'spark1985',\n    'email' => 'spark@imooc.com',\n    'mobile' => '13312345678'\n);\n//进行一般性验证\nif (empty($user)) {\n    die('用户信息不能为空');\n}\nif (strlen($user['name']) < 6) {\n    die('用户名长度最少为6位');\n}\n//用户名必须为字母、数字与下划线\nif (!preg_match('/^\\w+$/i', $user['name'])) {\n    die('用户名不合法');\n}\n//验证邮箱格式是否正确\nif (!preg_match('/^[\\w\\.]+@\\w+\\.\\w+$/i', $user['email'])) {\n    die('邮箱不合法');\n}\n//手机号必须为11位数字，且为1开头\nif (!preg_match('/^1\\d{10}$/i', $user['mobile'])) {\n    die('手机号不合法');\n}\necho '用户信息验证成功';\n?>\n```\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/php/正则表达式.md","raw":"---\ntitle: 正则表达式\ndate: 2016-10-17 10:19:26\ncategories: php\n---\n正则表达式\n<!-- more -->\nPHP使用PCRE库函数来进行正则处理，通过设定好模式，然后调用相关的处理函数来取得匹配结果。\n\n<h2>preg_match</h2>\npreg_match用来执行一个匹配，可以简单的用来判断模式是否匹配成功，或者取得一个匹配结果，他的返回值是匹配成功的次数0或者1，在匹配到1次以后就会停止搜索。\n\n```php\n$subject = \"abcdef\";\n$pattern = '/def/';\npreg_match($pattern, $subject, $matches);\nprint_r($matches); //结果为：Array ( [0] => def )\n```\n上面的代码简单的执行了一个匹配，简单的判断def是否能匹配成功，但是正则表达式的强大的地方是进行模式匹配，因此更多的时候，会使用模式：\n\n```php\n$subject = \"abcdef\";\n$pattern = '/a(.*?)d/';\npreg_match($pattern, $subject, $matches);\nprint_r($matches); //结果为：Array ( [0] => abcd [1] => bc )\n```\n通过正则表达式可以匹配一个模式，得到更多的有用的数据。\n\n<h2>preg_match_all</h2>\npreg_match_all可以循环获取一个列表的匹配结果数组。\n\n```php\n$p = \"|<[^>]+>(.*?)</[^>]+>|i\";\n$str = \"<b>example: </b><div align=left>this is a test</div>\";\npreg_match_all($p, $str, $matches);\nprint_r($matches);\n```\n可以使用preg_match_all匹配一个表格中的数据：\n\n```php\n$p = \"/<tr><td>(.*?)<\\/td>\\s*<td>(.*?)<\\/td>\\s*<\\/tr>/i\";\n$str = \"<table> <tr><td>Eric</td><td>25</td></tr> <tr><td>John</td><td>26</td></tr> </table>\";\npreg_match_all($p, $str, $matches);\nprint_r($matches);\n$matches结果排序为$matches[0]保存完整模式的所有匹配, $matches[1] 保存第一个子组的所有匹配，以此类推。\n```\n\n<h2>正则表达式的基本语法</h2>\nPCRE库函数中，正则匹配模式使用分隔符与元字符组成，分隔符可以是非数字、非反斜线、非空格的任意字符。经常使用的分隔符是正斜线(/)、hash符号(#) 以及取反符号(~)，例如：\n\n```php\n/foo bar/\n#^[^0-9]$#\n~php~\n```\n\n如果模式中包含分隔符，则分隔符需要使用反斜杠（\\）进行转义。\n\n```php\n/http:\\/\\//\n```\n\n如果模式中包含较多的分割字符，建议更换其他的字符作为分隔符，也可以采用preg_quote进行转义。\n\n```php\n$p = 'http://';\n$p = '/'.preg_quote($p, '/').'/';\necho $p;\n分隔符后面可以使用模式修饰符，模式修饰符包括：i, m, s, x等，例如使用i修饰符可以忽略大小写匹配：\n$str = \"Http://www.imooc.com/\";\nif (preg_match('/http/i', $str)) {\n    echo '匹配成功';\n}\n```\n\n<h2>元字符与转义</h2>\n正则表达式中具有特殊含义的字符称之为元字符，常用的元字符有：\n\n```mark\n\\ 一般用于转义字符\n^ 断言目标的开始位置(或在多行模式下是行首)\n$ 断言目标的结束位置(或在多行模式下是行尾)\n. 匹配除换行符外的任何字符(默认)\n[ 开始字符类定义\n] 结束字符类定义\n| 开始一个可选分支\n( 子组的开始标记\n) 子组的结束标记\n? 作为量词，表示 0 次或 1 次匹配。位于量词后面用于改变量词的贪婪特性。 (查阅量词)\n* 量词，0 次或多次匹配\n+ 量词，1 次或多次匹配\n{ 自定义量词开始标记\n} 自定义量词结束标记\n```\n```php\n//下面的\\s匹配任意的空白符，包括空格，制表符，换行符。[^\\s]代表非空白符。[^\\s]+表示一次或多次匹配非空白符。\n$p = '/^我[^\\s]+(苹果|香蕉)$/';\n$str = \"我喜欢吃苹果\";\nif (preg_match($p, $str)) {\n    echo '匹配成功';\n}\n```\n\n元字符具有两种使用场景，一种是可以在任何地方都能使用，另一种是只能在方括号内使用，在方括号内使用的有：\n\n```mark\n\\ 转义字符\n^ 仅在作为第一个字符(方括号内)时，表明字符类取反\n- 标记字符范围\n```\n其中^在反括号外面，表示断言目标的开始位置，但在方括号内部则代表字符类取反，方括号内的减号-可以标记字符范围，例如0-9表示0到9之间的所有数字。\n\n```php\n//下面的\\w匹配字母或数字或下划线。\n$p = '/[\\w\\.\\-]+@[a-z0-9\\-]+\\.(com|cn)/';\n$str = \"我的邮箱是Spark.eric@imooc.com\";\npreg_match($p, $str, $match);\necho $match[0];\n```\n<h2>贪婪模式与懒惰模式</h2>\n正则表达式中每个元字符匹配一个字符，当使用+之后将会变的贪婪，它将匹配尽可能多的字符，但使用问号?字符时，它将尽可能少的匹配字符，既是懒惰模式。\n贪婪模式：在可匹配与可不匹配的时候，优先匹配\n\n```php\n//下面的\\d表示匹配数字\n$p = '/\\d+\\-\\d+/';\n$str = \"我的电话是010-12345678\";\npreg_match($p, $str, $match);\necho $match[0]; //结果为：010-12345678\n```\n懒惰模式：在可匹配与可不匹配的时候，优先不匹配\n\n```php\n$p = '/\\d?\\-\\d?/';\n$str = \"我的电话是010-12345678\";\npreg_match($p, $str, $match);\necho $match[0];  //结果为：0-1\n```\n当我们确切的知道所匹配的字符长度的时候，可以使用{}指定匹配字符数\n\n```php\n$p = '/\\d{3}\\-\\d{8}/';\n$str = \"我的电话是010-12345678\";\npreg_match($p, $str, $match);\necho $match[0]; //结果为：010-12345678\n```\n\n<h2>正则表达式的搜索和替换</h2>\n正则表达式的搜索与替换在某些方面具有重要用途，比如调整目标字符串的格式，改变目标字符串中匹配字符串的顺序等。\n例如我们可以简单的调整字符串的日期格式：\n\n```php\n$string = 'April 15, 2014';\n$pattern = '/(\\w+) (\\d+), (\\d+)/i';\n$replacement = '$3, ${1} $2';\necho preg_replace($pattern, $replacement, $string); //结果为：2014, April 15\n```\n其中${1}与$1的写法是等效的，表示第一个匹配的字串，$2代表第二个匹配的。\n通过复杂的模式，我们可以更加精确的替换目标字符串的内容。\n\n```php\n$patterns = array ('/(19|20)(\\d{2})-(\\d{1,2})-(\\d{1,2})/',\n                   '/^\\s*{(\\w+)}\\s*=/');\n$replace = array ('\\3/\\4/\\1\\2', '$\\1 =');\n//\\3等效于$3,\\4等效于$4，依次类推\necho preg_replace($patterns, $replace, '{startDate} = 1999-5-27'); \n//结果为：$startDate = 5/27/1999\n//详细解释下结果：(19|20)表示取19或者20中任意一个数字，(\\d{2})表示两个数字，(\\d{1,2})表示1个或2个数字，(\\d{1,2})表示1个或2个数字。^\\s*{(\\w+)\\s*=}表示以任意空格开头的，并且包含在{}中的字符，并且以任意空格结尾的，最后有个=号的。\n```\n用正则替换来去掉多余的空格与字符：\n\n```php\n$str = 'one     two';\n$str = preg_replace('/\\s+/', ' ', $str);\necho $str; // 结果改变为'one two'\n```\n\n```php\n<?php\n$user = array(\n    'name' => 'spark1985',\n    'email' => 'spark@imooc.com',\n    'mobile' => '13312345678'\n);\n//进行一般性验证\nif (empty($user)) {\n    die('用户信息不能为空');\n}\nif (strlen($user['name']) < 6) {\n    die('用户名长度最少为6位');\n}\n//用户名必须为字母、数字与下划线\nif (!preg_match('/^\\w+$/i', $user['name'])) {\n    die('用户名不合法');\n}\n//验证邮箱格式是否正确\nif (!preg_match('/^[\\w\\.]+@\\w+\\.\\w+$/i', $user['email'])) {\n    die('邮箱不合法');\n}\n//手机号必须为11位数字，且为1开头\nif (!preg_match('/^1\\d{10}$/i', $user['mobile'])) {\n    die('手机号不合法');\n}\necho '用户信息验证成功';\n?>\n```\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"php/正则表达式","published":1,"updated":"2016-10-17T03:17:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99x005z21xwq1bo9ldw","content":"<p>正则表达式<br><a id=\"more\"></a><br>PHP使用PCRE库函数来进行正则处理，通过设定好模式，然后调用相关的处理函数来取得匹配结果。</p>\n<p></p><h2>preg_match</h2><br>preg_match用来执行一个匹配，可以简单的用来判断模式是否匹配成功，或者取得一个匹配结果，他的返回值是匹配成功的次数0或者1，在匹配到1次以后就会停止搜索。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$subject = <span class=\"string\">\"abcdef\"</span>;</div><div class=\"line\">$pattern = <span class=\"string\">'/def/'</span>;</div><div class=\"line\">preg_match($pattern, $subject, $matches);</div><div class=\"line\">print_r($matches); <span class=\"comment\">//结果为：Array ( [0] =&gt; def )</span></div></pre></td></tr></table></figure>\n<p>上面的代码简单的执行了一个匹配，简单的判断def是否能匹配成功，但是正则表达式的强大的地方是进行模式匹配，因此更多的时候，会使用模式：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$subject = <span class=\"string\">\"abcdef\"</span>;</div><div class=\"line\">$pattern = <span class=\"string\">'/a(.*?)d/'</span>;</div><div class=\"line\">preg_match($pattern, $subject, $matches);</div><div class=\"line\">print_r($matches); <span class=\"comment\">//结果为：Array ( [0] =&gt; abcd [1] =&gt; bc )</span></div></pre></td></tr></table></figure>\n<p>通过正则表达式可以匹配一个模式，得到更多的有用的数据。</p>\n<p></p><h2>preg_match_all</h2><br>preg_match_all可以循环获取一个列表的匹配结果数组。<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$p = <span class=\"string\">\"|&lt;[^&gt;]+&gt;(.*?)&lt;/[^&gt;]+&gt;|i\"</span>;</div><div class=\"line\">$str = <span class=\"string\">\"&lt;b&gt;example: &lt;/b&gt;&lt;div align=left&gt;this is a test&lt;/div&gt;\"</span>;</div><div class=\"line\">preg_match_all($p, $str, $matches);</div><div class=\"line\">print_r($matches);</div></pre></td></tr></table></figure>\n<p>可以使用preg_match_all匹配一个表格中的数据：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$p = <span class=\"string\">\"/&lt;tr&gt;&lt;td&gt;(.*?)&lt;\\/td&gt;\\s*&lt;td&gt;(.*?)&lt;\\/td&gt;\\s*&lt;\\/tr&gt;/i\"</span>;</div><div class=\"line\">$str = <span class=\"string\">\"&lt;table&gt; &lt;tr&gt;&lt;td&gt;Eric&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;John&lt;/td&gt;&lt;td&gt;26&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;\"</span>;</div><div class=\"line\">preg_match_all($p, $str, $matches);</div><div class=\"line\">print_r($matches);</div><div class=\"line\">$matches结果排序为$matches[<span class=\"number\">0</span>]保存完整模式的所有匹配, $matches[<span class=\"number\">1</span>] 保存第一个子组的所有匹配，以此类推。</div></pre></td></tr></table></figure>\n<p></p><h2>正则表达式的基本语法</h2><br>PCRE库函数中，正则匹配模式使用分隔符与元字符组成，分隔符可以是非数字、非反斜线、非空格的任意字符。经常使用的分隔符是正斜线(/)、hash符号(#) 以及取反符号(~)，例如：<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/foo bar/</div><div class=\"line\"><span class=\"comment\">#^[^0-9]$#</span></div><div class=\"line\">~php~</div></pre></td></tr></table></figure>\n<p>如果模式中包含分隔符，则分隔符需要使用反斜杠（\\）进行转义。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/http:\\/\\<span class=\"comment\">//</span></div></pre></td></tr></table></figure>\n<p>如果模式中包含较多的分割字符，建议更换其他的字符作为分隔符，也可以采用preg_quote进行转义。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$p = <span class=\"string\">'http://'</span>;</div><div class=\"line\">$p = <span class=\"string\">'/'</span>.preg_quote($p, <span class=\"string\">'/'</span>).<span class=\"string\">'/'</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $p;</div><div class=\"line\">分隔符后面可以使用模式修饰符，模式修饰符包括：i, m, s, x等，例如使用i修饰符可以忽略大小写匹配：</div><div class=\"line\">$str = <span class=\"string\">\"Http://www.imooc.com/\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (preg_match(<span class=\"string\">'/http/i'</span>, $str)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'匹配成功'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p></p><h2>元字符与转义</h2><br>正则表达式中具有特殊含义的字符称之为元字符，常用的元字符有：<p></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\ 一般用于转义字符</div><div class=\"line\">^ 断言目标的开始位置(或在多行模式下是行首)</div><div class=\"line\">$ 断言目标的结束位置(或在多行模式下是行尾)</div><div class=\"line\">. 匹配除换行符外的任何字符(默认)</div><div class=\"line\">[ 开始字符类定义</div><div class=\"line\">] 结束字符类定义</div><div class=\"line\">| 开始一个可选分支</div><div class=\"line\">( 子组的开始标记</div><div class=\"line\">) 子组的结束标记</div><div class=\"line\">? 作为量词，表示 0 次或 1 次匹配。位于量词后面用于改变量词的贪婪特性。 (查阅量词)</div><div class=\"line\">* 量词，0 次或多次匹配</div><div class=\"line\">+ 量词，1 次或多次匹配</div><div class=\"line\">&#123; 自定义量词开始标记</div><div class=\"line\">&#125; 自定义量词结束标记</div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//下面的\\s匹配任意的空白符，包括空格，制表符，换行符。[^\\s]代表非空白符。[^\\s]+表示一次或多次匹配非空白符。</span></div><div class=\"line\">$p = <span class=\"string\">'/^我[^\\s]+(苹果|香蕉)$/'</span>;</div><div class=\"line\">$str = <span class=\"string\">\"我喜欢吃苹果\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (preg_match($p, $str)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'匹配成功'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>元字符具有两种使用场景，一种是可以在任何地方都能使用，另一种是只能在方括号内使用，在方括号内使用的有：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\ 转义字符</div><div class=\"line\">^ 仅在作为第一个字符(方括号内)时，表明字符类取反</div><div class=\"line\">- 标记字符范围</div></pre></td></tr></table></figure>\n<p>其中^在反括号外面，表示断言目标的开始位置，但在方括号内部则代表字符类取反，方括号内的减号-可以标记字符范围，例如0-9表示0到9之间的所有数字。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//下面的\\w匹配字母或数字或下划线。</span></div><div class=\"line\">$p = <span class=\"string\">'/[\\w\\.\\-]+@[a-z0-9\\-]+\\.(com|cn)/'</span>;</div><div class=\"line\">$str = <span class=\"string\">\"我的邮箱是Spark.eric@imooc.com\"</span>;</div><div class=\"line\">preg_match($p, $str, $match);</div><div class=\"line\"><span class=\"keyword\">echo</span> $match[<span class=\"number\">0</span>];</div></pre></td></tr></table></figure>\n<p></p><h2>贪婪模式与懒惰模式</h2><br>正则表达式中每个元字符匹配一个字符，当使用+之后将会变的贪婪，它将匹配尽可能多的字符，但使用问号?字符时，它将尽可能少的匹配字符，既是懒惰模式。<br>贪婪模式：在可匹配与可不匹配的时候，优先匹配<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//下面的\\d表示匹配数字</span></div><div class=\"line\">$p = <span class=\"string\">'/\\d+\\-\\d+/'</span>;</div><div class=\"line\">$str = <span class=\"string\">\"我的电话是010-12345678\"</span>;</div><div class=\"line\">preg_match($p, $str, $match);</div><div class=\"line\"><span class=\"keyword\">echo</span> $match[<span class=\"number\">0</span>]; <span class=\"comment\">//结果为：010-12345678</span></div></pre></td></tr></table></figure>\n<p>懒惰模式：在可匹配与可不匹配的时候，优先不匹配</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$p = <span class=\"string\">'/\\d?\\-\\d?/'</span>;</div><div class=\"line\">$str = <span class=\"string\">\"我的电话是010-12345678\"</span>;</div><div class=\"line\">preg_match($p, $str, $match);</div><div class=\"line\"><span class=\"keyword\">echo</span> $match[<span class=\"number\">0</span>];  <span class=\"comment\">//结果为：0-1</span></div></pre></td></tr></table></figure>\n<p>当我们确切的知道所匹配的字符长度的时候，可以使用{}指定匹配字符数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$p = <span class=\"string\">'/\\d&#123;3&#125;\\-\\d&#123;8&#125;/'</span>;</div><div class=\"line\">$str = <span class=\"string\">\"我的电话是010-12345678\"</span>;</div><div class=\"line\">preg_match($p, $str, $match);</div><div class=\"line\"><span class=\"keyword\">echo</span> $match[<span class=\"number\">0</span>]; <span class=\"comment\">//结果为：010-12345678</span></div></pre></td></tr></table></figure>\n<p></p><h2>正则表达式的搜索和替换</h2><br>正则表达式的搜索与替换在某些方面具有重要用途，比如调整目标字符串的格式，改变目标字符串中匹配字符串的顺序等。<br>例如我们可以简单的调整字符串的日期格式：<p></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$string = <span class=\"string\">'April 15, 2014'</span>;</div><div class=\"line\">$pattern = <span class=\"string\">'/(\\w+) (\\d+), (\\d+)/i'</span>;</div><div class=\"line\">$replacement = <span class=\"string\">'$3, $&#123;1&#125; $2'</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> preg_replace($pattern, $replacement, $string); <span class=\"comment\">//结果为：2014, April 15</span></div></pre></td></tr></table></figure>\n<p>其中${1}与$1的写法是等效的，表示第一个匹配的字串，$2代表第二个匹配的。<br>通过复杂的模式，我们可以更加精确的替换目标字符串的内容。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$patterns = <span class=\"keyword\">array</span> (<span class=\"string\">'/(19|20)(\\d&#123;2&#125;)-(\\d&#123;1,2&#125;)-(\\d&#123;1,2&#125;)/'</span>,</div><div class=\"line\">                   <span class=\"string\">'/^\\s*&#123;(\\w+)&#125;\\s*=/'</span>);</div><div class=\"line\">$replace = <span class=\"keyword\">array</span> (<span class=\"string\">'\\3/\\4/\\1\\2'</span>, <span class=\"string\">'$\\1 ='</span>);</div><div class=\"line\"><span class=\"comment\">//\\3等效于$3,\\4等效于$4，依次类推</span></div><div class=\"line\"><span class=\"keyword\">echo</span> preg_replace($patterns, $replace, <span class=\"string\">'&#123;startDate&#125; = 1999-5-27'</span>); </div><div class=\"line\"><span class=\"comment\">//结果为：$startDate = 5/27/1999</span></div><div class=\"line\"><span class=\"comment\">//详细解释下结果：(19|20)表示取19或者20中任意一个数字，(\\d&#123;2&#125;)表示两个数字，(\\d&#123;1,2&#125;)表示1个或2个数字，(\\d&#123;1,2&#125;)表示1个或2个数字。^\\s*&#123;(\\w+)\\s*=&#125;表示以任意空格开头的，并且包含在&#123;&#125;中的字符，并且以任意空格结尾的，最后有个=号的。</span></div></pre></td></tr></table></figure>\n<p>用正则替换来去掉多余的空格与字符：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">'one     two'</span>;</div><div class=\"line\">$str = preg_replace(<span class=\"string\">'/\\s+/'</span>, <span class=\"string\">' '</span>, $str);</div><div class=\"line\"><span class=\"keyword\">echo</span> $str; <span class=\"comment\">// 结果改变为'one two'</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$user = <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"string\">'name'</span> =&gt; <span class=\"string\">'spark1985'</span>,</div><div class=\"line\">    <span class=\"string\">'email'</span> =&gt; <span class=\"string\">'spark@imooc.com'</span>,</div><div class=\"line\">    <span class=\"string\">'mobile'</span> =&gt; <span class=\"string\">'13312345678'</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"comment\">//进行一般性验证</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($user)) &#123;</div><div class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">'用户信息不能为空'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (strlen($user[<span class=\"string\">'name'</span>]) &lt; <span class=\"number\">6</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">'用户名长度最少为6位'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//用户名必须为字母、数字与下划线</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!preg_match(<span class=\"string\">'/^\\w+$/i'</span>, $user[<span class=\"string\">'name'</span>])) &#123;</div><div class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">'用户名不合法'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//验证邮箱格式是否正确</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!preg_match(<span class=\"string\">'/^[\\w\\.]+@\\w+\\.\\w+$/i'</span>, $user[<span class=\"string\">'email'</span>])) &#123;</div><div class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">'邮箱不合法'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//手机号必须为11位数字，且为1开头</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!preg_match(<span class=\"string\">'/^1\\d&#123;10&#125;$/i'</span>, $user[<span class=\"string\">'mobile'</span>])) &#123;</div><div class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">'手机号不合法'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'用户信息验证成功'</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>正则表达式<br>","more":"<br>PHP使用PCRE库函数来进行正则处理，通过设定好模式，然后调用相关的处理函数来取得匹配结果。</p>\n<p><h2>preg_match</h2><br>preg_match用来执行一个匹配，可以简单的用来判断模式是否匹配成功，或者取得一个匹配结果，他的返回值是匹配成功的次数0或者1，在匹配到1次以后就会停止搜索。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$subject = <span class=\"string\">\"abcdef\"</span>;</div><div class=\"line\">$pattern = <span class=\"string\">'/def/'</span>;</div><div class=\"line\">preg_match($pattern, $subject, $matches);</div><div class=\"line\">print_r($matches); <span class=\"comment\">//结果为：Array ( [0] =&gt; def )</span></div></pre></td></tr></table></figure>\n<p>上面的代码简单的执行了一个匹配，简单的判断def是否能匹配成功，但是正则表达式的强大的地方是进行模式匹配，因此更多的时候，会使用模式：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$subject = <span class=\"string\">\"abcdef\"</span>;</div><div class=\"line\">$pattern = <span class=\"string\">'/a(.*?)d/'</span>;</div><div class=\"line\">preg_match($pattern, $subject, $matches);</div><div class=\"line\">print_r($matches); <span class=\"comment\">//结果为：Array ( [0] =&gt; abcd [1] =&gt; bc )</span></div></pre></td></tr></table></figure>\n<p>通过正则表达式可以匹配一个模式，得到更多的有用的数据。</p>\n<p><h2>preg_match_all</h2><br>preg_match_all可以循环获取一个列表的匹配结果数组。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$p = <span class=\"string\">\"|&lt;[^&gt;]+&gt;(.*?)&lt;/[^&gt;]+&gt;|i\"</span>;</div><div class=\"line\">$str = <span class=\"string\">\"&lt;b&gt;example: &lt;/b&gt;&lt;div align=left&gt;this is a test&lt;/div&gt;\"</span>;</div><div class=\"line\">preg_match_all($p, $str, $matches);</div><div class=\"line\">print_r($matches);</div></pre></td></tr></table></figure>\n<p>可以使用preg_match_all匹配一个表格中的数据：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$p = <span class=\"string\">\"/&lt;tr&gt;&lt;td&gt;(.*?)&lt;\\/td&gt;\\s*&lt;td&gt;(.*?)&lt;\\/td&gt;\\s*&lt;\\/tr&gt;/i\"</span>;</div><div class=\"line\">$str = <span class=\"string\">\"&lt;table&gt; &lt;tr&gt;&lt;td&gt;Eric&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;John&lt;/td&gt;&lt;td&gt;26&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;\"</span>;</div><div class=\"line\">preg_match_all($p, $str, $matches);</div><div class=\"line\">print_r($matches);</div><div class=\"line\">$matches结果排序为$matches[<span class=\"number\">0</span>]保存完整模式的所有匹配, $matches[<span class=\"number\">1</span>] 保存第一个子组的所有匹配，以此类推。</div></pre></td></tr></table></figure>\n<p><h2>正则表达式的基本语法</h2><br>PCRE库函数中，正则匹配模式使用分隔符与元字符组成，分隔符可以是非数字、非反斜线、非空格的任意字符。经常使用的分隔符是正斜线(/)、hash符号(#) 以及取反符号(~)，例如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/foo bar/</div><div class=\"line\"><span class=\"comment\">#^[^0-9]$#</span></div><div class=\"line\">~php~</div></pre></td></tr></table></figure>\n<p>如果模式中包含分隔符，则分隔符需要使用反斜杠（\\）进行转义。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/http:\\/\\<span class=\"comment\">//</span></div></pre></td></tr></table></figure>\n<p>如果模式中包含较多的分割字符，建议更换其他的字符作为分隔符，也可以采用preg_quote进行转义。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$p = <span class=\"string\">'http://'</span>;</div><div class=\"line\">$p = <span class=\"string\">'/'</span>.preg_quote($p, <span class=\"string\">'/'</span>).<span class=\"string\">'/'</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $p;</div><div class=\"line\">分隔符后面可以使用模式修饰符，模式修饰符包括：i, m, s, x等，例如使用i修饰符可以忽略大小写匹配：</div><div class=\"line\">$str = <span class=\"string\">\"Http://www.imooc.com/\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (preg_match(<span class=\"string\">'/http/i'</span>, $str)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'匹配成功'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><h2>元字符与转义</h2><br>正则表达式中具有特殊含义的字符称之为元字符，常用的元字符有：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\ 一般用于转义字符</div><div class=\"line\">^ 断言目标的开始位置(或在多行模式下是行首)</div><div class=\"line\">$ 断言目标的结束位置(或在多行模式下是行尾)</div><div class=\"line\">. 匹配除换行符外的任何字符(默认)</div><div class=\"line\">[ 开始字符类定义</div><div class=\"line\">] 结束字符类定义</div><div class=\"line\">| 开始一个可选分支</div><div class=\"line\">( 子组的开始标记</div><div class=\"line\">) 子组的结束标记</div><div class=\"line\">? 作为量词，表示 0 次或 1 次匹配。位于量词后面用于改变量词的贪婪特性。 (查阅量词)</div><div class=\"line\">* 量词，0 次或多次匹配</div><div class=\"line\">+ 量词，1 次或多次匹配</div><div class=\"line\">&#123; 自定义量词开始标记</div><div class=\"line\">&#125; 自定义量词结束标记</div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//下面的\\s匹配任意的空白符，包括空格，制表符，换行符。[^\\s]代表非空白符。[^\\s]+表示一次或多次匹配非空白符。</span></div><div class=\"line\">$p = <span class=\"string\">'/^我[^\\s]+(苹果|香蕉)$/'</span>;</div><div class=\"line\">$str = <span class=\"string\">\"我喜欢吃苹果\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (preg_match($p, $str)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'匹配成功'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>元字符具有两种使用场景，一种是可以在任何地方都能使用，另一种是只能在方括号内使用，在方括号内使用的有：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\ 转义字符</div><div class=\"line\">^ 仅在作为第一个字符(方括号内)时，表明字符类取反</div><div class=\"line\">- 标记字符范围</div></pre></td></tr></table></figure>\n<p>其中^在反括号外面，表示断言目标的开始位置，但在方括号内部则代表字符类取反，方括号内的减号-可以标记字符范围，例如0-9表示0到9之间的所有数字。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//下面的\\w匹配字母或数字或下划线。</span></div><div class=\"line\">$p = <span class=\"string\">'/[\\w\\.\\-]+@[a-z0-9\\-]+\\.(com|cn)/'</span>;</div><div class=\"line\">$str = <span class=\"string\">\"我的邮箱是Spark.eric@imooc.com\"</span>;</div><div class=\"line\">preg_match($p, $str, $match);</div><div class=\"line\"><span class=\"keyword\">echo</span> $match[<span class=\"number\">0</span>];</div></pre></td></tr></table></figure>\n<p><h2>贪婪模式与懒惰模式</h2><br>正则表达式中每个元字符匹配一个字符，当使用+之后将会变的贪婪，它将匹配尽可能多的字符，但使用问号?字符时，它将尽可能少的匹配字符，既是懒惰模式。<br>贪婪模式：在可匹配与可不匹配的时候，优先匹配</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//下面的\\d表示匹配数字</span></div><div class=\"line\">$p = <span class=\"string\">'/\\d+\\-\\d+/'</span>;</div><div class=\"line\">$str = <span class=\"string\">\"我的电话是010-12345678\"</span>;</div><div class=\"line\">preg_match($p, $str, $match);</div><div class=\"line\"><span class=\"keyword\">echo</span> $match[<span class=\"number\">0</span>]; <span class=\"comment\">//结果为：010-12345678</span></div></pre></td></tr></table></figure>\n<p>懒惰模式：在可匹配与可不匹配的时候，优先不匹配</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$p = <span class=\"string\">'/\\d?\\-\\d?/'</span>;</div><div class=\"line\">$str = <span class=\"string\">\"我的电话是010-12345678\"</span>;</div><div class=\"line\">preg_match($p, $str, $match);</div><div class=\"line\"><span class=\"keyword\">echo</span> $match[<span class=\"number\">0</span>];  <span class=\"comment\">//结果为：0-1</span></div></pre></td></tr></table></figure>\n<p>当我们确切的知道所匹配的字符长度的时候，可以使用{}指定匹配字符数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$p = <span class=\"string\">'/\\d&#123;3&#125;\\-\\d&#123;8&#125;/'</span>;</div><div class=\"line\">$str = <span class=\"string\">\"我的电话是010-12345678\"</span>;</div><div class=\"line\">preg_match($p, $str, $match);</div><div class=\"line\"><span class=\"keyword\">echo</span> $match[<span class=\"number\">0</span>]; <span class=\"comment\">//结果为：010-12345678</span></div></pre></td></tr></table></figure>\n<p><h2>正则表达式的搜索和替换</h2><br>正则表达式的搜索与替换在某些方面具有重要用途，比如调整目标字符串的格式，改变目标字符串中匹配字符串的顺序等。<br>例如我们可以简单的调整字符串的日期格式：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$string = <span class=\"string\">'April 15, 2014'</span>;</div><div class=\"line\">$pattern = <span class=\"string\">'/(\\w+) (\\d+), (\\d+)/i'</span>;</div><div class=\"line\">$replacement = <span class=\"string\">'$3, $&#123;1&#125; $2'</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> preg_replace($pattern, $replacement, $string); <span class=\"comment\">//结果为：2014, April 15</span></div></pre></td></tr></table></figure>\n<p>其中${1}与$1的写法是等效的，表示第一个匹配的字串，$2代表第二个匹配的。<br>通过复杂的模式，我们可以更加精确的替换目标字符串的内容。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$patterns = <span class=\"keyword\">array</span> (<span class=\"string\">'/(19|20)(\\d&#123;2&#125;)-(\\d&#123;1,2&#125;)-(\\d&#123;1,2&#125;)/'</span>,</div><div class=\"line\">                   <span class=\"string\">'/^\\s*&#123;(\\w+)&#125;\\s*=/'</span>);</div><div class=\"line\">$replace = <span class=\"keyword\">array</span> (<span class=\"string\">'\\3/\\4/\\1\\2'</span>, <span class=\"string\">'$\\1 ='</span>);</div><div class=\"line\"><span class=\"comment\">//\\3等效于$3,\\4等效于$4，依次类推</span></div><div class=\"line\"><span class=\"keyword\">echo</span> preg_replace($patterns, $replace, <span class=\"string\">'&#123;startDate&#125; = 1999-5-27'</span>); </div><div class=\"line\"><span class=\"comment\">//结果为：$startDate = 5/27/1999</span></div><div class=\"line\"><span class=\"comment\">//详细解释下结果：(19|20)表示取19或者20中任意一个数字，(\\d&#123;2&#125;)表示两个数字，(\\d&#123;1,2&#125;)表示1个或2个数字，(\\d&#123;1,2&#125;)表示1个或2个数字。^\\s*&#123;(\\w+)\\s*=&#125;表示以任意空格开头的，并且包含在&#123;&#125;中的字符，并且以任意空格结尾的，最后有个=号的。</span></div></pre></td></tr></table></figure>\n<p>用正则替换来去掉多余的空格与字符：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">'one     two'</span>;</div><div class=\"line\">$str = preg_replace(<span class=\"string\">'/\\s+/'</span>, <span class=\"string\">' '</span>, $str);</div><div class=\"line\"><span class=\"keyword\">echo</span> $str; <span class=\"comment\">// 结果改变为'one two'</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$user = <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"string\">'name'</span> =&gt; <span class=\"string\">'spark1985'</span>,</div><div class=\"line\">    <span class=\"string\">'email'</span> =&gt; <span class=\"string\">'spark@imooc.com'</span>,</div><div class=\"line\">    <span class=\"string\">'mobile'</span> =&gt; <span class=\"string\">'13312345678'</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"comment\">//进行一般性验证</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($user)) &#123;</div><div class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">'用户信息不能为空'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (strlen($user[<span class=\"string\">'name'</span>]) &lt; <span class=\"number\">6</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">'用户名长度最少为6位'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//用户名必须为字母、数字与下划线</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!preg_match(<span class=\"string\">'/^\\w+$/i'</span>, $user[<span class=\"string\">'name'</span>])) &#123;</div><div class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">'用户名不合法'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//验证邮箱格式是否正确</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!preg_match(<span class=\"string\">'/^[\\w\\.]+@\\w+\\.\\w+$/i'</span>, $user[<span class=\"string\">'email'</span>])) &#123;</div><div class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">'邮箱不合法'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//手机号必须为11位数字，且为1开头</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!preg_match(<span class=\"string\">'/^1\\d&#123;10&#125;$/i'</span>, $user[<span class=\"string\">'mobile'</span>])) &#123;</div><div class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">'手机号不合法'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'用户信息验证成功'</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"ActiveRecord(一)","date":"2016-04-01T12:47:18.000Z","_content":"ActiveRecord(一)\n<!-- more -->\n\n<img src=\"/images/42.png\" width=\"800\" height=\"680\" />\n\n<h1>命名和模式约定</h1>\n\n<h3>命名约定</h3>\n<img src=\"/images/43.png\" width=\"800\" height=\"680\" />\n\n<h3>模式约定</h3>\n<img src=\"/images/44.png\" width=\"800\" height=\"680\" />\n<h3>不使用约定</h3>\n指定表名\n```ruby\nself.table_name\n```\n指定主键\n```ruby\nself.primary_key\n```\n\n<h1>基本操作</h1>\n\n<h3>创建</h3>\n```ruby\n User.create(:name => 'xiaowang', :email => 'xiaowang@gmail.com')\n \n @user = User.new(:name => 'xiaowang', :email => 'xiaowang@gmail.com')\n @user.save\n```\n<h3>读取</h3>\n```ruby\n User.all\n\n User.find  #（主键）\n \n User.find_by(:name => 'xiaowang') #第一个符合条件的\n```\n<h3>更新</h3>\n```ruby\n @user.update(:name => 'xiaowang', :email => 'xiaowang@gmail.com')\n\n User.update_all(:name => 'nima')\n```\n<h3>删除</h3>\n删除一个数据\n```ruby\n@user.destroy\n```\n\n删除表中所有数据\n```ruby\nUser.destroy_all\n```\n\n\n<h1>数据迁移</h1>\n\n迁移\n```ruby\nrake db:migrate\n```\n回滚\n```ruby\nrake db:rollback\n```\n```ruby\nrake db:rollback STEP=2\n```\n<h2>单独创建迁移</h2>\n<h3>Creatxxx</h3>\n```ruby\nrails g migration CreateWallets\n```\n<h3>AddxxxToyyy</h3>\n```ruby\nrails g migration AddLocationToUser location:string \n```\n<h3>RemovexxxFromyyy</h3>\n```ruby\nrails g migration RemoveLocationFromUser location:string \n```\n<h2>change方法</h2>\n<h3>table</h3>\n<h4>create_table</h4>\n\n<h4>rename_table</h4>\n\n<h4>drop_table</h4>\n\n<h3>join_table</h3>\n<h4>create_join_table</h4>\n\n<h4>drop_join_table</h4>\n\n<h3>column</h3>\n<h4>add_column</h4>\n\n<h4>rename_column</h4>\n\n<h4>remove_column</h4>\n\n<h3>index</h3>\n<h4>add_index</h4>\n\n<h4>rename_index</h4>\n\n<h4>remove_index</h4>\n\n<h3>reference</h3>\n<h4>add_reference</h4>\n\n<h4>remove_reference</h4>\n\n<h3>timestamps</h3>\n<h4>add_timestamps</h4>\n\n<h4>remove_timestamps</h4>\n\n<h2>up和down方法</h2>\n<h2>revert方法</h2>\n```ruby\nrequire_relative \"20161202100202_create_uesrs\"\n\nclass RevertCreateUsers < ActiveRecord::Migration\n  def change\n    revert CreateUsers\n  end\nend\n```\n\n<h2>种子数据</h2>\ndb/seed.rb\n```ruby\n15.times do |n|\n  User.create(:name => 'male_user_#{n}', :phone_number => '13012312311', :gender => 'male' )\n  User.create(:name => 'female_user_#{n}', :phone_number => '13012312311', :gender => 'female' )\n\nend\n```\n搭建数据库\n```ruby\nrake db:setup\n```\n填充种子数据\n```ruby\nrake db:seed\n```\n重建数据库\n```ruby\nrake db:reset\n```\n设置环境\n```ruby\nRAILS_ENV=test\n```\n导出数据库\n```ruby\nrake db:schema:load\n```\n\n<h2>数据验证</h2>\n<h3>跳过数据验证</h3>\n```ruby\n@user.save(validate:false)\n```\n<img src=\"/images/45.png\" width=\"800\" height=\"763\" />\n\n<h3>是否合法</h3>\nvalid？\n```ruby\n@user.valid？\n```\ninvalid？\n```ruby\n@user.invalid？\n```\n\n<h3>错误信息</h3>\n```ruby\n@user.errors.messages\n```\n```ruby\n@user.errors[:name]\n```\n\n<h3>presence</h3>\n不为空\n```ruby\nclass User < ApplicationRecord\n\n  validates :name, presence: true\n\nend\n```\n<h3>absence</h3>\n为空\n```ruby\n  validates :name, absence: true\n```\n<h3>length</h3>\n长度\n+ minimum\n+ maximum\n+ in\n+ is\n```ruby\n  validates :name, length: {maximum: 3}\n  validates :name, length: {in: 3..20}\n  validates :name, length: {is: 6}\n```\n<h3>confirmation</h3>\n确认\n```ruby\n  validates :password, confirmation: true\n```\n<h3>inclusion/exclusion</h3>\n范围\n```ruby\n  validates :province, inclusion: {in: ['北京', '上海']}\n  validates :age, exclusion: {in: 0..18}\n\n```\n<h3>format</h3>\n格式\n```ruby\n  validates :phone_number, format: {with: /1[0-9]{10}\\z/ }\n```\n\n<h3>uniqueness</h3>\n唯一\n```ruby\n  validates :name, uniqueness: true\n```\n不区分大小写\n```ruby\n  validates :name, uniqueness: {case_sensitive: false}\n```\n\n\n\n\n<h3>常用验证选项</h3>\n+ allow_nil\n+ allow_blank\n+ message\n+ on\n```ruby\n  validates :password, confirmation: true\n  validates :password, :password_confirmation, presence: {on: :create, message: '密码和确认密码不能为空'}\n  validates :password, length: {minimum: 6}\n\n\n   validates :name, uniqueness: {allow_nil: true}\n\n```\n\n<h3>条件验证</h3>\n指定symbol\n```ruby\n validates :name, uniqueness: true, :if => :test?\n  \n  def test?\n    false\n  end\n```\n指定字符串\n```ruby\n  validates :phone_number, uniqueness: true, :if => 'name.nil'\n```\n指定proc\n```ruby\n  validates :phone_number, uniqueness: true, :if => Proc.new {name.nil?}\n```\n\n```ruby\n  with_options if: :test? do\n    validates :name, uniqueness: true\n    validates :name, uniqueness: true\n\n  end\n\n  def test?\n    (1+1 == 2)\n  end\n```\n联合条件\n```ruby\n  with_options if: :test?, unless: :test2? do\n    validates :name, uniqueness: true\n    validates :name, uniqueness: true\n\n  end\n\n  def test?\n    (1+1 == 2)\n  end\n  \n    def test2?\n      (1+1 == 2)\n    end\n```\n\n<h3>自定义验证方法</h3>\n+ validates_with\n+ validates_each\n```ruby\nclass MyValidator < ActiveModel::Validator\n\n  def validate(record)\n    if record.name.nil?\n      record.errors[:name] << '用户名不能为空'\n    end\n    if record.phone_number.nil?\n      record.errors[:phone_number] << '手机号码不能为空'\n    end\n\n  end\nend\n\n\nclass User < ApplicationRecord\n\n  validates_with MyValidator\n\nend\n\n```\n\n```ruby\nclass User < ApplicationRecord\n\n  validate :my_validator\n\n  def my_validator\n    if name.nil?\n      errors[:name] << '用户名不能为空'\n    end\n  end\n\nend\n```\n<h3>验证错误</h3>\n+ errors\n+ errors[:attribute]\n+ errors.add\n+ errors.size\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/ActiveRecord(一).md","raw":"---\ntitle: ActiveRecord(一)\ndate: 2016-04-01 20:47:18\ncategories: ruby\ntags: [ruby,rails]\n---\nActiveRecord(一)\n<!-- more -->\n\n<img src=\"/images/42.png\" width=\"800\" height=\"680\" />\n\n<h1>命名和模式约定</h1>\n\n<h3>命名约定</h3>\n<img src=\"/images/43.png\" width=\"800\" height=\"680\" />\n\n<h3>模式约定</h3>\n<img src=\"/images/44.png\" width=\"800\" height=\"680\" />\n<h3>不使用约定</h3>\n指定表名\n```ruby\nself.table_name\n```\n指定主键\n```ruby\nself.primary_key\n```\n\n<h1>基本操作</h1>\n\n<h3>创建</h3>\n```ruby\n User.create(:name => 'xiaowang', :email => 'xiaowang@gmail.com')\n \n @user = User.new(:name => 'xiaowang', :email => 'xiaowang@gmail.com')\n @user.save\n```\n<h3>读取</h3>\n```ruby\n User.all\n\n User.find  #（主键）\n \n User.find_by(:name => 'xiaowang') #第一个符合条件的\n```\n<h3>更新</h3>\n```ruby\n @user.update(:name => 'xiaowang', :email => 'xiaowang@gmail.com')\n\n User.update_all(:name => 'nima')\n```\n<h3>删除</h3>\n删除一个数据\n```ruby\n@user.destroy\n```\n\n删除表中所有数据\n```ruby\nUser.destroy_all\n```\n\n\n<h1>数据迁移</h1>\n\n迁移\n```ruby\nrake db:migrate\n```\n回滚\n```ruby\nrake db:rollback\n```\n```ruby\nrake db:rollback STEP=2\n```\n<h2>单独创建迁移</h2>\n<h3>Creatxxx</h3>\n```ruby\nrails g migration CreateWallets\n```\n<h3>AddxxxToyyy</h3>\n```ruby\nrails g migration AddLocationToUser location:string \n```\n<h3>RemovexxxFromyyy</h3>\n```ruby\nrails g migration RemoveLocationFromUser location:string \n```\n<h2>change方法</h2>\n<h3>table</h3>\n<h4>create_table</h4>\n\n<h4>rename_table</h4>\n\n<h4>drop_table</h4>\n\n<h3>join_table</h3>\n<h4>create_join_table</h4>\n\n<h4>drop_join_table</h4>\n\n<h3>column</h3>\n<h4>add_column</h4>\n\n<h4>rename_column</h4>\n\n<h4>remove_column</h4>\n\n<h3>index</h3>\n<h4>add_index</h4>\n\n<h4>rename_index</h4>\n\n<h4>remove_index</h4>\n\n<h3>reference</h3>\n<h4>add_reference</h4>\n\n<h4>remove_reference</h4>\n\n<h3>timestamps</h3>\n<h4>add_timestamps</h4>\n\n<h4>remove_timestamps</h4>\n\n<h2>up和down方法</h2>\n<h2>revert方法</h2>\n```ruby\nrequire_relative \"20161202100202_create_uesrs\"\n\nclass RevertCreateUsers < ActiveRecord::Migration\n  def change\n    revert CreateUsers\n  end\nend\n```\n\n<h2>种子数据</h2>\ndb/seed.rb\n```ruby\n15.times do |n|\n  User.create(:name => 'male_user_#{n}', :phone_number => '13012312311', :gender => 'male' )\n  User.create(:name => 'female_user_#{n}', :phone_number => '13012312311', :gender => 'female' )\n\nend\n```\n搭建数据库\n```ruby\nrake db:setup\n```\n填充种子数据\n```ruby\nrake db:seed\n```\n重建数据库\n```ruby\nrake db:reset\n```\n设置环境\n```ruby\nRAILS_ENV=test\n```\n导出数据库\n```ruby\nrake db:schema:load\n```\n\n<h2>数据验证</h2>\n<h3>跳过数据验证</h3>\n```ruby\n@user.save(validate:false)\n```\n<img src=\"/images/45.png\" width=\"800\" height=\"763\" />\n\n<h3>是否合法</h3>\nvalid？\n```ruby\n@user.valid？\n```\ninvalid？\n```ruby\n@user.invalid？\n```\n\n<h3>错误信息</h3>\n```ruby\n@user.errors.messages\n```\n```ruby\n@user.errors[:name]\n```\n\n<h3>presence</h3>\n不为空\n```ruby\nclass User < ApplicationRecord\n\n  validates :name, presence: true\n\nend\n```\n<h3>absence</h3>\n为空\n```ruby\n  validates :name, absence: true\n```\n<h3>length</h3>\n长度\n+ minimum\n+ maximum\n+ in\n+ is\n```ruby\n  validates :name, length: {maximum: 3}\n  validates :name, length: {in: 3..20}\n  validates :name, length: {is: 6}\n```\n<h3>confirmation</h3>\n确认\n```ruby\n  validates :password, confirmation: true\n```\n<h3>inclusion/exclusion</h3>\n范围\n```ruby\n  validates :province, inclusion: {in: ['北京', '上海']}\n  validates :age, exclusion: {in: 0..18}\n\n```\n<h3>format</h3>\n格式\n```ruby\n  validates :phone_number, format: {with: /1[0-9]{10}\\z/ }\n```\n\n<h3>uniqueness</h3>\n唯一\n```ruby\n  validates :name, uniqueness: true\n```\n不区分大小写\n```ruby\n  validates :name, uniqueness: {case_sensitive: false}\n```\n\n\n\n\n<h3>常用验证选项</h3>\n+ allow_nil\n+ allow_blank\n+ message\n+ on\n```ruby\n  validates :password, confirmation: true\n  validates :password, :password_confirmation, presence: {on: :create, message: '密码和确认密码不能为空'}\n  validates :password, length: {minimum: 6}\n\n\n   validates :name, uniqueness: {allow_nil: true}\n\n```\n\n<h3>条件验证</h3>\n指定symbol\n```ruby\n validates :name, uniqueness: true, :if => :test?\n  \n  def test?\n    false\n  end\n```\n指定字符串\n```ruby\n  validates :phone_number, uniqueness: true, :if => 'name.nil'\n```\n指定proc\n```ruby\n  validates :phone_number, uniqueness: true, :if => Proc.new {name.nil?}\n```\n\n```ruby\n  with_options if: :test? do\n    validates :name, uniqueness: true\n    validates :name, uniqueness: true\n\n  end\n\n  def test?\n    (1+1 == 2)\n  end\n```\n联合条件\n```ruby\n  with_options if: :test?, unless: :test2? do\n    validates :name, uniqueness: true\n    validates :name, uniqueness: true\n\n  end\n\n  def test?\n    (1+1 == 2)\n  end\n  \n    def test2?\n      (1+1 == 2)\n    end\n```\n\n<h3>自定义验证方法</h3>\n+ validates_with\n+ validates_each\n```ruby\nclass MyValidator < ActiveModel::Validator\n\n  def validate(record)\n    if record.name.nil?\n      record.errors[:name] << '用户名不能为空'\n    end\n    if record.phone_number.nil?\n      record.errors[:phone_number] << '手机号码不能为空'\n    end\n\n  end\nend\n\n\nclass User < ApplicationRecord\n\n  validates_with MyValidator\n\nend\n\n```\n\n```ruby\nclass User < ApplicationRecord\n\n  validate :my_validator\n\n  def my_validator\n    if name.nil?\n      errors[:name] << '用户名不能为空'\n    end\n  end\n\nend\n```\n<h3>验证错误</h3>\n+ errors\n+ errors[:attribute]\n+ errors.add\n+ errors.size\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/ActiveRecord(一)","published":1,"updated":"2017-03-21T05:14:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99x006121xwrsfjfwsb","content":"<p>ActiveRecord(一)<br><a id=\"more\"></a></p>\n<p><img src=\"/images/42.png\" width=\"800\" height=\"680\"></p>\n<h1>命名和模式约定</h1>\n\n<p></p><h3>命名约定</h3><br><img src=\"/images/43.png\" width=\"800\" height=\"680\"><p></p>\n<p></p><h3>模式约定</h3><br><img src=\"/images/44.png\" width=\"800\" height=\"680\"><p></p>\n<p></p><h3>不使用约定</h3><br>指定表名<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span>.table_name</div></pre></td></tr></table></figure><p></p>\n<p>指定主键<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span>.primary_key</div></pre></td></tr></table></figure></p>\n<h1>基本操作</h1>\n\n<p></p><h3>创建</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.create(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'xiaowang'</span>, <span class=\"symbol\">:email</span> =&gt; <span class=\"string\">'xiaowang@gmail.com'</span>)</div><div class=\"line\"></div><div class=\"line\">@user = User.new(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'xiaowang'</span>, <span class=\"symbol\">:email</span> =&gt; <span class=\"string\">'xiaowang@gmail.com'</span>)</div><div class=\"line\">@user.save</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>读取</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.all</div><div class=\"line\"></div><div class=\"line\">User.find  <span class=\"comment\">#（主键）</span></div><div class=\"line\"></div><div class=\"line\">User.find_by(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'xiaowang'</span>) <span class=\"comment\">#第一个符合条件的</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h3>更新</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@user.update(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'xiaowang'</span>, <span class=\"symbol\">:email</span> =&gt; <span class=\"string\">'xiaowang@gmail.com'</span>)</div><div class=\"line\"></div><div class=\"line\">User.update_all(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'nima'</span>)</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>删除</h3><br>删除一个数据<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@user.destroy</div></pre></td></tr></table></figure><p></p>\n<p>删除表中所有数据<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.destroy_all</div></pre></td></tr></table></figure></p>\n<h1>数据迁移</h1>\n\n<p>迁移<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake <span class=\"symbol\">db:</span>migrate</div></pre></td></tr></table></figure></p>\n<p>回滚<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake <span class=\"symbol\">db:</span>rollback</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake <span class=\"symbol\">db:</span>rollback STEP=<span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<p></p><h2>单独创建迁移</h2><p></p>\n<p></p><h3>Creatxxx</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails g migration CreateWallets</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>AddxxxToyyy</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails g migration AddLocationToUser <span class=\"symbol\">location:</span>string</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>RemovexxxFromyyy</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails g migration RemoveLocationFromUser <span class=\"symbol\">location:</span>string</div></pre></td></tr></table></figure><p></p>\n<p></p><h2>change方法</h2><p></p>\n<p></p><h3>table</h3><p></p>\n<h4>create_table</h4>\n\n<h4>rename_table</h4>\n\n<h4>drop_table</h4>\n\n<p></p><h3>join_table</h3><p></p>\n<h4>create_join_table</h4>\n\n<h4>drop_join_table</h4>\n\n<p></p><h3>column</h3><p></p>\n<h4>add_column</h4>\n\n<h4>rename_column</h4>\n\n<h4>remove_column</h4>\n\n<p></p><h3>index</h3><p></p>\n<h4>add_index</h4>\n\n<h4>rename_index</h4>\n\n<h4>remove_index</h4>\n\n<p></p><h3>reference</h3><p></p>\n<h4>add_reference</h4>\n\n<h4>remove_reference</h4>\n\n<p></p><h3>timestamps</h3><p></p>\n<h4>add_timestamps</h4>\n\n<h4>remove_timestamps</h4>\n\n<p></p><h2>up和down方法</h2><p></p>\n<p></p><h2>revert方法</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">require_relative <span class=\"string\">\"20161202100202_create_uesrs\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RevertCreateUsers</span> &lt; ActiveRecord::Migration</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span></span></div><div class=\"line\">    revert CreateUsers</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h2>种子数据</h2><br>db/seed.rb<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">15</span>.times <span class=\"keyword\">do</span> <span class=\"params\">|n|</span></div><div class=\"line\">  User.create(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'male_user_<span class=\"subst\">#&#123;n&#125;</span>'</span>, <span class=\"symbol\">:phone_number</span> =&gt; <span class=\"string\">'13012312311'</span>, <span class=\"symbol\">:gender</span> =&gt; <span class=\"string\">'male'</span> )</div><div class=\"line\">  User.create(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'female_user_<span class=\"subst\">#&#123;n&#125;</span>'</span>, <span class=\"symbol\">:phone_number</span> =&gt; <span class=\"string\">'13012312311'</span>, <span class=\"symbol\">:gender</span> =&gt; <span class=\"string\">'female'</span> )</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><p></p>\n<p>搭建数据库<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake <span class=\"symbol\">db:</span>setup</div></pre></td></tr></table></figure></p>\n<p>填充种子数据<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake <span class=\"symbol\">db:</span>seed</div></pre></td></tr></table></figure></p>\n<p>重建数据库<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake <span class=\"symbol\">db:</span>reset</div></pre></td></tr></table></figure></p>\n<p>设置环境<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">RAILS_ENV=test</div></pre></td></tr></table></figure></p>\n<p>导出数据库<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake <span class=\"symbol\">db:</span><span class=\"symbol\">schema:</span>load</div></pre></td></tr></table></figure></p>\n<p></p><h2>数据验证</h2><p></p>\n<p></p><h3>跳过数据验证</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@user.save(<span class=\"symbol\">validate:</span><span class=\"literal\">false</span>)</div></pre></td></tr></table></figure><p></p>\n<p><img src=\"/images/45.png\" width=\"800\" height=\"763\"></p>\n<p></p><h3>是否合法</h3><br>valid？<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@user.valid？</div></pre></td></tr></table></figure><p></p>\n<p>invalid？<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@user.invalid？</div></pre></td></tr></table></figure></p>\n<p></p><h3>错误信息</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@user.errors.messages</div></pre></td></tr></table></figure><p></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@user.errors[<span class=\"symbol\">:name</span>]</div></pre></td></tr></table></figure>\n<p></p><h3>presence</h3><br>不为空<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> &lt; ApplicationRecord</span></div><div class=\"line\"></div><div class=\"line\">  validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">presence:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h3>absence</h3><br>为空<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">absence:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h3>length</h3><br>长度<p></p>\n<ul>\n<li>minimum</li>\n<li>maximum</li>\n<li>in</li>\n<li>is<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">length:</span> &#123;<span class=\"symbol\">maximum:</span> <span class=\"number\">3</span>&#125;</div><div class=\"line\">validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">length:</span> &#123;<span class=\"symbol\">in:</span> <span class=\"number\">3</span>..<span class=\"number\">20</span>&#125;</div><div class=\"line\">validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">length:</span> &#123;<span class=\"symbol\">is:</span> <span class=\"number\">6</span>&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p></p><h3>confirmation</h3><br>确认<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:password</span>, <span class=\"symbol\">confirmation:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h3>inclusion/exclusion</h3><br>范围<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:province</span>, <span class=\"symbol\">inclusion:</span> &#123;<span class=\"symbol\">in:</span> [<span class=\"string\">'北京'</span>, <span class=\"string\">'上海'</span>]&#125;</div><div class=\"line\">validates <span class=\"symbol\">:age</span>, <span class=\"symbol\">exclusion:</span> &#123;<span class=\"symbol\">in:</span> <span class=\"number\">0</span>..<span class=\"number\">18</span>&#125;</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>format</h3><br>格式<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:phone_number</span>, <span class=\"symbol\">format:</span> &#123;<span class=\"symbol\">with:</span> /<span class=\"number\">1</span>[<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">10</span>&#125;\\z/ &#125;</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>uniqueness</h3><br>唯一<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure><p></p>\n<p>不区分大小写<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> &#123;<span class=\"symbol\">case_sensitive:</span> <span class=\"literal\">false</span>&#125;</div></pre></td></tr></table></figure></p>\n<p></p><h3>常用验证选项</h3><p></p>\n<ul>\n<li>allow_nil</li>\n<li>allow_blank</li>\n<li>message</li>\n<li>on<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:password</span>, <span class=\"symbol\">confirmation:</span> <span class=\"literal\">true</span></div><div class=\"line\">validates <span class=\"symbol\">:password</span>, <span class=\"symbol\">:password_confirmation</span>, <span class=\"symbol\">presence:</span> &#123;<span class=\"symbol\">on:</span> <span class=\"symbol\">:create</span>, <span class=\"symbol\">message:</span> <span class=\"string\">'密码和确认密码不能为空'</span>&#125;</div><div class=\"line\">validates <span class=\"symbol\">:password</span>, <span class=\"symbol\">length:</span> &#123;<span class=\"symbol\">minimum:</span> <span class=\"number\">6</span>&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> &#123;<span class=\"symbol\">allow_nil:</span> <span class=\"literal\">true</span>&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p></p><h3>条件验证</h3><br>指定symbol<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span>, <span class=\"symbol\">:if</span> =&gt; <span class=\"symbol\">:test?</span></div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test?</span></span></div><div class=\"line\">   <span class=\"literal\">false</span></div><div class=\"line\"> <span class=\"keyword\">end</span></div></pre></td></tr></table></figure><p></p>\n<p>指定字符串<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:phone_number</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span>, <span class=\"symbol\">:if</span> =&gt; <span class=\"string\">'name.nil'</span></div></pre></td></tr></table></figure></p>\n<p>指定proc<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:phone_number</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span>, <span class=\"symbol\">:if</span> =&gt; Proc.new &#123;name.<span class=\"literal\">nil</span>?&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">with_options <span class=\"symbol\">if:</span> <span class=\"symbol\">:test?</span> <span class=\"keyword\">do</span></div><div class=\"line\">  validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span></div><div class=\"line\">  validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test?</span></span></div><div class=\"line\">  (<span class=\"number\">1</span>+<span class=\"number\">1</span> == <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>联合条件<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">with_options <span class=\"symbol\">if:</span> <span class=\"symbol\">:test?</span>, <span class=\"symbol\">unless:</span> <span class=\"symbol\">:test2?</span> <span class=\"keyword\">do</span></div><div class=\"line\">  validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span></div><div class=\"line\">  validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test?</span></span></div><div class=\"line\">  (<span class=\"number\">1</span>+<span class=\"number\">1</span> == <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test2?</span></span></div><div class=\"line\">    (<span class=\"number\">1</span>+<span class=\"number\">1</span> == <span class=\"number\">2</span>)</div><div class=\"line\">  <span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p></p><h3>自定义验证方法</h3><p></p>\n<ul>\n<li>validates_with</li>\n<li>validates_each<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyValidator</span> &lt; ActiveModel::Validator</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(record)</span></span></div><div class=\"line\">    <span class=\"keyword\">if</span> record.name.<span class=\"literal\">nil</span>?</div><div class=\"line\">      record.errors[<span class=\"symbol\">:name</span>] &lt;&lt; <span class=\"string\">'用户名不能为空'</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">if</span> record.phone_number.<span class=\"literal\">nil</span>?</div><div class=\"line\">      record.errors[<span class=\"symbol\">:phone_number</span>] &lt;&lt; <span class=\"string\">'手机号码不能为空'</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> &lt; ApplicationRecord</span></div><div class=\"line\"></div><div class=\"line\">  validates_with MyValidator</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> &lt; ApplicationRecord</span></div><div class=\"line\"></div><div class=\"line\">  validate <span class=\"symbol\">:my_validator</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_validator</span></span></div><div class=\"line\">    <span class=\"keyword\">if</span> name.<span class=\"literal\">nil</span>?</div><div class=\"line\">      errors[<span class=\"symbol\">:name</span>] &lt;&lt; <span class=\"string\">'用户名不能为空'</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p></p><h3>验证错误</h3><p></p>\n<ul>\n<li>errors</li>\n<li>errors[:attribute]</li>\n<li>errors.add</li>\n<li>errors.size</li>\n</ul>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>ActiveRecord(一)<br>","more":"</p>\n<p><img src=\"/images/42.png\" width=\"800\" height=\"680\" /></p>\n<h1>命名和模式约定</h1>\n\n<p><h3>命名约定</h3><br><img src=\"/images/43.png\" width=\"800\" height=\"680\" /></p>\n<p><h3>模式约定</h3><br><img src=\"/images/44.png\" width=\"800\" height=\"680\" /></p>\n<p><h3>不使用约定</h3><br>指定表名<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span>.table_name</div></pre></td></tr></table></figure></p>\n<p>指定主键<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span>.primary_key</div></pre></td></tr></table></figure></p>\n<h1>基本操作</h1>\n\n<p><h3>创建</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.create(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'xiaowang'</span>, <span class=\"symbol\">:email</span> =&gt; <span class=\"string\">'xiaowang@gmail.com'</span>)</div><div class=\"line\"></div><div class=\"line\">@user = User.new(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'xiaowang'</span>, <span class=\"symbol\">:email</span> =&gt; <span class=\"string\">'xiaowang@gmail.com'</span>)</div><div class=\"line\">@user.save</div></pre></td></tr></table></figure></p>\n<p><h3>读取</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.all</div><div class=\"line\"></div><div class=\"line\">User.find  <span class=\"comment\">#（主键）</span></div><div class=\"line\"></div><div class=\"line\">User.find_by(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'xiaowang'</span>) <span class=\"comment\">#第一个符合条件的</span></div></pre></td></tr></table></figure></p>\n<p><h3>更新</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@user.update(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'xiaowang'</span>, <span class=\"symbol\">:email</span> =&gt; <span class=\"string\">'xiaowang@gmail.com'</span>)</div><div class=\"line\"></div><div class=\"line\">User.update_all(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'nima'</span>)</div></pre></td></tr></table></figure></p>\n<p><h3>删除</h3><br>删除一个数据<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@user.destroy</div></pre></td></tr></table></figure></p>\n<p>删除表中所有数据<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.destroy_all</div></pre></td></tr></table></figure></p>\n<h1>数据迁移</h1>\n\n<p>迁移<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake <span class=\"symbol\">db:</span>migrate</div></pre></td></tr></table></figure></p>\n<p>回滚<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake <span class=\"symbol\">db:</span>rollback</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake <span class=\"symbol\">db:</span>rollback STEP=<span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<p><h2>单独创建迁移</h2></p>\n<p><h3>Creatxxx</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails g migration CreateWallets</div></pre></td></tr></table></figure></p>\n<p><h3>AddxxxToyyy</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails g migration AddLocationToUser <span class=\"symbol\">location:</span>string</div></pre></td></tr></table></figure></p>\n<p><h3>RemovexxxFromyyy</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails g migration RemoveLocationFromUser <span class=\"symbol\">location:</span>string</div></pre></td></tr></table></figure></p>\n<p><h2>change方法</h2></p>\n<p><h3>table</h3></p>\n<h4>create_table</h4>\n\n<h4>rename_table</h4>\n\n<h4>drop_table</h4>\n\n<p><h3>join_table</h3></p>\n<h4>create_join_table</h4>\n\n<h4>drop_join_table</h4>\n\n<p><h3>column</h3></p>\n<h4>add_column</h4>\n\n<h4>rename_column</h4>\n\n<h4>remove_column</h4>\n\n<p><h3>index</h3></p>\n<h4>add_index</h4>\n\n<h4>rename_index</h4>\n\n<h4>remove_index</h4>\n\n<p><h3>reference</h3></p>\n<h4>add_reference</h4>\n\n<h4>remove_reference</h4>\n\n<p><h3>timestamps</h3></p>\n<h4>add_timestamps</h4>\n\n<h4>remove_timestamps</h4>\n\n<p><h2>up和down方法</h2></p>\n<p><h2>revert方法</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">require_relative <span class=\"string\">\"20161202100202_create_uesrs\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RevertCreateUsers</span> &lt; ActiveRecord::Migration</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span></span></div><div class=\"line\">    revert CreateUsers</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p><h2>种子数据</h2><br>db/seed.rb<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">15</span>.times <span class=\"keyword\">do</span> <span class=\"params\">|n|</span></div><div class=\"line\">  User.create(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'male_user_<span class=\"subst\">#&#123;n&#125;</span>'</span>, <span class=\"symbol\">:phone_number</span> =&gt; <span class=\"string\">'13012312311'</span>, <span class=\"symbol\">:gender</span> =&gt; <span class=\"string\">'male'</span> )</div><div class=\"line\">  User.create(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'female_user_<span class=\"subst\">#&#123;n&#125;</span>'</span>, <span class=\"symbol\">:phone_number</span> =&gt; <span class=\"string\">'13012312311'</span>, <span class=\"symbol\">:gender</span> =&gt; <span class=\"string\">'female'</span> )</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>搭建数据库<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake <span class=\"symbol\">db:</span>setup</div></pre></td></tr></table></figure></p>\n<p>填充种子数据<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake <span class=\"symbol\">db:</span>seed</div></pre></td></tr></table></figure></p>\n<p>重建数据库<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake <span class=\"symbol\">db:</span>reset</div></pre></td></tr></table></figure></p>\n<p>设置环境<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">RAILS_ENV=test</div></pre></td></tr></table></figure></p>\n<p>导出数据库<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake <span class=\"symbol\">db:</span><span class=\"symbol\">schema:</span>load</div></pre></td></tr></table></figure></p>\n<p><h2>数据验证</h2></p>\n<p><h3>跳过数据验证</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@user.save(<span class=\"symbol\">validate:</span><span class=\"literal\">false</span>)</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/45.png\" width=\"800\" height=\"763\" /></p>\n<p><h3>是否合法</h3><br>valid？<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@user.valid？</div></pre></td></tr></table></figure></p>\n<p>invalid？<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@user.invalid？</div></pre></td></tr></table></figure></p>\n<p><h3>错误信息</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@user.errors.messages</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@user.errors[<span class=\"symbol\">:name</span>]</div></pre></td></tr></table></figure>\n<p><h3>presence</h3><br>不为空<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> &lt; ApplicationRecord</span></div><div class=\"line\"></div><div class=\"line\">  validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">presence:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p><h3>absence</h3><br>为空<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">absence:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p><h3>length</h3><br>长度</p>\n<ul>\n<li>minimum</li>\n<li>maximum</li>\n<li>in</li>\n<li>is<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">length:</span> &#123;<span class=\"symbol\">maximum:</span> <span class=\"number\">3</span>&#125;</div><div class=\"line\">validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">length:</span> &#123;<span class=\"symbol\">in:</span> <span class=\"number\">3</span>..<span class=\"number\">20</span>&#125;</div><div class=\"line\">validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">length:</span> &#123;<span class=\"symbol\">is:</span> <span class=\"number\">6</span>&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><h3>confirmation</h3><br>确认<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:password</span>, <span class=\"symbol\">confirmation:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p><h3>inclusion/exclusion</h3><br>范围<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:province</span>, <span class=\"symbol\">inclusion:</span> &#123;<span class=\"symbol\">in:</span> [<span class=\"string\">'北京'</span>, <span class=\"string\">'上海'</span>]&#125;</div><div class=\"line\">validates <span class=\"symbol\">:age</span>, <span class=\"symbol\">exclusion:</span> &#123;<span class=\"symbol\">in:</span> <span class=\"number\">0</span>..<span class=\"number\">18</span>&#125;</div></pre></td></tr></table></figure></p>\n<p><h3>format</h3><br>格式<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:phone_number</span>, <span class=\"symbol\">format:</span> &#123;<span class=\"symbol\">with:</span> /<span class=\"number\">1</span>[<span class=\"number\">0</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">10</span>&#125;\\z/ &#125;</div></pre></td></tr></table></figure></p>\n<p><h3>uniqueness</h3><br>唯一<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>不区分大小写<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> &#123;<span class=\"symbol\">case_sensitive:</span> <span class=\"literal\">false</span>&#125;</div></pre></td></tr></table></figure></p>\n<p><h3>常用验证选项</h3></p>\n<ul>\n<li>allow_nil</li>\n<li>allow_blank</li>\n<li>message</li>\n<li>on<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:password</span>, <span class=\"symbol\">confirmation:</span> <span class=\"literal\">true</span></div><div class=\"line\">validates <span class=\"symbol\">:password</span>, <span class=\"symbol\">:password_confirmation</span>, <span class=\"symbol\">presence:</span> &#123;<span class=\"symbol\">on:</span> <span class=\"symbol\">:create</span>, <span class=\"symbol\">message:</span> <span class=\"string\">'密码和确认密码不能为空'</span>&#125;</div><div class=\"line\">validates <span class=\"symbol\">:password</span>, <span class=\"symbol\">length:</span> &#123;<span class=\"symbol\">minimum:</span> <span class=\"number\">6</span>&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> &#123;<span class=\"symbol\">allow_nil:</span> <span class=\"literal\">true</span>&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><h3>条件验证</h3><br>指定symbol<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span>, <span class=\"symbol\">:if</span> =&gt; <span class=\"symbol\">:test?</span></div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test?</span></span></div><div class=\"line\">   <span class=\"literal\">false</span></div><div class=\"line\"> <span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>指定字符串<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:phone_number</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span>, <span class=\"symbol\">:if</span> =&gt; <span class=\"string\">'name.nil'</span></div></pre></td></tr></table></figure></p>\n<p>指定proc<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">validates <span class=\"symbol\">:phone_number</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span>, <span class=\"symbol\">:if</span> =&gt; Proc.new &#123;name.<span class=\"literal\">nil</span>?&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">with_options <span class=\"symbol\">if:</span> <span class=\"symbol\">:test?</span> <span class=\"keyword\">do</span></div><div class=\"line\">  validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span></div><div class=\"line\">  validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test?</span></span></div><div class=\"line\">  (<span class=\"number\">1</span>+<span class=\"number\">1</span> == <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>联合条件<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">with_options <span class=\"symbol\">if:</span> <span class=\"symbol\">:test?</span>, <span class=\"symbol\">unless:</span> <span class=\"symbol\">:test2?</span> <span class=\"keyword\">do</span></div><div class=\"line\">  validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span></div><div class=\"line\">  validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">uniqueness:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test?</span></span></div><div class=\"line\">  (<span class=\"number\">1</span>+<span class=\"number\">1</span> == <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test2?</span></span></div><div class=\"line\">    (<span class=\"number\">1</span>+<span class=\"number\">1</span> == <span class=\"number\">2</span>)</div><div class=\"line\">  <span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p><h3>自定义验证方法</h3></p>\n<ul>\n<li>validates_with</li>\n<li>validates_each<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyValidator</span> &lt; ActiveModel::Validator</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(record)</span></span></div><div class=\"line\">    <span class=\"keyword\">if</span> record.name.<span class=\"literal\">nil</span>?</div><div class=\"line\">      record.errors[<span class=\"symbol\">:name</span>] &lt;&lt; <span class=\"string\">'用户名不能为空'</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">if</span> record.phone_number.<span class=\"literal\">nil</span>?</div><div class=\"line\">      record.errors[<span class=\"symbol\">:phone_number</span>] &lt;&lt; <span class=\"string\">'手机号码不能为空'</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> &lt; ApplicationRecord</span></div><div class=\"line\"></div><div class=\"line\">  validates_with MyValidator</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> &lt; ApplicationRecord</span></div><div class=\"line\"></div><div class=\"line\">  validate <span class=\"symbol\">:my_validator</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_validator</span></span></div><div class=\"line\">    <span class=\"keyword\">if</span> name.<span class=\"literal\">nil</span>?</div><div class=\"line\">      errors[<span class=\"symbol\">:name</span>] &lt;&lt; <span class=\"string\">'用户名不能为空'</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p><h3>验证错误</h3></p>\n<ul>\n<li>errors</li>\n<li>errors[:attribute]</li>\n<li>errors.add</li>\n<li>errors.size</li>\n</ul>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"ActiveRecord(三)","date":"2016-04-05T06:31:10.000Z","_content":"查询\n<!-- more -->\n\n<h2>从数据库中获取数据</h2>\n+ find\n+ first\n+ take\n+ last\n+ find_each\n```ruby\nUser.find_each(batch_size: 3) do |user|\n  puts user.id\nend\n```\n+ find_in_batches\n```ruby\nUser.find_in_batches(batch_size: 3) do |users|\n  puts users.count\nend\n```\n\n<h2>条件查询</h2>\n<h3>>where</h3>\n```ruby\nUser.where(\"name = 'mazi'\")\n\nUser.where(\"name = 'mazi' AND id = 39\")\n\nstr = 'maizi'\nUser.where(\"name = ?\", str)\n\nUser.where(\"id > 52\")\n\nnum = 55\nUser.where(\"id < ?\", num)\n\nUser.where(\"id < ? AND name = ?\", num, str)\n\nUser.where(:name => 'maizi', :id => 55)\n\nUser.where.not(:name => 'maizi', :id => 55)\n```\n\n<h2>排序</h2>\n升序\n```ruby\nUser.where.not(:name => 'maizi', :id => 55).order(:created_at => :ASC)\n```\n降序\n```ruby\nUser.where.not(:name => 'maizi', :id => 55).order(:created_at => :DESC)\n```\n<h2>查询指定字段</h2>\n```ruby\nUser.where.not(:name => 'maizi', :id => 55).order(:created_at => :DESC).select(:name)\n```\n<h2>分页查询</h2>\n+ limit\n+ offset\n\n```ruby\nUser.where.not(:name => 'maizi').order(:created_at => :DESC).select(:name, :created_at).limit(1).offset(1)\n```\n\n```ruby\n\ntime = 0\nUser.where.not(:name => 'maizi').order(:created_at => :DESC).select(:name, :created_at).limit(10).offset(time)\n\ntime = 1\nUser.where.not(:name => 'maizi').order(:created_at => :DESC).select(:name, :created_at).limit(10).offset(time)\n\ntime = 2\nUser.where.not(:name => 'maizi').order(:created_at => :DESC).select(:name, :created_at).limit(10).offset(time)\n```\n<h2>分组查询</h2>\n```ruby\ni = 0\nUser.find_each do |user|\n  if i%2 == 0\n    user.gender = '女'\n  else\n    user.gender = '男'\n  end\n  user.money = i+20\n  user.save\n  i += 1\nend\n```\n\n\n```ruby\nresult = User.select(\"gender\", \"sum(money) as total_money\").group(\"gender\")\n\nresult.first\n\nresult.first.total_money\n```\n\n```ruby\nresult = User.select(\"gender\", \"sum(money) as total_money\").group(\"gender\")\n\nresult.first\n\nresult.first.total_money\n```\n```ruby\nresult = User.select(\"gender\", \"sum(money) as total_money\").group(\"gender\").having(\"sum(money) > ?\", 120)\n```\n\n<h2>条件覆盖</h2>\n+ unscope\n+ only\n+ reorder\n+ reverse_order\n+ rewhere\n```ruby\nUser.select(\"id\", \"created_at\").limit(5).unscope(:limit)\n\nUser.select(\"id\").limit(5).offset(2).only(:limit, :offset)\n\nUser.select(\"id\").order(:id => :DESC)\n\nUser.select(\"id\").order(:id => :DESC).reorder(:id)\n\n\nUser.select(\"id\").order(:id => :DESC).reorder(:id)\n\nUser.select(\"id\").order(:id => :DESC).reverse_order\n\n```\n<h2>只读对象</h2>\n```ruby\nUser.readonly.first\n```\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/ActiveRecord(三).md","raw":"---\ntitle: ActiveRecord(三)\ndate: 2016-04-05 14:31:10\ncategories: ruby\ntags: [ruby,rails]\n---\n查询\n<!-- more -->\n\n<h2>从数据库中获取数据</h2>\n+ find\n+ first\n+ take\n+ last\n+ find_each\n```ruby\nUser.find_each(batch_size: 3) do |user|\n  puts user.id\nend\n```\n+ find_in_batches\n```ruby\nUser.find_in_batches(batch_size: 3) do |users|\n  puts users.count\nend\n```\n\n<h2>条件查询</h2>\n<h3>>where</h3>\n```ruby\nUser.where(\"name = 'mazi'\")\n\nUser.where(\"name = 'mazi' AND id = 39\")\n\nstr = 'maizi'\nUser.where(\"name = ?\", str)\n\nUser.where(\"id > 52\")\n\nnum = 55\nUser.where(\"id < ?\", num)\n\nUser.where(\"id < ? AND name = ?\", num, str)\n\nUser.where(:name => 'maizi', :id => 55)\n\nUser.where.not(:name => 'maizi', :id => 55)\n```\n\n<h2>排序</h2>\n升序\n```ruby\nUser.where.not(:name => 'maizi', :id => 55).order(:created_at => :ASC)\n```\n降序\n```ruby\nUser.where.not(:name => 'maizi', :id => 55).order(:created_at => :DESC)\n```\n<h2>查询指定字段</h2>\n```ruby\nUser.where.not(:name => 'maizi', :id => 55).order(:created_at => :DESC).select(:name)\n```\n<h2>分页查询</h2>\n+ limit\n+ offset\n\n```ruby\nUser.where.not(:name => 'maizi').order(:created_at => :DESC).select(:name, :created_at).limit(1).offset(1)\n```\n\n```ruby\n\ntime = 0\nUser.where.not(:name => 'maizi').order(:created_at => :DESC).select(:name, :created_at).limit(10).offset(time)\n\ntime = 1\nUser.where.not(:name => 'maizi').order(:created_at => :DESC).select(:name, :created_at).limit(10).offset(time)\n\ntime = 2\nUser.where.not(:name => 'maizi').order(:created_at => :DESC).select(:name, :created_at).limit(10).offset(time)\n```\n<h2>分组查询</h2>\n```ruby\ni = 0\nUser.find_each do |user|\n  if i%2 == 0\n    user.gender = '女'\n  else\n    user.gender = '男'\n  end\n  user.money = i+20\n  user.save\n  i += 1\nend\n```\n\n\n```ruby\nresult = User.select(\"gender\", \"sum(money) as total_money\").group(\"gender\")\n\nresult.first\n\nresult.first.total_money\n```\n\n```ruby\nresult = User.select(\"gender\", \"sum(money) as total_money\").group(\"gender\")\n\nresult.first\n\nresult.first.total_money\n```\n```ruby\nresult = User.select(\"gender\", \"sum(money) as total_money\").group(\"gender\").having(\"sum(money) > ?\", 120)\n```\n\n<h2>条件覆盖</h2>\n+ unscope\n+ only\n+ reorder\n+ reverse_order\n+ rewhere\n```ruby\nUser.select(\"id\", \"created_at\").limit(5).unscope(:limit)\n\nUser.select(\"id\").limit(5).offset(2).only(:limit, :offset)\n\nUser.select(\"id\").order(:id => :DESC)\n\nUser.select(\"id\").order(:id => :DESC).reorder(:id)\n\n\nUser.select(\"id\").order(:id => :DESC).reorder(:id)\n\nUser.select(\"id\").order(:id => :DESC).reverse_order\n\n```\n<h2>只读对象</h2>\n```ruby\nUser.readonly.first\n```\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/ActiveRecord(三)","published":1,"updated":"2017-01-04T09:43:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99y006321xwpc9gr86q","content":"<p>查询<br><a id=\"more\"></a></p>\n<p></p><h2>从数据库中获取数据</h2><p></p>\n<ul>\n<li>find</li>\n<li>first</li>\n<li>take</li>\n<li>last</li>\n<li><p>find_each</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.find_each(<span class=\"symbol\">batch_size:</span> <span class=\"number\">3</span>) <span class=\"keyword\">do</span> <span class=\"params\">|user|</span></div><div class=\"line\">  puts user.id</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>find_in_batches</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.find_in_batches(<span class=\"symbol\">batch_size:</span> <span class=\"number\">3</span>) <span class=\"keyword\">do</span> <span class=\"params\">|users|</span></div><div class=\"line\">  puts users.count</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p></p><h2>条件查询</h2><p></p>\n<p></p><h3>&gt;where</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.where(<span class=\"string\">\"name = 'mazi'\"</span>)</div><div class=\"line\"></div><div class=\"line\">User.where(<span class=\"string\">\"name = 'mazi' AND id = 39\"</span>)</div><div class=\"line\"></div><div class=\"line\">str = <span class=\"string\">'maizi'</span></div><div class=\"line\">User.where(<span class=\"string\">\"name = ?\"</span>, str)</div><div class=\"line\"></div><div class=\"line\">User.where(<span class=\"string\">\"id &gt; 52\"</span>)</div><div class=\"line\"></div><div class=\"line\">num = <span class=\"number\">55</span></div><div class=\"line\">User.where(<span class=\"string\">\"id &lt; ?\"</span>, num)</div><div class=\"line\"></div><div class=\"line\">User.where(<span class=\"string\">\"id &lt; ? AND name = ?\"</span>, num, str)</div><div class=\"line\"></div><div class=\"line\">User.where(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>, <span class=\"symbol\">:id</span> =&gt; <span class=\"number\">55</span>)</div><div class=\"line\"></div><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>, <span class=\"symbol\">:id</span> =&gt; <span class=\"number\">55</span>)</div></pre></td></tr></table></figure><p></p>\n<p></p><h2>排序</h2><br>升序<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>, <span class=\"symbol\">:id</span> =&gt; <span class=\"number\">55</span>).order(<span class=\"symbol\">:created_at</span> =&gt; <span class=\"symbol\">:ASC</span>)</div></pre></td></tr></table></figure><p></p>\n<p>降序<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>, <span class=\"symbol\">:id</span> =&gt; <span class=\"number\">55</span>).order(<span class=\"symbol\">:created_at</span> =&gt; <span class=\"symbol\">:DESC</span>)</div></pre></td></tr></table></figure></p>\n<p></p><h2>查询指定字段</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>, <span class=\"symbol\">:id</span> =&gt; <span class=\"number\">55</span>).order(<span class=\"symbol\">:created_at</span> =&gt; <span class=\"symbol\">:DESC</span>).select(<span class=\"symbol\">:name</span>)</div></pre></td></tr></table></figure><p></p>\n<p></p><h2>分页查询</h2><p></p>\n<ul>\n<li>limit</li>\n<li>offset</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>).order(<span class=\"symbol\">:created_at</span> =&gt; <span class=\"symbol\">:DESC</span>).select(<span class=\"symbol\">:name</span>, <span class=\"symbol\">:created_at</span>).limit(<span class=\"number\">1</span>).offset(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">time = <span class=\"number\">0</span></div><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>).order(<span class=\"symbol\">:created_at</span> =&gt; <span class=\"symbol\">:DESC</span>).select(<span class=\"symbol\">:name</span>, <span class=\"symbol\">:created_at</span>).limit(<span class=\"number\">10</span>).offset(time)</div><div class=\"line\"></div><div class=\"line\">time = <span class=\"number\">1</span></div><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>).order(<span class=\"symbol\">:created_at</span> =&gt; <span class=\"symbol\">:DESC</span>).select(<span class=\"symbol\">:name</span>, <span class=\"symbol\">:created_at</span>).limit(<span class=\"number\">10</span>).offset(time)</div><div class=\"line\"></div><div class=\"line\">time = <span class=\"number\">2</span></div><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>).order(<span class=\"symbol\">:created_at</span> =&gt; <span class=\"symbol\">:DESC</span>).select(<span class=\"symbol\">:name</span>, <span class=\"symbol\">:created_at</span>).limit(<span class=\"number\">10</span>).offset(time)</div></pre></td></tr></table></figure>\n<p></p><h2>分组查询</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">i = <span class=\"number\">0</span></div><div class=\"line\">User.find_each <span class=\"keyword\">do</span> <span class=\"params\">|user|</span></div><div class=\"line\">  <span class=\"keyword\">if</span> i%<span class=\"number\">2</span> == <span class=\"number\">0</span></div><div class=\"line\">    user.gender = <span class=\"string\">'女'</span></div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">    user.gender = <span class=\"string\">'男'</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  user.money = i+<span class=\"number\">20</span></div><div class=\"line\">  user.save</div><div class=\"line\">  i += <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><p></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">result = User.select(<span class=\"string\">\"gender\"</span>, <span class=\"string\">\"sum(money) as total_money\"</span>).group(<span class=\"string\">\"gender\"</span>)</div><div class=\"line\"></div><div class=\"line\">result.first</div><div class=\"line\"></div><div class=\"line\">result.first.total_money</div></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">result = User.select(<span class=\"string\">\"gender\"</span>, <span class=\"string\">\"sum(money) as total_money\"</span>).group(<span class=\"string\">\"gender\"</span>)</div><div class=\"line\"></div><div class=\"line\">result.first</div><div class=\"line\"></div><div class=\"line\">result.first.total_money</div></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">result = User.select(<span class=\"string\">\"gender\"</span>, <span class=\"string\">\"sum(money) as total_money\"</span>).group(<span class=\"string\">\"gender\"</span>).having(<span class=\"string\">\"sum(money) &gt; ?\"</span>, <span class=\"number\">120</span>)</div></pre></td></tr></table></figure>\n<p></p><h2>条件覆盖</h2><p></p>\n<ul>\n<li>unscope</li>\n<li>only</li>\n<li>reorder</li>\n<li>reverse_order</li>\n<li>rewhere<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.select(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"created_at\"</span>).limit(<span class=\"number\">5</span>).unscope(<span class=\"symbol\">:limit</span>)</div><div class=\"line\"></div><div class=\"line\">User.select(<span class=\"string\">\"id\"</span>).limit(<span class=\"number\">5</span>).offset(<span class=\"number\">2</span>).only(<span class=\"symbol\">:limit</span>, <span class=\"symbol\">:offset</span>)</div><div class=\"line\"></div><div class=\"line\">User.select(<span class=\"string\">\"id\"</span>).order(<span class=\"symbol\">:id</span> =&gt; <span class=\"symbol\">:DESC</span>)</div><div class=\"line\"></div><div class=\"line\">User.select(<span class=\"string\">\"id\"</span>).order(<span class=\"symbol\">:id</span> =&gt; <span class=\"symbol\">:DESC</span>).reorder(<span class=\"symbol\">:id</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">User.select(<span class=\"string\">\"id\"</span>).order(<span class=\"symbol\">:id</span> =&gt; <span class=\"symbol\">:DESC</span>).reorder(<span class=\"symbol\">:id</span>)</div><div class=\"line\"></div><div class=\"line\">User.select(<span class=\"string\">\"id\"</span>).order(<span class=\"symbol\">:id</span> =&gt; <span class=\"symbol\">:DESC</span>).reverse_order</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p></p><h2>只读对象</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.readonly.first</div></pre></td></tr></table></figure><p></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>查询<br>","more":"</p>\n<p><h2>从数据库中获取数据</h2></p>\n<ul>\n<li>find</li>\n<li>first</li>\n<li>take</li>\n<li>last</li>\n<li><p>find_each</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.find_each(<span class=\"symbol\">batch_size:</span> <span class=\"number\">3</span>) <span class=\"keyword\">do</span> <span class=\"params\">|user|</span></div><div class=\"line\">  puts user.id</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>find_in_batches</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.find_in_batches(<span class=\"symbol\">batch_size:</span> <span class=\"number\">3</span>) <span class=\"keyword\">do</span> <span class=\"params\">|users|</span></div><div class=\"line\">  puts users.count</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><h2>条件查询</h2></p>\n<p><h3>&gt;where</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.where(<span class=\"string\">\"name = 'mazi'\"</span>)</div><div class=\"line\"></div><div class=\"line\">User.where(<span class=\"string\">\"name = 'mazi' AND id = 39\"</span>)</div><div class=\"line\"></div><div class=\"line\">str = <span class=\"string\">'maizi'</span></div><div class=\"line\">User.where(<span class=\"string\">\"name = ?\"</span>, str)</div><div class=\"line\"></div><div class=\"line\">User.where(<span class=\"string\">\"id &gt; 52\"</span>)</div><div class=\"line\"></div><div class=\"line\">num = <span class=\"number\">55</span></div><div class=\"line\">User.where(<span class=\"string\">\"id &lt; ?\"</span>, num)</div><div class=\"line\"></div><div class=\"line\">User.where(<span class=\"string\">\"id &lt; ? AND name = ?\"</span>, num, str)</div><div class=\"line\"></div><div class=\"line\">User.where(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>, <span class=\"symbol\">:id</span> =&gt; <span class=\"number\">55</span>)</div><div class=\"line\"></div><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>, <span class=\"symbol\">:id</span> =&gt; <span class=\"number\">55</span>)</div></pre></td></tr></table></figure></p>\n<p><h2>排序</h2><br>升序<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>, <span class=\"symbol\">:id</span> =&gt; <span class=\"number\">55</span>).order(<span class=\"symbol\">:created_at</span> =&gt; <span class=\"symbol\">:ASC</span>)</div></pre></td></tr></table></figure></p>\n<p>降序<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>, <span class=\"symbol\">:id</span> =&gt; <span class=\"number\">55</span>).order(<span class=\"symbol\">:created_at</span> =&gt; <span class=\"symbol\">:DESC</span>)</div></pre></td></tr></table></figure></p>\n<p><h2>查询指定字段</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>, <span class=\"symbol\">:id</span> =&gt; <span class=\"number\">55</span>).order(<span class=\"symbol\">:created_at</span> =&gt; <span class=\"symbol\">:DESC</span>).select(<span class=\"symbol\">:name</span>)</div></pre></td></tr></table></figure></p>\n<p><h2>分页查询</h2></p>\n<ul>\n<li>limit</li>\n<li>offset</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>).order(<span class=\"symbol\">:created_at</span> =&gt; <span class=\"symbol\">:DESC</span>).select(<span class=\"symbol\">:name</span>, <span class=\"symbol\">:created_at</span>).limit(<span class=\"number\">1</span>).offset(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">time = <span class=\"number\">0</span></div><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>).order(<span class=\"symbol\">:created_at</span> =&gt; <span class=\"symbol\">:DESC</span>).select(<span class=\"symbol\">:name</span>, <span class=\"symbol\">:created_at</span>).limit(<span class=\"number\">10</span>).offset(time)</div><div class=\"line\"></div><div class=\"line\">time = <span class=\"number\">1</span></div><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>).order(<span class=\"symbol\">:created_at</span> =&gt; <span class=\"symbol\">:DESC</span>).select(<span class=\"symbol\">:name</span>, <span class=\"symbol\">:created_at</span>).limit(<span class=\"number\">10</span>).offset(time)</div><div class=\"line\"></div><div class=\"line\">time = <span class=\"number\">2</span></div><div class=\"line\">User.where.<span class=\"keyword\">not</span>(<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">'maizi'</span>).order(<span class=\"symbol\">:created_at</span> =&gt; <span class=\"symbol\">:DESC</span>).select(<span class=\"symbol\">:name</span>, <span class=\"symbol\">:created_at</span>).limit(<span class=\"number\">10</span>).offset(time)</div></pre></td></tr></table></figure>\n<p><h2>分组查询</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">i = <span class=\"number\">0</span></div><div class=\"line\">User.find_each <span class=\"keyword\">do</span> <span class=\"params\">|user|</span></div><div class=\"line\">  <span class=\"keyword\">if</span> i%<span class=\"number\">2</span> == <span class=\"number\">0</span></div><div class=\"line\">    user.gender = <span class=\"string\">'女'</span></div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">    user.gender = <span class=\"string\">'男'</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  user.money = i+<span class=\"number\">20</span></div><div class=\"line\">  user.save</div><div class=\"line\">  i += <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">result = User.select(<span class=\"string\">\"gender\"</span>, <span class=\"string\">\"sum(money) as total_money\"</span>).group(<span class=\"string\">\"gender\"</span>)</div><div class=\"line\"></div><div class=\"line\">result.first</div><div class=\"line\"></div><div class=\"line\">result.first.total_money</div></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">result = User.select(<span class=\"string\">\"gender\"</span>, <span class=\"string\">\"sum(money) as total_money\"</span>).group(<span class=\"string\">\"gender\"</span>)</div><div class=\"line\"></div><div class=\"line\">result.first</div><div class=\"line\"></div><div class=\"line\">result.first.total_money</div></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">result = User.select(<span class=\"string\">\"gender\"</span>, <span class=\"string\">\"sum(money) as total_money\"</span>).group(<span class=\"string\">\"gender\"</span>).having(<span class=\"string\">\"sum(money) &gt; ?\"</span>, <span class=\"number\">120</span>)</div></pre></td></tr></table></figure>\n<p><h2>条件覆盖</h2></p>\n<ul>\n<li>unscope</li>\n<li>only</li>\n<li>reorder</li>\n<li>reverse_order</li>\n<li>rewhere<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.select(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"created_at\"</span>).limit(<span class=\"number\">5</span>).unscope(<span class=\"symbol\">:limit</span>)</div><div class=\"line\"></div><div class=\"line\">User.select(<span class=\"string\">\"id\"</span>).limit(<span class=\"number\">5</span>).offset(<span class=\"number\">2</span>).only(<span class=\"symbol\">:limit</span>, <span class=\"symbol\">:offset</span>)</div><div class=\"line\"></div><div class=\"line\">User.select(<span class=\"string\">\"id\"</span>).order(<span class=\"symbol\">:id</span> =&gt; <span class=\"symbol\">:DESC</span>)</div><div class=\"line\"></div><div class=\"line\">User.select(<span class=\"string\">\"id\"</span>).order(<span class=\"symbol\">:id</span> =&gt; <span class=\"symbol\">:DESC</span>).reorder(<span class=\"symbol\">:id</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">User.select(<span class=\"string\">\"id\"</span>).order(<span class=\"symbol\">:id</span> =&gt; <span class=\"symbol\">:DESC</span>).reorder(<span class=\"symbol\">:id</span>)</div><div class=\"line\"></div><div class=\"line\">User.select(<span class=\"string\">\"id\"</span>).order(<span class=\"symbol\">:id</span> =&gt; <span class=\"symbol\">:DESC</span>).reverse_order</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><h2>只读对象</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.readonly.first</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"ActiveRecord(二)","date":"2016-04-04T06:38:26.000Z","_content":"ActiveRecord 回调\n<!-- more -->\n\n<h2>回调</h2>\n\n<h3>创建对象顺序</h3>\n\n```ruby\nclass User < ApplicationRecord\n  before_validation :beforeValidation\n  after_validation :afterValidation\n  before_save :beforeSave\n  before_create :beforeCreate\n  after_create :afterCreate\n  after_save :afterSave\n\n\n\n  def beforeValidation\n\n  end\n  def afterValidation\n\n  end\n  def beforeSave\n\n  end\n  def beforeCreate\n\n  end\n  def afterCreate\n\n  end\n  def afterSave\n    \n  end\nend\n```\n\n<h3>更新对象顺序</h3>\n\n```ruby\nclass User < ApplicationRecord\n  before_validation :beforeValidation\n  after_validation :afterValidation\n  before_save :beforeSave\n  before_update :beforeUpdate\n  after_update :afterUpdate\n  after_save :afterSave\n\n\n\n  def beforeValidation\n\n  end\n  def afterValidation\n\n  end\n  def beforeSave\n\n  end\n  def beforeUpdate\n\n  end\n  def afterUpdate\n\n  end\n  def afterSave\n    \n  end\nend\n```\n<h3>销毁对象顺序</h3>\n\n```ruby\nclass User < ApplicationRecord\n  before_destroy :beforeDestroy\n  after_destroy :afterDestroy\n\n\n\n  def beforeDestroy\n\n  end\n  def afterDestroy\n\n  end\n  \nend\n```\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n\n","source":"_posts/ruby/ActiveRecord(二).md","raw":"---\ntitle: ActiveRecord(二)\ndate: 2016-04-04 14:38:26\ncategories: ruby\ntags: [ruby,rails]\n---\nActiveRecord 回调\n<!-- more -->\n\n<h2>回调</h2>\n\n<h3>创建对象顺序</h3>\n\n```ruby\nclass User < ApplicationRecord\n  before_validation :beforeValidation\n  after_validation :afterValidation\n  before_save :beforeSave\n  before_create :beforeCreate\n  after_create :afterCreate\n  after_save :afterSave\n\n\n\n  def beforeValidation\n\n  end\n  def afterValidation\n\n  end\n  def beforeSave\n\n  end\n  def beforeCreate\n\n  end\n  def afterCreate\n\n  end\n  def afterSave\n    \n  end\nend\n```\n\n<h3>更新对象顺序</h3>\n\n```ruby\nclass User < ApplicationRecord\n  before_validation :beforeValidation\n  after_validation :afterValidation\n  before_save :beforeSave\n  before_update :beforeUpdate\n  after_update :afterUpdate\n  after_save :afterSave\n\n\n\n  def beforeValidation\n\n  end\n  def afterValidation\n\n  end\n  def beforeSave\n\n  end\n  def beforeUpdate\n\n  end\n  def afterUpdate\n\n  end\n  def afterSave\n    \n  end\nend\n```\n<h3>销毁对象顺序</h3>\n\n```ruby\nclass User < ApplicationRecord\n  before_destroy :beforeDestroy\n  after_destroy :afterDestroy\n\n\n\n  def beforeDestroy\n\n  end\n  def afterDestroy\n\n  end\n  \nend\n```\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n\n","slug":"ruby/ActiveRecord(二)","published":1,"updated":"2017-01-04T09:43:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99z006721xwo729euoe","content":"<p>ActiveRecord 回调<br><a id=\"more\"></a></p>\n<h2>回调</h2>\n\n<h3>创建对象顺序</h3>\n\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> &lt; ApplicationRecord</span></div><div class=\"line\">  before_validation <span class=\"symbol\">:beforeValidation</span></div><div class=\"line\">  after_validation <span class=\"symbol\">:afterValidation</span></div><div class=\"line\">  before_save <span class=\"symbol\">:beforeSave</span></div><div class=\"line\">  before_create <span class=\"symbol\">:beforeCreate</span></div><div class=\"line\">  after_create <span class=\"symbol\">:afterCreate</span></div><div class=\"line\">  after_save <span class=\"symbol\">:afterSave</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">beforeValidation</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">afterValidation</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">beforeSave</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">beforeCreate</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">afterCreate</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">afterSave</span></span></div><div class=\"line\">    </div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<h3>更新对象顺序</h3>\n\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> &lt; ApplicationRecord</span></div><div class=\"line\">  before_validation <span class=\"symbol\">:beforeValidation</span></div><div class=\"line\">  after_validation <span class=\"symbol\">:afterValidation</span></div><div class=\"line\">  before_save <span class=\"symbol\">:beforeSave</span></div><div class=\"line\">  before_update <span class=\"symbol\">:beforeUpdate</span></div><div class=\"line\">  after_update <span class=\"symbol\">:afterUpdate</span></div><div class=\"line\">  after_save <span class=\"symbol\">:afterSave</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">beforeValidation</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">afterValidation</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">beforeSave</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">beforeUpdate</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">afterUpdate</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">afterSave</span></span></div><div class=\"line\">    </div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<h3>销毁对象顺序</h3>\n\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> &lt; ApplicationRecord</span></div><div class=\"line\">  before_destroy <span class=\"symbol\">:beforeDestroy</span></div><div class=\"line\">  after_destroy <span class=\"symbol\">:afterDestroy</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">beforeDestroy</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">afterDestroy</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>ActiveRecord 回调<br>","more":"</p>\n<h2>回调</h2>\n\n<h3>创建对象顺序</h3>\n\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> &lt; ApplicationRecord</span></div><div class=\"line\">  before_validation <span class=\"symbol\">:beforeValidation</span></div><div class=\"line\">  after_validation <span class=\"symbol\">:afterValidation</span></div><div class=\"line\">  before_save <span class=\"symbol\">:beforeSave</span></div><div class=\"line\">  before_create <span class=\"symbol\">:beforeCreate</span></div><div class=\"line\">  after_create <span class=\"symbol\">:afterCreate</span></div><div class=\"line\">  after_save <span class=\"symbol\">:afterSave</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">beforeValidation</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">afterValidation</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">beforeSave</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">beforeCreate</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">afterCreate</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">afterSave</span></span></div><div class=\"line\">    </div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<h3>更新对象顺序</h3>\n\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> &lt; ApplicationRecord</span></div><div class=\"line\">  before_validation <span class=\"symbol\">:beforeValidation</span></div><div class=\"line\">  after_validation <span class=\"symbol\">:afterValidation</span></div><div class=\"line\">  before_save <span class=\"symbol\">:beforeSave</span></div><div class=\"line\">  before_update <span class=\"symbol\">:beforeUpdate</span></div><div class=\"line\">  after_update <span class=\"symbol\">:afterUpdate</span></div><div class=\"line\">  after_save <span class=\"symbol\">:afterSave</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">beforeValidation</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">afterValidation</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">beforeSave</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">beforeUpdate</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">afterUpdate</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">afterSave</span></span></div><div class=\"line\">    </div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<h3>销毁对象顺序</h3>\n\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> &lt; ApplicationRecord</span></div><div class=\"line\">  before_destroy <span class=\"symbol\">:beforeDestroy</span></div><div class=\"line\">  after_destroy <span class=\"symbol\">:afterDestroy</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">beforeDestroy</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">afterDestroy</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"ActiveRecord(四)","date":"2016-04-06T02:48:37.000Z","_content":"关联\n<!-- more -->\n\n<h2>关联</h2>\n+ belongs_to\n+ has_one\n+ has_many\n+ has_and_belongs_to_many/habtm\n\n<h2>belongs_to</h2>\n```ruby\n\n\n\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/ActiveRecord(四).md","raw":"---\ntitle: ActiveRecord(四)\ndate: 2016-04-06 10:48:37\ncategories: ruby\ntags: [ruby,rails]\n---\n关联\n<!-- more -->\n\n<h2>关联</h2>\n+ belongs_to\n+ has_one\n+ has_many\n+ has_and_belongs_to_many/habtm\n\n<h2>belongs_to</h2>\n```ruby\n\n\n\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/ActiveRecord(四)","published":1,"updated":"2017-01-04T09:43:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms99z006921xwmbx6s2d7","content":"<p>关联<br><a id=\"more\"></a></p>\n<p></p><h2>关联</h2><p></p>\n<ul>\n<li>belongs_to</li>\n<li>has_one</li>\n<li>has_many</li>\n<li>has_and_belongs_to_many/habtm</li>\n</ul>\n<p></p><h2>belongs_to</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure><p></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>关联<br>","more":"</p>\n<p><h2>关联</h2></p>\n<ul>\n<li>belongs_to</li>\n<li>has_one</li>\n<li>has_many</li>\n<li>has_and_belongs_to_many/habtm</li>\n</ul>\n<p><h2>belongs_to</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"I18n","date":"2016-11-23T06:40:14.000Z","_content":"I18n\n<!-- more -->\n\n\n<h3>设置默认语言</h3>\nconfig/application.rb\n```ruby\nconfig.i18n.default_locale = 'zh-CN'\n```\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/I18n.md","raw":"---\ntitle: I18n\ndate: 2016-11-23 14:40:14\ncategories: ruby\n---\nI18n\n<!-- more -->\n\n\n<h3>设置默认语言</h3>\nconfig/application.rb\n```ruby\nconfig.i18n.default_locale = 'zh-CN'\n```\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/I18n","published":1,"updated":"2016-12-06T05:44:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9a0006b21xw0jrgn3u1","content":"<p>I18n<br><a id=\"more\"></a></p>\n<p></p><h3>设置默认语言</h3><br>config/application.rb<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">config.i18n.default_locale = <span class=\"string\">'zh-CN'</span></div></pre></td></tr></table></figure><p></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>I18n<br>","more":"</p>\n<p><h3>设置默认语言</h3><br>config/application.rb<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">config.i18n.default_locale = <span class=\"string\">'zh-CN'</span></div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"gem","date":"2016-11-17T14:14:05.000Z","_content":"gem常用命令\n<!-- more -->\n<h3>gem源</h3>\n查看当前gem源\n```markdown\ngem sources --l\n```\n移除gem源\n```markdown\ngem sources --remove url\n```\n添加gem源\n```markdown\ngem sources -a url\n```\n可以用 Bundler 的 Gem 源代码镜像命令。这样不用改Gemfile 的 source。\n```markdown\nbundle config mirror.https://rubygems.org https://gems.ruby-china.org\n```\n<h3>gem常用命令</h3>\n安装gem包\n```markdown\ngem install name\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/gem.md","raw":"---\ntitle: gem\ndate: 2016-11-17 22:14:05\ncategories: ruby\n---\ngem常用命令\n<!-- more -->\n<h3>gem源</h3>\n查看当前gem源\n```markdown\ngem sources --l\n```\n移除gem源\n```markdown\ngem sources --remove url\n```\n添加gem源\n```markdown\ngem sources -a url\n```\n可以用 Bundler 的 Gem 源代码镜像命令。这样不用改Gemfile 的 source。\n```markdown\nbundle config mirror.https://rubygems.org https://gems.ruby-china.org\n```\n<h3>gem常用命令</h3>\n安装gem包\n```markdown\ngem install name\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/gem","published":1,"updated":"2016-11-18T06:43:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9a1006f21xwyzzbmlbo","content":"<p>gem常用命令<br><a id=\"more\"></a></p>\n<p></p><h3>gem源</h3><br>查看当前gem源<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem sources --l</div></pre></td></tr></table></figure><p></p>\n<p>移除gem源<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem sources --remove url</div></pre></td></tr></table></figure></p>\n<p>添加gem源<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem sources -a url</div></pre></td></tr></table></figure></p>\n<p>可以用 Bundler 的 Gem 源代码镜像命令。这样不用改Gemfile 的 source。<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bundle config mirror.https://rubygems.org https://gems.ruby-china.org</div></pre></td></tr></table></figure></p>\n<p></p><h3>gem常用命令</h3><br>安装gem包<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install name</div></pre></td></tr></table></figure><p></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>gem常用命令<br>","more":"</p>\n<p><h3>gem源</h3><br>查看当前gem源<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem sources --l</div></pre></td></tr></table></figure></p>\n<p>移除gem源<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem sources --remove url</div></pre></td></tr></table></figure></p>\n<p>添加gem源<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem sources -a url</div></pre></td></tr></table></figure></p>\n<p>可以用 Bundler 的 Gem 源代码镜像命令。这样不用改Gemfile 的 source。<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bundle config mirror.https://rubygems.org https://gems.ruby-china.org</div></pre></td></tr></table></figure></p>\n<p><h3>gem常用命令</h3><br>安装gem包<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install name</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"grape","date":"2016-11-22T06:24:15.000Z","_content":"grape\n<!-- more -->\n<h2>Gemfile中加</h2>\n```ruby\ngem 'grape'\n```\n\n<h2>资源路径</h2>\n/resources/:resource\n/resources/:resource/:action\n\n例\n/users/1\n/users/1/logout\n路径嵌套\n/users/1/posts/2/like\n\n\n<h2>请求参数</h2>\n+ header\n+ param( queryparam pathparam fieldparam) \n\n```ruby\nparams do\n   requires :year, type: Integer\n   optional :month, type: String, default: 'may'\nend\n```\n<h2>相应</h2>\n<h3>资源的表述方式</h3>\n+ json\n+ xml\n\n```ruby\n  format :json\n```\n<h3>标准时间戳</h3>\n\n<h3>响应码</h3>\n200 ：get请求完成\n201 ：post，put,delete请求完成\n202 ：post，delete，请求提交成功，稍后将异步的进行处理\n400 ：bad request请求无效，请求参数包含错误\n401 ：unauthorized请求无效，因为用户没有进行认证\n403 ：forbidden请求无效，因为用户被认定没有访问特定资源的权限\n429 ：too many requests,请求频率超配，稍后再试\n500 ：internal server error,服务器出错了，检查网站的状态，或者报告的问题\n\n<h3>错误信息</h3>\n\n\n例：\n```ruby\nclass User::API < Grape::API\n  format :json\n\n  resources ':users' do\n    get 'test' do\n      data = {\n          :time => Time.new,\n          :ip => request.ip,\n      }\n      present data\n    end\n\n    resources ':user_id' do\n      get do\n        data = {\n            :users => params[:users],\n            :user_id => params[:user_id],\n            :time => Time.new,\n            :ip => request.ip,\n        }\n        present data\n      end\n\n      params do\n        requires :year, type: Integer\n        optional :month, type: String, default: 'may'\n\n      end\n      get 'logout' do\n        data = {\n            :year => params[:year],\n            :month => params[:month],\n            :type => 'get',\n            :time => Time.new,\n            :ip => request.ip,\n\n        }\n        present data\n      end\n      post 'logout' do\n        data = {\n            :day => params[:day],\n            :app_version => headers['App-Version'],\n            :token => headers['Token'],\n            :type => 'post',\n            :users => params[:users],\n            :user_id => params[:user_id],\n            :time => Time.new,\n            :ip => request.ip,\n        }\n        present data\n      end\n    end\n  end\n\n\n\nend\n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/grape.md","raw":"---\ntitle: grape\ndate: 2016-11-22 14:24:15\ncategories:\n---\ngrape\n<!-- more -->\n<h2>Gemfile中加</h2>\n```ruby\ngem 'grape'\n```\n\n<h2>资源路径</h2>\n/resources/:resource\n/resources/:resource/:action\n\n例\n/users/1\n/users/1/logout\n路径嵌套\n/users/1/posts/2/like\n\n\n<h2>请求参数</h2>\n+ header\n+ param( queryparam pathparam fieldparam) \n\n```ruby\nparams do\n   requires :year, type: Integer\n   optional :month, type: String, default: 'may'\nend\n```\n<h2>相应</h2>\n<h3>资源的表述方式</h3>\n+ json\n+ xml\n\n```ruby\n  format :json\n```\n<h3>标准时间戳</h3>\n\n<h3>响应码</h3>\n200 ：get请求完成\n201 ：post，put,delete请求完成\n202 ：post，delete，请求提交成功，稍后将异步的进行处理\n400 ：bad request请求无效，请求参数包含错误\n401 ：unauthorized请求无效，因为用户没有进行认证\n403 ：forbidden请求无效，因为用户被认定没有访问特定资源的权限\n429 ：too many requests,请求频率超配，稍后再试\n500 ：internal server error,服务器出错了，检查网站的状态，或者报告的问题\n\n<h3>错误信息</h3>\n\n\n例：\n```ruby\nclass User::API < Grape::API\n  format :json\n\n  resources ':users' do\n    get 'test' do\n      data = {\n          :time => Time.new,\n          :ip => request.ip,\n      }\n      present data\n    end\n\n    resources ':user_id' do\n      get do\n        data = {\n            :users => params[:users],\n            :user_id => params[:user_id],\n            :time => Time.new,\n            :ip => request.ip,\n        }\n        present data\n      end\n\n      params do\n        requires :year, type: Integer\n        optional :month, type: String, default: 'may'\n\n      end\n      get 'logout' do\n        data = {\n            :year => params[:year],\n            :month => params[:month],\n            :type => 'get',\n            :time => Time.new,\n            :ip => request.ip,\n\n        }\n        present data\n      end\n      post 'logout' do\n        data = {\n            :day => params[:day],\n            :app_version => headers['App-Version'],\n            :token => headers['Token'],\n            :type => 'post',\n            :users => params[:users],\n            :user_id => params[:user_id],\n            :time => Time.new,\n            :ip => request.ip,\n        }\n        present data\n      end\n    end\n  end\n\n\n\nend\n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/grape","published":1,"updated":"2016-11-22T09:57:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9a2006h21xwn2w25v6w","content":"<p>grape<br><a id=\"more\"></a></p>\n<p></p><h2>Gemfile中加</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem <span class=\"string\">'grape'</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h2>资源路径</h2><br>/resources/:resource<br>/resources/:resource/:action<p></p>\n<p>例<br>/users/1<br>/users/1/logout<br>路径嵌套<br>/users/1/posts/2/like</p>\n<p></p><h2>请求参数</h2><p></p>\n<ul>\n<li>header</li>\n<li>param( queryparam pathparam fieldparam) </li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">params <span class=\"keyword\">do</span></div><div class=\"line\">   requires <span class=\"symbol\">:year</span>, <span class=\"symbol\">type:</span> Integer</div><div class=\"line\">   optional <span class=\"symbol\">:month</span>, <span class=\"symbol\">type:</span> String, <span class=\"symbol\">default:</span> <span class=\"string\">'may'</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p></p><h2>相应</h2><p></p>\n<h3>资源的表述方式</h3><br>+ json<br>+ xml<br><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">format <span class=\"symbol\">:json</span></div></pre></td></tr></table></figure><br><br><h3>标准时间戳</h3>\n\n<h3>响应码</h3><br>200 ：get请求完成<br>201 ：post，put,delete请求完成<br>202 ：post，delete，请求提交成功，稍后将异步的进行处理<br>400 ：bad request请求无效，请求参数包含错误<br>401 ：unauthorized请求无效，因为用户没有进行认证<br>403 ：forbidden请求无效，因为用户被认定没有访问特定资源的权限<br>429 ：too many requests,请求频率超配，稍后再试<br>500 ：internal server error,服务器出错了，检查网站的状态，或者报告的问题<br><br><h3>错误信息</h3>\n\n\n<p>例：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User::API</span> &lt; Grape::API</span></div><div class=\"line\">  format <span class=\"symbol\">:json</span></div><div class=\"line\"></div><div class=\"line\">  resources <span class=\"string\">':users'</span> <span class=\"keyword\">do</span></div><div class=\"line\">    get <span class=\"string\">'test'</span> <span class=\"keyword\">do</span></div><div class=\"line\">      data = &#123;</div><div class=\"line\">          <span class=\"symbol\">:time</span> =&gt; Time.new,</div><div class=\"line\">          <span class=\"symbol\">:ip</span> =&gt; request.ip,</div><div class=\"line\">      &#125;</div><div class=\"line\">      present data</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    resources <span class=\"string\">':user_id'</span> <span class=\"keyword\">do</span></div><div class=\"line\">      get <span class=\"keyword\">do</span></div><div class=\"line\">        data = &#123;</div><div class=\"line\">            <span class=\"symbol\">:users</span> =&gt; params[<span class=\"symbol\">:users</span>],</div><div class=\"line\">            <span class=\"symbol\">:user_id</span> =&gt; params[<span class=\"symbol\">:user_id</span>],</div><div class=\"line\">            <span class=\"symbol\">:time</span> =&gt; Time.new,</div><div class=\"line\">            <span class=\"symbol\">:ip</span> =&gt; request.ip,</div><div class=\"line\">        &#125;</div><div class=\"line\">        present data</div><div class=\"line\">      <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">      params <span class=\"keyword\">do</span></div><div class=\"line\">        requires <span class=\"symbol\">:year</span>, <span class=\"symbol\">type:</span> Integer</div><div class=\"line\">        optional <span class=\"symbol\">:month</span>, <span class=\"symbol\">type:</span> String, <span class=\"symbol\">default:</span> <span class=\"string\">'may'</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">end</span></div><div class=\"line\">      get <span class=\"string\">'logout'</span> <span class=\"keyword\">do</span></div><div class=\"line\">        data = &#123;</div><div class=\"line\">            <span class=\"symbol\">:year</span> =&gt; params[<span class=\"symbol\">:year</span>],</div><div class=\"line\">            <span class=\"symbol\">:month</span> =&gt; params[<span class=\"symbol\">:month</span>],</div><div class=\"line\">            <span class=\"symbol\">:type</span> =&gt; <span class=\"string\">'get'</span>,</div><div class=\"line\">            <span class=\"symbol\">:time</span> =&gt; Time.new,</div><div class=\"line\">            <span class=\"symbol\">:ip</span> =&gt; request.ip,</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        present data</div><div class=\"line\">      <span class=\"keyword\">end</span></div><div class=\"line\">      post <span class=\"string\">'logout'</span> <span class=\"keyword\">do</span></div><div class=\"line\">        data = &#123;</div><div class=\"line\">            <span class=\"symbol\">:day</span> =&gt; params[<span class=\"symbol\">:day</span>],</div><div class=\"line\">            <span class=\"symbol\">:app_version</span> =&gt; headers[<span class=\"string\">'App-Version'</span>],</div><div class=\"line\">            <span class=\"symbol\">:token</span> =&gt; headers[<span class=\"string\">'Token'</span>],</div><div class=\"line\">            <span class=\"symbol\">:type</span> =&gt; <span class=\"string\">'post'</span>,</div><div class=\"line\">            <span class=\"symbol\">:users</span> =&gt; params[<span class=\"symbol\">:users</span>],</div><div class=\"line\">            <span class=\"symbol\">:user_id</span> =&gt; params[<span class=\"symbol\">:user_id</span>],</div><div class=\"line\">            <span class=\"symbol\">:time</span> =&gt; Time.new,</div><div class=\"line\">            <span class=\"symbol\">:ip</span> =&gt; request.ip,</div><div class=\"line\">        &#125;</div><div class=\"line\">        present data</div><div class=\"line\">      <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>grape<br>","more":"</p>\n<p><h2>Gemfile中加</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem <span class=\"string\">'grape'</span></div></pre></td></tr></table></figure></p>\n<p><h2>资源路径</h2><br>/resources/:resource<br>/resources/:resource/:action</p>\n<p>例<br>/users/1<br>/users/1/logout<br>路径嵌套<br>/users/1/posts/2/like</p>\n<p><h2>请求参数</h2></p>\n<ul>\n<li>header</li>\n<li>param( queryparam pathparam fieldparam) </li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">params <span class=\"keyword\">do</span></div><div class=\"line\">   requires <span class=\"symbol\">:year</span>, <span class=\"symbol\">type:</span> Integer</div><div class=\"line\">   optional <span class=\"symbol\">:month</span>, <span class=\"symbol\">type:</span> String, <span class=\"symbol\">default:</span> <span class=\"string\">'may'</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p><h2>相应</h2></p>\n<h3>资源的表述方式</h3><br>+ json<br>+ xml<br><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">format <span class=\"symbol\">:json</span></div></pre></td></tr></table></figure><br><br><h3>标准时间戳</h3>\n\n<h3>响应码</h3><br>200 ：get请求完成<br>201 ：post，put,delete请求完成<br>202 ：post，delete，请求提交成功，稍后将异步的进行处理<br>400 ：bad request请求无效，请求参数包含错误<br>401 ：unauthorized请求无效，因为用户没有进行认证<br>403 ：forbidden请求无效，因为用户被认定没有访问特定资源的权限<br>429 ：too many requests,请求频率超配，稍后再试<br>500 ：internal server error,服务器出错了，检查网站的状态，或者报告的问题<br><br><h3>错误信息</h3>\n\n\n<p>例：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User::API</span> &lt; Grape::API</span></div><div class=\"line\">  format <span class=\"symbol\">:json</span></div><div class=\"line\"></div><div class=\"line\">  resources <span class=\"string\">':users'</span> <span class=\"keyword\">do</span></div><div class=\"line\">    get <span class=\"string\">'test'</span> <span class=\"keyword\">do</span></div><div class=\"line\">      data = &#123;</div><div class=\"line\">          <span class=\"symbol\">:time</span> =&gt; Time.new,</div><div class=\"line\">          <span class=\"symbol\">:ip</span> =&gt; request.ip,</div><div class=\"line\">      &#125;</div><div class=\"line\">      present data</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    resources <span class=\"string\">':user_id'</span> <span class=\"keyword\">do</span></div><div class=\"line\">      get <span class=\"keyword\">do</span></div><div class=\"line\">        data = &#123;</div><div class=\"line\">            <span class=\"symbol\">:users</span> =&gt; params[<span class=\"symbol\">:users</span>],</div><div class=\"line\">            <span class=\"symbol\">:user_id</span> =&gt; params[<span class=\"symbol\">:user_id</span>],</div><div class=\"line\">            <span class=\"symbol\">:time</span> =&gt; Time.new,</div><div class=\"line\">            <span class=\"symbol\">:ip</span> =&gt; request.ip,</div><div class=\"line\">        &#125;</div><div class=\"line\">        present data</div><div class=\"line\">      <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">      params <span class=\"keyword\">do</span></div><div class=\"line\">        requires <span class=\"symbol\">:year</span>, <span class=\"symbol\">type:</span> Integer</div><div class=\"line\">        optional <span class=\"symbol\">:month</span>, <span class=\"symbol\">type:</span> String, <span class=\"symbol\">default:</span> <span class=\"string\">'may'</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">end</span></div><div class=\"line\">      get <span class=\"string\">'logout'</span> <span class=\"keyword\">do</span></div><div class=\"line\">        data = &#123;</div><div class=\"line\">            <span class=\"symbol\">:year</span> =&gt; params[<span class=\"symbol\">:year</span>],</div><div class=\"line\">            <span class=\"symbol\">:month</span> =&gt; params[<span class=\"symbol\">:month</span>],</div><div class=\"line\">            <span class=\"symbol\">:type</span> =&gt; <span class=\"string\">'get'</span>,</div><div class=\"line\">            <span class=\"symbol\">:time</span> =&gt; Time.new,</div><div class=\"line\">            <span class=\"symbol\">:ip</span> =&gt; request.ip,</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        present data</div><div class=\"line\">      <span class=\"keyword\">end</span></div><div class=\"line\">      post <span class=\"string\">'logout'</span> <span class=\"keyword\">do</span></div><div class=\"line\">        data = &#123;</div><div class=\"line\">            <span class=\"symbol\">:day</span> =&gt; params[<span class=\"symbol\">:day</span>],</div><div class=\"line\">            <span class=\"symbol\">:app_version</span> =&gt; headers[<span class=\"string\">'App-Version'</span>],</div><div class=\"line\">            <span class=\"symbol\">:token</span> =&gt; headers[<span class=\"string\">'Token'</span>],</div><div class=\"line\">            <span class=\"symbol\">:type</span> =&gt; <span class=\"string\">'post'</span>,</div><div class=\"line\">            <span class=\"symbol\">:users</span> =&gt; params[<span class=\"symbol\">:users</span>],</div><div class=\"line\">            <span class=\"symbol\">:user_id</span> =&gt; params[<span class=\"symbol\">:user_id</span>],</div><div class=\"line\">            <span class=\"symbol\">:time</span> =&gt; Time.new,</div><div class=\"line\">            <span class=\"symbol\">:ip</span> =&gt; request.ip,</div><div class=\"line\">        &#125;</div><div class=\"line\">        present data</div><div class=\"line\">      <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"rails","date":"2016-11-18T14:01:18.000Z","_content":"rails\n<!-- more -->\n<h2>常用命令</h2>\n<h3>创建</h3>\n```markdown\nrails new name\n```\n```markdown\nrails new name --skip-bundle\n```\n\n<h3>开启服务</h3>\n```markdown\nrails server\n```\n```markdown\nrails server -p 2000\n```\n\n<h2>bundle</h2>\n```markdown\nbundle install\n```\n\n<h2>路由routes</h2>\n<h3>查看所有路由信息</h3>\n```markdown\nrake routes\n```\n<h3>设置根路由</h3>\n```markdown\nroot 'welcome#index'\n```\n<h3>一般路由</h3>\n创建\n```markdown\n  get 'names/:id', :to => 'names#actionname'\n```\n调用\n```markdown\n <%= link_to 'xxxxxxx',{:controller => 'names', :action => 'actionname', :id => 1} %>\n```\n<h3>命名路由</h3>\n创建\n```markdown\n  get 'names/:id', :to => 'names#actionname', :as => 'names_actionname'\n```\n调用\n```markdown\n<%= link_to 'xxxxxxx',names_actionname_path(1) %>\n<%= link_to 'xxxxxxx',names_actionname_path %>\n```\n<h3>资源路由resources</h3>\n        请求  URL\n+ index get  /books\n+ creat post /books\n+ show  get  /books/[:id]  \n+ new   get  /books/new\n\n设置\n```markdown\nresources :names\n```\n\n```markdown\n  resources :names, :except => :show\n```\n<h4>集合路由</h4>\n```markdown\n  resources :posts do\n    get 'recent', :on => :collection\n  end\n```\n```markdown\n  resources :posts do\n    collection do\n      get 'recent'\n    end\n  end\n```\n<h4>成员路由</h4>\n```markdown\n  resources :posts do\n    get 'recent', :on => :member\n  end\n```\n```markdown\n    member do\n      get 'recent' #post/:id/recent\n    end\n  end\n```\n\n```markdown\n  resources :posts do\n    collection do\n      get 'recent' #post/recent\n    end\n    member do\n      get 'recent' #post/:id/recent\n    end\n  end\n```\n<h2>db</h2>\n```markdown\nrake db:migrate\n```\n\n<h2>generate</h2>\n<h3>scaffold</h3>\n```markdown\n rails generate scaffold name\n```\n```markdown\n rails generate scaffold product name price:decimal description:text\n```\n<h3>controller</h3>\n生成\n```markdown\nrails generate controller controllername\n```\n删除\n```markdown\nrails destroy controller controllername\n```\n生成\n```markdown\nrails generate controller controllername actionname1 actionname2\n```\n<h3>model</h3>\n生成\n```markdown\nrails generate model modelname name1 name2:string\n```\n添加关联字段\n```markdown\nrails generate migration add_user_id_to_posts user_id:id\n```\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/rails.md","raw":"---\ntitle: rails\ndate: 2016-11-18 22:01:18\ncategories:\n---\nrails\n<!-- more -->\n<h2>常用命令</h2>\n<h3>创建</h3>\n```markdown\nrails new name\n```\n```markdown\nrails new name --skip-bundle\n```\n\n<h3>开启服务</h3>\n```markdown\nrails server\n```\n```markdown\nrails server -p 2000\n```\n\n<h2>bundle</h2>\n```markdown\nbundle install\n```\n\n<h2>路由routes</h2>\n<h3>查看所有路由信息</h3>\n```markdown\nrake routes\n```\n<h3>设置根路由</h3>\n```markdown\nroot 'welcome#index'\n```\n<h3>一般路由</h3>\n创建\n```markdown\n  get 'names/:id', :to => 'names#actionname'\n```\n调用\n```markdown\n <%= link_to 'xxxxxxx',{:controller => 'names', :action => 'actionname', :id => 1} %>\n```\n<h3>命名路由</h3>\n创建\n```markdown\n  get 'names/:id', :to => 'names#actionname', :as => 'names_actionname'\n```\n调用\n```markdown\n<%= link_to 'xxxxxxx',names_actionname_path(1) %>\n<%= link_to 'xxxxxxx',names_actionname_path %>\n```\n<h3>资源路由resources</h3>\n        请求  URL\n+ index get  /books\n+ creat post /books\n+ show  get  /books/[:id]  \n+ new   get  /books/new\n\n设置\n```markdown\nresources :names\n```\n\n```markdown\n  resources :names, :except => :show\n```\n<h4>集合路由</h4>\n```markdown\n  resources :posts do\n    get 'recent', :on => :collection\n  end\n```\n```markdown\n  resources :posts do\n    collection do\n      get 'recent'\n    end\n  end\n```\n<h4>成员路由</h4>\n```markdown\n  resources :posts do\n    get 'recent', :on => :member\n  end\n```\n```markdown\n    member do\n      get 'recent' #post/:id/recent\n    end\n  end\n```\n\n```markdown\n  resources :posts do\n    collection do\n      get 'recent' #post/recent\n    end\n    member do\n      get 'recent' #post/:id/recent\n    end\n  end\n```\n<h2>db</h2>\n```markdown\nrake db:migrate\n```\n\n<h2>generate</h2>\n<h3>scaffold</h3>\n```markdown\n rails generate scaffold name\n```\n```markdown\n rails generate scaffold product name price:decimal description:text\n```\n<h3>controller</h3>\n生成\n```markdown\nrails generate controller controllername\n```\n删除\n```markdown\nrails destroy controller controllername\n```\n生成\n```markdown\nrails generate controller controllername actionname1 actionname2\n```\n<h3>model</h3>\n生成\n```markdown\nrails generate model modelname name1 name2:string\n```\n添加关联字段\n```markdown\nrails generate migration add_user_id_to_posts user_id:id\n```\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/rails","published":1,"updated":"2016-12-14T07:04:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9a4006l21xwo6bu71pp","content":"<p>rails<br><a id=\"more\"></a></p>\n<p></p><h2>常用命令</h2><p></p>\n<p></p><h3>创建</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails new name</div></pre></td></tr></table></figure><p></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails new name --skip-bundle</div></pre></td></tr></table></figure>\n<p></p><h3>开启服务</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails server</div></pre></td></tr></table></figure><p></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails server -p 2000</div></pre></td></tr></table></figure>\n<p></p><h2>bundle</h2><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bundle install</div></pre></td></tr></table></figure><p></p>\n<p></p><h2>路由routes</h2><p></p>\n<p></p><h3>查看所有路由信息</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake routes</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>设置根路由</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root 'welcome#index'</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>一般路由</h3><br>创建<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">get 'names/:id', :to =&gt; 'names#actionname'</div></pre></td></tr></table></figure><p></p>\n<p>调用<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%= link_to 'xxxxxxx',&#123;:controller =&gt; 'names', :action =&gt; 'actionname', :id =&gt; 1&#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p></p><h3>命名路由</h3><br>创建<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">get 'names/:id', :to =&gt; 'names#actionname', :as =&gt; 'names_actionname'</div></pre></td></tr></table></figure><p></p>\n<p>调用<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%= link_to 'xxxxxxx',names_actionname_path(1) %&gt;</div><div class=\"line\">&lt;%= link_to 'xxxxxxx',names_actionname_path %&gt;</div></pre></td></tr></table></figure></p>\n<p></p><h3>资源路由resources</h3><br>        请求  URL<p></p>\n<ul>\n<li>index get  /books</li>\n<li>creat post /books</li>\n<li>show  get  /books/[:id]  </li>\n<li>new   get  /books/new</li>\n</ul>\n<p>设置<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">resources :names</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">resources :names, :except =&gt; :show</div></pre></td></tr></table></figure>\n<p></p><h4>集合路由</h4><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">resources :posts do</div><div class=\"line\">  get 'recent', :on =&gt; :collection</div><div class=\"line\">end</div></pre></td></tr></table></figure><p></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">resources :posts do</div><div class=\"line\">  collection do</div><div class=\"line\"><span class=\"code\">    get 'recent'</span></div><div class=\"line\">  end</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p></p><h4>成员路由</h4><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">resources :posts do</div><div class=\"line\">  get 'recent', :on =&gt; :member</div><div class=\"line\">end</div></pre></td></tr></table></figure><p></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">  member do</div><div class=\"line\"><span class=\"code\">    get 'recent' #post/:id/recent</span></div><div class=\"line\">  end</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">resources :posts do</div><div class=\"line\">  collection do</div><div class=\"line\"><span class=\"code\">    get 'recent' #post/recent</span></div><div class=\"line\">  end</div><div class=\"line\">  member do</div><div class=\"line\"><span class=\"code\">    get 'recent' #post/:id/recent</span></div><div class=\"line\">  end</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p></p><h2>db</h2><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake db:migrate</div></pre></td></tr></table></figure><p></p>\n<p></p><h2>generate</h2><p></p>\n<p></p><h3>scaffold</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails generate scaffold name</div></pre></td></tr></table></figure><p></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails generate scaffold product name price:decimal description:text</div></pre></td></tr></table></figure>\n<p></p><h3>controller</h3><br>生成<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails generate controller controllername</div></pre></td></tr></table></figure><p></p>\n<p>删除<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails destroy controller controllername</div></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails generate controller controllername actionname1 actionname2</div></pre></td></tr></table></figure></p>\n<p></p><h3>model</h3><br>生成<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails generate model modelname name1 name2:string</div></pre></td></tr></table></figure><p></p>\n<p>添加关联字段<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails generate migration add<span class=\"emphasis\">_user_</span>id<span class=\"emphasis\">_to_</span>posts user_id:id</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>rails<br>","more":"</p>\n<p><h2>常用命令</h2></p>\n<p><h3>创建</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails new name</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails new name --skip-bundle</div></pre></td></tr></table></figure>\n<p><h3>开启服务</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails server</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails server -p 2000</div></pre></td></tr></table></figure>\n<p><h2>bundle</h2><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bundle install</div></pre></td></tr></table></figure></p>\n<p><h2>路由routes</h2></p>\n<p><h3>查看所有路由信息</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake routes</div></pre></td></tr></table></figure></p>\n<p><h3>设置根路由</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root 'welcome#index'</div></pre></td></tr></table></figure></p>\n<p><h3>一般路由</h3><br>创建<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">get 'names/:id', :to =&gt; 'names#actionname'</div></pre></td></tr></table></figure></p>\n<p>调用<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%= link_to 'xxxxxxx',&#123;:controller =&gt; 'names', :action =&gt; 'actionname', :id =&gt; 1&#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p><h3>命名路由</h3><br>创建<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">get 'names/:id', :to =&gt; 'names#actionname', :as =&gt; 'names_actionname'</div></pre></td></tr></table></figure></p>\n<p>调用<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%= link_to 'xxxxxxx',names_actionname_path(1) %&gt;</div><div class=\"line\">&lt;%= link_to 'xxxxxxx',names_actionname_path %&gt;</div></pre></td></tr></table></figure></p>\n<p><h3>资源路由resources</h3><br>        请求  URL</p>\n<ul>\n<li>index get  /books</li>\n<li>creat post /books</li>\n<li>show  get  /books/[:id]  </li>\n<li>new   get  /books/new</li>\n</ul>\n<p>设置<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">resources :names</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">resources :names, :except =&gt; :show</div></pre></td></tr></table></figure>\n<p><h4>集合路由</h4><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">resources :posts do</div><div class=\"line\">  get 'recent', :on =&gt; :collection</div><div class=\"line\">end</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">resources :posts do</div><div class=\"line\">  collection do</div><div class=\"line\"><span class=\"code\">    get 'recent'</span></div><div class=\"line\">  end</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p><h4>成员路由</h4><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">resources :posts do</div><div class=\"line\">  get 'recent', :on =&gt; :member</div><div class=\"line\">end</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">  member do</div><div class=\"line\"><span class=\"code\">    get 'recent' #post/:id/recent</span></div><div class=\"line\">  end</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">resources :posts do</div><div class=\"line\">  collection do</div><div class=\"line\"><span class=\"code\">    get 'recent' #post/recent</span></div><div class=\"line\">  end</div><div class=\"line\">  member do</div><div class=\"line\"><span class=\"code\">    get 'recent' #post/:id/recent</span></div><div class=\"line\">  end</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p><h2>db</h2><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rake db:migrate</div></pre></td></tr></table></figure></p>\n<p><h2>generate</h2></p>\n<p><h3>scaffold</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails generate scaffold name</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails generate scaffold product name price:decimal description:text</div></pre></td></tr></table></figure>\n<p><h3>controller</h3><br>生成<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails generate controller controllername</div></pre></td></tr></table></figure></p>\n<p>删除<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails destroy controller controllername</div></pre></td></tr></table></figure></p>\n<p>生成<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails generate controller controllername actionname1 actionname2</div></pre></td></tr></table></figure></p>\n<p><h3>model</h3><br>生成<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails generate model modelname name1 name2:string</div></pre></td></tr></table></figure></p>\n<p>添加关联字段<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rails generate migration add<span class=\"emphasis\">_user_</span>id<span class=\"emphasis\">_to_</span>posts user_id:id</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"rails下信鸽推送","date":"2016-12-20T13:29:38.000Z","_content":"rails下信鸽推送\n<!-- more -->\n\n使用的gem包\n\n ```ruby\n gem 'httparty'\n gem 'ruby-for-xinge', '~> 0.1.4'\n ```\n [rubygem地址](https://rubygems.org/gems/ruby-for-xinge/versions/0.1.4?locale=zh-CN)\n \n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/rails下信鸽推送.md","raw":"---\ntitle: rails下信鸽推送\ndate: 2016-12-20 21:29:38\ncategories: ruby\ntags: [ruby,rails]\n---\nrails下信鸽推送\n<!-- more -->\n\n使用的gem包\n\n ```ruby\n gem 'httparty'\n gem 'ruby-for-xinge', '~> 0.1.4'\n ```\n [rubygem地址](https://rubygems.org/gems/ruby-for-xinge/versions/0.1.4?locale=zh-CN)\n \n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/rails下信鸽推送","published":1,"updated":"2017-01-04T09:43:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9a5006o21xw27xtasww","content":"<p>rails下信鸽推送<br><a id=\"more\"></a></p>\n<p>使用的gem包</p>\n <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem <span class=\"string\">'httparty'</span></div><div class=\"line\">gem <span class=\"string\">'ruby-for-xinge'</span>, <span class=\"string\">'~&gt; 0.1.4'</span></div></pre></td></tr></table></figure>\n<p> <a href=\"https://rubygems.org/gems/ruby-for-xinge/versions/0.1.4?locale=zh-CN\" target=\"_blank\" rel=\"external\">rubygem地址</a></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>rails下信鸽推送<br>","more":"</p>\n<p>使用的gem包</p>\n <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem <span class=\"string\">'httparty'</span></div><div class=\"line\">gem <span class=\"string\">'ruby-for-xinge'</span>, <span class=\"string\">'~&gt; 0.1.4'</span></div></pre></td></tr></table></figure>\n<p> <a href=\"https://rubygems.org/gems/ruby-for-xinge/versions/0.1.4?locale=zh-CN\">rubygem地址</a></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"rake","date":"2016-11-14T07:23:56.000Z","_content":"rake\n<!-- more -->\n\n+ rake -T 查看所有的rake任务\n\n<h3>和数据库相关的</h3>\n+ rake db:create  #创建数据库\n+ rake db:migrate #更新数据库，更新的文件来自db/migrate/\n+ rake db:seed    #执行seed.rb文件，通常是创建一个默认的数据\n+ rake db:drop    #删除数据库\n\n生产环境下 加前缀 RAILS_ENV=protucion \n\n","source":"_posts/ruby/rake.md","raw":"---\ntitle: rake\ndate: 2016-11-14 15:23:56\ncategories: ruby\ntags: [ruby,rake]\n---\nrake\n<!-- more -->\n\n+ rake -T 查看所有的rake任务\n\n<h3>和数据库相关的</h3>\n+ rake db:create  #创建数据库\n+ rake db:migrate #更新数据库，更新的文件来自db/migrate/\n+ rake db:seed    #执行seed.rb文件，通常是创建一个默认的数据\n+ rake db:drop    #删除数据库\n\n生产环境下 加前缀 RAILS_ENV=protucion \n\n","slug":"ruby/rake","published":1,"updated":"2017-01-04T09:43:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9a6006s21xwc4k7on5a","content":"<p>rake<br><a id=\"more\"></a></p>\n<ul>\n<li>rake -T 查看所有的rake任务</li>\n</ul>\n<p></p><h3>和数据库相关的</h3><p></p>\n<ul>\n<li>rake db:create  #创建数据库</li>\n<li>rake db:migrate #更新数据库，更新的文件来自db/migrate/</li>\n<li>rake db:seed    #执行seed.rb文件，通常是创建一个默认的数据</li>\n<li>rake db:drop    #删除数据库</li>\n</ul>\n<p>生产环境下 加前缀 RAILS_ENV=protucion </p>\n","excerpt":"<p>rake<br>","more":"</p>\n<ul>\n<li>rake -T 查看所有的rake任务</li>\n</ul>\n<p><h3>和数据库相关的</h3></p>\n<ul>\n<li>rake db:create  #创建数据库</li>\n<li>rake db:migrate #更新数据库，更新的文件来自db/migrate/</li>\n<li>rake db:seed    #执行seed.rb文件，通常是创建一个默认的数据</li>\n<li>rake db:drop    #删除数据库</li>\n</ul>\n<p>生产环境下 加前缀 RAILS_ENV=protucion </p>"},{"title":"rake任务","date":"2016-12-20T12:59:13.000Z","_content":"rails中创建使用rake任务\n<!-- more -->\n转自[http://xiaocuixt.github.io/rails/2016/04/18/rails中创建rake任务/?utm_source=tuicool&utm_medium=referral](http://xiaocuixt.github.io/rails/2016/04/18/rails中创建rake任务/?utm_source=tuicool&utm_medium=referral)\n\n在rails中，rake用来编写任务脚本，让我们在cli中可以执行，提供了良好的任务编写结构，并且方便执行相互依赖的任务\n\nrails项目中，rake文件存放位置：lib/tasks/user.rake\n\n<h3>>1.without namespace:</h3>\n```ruby\ntask :sayhi do\n  puts \"hi\"\nend\n执行 rake sayhi 即可\n```\n<h3>2.with namespace</h3>\n```ruby\nnamespace :user do\n   desc \"genertate users\"    #描述性文字\n   task :generate => :environment do   #environment表示可指定环境 RAILS_ENV=production rake user:generate\n       u = User.new([{name: \"tom\"},{name: \"jack\"}])\n       u.save\n   end\nend\n```\n这样直接运行rake user:generate 即可执行生成user数据的任务\n\n<h3>3.调用外部的rake方法</h3>\n\n#lib/tasks/hello.rake\n```ruby\nnamespace :say do\n  task :hello do\n    puts \"hello xiaocui\"\n  end\nend\n```\n#lib/tasks/hi.rake\n```ruby\nnamespace :say do\n  task :hi do\n    Rake::Task['say:hello'].invoke   #调用外部的task\n    puts \"hi xiaocui\"\n  end\nend\n```\n执行 rake say:hi 将打印出 “hello xiaocui” 和 “hi xiaocui”\n\n<h3>4.单次执行多个方法</h3>\n\n#lib/myweekend.rake\n```ruby\ntask :morning do\n  puts \"get up\"\nend\ntask :afternoon do\n  puts \"go shopping\"\nend\ntask :evening do\n  puts \"have supper\"\nend\ntask :my_weekend => [:morning, :afternoon, :evening] do\n   puts \"This is my whole day on my weekend\"\nend\n```\n执行rake my_weekend 将依次打印每个方法的内容:\n\nget up\ngo shopping\nhave supper\nThis is my whole day on my weekend\n<h3>5.rake支持默认的任务</h3>\n```ruby\ntask :default => 'say:hello'\n```\n执行rake 即可运行该任务，很少用。\n\n﻿适用场景:\n\n1.调整线上的数据,执行rake脚本可以修改production数据库数据\n\n2.创建开发用的测试数据\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/rake任务.md","raw":"---\ntitle: rake任务\ndate: 2016-12-20 20:59:13\ncategories: ruby\ntags: [ruby,rake]\n---\nrails中创建使用rake任务\n<!-- more -->\n转自[http://xiaocuixt.github.io/rails/2016/04/18/rails中创建rake任务/?utm_source=tuicool&utm_medium=referral](http://xiaocuixt.github.io/rails/2016/04/18/rails中创建rake任务/?utm_source=tuicool&utm_medium=referral)\n\n在rails中，rake用来编写任务脚本，让我们在cli中可以执行，提供了良好的任务编写结构，并且方便执行相互依赖的任务\n\nrails项目中，rake文件存放位置：lib/tasks/user.rake\n\n<h3>>1.without namespace:</h3>\n```ruby\ntask :sayhi do\n  puts \"hi\"\nend\n执行 rake sayhi 即可\n```\n<h3>2.with namespace</h3>\n```ruby\nnamespace :user do\n   desc \"genertate users\"    #描述性文字\n   task :generate => :environment do   #environment表示可指定环境 RAILS_ENV=production rake user:generate\n       u = User.new([{name: \"tom\"},{name: \"jack\"}])\n       u.save\n   end\nend\n```\n这样直接运行rake user:generate 即可执行生成user数据的任务\n\n<h3>3.调用外部的rake方法</h3>\n\n#lib/tasks/hello.rake\n```ruby\nnamespace :say do\n  task :hello do\n    puts \"hello xiaocui\"\n  end\nend\n```\n#lib/tasks/hi.rake\n```ruby\nnamespace :say do\n  task :hi do\n    Rake::Task['say:hello'].invoke   #调用外部的task\n    puts \"hi xiaocui\"\n  end\nend\n```\n执行 rake say:hi 将打印出 “hello xiaocui” 和 “hi xiaocui”\n\n<h3>4.单次执行多个方法</h3>\n\n#lib/myweekend.rake\n```ruby\ntask :morning do\n  puts \"get up\"\nend\ntask :afternoon do\n  puts \"go shopping\"\nend\ntask :evening do\n  puts \"have supper\"\nend\ntask :my_weekend => [:morning, :afternoon, :evening] do\n   puts \"This is my whole day on my weekend\"\nend\n```\n执行rake my_weekend 将依次打印每个方法的内容:\n\nget up\ngo shopping\nhave supper\nThis is my whole day on my weekend\n<h3>5.rake支持默认的任务</h3>\n```ruby\ntask :default => 'say:hello'\n```\n执行rake 即可运行该任务，很少用。\n\n﻿适用场景:\n\n1.调整线上的数据,执行rake脚本可以修改production数据库数据\n\n2.创建开发用的测试数据\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/rake任务","published":1,"updated":"2017-01-04T09:43:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9a8006v21xwbpkwxhf7","content":"<p>rails中创建使用rake任务<br><a id=\"more\"></a><br>转自<a href=\"http://xiaocuixt.github.io/rails/2016/04/18/rails中创建rake任务/?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">http://xiaocuixt.github.io/rails/2016/04/18/rails中创建rake任务/?utm_source=tuicool&amp;utm_medium=referral</a></p>\n<p>在rails中，rake用来编写任务脚本，让我们在cli中可以执行，提供了良好的任务编写结构，并且方便执行相互依赖的任务</p>\n<p>rails项目中，rake文件存放位置：lib/tasks/user.rake</p>\n<h3>&gt;1.without namespace:</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">task <span class=\"symbol\">:sayhi</span> <span class=\"keyword\">do</span></div><div class=\"line\">  puts <span class=\"string\">\"hi\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">执行 rake sayhi 即可</div></pre></td></tr></table></figure><br><br><h3>2.with namespace</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">namespace <span class=\"symbol\">:user</span> <span class=\"keyword\">do</span></div><div class=\"line\">   desc <span class=\"string\">\"genertate users\"</span>    <span class=\"comment\">#描述性文字</span></div><div class=\"line\">   task <span class=\"symbol\">:generate</span> =&gt; <span class=\"symbol\">:environment</span> <span class=\"keyword\">do</span>   <span class=\"comment\">#environment表示可指定环境 RAILS_ENV=production rake user:generate</span></div><div class=\"line\">       u = User.new([&#123;<span class=\"symbol\">name:</span> <span class=\"string\">\"tom\"</span>&#125;,&#123;<span class=\"symbol\">name:</span> <span class=\"string\">\"jack\"</span>&#125;])</div><div class=\"line\">       u.save</div><div class=\"line\">   <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><br><br>这样直接运行rake user:generate 即可执行生成user数据的任务<br><br><h3>3.调用外部的rake方法</h3>\n\n<p>#lib/tasks/hello.rake<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">namespace <span class=\"symbol\">:say</span> <span class=\"keyword\">do</span></div><div class=\"line\">  task <span class=\"symbol\">:hello</span> <span class=\"keyword\">do</span></div><div class=\"line\">    puts <span class=\"string\">\"hello xiaocui\"</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>#lib/tasks/hi.rake<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">namespace <span class=\"symbol\">:say</span> <span class=\"keyword\">do</span></div><div class=\"line\">  task <span class=\"symbol\">:hi</span> <span class=\"keyword\">do</span></div><div class=\"line\">    Rake::Task[<span class=\"string\">'say:hello'</span>].invoke   <span class=\"comment\">#调用外部的task</span></div><div class=\"line\">    puts <span class=\"string\">\"hi xiaocui\"</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>执行 rake say:hi 将打印出 “hello xiaocui” 和 “hi xiaocui”</p>\n<h3>4.单次执行多个方法</h3>\n\n<p>#lib/myweekend.rake<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">task <span class=\"symbol\">:morning</span> <span class=\"keyword\">do</span></div><div class=\"line\">  puts <span class=\"string\">\"get up\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">task <span class=\"symbol\">:afternoon</span> <span class=\"keyword\">do</span></div><div class=\"line\">  puts <span class=\"string\">\"go shopping\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">task <span class=\"symbol\">:evening</span> <span class=\"keyword\">do</span></div><div class=\"line\">  puts <span class=\"string\">\"have supper\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">task <span class=\"symbol\">:my_weekend</span> =&gt; [<span class=\"symbol\">:morning</span>, <span class=\"symbol\">:afternoon</span>, <span class=\"symbol\">:evening</span>] <span class=\"keyword\">do</span></div><div class=\"line\">   puts <span class=\"string\">\"This is my whole day on my weekend\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>执行rake my_weekend 将依次打印每个方法的内容:</p>\n<p>get up<br>go shopping<br>have supper<br>This is my whole day on my weekend</p>\n<p></p><h3>5.rake支持默认的任务</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">task <span class=\"symbol\">:default</span> =&gt; <span class=\"string\">'say:hello'</span></div></pre></td></tr></table></figure><p></p>\n<p>执行rake 即可运行该任务，很少用。</p>\n<p>﻿适用场景:</p>\n<p>1.调整线上的数据,执行rake脚本可以修改production数据库数据</p>\n<p>2.创建开发用的测试数据</p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>rails中创建使用rake任务<br>","more":"<br>转自<a href=\"http://xiaocuixt.github.io/rails/2016/04/18/rails中创建rake任务/?utm_source=tuicool&amp;utm_medium=referral\">http://xiaocuixt.github.io/rails/2016/04/18/rails中创建rake任务/?utm_source=tuicool&amp;utm_medium=referral</a></p>\n<p>在rails中，rake用来编写任务脚本，让我们在cli中可以执行，提供了良好的任务编写结构，并且方便执行相互依赖的任务</p>\n<p>rails项目中，rake文件存放位置：lib/tasks/user.rake</p>\n<h3>&gt;1.without namespace:</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">task <span class=\"symbol\">:sayhi</span> <span class=\"keyword\">do</span></div><div class=\"line\">  puts <span class=\"string\">\"hi\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">执行 rake sayhi 即可</div></pre></td></tr></table></figure><br><br><h3>2.with namespace</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">namespace <span class=\"symbol\">:user</span> <span class=\"keyword\">do</span></div><div class=\"line\">   desc <span class=\"string\">\"genertate users\"</span>    <span class=\"comment\">#描述性文字</span></div><div class=\"line\">   task <span class=\"symbol\">:generate</span> =&gt; <span class=\"symbol\">:environment</span> <span class=\"keyword\">do</span>   <span class=\"comment\">#environment表示可指定环境 RAILS_ENV=production rake user:generate</span></div><div class=\"line\">       u = User.new([&#123;<span class=\"symbol\">name:</span> <span class=\"string\">\"tom\"</span>&#125;,&#123;<span class=\"symbol\">name:</span> <span class=\"string\">\"jack\"</span>&#125;])</div><div class=\"line\">       u.save</div><div class=\"line\">   <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><br><br>这样直接运行rake user:generate 即可执行生成user数据的任务<br><br><h3>3.调用外部的rake方法</h3>\n\n<p>#lib/tasks/hello.rake<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">namespace <span class=\"symbol\">:say</span> <span class=\"keyword\">do</span></div><div class=\"line\">  task <span class=\"symbol\">:hello</span> <span class=\"keyword\">do</span></div><div class=\"line\">    puts <span class=\"string\">\"hello xiaocui\"</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>#lib/tasks/hi.rake<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">namespace <span class=\"symbol\">:say</span> <span class=\"keyword\">do</span></div><div class=\"line\">  task <span class=\"symbol\">:hi</span> <span class=\"keyword\">do</span></div><div class=\"line\">    Rake::Task[<span class=\"string\">'say:hello'</span>].invoke   <span class=\"comment\">#调用外部的task</span></div><div class=\"line\">    puts <span class=\"string\">\"hi xiaocui\"</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>执行 rake say:hi 将打印出 “hello xiaocui” 和 “hi xiaocui”</p>\n<h3>4.单次执行多个方法</h3>\n\n<p>#lib/myweekend.rake<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">task <span class=\"symbol\">:morning</span> <span class=\"keyword\">do</span></div><div class=\"line\">  puts <span class=\"string\">\"get up\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">task <span class=\"symbol\">:afternoon</span> <span class=\"keyword\">do</span></div><div class=\"line\">  puts <span class=\"string\">\"go shopping\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">task <span class=\"symbol\">:evening</span> <span class=\"keyword\">do</span></div><div class=\"line\">  puts <span class=\"string\">\"have supper\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">task <span class=\"symbol\">:my_weekend</span> =&gt; [<span class=\"symbol\">:morning</span>, <span class=\"symbol\">:afternoon</span>, <span class=\"symbol\">:evening</span>] <span class=\"keyword\">do</span></div><div class=\"line\">   puts <span class=\"string\">\"This is my whole day on my weekend\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>执行rake my_weekend 将依次打印每个方法的内容:</p>\n<p>get up<br>go shopping<br>have supper<br>This is my whole day on my weekend</p>\n<p><h3>5.rake支持默认的任务</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">task <span class=\"symbol\">:default</span> =&gt; <span class=\"string\">'say:hello'</span></div></pre></td></tr></table></figure></p>\n<p>执行rake 即可运行该任务，很少用。</p>\n<p>﻿适用场景:</p>\n<p>1.调整线上的数据,执行rake脚本可以修改production数据库数据</p>\n<p>2.创建开发用的测试数据</p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"rspec","date":"2016-11-22T06:27:03.000Z","_content":"rspec\n<!-- more -->\nGemfile中加\n```ruby\ngem 'rspec-rails'\n```\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/rspec.md","raw":"---\ntitle: rspec\ndate: 2016-11-22 14:27:03\ncategories: ruby\ntags: [ruby,rspec]\n---\nrspec\n<!-- more -->\nGemfile中加\n```ruby\ngem 'rspec-rails'\n```\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/rspec","published":1,"updated":"2017-01-04T09:43:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9a9006z21xwj7ugjwh1","content":"<p>rspec<br><a id=\"more\"></a><br>Gemfile中加<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem <span class=\"string\">'rspec-rails'</span></div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>rspec<br>","more":"<br>Gemfile中加<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem <span class=\"string\">'rspec-rails'</span></div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"ruby基本语法1","date":"2016-03-11T09:16:29.000Z","_content":"ruby基本语法1\n<!-- more -->\n<h2>运行ruby的方式</h2>\n+ 交互式\n\n1、使用ruby命令\nirb\n```narkdown\nshirlydeMacBook-Pro:~ shirly$ irb\n2.3.0 :001 > puts \"hello world\"\nhello world\n => nil\n```\n\n+ 编写程序文件\n\n1、将程序保存在文件中，使用ruby命令运行\n\n<h2>ruby文档系统</h2>\nRDoc:ruby文档生成工具,通过分析ruby的代码，为ruby的对象和方法生成结构化的页面 \nri:命令行工具，方便的在控制台中查询API\n\n生成本地文档网站\n```\nri --server\n```\n\n<h2>ruby常用命令</h2>\n+ 运行ruby文件 \n```\nruby filename\n```\n+ 获取对象id的方法 object_id\n```\n2.3.0 :001 > \"hello world\".object_id\n => 70123608252540\n```\n\n<h2>ruby面向对象</h2>\n+ ruby中的一切都是对象（字符串，布尔值等都是对象）\n+ 每一个对象都有唯一的id（使用object_id方法获得）\n\n<h3>定义类</h3>\n```ruby\nclass Name\n  #其余代码\nend\n```\n<h3>局部变量，实例变量，全局变量和类变量</h3>\n+ 局部变量必须以小写字母或者下划线开头\n+ 实例变量以@开头\n+ 类变量以@@开头\n+ 全局变量以$开头\n\n<h3>类方法，实例方法</h3>\n+ 类方法 \n+ 实例方法\n\n```ruby\n#全局变量\n$prefix = \"hello:\"\n\n#定义类\nclass Name\n  #类变量\n  @@count = 0\n\n  def initialize(firstName, lastName)\n    #实例变量\n    @firstName = firstName\n    @lastName = lastName\n    @@count = @@count + 1\n  end\n\n  #类方法\n  def self.get_name_count\n    @@count\n  end\n\n  #实例方法\n  def lastName\n    @lastName\n  end\n\n  def firstName\n    @firstName\n  end\n\n  def name_with_prefix\n    $prefix + fullName\n  end\n\n  def fullName\n    #局部变量\n    name = @firstName + \" \" + @lastName\n    #返回局部变量\n    name\n  end\n\nend\n```\n\n<h2>ruby中的基本类型</h2>\n通常所说的基本类型是不可实例化的，可以直接初始化、赋值、运算，不可调用方法的类型\n\n<h3>符号 Symbol</h3>\n一个相同的符号有唯一确定的object_id\n\n通过\n+ :name\n+ :\"string\"\n+ :to_sym\n方法生成\n\n<h3>布尔值 TrueClass FalseClass</h3>\n+ 与(&) 全真为真\n+ 或(|) 一真为真\n+ 异或(^) 一样false不一样true\n\n<h3>字符串</h3>\n输出字符串\n+ p\n+ puts\n+ print\n```ruby\np \"我是字符串\" #我是字符串\np \"我是字符串\" * 2 #我是字符串我是字符串\np \"我是\" + \"字符串\" #我是字符串\n\"a\".ord #97\n\"a\" < \"b\" #true\n\"a\" =~ /a/ #true\n```\n<h3>数字</h3>\n+ Numeric 所有数字的父类\n+ Fixnum  一个原生的机器字节(32位或64位)所能存储的最大的整形值\n+ Bignum\n+ Float\n+ BigDeimal\n\n```ruby\nrequire 'bigdecimal'\n\na = BigDecimal.new(\"0.07\")\nb = a * 100\nb.to_i\n```\n\n<h4>迭代</h4>\n```ruby\n5.times {\n  puts \"hehe\"\n}\n\n5.times { \n|number| \nputs number\n}\n\n1.upto(10) {\n|number| \nputs \"#{number}\"\n}\n\n10.downto(1) {\n|x| \nputs x\n}\n\n5.step(50,5){\n  |x|\n  puts x\n}\n```\n\n\n<h3>数组</h3>\n数组是有序的，基于整数索引的任意对象的集合\n\n<h4>索引</h4>\n+ 索引的起始为0\n+ 索引为负数时,从末尾开始查找，如索引为-1代表数组最后一个元素，索引为-2代表数组倒数第二个元素\n\n<h4>创建数组</h4>\n```ruby\narr = [1,\"two\",3.0] #[1,\"two\",3.0]\n\narr = Array.new    #[]\n```\n\n<h4>获取数组元素</h4>\n```ruby\narr = [1,2,3,4,5,6] \n\n #获取某个元素\narr[2] #3\narr[100] #nil\narr[-3] #4\narr.at(0) #1\narr.fetch(1) #2\n\n #获取摸个范围的元素\narr[2,3] #[3,4,5]\narr[1..4] #[2,3,4,5]\narr[1..-3] #[2,3,4]\n\n\n #获取前n个元素\narr.take(3) #[1,2,3] \n\n#排除前n个元素\narr.drop(3) #[1,2,3] \n```\n<h4>获取数组信息</h4>\n```ruby\narr = [1,2,3,4,5,6] \n\narr.length  #6\narr.count   #6\narr.empty?  #false\narr.include?(6) #true\n```\n<h4>修改数组</h4>\n```ruby\narr = [1,2,3,4]\n\n #插入元素\n \n #在末尾插入元素\narr.push(5)    #[1,2,3,4,5] \narr<<6         #[1,2,3,4,5,6]\n #在开头插入元素\narr.unshift(0) #[0,1,2,3,4,5]\n #在特定位置插入元素\narr.insert(3,'apple')  #[0,1,2,'apple',3,4,5]\n\n #删减元素\narr = [1,2,3,4,5,6] \n\n #删除最后一个元素\narr.pop     #6 [1,2,3,4,5] \n #删除第一个元素\narr.shift   #1 [2,3,4,5] \n #删除特定位置元素\narr.delete_at(2)  #4 [2,3,5] \n #删除特定元素\narr.delete(2)  #2 [3,5] \n\n\narr = [1,1,2,3,3,3,nil]\n #删除重复元素\narr.uniq  #[1,2,3,nil]\n #删除空元素\narr.compact #[1,1,2,3,3,3]\n```\n<h4>遍历数组</h4>\n```ruby\narr = [1,2,3,4,5,6] \n\n #遍历\narr.each\n #反向遍历\narr.reverse_each\n #对数组元素做处理后返回完整的数组 不修改arr自己\narr.map\n #选出特定的元素组成新的数组 不修改arr自己\narr.select\n #剔除选择的元素后的数组 不修改arr自己\narr.reject\n #抛弃满足条件的元素前面的元素 不修改arr自己\narr.drop_while\n #删除满足条件的元素 修改arr自己\narr.delete_if\n #保留满足条件的元素 修改arr自己\narr.keep_if\n```\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/ruby/ruby基本语法1.md","raw":"---\ntitle: ruby基本语法1\ndate: 2016-03-11 17:16:29\ncategories: ruby\ntags: [ruby]\n---\nruby基本语法1\n<!-- more -->\n<h2>运行ruby的方式</h2>\n+ 交互式\n\n1、使用ruby命令\nirb\n```narkdown\nshirlydeMacBook-Pro:~ shirly$ irb\n2.3.0 :001 > puts \"hello world\"\nhello world\n => nil\n```\n\n+ 编写程序文件\n\n1、将程序保存在文件中，使用ruby命令运行\n\n<h2>ruby文档系统</h2>\nRDoc:ruby文档生成工具,通过分析ruby的代码，为ruby的对象和方法生成结构化的页面 \nri:命令行工具，方便的在控制台中查询API\n\n生成本地文档网站\n```\nri --server\n```\n\n<h2>ruby常用命令</h2>\n+ 运行ruby文件 \n```\nruby filename\n```\n+ 获取对象id的方法 object_id\n```\n2.3.0 :001 > \"hello world\".object_id\n => 70123608252540\n```\n\n<h2>ruby面向对象</h2>\n+ ruby中的一切都是对象（字符串，布尔值等都是对象）\n+ 每一个对象都有唯一的id（使用object_id方法获得）\n\n<h3>定义类</h3>\n```ruby\nclass Name\n  #其余代码\nend\n```\n<h3>局部变量，实例变量，全局变量和类变量</h3>\n+ 局部变量必须以小写字母或者下划线开头\n+ 实例变量以@开头\n+ 类变量以@@开头\n+ 全局变量以$开头\n\n<h3>类方法，实例方法</h3>\n+ 类方法 \n+ 实例方法\n\n```ruby\n#全局变量\n$prefix = \"hello:\"\n\n#定义类\nclass Name\n  #类变量\n  @@count = 0\n\n  def initialize(firstName, lastName)\n    #实例变量\n    @firstName = firstName\n    @lastName = lastName\n    @@count = @@count + 1\n  end\n\n  #类方法\n  def self.get_name_count\n    @@count\n  end\n\n  #实例方法\n  def lastName\n    @lastName\n  end\n\n  def firstName\n    @firstName\n  end\n\n  def name_with_prefix\n    $prefix + fullName\n  end\n\n  def fullName\n    #局部变量\n    name = @firstName + \" \" + @lastName\n    #返回局部变量\n    name\n  end\n\nend\n```\n\n<h2>ruby中的基本类型</h2>\n通常所说的基本类型是不可实例化的，可以直接初始化、赋值、运算，不可调用方法的类型\n\n<h3>符号 Symbol</h3>\n一个相同的符号有唯一确定的object_id\n\n通过\n+ :name\n+ :\"string\"\n+ :to_sym\n方法生成\n\n<h3>布尔值 TrueClass FalseClass</h3>\n+ 与(&) 全真为真\n+ 或(|) 一真为真\n+ 异或(^) 一样false不一样true\n\n<h3>字符串</h3>\n输出字符串\n+ p\n+ puts\n+ print\n```ruby\np \"我是字符串\" #我是字符串\np \"我是字符串\" * 2 #我是字符串我是字符串\np \"我是\" + \"字符串\" #我是字符串\n\"a\".ord #97\n\"a\" < \"b\" #true\n\"a\" =~ /a/ #true\n```\n<h3>数字</h3>\n+ Numeric 所有数字的父类\n+ Fixnum  一个原生的机器字节(32位或64位)所能存储的最大的整形值\n+ Bignum\n+ Float\n+ BigDeimal\n\n```ruby\nrequire 'bigdecimal'\n\na = BigDecimal.new(\"0.07\")\nb = a * 100\nb.to_i\n```\n\n<h4>迭代</h4>\n```ruby\n5.times {\n  puts \"hehe\"\n}\n\n5.times { \n|number| \nputs number\n}\n\n1.upto(10) {\n|number| \nputs \"#{number}\"\n}\n\n10.downto(1) {\n|x| \nputs x\n}\n\n5.step(50,5){\n  |x|\n  puts x\n}\n```\n\n\n<h3>数组</h3>\n数组是有序的，基于整数索引的任意对象的集合\n\n<h4>索引</h4>\n+ 索引的起始为0\n+ 索引为负数时,从末尾开始查找，如索引为-1代表数组最后一个元素，索引为-2代表数组倒数第二个元素\n\n<h4>创建数组</h4>\n```ruby\narr = [1,\"two\",3.0] #[1,\"two\",3.0]\n\narr = Array.new    #[]\n```\n\n<h4>获取数组元素</h4>\n```ruby\narr = [1,2,3,4,5,6] \n\n #获取某个元素\narr[2] #3\narr[100] #nil\narr[-3] #4\narr.at(0) #1\narr.fetch(1) #2\n\n #获取摸个范围的元素\narr[2,3] #[3,4,5]\narr[1..4] #[2,3,4,5]\narr[1..-3] #[2,3,4]\n\n\n #获取前n个元素\narr.take(3) #[1,2,3] \n\n#排除前n个元素\narr.drop(3) #[1,2,3] \n```\n<h4>获取数组信息</h4>\n```ruby\narr = [1,2,3,4,5,6] \n\narr.length  #6\narr.count   #6\narr.empty?  #false\narr.include?(6) #true\n```\n<h4>修改数组</h4>\n```ruby\narr = [1,2,3,4]\n\n #插入元素\n \n #在末尾插入元素\narr.push(5)    #[1,2,3,4,5] \narr<<6         #[1,2,3,4,5,6]\n #在开头插入元素\narr.unshift(0) #[0,1,2,3,4,5]\n #在特定位置插入元素\narr.insert(3,'apple')  #[0,1,2,'apple',3,4,5]\n\n #删减元素\narr = [1,2,3,4,5,6] \n\n #删除最后一个元素\narr.pop     #6 [1,2,3,4,5] \n #删除第一个元素\narr.shift   #1 [2,3,4,5] \n #删除特定位置元素\narr.delete_at(2)  #4 [2,3,5] \n #删除特定元素\narr.delete(2)  #2 [3,5] \n\n\narr = [1,1,2,3,3,3,nil]\n #删除重复元素\narr.uniq  #[1,2,3,nil]\n #删除空元素\narr.compact #[1,1,2,3,3,3]\n```\n<h4>遍历数组</h4>\n```ruby\narr = [1,2,3,4,5,6] \n\n #遍历\narr.each\n #反向遍历\narr.reverse_each\n #对数组元素做处理后返回完整的数组 不修改arr自己\narr.map\n #选出特定的元素组成新的数组 不修改arr自己\narr.select\n #剔除选择的元素后的数组 不修改arr自己\narr.reject\n #抛弃满足条件的元素前面的元素 不修改arr自己\narr.drop_while\n #删除满足条件的元素 修改arr自己\narr.delete_if\n #保留满足条件的元素 修改arr自己\narr.keep_if\n```\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"ruby/ruby基本语法1","published":1,"updated":"2017-02-20T05:46:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9aa007221xwsqqjd1yf","content":"<p>ruby基本语法1<br><a id=\"more\"></a></p>\n<p></p><h2>运行ruby的方式</h2><p></p>\n<ul>\n<li>交互式</li>\n</ul>\n<p>1、使用ruby命令<br>irb<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">shirlydeMacBook-Pro:~ shirly$ irb</div><div class=\"line\">2.3.0 :001 &gt; puts &quot;hello world&quot;</div><div class=\"line\">hello world</div><div class=\"line\"> =&gt; nil</div></pre></td></tr></table></figure></p>\n<ul>\n<li>编写程序文件</li>\n</ul>\n<p>1、将程序保存在文件中，使用ruby命令运行</p>\n<p></p><h2>ruby文档系统</h2><br>RDoc:ruby文档生成工具,通过分析ruby的代码，为ruby的对象和方法生成结构化的页面<br>ri:命令行工具，方便的在控制台中查询API<p></p>\n<p>生成本地文档网站<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ri --server</div></pre></td></tr></table></figure></p>\n<p></p><h2>ruby常用命令</h2><p></p>\n<ul>\n<li><p>运行ruby文件 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ruby filename</div></pre></td></tr></table></figure>\n</li>\n<li><p>获取对象id的方法 object_id</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">2.3.0 :001 &gt; &quot;hello world&quot;.object_id</div><div class=\"line\"> =&gt; 70123608252540</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p></p><h2>ruby面向对象</h2><p></p>\n<ul>\n<li>ruby中的一切都是对象（字符串，布尔值等都是对象）</li>\n<li>每一个对象都有唯一的id（使用object_id方法获得）</li>\n</ul>\n<p></p><h3>定义类</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span></span></div><div class=\"line\">  <span class=\"comment\">#其余代码</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h3>局部变量，实例变量，全局变量和类变量</h3><p></p>\n<ul>\n<li>局部变量必须以小写字母或者下划线开头</li>\n<li>实例变量以@开头</li>\n<li>类变量以@@开头</li>\n<li>全局变量以$开头</li>\n</ul>\n<p></p><h3>类方法，实例方法</h3><p></p>\n<ul>\n<li>类方法 </li>\n<li>实例方法</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#全局变量</span></div><div class=\"line\">$prefix = <span class=\"string\">\"hello:\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#定义类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span></span></div><div class=\"line\">  <span class=\"comment\">#类变量</span></div><div class=\"line\">  @@count = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(firstName, lastName)</span></span></div><div class=\"line\">    <span class=\"comment\">#实例变量</span></div><div class=\"line\">    @firstName = firstName</div><div class=\"line\">    @lastName = lastName</div><div class=\"line\">    @@count = @@count + <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">#类方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">get_name_count</span></span></div><div class=\"line\">    @@count</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">#实例方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lastName</span></span></div><div class=\"line\">    @lastName</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">firstName</span></span></div><div class=\"line\">    @firstName</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name_with_prefix</span></span></div><div class=\"line\">    $prefix + fullName</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fullName</span></span></div><div class=\"line\">    <span class=\"comment\">#局部变量</span></div><div class=\"line\">    name = @firstName + <span class=\"string\">\" \"</span> + @lastName</div><div class=\"line\">    <span class=\"comment\">#返回局部变量</span></div><div class=\"line\">    name</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p></p><h2>ruby中的基本类型</h2><br>通常所说的基本类型是不可实例化的，可以直接初始化、赋值、运算，不可调用方法的类型<p></p>\n<p></p><h3>符号 Symbol</h3><br>一个相同的符号有唯一确定的object_id<p></p>\n<p>通过</p>\n<ul>\n<li>:name</li>\n<li>:”string”</li>\n<li>:to_sym<br>方法生成</li>\n</ul>\n<p></p><h3>布尔值 TrueClass FalseClass</h3><p></p>\n<ul>\n<li>与(&amp;) 全真为真</li>\n<li>或(|) 一真为真</li>\n<li>异或(^) 一样false不一样true</li>\n</ul>\n<p></p><h3>字符串</h3><br>输出字符串<p></p>\n<ul>\n<li>p</li>\n<li>puts</li>\n<li>print<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">p <span class=\"string\">\"我是字符串\"</span> <span class=\"comment\">#我是字符串</span></div><div class=\"line\">p <span class=\"string\">\"我是字符串\"</span> * <span class=\"number\">2</span> <span class=\"comment\">#我是字符串我是字符串</span></div><div class=\"line\">p <span class=\"string\">\"我是\"</span> + <span class=\"string\">\"字符串\"</span> <span class=\"comment\">#我是字符串</span></div><div class=\"line\"><span class=\"string\">\"a\"</span>.ord <span class=\"comment\">#97</span></div><div class=\"line\"><span class=\"string\">\"a\"</span> &lt; <span class=\"string\">\"b\"</span> <span class=\"comment\">#true</span></div><div class=\"line\"><span class=\"string\">\"a\"</span> =~ <span class=\"regexp\">/a/</span> <span class=\"comment\">#true</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p></p><h3>数字</h3><p></p>\n<ul>\n<li>Numeric 所有数字的父类</li>\n<li>Fixnum  一个原生的机器字节(32位或64位)所能存储的最大的整形值</li>\n<li>Bignum</li>\n<li>Float</li>\n<li>BigDeimal</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'bigdecimal'</span></div><div class=\"line\"></div><div class=\"line\">a = BigDecimal.new(<span class=\"string\">\"0.07\"</span>)</div><div class=\"line\">b = a * <span class=\"number\">100</span></div><div class=\"line\">b.to_i</div></pre></td></tr></table></figure>\n<p></p><h4>迭代</h4><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">5</span>.times &#123;</div><div class=\"line\">  puts <span class=\"string\">\"hehe\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">5</span>.times &#123; </div><div class=\"line\"><span class=\"params\">|number|</span> </div><div class=\"line\">puts number</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1</span>.upto(<span class=\"number\">10</span>) &#123;</div><div class=\"line\"><span class=\"params\">|number|</span> </div><div class=\"line\">puts <span class=\"string\">\"<span class=\"subst\">#&#123;number&#125;</span>\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">10</span>.downto(<span class=\"number\">1</span>) &#123;</div><div class=\"line\"><span class=\"params\">|x|</span> </div><div class=\"line\">puts x</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">5</span>.step(<span class=\"number\">50</span>,<span class=\"number\">5</span>)&#123;</div><div class=\"line\">  <span class=\"params\">|x|</span></div><div class=\"line\">  puts x</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>数组</h3><br>数组是有序的，基于整数索引的任意对象的集合<p></p>\n<p></p><h4>索引</h4><p></p>\n<ul>\n<li>索引的起始为0</li>\n<li>索引为负数时,从末尾开始查找，如索引为-1代表数组最后一个元素，索引为-2代表数组倒数第二个元素</li>\n</ul>\n<p></p><h4>创建数组</h4><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"string\">\"two\"</span>,<span class=\"number\">3.0</span>] <span class=\"comment\">#[1,\"two\",3.0]</span></div><div class=\"line\"></div><div class=\"line\">arr = Array.new    <span class=\"comment\">#[]</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h4>获取数组元素</h4><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>] </div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#获取某个元素</span></div><div class=\"line\">arr[<span class=\"number\">2</span>] <span class=\"comment\">#3</span></div><div class=\"line\">arr[<span class=\"number\">100</span>] <span class=\"comment\">#nil</span></div><div class=\"line\">arr[-<span class=\"number\">3</span>] <span class=\"comment\">#4</span></div><div class=\"line\">arr.at(<span class=\"number\">0</span>) <span class=\"comment\">#1</span></div><div class=\"line\">arr.fetch(<span class=\"number\">1</span>) <span class=\"comment\">#2</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#获取摸个范围的元素</span></div><div class=\"line\">arr[<span class=\"number\">2</span>,<span class=\"number\">3</span>] <span class=\"comment\">#[3,4,5]</span></div><div class=\"line\">arr[<span class=\"number\">1</span>..<span class=\"number\">4</span>] <span class=\"comment\">#[2,3,4,5]</span></div><div class=\"line\">arr[<span class=\"number\">1</span>..-<span class=\"number\">3</span>] <span class=\"comment\">#[2,3,4]</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#获取前n个元素</span></div><div class=\"line\">arr.take(<span class=\"number\">3</span>) <span class=\"comment\">#[1,2,3] </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#排除前n个元素</span></div><div class=\"line\">arr.drop(<span class=\"number\">3</span>) <span class=\"comment\">#[1,2,3]</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h4>获取数组信息</h4><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>] </div><div class=\"line\"></div><div class=\"line\">arr.length  <span class=\"comment\">#6</span></div><div class=\"line\">arr.count   <span class=\"comment\">#6</span></div><div class=\"line\">arr.empty?  <span class=\"comment\">#false</span></div><div class=\"line\">arr.<span class=\"keyword\">include</span>?(<span class=\"number\">6</span>) <span class=\"comment\">#true</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h4>修改数组</h4><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#插入元素</span></div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">#在末尾插入元素</span></div><div class=\"line\">arr.push(<span class=\"number\">5</span>)    <span class=\"comment\">#[1,2,3,4,5] </span></div><div class=\"line\">arr&lt;&lt;<span class=\"number\">6</span>         <span class=\"comment\">#[1,2,3,4,5,6]</span></div><div class=\"line\"> <span class=\"comment\">#在开头插入元素</span></div><div class=\"line\">arr.unshift(<span class=\"number\">0</span>) <span class=\"comment\">#[0,1,2,3,4,5]</span></div><div class=\"line\"> <span class=\"comment\">#在特定位置插入元素</span></div><div class=\"line\">arr.insert(<span class=\"number\">3</span>,<span class=\"string\">'apple'</span>)  <span class=\"comment\">#[0,1,2,'apple',3,4,5]</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#删减元素</span></div><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>] </div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#删除最后一个元素</span></div><div class=\"line\">arr.pop     <span class=\"comment\">#6 [1,2,3,4,5] </span></div><div class=\"line\"> <span class=\"comment\">#删除第一个元素</span></div><div class=\"line\">arr.shift   <span class=\"comment\">#1 [2,3,4,5] </span></div><div class=\"line\"> <span class=\"comment\">#删除特定位置元素</span></div><div class=\"line\">arr.delete_at(<span class=\"number\">2</span>)  <span class=\"comment\">#4 [2,3,5] </span></div><div class=\"line\"> <span class=\"comment\">#删除特定元素</span></div><div class=\"line\">arr.delete(<span class=\"number\">2</span>)  <span class=\"comment\">#2 [3,5] </span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"literal\">nil</span>]</div><div class=\"line\"> <span class=\"comment\">#删除重复元素</span></div><div class=\"line\">arr.uniq  <span class=\"comment\">#[1,2,3,nil]</span></div><div class=\"line\"> <span class=\"comment\">#删除空元素</span></div><div class=\"line\">arr.compact <span class=\"comment\">#[1,1,2,3,3,3]</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h4>遍历数组</h4><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>] </div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#遍历</span></div><div class=\"line\">arr.each</div><div class=\"line\"> <span class=\"comment\">#反向遍历</span></div><div class=\"line\">arr.reverse_each</div><div class=\"line\"> <span class=\"comment\">#对数组元素做处理后返回完整的数组 不修改arr自己</span></div><div class=\"line\">arr.map</div><div class=\"line\"> <span class=\"comment\">#选出特定的元素组成新的数组 不修改arr自己</span></div><div class=\"line\">arr.select</div><div class=\"line\"> <span class=\"comment\">#剔除选择的元素后的数组 不修改arr自己</span></div><div class=\"line\">arr.reject</div><div class=\"line\"> <span class=\"comment\">#抛弃满足条件的元素前面的元素 不修改arr自己</span></div><div class=\"line\">arr.drop_while</div><div class=\"line\"> <span class=\"comment\">#删除满足条件的元素 修改arr自己</span></div><div class=\"line\">arr.delete_if</div><div class=\"line\"> <span class=\"comment\">#保留满足条件的元素 修改arr自己</span></div><div class=\"line\">arr.keep_if</div></pre></td></tr></table></figure><p></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>ruby基本语法1<br>","more":"</p>\n<p><h2>运行ruby的方式</h2></p>\n<ul>\n<li>交互式</li>\n</ul>\n<p>1、使用ruby命令<br>irb<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">shirlydeMacBook-Pro:~ shirly$ irb</div><div class=\"line\">2.3.0 :001 &gt; puts &quot;hello world&quot;</div><div class=\"line\">hello world</div><div class=\"line\"> =&gt; nil</div></pre></td></tr></table></figure></p>\n<ul>\n<li>编写程序文件</li>\n</ul>\n<p>1、将程序保存在文件中，使用ruby命令运行</p>\n<p><h2>ruby文档系统</h2><br>RDoc:ruby文档生成工具,通过分析ruby的代码，为ruby的对象和方法生成结构化的页面<br>ri:命令行工具，方便的在控制台中查询API</p>\n<p>生成本地文档网站<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ri --server</div></pre></td></tr></table></figure></p>\n<p><h2>ruby常用命令</h2></p>\n<ul>\n<li><p>运行ruby文件 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ruby filename</div></pre></td></tr></table></figure>\n</li>\n<li><p>获取对象id的方法 object_id</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">2.3.0 :001 &gt; &quot;hello world&quot;.object_id</div><div class=\"line\"> =&gt; 70123608252540</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><h2>ruby面向对象</h2></p>\n<ul>\n<li>ruby中的一切都是对象（字符串，布尔值等都是对象）</li>\n<li>每一个对象都有唯一的id（使用object_id方法获得）</li>\n</ul>\n<p><h3>定义类</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span></span></div><div class=\"line\">  <span class=\"comment\">#其余代码</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p><h3>局部变量，实例变量，全局变量和类变量</h3></p>\n<ul>\n<li>局部变量必须以小写字母或者下划线开头</li>\n<li>实例变量以@开头</li>\n<li>类变量以@@开头</li>\n<li>全局变量以$开头</li>\n</ul>\n<p><h3>类方法，实例方法</h3></p>\n<ul>\n<li>类方法 </li>\n<li>实例方法</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#全局变量</span></div><div class=\"line\">$prefix = <span class=\"string\">\"hello:\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#定义类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span></span></div><div class=\"line\">  <span class=\"comment\">#类变量</span></div><div class=\"line\">  @@count = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(firstName, lastName)</span></span></div><div class=\"line\">    <span class=\"comment\">#实例变量</span></div><div class=\"line\">    @firstName = firstName</div><div class=\"line\">    @lastName = lastName</div><div class=\"line\">    @@count = @@count + <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">#类方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">get_name_count</span></span></div><div class=\"line\">    @@count</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">#实例方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lastName</span></span></div><div class=\"line\">    @lastName</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">firstName</span></span></div><div class=\"line\">    @firstName</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name_with_prefix</span></span></div><div class=\"line\">    $prefix + fullName</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fullName</span></span></div><div class=\"line\">    <span class=\"comment\">#局部变量</span></div><div class=\"line\">    name = @firstName + <span class=\"string\">\" \"</span> + @lastName</div><div class=\"line\">    <span class=\"comment\">#返回局部变量</span></div><div class=\"line\">    name</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p><h2>ruby中的基本类型</h2><br>通常所说的基本类型是不可实例化的，可以直接初始化、赋值、运算，不可调用方法的类型</p>\n<p><h3>符号 Symbol</h3><br>一个相同的符号有唯一确定的object_id</p>\n<p>通过</p>\n<ul>\n<li>:name</li>\n<li>:”string”</li>\n<li>:to_sym<br>方法生成</li>\n</ul>\n<p><h3>布尔值 TrueClass FalseClass</h3></p>\n<ul>\n<li>与(&amp;) 全真为真</li>\n<li>或(|) 一真为真</li>\n<li>异或(^) 一样false不一样true</li>\n</ul>\n<p><h3>字符串</h3><br>输出字符串</p>\n<ul>\n<li>p</li>\n<li>puts</li>\n<li>print<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">p <span class=\"string\">\"我是字符串\"</span> <span class=\"comment\">#我是字符串</span></div><div class=\"line\">p <span class=\"string\">\"我是字符串\"</span> * <span class=\"number\">2</span> <span class=\"comment\">#我是字符串我是字符串</span></div><div class=\"line\">p <span class=\"string\">\"我是\"</span> + <span class=\"string\">\"字符串\"</span> <span class=\"comment\">#我是字符串</span></div><div class=\"line\"><span class=\"string\">\"a\"</span>.ord <span class=\"comment\">#97</span></div><div class=\"line\"><span class=\"string\">\"a\"</span> &lt; <span class=\"string\">\"b\"</span> <span class=\"comment\">#true</span></div><div class=\"line\"><span class=\"string\">\"a\"</span> =~ <span class=\"regexp\">/a/</span> <span class=\"comment\">#true</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><h3>数字</h3></p>\n<ul>\n<li>Numeric 所有数字的父类</li>\n<li>Fixnum  一个原生的机器字节(32位或64位)所能存储的最大的整形值</li>\n<li>Bignum</li>\n<li>Float</li>\n<li>BigDeimal</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'bigdecimal'</span></div><div class=\"line\"></div><div class=\"line\">a = BigDecimal.new(<span class=\"string\">\"0.07\"</span>)</div><div class=\"line\">b = a * <span class=\"number\">100</span></div><div class=\"line\">b.to_i</div></pre></td></tr></table></figure>\n<p><h4>迭代</h4><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">5</span>.times &#123;</div><div class=\"line\">  puts <span class=\"string\">\"hehe\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">5</span>.times &#123; </div><div class=\"line\"><span class=\"params\">|number|</span> </div><div class=\"line\">puts number</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1</span>.upto(<span class=\"number\">10</span>) &#123;</div><div class=\"line\"><span class=\"params\">|number|</span> </div><div class=\"line\">puts <span class=\"string\">\"<span class=\"subst\">#&#123;number&#125;</span>\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">10</span>.downto(<span class=\"number\">1</span>) &#123;</div><div class=\"line\"><span class=\"params\">|x|</span> </div><div class=\"line\">puts x</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">5</span>.step(<span class=\"number\">50</span>,<span class=\"number\">5</span>)&#123;</div><div class=\"line\">  <span class=\"params\">|x|</span></div><div class=\"line\">  puts x</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><h3>数组</h3><br>数组是有序的，基于整数索引的任意对象的集合</p>\n<p><h4>索引</h4></p>\n<ul>\n<li>索引的起始为0</li>\n<li>索引为负数时,从末尾开始查找，如索引为-1代表数组最后一个元素，索引为-2代表数组倒数第二个元素</li>\n</ul>\n<p><h4>创建数组</h4><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"string\">\"two\"</span>,<span class=\"number\">3.0</span>] <span class=\"comment\">#[1,\"two\",3.0]</span></div><div class=\"line\"></div><div class=\"line\">arr = Array.new    <span class=\"comment\">#[]</span></div></pre></td></tr></table></figure></p>\n<p><h4>获取数组元素</h4><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>] </div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#获取某个元素</span></div><div class=\"line\">arr[<span class=\"number\">2</span>] <span class=\"comment\">#3</span></div><div class=\"line\">arr[<span class=\"number\">100</span>] <span class=\"comment\">#nil</span></div><div class=\"line\">arr[-<span class=\"number\">3</span>] <span class=\"comment\">#4</span></div><div class=\"line\">arr.at(<span class=\"number\">0</span>) <span class=\"comment\">#1</span></div><div class=\"line\">arr.fetch(<span class=\"number\">1</span>) <span class=\"comment\">#2</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#获取摸个范围的元素</span></div><div class=\"line\">arr[<span class=\"number\">2</span>,<span class=\"number\">3</span>] <span class=\"comment\">#[3,4,5]</span></div><div class=\"line\">arr[<span class=\"number\">1</span>..<span class=\"number\">4</span>] <span class=\"comment\">#[2,3,4,5]</span></div><div class=\"line\">arr[<span class=\"number\">1</span>..-<span class=\"number\">3</span>] <span class=\"comment\">#[2,3,4]</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#获取前n个元素</span></div><div class=\"line\">arr.take(<span class=\"number\">3</span>) <span class=\"comment\">#[1,2,3] </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#排除前n个元素</span></div><div class=\"line\">arr.drop(<span class=\"number\">3</span>) <span class=\"comment\">#[1,2,3]</span></div></pre></td></tr></table></figure></p>\n<p><h4>获取数组信息</h4><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>] </div><div class=\"line\"></div><div class=\"line\">arr.length  <span class=\"comment\">#6</span></div><div class=\"line\">arr.count   <span class=\"comment\">#6</span></div><div class=\"line\">arr.empty?  <span class=\"comment\">#false</span></div><div class=\"line\">arr.<span class=\"keyword\">include</span>?(<span class=\"number\">6</span>) <span class=\"comment\">#true</span></div></pre></td></tr></table></figure></p>\n<p><h4>修改数组</h4><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#插入元素</span></div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">#在末尾插入元素</span></div><div class=\"line\">arr.push(<span class=\"number\">5</span>)    <span class=\"comment\">#[1,2,3,4,5] </span></div><div class=\"line\">arr&lt;&lt;<span class=\"number\">6</span>         <span class=\"comment\">#[1,2,3,4,5,6]</span></div><div class=\"line\"> <span class=\"comment\">#在开头插入元素</span></div><div class=\"line\">arr.unshift(<span class=\"number\">0</span>) <span class=\"comment\">#[0,1,2,3,4,5]</span></div><div class=\"line\"> <span class=\"comment\">#在特定位置插入元素</span></div><div class=\"line\">arr.insert(<span class=\"number\">3</span>,<span class=\"string\">'apple'</span>)  <span class=\"comment\">#[0,1,2,'apple',3,4,5]</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#删减元素</span></div><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>] </div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#删除最后一个元素</span></div><div class=\"line\">arr.pop     <span class=\"comment\">#6 [1,2,3,4,5] </span></div><div class=\"line\"> <span class=\"comment\">#删除第一个元素</span></div><div class=\"line\">arr.shift   <span class=\"comment\">#1 [2,3,4,5] </span></div><div class=\"line\"> <span class=\"comment\">#删除特定位置元素</span></div><div class=\"line\">arr.delete_at(<span class=\"number\">2</span>)  <span class=\"comment\">#4 [2,3,5] </span></div><div class=\"line\"> <span class=\"comment\">#删除特定元素</span></div><div class=\"line\">arr.delete(<span class=\"number\">2</span>)  <span class=\"comment\">#2 [3,5] </span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"literal\">nil</span>]</div><div class=\"line\"> <span class=\"comment\">#删除重复元素</span></div><div class=\"line\">arr.uniq  <span class=\"comment\">#[1,2,3,nil]</span></div><div class=\"line\"> <span class=\"comment\">#删除空元素</span></div><div class=\"line\">arr.compact <span class=\"comment\">#[1,1,2,3,3,3]</span></div></pre></td></tr></table></figure></p>\n<p><h4>遍历数组</h4><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>] </div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#遍历</span></div><div class=\"line\">arr.each</div><div class=\"line\"> <span class=\"comment\">#反向遍历</span></div><div class=\"line\">arr.reverse_each</div><div class=\"line\"> <span class=\"comment\">#对数组元素做处理后返回完整的数组 不修改arr自己</span></div><div class=\"line\">arr.map</div><div class=\"line\"> <span class=\"comment\">#选出特定的元素组成新的数组 不修改arr自己</span></div><div class=\"line\">arr.select</div><div class=\"line\"> <span class=\"comment\">#剔除选择的元素后的数组 不修改arr自己</span></div><div class=\"line\">arr.reject</div><div class=\"line\"> <span class=\"comment\">#抛弃满足条件的元素前面的元素 不修改arr自己</span></div><div class=\"line\">arr.drop_while</div><div class=\"line\"> <span class=\"comment\">#删除满足条件的元素 修改arr自己</span></div><div class=\"line\">arr.delete_if</div><div class=\"line\"> <span class=\"comment\">#保留满足条件的元素 修改arr自己</span></div><div class=\"line\">arr.keep_if</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"ruby基本语法2","date":"2016-03-13T09:40:04.000Z","_content":"ruby基本语法2\n<!-- more -->\n<h2>哈希</h2>\n哈希是一种类似字典的集合，集合中包含了唯一的键和键所对应的值\n\n<h3>新建哈希</h3>\n```ruby\nhsh = {\"a\" => 10, \"b\" => 6}\nhsh = {a:10, b:6}\nhsh = Hash.new\n\nhsh = Hash.new(0)  #设置默认值\nhsh[:key_not_exit] #0\nhsh.default        #0\n\nhsh = Hash.new{|hash, key| hash[key] = \"我是hash#{key}\"}\nhsh[:key_not_exit] #我是hash key_not_exit\n```\n<h3>获取哈希信息</h3>\n```ruby\nhsh = {key1:1, key2:2}\n \n #获取哈希的默认初始值\nhsh.default #nil\n #判断哈希是否包含键值对\nhsh.empty?  #false\n #判断哈希是否相等\nhsh.eql?({}) #false\n #获取哈希的键值对个数\nhsh.length #2\n #获取哈希的键值对个数\nhsh.size   #2\n #清除全部键值对\nhsh.clear  #{}\n```\n<h3>访问哈希中的键值对</h3>\n```ruby\nhsh = {key1:1, key2:2}\n\nhsh[:key1]  #1\nhsh[:key3]  #nil\nhsh.fetch(:key1)  #1\nhsh.fetch(:key_not_exit)  #raise key error\n #判断哈希中是否存在键值对\nhsh.has_key?(:key1)   #true\n #查询值所对应的键\nhsh.key(2) #:key2\n #查询所有的键\nhsh.keys #[:key1,:key2]\n #查询所有的值\nhsh.values #[1,2]\n\nhsh.assoc(:key1) #[:key1,1]\n```\n\n<h3>增加哈希中的键值对</h3>\n```ruby\nhsh = {key1:1, key2:2}\n\n #增加键值对\nhsh[:key3] = 3 #3\nhsh.store(:key3, 3) #{key1:1, key2:2, key3:3}\n #合并2个哈希，后面的值会覆盖前面的值 merge不修改本身 merge!需改本身\nhsh.merge({key3:3}) #{key1:1, key2:2, key3:3}\nhsh.update\n```\n<h3>删除哈希中的键值对</h3>\n```ruby\nhsh = {key1:1, key2:2}\n\n #删除对应的键值对\nhsh.delete(:key2) #2\n #删除满足条件的键值对\nhsh.delete_if{|key, value| value > 1} #{}\n #保留满足条件的键值对\nhsh.keep_if\n #删除第一个键值对\nhsh.shift\n\n```\n\n<h3>遍历哈希中的键值对</h3>\n```ruby\nhsh = {key1:1, key2:2}\n\nhsh.each\nhsh.each_pair\nhsh.each_key\nhsh.each_value\nhsh.select\nhsh.reject\n\nhsh.each_key{|key| puts key}\n```\n\n<h2>方法</h2>\n+ 方法名应该以小写字母或者下划线开头\n+ 方法名可以以？、！、或者=号结尾\n\n```ruby\ndef my_method (arg1, arg2)\n  puts arg1, arg2\nend\n\ndef my_method (arg1 = \"arg1\", arg2 = \"arg2\")\n  puts arg1, arg2\nend\n\nmy_method           # \"arg1, arg2\"\nmy_method(\"hi\")          # \"hi, arg2\"\nmy_method(\"hi\", \"world\") # \"hi, world\"\n\ndef my_method (arg1, *rest)\n  puts \"arg1 = #{arg1}, rest = #{rest.inspect}\"\nend\n\ndef my_method (first, *, last)\n\nend\n\ndef my_method (params)\n\nend\n\nmy_method(:arg1 => \"arg1\", :arg2 => \"arg2\")\nmy_method({:arg1 => \"arg1\", :arg2 => \"arg2\"})\n\ndef my_method (arg)\n  if block_given?\n    yield(arg)\n  else\n    puts \"no block given\"\n  end\nend\n\ndef my_method (arg, &block)\n  block.call(arg)\nend\n\nmy_method(\"hi\"){|a| p a} \n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/ruby基本语法2.md","raw":"---\ntitle: ruby基本语法2\ndate: 2016-03-13 17:40:04\ncategories: ruby\ntags: [ruby]\n---\nruby基本语法2\n<!-- more -->\n<h2>哈希</h2>\n哈希是一种类似字典的集合，集合中包含了唯一的键和键所对应的值\n\n<h3>新建哈希</h3>\n```ruby\nhsh = {\"a\" => 10, \"b\" => 6}\nhsh = {a:10, b:6}\nhsh = Hash.new\n\nhsh = Hash.new(0)  #设置默认值\nhsh[:key_not_exit] #0\nhsh.default        #0\n\nhsh = Hash.new{|hash, key| hash[key] = \"我是hash#{key}\"}\nhsh[:key_not_exit] #我是hash key_not_exit\n```\n<h3>获取哈希信息</h3>\n```ruby\nhsh = {key1:1, key2:2}\n \n #获取哈希的默认初始值\nhsh.default #nil\n #判断哈希是否包含键值对\nhsh.empty?  #false\n #判断哈希是否相等\nhsh.eql?({}) #false\n #获取哈希的键值对个数\nhsh.length #2\n #获取哈希的键值对个数\nhsh.size   #2\n #清除全部键值对\nhsh.clear  #{}\n```\n<h3>访问哈希中的键值对</h3>\n```ruby\nhsh = {key1:1, key2:2}\n\nhsh[:key1]  #1\nhsh[:key3]  #nil\nhsh.fetch(:key1)  #1\nhsh.fetch(:key_not_exit)  #raise key error\n #判断哈希中是否存在键值对\nhsh.has_key?(:key1)   #true\n #查询值所对应的键\nhsh.key(2) #:key2\n #查询所有的键\nhsh.keys #[:key1,:key2]\n #查询所有的值\nhsh.values #[1,2]\n\nhsh.assoc(:key1) #[:key1,1]\n```\n\n<h3>增加哈希中的键值对</h3>\n```ruby\nhsh = {key1:1, key2:2}\n\n #增加键值对\nhsh[:key3] = 3 #3\nhsh.store(:key3, 3) #{key1:1, key2:2, key3:3}\n #合并2个哈希，后面的值会覆盖前面的值 merge不修改本身 merge!需改本身\nhsh.merge({key3:3}) #{key1:1, key2:2, key3:3}\nhsh.update\n```\n<h3>删除哈希中的键值对</h3>\n```ruby\nhsh = {key1:1, key2:2}\n\n #删除对应的键值对\nhsh.delete(:key2) #2\n #删除满足条件的键值对\nhsh.delete_if{|key, value| value > 1} #{}\n #保留满足条件的键值对\nhsh.keep_if\n #删除第一个键值对\nhsh.shift\n\n```\n\n<h3>遍历哈希中的键值对</h3>\n```ruby\nhsh = {key1:1, key2:2}\n\nhsh.each\nhsh.each_pair\nhsh.each_key\nhsh.each_value\nhsh.select\nhsh.reject\n\nhsh.each_key{|key| puts key}\n```\n\n<h2>方法</h2>\n+ 方法名应该以小写字母或者下划线开头\n+ 方法名可以以？、！、或者=号结尾\n\n```ruby\ndef my_method (arg1, arg2)\n  puts arg1, arg2\nend\n\ndef my_method (arg1 = \"arg1\", arg2 = \"arg2\")\n  puts arg1, arg2\nend\n\nmy_method           # \"arg1, arg2\"\nmy_method(\"hi\")          # \"hi, arg2\"\nmy_method(\"hi\", \"world\") # \"hi, world\"\n\ndef my_method (arg1, *rest)\n  puts \"arg1 = #{arg1}, rest = #{rest.inspect}\"\nend\n\ndef my_method (first, *, last)\n\nend\n\ndef my_method (params)\n\nend\n\nmy_method(:arg1 => \"arg1\", :arg2 => \"arg2\")\nmy_method({:arg1 => \"arg1\", :arg2 => \"arg2\"})\n\ndef my_method (arg)\n  if block_given?\n    yield(arg)\n  else\n    puts \"no block given\"\n  end\nend\n\ndef my_method (arg, &block)\n  block.call(arg)\nend\n\nmy_method(\"hi\"){|a| p a} \n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/ruby基本语法2","published":1,"updated":"2017-01-05T02:43:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9ab007621xwn3s95nc0","content":"<p>ruby基本语法2<br><a id=\"more\"></a></p>\n<p></p><h2>哈希</h2><br>哈希是一种类似字典的集合，集合中包含了唯一的键和键所对应的值<p></p>\n<p></p><h3>新建哈希</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">hsh = &#123;<span class=\"string\">\"a\"</span> =&gt; <span class=\"number\">10</span>, <span class=\"string\">\"b\"</span> =&gt; <span class=\"number\">6</span>&#125;</div><div class=\"line\">hsh = &#123;<span class=\"symbol\">a:</span><span class=\"number\">10</span>, <span class=\"symbol\">b:</span><span class=\"number\">6</span>&#125;</div><div class=\"line\">hsh = Hash.new</div><div class=\"line\"></div><div class=\"line\">hsh = Hash.new(<span class=\"number\">0</span>)  <span class=\"comment\">#设置默认值</span></div><div class=\"line\">hsh[<span class=\"symbol\">:key_not_exit</span>] <span class=\"comment\">#0</span></div><div class=\"line\">hsh.default        <span class=\"comment\">#0</span></div><div class=\"line\"></div><div class=\"line\">hsh = Hash.new&#123;<span class=\"params\">|hash, key|</span> hash[key] = <span class=\"string\">\"我是hash<span class=\"subst\">#&#123;key&#125;</span>\"</span>&#125;</div><div class=\"line\">hsh[<span class=\"symbol\">:key_not_exit</span>] <span class=\"comment\">#我是hash key_not_exit</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h3>获取哈希信息</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">hsh = &#123;<span class=\"symbol\">key1:</span><span class=\"number\">1</span>, <span class=\"symbol\">key2:</span><span class=\"number\">2</span>&#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">#获取哈希的默认初始值</span></div><div class=\"line\">hsh.default <span class=\"comment\">#nil</span></div><div class=\"line\"> <span class=\"comment\">#判断哈希是否包含键值对</span></div><div class=\"line\">hsh.empty?  <span class=\"comment\">#false</span></div><div class=\"line\"> <span class=\"comment\">#判断哈希是否相等</span></div><div class=\"line\">hsh.eql?(&#123;&#125;) <span class=\"comment\">#false</span></div><div class=\"line\"> <span class=\"comment\">#获取哈希的键值对个数</span></div><div class=\"line\">hsh.length <span class=\"comment\">#2</span></div><div class=\"line\"> <span class=\"comment\">#获取哈希的键值对个数</span></div><div class=\"line\">hsh.size   <span class=\"comment\">#2</span></div><div class=\"line\"> <span class=\"comment\">#清除全部键值对</span></div><div class=\"line\">hsh.clear  <span class=\"comment\">#&#123;&#125;</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h3>访问哈希中的键值对</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">hsh = &#123;<span class=\"symbol\">key1:</span><span class=\"number\">1</span>, <span class=\"symbol\">key2:</span><span class=\"number\">2</span>&#125;</div><div class=\"line\"></div><div class=\"line\">hsh[<span class=\"symbol\">:key1</span>]  <span class=\"comment\">#1</span></div><div class=\"line\">hsh[<span class=\"symbol\">:key3</span>]  <span class=\"comment\">#nil</span></div><div class=\"line\">hsh.fetch(<span class=\"symbol\">:key1</span>)  <span class=\"comment\">#1</span></div><div class=\"line\">hsh.fetch(<span class=\"symbol\">:key_not_exit</span>)  <span class=\"comment\">#raise key error</span></div><div class=\"line\"> <span class=\"comment\">#判断哈希中是否存在键值对</span></div><div class=\"line\">hsh.has_key?(<span class=\"symbol\">:key1</span>)   <span class=\"comment\">#true</span></div><div class=\"line\"> <span class=\"comment\">#查询值所对应的键</span></div><div class=\"line\">hsh.key(<span class=\"number\">2</span>) <span class=\"comment\">#:key2</span></div><div class=\"line\"> <span class=\"comment\">#查询所有的键</span></div><div class=\"line\">hsh.keys <span class=\"comment\">#[:key1,:key2]</span></div><div class=\"line\"> <span class=\"comment\">#查询所有的值</span></div><div class=\"line\">hsh.values <span class=\"comment\">#[1,2]</span></div><div class=\"line\"></div><div class=\"line\">hsh.assoc(<span class=\"symbol\">:key1</span>) <span class=\"comment\">#[:key1,1]</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h3>增加哈希中的键值对</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">hsh = &#123;<span class=\"symbol\">key1:</span><span class=\"number\">1</span>, <span class=\"symbol\">key2:</span><span class=\"number\">2</span>&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#增加键值对</span></div><div class=\"line\">hsh[<span class=\"symbol\">:key3</span>] = <span class=\"number\">3</span> <span class=\"comment\">#3</span></div><div class=\"line\">hsh.store(<span class=\"symbol\">:key3</span>, <span class=\"number\">3</span>) <span class=\"comment\">#&#123;key1:1, key2:2, key3:3&#125;</span></div><div class=\"line\"> <span class=\"comment\">#合并2个哈希，后面的值会覆盖前面的值 merge不修改本身 merge!需改本身</span></div><div class=\"line\">hsh.merge(&#123;<span class=\"symbol\">key3:</span><span class=\"number\">3</span>&#125;) <span class=\"comment\">#&#123;key1:1, key2:2, key3:3&#125;</span></div><div class=\"line\">hsh.update</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>删除哈希中的键值对</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">hsh = &#123;<span class=\"symbol\">key1:</span><span class=\"number\">1</span>, <span class=\"symbol\">key2:</span><span class=\"number\">2</span>&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#删除对应的键值对</span></div><div class=\"line\">hsh.delete(<span class=\"symbol\">:key2</span>) <span class=\"comment\">#2</span></div><div class=\"line\"> <span class=\"comment\">#删除满足条件的键值对</span></div><div class=\"line\">hsh.delete_if&#123;<span class=\"params\">|key, value|</span> value &gt; <span class=\"number\">1</span>&#125; <span class=\"comment\">#&#123;&#125;</span></div><div class=\"line\"> <span class=\"comment\">#保留满足条件的键值对</span></div><div class=\"line\">hsh.keep_if</div><div class=\"line\"> <span class=\"comment\">#删除第一个键值对</span></div><div class=\"line\">hsh.shift</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>遍历哈希中的键值对</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">hsh = &#123;<span class=\"symbol\">key1:</span><span class=\"number\">1</span>, <span class=\"symbol\">key2:</span><span class=\"number\">2</span>&#125;</div><div class=\"line\"></div><div class=\"line\">hsh.each</div><div class=\"line\">hsh.each_pair</div><div class=\"line\">hsh.each_key</div><div class=\"line\">hsh.each_value</div><div class=\"line\">hsh.select</div><div class=\"line\">hsh.reject</div><div class=\"line\"></div><div class=\"line\">hsh.each_key&#123;<span class=\"params\">|key|</span> puts key&#125;</div></pre></td></tr></table></figure><p></p>\n<p></p><h2>方法</h2><p></p>\n<ul>\n<li>方法名应该以小写字母或者下划线开头</li>\n<li>方法名可以以？、！、或者=号结尾</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"params\">(arg1, arg2)</span></span></div><div class=\"line\">  puts arg1, arg2</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"params\">(arg1 = <span class=\"string\">\"arg1\"</span>, arg2 = <span class=\"string\">\"arg2\"</span>)</span></span></div><div class=\"line\">  puts arg1, arg2</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">my_method           <span class=\"comment\"># \"arg1, arg2\"</span></div><div class=\"line\">my_method(<span class=\"string\">\"hi\"</span>)          <span class=\"comment\"># \"hi, arg2\"</span></div><div class=\"line\">my_method(<span class=\"string\">\"hi\"</span>, <span class=\"string\">\"world\"</span>) <span class=\"comment\"># \"hi, world\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"params\">(arg1, *rest)</span></span></div><div class=\"line\">  puts <span class=\"string\">\"arg1 = <span class=\"subst\">#&#123;arg1&#125;</span>, rest = <span class=\"subst\">#&#123;rest.inspect&#125;</span>\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"params\">(first, *, last)</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"params\">(params)</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">my_method(<span class=\"symbol\">:arg1</span> =&gt; <span class=\"string\">\"arg1\"</span>, <span class=\"symbol\">:arg2</span> =&gt; <span class=\"string\">\"arg2\"</span>)</div><div class=\"line\">my_method(&#123;<span class=\"symbol\">:arg1</span> =&gt; <span class=\"string\">\"arg1\"</span>, <span class=\"symbol\">:arg2</span> =&gt; <span class=\"string\">\"arg2\"</span>&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"params\">(arg)</span></span></div><div class=\"line\">  <span class=\"keyword\">if</span> block_given?</div><div class=\"line\">    <span class=\"keyword\">yield</span>(arg)</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">    puts <span class=\"string\">\"no block given\"</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"params\">(arg, &amp;block)</span></span></div><div class=\"line\">  block.call(arg)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">my_method(<span class=\"string\">\"hi\"</span>)&#123;<span class=\"params\">|a|</span> p a&#125;</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>ruby基本语法2<br>","more":"</p>\n<p><h2>哈希</h2><br>哈希是一种类似字典的集合，集合中包含了唯一的键和键所对应的值</p>\n<p><h3>新建哈希</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">hsh = &#123;<span class=\"string\">\"a\"</span> =&gt; <span class=\"number\">10</span>, <span class=\"string\">\"b\"</span> =&gt; <span class=\"number\">6</span>&#125;</div><div class=\"line\">hsh = &#123;<span class=\"symbol\">a:</span><span class=\"number\">10</span>, <span class=\"symbol\">b:</span><span class=\"number\">6</span>&#125;</div><div class=\"line\">hsh = Hash.new</div><div class=\"line\"></div><div class=\"line\">hsh = Hash.new(<span class=\"number\">0</span>)  <span class=\"comment\">#设置默认值</span></div><div class=\"line\">hsh[<span class=\"symbol\">:key_not_exit</span>] <span class=\"comment\">#0</span></div><div class=\"line\">hsh.default        <span class=\"comment\">#0</span></div><div class=\"line\"></div><div class=\"line\">hsh = Hash.new&#123;<span class=\"params\">|hash, key|</span> hash[key] = <span class=\"string\">\"我是hash<span class=\"subst\">#&#123;key&#125;</span>\"</span>&#125;</div><div class=\"line\">hsh[<span class=\"symbol\">:key_not_exit</span>] <span class=\"comment\">#我是hash key_not_exit</span></div></pre></td></tr></table></figure></p>\n<p><h3>获取哈希信息</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">hsh = &#123;<span class=\"symbol\">key1:</span><span class=\"number\">1</span>, <span class=\"symbol\">key2:</span><span class=\"number\">2</span>&#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">#获取哈希的默认初始值</span></div><div class=\"line\">hsh.default <span class=\"comment\">#nil</span></div><div class=\"line\"> <span class=\"comment\">#判断哈希是否包含键值对</span></div><div class=\"line\">hsh.empty?  <span class=\"comment\">#false</span></div><div class=\"line\"> <span class=\"comment\">#判断哈希是否相等</span></div><div class=\"line\">hsh.eql?(&#123;&#125;) <span class=\"comment\">#false</span></div><div class=\"line\"> <span class=\"comment\">#获取哈希的键值对个数</span></div><div class=\"line\">hsh.length <span class=\"comment\">#2</span></div><div class=\"line\"> <span class=\"comment\">#获取哈希的键值对个数</span></div><div class=\"line\">hsh.size   <span class=\"comment\">#2</span></div><div class=\"line\"> <span class=\"comment\">#清除全部键值对</span></div><div class=\"line\">hsh.clear  <span class=\"comment\">#&#123;&#125;</span></div></pre></td></tr></table></figure></p>\n<p><h3>访问哈希中的键值对</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">hsh = &#123;<span class=\"symbol\">key1:</span><span class=\"number\">1</span>, <span class=\"symbol\">key2:</span><span class=\"number\">2</span>&#125;</div><div class=\"line\"></div><div class=\"line\">hsh[<span class=\"symbol\">:key1</span>]  <span class=\"comment\">#1</span></div><div class=\"line\">hsh[<span class=\"symbol\">:key3</span>]  <span class=\"comment\">#nil</span></div><div class=\"line\">hsh.fetch(<span class=\"symbol\">:key1</span>)  <span class=\"comment\">#1</span></div><div class=\"line\">hsh.fetch(<span class=\"symbol\">:key_not_exit</span>)  <span class=\"comment\">#raise key error</span></div><div class=\"line\"> <span class=\"comment\">#判断哈希中是否存在键值对</span></div><div class=\"line\">hsh.has_key?(<span class=\"symbol\">:key1</span>)   <span class=\"comment\">#true</span></div><div class=\"line\"> <span class=\"comment\">#查询值所对应的键</span></div><div class=\"line\">hsh.key(<span class=\"number\">2</span>) <span class=\"comment\">#:key2</span></div><div class=\"line\"> <span class=\"comment\">#查询所有的键</span></div><div class=\"line\">hsh.keys <span class=\"comment\">#[:key1,:key2]</span></div><div class=\"line\"> <span class=\"comment\">#查询所有的值</span></div><div class=\"line\">hsh.values <span class=\"comment\">#[1,2]</span></div><div class=\"line\"></div><div class=\"line\">hsh.assoc(<span class=\"symbol\">:key1</span>) <span class=\"comment\">#[:key1,1]</span></div></pre></td></tr></table></figure></p>\n<p><h3>增加哈希中的键值对</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">hsh = &#123;<span class=\"symbol\">key1:</span><span class=\"number\">1</span>, <span class=\"symbol\">key2:</span><span class=\"number\">2</span>&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#增加键值对</span></div><div class=\"line\">hsh[<span class=\"symbol\">:key3</span>] = <span class=\"number\">3</span> <span class=\"comment\">#3</span></div><div class=\"line\">hsh.store(<span class=\"symbol\">:key3</span>, <span class=\"number\">3</span>) <span class=\"comment\">#&#123;key1:1, key2:2, key3:3&#125;</span></div><div class=\"line\"> <span class=\"comment\">#合并2个哈希，后面的值会覆盖前面的值 merge不修改本身 merge!需改本身</span></div><div class=\"line\">hsh.merge(&#123;<span class=\"symbol\">key3:</span><span class=\"number\">3</span>&#125;) <span class=\"comment\">#&#123;key1:1, key2:2, key3:3&#125;</span></div><div class=\"line\">hsh.update</div></pre></td></tr></table></figure></p>\n<p><h3>删除哈希中的键值对</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">hsh = &#123;<span class=\"symbol\">key1:</span><span class=\"number\">1</span>, <span class=\"symbol\">key2:</span><span class=\"number\">2</span>&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">#删除对应的键值对</span></div><div class=\"line\">hsh.delete(<span class=\"symbol\">:key2</span>) <span class=\"comment\">#2</span></div><div class=\"line\"> <span class=\"comment\">#删除满足条件的键值对</span></div><div class=\"line\">hsh.delete_if&#123;<span class=\"params\">|key, value|</span> value &gt; <span class=\"number\">1</span>&#125; <span class=\"comment\">#&#123;&#125;</span></div><div class=\"line\"> <span class=\"comment\">#保留满足条件的键值对</span></div><div class=\"line\">hsh.keep_if</div><div class=\"line\"> <span class=\"comment\">#删除第一个键值对</span></div><div class=\"line\">hsh.shift</div></pre></td></tr></table></figure></p>\n<p><h3>遍历哈希中的键值对</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">hsh = &#123;<span class=\"symbol\">key1:</span><span class=\"number\">1</span>, <span class=\"symbol\">key2:</span><span class=\"number\">2</span>&#125;</div><div class=\"line\"></div><div class=\"line\">hsh.each</div><div class=\"line\">hsh.each_pair</div><div class=\"line\">hsh.each_key</div><div class=\"line\">hsh.each_value</div><div class=\"line\">hsh.select</div><div class=\"line\">hsh.reject</div><div class=\"line\"></div><div class=\"line\">hsh.each_key&#123;<span class=\"params\">|key|</span> puts key&#125;</div></pre></td></tr></table></figure></p>\n<p><h2>方法</h2></p>\n<ul>\n<li>方法名应该以小写字母或者下划线开头</li>\n<li>方法名可以以？、！、或者=号结尾</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"params\">(arg1, arg2)</span></span></div><div class=\"line\">  puts arg1, arg2</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"params\">(arg1 = <span class=\"string\">\"arg1\"</span>, arg2 = <span class=\"string\">\"arg2\"</span>)</span></span></div><div class=\"line\">  puts arg1, arg2</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">my_method           <span class=\"comment\"># \"arg1, arg2\"</span></div><div class=\"line\">my_method(<span class=\"string\">\"hi\"</span>)          <span class=\"comment\"># \"hi, arg2\"</span></div><div class=\"line\">my_method(<span class=\"string\">\"hi\"</span>, <span class=\"string\">\"world\"</span>) <span class=\"comment\"># \"hi, world\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"params\">(arg1, *rest)</span></span></div><div class=\"line\">  puts <span class=\"string\">\"arg1 = <span class=\"subst\">#&#123;arg1&#125;</span>, rest = <span class=\"subst\">#&#123;rest.inspect&#125;</span>\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"params\">(first, *, last)</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"params\">(params)</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">my_method(<span class=\"symbol\">:arg1</span> =&gt; <span class=\"string\">\"arg1\"</span>, <span class=\"symbol\">:arg2</span> =&gt; <span class=\"string\">\"arg2\"</span>)</div><div class=\"line\">my_method(&#123;<span class=\"symbol\">:arg1</span> =&gt; <span class=\"string\">\"arg1\"</span>, <span class=\"symbol\">:arg2</span> =&gt; <span class=\"string\">\"arg2\"</span>&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"params\">(arg)</span></span></div><div class=\"line\">  <span class=\"keyword\">if</span> block_given?</div><div class=\"line\">    <span class=\"keyword\">yield</span>(arg)</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">    puts <span class=\"string\">\"no block given\"</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span> <span class=\"params\">(arg, &amp;block)</span></span></div><div class=\"line\">  block.call(arg)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">my_method(<span class=\"string\">\"hi\"</span>)&#123;<span class=\"params\">|a|</span> p a&#125;</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"ruby基本语法3","date":"2016-03-17T09:40:04.000Z","_content":"ruby基本语法3\n<!-- more -->\n\n<h3>类的定义</h3>\n```ruby\nclass Point\n  attr_accessor :x\n  attr_reader :y\n  \n  @@origin = 0\n  ORIGIN = 2\n  \n  def initialize(x = 0, y = 0)\n    @x, @y = x, y\n  end\n  \n  def another_method\n\n  end\n  \n  def first_quarant?\n    x > 0 && y > 0\n  end\n  \n  def +(p2)\n    Point.new(x + p2.x, y + p2.y)\n  end\n  \n  def second_quarant?(x, y)\n      x < 0 && y > 0\n  end\n  \n  class << self\n    def foo\n    end\n    def bar\n    end\n    def wat\n    end\n  end\nend\n```\n\n<h3>类的继承</h3>\n```ruby\nclass Point3D < Point\n  def initialize(x = 0, y = 0, z = 0)\n    @x, @y, @z = x, y, z\n  end\n  \n  def initialize(x = 0, y = 0, z = 0)\n    super(x, y)\n    @z = z\n  end\n    \n  def initialize(x = 0, y = 0, z = 0)\n    super\n  end\n  \nend \n```\n\n<h3>模块</h3>\n+ include:mixin module instance methods as class' instance methods\n+ extend:mixin module instance methods as class' class methods\n```ruby\nmodule Helper\n\nend\n\nclass Point\n  include Helper\nend\n\nclass Point\n  extend Helper\nend\n\nmodule Helper\n  def shfit_right(x, y, z = 0)\n  end\n  \n  def ClassMethods\n    def distance(obj1, obj2)\n      Math.sqrt((obj1.x - obj2.x)**2 + (obj1.y - obj2.y)**2)\n    end\n  end\n  \n  def self.included(klass)\n    klass.extend ClassMethods\n  end\nend\n```\n```ruby\nmodule Lib\n  BUCKETS = [0, 1000, 10_000, 50_000, 100_000]\n  def annual_fee\n    case balance\n      when BUCKETS[0]...BUCKETS[1]\n        10\n      when BUCKETS[1]...BUCKETS[2]\n        5\n      when BUCKETS[2]...BUCKETS[3]\n        3\n      else\n        0\n    end\n  end\nend\n```\n<h3>exception</h3>\n\n```ruby\ndef factorial(n)\n  raise TypeError unless n.is_a? Integer\n  raise ArgumentError if n < 1\n  return 1 if n == 1\n  n * factorial(n-1)\nend\n\nbegin\n  x = factorial(1)\nrescue ArgumentError => e\n  puts 'try again with a value >= 1'\nrescue TypeError => e\n  puts 'try again with an integer'\nelse\n  puts x\nensure\n  puts 'the process of factorial calculation is completed'\nend\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/ruby基本语法3.md","raw":"---\ntitle: ruby基本语法3\ndate: 2016-03-17 17:40:04\ncategories: ruby\ntags: [ruby]\n---\nruby基本语法3\n<!-- more -->\n\n<h3>类的定义</h3>\n```ruby\nclass Point\n  attr_accessor :x\n  attr_reader :y\n  \n  @@origin = 0\n  ORIGIN = 2\n  \n  def initialize(x = 0, y = 0)\n    @x, @y = x, y\n  end\n  \n  def another_method\n\n  end\n  \n  def first_quarant?\n    x > 0 && y > 0\n  end\n  \n  def +(p2)\n    Point.new(x + p2.x, y + p2.y)\n  end\n  \n  def second_quarant?(x, y)\n      x < 0 && y > 0\n  end\n  \n  class << self\n    def foo\n    end\n    def bar\n    end\n    def wat\n    end\n  end\nend\n```\n\n<h3>类的继承</h3>\n```ruby\nclass Point3D < Point\n  def initialize(x = 0, y = 0, z = 0)\n    @x, @y, @z = x, y, z\n  end\n  \n  def initialize(x = 0, y = 0, z = 0)\n    super(x, y)\n    @z = z\n  end\n    \n  def initialize(x = 0, y = 0, z = 0)\n    super\n  end\n  \nend \n```\n\n<h3>模块</h3>\n+ include:mixin module instance methods as class' instance methods\n+ extend:mixin module instance methods as class' class methods\n```ruby\nmodule Helper\n\nend\n\nclass Point\n  include Helper\nend\n\nclass Point\n  extend Helper\nend\n\nmodule Helper\n  def shfit_right(x, y, z = 0)\n  end\n  \n  def ClassMethods\n    def distance(obj1, obj2)\n      Math.sqrt((obj1.x - obj2.x)**2 + (obj1.y - obj2.y)**2)\n    end\n  end\n  \n  def self.included(klass)\n    klass.extend ClassMethods\n  end\nend\n```\n```ruby\nmodule Lib\n  BUCKETS = [0, 1000, 10_000, 50_000, 100_000]\n  def annual_fee\n    case balance\n      when BUCKETS[0]...BUCKETS[1]\n        10\n      when BUCKETS[1]...BUCKETS[2]\n        5\n      when BUCKETS[2]...BUCKETS[3]\n        3\n      else\n        0\n    end\n  end\nend\n```\n<h3>exception</h3>\n\n```ruby\ndef factorial(n)\n  raise TypeError unless n.is_a? Integer\n  raise ArgumentError if n < 1\n  return 1 if n == 1\n  n * factorial(n-1)\nend\n\nbegin\n  x = factorial(1)\nrescue ArgumentError => e\n  puts 'try again with a value >= 1'\nrescue TypeError => e\n  puts 'try again with an integer'\nelse\n  puts x\nensure\n  puts 'the process of factorial calculation is completed'\nend\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/ruby基本语法3","published":1,"updated":"2017-02-24T04:40:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9ab007921xwysrn9gf5","content":"<p>ruby基本语法3<br><a id=\"more\"></a></p>\n<h3>类的定义</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span></div><div class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:x</span></div><div class=\"line\">  <span class=\"keyword\">attr_reader</span> <span class=\"symbol\">:y</span></div><div class=\"line\">  </div><div class=\"line\">  @@origin = <span class=\"number\">0</span></div><div class=\"line\">  ORIGIN = <span class=\"number\">2</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>)</span></span></div><div class=\"line\">    @x, @y = x, y</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">another_method</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">first_quarant?</span></span></div><div class=\"line\">    x &gt; <span class=\"number\">0</span> &amp;&amp; y &gt; <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">+</span><span class=\"params\">(p2)</span></span></div><div class=\"line\">    Point.new(x + p2.x, y + p2.y)</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">second_quarant?</span><span class=\"params\">(x, y)</span></span></div><div class=\"line\">      x &lt; <span class=\"number\">0</span> &amp;&amp; y &gt; <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> &lt;&lt; self</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span></span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span></span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wat</span></span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><br><br><h3>类的继承</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point3D</span> &lt; Point</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>, z = <span class=\"number\">0</span>)</span></span></div><div class=\"line\">    @x, @y, @z = x, y, z</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>, z = <span class=\"number\">0</span>)</span></span></div><div class=\"line\">    <span class=\"keyword\">super</span>(x, y)</div><div class=\"line\">    @z = z</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">    </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>, z = <span class=\"number\">0</span>)</span></span></div><div class=\"line\">    <span class=\"keyword\">super</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><br><br><h3>模块</h3><br>+ include:mixin module instance methods as class’ instance methods<br>+ extend:mixin module instance methods as class’ class methods<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Helper</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span></div><div class=\"line\">  <span class=\"keyword\">include</span> Helper</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span></div><div class=\"line\">  extend Helper</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Helper</span></span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shfit_right</span><span class=\"params\">(x, y, z = <span class=\"number\">0</span>)</span></span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ClassMethods</span></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">distance</span><span class=\"params\">(obj1, obj2)</span></span></div><div class=\"line\">      Math.sqrt((obj1.x - obj2.x)**<span class=\"number\">2</span> + (obj1.y - obj2.y)**<span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">included</span><span class=\"params\">(klass)</span></span></div><div class=\"line\">    klass.extend ClassMethods</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><br><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Lib</span></span></div><div class=\"line\">  BUCKETS = [<span class=\"number\">0</span>, <span class=\"number\">1000</span>, <span class=\"number\">10_000</span>, <span class=\"number\">50_000</span>, <span class=\"number\">100_000</span>]</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">annual_fee</span></span></div><div class=\"line\">    <span class=\"keyword\">case</span> balance</div><div class=\"line\">      <span class=\"keyword\">when</span> BUCKETS[<span class=\"number\">0</span>]...BUCKETS[<span class=\"number\">1</span>]</div><div class=\"line\">        <span class=\"number\">10</span></div><div class=\"line\">      <span class=\"keyword\">when</span> BUCKETS[<span class=\"number\">1</span>]...BUCKETS[<span class=\"number\">2</span>]</div><div class=\"line\">        <span class=\"number\">5</span></div><div class=\"line\">      <span class=\"keyword\">when</span> BUCKETS[<span class=\"number\">2</span>]...BUCKETS[<span class=\"number\">3</span>]</div><div class=\"line\">        <span class=\"number\">3</span></div><div class=\"line\">      <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><br><br><h3>exception</h3>\n\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">factorial</span><span class=\"params\">(n)</span></span></div><div class=\"line\">  raise TypeError <span class=\"keyword\">unless</span> n.is_a? Integer</div><div class=\"line\">  raise ArgumentError <span class=\"keyword\">if</span> n &lt; <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span> <span class=\"keyword\">if</span> n == <span class=\"number\">1</span></div><div class=\"line\">  n * factorial(n-<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">begin</span></div><div class=\"line\">  x = factorial(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">rescue</span> ArgumentError =&gt; e</div><div class=\"line\">  puts <span class=\"string\">'try again with a value &gt;= 1'</span></div><div class=\"line\"><span class=\"keyword\">rescue</span> TypeError =&gt; e</div><div class=\"line\">  puts <span class=\"string\">'try again with an integer'</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">  puts x</div><div class=\"line\"><span class=\"keyword\">ensure</span></div><div class=\"line\">  puts <span class=\"string\">'the process of factorial calculation is completed'</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>ruby基本语法3<br>","more":"</p>\n<h3>类的定义</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span></div><div class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:x</span></div><div class=\"line\">  <span class=\"keyword\">attr_reader</span> <span class=\"symbol\">:y</span></div><div class=\"line\">  </div><div class=\"line\">  @@origin = <span class=\"number\">0</span></div><div class=\"line\">  ORIGIN = <span class=\"number\">2</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>)</span></span></div><div class=\"line\">    @x, @y = x, y</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">another_method</span></span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">first_quarant?</span></span></div><div class=\"line\">    x &gt; <span class=\"number\">0</span> &amp;&amp; y &gt; <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">+</span><span class=\"params\">(p2)</span></span></div><div class=\"line\">    Point.new(x + p2.x, y + p2.y)</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">second_quarant?</span><span class=\"params\">(x, y)</span></span></div><div class=\"line\">      x &lt; <span class=\"number\">0</span> &amp;&amp; y &gt; <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> &lt;&lt; self</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span></span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span></span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wat</span></span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><br><br><h3>类的继承</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point3D</span> &lt; Point</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>, z = <span class=\"number\">0</span>)</span></span></div><div class=\"line\">    @x, @y, @z = x, y, z</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>, z = <span class=\"number\">0</span>)</span></span></div><div class=\"line\">    <span class=\"keyword\">super</span>(x, y)</div><div class=\"line\">    @z = z</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">    </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>, z = <span class=\"number\">0</span>)</span></span></div><div class=\"line\">    <span class=\"keyword\">super</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><br><br><h3>模块</h3><br>+ include:mixin module instance methods as class’ instance methods<br>+ extend:mixin module instance methods as class’ class methods<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Helper</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span></div><div class=\"line\">  <span class=\"keyword\">include</span> Helper</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span></div><div class=\"line\">  extend Helper</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Helper</span></span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shfit_right</span><span class=\"params\">(x, y, z = <span class=\"number\">0</span>)</span></span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ClassMethods</span></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">distance</span><span class=\"params\">(obj1, obj2)</span></span></div><div class=\"line\">      Math.sqrt((obj1.x - obj2.x)**<span class=\"number\">2</span> + (obj1.y - obj2.y)**<span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">included</span><span class=\"params\">(klass)</span></span></div><div class=\"line\">    klass.extend ClassMethods</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><br><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Lib</span></span></div><div class=\"line\">  BUCKETS = [<span class=\"number\">0</span>, <span class=\"number\">1000</span>, <span class=\"number\">10_000</span>, <span class=\"number\">50_000</span>, <span class=\"number\">100_000</span>]</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">annual_fee</span></span></div><div class=\"line\">    <span class=\"keyword\">case</span> balance</div><div class=\"line\">      <span class=\"keyword\">when</span> BUCKETS[<span class=\"number\">0</span>]...BUCKETS[<span class=\"number\">1</span>]</div><div class=\"line\">        <span class=\"number\">10</span></div><div class=\"line\">      <span class=\"keyword\">when</span> BUCKETS[<span class=\"number\">1</span>]...BUCKETS[<span class=\"number\">2</span>]</div><div class=\"line\">        <span class=\"number\">5</span></div><div class=\"line\">      <span class=\"keyword\">when</span> BUCKETS[<span class=\"number\">2</span>]...BUCKETS[<span class=\"number\">3</span>]</div><div class=\"line\">        <span class=\"number\">3</span></div><div class=\"line\">      <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><br><br><h3>exception</h3>\n\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">factorial</span><span class=\"params\">(n)</span></span></div><div class=\"line\">  raise TypeError <span class=\"keyword\">unless</span> n.is_a? Integer</div><div class=\"line\">  raise ArgumentError <span class=\"keyword\">if</span> n &lt; <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span> <span class=\"keyword\">if</span> n == <span class=\"number\">1</span></div><div class=\"line\">  n * factorial(n-<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">begin</span></div><div class=\"line\">  x = factorial(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">rescue</span> ArgumentError =&gt; e</div><div class=\"line\">  puts <span class=\"string\">'try again with a value &gt;= 1'</span></div><div class=\"line\"><span class=\"keyword\">rescue</span> TypeError =&gt; e</div><div class=\"line\">  puts <span class=\"string\">'try again with an integer'</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">  puts x</div><div class=\"line\"><span class=\"keyword\">ensure</span></div><div class=\"line\">  puts <span class=\"string\">'the process of factorial calculation is completed'</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"ruby属性","date":"2017-02-24T03:19:26.000Z","_content":"ruby中attr_accessor，attr_reader，attr_writer\n<!-- more -->\n<h3>attr_accessor</h3>\n```ruby\n  attr_accessor :x\n  def x\n    @x\n  end\n\n  def x=(x)\n    @x = x\n  end\n```\n<h3>attr_reader</h3>\n```ruby\n  attr_reader :x\n  def x\n    @x\n  end\n```\n<h3>attr_writer</h3>\n```ruby\n  attr_writer :x\n  def x=(x)\n    @x = x\n  end\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/ruby属性.md","raw":"---\ntitle: ruby属性\ndate: 2017-02-24 11:19:26\ncategories: [ruby]\ntags: [ruby]\n---\nruby中attr_accessor，attr_reader，attr_writer\n<!-- more -->\n<h3>attr_accessor</h3>\n```ruby\n  attr_accessor :x\n  def x\n    @x\n  end\n\n  def x=(x)\n    @x = x\n  end\n```\n<h3>attr_reader</h3>\n```ruby\n  attr_reader :x\n  def x\n    @x\n  end\n```\n<h3>attr_writer</h3>\n```ruby\n  attr_writer :x\n  def x=(x)\n    @x = x\n  end\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/ruby属性","published":1,"updated":"2017-02-24T03:24:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9ac007d21xw7zdx1e2c","content":"<p>ruby中attr_accessor，attr_reader，attr_writer<br><a id=\"more\"></a></p>\n<p></p><h3>attr_accessor</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:x</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x</span></span></div><div class=\"line\">  @x</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x=</span><span class=\"params\">(x)</span></span></div><div class=\"line\">  @x = x</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h3>attr_reader</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">attr_reader</span> <span class=\"symbol\">:x</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x</span></span></div><div class=\"line\">  @x</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h3>attr_writer</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">attr_writer</span> <span class=\"symbol\">:x</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x=</span><span class=\"params\">(x)</span></span></div><div class=\"line\">  @x = x</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure><p></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>ruby中attr_accessor，attr_reader，attr_writer<br>","more":"</p>\n<p><h3>attr_accessor</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:x</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x</span></span></div><div class=\"line\">  @x</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x=</span><span class=\"params\">(x)</span></span></div><div class=\"line\">  @x = x</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p><h3>attr_reader</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">attr_reader</span> <span class=\"symbol\">:x</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x</span></span></div><div class=\"line\">  @x</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p><h3>attr_writer</h3><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">attr_writer</span> <span class=\"symbol\">:x</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">x=</span><span class=\"params\">(x)</span></span></div><div class=\"line\">  @x = x</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"ruby常用命令","date":"2016-04-17T08:51:32.000Z","_content":"ruby常用命令\n<!-- more -->\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/ruby常用命令.md","raw":"---\ntitle: ruby常用命令\ndate: 2016-04-17 16:51:32\ncategories: ruby\ntags: [ruby]\n---\nruby常用命令\n<!-- more -->\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/ruby常用命令","published":1,"updated":"2017-01-05T02:43:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9ad007g21xwqh3le3ps","content":"<p>ruby常用命令<br><a id=\"more\"></a></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>ruby常用命令<br>","more":"</p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"ruby正则","date":"2016-03-14T03:00:05.000Z","_content":"ruby正则\n<!-- more -->\n\n<h2>新建正则</h2>\n```ruby\na = Regexp.new('abcd') \nb = /abcd/\nc = %r{abcd}\n```\n\n<h2>匹配正则</h2>\n```ruby\na =~ \"abcdefg\"\n\na =~ \"abcdefg\" #0\na.match \"abcdefg\" #<MatchData \"abcd\">\n```\n<h2>正则修饰符</h2>\n用于控制匹配结果的特殊字符\n+ i 忽略大小写\n+ m 匹配多行\n+ x 多行编辑+注释模式\n+ u e s n 控制编码\n\n[http://regexr.com](http://regexr.com)\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/ruby正则.md","raw":"---\ntitle: ruby正则\ndate: 2016-03-14 11:00:05\ncategories: ruby\ntags: [ruby,rails]\n---\nruby正则\n<!-- more -->\n\n<h2>新建正则</h2>\n```ruby\na = Regexp.new('abcd') \nb = /abcd/\nc = %r{abcd}\n```\n\n<h2>匹配正则</h2>\n```ruby\na =~ \"abcdefg\"\n\na =~ \"abcdefg\" #0\na.match \"abcdefg\" #<MatchData \"abcd\">\n```\n<h2>正则修饰符</h2>\n用于控制匹配结果的特殊字符\n+ i 忽略大小写\n+ m 匹配多行\n+ x 多行编辑+注释模式\n+ u e s n 控制编码\n\n[http://regexr.com](http://regexr.com)\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/ruby正则","published":1,"updated":"2017-01-04T09:46:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9ae007k21xwxvouo5ia","content":"<p>ruby正则<br><a id=\"more\"></a></p>\n<p></p><h2>新建正则</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = Regexp.new(<span class=\"string\">'abcd'</span>) </div><div class=\"line\">b = <span class=\"regexp\">/abcd/</span></div><div class=\"line\">c = <span class=\"regexp\">%r&#123;abcd&#125;</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h2>匹配正则</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">a =~ <span class=\"string\">\"abcdefg\"</span></div><div class=\"line\"></div><div class=\"line\">a =~ <span class=\"string\">\"abcdefg\"</span> <span class=\"comment\">#0</span></div><div class=\"line\">a.match <span class=\"string\">\"abcdefg\"</span> <span class=\"comment\">#&lt;MatchData \"abcd\"&gt;</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h2>正则修饰符</h2><br>用于控制匹配结果的特殊字符<p></p>\n<ul>\n<li>i 忽略大小写</li>\n<li>m 匹配多行</li>\n<li>x 多行编辑+注释模式</li>\n<li>u e s n 控制编码</li>\n</ul>\n<p><a href=\"http://regexr.com\" target=\"_blank\" rel=\"external\">http://regexr.com</a></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>ruby正则<br>","more":"</p>\n<p><h2>新建正则</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = Regexp.new(<span class=\"string\">'abcd'</span>) </div><div class=\"line\">b = <span class=\"regexp\">/abcd/</span></div><div class=\"line\">c = <span class=\"regexp\">%r&#123;abcd&#125;</span></div></pre></td></tr></table></figure></p>\n<p><h2>匹配正则</h2><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">a =~ <span class=\"string\">\"abcdefg\"</span></div><div class=\"line\"></div><div class=\"line\">a =~ <span class=\"string\">\"abcdefg\"</span> <span class=\"comment\">#0</span></div><div class=\"line\">a.match <span class=\"string\">\"abcdefg\"</span> <span class=\"comment\">#&lt;MatchData \"abcd\"&gt;</span></div></pre></td></tr></table></figure></p>\n<p><h2>正则修饰符</h2><br>用于控制匹配结果的特殊字符</p>\n<ul>\n<li>i 忽略大小写</li>\n<li>m 匹配多行</li>\n<li>x 多行编辑+注释模式</li>\n<li>u e s n 控制编码</li>\n</ul>\n<p><a href=\"http://regexr.com\">http://regexr.com</a></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"ruby调试","date":"2016-04-14T06:54:51.000Z","_content":"ruby调试\n<!-- more -->\n```markdown\n 引入调试\n ruby -r debug filename \n \n 下一行 \n n\n \n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/ruby调试.md","raw":"---\ntitle: ruby调试\ndate: 2016-04-14 14:54:51\ncategories: ruby\ntags: [ruby]\n---\nruby调试\n<!-- more -->\n```markdown\n 引入调试\n ruby -r debug filename \n \n 下一行 \n n\n \n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/ruby调试","published":1,"updated":"2017-01-05T02:43:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9af007n21xwbj6vo438","content":"<p>ruby调试<br><a id=\"more\"></a><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">引入调试</div><div class=\"line\">ruby -r debug filename </div><div class=\"line\"></div><div class=\"line\">下一行 </div><div class=\"line\">n</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>ruby调试<br>","more":"<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">引入调试</div><div class=\"line\">ruby -r debug filename </div><div class=\"line\"></div><div class=\"line\">下一行 </div><div class=\"line\">n</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"rvm","date":"2017-02-04T05:40:59.000Z","_content":"rvm\n<!-- more -->\n\n<h2>Ruby 的安装与切换</h2>\n\n列出已知的 Ruby 版本\n```ruby\nrvm list known\n```\n\n安装一个 Ruby 版本\n```ruby\nrvm install 2.2.0 --disable-binary\n```\n\n这里安装了最新的 2.2.0, rvm list known 列表里面的都可以拿来安装。\n\n切换 Ruby 版本\n```ruby\nrvm use 2.2.0\n```\n\n如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本\n```ruby\nrvm use 2.2.0 --default\n```\n查询已经安装的ruby\n```ruby\nrvm list\n```\n\n卸载一个已安装版本\n```ruby\nrvm remove 1.8.7\n```\n<h2>gemset</h2>\n列出当前 Ruby 的 gemset\n```ruby\nrvm gemset list\n```\n\n建立 gemset\n```ruby\nrvm use 1.8.7\nrvm gemset create rails23\n```\n\n删除一个 gemset\n```ruby\nrvm gemset delete rails2-3\n```\n\nuse 可以用来切换语言或者 gemset\n前提是他们已经被安装(或者建立)。并可以在 list 命令中看到。\n然后所有安装的 Gem 都是安装在这个 gemset 之下。\n```ruby\nrvm use 1.8.7\nrvm use 1.8.7@rails23\n```\n\n清空 gemset 中的 Gem\n如果你想清空一个 gemset 的所有 Gem, 想重新安装所有 Gem，可以这样\n```ruby\nrvm gemset empty 1.8.7@rails23\n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/rvm.md","raw":"---\ntitle: rvm\ndate: 2017-02-04 13:40:59\ncategories: ruby\ntags: [rvm] \n---\nrvm\n<!-- more -->\n\n<h2>Ruby 的安装与切换</h2>\n\n列出已知的 Ruby 版本\n```ruby\nrvm list known\n```\n\n安装一个 Ruby 版本\n```ruby\nrvm install 2.2.0 --disable-binary\n```\n\n这里安装了最新的 2.2.0, rvm list known 列表里面的都可以拿来安装。\n\n切换 Ruby 版本\n```ruby\nrvm use 2.2.0\n```\n\n如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本\n```ruby\nrvm use 2.2.0 --default\n```\n查询已经安装的ruby\n```ruby\nrvm list\n```\n\n卸载一个已安装版本\n```ruby\nrvm remove 1.8.7\n```\n<h2>gemset</h2>\n列出当前 Ruby 的 gemset\n```ruby\nrvm gemset list\n```\n\n建立 gemset\n```ruby\nrvm use 1.8.7\nrvm gemset create rails23\n```\n\n删除一个 gemset\n```ruby\nrvm gemset delete rails2-3\n```\n\nuse 可以用来切换语言或者 gemset\n前提是他们已经被安装(或者建立)。并可以在 list 命令中看到。\n然后所有安装的 Gem 都是安装在这个 gemset 之下。\n```ruby\nrvm use 1.8.7\nrvm use 1.8.7@rails23\n```\n\n清空 gemset 中的 Gem\n如果你想清空一个 gemset 的所有 Gem, 想重新安装所有 Gem，可以这样\n```ruby\nrvm gemset empty 1.8.7@rails23\n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/rvm","published":1,"updated":"2017-02-04T05:56:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9ag007r21xwzv9g8tf4","content":"<p>rvm<br><a id=\"more\"></a></p>\n<h2>Ruby 的安装与切换</h2>\n\n<p>列出已知的 Ruby 版本<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm list known</div></pre></td></tr></table></figure></p>\n<p>安装一个 Ruby 版本<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm install <span class=\"number\">2.2</span>.<span class=\"number\">0</span> --disable-binary</div></pre></td></tr></table></figure></p>\n<p>这里安装了最新的 2.2.0, rvm list known 列表里面的都可以拿来安装。</p>\n<p>切换 Ruby 版本<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm use <span class=\"number\">2.2</span>.<span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<p>如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm use <span class=\"number\">2.2</span>.<span class=\"number\">0</span> --default</div></pre></td></tr></table></figure></p>\n<p>查询已经安装的ruby<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm list</div></pre></td></tr></table></figure></p>\n<p>卸载一个已安装版本<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm remove <span class=\"number\">1.8</span>.<span class=\"number\">7</span></div></pre></td></tr></table></figure></p>\n<p></p><h2>gemset</h2><br>列出当前 Ruby 的 gemset<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm gemset list</div></pre></td></tr></table></figure><p></p>\n<p>建立 gemset<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm use <span class=\"number\">1.8</span>.<span class=\"number\">7</span></div><div class=\"line\">rvm gemset create rails23</div></pre></td></tr></table></figure></p>\n<p>删除一个 gemset<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm gemset delete rails2-<span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<p>use 可以用来切换语言或者 gemset<br>前提是他们已经被安装(或者建立)。并可以在 list 命令中看到。<br>然后所有安装的 Gem 都是安装在这个 gemset 之下。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm use <span class=\"number\">1.8</span>.<span class=\"number\">7</span></div><div class=\"line\">rvm use <span class=\"number\">1.8</span>.<span class=\"number\">7</span>@rails23</div></pre></td></tr></table></figure></p>\n<p>清空 gemset 中的 Gem<br>如果你想清空一个 gemset 的所有 Gem, 想重新安装所有 Gem，可以这样<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm gemset empty <span class=\"number\">1.8</span>.<span class=\"number\">7</span>@rails23</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>rvm<br>","more":"</p>\n<h2>Ruby 的安装与切换</h2>\n\n<p>列出已知的 Ruby 版本<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm list known</div></pre></td></tr></table></figure></p>\n<p>安装一个 Ruby 版本<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm install <span class=\"number\">2.2</span>.<span class=\"number\">0</span> --disable-binary</div></pre></td></tr></table></figure></p>\n<p>这里安装了最新的 2.2.0, rvm list known 列表里面的都可以拿来安装。</p>\n<p>切换 Ruby 版本<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm use <span class=\"number\">2.2</span>.<span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<p>如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm use <span class=\"number\">2.2</span>.<span class=\"number\">0</span> --default</div></pre></td></tr></table></figure></p>\n<p>查询已经安装的ruby<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm list</div></pre></td></tr></table></figure></p>\n<p>卸载一个已安装版本<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm remove <span class=\"number\">1.8</span>.<span class=\"number\">7</span></div></pre></td></tr></table></figure></p>\n<p><h2>gemset</h2><br>列出当前 Ruby 的 gemset<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm gemset list</div></pre></td></tr></table></figure></p>\n<p>建立 gemset<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm use <span class=\"number\">1.8</span>.<span class=\"number\">7</span></div><div class=\"line\">rvm gemset create rails23</div></pre></td></tr></table></figure></p>\n<p>删除一个 gemset<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm gemset delete rails2-<span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<p>use 可以用来切换语言或者 gemset<br>前提是他们已经被安装(或者建立)。并可以在 list 命令中看到。<br>然后所有安装的 Gem 都是安装在这个 gemset 之下。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm use <span class=\"number\">1.8</span>.<span class=\"number\">7</span></div><div class=\"line\">rvm use <span class=\"number\">1.8</span>.<span class=\"number\">7</span>@rails23</div></pre></td></tr></table></figure></p>\n<p>清空 gemset 中的 Gem<br>如果你想清空一个 gemset 的所有 Gem, 想重新安装所有 Gem，可以这样<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rvm gemset empty <span class=\"number\">1.8</span>.<span class=\"number\">7</span>@rails23</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"用string或symbol访问hash","date":"2017-01-04T05:53:37.000Z","_content":"用string或symbol访问hash\n<!-- more -->\nAccessing a hash with either string or symbol keys\nFor a normal Ruby hash, the following code is true:\n```ruby\nx = {\"key1\" => \"value1\"}\nx[\"key1\"] #=> \"value1\"\nx[:key1] #=> nil\n```\nWhat if we want to use either x[:key1] or x[\"key1\"] and get the same result?\nRails gives us a new Hash called HashWithIndifferentAccess that does just that. If we have a normal hash and we want to convert it into HashWithIndifferentAccess, we do the following:\n```ruby\nx = {\"key1\" => \"val1\"}\nx = x.with_indifferent_access\nx[:key1] #=> \"val1\"\nx[\"key1\"] #=> \"val1\"\n```\nTo instantiate a HashWithIndifferentAccess from the beginning we do the following:\n```ruby\nx = HashWithIndifferentAccess.new #=> {}\n```\n\n将hash中string类型的key全部转为symbol\n```ruby\nhash = {\"apple\" => \"banana\", \"coconut\" => \"domino\"}\nhash = Hash[hash.map{ |k, v| [k.to_sym, v] }]\n```\n将hash中string类型的key全部转为symbol\n```ruby\nhash.deep_symbolize_keys\nhash.deep_symbolize_keys!\n```\n将hash中symbol类型的key全部转为string\n```ruby\nhash.deep_stringify_keys\nhash.deep_stringify_keys!\n```\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/ruby/用string或symbol访问hash.md","raw":"---\ntitle: 用string或symbol访问hash\ndate: 2017-01-04 13:53:37\ncategories: ruby\ntags: [ruby,rails]\n---\n用string或symbol访问hash\n<!-- more -->\nAccessing a hash with either string or symbol keys\nFor a normal Ruby hash, the following code is true:\n```ruby\nx = {\"key1\" => \"value1\"}\nx[\"key1\"] #=> \"value1\"\nx[:key1] #=> nil\n```\nWhat if we want to use either x[:key1] or x[\"key1\"] and get the same result?\nRails gives us a new Hash called HashWithIndifferentAccess that does just that. If we have a normal hash and we want to convert it into HashWithIndifferentAccess, we do the following:\n```ruby\nx = {\"key1\" => \"val1\"}\nx = x.with_indifferent_access\nx[:key1] #=> \"val1\"\nx[\"key1\"] #=> \"val1\"\n```\nTo instantiate a HashWithIndifferentAccess from the beginning we do the following:\n```ruby\nx = HashWithIndifferentAccess.new #=> {}\n```\n\n将hash中string类型的key全部转为symbol\n```ruby\nhash = {\"apple\" => \"banana\", \"coconut\" => \"domino\"}\nhash = Hash[hash.map{ |k, v| [k.to_sym, v] }]\n```\n将hash中string类型的key全部转为symbol\n```ruby\nhash.deep_symbolize_keys\nhash.deep_symbolize_keys!\n```\n将hash中symbol类型的key全部转为string\n```ruby\nhash.deep_stringify_keys\nhash.deep_stringify_keys!\n```\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"ruby/用string或symbol访问hash","published":1,"updated":"2017-02-22T08:10:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9ah007u21xwvc7noqaz","content":"<p>用string或symbol访问hash<br><a id=\"more\"></a><br>Accessing a hash with either string or symbol keys<br>For a normal Ruby hash, the following code is true:<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = &#123;<span class=\"string\">\"key1\"</span> =&gt; <span class=\"string\">\"value1\"</span>&#125;</div><div class=\"line\">x[<span class=\"string\">\"key1\"</span>] <span class=\"comment\">#=&gt; \"value1\"</span></div><div class=\"line\">x[<span class=\"symbol\">:key1</span>] <span class=\"comment\">#=&gt; nil</span></div></pre></td></tr></table></figure></p>\n<p>What if we want to use either x[:key1] or x[“key1”] and get the same result?<br>Rails gives us a new Hash called HashWithIndifferentAccess that does just that. If we have a normal hash and we want to convert it into HashWithIndifferentAccess, we do the following:<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = &#123;<span class=\"string\">\"key1\"</span> =&gt; <span class=\"string\">\"val1\"</span>&#125;</div><div class=\"line\">x = x.with_indifferent_access</div><div class=\"line\">x[<span class=\"symbol\">:key1</span>] <span class=\"comment\">#=&gt; \"val1\"</span></div><div class=\"line\">x[<span class=\"string\">\"key1\"</span>] <span class=\"comment\">#=&gt; \"val1\"</span></div></pre></td></tr></table></figure></p>\n<p>To instantiate a HashWithIndifferentAccess from the beginning we do the following:<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = HashWithIndifferentAccess.new <span class=\"comment\">#=&gt; &#123;&#125;</span></div></pre></td></tr></table></figure></p>\n<p>将hash中string类型的key全部转为symbol<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hash = &#123;<span class=\"string\">\"apple\"</span> =&gt; <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"coconut\"</span> =&gt; <span class=\"string\">\"domino\"</span>&#125;</div><div class=\"line\">hash = Hash[hash.map&#123; <span class=\"params\">|k, v|</span> [k.to_sym, v] &#125;]</div></pre></td></tr></table></figure></p>\n<p>将hash中string类型的key全部转为symbol<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hash.deep_symbolize_keys</div><div class=\"line\">hash.deep_symbolize_keys!</div></pre></td></tr></table></figure></p>\n<p>将hash中symbol类型的key全部转为string<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hash.deep_stringify_keys</div><div class=\"line\">hash.deep_stringify_keys!</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>用string或symbol访问hash<br>","more":"<br>Accessing a hash with either string or symbol keys<br>For a normal Ruby hash, the following code is true:<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = &#123;<span class=\"string\">\"key1\"</span> =&gt; <span class=\"string\">\"value1\"</span>&#125;</div><div class=\"line\">x[<span class=\"string\">\"key1\"</span>] <span class=\"comment\">#=&gt; \"value1\"</span></div><div class=\"line\">x[<span class=\"symbol\">:key1</span>] <span class=\"comment\">#=&gt; nil</span></div></pre></td></tr></table></figure></p>\n<p>What if we want to use either x[:key1] or x[“key1”] and get the same result?<br>Rails gives us a new Hash called HashWithIndifferentAccess that does just that. If we have a normal hash and we want to convert it into HashWithIndifferentAccess, we do the following:<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = &#123;<span class=\"string\">\"key1\"</span> =&gt; <span class=\"string\">\"val1\"</span>&#125;</div><div class=\"line\">x = x.with_indifferent_access</div><div class=\"line\">x[<span class=\"symbol\">:key1</span>] <span class=\"comment\">#=&gt; \"val1\"</span></div><div class=\"line\">x[<span class=\"string\">\"key1\"</span>] <span class=\"comment\">#=&gt; \"val1\"</span></div></pre></td></tr></table></figure></p>\n<p>To instantiate a HashWithIndifferentAccess from the beginning we do the following:<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = HashWithIndifferentAccess.new <span class=\"comment\">#=&gt; &#123;&#125;</span></div></pre></td></tr></table></figure></p>\n<p>将hash中string类型的key全部转为symbol<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hash = &#123;<span class=\"string\">\"apple\"</span> =&gt; <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"coconut\"</span> =&gt; <span class=\"string\">\"domino\"</span>&#125;</div><div class=\"line\">hash = Hash[hash.map&#123; <span class=\"params\">|k, v|</span> [k.to_sym, v] &#125;]</div></pre></td></tr></table></figure></p>\n<p>将hash中string类型的key全部转为symbol<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hash.deep_symbolize_keys</div><div class=\"line\">hash.deep_symbolize_keys!</div></pre></td></tr></table></figure></p>\n<p>将hash中symbol类型的key全部转为string<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hash.deep_stringify_keys</div><div class=\"line\">hash.deep_stringify_keys!</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"wifi","date":"2017-03-22T09:04:20.000Z","_content":"wifi\n<!-- more -->\n<h3>查看局域网内所有的ip</h3>\n```bash\nfping -asg 192.168.0.1/24\n```\n例出局域网中存活的主机\n```bash\nfping -asg 192.168.0.1/24 2>dev/null\n```\n\n<h3>arp断网</h3>\n```bash\narpspoof -i 网卡 -t 目标ip 网关\n```\n```bash\narpspoof -i eth0 -t 192.168.0.151 192.168.0.1\n```\n从网关出去\n```bash\necho 1 >/proc/sys/net/ipv4/ip_forward\n```\n\n<h3>获取本机网卡的图片信息</h3>\n```bash\ndriftnet -i eth0\n```\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/security/wifi.md","raw":"---\ntitle: wifi\ndate: 2017-03-22 17:04:20\ncategories: [Security]\ntags: [Security]\n---\nwifi\n<!-- more -->\n<h3>查看局域网内所有的ip</h3>\n```bash\nfping -asg 192.168.0.1/24\n```\n例出局域网中存活的主机\n```bash\nfping -asg 192.168.0.1/24 2>dev/null\n```\n\n<h3>arp断网</h3>\n```bash\narpspoof -i 网卡 -t 目标ip 网关\n```\n```bash\narpspoof -i eth0 -t 192.168.0.151 192.168.0.1\n```\n从网关出去\n```bash\necho 1 >/proc/sys/net/ipv4/ip_forward\n```\n\n<h3>获取本机网卡的图片信息</h3>\n```bash\ndriftnet -i eth0\n```\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"security/wifi","published":1,"updated":"2017-03-28T07:20:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9ai007y21xwhqawb7fv","content":"<p>wifi<br><a id=\"more\"></a></p>\n<p></p><h3>查看局域网内所有的ip</h3><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fping -asg 192.168.0.1/24</div></pre></td></tr></table></figure><p></p>\n<p>例出局域网中存活的主机<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fping -asg 192.168.0.1/24 2&gt;dev/null</div></pre></td></tr></table></figure></p>\n<p></p><h3>arp断网</h3><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">arpspoof -i 网卡 -t 目标ip 网关</div></pre></td></tr></table></figure><p></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">arpspoof -i eth0 -t 192.168.0.151 192.168.0.1</div></pre></td></tr></table></figure>\n<p>从网关出去<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> 1 &gt;/proc/sys/net/ipv4/ip_forward</div></pre></td></tr></table></figure></p>\n<p></p><h3>获取本机网卡的图片信息</h3><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">driftnet -i eth0</div></pre></td></tr></table></figure><p></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>wifi<br>","more":"</p>\n<p><h3>查看局域网内所有的ip</h3><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fping -asg 192.168.0.1/24</div></pre></td></tr></table></figure></p>\n<p>例出局域网中存活的主机<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fping -asg 192.168.0.1/24 2&gt;dev/null</div></pre></td></tr></table></figure></p>\n<p><h3>arp断网</h3><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">arpspoof -i 网卡 -t 目标ip 网关</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">arpspoof -i eth0 -t 192.168.0.151 192.168.0.1</div></pre></td></tr></table></figure>\n<p>从网关出去<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> 1 &gt;/proc/sys/net/ipv4/ip_forward</div></pre></td></tr></table></figure></p>\n<p><h3>获取本机网卡的图片信息</h3><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">driftnet -i eth0</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"shell或bash中判断文件是否存在","date":"2016-10-08T03:39:45.000Z","_content":"<!-- more -->\n\n\nConditional Logic on Files\n-a file exists.\n-b file exists and is a block special file.\n-c file exists and is a character special file.\n-d file exists and is a directory.\n-e file exists (just the same as -a).\n-f file exists and is a regular file.\n-g file exists and has its setgid(2) bit set.\n-G file exists and has the same group ID as this process.\n-k file exists and has its sticky bit set.\n-L file exists and is a symbolic link.\n-n string length is not zero.\n-o Named option is set on.\n-O file exists and is owned by the user ID of this process.\n-p file exists and is a first in, first out (FIFO) special file or\nnamed pipe.\n-r file exists and is readable by the current process.\n-s file exists and has a size greater than zero.\n-S file exists and is a socket.\n-t file descriptor number fildes is open and associated with a\nterminal device.\n-u file exists and has its setuid(2) bit set.\n-w file exists and is writable by the current process.\n-x file exists and is executable by the current process.\n-z string length is zero.\n\nmyPath=\"/var/log/httpd/\"\nmyFile=\"/var /log/httpd/access.log\"\n# 这里的-x 参数判断$myPath是否存在并且是否具有可执行权限\nif [ ! -x \"$myPath\"]; then\n  mkdir \"$myPath\"\nfi\n# 这里的-d 参数判断$myPath是否存在\nif [ ! -d \"$myPath\"]; then\n mkdir \"$myPath\"\nfi\n# 这里的-f参数判断$myFile是否存在\nif [ ! -f \"$myFile\" ]; then\n touch \"$myFile\"\nfi\n# 其他参数还有-n,-n是判断一个变量是否是否有值\nif [ ! -n \"$myVar\" ]; then\n echo \"$myVar is empty\"\n exit 0\nfi\n# 两个变量判断是否相等\nif [ \"$var1\" = \"$var2\" ]; then\n echo '$var1 eq $var2'\nelse\n echo '$var1 not eq $var2'\nfi\n","source":"_posts/shell/判断文件是否存在的脚本语法.md","raw":"---\ntitle: shell或bash中判断文件是否存在\ndate: 2016-10-08 11:39:45\ncategories: linux\n---\n<!-- more -->\n\n\nConditional Logic on Files\n-a file exists.\n-b file exists and is a block special file.\n-c file exists and is a character special file.\n-d file exists and is a directory.\n-e file exists (just the same as -a).\n-f file exists and is a regular file.\n-g file exists and has its setgid(2) bit set.\n-G file exists and has the same group ID as this process.\n-k file exists and has its sticky bit set.\n-L file exists and is a symbolic link.\n-n string length is not zero.\n-o Named option is set on.\n-O file exists and is owned by the user ID of this process.\n-p file exists and is a first in, first out (FIFO) special file or\nnamed pipe.\n-r file exists and is readable by the current process.\n-s file exists and has a size greater than zero.\n-S file exists and is a socket.\n-t file descriptor number fildes is open and associated with a\nterminal device.\n-u file exists and has its setuid(2) bit set.\n-w file exists and is writable by the current process.\n-x file exists and is executable by the current process.\n-z string length is zero.\n\nmyPath=\"/var/log/httpd/\"\nmyFile=\"/var /log/httpd/access.log\"\n# 这里的-x 参数判断$myPath是否存在并且是否具有可执行权限\nif [ ! -x \"$myPath\"]; then\n  mkdir \"$myPath\"\nfi\n# 这里的-d 参数判断$myPath是否存在\nif [ ! -d \"$myPath\"]; then\n mkdir \"$myPath\"\nfi\n# 这里的-f参数判断$myFile是否存在\nif [ ! -f \"$myFile\" ]; then\n touch \"$myFile\"\nfi\n# 其他参数还有-n,-n是判断一个变量是否是否有值\nif [ ! -n \"$myVar\" ]; then\n echo \"$myVar is empty\"\n exit 0\nfi\n# 两个变量判断是否相等\nif [ \"$var1\" = \"$var2\" ]; then\n echo '$var1 eq $var2'\nelse\n echo '$var1 not eq $var2'\nfi\n","slug":"shell/判断文件是否存在的脚本语法","published":1,"updated":"2016-12-27T10:09:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9aj008121xwjo4uygch","content":"<a id=\"more\"></a>\n<p>Conditional Logic on Files<br>-a file exists.<br>-b file exists and is a block special file.<br>-c file exists and is a character special file.<br>-d file exists and is a directory.<br>-e file exists (just the same as -a).<br>-f file exists and is a regular file.<br>-g file exists and has its setgid(2) bit set.<br>-G file exists and has the same group ID as this process.<br>-k file exists and has its sticky bit set.<br>-L file exists and is a symbolic link.<br>-n string length is not zero.<br>-o Named option is set on.<br>-O file exists and is owned by the user ID of this process.<br>-p file exists and is a first in, first out (FIFO) special file or<br>named pipe.<br>-r file exists and is readable by the current process.<br>-s file exists and has a size greater than zero.<br>-S file exists and is a socket.<br>-t file descriptor number fildes is open and associated with a<br>terminal device.<br>-u file exists and has its setuid(2) bit set.<br>-w file exists and is writable by the current process.<br>-x file exists and is executable by the current process.<br>-z string length is zero.</p>\n<p>myPath=”/var/log/httpd/“<br>myFile=”/var /log/httpd/access.log”</p>\n<h1 id=\"这里的-x-参数判断-myPath是否存在并且是否具有可执行权限\"><a href=\"#这里的-x-参数判断-myPath是否存在并且是否具有可执行权限\" class=\"headerlink\" title=\"这里的-x 参数判断$myPath是否存在并且是否具有可执行权限\"></a>这里的-x 参数判断$myPath是否存在并且是否具有可执行权限</h1><p>if [ ! -x “$myPath”]; then<br>  mkdir “$myPath”<br>fi</p>\n<h1 id=\"这里的-d-参数判断-myPath是否存在\"><a href=\"#这里的-d-参数判断-myPath是否存在\" class=\"headerlink\" title=\"这里的-d 参数判断$myPath是否存在\"></a>这里的-d 参数判断$myPath是否存在</h1><p>if [ ! -d “$myPath”]; then<br> mkdir “$myPath”<br>fi</p>\n<h1 id=\"这里的-f参数判断-myFile是否存在\"><a href=\"#这里的-f参数判断-myFile是否存在\" class=\"headerlink\" title=\"这里的-f参数判断$myFile是否存在\"></a>这里的-f参数判断$myFile是否存在</h1><p>if [ ! -f “$myFile” ]; then<br> touch “$myFile”<br>fi</p>\n<h1 id=\"其他参数还有-n-n是判断一个变量是否是否有值\"><a href=\"#其他参数还有-n-n是判断一个变量是否是否有值\" class=\"headerlink\" title=\"其他参数还有-n,-n是判断一个变量是否是否有值\"></a>其他参数还有-n,-n是判断一个变量是否是否有值</h1><p>if [ ! -n “$myVar” ]; then<br> echo “$myVar is empty”<br> exit 0<br>fi</p>\n<h1 id=\"两个变量判断是否相等\"><a href=\"#两个变量判断是否相等\" class=\"headerlink\" title=\"两个变量判断是否相等\"></a>两个变量判断是否相等</h1><p>if [ “$var1” = “$var2” ]; then<br> echo ‘$var1 eq $var2’<br>else<br> echo ‘$var1 not eq $var2’<br>fi</p>\n","excerpt":"","more":"<p>Conditional Logic on Files<br>-a file exists.<br>-b file exists and is a block special file.<br>-c file exists and is a character special file.<br>-d file exists and is a directory.<br>-e file exists (just the same as -a).<br>-f file exists and is a regular file.<br>-g file exists and has its setgid(2) bit set.<br>-G file exists and has the same group ID as this process.<br>-k file exists and has its sticky bit set.<br>-L file exists and is a symbolic link.<br>-n string length is not zero.<br>-o Named option is set on.<br>-O file exists and is owned by the user ID of this process.<br>-p file exists and is a first in, first out (FIFO) special file or<br>named pipe.<br>-r file exists and is readable by the current process.<br>-s file exists and has a size greater than zero.<br>-S file exists and is a socket.<br>-t file descriptor number fildes is open and associated with a<br>terminal device.<br>-u file exists and has its setuid(2) bit set.<br>-w file exists and is writable by the current process.<br>-x file exists and is executable by the current process.<br>-z string length is zero.</p>\n<p>myPath=”/var/log/httpd/“<br>myFile=”/var /log/httpd/access.log”</p>\n<h1 id=\"这里的-x-参数判断-myPath是否存在并且是否具有可执行权限\"><a href=\"#这里的-x-参数判断-myPath是否存在并且是否具有可执行权限\" class=\"headerlink\" title=\"这里的-x 参数判断$myPath是否存在并且是否具有可执行权限\"></a>这里的-x 参数判断$myPath是否存在并且是否具有可执行权限</h1><p>if [ ! -x “$myPath”]; then<br>  mkdir “$myPath”<br>fi</p>\n<h1 id=\"这里的-d-参数判断-myPath是否存在\"><a href=\"#这里的-d-参数判断-myPath是否存在\" class=\"headerlink\" title=\"这里的-d 参数判断$myPath是否存在\"></a>这里的-d 参数判断$myPath是否存在</h1><p>if [ ! -d “$myPath”]; then<br> mkdir “$myPath”<br>fi</p>\n<h1 id=\"这里的-f参数判断-myFile是否存在\"><a href=\"#这里的-f参数判断-myFile是否存在\" class=\"headerlink\" title=\"这里的-f参数判断$myFile是否存在\"></a>这里的-f参数判断$myFile是否存在</h1><p>if [ ! -f “$myFile” ]; then<br> touch “$myFile”<br>fi</p>\n<h1 id=\"其他参数还有-n-n是判断一个变量是否是否有值\"><a href=\"#其他参数还有-n-n是判断一个变量是否是否有值\" class=\"headerlink\" title=\"其他参数还有-n,-n是判断一个变量是否是否有值\"></a>其他参数还有-n,-n是判断一个变量是否是否有值</h1><p>if [ ! -n “$myVar” ]; then<br> echo “$myVar is empty”<br> exit 0<br>fi</p>\n<h1 id=\"两个变量判断是否相等\"><a href=\"#两个变量判断是否相等\" class=\"headerlink\" title=\"两个变量判断是否相等\"></a>两个变量判断是否相等</h1><p>if [ “$var1” = “$var2” ]; then<br> echo ‘$var1 eq $var2’<br>else<br> echo ‘$var1 not eq $var2’<br>fi</p>"},{"title":"swift类型","date":"2016-07-20T02:09:39.000Z","_content":"swift类型\n<!-- more -->\n<h2>int</h2>\n\n```swift\nInt.max\nInt.min\nUInt.max\nUInt.min\nInt8.max\nInt8.min\nUInt8.max\nUInt8.min\nInt16.max\nInt16.min\nUInt16.max\nUInt16.min\nInt32.max\nInt32.min\nUInt32.max\nUInt32.min\nInt64.max\nInt64.min\nUInt64.max\nUInt64.min\n```\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/swift/swift类型.md","raw":"---\ntitle: swift类型\ndate: 2016-07-20 10:09:39\ncategories: swift\ntags: [swift]\n---\nswift类型\n<!-- more -->\n<h2>int</h2>\n\n```swift\nInt.max\nInt.min\nUInt.max\nUInt.min\nInt8.max\nInt8.min\nUInt8.max\nUInt8.min\nInt16.max\nInt16.min\nUInt16.max\nUInt16.min\nInt32.max\nInt32.min\nUInt32.max\nUInt32.min\nInt64.max\nInt64.min\nUInt64.max\nUInt64.min\n```\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"swift/swift类型","published":1,"updated":"2017-02-20T02:30:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9ak008621xwn07clixj","content":"<p>swift类型<br><a id=\"more\"></a></p>\n<h2>int</h2>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Int</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">Int</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">UInt</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">UInt</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">Int8</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">Int8</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">UInt8</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">UInt8</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">Int16</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">Int16</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">UInt16</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">UInt16</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">Int32</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">Int32</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">UInt32</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">UInt32</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">Int64</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">Int64</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">UInt64</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">UInt64</span>.<span class=\"built_in\">min</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>swift类型<br>","more":"</p>\n<h2>int</h2>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Int</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">Int</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">UInt</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">UInt</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">Int8</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">Int8</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">UInt8</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">UInt8</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">Int16</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">Int16</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">UInt16</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">UInt16</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">Int32</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">Int32</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">UInt32</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">UInt32</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">Int64</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">Int64</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"type\">UInt64</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"type\">UInt64</span>.<span class=\"built_in\">min</span></div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"linux网络管理","date":"2016-10-23T07:32:25.000Z","_content":"linux网络管理\n<!-- more -->\n\n<h2>iso/osi七层模型</h2>\n```mark\niso : 国际标准化组织\nosi : 开放系统互联模型\nios ：苹果操作系统\n```\n```mark\n                                    数据单位\n              应用层协议\n7  应用层   <------------->  应用层   APDU\n              表示层协议\n6  表示层   <------------->  表示层   PPDU\n              会话层协议\n5  会话层   <------------->  会话层   SPDU\n              传输层协议\n4  传输层   <------------->  传输层   TPDU\n              网络层协议\n3  网络层   <------------->  网络层    报文\n             数据链路层协议\n2 数据链路层 <-------------> 数据链路层  帧\n              物理层协议\n1  物理层   <------------->  物理层    比特\n```\n\n1 2 3 4 实际进行数据传输\n5 6 7   给用户提供服务的\n\nmac地址负责局域网通信\nip地址负责外网通信\n\n应用层：用户接口\n表示层：数据的表现形式、特定功能的实现如加密\n会话层：对应用会话的管理、同步\n传输层：可靠与不可靠的传输、传输前的错误检测、流控\n网络层：提供逻辑地址、选路\n数据链路层：成帧、用mac地址访问媒介、错误监测与纠正\n物理层：设备之间的比特流的传输、物理接口、电气特性等\n\n<h2>TCP/IP协议4层模型</h2>\n<h3>TCP/IP模型与OSI模型的对应</h3>\n```mark\nOSI7层模型  TCP/IP4层模型\n 应用层    |\n 表示层    }  应用层\n 会话层    |\n 传输层    }  传输层\n 网络层    }  网络互联层\n数据链路层  }  网络接口层\n 物理层    |\n```\n<h2>IP地址</h2>\n<h3>数据封装过程</h3>\n<img src=\"/images/37.png\" width=\"800\" height=\"406\" />\n\n<h3>IP包头</h3>\n<img src=\"/images/36.png\" width=\"800\" height=\"406\" />\n\n<h3>IP地址分类</h3>\n<img src=\"/images/38.png\" width=\"800\" height=\"406\" />\n\n\n<h2>端口号</h2>\n<h3>TCP协议包头</h3>\n<img src=\"/images/39.png\" width=\"800\" height=\"406\" />\n\n<h3>UDP协议包头</h3>\n<img src=\"/images/40.png\" width=\"800\" height=\"406\" />\n\n<h3>常见端口号</h3>\n<img src=\"/images/41.png\" width=\"800\" height=\"406\" />\n\n<h2>DNS</h2>\nDNS Domain Name System\n \n\n\n\n\n\n\n\n\n\n<h2>查看网络信息</h2>\n<h3>查看网络信息</h3>\n```mark\n# ifconfig\n```\n<h3>重启网络</h3>\n```mark\nsudo /etc/init.d/networking restart\n```\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/system/Ubuntu网络管理.md","raw":"---\ntitle: linux网络管理\ndate: 2016-10-23 15:32:25\ncategories: linux\n---\nlinux网络管理\n<!-- more -->\n\n<h2>iso/osi七层模型</h2>\n```mark\niso : 国际标准化组织\nosi : 开放系统互联模型\nios ：苹果操作系统\n```\n```mark\n                                    数据单位\n              应用层协议\n7  应用层   <------------->  应用层   APDU\n              表示层协议\n6  表示层   <------------->  表示层   PPDU\n              会话层协议\n5  会话层   <------------->  会话层   SPDU\n              传输层协议\n4  传输层   <------------->  传输层   TPDU\n              网络层协议\n3  网络层   <------------->  网络层    报文\n             数据链路层协议\n2 数据链路层 <-------------> 数据链路层  帧\n              物理层协议\n1  物理层   <------------->  物理层    比特\n```\n\n1 2 3 4 实际进行数据传输\n5 6 7   给用户提供服务的\n\nmac地址负责局域网通信\nip地址负责外网通信\n\n应用层：用户接口\n表示层：数据的表现形式、特定功能的实现如加密\n会话层：对应用会话的管理、同步\n传输层：可靠与不可靠的传输、传输前的错误检测、流控\n网络层：提供逻辑地址、选路\n数据链路层：成帧、用mac地址访问媒介、错误监测与纠正\n物理层：设备之间的比特流的传输、物理接口、电气特性等\n\n<h2>TCP/IP协议4层模型</h2>\n<h3>TCP/IP模型与OSI模型的对应</h3>\n```mark\nOSI7层模型  TCP/IP4层模型\n 应用层    |\n 表示层    }  应用层\n 会话层    |\n 传输层    }  传输层\n 网络层    }  网络互联层\n数据链路层  }  网络接口层\n 物理层    |\n```\n<h2>IP地址</h2>\n<h3>数据封装过程</h3>\n<img src=\"/images/37.png\" width=\"800\" height=\"406\" />\n\n<h3>IP包头</h3>\n<img src=\"/images/36.png\" width=\"800\" height=\"406\" />\n\n<h3>IP地址分类</h3>\n<img src=\"/images/38.png\" width=\"800\" height=\"406\" />\n\n\n<h2>端口号</h2>\n<h3>TCP协议包头</h3>\n<img src=\"/images/39.png\" width=\"800\" height=\"406\" />\n\n<h3>UDP协议包头</h3>\n<img src=\"/images/40.png\" width=\"800\" height=\"406\" />\n\n<h3>常见端口号</h3>\n<img src=\"/images/41.png\" width=\"800\" height=\"406\" />\n\n<h2>DNS</h2>\nDNS Domain Name System\n \n\n\n\n\n\n\n\n\n\n<h2>查看网络信息</h2>\n<h3>查看网络信息</h3>\n```mark\n# ifconfig\n```\n<h3>重启网络</h3>\n```mark\nsudo /etc/init.d/networking restart\n```\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"system/Ubuntu网络管理","published":1,"updated":"2016-10-24T05:22:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9al008921xw160mr9cg","content":"<p>linux网络管理<br><a id=\"more\"></a></p>\n<p></p><h2>iso/osi七层模型</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">iso : 国际标准化组织</div><div class=\"line\">osi : 开放系统互联模型</div><div class=\"line\">ios ：苹果操作系统</div></pre></td></tr></table></figure><p></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">                                    数据单位</div><div class=\"line\">              应用层协议</div><div class=\"line\">7  应用层   &lt;-------------&gt;  应用层   APDU</div><div class=\"line\">              表示层协议</div><div class=\"line\">6  表示层   &lt;-------------&gt;  表示层   PPDU</div><div class=\"line\">              会话层协议</div><div class=\"line\">5  会话层   &lt;-------------&gt;  会话层   SPDU</div><div class=\"line\">              传输层协议</div><div class=\"line\">4  传输层   &lt;-------------&gt;  传输层   TPDU</div><div class=\"line\">              网络层协议</div><div class=\"line\">3  网络层   &lt;-------------&gt;  网络层    报文</div><div class=\"line\">             数据链路层协议</div><div class=\"line\">2 数据链路层 &lt;-------------&gt; 数据链路层  帧</div><div class=\"line\">              物理层协议</div><div class=\"line\">1  物理层   &lt;-------------&gt;  物理层    比特</div></pre></td></tr></table></figure>\n<p>1 2 3 4 实际进行数据传输<br>5 6 7   给用户提供服务的</p>\n<p>mac地址负责局域网通信<br>ip地址负责外网通信</p>\n<p>应用层：用户接口<br>表示层：数据的表现形式、特定功能的实现如加密<br>会话层：对应用会话的管理、同步<br>传输层：可靠与不可靠的传输、传输前的错误检测、流控<br>网络层：提供逻辑地址、选路<br>数据链路层：成帧、用mac地址访问媒介、错误监测与纠正<br>物理层：设备之间的比特流的传输、物理接口、电气特性等</p>\n<p></p><h2>TCP/IP协议4层模型</h2><p></p>\n<p></p><h3>TCP/IP模型与OSI模型的对应</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">OSI7层模型  TCP/IP4层模型</div><div class=\"line\"> 应用层    |</div><div class=\"line\"> 表示层    &#125;  应用层</div><div class=\"line\"> 会话层    |</div><div class=\"line\"> 传输层    &#125;  传输层</div><div class=\"line\"> 网络层    &#125;  网络互联层</div><div class=\"line\">数据链路层  &#125;  网络接口层</div><div class=\"line\"> 物理层    |</div></pre></td></tr></table></figure><p></p>\n<p></p><h2>IP地址</h2><p></p>\n<p></p><h3>数据封装过程</h3><br><img src=\"/images/37.png\" width=\"800\" height=\"406\"><p></p>\n<p></p><h3>IP包头</h3><br><img src=\"/images/36.png\" width=\"800\" height=\"406\"><p></p>\n<p></p><h3>IP地址分类</h3><br><img src=\"/images/38.png\" width=\"800\" height=\"406\"><p></p>\n<p></p><h2>端口号</h2><p></p>\n<p></p><h3>TCP协议包头</h3><br><img src=\"/images/39.png\" width=\"800\" height=\"406\"><p></p>\n<p></p><h3>UDP协议包头</h3><br><img src=\"/images/40.png\" width=\"800\" height=\"406\"><p></p>\n<p></p><h3>常见端口号</h3><br><img src=\"/images/41.png\" width=\"800\" height=\"406\"><p></p>\n<p></p><h2>DNS</h2><br>DNS Domain Name System<p></p>\n<p></p><h2>查看网络信息</h2><p></p>\n<p></p><h3>查看网络信息</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># ifconfig</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>重启网络</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/networking restart</div></pre></td></tr></table></figure><p></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>linux网络管理<br>","more":"</p>\n<p><h2>iso/osi七层模型</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">iso : 国际标准化组织</div><div class=\"line\">osi : 开放系统互联模型</div><div class=\"line\">ios ：苹果操作系统</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">                                    数据单位</div><div class=\"line\">              应用层协议</div><div class=\"line\">7  应用层   &lt;-------------&gt;  应用层   APDU</div><div class=\"line\">              表示层协议</div><div class=\"line\">6  表示层   &lt;-------------&gt;  表示层   PPDU</div><div class=\"line\">              会话层协议</div><div class=\"line\">5  会话层   &lt;-------------&gt;  会话层   SPDU</div><div class=\"line\">              传输层协议</div><div class=\"line\">4  传输层   &lt;-------------&gt;  传输层   TPDU</div><div class=\"line\">              网络层协议</div><div class=\"line\">3  网络层   &lt;-------------&gt;  网络层    报文</div><div class=\"line\">             数据链路层协议</div><div class=\"line\">2 数据链路层 &lt;-------------&gt; 数据链路层  帧</div><div class=\"line\">              物理层协议</div><div class=\"line\">1  物理层   &lt;-------------&gt;  物理层    比特</div></pre></td></tr></table></figure>\n<p>1 2 3 4 实际进行数据传输<br>5 6 7   给用户提供服务的</p>\n<p>mac地址负责局域网通信<br>ip地址负责外网通信</p>\n<p>应用层：用户接口<br>表示层：数据的表现形式、特定功能的实现如加密<br>会话层：对应用会话的管理、同步<br>传输层：可靠与不可靠的传输、传输前的错误检测、流控<br>网络层：提供逻辑地址、选路<br>数据链路层：成帧、用mac地址访问媒介、错误监测与纠正<br>物理层：设备之间的比特流的传输、物理接口、电气特性等</p>\n<p><h2>TCP/IP协议4层模型</h2></p>\n<p><h3>TCP/IP模型与OSI模型的对应</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">OSI7层模型  TCP/IP4层模型</div><div class=\"line\"> 应用层    |</div><div class=\"line\"> 表示层    &#125;  应用层</div><div class=\"line\"> 会话层    |</div><div class=\"line\"> 传输层    &#125;  传输层</div><div class=\"line\"> 网络层    &#125;  网络互联层</div><div class=\"line\">数据链路层  &#125;  网络接口层</div><div class=\"line\"> 物理层    |</div></pre></td></tr></table></figure></p>\n<p><h2>IP地址</h2></p>\n<p><h3>数据封装过程</h3><br><img src=\"/images/37.png\" width=\"800\" height=\"406\" /></p>\n<p><h3>IP包头</h3><br><img src=\"/images/36.png\" width=\"800\" height=\"406\" /></p>\n<p><h3>IP地址分类</h3><br><img src=\"/images/38.png\" width=\"800\" height=\"406\" /></p>\n<p><h2>端口号</h2></p>\n<p><h3>TCP协议包头</h3><br><img src=\"/images/39.png\" width=\"800\" height=\"406\" /></p>\n<p><h3>UDP协议包头</h3><br><img src=\"/images/40.png\" width=\"800\" height=\"406\" /></p>\n<p><h3>常见端口号</h3><br><img src=\"/images/41.png\" width=\"800\" height=\"406\" /></p>\n<p><h2>DNS</h2><br>DNS Domain Name System</p>\n<p><h2>查看网络信息</h2></p>\n<p><h3>查看网络信息</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># ifconfig</div></pre></td></tr></table></figure></p>\n<p><h3>重启网络</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/networking restart</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"apt","date":"2016-11-15T05:49:16.000Z","_content":"apt\n<!-- more -->\n<h2>apt源</h2>\n<h3>中科大</h3>\n```markdown\ndeb http://ftp.cn.debian.org/debian jessie main contrib non-free\ndeb-src http://ftp.cn.debian.org/debian jessie main contrib non-free\n\ndeb http://ftp.cn.debian.org/debian jessie-updates main contrib non-free\ndeb-src http://ftp.cn.debian.org/debian jessie-updates main contrib non-free\n\ndeb http://ftp.cn.debian.org/debian-security/ jessie/updates main contrib non-free\ndeb-src http://ftp.cn.debian.org/debian-security/ jessie/updates main contrib non-free\n\ndeb http://security.debian.org jessie/updates main contrib non-free\n```\n\n<h3>163</h3>\n```markdown\ndeb http://mirrors.163.com/debian jessie main non-free contrib\ndeb http://mirrors.163.com/debian jessie-proposed-updates main contrib non-free\n\ndeb-src http://mirrors.163.com/debian jessie main non-free contrib\ndeb-src http://mirrors.163.com/debian jessie-proposed-updates main contrib non-free\n\ndeb http://mirrors.163.com/debian-security jessie/updates main contrib non-free \ndeb-src http://mirrors.163.com/debian-security jessie/updates main contrib non-free \n\ndeb http://security.debian.org jessie/updates main contrib non-free\n```\n<h3>常用命令</h3>\napt-cache search packagename 搜索包\napt-cache show packagename 获取包的相关信息，如说明、大小、版本等\napt-get install packagename 安装包\napt-get install packagename --reinstall 重新安装包\napt-get -f install 修复安装”-f = –fix-missing”\napt-get remove packagename 删除包\napt-get remove packagename --purge 删除包，包括删除配置文件等\napt-get update 更新源\napt-get upgrade 更新已安装的包\napt-get dist-upgrade 升级系统\napt-get dselect-upgrade 使用 dselect 升级\napt-cache depends packagename 了解使用依赖\napt-cache rdepends packagename 是查看该包被哪些包依赖\napt-get build-dep packagename 安装相关的编译环境\napt-get source packagename 下载该包的源代码\napt-get clean 清理无用的包\napt-get autoclean 清理无用的包\napt-get check 检查是否有损坏的依赖\n\n\napt卸载nginx方法\n卸载方法1.\n# 删除nginx，保留配置文件\nsudo apt-get remove nginx\n#删除配置文件\nrm -rf /etc/nginx\n\n卸载方法2.\n#删除nginx连带配置文件\nsudo apt-get purge nginx # Removes everything.\n\n#卸载不再需要的nginx依赖程序\nsudo apt-get autoremove\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/system/apt.md","raw":"---\ntitle: apt\ndate: 2016-11-15 13:49:16\ncategories: linux\ntags: [linux,apt]\n---\napt\n<!-- more -->\n<h2>apt源</h2>\n<h3>中科大</h3>\n```markdown\ndeb http://ftp.cn.debian.org/debian jessie main contrib non-free\ndeb-src http://ftp.cn.debian.org/debian jessie main contrib non-free\n\ndeb http://ftp.cn.debian.org/debian jessie-updates main contrib non-free\ndeb-src http://ftp.cn.debian.org/debian jessie-updates main contrib non-free\n\ndeb http://ftp.cn.debian.org/debian-security/ jessie/updates main contrib non-free\ndeb-src http://ftp.cn.debian.org/debian-security/ jessie/updates main contrib non-free\n\ndeb http://security.debian.org jessie/updates main contrib non-free\n```\n\n<h3>163</h3>\n```markdown\ndeb http://mirrors.163.com/debian jessie main non-free contrib\ndeb http://mirrors.163.com/debian jessie-proposed-updates main contrib non-free\n\ndeb-src http://mirrors.163.com/debian jessie main non-free contrib\ndeb-src http://mirrors.163.com/debian jessie-proposed-updates main contrib non-free\n\ndeb http://mirrors.163.com/debian-security jessie/updates main contrib non-free \ndeb-src http://mirrors.163.com/debian-security jessie/updates main contrib non-free \n\ndeb http://security.debian.org jessie/updates main contrib non-free\n```\n<h3>常用命令</h3>\napt-cache search packagename 搜索包\napt-cache show packagename 获取包的相关信息，如说明、大小、版本等\napt-get install packagename 安装包\napt-get install packagename --reinstall 重新安装包\napt-get -f install 修复安装”-f = –fix-missing”\napt-get remove packagename 删除包\napt-get remove packagename --purge 删除包，包括删除配置文件等\napt-get update 更新源\napt-get upgrade 更新已安装的包\napt-get dist-upgrade 升级系统\napt-get dselect-upgrade 使用 dselect 升级\napt-cache depends packagename 了解使用依赖\napt-cache rdepends packagename 是查看该包被哪些包依赖\napt-get build-dep packagename 安装相关的编译环境\napt-get source packagename 下载该包的源代码\napt-get clean 清理无用的包\napt-get autoclean 清理无用的包\napt-get check 检查是否有损坏的依赖\n\n\napt卸载nginx方法\n卸载方法1.\n# 删除nginx，保留配置文件\nsudo apt-get remove nginx\n#删除配置文件\nrm -rf /etc/nginx\n\n卸载方法2.\n#删除nginx连带配置文件\nsudo apt-get purge nginx # Removes everything.\n\n#卸载不再需要的nginx依赖程序\nsudo apt-get autoremove\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"system/apt","published":1,"updated":"2017-01-04T09:43:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9am008b21xwzt240jpf","content":"<p>apt<br><a id=\"more\"></a></p>\n<p></p><h2>apt源</h2><p></p>\n<p></p><h3>中科大</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">deb http://ftp.cn.debian.org/debian jessie main contrib non-free</div><div class=\"line\">deb-src http://ftp.cn.debian.org/debian jessie main contrib non-free</div><div class=\"line\"></div><div class=\"line\">deb http://ftp.cn.debian.org/debian jessie-updates main contrib non-free</div><div class=\"line\">deb-src http://ftp.cn.debian.org/debian jessie-updates main contrib non-free</div><div class=\"line\"></div><div class=\"line\">deb http://ftp.cn.debian.org/debian-security/ jessie/updates main contrib non-free</div><div class=\"line\">deb-src http://ftp.cn.debian.org/debian-security/ jessie/updates main contrib non-free</div><div class=\"line\"></div><div class=\"line\">deb http://security.debian.org jessie/updates main contrib non-free</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>163</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">deb http://mirrors.163.com/debian jessie main non-free contrib</div><div class=\"line\">deb http://mirrors.163.com/debian jessie-proposed-updates main contrib non-free</div><div class=\"line\"></div><div class=\"line\">deb-src http://mirrors.163.com/debian jessie main non-free contrib</div><div class=\"line\">deb-src http://mirrors.163.com/debian jessie-proposed-updates main contrib non-free</div><div class=\"line\"></div><div class=\"line\">deb http://mirrors.163.com/debian-security jessie/updates main contrib non-free </div><div class=\"line\">deb-src http://mirrors.163.com/debian-security jessie/updates main contrib non-free </div><div class=\"line\"></div><div class=\"line\">deb http://security.debian.org jessie/updates main contrib non-free</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>常用命令</h3><br>apt-cache search packagename 搜索包<br>apt-cache show packagename 获取包的相关信息，如说明、大小、版本等<br>apt-get install packagename 安装包<br>apt-get install packagename –reinstall 重新安装包<br>apt-get -f install 修复安装”-f = –fix-missing”<br>apt-get remove packagename 删除包<br>apt-get remove packagename –purge 删除包，包括删除配置文件等<br>apt-get update 更新源<br>apt-get upgrade 更新已安装的包<br>apt-get dist-upgrade 升级系统<br>apt-get dselect-upgrade 使用 dselect 升级<br>apt-cache depends packagename 了解使用依赖<br>apt-cache rdepends packagename 是查看该包被哪些包依赖<br>apt-get build-dep packagename 安装相关的编译环境<br>apt-get source packagename 下载该包的源代码<br>apt-get clean 清理无用的包<br>apt-get autoclean 清理无用的包<br>apt-get check 检查是否有损坏的依赖<p></p>\n<p>apt卸载nginx方法<br>卸载方法1.</p>\n<h1 id=\"删除nginx，保留配置文件\"><a href=\"#删除nginx，保留配置文件\" class=\"headerlink\" title=\"删除nginx，保留配置文件\"></a>删除nginx，保留配置文件</h1><p>sudo apt-get remove nginx</p>\n<p>#删除配置文件<br>rm -rf /etc/nginx</p>\n<p>卸载方法2.</p>\n<p>#删除nginx连带配置文件<br>sudo apt-get purge nginx # Removes everything.</p>\n<p>#卸载不再需要的nginx依赖程序<br>sudo apt-get autoremove</p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>apt<br>","more":"</p>\n<p><h2>apt源</h2></p>\n<p><h3>中科大</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">deb http://ftp.cn.debian.org/debian jessie main contrib non-free</div><div class=\"line\">deb-src http://ftp.cn.debian.org/debian jessie main contrib non-free</div><div class=\"line\"></div><div class=\"line\">deb http://ftp.cn.debian.org/debian jessie-updates main contrib non-free</div><div class=\"line\">deb-src http://ftp.cn.debian.org/debian jessie-updates main contrib non-free</div><div class=\"line\"></div><div class=\"line\">deb http://ftp.cn.debian.org/debian-security/ jessie/updates main contrib non-free</div><div class=\"line\">deb-src http://ftp.cn.debian.org/debian-security/ jessie/updates main contrib non-free</div><div class=\"line\"></div><div class=\"line\">deb http://security.debian.org jessie/updates main contrib non-free</div></pre></td></tr></table></figure></p>\n<p><h3>163</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">deb http://mirrors.163.com/debian jessie main non-free contrib</div><div class=\"line\">deb http://mirrors.163.com/debian jessie-proposed-updates main contrib non-free</div><div class=\"line\"></div><div class=\"line\">deb-src http://mirrors.163.com/debian jessie main non-free contrib</div><div class=\"line\">deb-src http://mirrors.163.com/debian jessie-proposed-updates main contrib non-free</div><div class=\"line\"></div><div class=\"line\">deb http://mirrors.163.com/debian-security jessie/updates main contrib non-free </div><div class=\"line\">deb-src http://mirrors.163.com/debian-security jessie/updates main contrib non-free </div><div class=\"line\"></div><div class=\"line\">deb http://security.debian.org jessie/updates main contrib non-free</div></pre></td></tr></table></figure></p>\n<p><h3>常用命令</h3><br>apt-cache search packagename 搜索包<br>apt-cache show packagename 获取包的相关信息，如说明、大小、版本等<br>apt-get install packagename 安装包<br>apt-get install packagename –reinstall 重新安装包<br>apt-get -f install 修复安装”-f = –fix-missing”<br>apt-get remove packagename 删除包<br>apt-get remove packagename –purge 删除包，包括删除配置文件等<br>apt-get update 更新源<br>apt-get upgrade 更新已安装的包<br>apt-get dist-upgrade 升级系统<br>apt-get dselect-upgrade 使用 dselect 升级<br>apt-cache depends packagename 了解使用依赖<br>apt-cache rdepends packagename 是查看该包被哪些包依赖<br>apt-get build-dep packagename 安装相关的编译环境<br>apt-get source packagename 下载该包的源代码<br>apt-get clean 清理无用的包<br>apt-get autoclean 清理无用的包<br>apt-get check 检查是否有损坏的依赖</p>\n<p>apt卸载nginx方法<br>卸载方法1.</p>\n<h1 id=\"删除nginx，保留配置文件\"><a href=\"#删除nginx，保留配置文件\" class=\"headerlink\" title=\"删除nginx，保留配置文件\"></a>删除nginx，保留配置文件</h1><p>sudo apt-get remove nginx</p>\n<p>#删除配置文件<br>rm -rf /etc/nginx</p>\n<p>卸载方法2.</p>\n<p>#删除nginx连带配置文件<br>sudo apt-get purge nginx # Removes everything.</p>\n<p>#卸载不再需要的nginx依赖程序<br>sudo apt-get autoremove</p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"centos与ubuntu不同","date":"2016-10-23T07:32:25.000Z","_content":"centos与ubuntu不同\n<!-- more -->\n\n1.关于登录用户\ncentos可以使用root登录  ubuntu不能使用root登录\ncentos普通用户默认不能通过sudo取得root权限执行命令， ubuntu可以，centos需要sudo时需要修改/etc/sudoers文件\n2.关于网络配置\n  ubuntu的网络配置文件是在/etc/network/interface文件中，所有网卡都使用一个文件就可以了\n  centos的配置文件在/etc/sysconfig/network-scripts下，而且一个网卡一个配置文件，分别是ifcfg-eth0,ifcfg-eth1 .....\n  ubuntu重启网络的脚本是/etc/init.d/networking [start|stop|restart],centos是 /etc/init.d/network [start|stop|restart]\n3. 自动安装软件\n ubuntu使用apt-get  centos使用yum\n4.关于启动项\nubuntu的启动机制分析\n据说ubuntu使用upstart机制实现服务的启动，upstart是个什么玩意，我不知道，但我认真分析了一下ubuntu的各种启动文件发现的这样的一些关系\n/etc/init.d/ 这个目录里放置了ubuntu下得所有启动项，与centos不同的是，这些不是脚本，而只是一个连接到了/lib/init/upstart-job下，\nupstart-job脚本执行了类似 $command $JOB的命令\n当用户执行 service MySQL stop时\n$command 就是stop $JOB就是mysql\n相当于执行了stop mysql\nstop又是/sbin/initctl的一个软连接\n这就相当于执行了initctl这个程序，用来启动关闭mysql\n单mysql究竟去哪里找，是一个elf文件还是一个脚本，这个实在不清楚\n \n \n4.关于安装mysql的区别\n centos上使用yum install mysql就可以安装mysql了\n 安装后启动文件分别是：\n/etc/init.d/mysqld 是服务启动脚本\n/usr/bin/mysqld_safe是一个守护脚本\n/usr/libexec/mysqld 是mysql的服务程序\nyum install 安装后mysql初次登录不需要密吗\n \napt-get 安装mysql在安装的过程中要求输入密码\n ","source":"_posts/system/centos与ubuntu不同.md","raw":"---\ntitle: centos与ubuntu不同\ndate: 2016-10-23 15:32:25\ncategories: linux\n---\ncentos与ubuntu不同\n<!-- more -->\n\n1.关于登录用户\ncentos可以使用root登录  ubuntu不能使用root登录\ncentos普通用户默认不能通过sudo取得root权限执行命令， ubuntu可以，centos需要sudo时需要修改/etc/sudoers文件\n2.关于网络配置\n  ubuntu的网络配置文件是在/etc/network/interface文件中，所有网卡都使用一个文件就可以了\n  centos的配置文件在/etc/sysconfig/network-scripts下，而且一个网卡一个配置文件，分别是ifcfg-eth0,ifcfg-eth1 .....\n  ubuntu重启网络的脚本是/etc/init.d/networking [start|stop|restart],centos是 /etc/init.d/network [start|stop|restart]\n3. 自动安装软件\n ubuntu使用apt-get  centos使用yum\n4.关于启动项\nubuntu的启动机制分析\n据说ubuntu使用upstart机制实现服务的启动，upstart是个什么玩意，我不知道，但我认真分析了一下ubuntu的各种启动文件发现的这样的一些关系\n/etc/init.d/ 这个目录里放置了ubuntu下得所有启动项，与centos不同的是，这些不是脚本，而只是一个连接到了/lib/init/upstart-job下，\nupstart-job脚本执行了类似 $command $JOB的命令\n当用户执行 service MySQL stop时\n$command 就是stop $JOB就是mysql\n相当于执行了stop mysql\nstop又是/sbin/initctl的一个软连接\n这就相当于执行了initctl这个程序，用来启动关闭mysql\n单mysql究竟去哪里找，是一个elf文件还是一个脚本，这个实在不清楚\n \n \n4.关于安装mysql的区别\n centos上使用yum install mysql就可以安装mysql了\n 安装后启动文件分别是：\n/etc/init.d/mysqld 是服务启动脚本\n/usr/bin/mysqld_safe是一个守护脚本\n/usr/libexec/mysqld 是mysql的服务程序\nyum install 安装后mysql初次登录不需要密吗\n \napt-get 安装mysql在安装的过程中要求输入密码\n ","slug":"system/centos与ubuntu不同","published":1,"updated":"2016-10-23T07:50:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9an008f21xwscr9pspj","content":"<p>centos与ubuntu不同<br><a id=\"more\"></a></p>\n<p>1.关于登录用户<br>centos可以使用root登录  ubuntu不能使用root登录<br>centos普通用户默认不能通过sudo取得root权限执行命令， ubuntu可以，centos需要sudo时需要修改/etc/sudoers文件<br>2.关于网络配置<br>  ubuntu的网络配置文件是在/etc/network/interface文件中，所有网卡都使用一个文件就可以了<br>  centos的配置文件在/etc/sysconfig/network-scripts下，而且一个网卡一个配置文件，分别是ifcfg-eth0,ifcfg-eth1 …..<br>  ubuntu重启网络的脚本是/etc/init.d/networking [start|stop|restart],centos是 /etc/init.d/network [start|stop|restart]</p>\n<ol>\n<li>自动安装软件<br>ubuntu使用apt-get  centos使用yum<br>4.关于启动项<br>ubuntu的启动机制分析<br>据说ubuntu使用upstart机制实现服务的启动，upstart是个什么玩意，我不知道，但我认真分析了一下ubuntu的各种启动文件发现的这样的一些关系<br>/etc/init.d/ 这个目录里放置了ubuntu下得所有启动项，与centos不同的是，这些不是脚本，而只是一个连接到了/lib/init/upstart-job下，<br>upstart-job脚本执行了类似 $command $JOB的命令<br>当用户执行 service MySQL stop时<br>$command 就是stop $JOB就是mysql<br>相当于执行了stop mysql<br>stop又是/sbin/initctl的一个软连接<br>这就相当于执行了initctl这个程序，用来启动关闭mysql<br>单mysql究竟去哪里找，是一个elf文件还是一个脚本，这个实在不清楚</li>\n</ol>\n<p>4.关于安装mysql的区别<br> centos上使用yum install mysql就可以安装mysql了<br> 安装后启动文件分别是：<br>/etc/init.d/mysqld 是服务启动脚本<br>/usr/bin/mysqld_safe是一个守护脚本<br>/usr/libexec/mysqld 是mysql的服务程序<br>yum install 安装后mysql初次登录不需要密吗</p>\n<p>apt-get 安装mysql在安装的过程中要求输入密码</p>\n","excerpt":"<p>centos与ubuntu不同<br>","more":"</p>\n<p>1.关于登录用户<br>centos可以使用root登录  ubuntu不能使用root登录<br>centos普通用户默认不能通过sudo取得root权限执行命令， ubuntu可以，centos需要sudo时需要修改/etc/sudoers文件<br>2.关于网络配置<br>  ubuntu的网络配置文件是在/etc/network/interface文件中，所有网卡都使用一个文件就可以了<br>  centos的配置文件在/etc/sysconfig/network-scripts下，而且一个网卡一个配置文件，分别是ifcfg-eth0,ifcfg-eth1 …..<br>  ubuntu重启网络的脚本是/etc/init.d/networking [start|stop|restart],centos是 /etc/init.d/network [start|stop|restart]</p>\n<ol>\n<li>自动安装软件<br>ubuntu使用apt-get  centos使用yum<br>4.关于启动项<br>ubuntu的启动机制分析<br>据说ubuntu使用upstart机制实现服务的启动，upstart是个什么玩意，我不知道，但我认真分析了一下ubuntu的各种启动文件发现的这样的一些关系<br>/etc/init.d/ 这个目录里放置了ubuntu下得所有启动项，与centos不同的是，这些不是脚本，而只是一个连接到了/lib/init/upstart-job下，<br>upstart-job脚本执行了类似 $command $JOB的命令<br>当用户执行 service MySQL stop时<br>$command 就是stop $JOB就是mysql<br>相当于执行了stop mysql<br>stop又是/sbin/initctl的一个软连接<br>这就相当于执行了initctl这个程序，用来启动关闭mysql<br>单mysql究竟去哪里找，是一个elf文件还是一个脚本，这个实在不清楚</li>\n</ol>\n<p>4.关于安装mysql的区别<br> centos上使用yum install mysql就可以安装mysql了<br> 安装后启动文件分别是：<br>/etc/init.d/mysqld 是服务启动脚本<br>/usr/bin/mysqld_safe是一个守护脚本<br>/usr/libexec/mysqld 是mysql的服务程序<br>yum install 安装后mysql初次登录不需要密吗</p>\n<p>apt-get 安装mysql在安装的过程中要求输入密码</p>"},{"title":"debian安装sudo","date":"2016-10-20T08:31:18.000Z","_content":"debian安装sudo命令\n<!-- more -->\n这条命令在ubuntu下可是每日必备、在debian下就要自己安装了、首先切换到root用户、su命令然后输入root密码登录root身份、再执行apt-get install sudo、这个冬冬不明白为什么一定要cd1才能安装、不解不解、那就插入cd1的光碟吧、安装完成后还要修改一下sudoers的文件不然会出现\"xxx is not in the sudoers file. This incident will be reported.“的提示\n\n我们只要修改一下/etc/sudoers文件就行了。下面是修改方 法：\n\n1）进入超级用户模式。也就是输入\"su -\",系统会让你输入超级用户密码，输入密码后就进入了超级用户模式。（当然，你也可以直接用root用） \n2）添加文件的写权限。也就是输入命令\"chmod u+w /etc/sudoers\"。 \n3） 编辑/etc/sudoers文件。也就是输入命令\"vi /etc/sudoers\",输入\"i\"进入编辑模式，找到这一 行：\"root ALL=(ALL) ALL\"在起下面添加\"xxx ALL=(ALL) ALL\"(这里的xxx是你的用户名)，然后保存（就是先按一 下Esc键，然后输入\":wq\"）退出。 \n4）撤销文件的写权限。也就是输入命令\"chmod u-w /etc/sudoers\"。\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/system/debian安装sudo.md","raw":"---\ntitle: debian安装sudo\ndate: 2016-10-20 16:31:18\ncategories:\n---\ndebian安装sudo命令\n<!-- more -->\n这条命令在ubuntu下可是每日必备、在debian下就要自己安装了、首先切换到root用户、su命令然后输入root密码登录root身份、再执行apt-get install sudo、这个冬冬不明白为什么一定要cd1才能安装、不解不解、那就插入cd1的光碟吧、安装完成后还要修改一下sudoers的文件不然会出现\"xxx is not in the sudoers file. This incident will be reported.“的提示\n\n我们只要修改一下/etc/sudoers文件就行了。下面是修改方 法：\n\n1）进入超级用户模式。也就是输入\"su -\",系统会让你输入超级用户密码，输入密码后就进入了超级用户模式。（当然，你也可以直接用root用） \n2）添加文件的写权限。也就是输入命令\"chmod u+w /etc/sudoers\"。 \n3） 编辑/etc/sudoers文件。也就是输入命令\"vi /etc/sudoers\",输入\"i\"进入编辑模式，找到这一 行：\"root ALL=(ALL) ALL\"在起下面添加\"xxx ALL=(ALL) ALL\"(这里的xxx是你的用户名)，然后保存（就是先按一 下Esc键，然后输入\":wq\"）退出。 \n4）撤销文件的写权限。也就是输入命令\"chmod u-w /etc/sudoers\"。\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"system/debian安装sudo","published":1,"updated":"2016-10-20T08:32:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9ap008i21xwwz2pwhge","content":"<p>debian安装sudo命令<br><a id=\"more\"></a><br>这条命令在ubuntu下可是每日必备、在debian下就要自己安装了、首先切换到root用户、su命令然后输入root密码登录root身份、再执行apt-get install sudo、这个冬冬不明白为什么一定要cd1才能安装、不解不解、那就插入cd1的光碟吧、安装完成后还要修改一下sudoers的文件不然会出现”xxx is not in the sudoers file. This incident will be reported.“的提示</p>\n<p>我们只要修改一下/etc/sudoers文件就行了。下面是修改方 法：</p>\n<p>1）进入超级用户模式。也就是输入”su -“,系统会让你输入超级用户密码，输入密码后就进入了超级用户模式。（当然，你也可以直接用root用）<br>2）添加文件的写权限。也就是输入命令”chmod u+w /etc/sudoers”。<br>3） 编辑/etc/sudoers文件。也就是输入命令”vi /etc/sudoers”,输入”i”进入编辑模式，找到这一 行：”root ALL=(ALL) ALL”在起下面添加”xxx ALL=(ALL) ALL”(这里的xxx是你的用户名)，然后保存（就是先按一 下Esc键，然后输入”:wq”）退出。<br>4）撤销文件的写权限。也就是输入命令”chmod u-w /etc/sudoers”。</p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>debian安装sudo命令<br>","more":"<br>这条命令在ubuntu下可是每日必备、在debian下就要自己安装了、首先切换到root用户、su命令然后输入root密码登录root身份、再执行apt-get install sudo、这个冬冬不明白为什么一定要cd1才能安装、不解不解、那就插入cd1的光碟吧、安装完成后还要修改一下sudoers的文件不然会出现”xxx is not in the sudoers file. This incident will be reported.“的提示</p>\n<p>我们只要修改一下/etc/sudoers文件就行了。下面是修改方 法：</p>\n<p>1）进入超级用户模式。也就是输入”su -“,系统会让你输入超级用户密码，输入密码后就进入了超级用户模式。（当然，你也可以直接用root用）<br>2）添加文件的写权限。也就是输入命令”chmod u+w /etc/sudoers”。<br>3） 编辑/etc/sudoers文件。也就是输入命令”vi /etc/sudoers”,输入”i”进入编辑模式，找到这一 行：”root ALL=(ALL) ALL”在起下面添加”xxx ALL=(ALL) ALL”(这里的xxx是你的用户名)，然后保存（就是先按一 下Esc键，然后输入”:wq”）退出。<br>4）撤销文件的写权限。也就是输入命令”chmod u-w /etc/sudoers”。</p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"linux命令","date":"2016-10-19T23:36:09.000Z","_content":"linux常用命令\n<!-- more -->\n\n<h2>关机与重启</h2>\n\n<h3>关机</h3>\n立即关机\n\n```mark\nshutdown -h now\n```\n```mark\npoweroff 不推荐\n```\n<h3>重启</h3>\n```mark\nshutdown -r\n```\n```mark\nreboot\n```\n后台执行5点30重启\n\n```mark\nshutdown -r 05:30 &\n```\n<h3>取消前一个关机命令</h3>\n```mark\nshutdown -c\n```\n<h2>init</h2>\n```mark\n0  关机\n1  单用户\n2  不完全多用户，不含NFS服务\n3  完全多用户\n4  未分配\n5  图形界面\n6  重启\n```\n<h3>查询系统运行级别</h3>\n```mark\nrunlevel\n```\n<h3>系统默认运行级别</h3>\n```mark\ncat /etc/inittab\n```\n<h3>退出登录命令</h3>\n```mark\nlogout 退出系统\n```\n<h2>压缩与解压缩</h2>\n压缩格式 .zip .gz .bz2 .tar.gz .tar.bz2\n\n<h3>安装压缩解压缩工具</h3>\n```mark\nsudo apt-get install zip\n```\n<h3>.zip</h3>\n<h4>压缩.zip</h4>\n压缩文件\n\n```mark\nzip 压缩文件名 压缩文件\n```\n压缩目录\n\n```mark\nzip -r 压缩文件名 目录名 \n```\n<h4>解压缩.zip</h4>\n```mark\nunzip 压缩文件名\n```\n\n<h3>.gz</h3>\n<h4>压缩.gz</h4>\n不保留源文件\n\n```mark\ngzip 压缩文件\n```\n保留源文件\n\n```mark\ngzip -c 源文件 > 压缩文件\n```\n压缩目录下的所有子文件\n\n```mark\ngzip -r 目录\n```\n<h4>解压缩.gz</h4>\n```mark\ngzip -d 压缩文件名\n```\n```mark\ngunzip 压缩文件名\n```\n解压缩目录下的所有文件\n\n```mark\ngunzip -r 目录名\n```\n\n<h3>.bz2</h3>\n<h4>压缩.bz2</h4>\nbzip2不能压缩目录\n\n不保留源文件\n\n```mark\nbzip2 源文件\n```\n保留源文件\n\n```mark\nbzip2 -k 源文件\n```\n\n<h4>解压缩.bz2</h4>\n```mark\nbunzip2 压缩文件\n```\n```mark\nbzip2 -d 压缩文件\n```\n-k保留压缩文件\n\n<h3>tar打包命令</h3>\n```mark\ntar -cvf 打包文件名 源文件\n选项：\n    -c: 打包\n    -v: 显示过程\n    -f: 指定打包后的文件名\n例：\ntar -cvf test.tar test\n```\n\n<h3>.tar.gz</h3>\n<h4>压缩.tar.gz</h4>\n```mark\ntar -zcvf 压缩包名.tar.gz 源文件\n```\n<h4>解压缩.tar.gz</h4>\n```mark\ntar -zxvf 压缩包名.tar.gz \n```\n\n<h3>.tar.bz2</h3>\n<h4>压缩.tar.bz2</h4>\n```mark\ntar -jcvf 压缩包名.tar.bz2 源文件\n```\n<h4>解压缩.tar.bz2</h4>\n```mark\ntar -jxvf 压缩包名.tar.bz2 \n```\n\n<h2>帮助命令</h2>\n<h3>man的级别</h3>\n\n```mark\n1 ：常看命令的帮助\n2 ：查看可被内核调用的函数的帮助\n3 ：查看函数和函数库的帮助\n4 ：查看特殊文件的帮助（主要是/dev目录下的文件）\n5 ：查看配置文件的帮助\n6 ：查看游戏的帮助\n7 ：查看其它杂项的帮助\n8 ：查看系统管理员可用命令的帮助\n9 ：查看和内核相关文件的帮助\n```\n<h3>显示命令帮助</h3>\n\n```mark\nman 命令\n```\n<h4>显示命令帮助等级</h4>\n\n```mark\nman -f 命令\n```\n相当于\n\n```mark\nwhatis 命令\n```\n<h4>调用相应等级的帮助</h4>\n\n```mark\nman -等级 命令\n```\n<h4>查看和命令相关的所有帮助</h4>\n\n```mark\nman -k 命令\n```\n相当于\n\n```mark\napropos 命令\n```\n\n<h3>选项帮助</h3>\n```mark\n命令 --help\n```\n\n<h3>shell内部命令帮助</h3>\n<h4>确定是否是shell命令</h4>\n```mark\nwhereis 命令\n```\n<h4>获取内部命令帮助</h4>\n```mark\nhelp shell内部命令\n```\n\n<h3>详细命令帮助info</h3>\n```mark\ninfo 命令\n- 回车 : 进入子帮助页面（带有*号标记）\n- u   : 进入上层页面\n- n   : 进入下一个帮助小节\n- p   : 进入上一个帮助小节\n- q   : 退出\n```\n\n\n<h2>目录</h2>\n<h3>建立目录</h3>\n```mark\nmkdir 目录名\n```\n递归创建\n\n```mark\nmkdir -p 目录名/目录名\n```\n\n<h3>切换目录</h3>\n进入当前用户的家目录\n\n```mark\ncd ~ \n```\n\n<h3>清屏</h3>\ncontrol + l\n\n\n<h3>查看debian版本</h3>\n```mark\nmore /etc/debian_version \n```\n<h3>查看内核版本</h3>\n```markdown\nuname -a\n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/system/linux命令.md","raw":"---\ntitle: linux命令\ndate: 2016-10-20 07:36:09\ncategories: linux\n---\nlinux常用命令\n<!-- more -->\n\n<h2>关机与重启</h2>\n\n<h3>关机</h3>\n立即关机\n\n```mark\nshutdown -h now\n```\n```mark\npoweroff 不推荐\n```\n<h3>重启</h3>\n```mark\nshutdown -r\n```\n```mark\nreboot\n```\n后台执行5点30重启\n\n```mark\nshutdown -r 05:30 &\n```\n<h3>取消前一个关机命令</h3>\n```mark\nshutdown -c\n```\n<h2>init</h2>\n```mark\n0  关机\n1  单用户\n2  不完全多用户，不含NFS服务\n3  完全多用户\n4  未分配\n5  图形界面\n6  重启\n```\n<h3>查询系统运行级别</h3>\n```mark\nrunlevel\n```\n<h3>系统默认运行级别</h3>\n```mark\ncat /etc/inittab\n```\n<h3>退出登录命令</h3>\n```mark\nlogout 退出系统\n```\n<h2>压缩与解压缩</h2>\n压缩格式 .zip .gz .bz2 .tar.gz .tar.bz2\n\n<h3>安装压缩解压缩工具</h3>\n```mark\nsudo apt-get install zip\n```\n<h3>.zip</h3>\n<h4>压缩.zip</h4>\n压缩文件\n\n```mark\nzip 压缩文件名 压缩文件\n```\n压缩目录\n\n```mark\nzip -r 压缩文件名 目录名 \n```\n<h4>解压缩.zip</h4>\n```mark\nunzip 压缩文件名\n```\n\n<h3>.gz</h3>\n<h4>压缩.gz</h4>\n不保留源文件\n\n```mark\ngzip 压缩文件\n```\n保留源文件\n\n```mark\ngzip -c 源文件 > 压缩文件\n```\n压缩目录下的所有子文件\n\n```mark\ngzip -r 目录\n```\n<h4>解压缩.gz</h4>\n```mark\ngzip -d 压缩文件名\n```\n```mark\ngunzip 压缩文件名\n```\n解压缩目录下的所有文件\n\n```mark\ngunzip -r 目录名\n```\n\n<h3>.bz2</h3>\n<h4>压缩.bz2</h4>\nbzip2不能压缩目录\n\n不保留源文件\n\n```mark\nbzip2 源文件\n```\n保留源文件\n\n```mark\nbzip2 -k 源文件\n```\n\n<h4>解压缩.bz2</h4>\n```mark\nbunzip2 压缩文件\n```\n```mark\nbzip2 -d 压缩文件\n```\n-k保留压缩文件\n\n<h3>tar打包命令</h3>\n```mark\ntar -cvf 打包文件名 源文件\n选项：\n    -c: 打包\n    -v: 显示过程\n    -f: 指定打包后的文件名\n例：\ntar -cvf test.tar test\n```\n\n<h3>.tar.gz</h3>\n<h4>压缩.tar.gz</h4>\n```mark\ntar -zcvf 压缩包名.tar.gz 源文件\n```\n<h4>解压缩.tar.gz</h4>\n```mark\ntar -zxvf 压缩包名.tar.gz \n```\n\n<h3>.tar.bz2</h3>\n<h4>压缩.tar.bz2</h4>\n```mark\ntar -jcvf 压缩包名.tar.bz2 源文件\n```\n<h4>解压缩.tar.bz2</h4>\n```mark\ntar -jxvf 压缩包名.tar.bz2 \n```\n\n<h2>帮助命令</h2>\n<h3>man的级别</h3>\n\n```mark\n1 ：常看命令的帮助\n2 ：查看可被内核调用的函数的帮助\n3 ：查看函数和函数库的帮助\n4 ：查看特殊文件的帮助（主要是/dev目录下的文件）\n5 ：查看配置文件的帮助\n6 ：查看游戏的帮助\n7 ：查看其它杂项的帮助\n8 ：查看系统管理员可用命令的帮助\n9 ：查看和内核相关文件的帮助\n```\n<h3>显示命令帮助</h3>\n\n```mark\nman 命令\n```\n<h4>显示命令帮助等级</h4>\n\n```mark\nman -f 命令\n```\n相当于\n\n```mark\nwhatis 命令\n```\n<h4>调用相应等级的帮助</h4>\n\n```mark\nman -等级 命令\n```\n<h4>查看和命令相关的所有帮助</h4>\n\n```mark\nman -k 命令\n```\n相当于\n\n```mark\napropos 命令\n```\n\n<h3>选项帮助</h3>\n```mark\n命令 --help\n```\n\n<h3>shell内部命令帮助</h3>\n<h4>确定是否是shell命令</h4>\n```mark\nwhereis 命令\n```\n<h4>获取内部命令帮助</h4>\n```mark\nhelp shell内部命令\n```\n\n<h3>详细命令帮助info</h3>\n```mark\ninfo 命令\n- 回车 : 进入子帮助页面（带有*号标记）\n- u   : 进入上层页面\n- n   : 进入下一个帮助小节\n- p   : 进入上一个帮助小节\n- q   : 退出\n```\n\n\n<h2>目录</h2>\n<h3>建立目录</h3>\n```mark\nmkdir 目录名\n```\n递归创建\n\n```mark\nmkdir -p 目录名/目录名\n```\n\n<h3>切换目录</h3>\n进入当前用户的家目录\n\n```mark\ncd ~ \n```\n\n<h3>清屏</h3>\ncontrol + l\n\n\n<h3>查看debian版本</h3>\n```mark\nmore /etc/debian_version \n```\n<h3>查看内核版本</h3>\n```markdown\nuname -a\n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"system/linux命令","published":1,"updated":"2016-11-15T06:55:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9ar008m21xwk7k4fpn6","content":"<p>linux常用命令<br><a id=\"more\"></a></p>\n<h2>关机与重启</h2>\n\n<h3>关机</h3><br>立即关机<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">shutdown -h now</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">poweroff 不推荐</div></pre></td></tr></table></figure><br><br><h3>重启</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">shutdown -r</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reboot</div></pre></td></tr></table></figure><br><br>后台执行5点30重启<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">shutdown -r 05:30 &amp;</div></pre></td></tr></table></figure><br><br><h3>取消前一个关机命令</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">shutdown -c</div></pre></td></tr></table></figure><br><br><h2>init</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">0  关机</div><div class=\"line\">1  单用户</div><div class=\"line\">2  不完全多用户，不含NFS服务</div><div class=\"line\">3  完全多用户</div><div class=\"line\">4  未分配</div><div class=\"line\">5  图形界面</div><div class=\"line\">6  重启</div></pre></td></tr></table></figure><br><br><h3>查询系统运行级别</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">runlevel</div></pre></td></tr></table></figure><br><br><h3>系统默认运行级别</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/inittab</div></pre></td></tr></table></figure><br><br><h3>退出登录命令</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">logout 退出系统</div></pre></td></tr></table></figure><br><br><h2>压缩与解压缩</h2><br>压缩格式 .zip .gz .bz2 .tar.gz .tar.bz2<br><br><h3>安装压缩解压缩工具</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install zip</div></pre></td></tr></table></figure><br><br><h3>.zip</h3><br><h4>压缩.zip</h4><br>压缩文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">zip 压缩文件名 压缩文件</div></pre></td></tr></table></figure><br><br>压缩目录<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">zip -r 压缩文件名 目录名</div></pre></td></tr></table></figure><br><br><h4>解压缩.zip</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">unzip 压缩文件名</div></pre></td></tr></table></figure><br><br><h3>.gz</h3><br><h4>压缩.gz</h4><br>不保留源文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gzip 压缩文件</div></pre></td></tr></table></figure><br><br>保留源文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gzip -c 源文件 &gt; 压缩文件</div></pre></td></tr></table></figure><br><br>压缩目录下的所有子文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gzip -r 目录</div></pre></td></tr></table></figure><br><br><h4>解压缩.gz</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gzip -d 压缩文件名</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gunzip 压缩文件名</div></pre></td></tr></table></figure><br><br>解压缩目录下的所有文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gunzip -r 目录名</div></pre></td></tr></table></figure><br><br><h3>.bz2</h3><br><h4>压缩.bz2</h4><br>bzip2不能压缩目录<br><br>不保留源文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bzip2 源文件</div></pre></td></tr></table></figure><br><br>保留源文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bzip2 -k 源文件</div></pre></td></tr></table></figure><br><br><h4>解压缩.bz2</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bunzip2 压缩文件</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bzip2 -d 压缩文件</div></pre></td></tr></table></figure><br><br>-k保留压缩文件<br><br><h3>tar打包命令</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -cvf 打包文件名 源文件</div><div class=\"line\">选项：</div><div class=\"line\">    -c: 打包</div><div class=\"line\">    -v: 显示过程</div><div class=\"line\">    -f: 指定打包后的文件名</div><div class=\"line\">例：</div><div class=\"line\">tar -cvf test.tar test</div></pre></td></tr></table></figure><br><br><h3>.tar.gz</h3><br><h4>压缩.tar.gz</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zcvf 压缩包名.tar.gz 源文件</div></pre></td></tr></table></figure><br><br><h4>解压缩.tar.gz</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf 压缩包名.tar.gz</div></pre></td></tr></table></figure><br><br><h3>.tar.bz2</h3><br><h4>压缩.tar.bz2</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -jcvf 压缩包名.tar.bz2 源文件</div></pre></td></tr></table></figure><br><br><h4>解压缩.tar.bz2</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -jxvf 压缩包名.tar.bz2</div></pre></td></tr></table></figure><br><br><h2>帮助命令</h2><br><h3>man的级别</h3>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 ：常看命令的帮助</div><div class=\"line\">2 ：查看可被内核调用的函数的帮助</div><div class=\"line\">3 ：查看函数和函数库的帮助</div><div class=\"line\">4 ：查看特殊文件的帮助（主要是/dev目录下的文件）</div><div class=\"line\">5 ：查看配置文件的帮助</div><div class=\"line\">6 ：查看游戏的帮助</div><div class=\"line\">7 ：查看其它杂项的帮助</div><div class=\"line\">8 ：查看系统管理员可用命令的帮助</div><div class=\"line\">9 ：查看和内核相关文件的帮助</div></pre></td></tr></table></figure>\n<h3>显示命令帮助</h3>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">man 命令</div></pre></td></tr></table></figure>\n<h4>显示命令帮助等级</h4>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">man -f 命令</div></pre></td></tr></table></figure>\n<p>相当于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">whatis 命令</div></pre></td></tr></table></figure>\n<h4>调用相应等级的帮助</h4>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">man -等级 命令</div></pre></td></tr></table></figure>\n<h4>查看和命令相关的所有帮助</h4>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">man -k 命令</div></pre></td></tr></table></figure>\n<p>相当于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apropos 命令</div></pre></td></tr></table></figure>\n<p></p><h3>选项帮助</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">命令 --help</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>shell内部命令帮助</h3><p></p>\n<p></p><h4>确定是否是shell命令</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">whereis 命令</div></pre></td></tr></table></figure><p></p>\n<p></p><h4>获取内部命令帮助</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">help shell内部命令</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>详细命令帮助info</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">info 命令</div><div class=\"line\">- 回车 : 进入子帮助页面（带有*号标记）</div><div class=\"line\">- u   : 进入上层页面</div><div class=\"line\">- n   : 进入下一个帮助小节</div><div class=\"line\">- p   : 进入上一个帮助小节</div><div class=\"line\">- q   : 退出</div></pre></td></tr></table></figure><p></p>\n<p></p><h2>目录</h2><p></p>\n<p></p><h3>建立目录</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir 目录名</div></pre></td></tr></table></figure><p></p>\n<p>递归创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p 目录名/目录名</div></pre></td></tr></table></figure>\n<p></p><h3>切换目录</h3><br>进入当前用户的家目录<p></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~</div></pre></td></tr></table></figure>\n<p></p><h3>清屏</h3><br>control + l<p></p>\n<p></p><h3>查看debian版本</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">more /etc/debian_version</div></pre></td></tr></table></figure><p></p>\n<p></p><h3>查看内核版本</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">uname -a</div></pre></td></tr></table></figure><p></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>linux常用命令<br>","more":"</p>\n<h2>关机与重启</h2>\n\n<h3>关机</h3><br>立即关机<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">shutdown -h now</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">poweroff 不推荐</div></pre></td></tr></table></figure><br><br><h3>重启</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">shutdown -r</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reboot</div></pre></td></tr></table></figure><br><br>后台执行5点30重启<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">shutdown -r 05:30 &amp;</div></pre></td></tr></table></figure><br><br><h3>取消前一个关机命令</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">shutdown -c</div></pre></td></tr></table></figure><br><br><h2>init</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">0  关机</div><div class=\"line\">1  单用户</div><div class=\"line\">2  不完全多用户，不含NFS服务</div><div class=\"line\">3  完全多用户</div><div class=\"line\">4  未分配</div><div class=\"line\">5  图形界面</div><div class=\"line\">6  重启</div></pre></td></tr></table></figure><br><br><h3>查询系统运行级别</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">runlevel</div></pre></td></tr></table></figure><br><br><h3>系统默认运行级别</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/inittab</div></pre></td></tr></table></figure><br><br><h3>退出登录命令</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">logout 退出系统</div></pre></td></tr></table></figure><br><br><h2>压缩与解压缩</h2><br>压缩格式 .zip .gz .bz2 .tar.gz .tar.bz2<br><br><h3>安装压缩解压缩工具</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install zip</div></pre></td></tr></table></figure><br><br><h3>.zip</h3><br><h4>压缩.zip</h4><br>压缩文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">zip 压缩文件名 压缩文件</div></pre></td></tr></table></figure><br><br>压缩目录<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">zip -r 压缩文件名 目录名</div></pre></td></tr></table></figure><br><br><h4>解压缩.zip</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">unzip 压缩文件名</div></pre></td></tr></table></figure><br><br><h3>.gz</h3><br><h4>压缩.gz</h4><br>不保留源文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gzip 压缩文件</div></pre></td></tr></table></figure><br><br>保留源文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gzip -c 源文件 &gt; 压缩文件</div></pre></td></tr></table></figure><br><br>压缩目录下的所有子文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gzip -r 目录</div></pre></td></tr></table></figure><br><br><h4>解压缩.gz</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gzip -d 压缩文件名</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gunzip 压缩文件名</div></pre></td></tr></table></figure><br><br>解压缩目录下的所有文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gunzip -r 目录名</div></pre></td></tr></table></figure><br><br><h3>.bz2</h3><br><h4>压缩.bz2</h4><br>bzip2不能压缩目录<br><br>不保留源文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bzip2 源文件</div></pre></td></tr></table></figure><br><br>保留源文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bzip2 -k 源文件</div></pre></td></tr></table></figure><br><br><h4>解压缩.bz2</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bunzip2 压缩文件</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bzip2 -d 压缩文件</div></pre></td></tr></table></figure><br><br>-k保留压缩文件<br><br><h3>tar打包命令</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -cvf 打包文件名 源文件</div><div class=\"line\">选项：</div><div class=\"line\">    -c: 打包</div><div class=\"line\">    -v: 显示过程</div><div class=\"line\">    -f: 指定打包后的文件名</div><div class=\"line\">例：</div><div class=\"line\">tar -cvf test.tar test</div></pre></td></tr></table></figure><br><br><h3>.tar.gz</h3><br><h4>压缩.tar.gz</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zcvf 压缩包名.tar.gz 源文件</div></pre></td></tr></table></figure><br><br><h4>解压缩.tar.gz</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf 压缩包名.tar.gz</div></pre></td></tr></table></figure><br><br><h3>.tar.bz2</h3><br><h4>压缩.tar.bz2</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -jcvf 压缩包名.tar.bz2 源文件</div></pre></td></tr></table></figure><br><br><h4>解压缩.tar.bz2</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -jxvf 压缩包名.tar.bz2</div></pre></td></tr></table></figure><br><br><h2>帮助命令</h2><br><h3>man的级别</h3>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 ：常看命令的帮助</div><div class=\"line\">2 ：查看可被内核调用的函数的帮助</div><div class=\"line\">3 ：查看函数和函数库的帮助</div><div class=\"line\">4 ：查看特殊文件的帮助（主要是/dev目录下的文件）</div><div class=\"line\">5 ：查看配置文件的帮助</div><div class=\"line\">6 ：查看游戏的帮助</div><div class=\"line\">7 ：查看其它杂项的帮助</div><div class=\"line\">8 ：查看系统管理员可用命令的帮助</div><div class=\"line\">9 ：查看和内核相关文件的帮助</div></pre></td></tr></table></figure>\n<h3>显示命令帮助</h3>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">man 命令</div></pre></td></tr></table></figure>\n<h4>显示命令帮助等级</h4>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">man -f 命令</div></pre></td></tr></table></figure>\n<p>相当于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">whatis 命令</div></pre></td></tr></table></figure>\n<h4>调用相应等级的帮助</h4>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">man -等级 命令</div></pre></td></tr></table></figure>\n<h4>查看和命令相关的所有帮助</h4>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">man -k 命令</div></pre></td></tr></table></figure>\n<p>相当于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apropos 命令</div></pre></td></tr></table></figure>\n<p><h3>选项帮助</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">命令 --help</div></pre></td></tr></table></figure></p>\n<p><h3>shell内部命令帮助</h3></p>\n<p><h4>确定是否是shell命令</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">whereis 命令</div></pre></td></tr></table></figure></p>\n<p><h4>获取内部命令帮助</h4><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">help shell内部命令</div></pre></td></tr></table></figure></p>\n<p><h3>详细命令帮助info</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">info 命令</div><div class=\"line\">- 回车 : 进入子帮助页面（带有*号标记）</div><div class=\"line\">- u   : 进入上层页面</div><div class=\"line\">- n   : 进入下一个帮助小节</div><div class=\"line\">- p   : 进入上一个帮助小节</div><div class=\"line\">- q   : 退出</div></pre></td></tr></table></figure></p>\n<p><h2>目录</h2></p>\n<p><h3>建立目录</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir 目录名</div></pre></td></tr></table></figure></p>\n<p>递归创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p 目录名/目录名</div></pre></td></tr></table></figure>\n<p><h3>切换目录</h3><br>进入当前用户的家目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~</div></pre></td></tr></table></figure>\n<p><h3>清屏</h3><br>control + l</p>\n<p><h3>查看debian版本</h3><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">more /etc/debian_version</div></pre></td></tr></table></figure></p>\n<p><h3>查看内核版本</h3><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">uname -a</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"linux文件","date":"2016-10-20T12:55:40.000Z","_content":"linux文件\n<!-- more -->\n\n<h2>文件读写</h2>\n<h3>读取</h3>\n显示前n行\n```bash\nhead -n \n```\n\n\n<h2>文件权限</h2>\n\n```bash\ndrwxr-xr-x 4 shirly shirly 4096 Oct 20 17:16 Desktop\n文件类型和权限 i-node连接数 所有者 所属用户组 文件大小 文件ctime或者mtime 文件名\n\n第一组 d     文件类型               \n第二组 rwx   所有者权限                           \n第三组 r-x   所属组权限\n第四组 r-x   其他人权限\n```\nr 读 w写 x执行\n\n<h2>chmod</h2>\nLinux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以藉以控制文件如何被他人所调用。\n使用权限 : 所有使用者\n语法\n\n```bash\nchmod [-cfvR] [--help] [--version] mode file...\n```\n参数说明\nmode : 权限设定字串，格式如下 :\n\n```bash\n[ugoa...][[+-=][rwxX]...][,...]\n```\n其中：\n+ u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。\n+ + 表示增加权限、- 表示取消权限、= 表示唯一设定权限。\n+ r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。\n+ -c : 若该文件权限确实已经更改，才显示其更改动作\n+ -f : 若该文件权限无法被更改也不要显示错误讯息\n+ -v : 显示权限变更的详细资料\n+ -R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)\n+ --help : 显示辅助说明\n+ --version : 显示版本\n实例\n\n```bash\n将文件 file1.txt 设为所有人皆可读取 :\nchmod ugo+r file1.txt\n将文件 file1.txt 设为所有人皆可读取 :\nchmod a+r file1.txt\n将文件 file1.txt 与 file2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :\nchmod ug+w,o-w file1.txt file2.txt\n将 ex1.py 设定为只有该文件拥有者可以执行 :\nchmod u+x ex1.py\n将目前目录下的所有文件与子目录皆设为任何人可读取 :\nchmod -R a+r *\n```\n此外chmod也可以用数字来表示权限如 :\n\n```bash\nchmod 777 file\n```\n语法为：\n\n```bash\nchmod abc file\n```\n其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。\nr=4，w=2，x=1\n若要rwx属性则4+2+1=7；\n若要rw-属性则4+2=6；\n若要r-x属性则4+1=5。\nchmod a=rwx file\n和\nchmod 777 file\n效果相同\nchmod ug=rwx,o=x file\n和\nchmod 771 file\n\n若用chmod 4755 filename可使此程序具有root的权限\n\n\n使用chown命令可以修改文件或目录所属的用户：\n```bash\n命令：chown 用户 目录或文件名\n例如：chown qq /home/qq  (把home目录下的qq目录的拥有者改为qq用户) \n```\n```bash\n使用chgrp命令可以修改文件或目录所属的组：\n命令：chgrp 组 目录或文件名\n例如：chgrp qq /home/qq  (把home目录下的qq目录的所属组改为qq组)\n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/system/linux文件权限.md","raw":"---\ntitle: linux文件\ndate: 2016-10-20 20:55:40\ncategories: linux\n---\nlinux文件\n<!-- more -->\n\n<h2>文件读写</h2>\n<h3>读取</h3>\n显示前n行\n```bash\nhead -n \n```\n\n\n<h2>文件权限</h2>\n\n```bash\ndrwxr-xr-x 4 shirly shirly 4096 Oct 20 17:16 Desktop\n文件类型和权限 i-node连接数 所有者 所属用户组 文件大小 文件ctime或者mtime 文件名\n\n第一组 d     文件类型               \n第二组 rwx   所有者权限                           \n第三组 r-x   所属组权限\n第四组 r-x   其他人权限\n```\nr 读 w写 x执行\n\n<h2>chmod</h2>\nLinux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以藉以控制文件如何被他人所调用。\n使用权限 : 所有使用者\n语法\n\n```bash\nchmod [-cfvR] [--help] [--version] mode file...\n```\n参数说明\nmode : 权限设定字串，格式如下 :\n\n```bash\n[ugoa...][[+-=][rwxX]...][,...]\n```\n其中：\n+ u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。\n+ + 表示增加权限、- 表示取消权限、= 表示唯一设定权限。\n+ r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。\n+ -c : 若该文件权限确实已经更改，才显示其更改动作\n+ -f : 若该文件权限无法被更改也不要显示错误讯息\n+ -v : 显示权限变更的详细资料\n+ -R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)\n+ --help : 显示辅助说明\n+ --version : 显示版本\n实例\n\n```bash\n将文件 file1.txt 设为所有人皆可读取 :\nchmod ugo+r file1.txt\n将文件 file1.txt 设为所有人皆可读取 :\nchmod a+r file1.txt\n将文件 file1.txt 与 file2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :\nchmod ug+w,o-w file1.txt file2.txt\n将 ex1.py 设定为只有该文件拥有者可以执行 :\nchmod u+x ex1.py\n将目前目录下的所有文件与子目录皆设为任何人可读取 :\nchmod -R a+r *\n```\n此外chmod也可以用数字来表示权限如 :\n\n```bash\nchmod 777 file\n```\n语法为：\n\n```bash\nchmod abc file\n```\n其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。\nr=4，w=2，x=1\n若要rwx属性则4+2+1=7；\n若要rw-属性则4+2=6；\n若要r-x属性则4+1=5。\nchmod a=rwx file\n和\nchmod 777 file\n效果相同\nchmod ug=rwx,o=x file\n和\nchmod 771 file\n\n若用chmod 4755 filename可使此程序具有root的权限\n\n\n使用chown命令可以修改文件或目录所属的用户：\n```bash\n命令：chown 用户 目录或文件名\n例如：chown qq /home/qq  (把home目录下的qq目录的拥有者改为qq用户) \n```\n```bash\n使用chgrp命令可以修改文件或目录所属的组：\n命令：chgrp 组 目录或文件名\n例如：chgrp qq /home/qq  (把home目录下的qq目录的所属组改为qq组)\n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"system/linux文件权限","published":1,"updated":"2017-03-31T06:05:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9ar008p21xwtnplvhki","content":"<p>linux文件<br><a id=\"more\"></a></p>\n<h2>文件读写</h2><br><h3>读取</h3><br>显示前n行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">head -n</div></pre></td></tr></table></figure><br><br><h2>文件权限</h2>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">drwxr-xr-x 4 shirly shirly 4096 Oct 20 17:16 Desktop</div><div class=\"line\">文件类型和权限 i-node连接数 所有者 所属用户组 文件大小 文件ctime或者mtime 文件名</div><div class=\"line\"></div><div class=\"line\">第一组 d     文件类型               </div><div class=\"line\">第二组 rwx   所有者权限                           </div><div class=\"line\">第三组 r-x   所属组权限</div><div class=\"line\">第四组 r-x   其他人权限</div></pre></td></tr></table></figure>\n<p>r 读 w写 x执行</p>\n<p></p><h2>chmod</h2><br>Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以藉以控制文件如何被他人所调用。<br>使用权限 : 所有使用者<br>语法<p></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod [-cfvR] [--help] [--version] mode file...</div></pre></td></tr></table></figure>\n<p>参数说明<br>mode : 权限设定字串，格式如下 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[ugoa...][[+-=][rwxX]...][,...]</div></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</li>\n<li><ul>\n<li>表示增加权限、- 表示取消权限、= 表示唯一设定权限。</li>\n</ul>\n</li>\n<li>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</li>\n<li>-c : 若该文件权限确实已经更改，才显示其更改动作</li>\n<li>-f : 若该文件权限无法被更改也不要显示错误讯息</li>\n<li>-v : 显示权限变更的详细资料</li>\n<li>-R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)</li>\n<li>–help : 显示辅助说明</li>\n<li>–version : 显示版本<br>实例</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">将文件 file1.txt 设为所有人皆可读取 :</div><div class=\"line\">chmod ugo+r file1.txt</div><div class=\"line\">将文件 file1.txt 设为所有人皆可读取 :</div><div class=\"line\">chmod a+r file1.txt</div><div class=\"line\">将文件 file1.txt 与 file2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :</div><div class=\"line\">chmod ug+w,o-w file1.txt file2.txt</div><div class=\"line\">将 ex1.py 设定为只有该文件拥有者可以执行 :</div><div class=\"line\">chmod u+x ex1.py</div><div class=\"line\">将目前目录下的所有文件与子目录皆设为任何人可读取 :</div><div class=\"line\">chmod -R a+r *</div></pre></td></tr></table></figure>\n<p>此外chmod也可以用数字来表示权限如 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 777 file</div></pre></td></tr></table></figure>\n<p>语法为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod abc file</div></pre></td></tr></table></figure>\n<p>其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。<br>r=4，w=2，x=1<br>若要rwx属性则4+2+1=7；<br>若要rw-属性则4+2=6；<br>若要r-x属性则4+1=5。<br>chmod a=rwx file<br>和<br>chmod 777 file<br>效果相同<br>chmod ug=rwx,o=x file<br>和<br>chmod 771 file</p>\n<p>若用chmod 4755 filename可使此程序具有root的权限</p>\n<p>使用chown命令可以修改文件或目录所属的用户：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">命令：chown 用户 目录或文件名</div><div class=\"line\">例如：chown qq /home/qq  (把home目录下的qq目录的拥有者改为qq用户)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用chgrp命令可以修改文件或目录所属的组：</div><div class=\"line\">命令：chgrp 组 目录或文件名</div><div class=\"line\">例如：chgrp qq /home/qq  (把home目录下的qq目录的所属组改为qq组)</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>linux文件<br>","more":"</p>\n<h2>文件读写</h2><br><h3>读取</h3><br>显示前n行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">head -n</div></pre></td></tr></table></figure><br><br><h2>文件权限</h2>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">drwxr-xr-x 4 shirly shirly 4096 Oct 20 17:16 Desktop</div><div class=\"line\">文件类型和权限 i-node连接数 所有者 所属用户组 文件大小 文件ctime或者mtime 文件名</div><div class=\"line\"></div><div class=\"line\">第一组 d     文件类型               </div><div class=\"line\">第二组 rwx   所有者权限                           </div><div class=\"line\">第三组 r-x   所属组权限</div><div class=\"line\">第四组 r-x   其他人权限</div></pre></td></tr></table></figure>\n<p>r 读 w写 x执行</p>\n<p><h2>chmod</h2><br>Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以藉以控制文件如何被他人所调用。<br>使用权限 : 所有使用者<br>语法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod [-cfvR] [--help] [--version] mode file...</div></pre></td></tr></table></figure>\n<p>参数说明<br>mode : 权限设定字串，格式如下 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[ugoa...][[+-=][rwxX]...][,...]</div></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</li>\n<li><ul>\n<li>表示增加权限、- 表示取消权限、= 表示唯一设定权限。</li>\n</ul>\n</li>\n<li>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</li>\n<li>-c : 若该文件权限确实已经更改，才显示其更改动作</li>\n<li>-f : 若该文件权限无法被更改也不要显示错误讯息</li>\n<li>-v : 显示权限变更的详细资料</li>\n<li>-R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)</li>\n<li>–help : 显示辅助说明</li>\n<li>–version : 显示版本<br>实例</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">将文件 file1.txt 设为所有人皆可读取 :</div><div class=\"line\">chmod ugo+r file1.txt</div><div class=\"line\">将文件 file1.txt 设为所有人皆可读取 :</div><div class=\"line\">chmod a+r file1.txt</div><div class=\"line\">将文件 file1.txt 与 file2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :</div><div class=\"line\">chmod ug+w,o-w file1.txt file2.txt</div><div class=\"line\">将 ex1.py 设定为只有该文件拥有者可以执行 :</div><div class=\"line\">chmod u+x ex1.py</div><div class=\"line\">将目前目录下的所有文件与子目录皆设为任何人可读取 :</div><div class=\"line\">chmod -R a+r *</div></pre></td></tr></table></figure>\n<p>此外chmod也可以用数字来表示权限如 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 777 file</div></pre></td></tr></table></figure>\n<p>语法为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod abc file</div></pre></td></tr></table></figure>\n<p>其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。<br>r=4，w=2，x=1<br>若要rwx属性则4+2+1=7；<br>若要rw-属性则4+2=6；<br>若要r-x属性则4+1=5。<br>chmod a=rwx file<br>和<br>chmod 777 file<br>效果相同<br>chmod ug=rwx,o=x file<br>和<br>chmod 771 file</p>\n<p>若用chmod 4755 filename可使此程序具有root的权限</p>\n<p>使用chown命令可以修改文件或目录所属的用户：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">命令：chown 用户 目录或文件名</div><div class=\"line\">例如：chown qq /home/qq  (把home目录下的qq目录的拥有者改为qq用户)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用chgrp命令可以修改文件或目录所属的组：</div><div class=\"line\">命令：chgrp 组 目录或文件名</div><div class=\"line\">例如：chgrp qq /home/qq  (把home目录下的qq目录的所属组改为qq组)</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"linux环境变量","date":"2017-03-21T03:26:44.000Z","_content":"linux环境变量\n<!-- more -->\n\n<h2>命令</h2>\n<h3>source 命令</h3>\n重新加载配置文件\n```\nsource 配置文件\n```\n或\n```\n. 配置文件\n```\n\n+ .  代表 source\n+ ./ 代表 当前目录\n\n<h3>umask 命令</h3>\n查看系统默认权限\n```bash\numask\n```\n\n+ r 4\n+ w 2\n+ x 1\n\n<h2>登录后的配置文件</h2>\n+ /etc/profile         对所有用户起作用\n+ /etc/profile.d/*.sh  对所有用户起作用\n+ /etc/bashrc          对所有用户起作用\n+ ~./bash_profile      对所属的用户起作用\n+ ~./bashrc            对所属的用户起作用\n\n<h2>退出登录后的配置文件</h2>\n+ ~./bash_logout      对所属的用户起作用\n\n\n<h2>配置文件加载顺序</h2>\n<img src=\"/images/47.png\" width=\"800\" height=\"363\" />\n\n<h3>正常过程</h3>\n<img src=\"/images/48.png\" width=\"800\" height=\"363\" />\n\n<h3>su切换过程</h3>\n<img src=\"/images/49.png\" width=\"800\" height=\"363\" />\n\n<h2>/etc/profile 的作用</h2>\n+ user变量\n+ logname变量\n+ mail变量\n+ path变量\n+ hostname变量\n+ histsize变量\n+ umask\n+ 调用/etc/profile.d/*.sh文件\n\n<h2>/etc/bashrc 的作用</h2>\n+ ps1变量\n+ umask\n+ path变量\n+ 调用/etc/profile.d/*.sh文件\n\n\n<h2>/etc/issue</h2>\n<img src=\"/images/50.png\" width=\"800\" height=\"460\" />\n\n<h2>shell中的变量</h2>\n+ 脚本 中的 自定义变量\n+ 环境变量 中的 局部环境变量\n+ 环境变量 中的 全局环境变量\n\n<h3>自定义变量</h3>\n+ 合法字符：字符 数字 下划线\n+ 字符数量<=20\n+ <font color=#FF6666>区分大小写</font>\n\n<h4>声明变量</h4>\n变量名 = 变量值\n```bash\n var = 2 \n```\n<h4>变量值得类型</h4>\n自动分配 数字 字符串 日期 数组\n\n<h4>调用方式</h4>\n$+变量名 \n```bash \n$var\n```\n<h4>作用范围</h4>\n脚本生存期内\n<h3>环境变量</h3>\n查看所有的环境变量\n```bash\nenv\n```\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/system/linux环境变量.md","raw":"---\ntitle: linux环境变量\ndate: 2017-03-21 11:26:44\ncategories: linux\n---\nlinux环境变量\n<!-- more -->\n\n<h2>命令</h2>\n<h3>source 命令</h3>\n重新加载配置文件\n```\nsource 配置文件\n```\n或\n```\n. 配置文件\n```\n\n+ .  代表 source\n+ ./ 代表 当前目录\n\n<h3>umask 命令</h3>\n查看系统默认权限\n```bash\numask\n```\n\n+ r 4\n+ w 2\n+ x 1\n\n<h2>登录后的配置文件</h2>\n+ /etc/profile         对所有用户起作用\n+ /etc/profile.d/*.sh  对所有用户起作用\n+ /etc/bashrc          对所有用户起作用\n+ ~./bash_profile      对所属的用户起作用\n+ ~./bashrc            对所属的用户起作用\n\n<h2>退出登录后的配置文件</h2>\n+ ~./bash_logout      对所属的用户起作用\n\n\n<h2>配置文件加载顺序</h2>\n<img src=\"/images/47.png\" width=\"800\" height=\"363\" />\n\n<h3>正常过程</h3>\n<img src=\"/images/48.png\" width=\"800\" height=\"363\" />\n\n<h3>su切换过程</h3>\n<img src=\"/images/49.png\" width=\"800\" height=\"363\" />\n\n<h2>/etc/profile 的作用</h2>\n+ user变量\n+ logname变量\n+ mail变量\n+ path变量\n+ hostname变量\n+ histsize变量\n+ umask\n+ 调用/etc/profile.d/*.sh文件\n\n<h2>/etc/bashrc 的作用</h2>\n+ ps1变量\n+ umask\n+ path变量\n+ 调用/etc/profile.d/*.sh文件\n\n\n<h2>/etc/issue</h2>\n<img src=\"/images/50.png\" width=\"800\" height=\"460\" />\n\n<h2>shell中的变量</h2>\n+ 脚本 中的 自定义变量\n+ 环境变量 中的 局部环境变量\n+ 环境变量 中的 全局环境变量\n\n<h3>自定义变量</h3>\n+ 合法字符：字符 数字 下划线\n+ 字符数量<=20\n+ <font color=#FF6666>区分大小写</font>\n\n<h4>声明变量</h4>\n变量名 = 变量值\n```bash\n var = 2 \n```\n<h4>变量值得类型</h4>\n自动分配 数字 字符串 日期 数组\n\n<h4>调用方式</h4>\n$+变量名 \n```bash \n$var\n```\n<h4>作用范围</h4>\n脚本生存期内\n<h3>环境变量</h3>\n查看所有的环境变量\n```bash\nenv\n```\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"system/linux环境变量","published":1,"updated":"2017-03-22T04:10:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9as008u21xwjix7986u","content":"<p>linux环境变量<br><a id=\"more\"></a></p>\n<p></p><h2>命令</h2><p></p>\n<p></p><h3>source 命令</h3><br>重新加载配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source 配置文件</div></pre></td></tr></table></figure><p></p>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">. 配置文件</div></pre></td></tr></table></figure></p>\n<ul>\n<li>.  代表 source</li>\n<li>./ 代表 当前目录</li>\n</ul>\n<p></p><h3>umask 命令</h3><br>查看系统默认权限<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">umask</span></div></pre></td></tr></table></figure><p></p>\n<ul>\n<li>r 4</li>\n<li>w 2</li>\n<li>x 1</li>\n</ul>\n<p></p><h2>登录后的配置文件</h2><p></p>\n<ul>\n<li>/etc/profile         对所有用户起作用</li>\n<li>/etc/profile.d/*.sh  对所有用户起作用</li>\n<li>/etc/bashrc          对所有用户起作用</li>\n<li>~./bash_profile      对所属的用户起作用</li>\n<li>~./bashrc            对所属的用户起作用</li>\n</ul>\n<p></p><h2>退出登录后的配置文件</h2><p></p>\n<ul>\n<li>~./bash_logout      对所属的用户起作用</li>\n</ul>\n<p></p><h2>配置文件加载顺序</h2><br><img src=\"/images/47.png\" width=\"800\" height=\"363\"><p></p>\n<p></p><h3>正常过程</h3><br><img src=\"/images/48.png\" width=\"800\" height=\"363\"><p></p>\n<p></p><h3>su切换过程</h3><br><img src=\"/images/49.png\" width=\"800\" height=\"363\"><p></p>\n<p></p><h2>/etc/profile 的作用</h2><p></p>\n<ul>\n<li>user变量</li>\n<li>logname变量</li>\n<li>mail变量</li>\n<li>path变量</li>\n<li>hostname变量</li>\n<li>histsize变量</li>\n<li>umask</li>\n<li>调用/etc/profile.d/*.sh文件</li>\n</ul>\n<p></p><h2>/etc/bashrc 的作用</h2><p></p>\n<ul>\n<li>ps1变量</li>\n<li>umask</li>\n<li>path变量</li>\n<li>调用/etc/profile.d/*.sh文件</li>\n</ul>\n<p></p><h2>/etc/issue</h2><br><img src=\"/images/50.png\" width=\"800\" height=\"460\"><p></p>\n<p></p><h2>shell中的变量</h2><p></p>\n<ul>\n<li>脚本 中的 自定义变量</li>\n<li>环境变量 中的 局部环境变量</li>\n<li>环境变量 中的 全局环境变量</li>\n</ul>\n<p></p><h3>自定义变量</h3><p></p>\n<ul>\n<li>合法字符：字符 数字 下划线</li>\n<li>字符数量&lt;=20</li>\n<li><font color=\"#FF6666\">区分大小写</font>\n\n</li>\n</ul>\n<p></p><h4>声明变量</h4><br>变量名 = 变量值<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var = 2</div></pre></td></tr></table></figure><p></p>\n<p></p><h4>变量值得类型</h4><br>自动分配 数字 字符串 日期 数组<p></p>\n<p></p><h4>调用方式</h4><br>$+变量名<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$var</span></div></pre></td></tr></table></figure><p></p>\n<p></p><h4>作用范围</h4><br>脚本生存期内<p></p>\n<p></p><h3>环境变量</h3><br>查看所有的环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">env</div></pre></td></tr></table></figure><p></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>linux环境变量<br>","more":"</p>\n<p><h2>命令</h2></p>\n<p><h3>source 命令</h3><br>重新加载配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source 配置文件</div></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">. 配置文件</div></pre></td></tr></table></figure></p>\n<ul>\n<li>.  代表 source</li>\n<li>./ 代表 当前目录</li>\n</ul>\n<p><h3>umask 命令</h3><br>查看系统默认权限<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">umask</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>r 4</li>\n<li>w 2</li>\n<li>x 1</li>\n</ul>\n<p><h2>登录后的配置文件</h2></p>\n<ul>\n<li>/etc/profile         对所有用户起作用</li>\n<li>/etc/profile.d/*.sh  对所有用户起作用</li>\n<li>/etc/bashrc          对所有用户起作用</li>\n<li>~./bash_profile      对所属的用户起作用</li>\n<li>~./bashrc            对所属的用户起作用</li>\n</ul>\n<p><h2>退出登录后的配置文件</h2></p>\n<ul>\n<li>~./bash_logout      对所属的用户起作用</li>\n</ul>\n<p><h2>配置文件加载顺序</h2><br><img src=\"/images/47.png\" width=\"800\" height=\"363\" /></p>\n<p><h3>正常过程</h3><br><img src=\"/images/48.png\" width=\"800\" height=\"363\" /></p>\n<p><h3>su切换过程</h3><br><img src=\"/images/49.png\" width=\"800\" height=\"363\" /></p>\n<p><h2>/etc/profile 的作用</h2></p>\n<ul>\n<li>user变量</li>\n<li>logname变量</li>\n<li>mail变量</li>\n<li>path变量</li>\n<li>hostname变量</li>\n<li>histsize变量</li>\n<li>umask</li>\n<li>调用/etc/profile.d/*.sh文件</li>\n</ul>\n<p><h2>/etc/bashrc 的作用</h2></p>\n<ul>\n<li>ps1变量</li>\n<li>umask</li>\n<li>path变量</li>\n<li>调用/etc/profile.d/*.sh文件</li>\n</ul>\n<p><h2>/etc/issue</h2><br><img src=\"/images/50.png\" width=\"800\" height=\"460\" /></p>\n<p><h2>shell中的变量</h2></p>\n<ul>\n<li>脚本 中的 自定义变量</li>\n<li>环境变量 中的 局部环境变量</li>\n<li>环境变量 中的 全局环境变量</li>\n</ul>\n<p><h3>自定义变量</h3></p>\n<ul>\n<li>合法字符：字符 数字 下划线</li>\n<li>字符数量&lt;=20</li>\n<li><font color=#FF6666>区分大小写</font>\n\n</li>\n</ul>\n<p><h4>声明变量</h4><br>变量名 = 变量值<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var = 2</div></pre></td></tr></table></figure></p>\n<p><h4>变量值得类型</h4><br>自动分配 数字 字符串 日期 数组</p>\n<p><h4>调用方式</h4><br>$+变量名<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$var</span></div></pre></td></tr></table></figure></p>\n<p><h4>作用范围</h4><br>脚本生存期内</p>\n<p><h3>环境变量</h3><br>查看所有的环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">env</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"linux用户管理","date":"2016-10-20T07:26:13.000Z","_content":"linux用户管理\n<!-- more -->\n\n<h2>查看所有的用户组</h2>\n```mark\ncat /etc/group\n```\n```mark\ndeploy :    x       : 1000  :\n组名称  : 组密码占位符 : 组编号 : 组中用户名列表\n```\n\n<h2>查看所有的用户组组密码</h2>\n```mark\ncat /etc/gshadow\n```\n```mark\ndeploy :   ！  :         :\n组名称  : 组密码 : 组管理者 : 组中用户名列表\n```\n\n<h2>查看所有的用户</h2>\n```mark\ncat /etc/passwd\n```\n```mark\n deploy :    x     :   1000  :  1000    :     ,,,    : /home/deploy : /bin/bash\n  用户名 : 密码占位符 : 用户编号 : 用户组编号 : 用户注释信息 : 用户主目录    : shell类型\n```\n<h2>查看所有的用户密码</h2>\n```mark\ncat /etc/shadow\n```\n```mark\n deploy : $6$L :17095:0:99999:7:::\n\n  用户名 : 密码 :      : :     : :::\n```\n<h2>添加用户组</h2>\n```mark\ngroupadd groupname\n```\n指定用户组编号\n```mark\ngroupadd -g groupnumber groupname\n```\n\n<h2>修改用户组组名</h2>\n```mark\ngroupmod -n newgroupname oldgroupname\n```\n\n<h2>修改用户组编号</h2>\n```mark\ngroupmod -g groupnumber groupname\n```\n\n<h2>删除用户组</h2>\n```mark\ngroupdel groupname\n```\n\n<h2>添加用户</h2>\n\n```mark\nuseradd username\nadduser username 推荐\n```\nUbuntu系列linux useradd命令创建的用户属于三无用户 ，不能登录图形界面，在/home/下创建用户所属者所属组的同名目录，就可登录图形界面\n\n指定用户组\n\n```mark\nuseradd -g groupname username\n```\n指定用户个人文件夹\n\n```mark\nuseradd -d /home/xxx username\n```\n\n<h2>修改用户信息</h2>\n修改用户名\n\n```mark\nusermod -l newUserName oldUserName\n```\n修改用户的用户组\n\n```mark\nusermod -g groupname username\n```\n修改用户文件夹\n\n```mark\nusermod -d /home/xxx usernaem\n```\n修改用户注释信息\n\n```mark\nusermod -c userinfo username\n```\n\n<h2>删除用户</h2>\n只删除用户保留用户文件\n\n```mark\nuserdel username\n```\n删除用户及用户相关文件\n\n```mark\nuserdel -r username\n```\n<h2>禁止root用户以外的用户登录</h2>\ntouch /etc/nologin\n\n<h2>锁定账户</h2>\npasswd -l username\n\n<h2>解锁账户</h2>\npasswd -u username\n\n<h2>清除账户密码</h2>\npasswd -d username\n可以无密码登录\n\n<h2>设置密码</h2>\npasswd username\n\n<h2>添加附属组</h2>\ngpasswd -a username groupname\n\n<h2>删除附属组</h2>\ngpasswd -d username groupname\n\n<h2>切换组</h2>\nnewgrp groupname \n\n<h2>改变组密码</h2>\ngpasswd groupname\n\n<h2>切换用户</h2>\nsu username\n\n<h2>显示当前的用户名</h2>\nwhoami\n\n<h2>显示用户信息</h2>\nid username\n\n<h2>显示用户所在的所有组</h2>\ngroups username\n\n<h2>修改用户详细资料</h2>\nchfn username\n\n<h2>显示用户详细资料</h2>\nfinger username\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/system/linux用户管理.md","raw":"---\ntitle: linux用户管理\ndate: 2016-10-20 15:26:13\ncategories: linux\n---\nlinux用户管理\n<!-- more -->\n\n<h2>查看所有的用户组</h2>\n```mark\ncat /etc/group\n```\n```mark\ndeploy :    x       : 1000  :\n组名称  : 组密码占位符 : 组编号 : 组中用户名列表\n```\n\n<h2>查看所有的用户组组密码</h2>\n```mark\ncat /etc/gshadow\n```\n```mark\ndeploy :   ！  :         :\n组名称  : 组密码 : 组管理者 : 组中用户名列表\n```\n\n<h2>查看所有的用户</h2>\n```mark\ncat /etc/passwd\n```\n```mark\n deploy :    x     :   1000  :  1000    :     ,,,    : /home/deploy : /bin/bash\n  用户名 : 密码占位符 : 用户编号 : 用户组编号 : 用户注释信息 : 用户主目录    : shell类型\n```\n<h2>查看所有的用户密码</h2>\n```mark\ncat /etc/shadow\n```\n```mark\n deploy : $6$L :17095:0:99999:7:::\n\n  用户名 : 密码 :      : :     : :::\n```\n<h2>添加用户组</h2>\n```mark\ngroupadd groupname\n```\n指定用户组编号\n```mark\ngroupadd -g groupnumber groupname\n```\n\n<h2>修改用户组组名</h2>\n```mark\ngroupmod -n newgroupname oldgroupname\n```\n\n<h2>修改用户组编号</h2>\n```mark\ngroupmod -g groupnumber groupname\n```\n\n<h2>删除用户组</h2>\n```mark\ngroupdel groupname\n```\n\n<h2>添加用户</h2>\n\n```mark\nuseradd username\nadduser username 推荐\n```\nUbuntu系列linux useradd命令创建的用户属于三无用户 ，不能登录图形界面，在/home/下创建用户所属者所属组的同名目录，就可登录图形界面\n\n指定用户组\n\n```mark\nuseradd -g groupname username\n```\n指定用户个人文件夹\n\n```mark\nuseradd -d /home/xxx username\n```\n\n<h2>修改用户信息</h2>\n修改用户名\n\n```mark\nusermod -l newUserName oldUserName\n```\n修改用户的用户组\n\n```mark\nusermod -g groupname username\n```\n修改用户文件夹\n\n```mark\nusermod -d /home/xxx usernaem\n```\n修改用户注释信息\n\n```mark\nusermod -c userinfo username\n```\n\n<h2>删除用户</h2>\n只删除用户保留用户文件\n\n```mark\nuserdel username\n```\n删除用户及用户相关文件\n\n```mark\nuserdel -r username\n```\n<h2>禁止root用户以外的用户登录</h2>\ntouch /etc/nologin\n\n<h2>锁定账户</h2>\npasswd -l username\n\n<h2>解锁账户</h2>\npasswd -u username\n\n<h2>清除账户密码</h2>\npasswd -d username\n可以无密码登录\n\n<h2>设置密码</h2>\npasswd username\n\n<h2>添加附属组</h2>\ngpasswd -a username groupname\n\n<h2>删除附属组</h2>\ngpasswd -d username groupname\n\n<h2>切换组</h2>\nnewgrp groupname \n\n<h2>改变组密码</h2>\ngpasswd groupname\n\n<h2>切换用户</h2>\nsu username\n\n<h2>显示当前的用户名</h2>\nwhoami\n\n<h2>显示用户信息</h2>\nid username\n\n<h2>显示用户所在的所有组</h2>\ngroups username\n\n<h2>修改用户详细资料</h2>\nchfn username\n\n<h2>显示用户详细资料</h2>\nfinger username\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"system/linux用户管理","published":1,"updated":"2016-10-21T13:14:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9au008x21xwmmkgzf6e","content":"<p>linux用户管理<br><a id=\"more\"></a></p>\n<h2>查看所有的用户组</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/group</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy :    x       : 1000  :</div><div class=\"line\">组名称  : 组密码占位符 : 组编号 : 组中用户名列表</div></pre></td></tr></table></figure><br><br><h2>查看所有的用户组组密码</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/gshadow</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy :   ！  :         :</div><div class=\"line\">组名称  : 组密码 : 组管理者 : 组中用户名列表</div></pre></td></tr></table></figure><br><br><h2>查看所有的用户</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy :    x     :   1000  :  1000    :     ,,,    : /home/deploy : /bin/bash</div><div class=\"line\"> 用户名 : 密码占位符 : 用户编号 : 用户组编号 : 用户注释信息 : 用户主目录    : shell类型</div></pre></td></tr></table></figure><br><br><h2>查看所有的用户密码</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/shadow</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy : $6$L :17095:0:99999:7:::</div><div class=\"line\"></div><div class=\"line\"> 用户名 : 密码 :      : :     : :::</div></pre></td></tr></table></figure><br><br><h2>添加用户组</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupadd groupname</div></pre></td></tr></table></figure><br><br>指定用户组编号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupadd -g groupnumber groupname</div></pre></td></tr></table></figure><br><br><h2>修改用户组组名</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupmod -n newgroupname oldgroupname</div></pre></td></tr></table></figure><br><br><h2>修改用户组编号</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupmod -g groupnumber groupname</div></pre></td></tr></table></figure><br><br><h2>删除用户组</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupdel groupname</div></pre></td></tr></table></figure><br><br><h2>添加用户</h2>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd username</div><div class=\"line\">adduser username 推荐</div></pre></td></tr></table></figure>\n<p>Ubuntu系列linux useradd命令创建的用户属于三无用户 ，不能登录图形界面，在/home/下创建用户所属者所属组的同名目录，就可登录图形界面</p>\n<p>指定用户组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd -g groupname username</div></pre></td></tr></table></figure>\n<p>指定用户个人文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd -d /home/xxx username</div></pre></td></tr></table></figure>\n<p></p><h2>修改用户信息</h2><br>修改用户名<p></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">usermod -l newUserName oldUserName</div></pre></td></tr></table></figure>\n<p>修改用户的用户组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">usermod -g groupname username</div></pre></td></tr></table></figure>\n<p>修改用户文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">usermod -d /home/xxx usernaem</div></pre></td></tr></table></figure>\n<p>修改用户注释信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">usermod -c userinfo username</div></pre></td></tr></table></figure>\n<p></p><h2>删除用户</h2><br>只删除用户保留用户文件<p></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">userdel username</div></pre></td></tr></table></figure>\n<p>删除用户及用户相关文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">userdel -r username</div></pre></td></tr></table></figure>\n<p></p><h2>禁止root用户以外的用户登录</h2><br>touch /etc/nologin<p></p>\n<p></p><h2>锁定账户</h2><br>passwd -l username<p></p>\n<p></p><h2>解锁账户</h2><br>passwd -u username<p></p>\n<p></p><h2>清除账户密码</h2><br>passwd -d username<br>可以无密码登录<p></p>\n<p></p><h2>设置密码</h2><br>passwd username<p></p>\n<p></p><h2>添加附属组</h2><br>gpasswd -a username groupname<p></p>\n<p></p><h2>删除附属组</h2><br>gpasswd -d username groupname<p></p>\n<p></p><h2>切换组</h2><br>newgrp groupname <p></p>\n<p></p><h2>改变组密码</h2><br>gpasswd groupname<p></p>\n<p></p><h2>切换用户</h2><br>su username<p></p>\n<p></p><h2>显示当前的用户名</h2><br>whoami<p></p>\n<p></p><h2>显示用户信息</h2><br>id username<p></p>\n<p></p><h2>显示用户所在的所有组</h2><br>groups username<p></p>\n<p></p><h2>修改用户详细资料</h2><br>chfn username<p></p>\n<p></p><h2>显示用户详细资料</h2><br>finger username<p></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>linux用户管理<br>","more":"</p>\n<h2>查看所有的用户组</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/group</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy :    x       : 1000  :</div><div class=\"line\">组名称  : 组密码占位符 : 组编号 : 组中用户名列表</div></pre></td></tr></table></figure><br><br><h2>查看所有的用户组组密码</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/gshadow</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy :   ！  :         :</div><div class=\"line\">组名称  : 组密码 : 组管理者 : 组中用户名列表</div></pre></td></tr></table></figure><br><br><h2>查看所有的用户</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy :    x     :   1000  :  1000    :     ,,,    : /home/deploy : /bin/bash</div><div class=\"line\"> 用户名 : 密码占位符 : 用户编号 : 用户组编号 : 用户注释信息 : 用户主目录    : shell类型</div></pre></td></tr></table></figure><br><br><h2>查看所有的用户密码</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/shadow</div></pre></td></tr></table></figure><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy : $6$L :17095:0:99999:7:::</div><div class=\"line\"></div><div class=\"line\"> 用户名 : 密码 :      : :     : :::</div></pre></td></tr></table></figure><br><br><h2>添加用户组</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupadd groupname</div></pre></td></tr></table></figure><br><br>指定用户组编号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupadd -g groupnumber groupname</div></pre></td></tr></table></figure><br><br><h2>修改用户组组名</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupmod -n newgroupname oldgroupname</div></pre></td></tr></table></figure><br><br><h2>修改用户组编号</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupmod -g groupnumber groupname</div></pre></td></tr></table></figure><br><br><h2>删除用户组</h2><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupdel groupname</div></pre></td></tr></table></figure><br><br><h2>添加用户</h2>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd username</div><div class=\"line\">adduser username 推荐</div></pre></td></tr></table></figure>\n<p>Ubuntu系列linux useradd命令创建的用户属于三无用户 ，不能登录图形界面，在/home/下创建用户所属者所属组的同名目录，就可登录图形界面</p>\n<p>指定用户组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd -g groupname username</div></pre></td></tr></table></figure>\n<p>指定用户个人文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd -d /home/xxx username</div></pre></td></tr></table></figure>\n<p><h2>修改用户信息</h2><br>修改用户名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">usermod -l newUserName oldUserName</div></pre></td></tr></table></figure>\n<p>修改用户的用户组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">usermod -g groupname username</div></pre></td></tr></table></figure>\n<p>修改用户文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">usermod -d /home/xxx usernaem</div></pre></td></tr></table></figure>\n<p>修改用户注释信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">usermod -c userinfo username</div></pre></td></tr></table></figure>\n<p><h2>删除用户</h2><br>只删除用户保留用户文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">userdel username</div></pre></td></tr></table></figure>\n<p>删除用户及用户相关文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">userdel -r username</div></pre></td></tr></table></figure>\n<p><h2>禁止root用户以外的用户登录</h2><br>touch /etc/nologin</p>\n<p><h2>锁定账户</h2><br>passwd -l username</p>\n<p><h2>解锁账户</h2><br>passwd -u username</p>\n<p><h2>清除账户密码</h2><br>passwd -d username<br>可以无密码登录</p>\n<p><h2>设置密码</h2><br>passwd username</p>\n<p><h2>添加附属组</h2><br>gpasswd -a username groupname</p>\n<p><h2>删除附属组</h2><br>gpasswd -d username groupname</p>\n<p><h2>切换组</h2><br>newgrp groupname </p>\n<p><h2>改变组密码</h2><br>gpasswd groupname</p>\n<p><h2>切换用户</h2><br>su username</p>\n<p><h2>显示当前的用户名</h2><br>whoami</p>\n<p><h2>显示用户信息</h2><br>id username</p>\n<p><h2>显示用户所在的所有组</h2><br>groups username</p>\n<p><h2>修改用户详细资料</h2><br>chfn username</p>\n<p><h2>显示用户详细资料</h2><br>finger username</p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"linux系统目录结构","date":"2016-10-20T05:04:57.000Z","_content":"linux系统目录结构\n<!-- more -->\n\n<img src=\"/images/35.png\" width=\"800\" height=\"368\" />\n+ /bin：bin是Binary的缩写, 这个目录存放着最经常使用的命令。\n+ /boot：这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。\n+ /dev ：dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。\n+ /etc：这个目录用来存放所有的系统管理所需要的配置文件和子目录。\n+ /home：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。\n+ /lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。\n+ /lost+found：\n这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。\n+ /media linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。\n+ /mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。\n+ /opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。\n+ /proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：\necho 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all\n+ /root：该目录为系统管理员，也称作超级权限者的用户主目录。\n+ /sbin：s就是SuperUser的意思，这里存放的是系统管理员使用的系统管理程序。\n+ /selinux：这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。\n+ /srv：该目录存放一些服务启动之后需要提取的数据。\n+ /sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。\nsysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。\n该文件系统是内核设备树的一个直观反映。\n当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。\n+ /tmp：这个目录是用来存放一些临时文件的。\n+ /usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。\n+ /usr/bin：\n系统用户使用的应用程序。\n+ /usr/sbin：\n超级用户使用的比较高级的管理程序和系统守护程序。\n+ /usr/src：内核源代码默认的放置目录。\n+ /var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。\n在linux系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。\n/etc： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。\n/bin, /sbin, /usr/bin, /usr/sbin: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。\n值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。\n/var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。\n\n\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/system/linux系统目录结构.md","raw":"---\ntitle: linux系统目录结构\ndate: 2016-10-20 13:04:57\ncategories: linux\n---\nlinux系统目录结构\n<!-- more -->\n\n<img src=\"/images/35.png\" width=\"800\" height=\"368\" />\n+ /bin：bin是Binary的缩写, 这个目录存放着最经常使用的命令。\n+ /boot：这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。\n+ /dev ：dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。\n+ /etc：这个目录用来存放所有的系统管理所需要的配置文件和子目录。\n+ /home：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。\n+ /lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。\n+ /lost+found：\n这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。\n+ /media linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。\n+ /mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。\n+ /opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。\n+ /proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：\necho 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all\n+ /root：该目录为系统管理员，也称作超级权限者的用户主目录。\n+ /sbin：s就是SuperUser的意思，这里存放的是系统管理员使用的系统管理程序。\n+ /selinux：这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。\n+ /srv：该目录存放一些服务启动之后需要提取的数据。\n+ /sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。\nsysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。\n该文件系统是内核设备树的一个直观反映。\n当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。\n+ /tmp：这个目录是用来存放一些临时文件的。\n+ /usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。\n+ /usr/bin：\n系统用户使用的应用程序。\n+ /usr/sbin：\n超级用户使用的比较高级的管理程序和系统守护程序。\n+ /usr/src：内核源代码默认的放置目录。\n+ /var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。\n在linux系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。\n/etc： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。\n/bin, /sbin, /usr/bin, /usr/sbin: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。\n值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。\n/var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。\n\n\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"system/linux系统目录结构","published":1,"updated":"2016-10-20T05:59:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9aw009221xwu2ttqs7m","content":"<p>linux系统目录结构<br><a id=\"more\"></a></p>\n<p><img src=\"/images/35.png\" width=\"800\" height=\"368\"></p>\n<ul>\n<li>/bin：bin是Binary的缩写, 这个目录存放着最经常使用的命令。</li>\n<li>/boot：这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</li>\n<li>/dev ：dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</li>\n<li>/etc：这个目录用来存放所有的系统管理所需要的配置文件和子目录。</li>\n<li>/home：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li>\n<li>/lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</li>\n<li>/lost+found：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li>\n<li>/media linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li>\n<li>/mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</li>\n<li>/opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</li>\n<li>/proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：<br>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</li>\n<li>/root：该目录为系统管理员，也称作超级权限者的用户主目录。</li>\n<li>/sbin：s就是SuperUser的意思，这里存放的是系统管理员使用的系统管理程序。</li>\n<li>/selinux：这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</li>\n<li>/srv：该目录存放一些服务启动之后需要提取的数据。</li>\n<li>/sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。<br>sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。<br>该文件系统是内核设备树的一个直观反映。<br>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</li>\n<li>/tmp：这个目录是用来存放一些临时文件的。</li>\n<li>/usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。</li>\n<li>/usr/bin：<br>系统用户使用的应用程序。</li>\n<li>/usr/sbin：<br>超级用户使用的比较高级的管理程序和系统守护程序。</li>\n<li>/usr/src：内核源代码默认的放置目录。</li>\n<li>/var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。<br>在linux系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。<br>/etc： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。<br>/bin, /sbin, /usr/bin, /usr/sbin: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。<br>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。<br>/var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。</li>\n</ul>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>linux系统目录结构<br>","more":"</p>\n<p><img src=\"/images/35.png\" width=\"800\" height=\"368\" /></p>\n<ul>\n<li>/bin：bin是Binary的缩写, 这个目录存放着最经常使用的命令。</li>\n<li>/boot：这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</li>\n<li>/dev ：dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</li>\n<li>/etc：这个目录用来存放所有的系统管理所需要的配置文件和子目录。</li>\n<li>/home：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li>\n<li>/lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</li>\n<li>/lost+found：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li>\n<li>/media linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li>\n<li>/mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</li>\n<li>/opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</li>\n<li>/proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：<br>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</li>\n<li>/root：该目录为系统管理员，也称作超级权限者的用户主目录。</li>\n<li>/sbin：s就是SuperUser的意思，这里存放的是系统管理员使用的系统管理程序。</li>\n<li>/selinux：这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</li>\n<li>/srv：该目录存放一些服务启动之后需要提取的数据。</li>\n<li>/sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。<br>sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。<br>该文件系统是内核设备树的一个直观反映。<br>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</li>\n<li>/tmp：这个目录是用来存放一些临时文件的。</li>\n<li>/usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。</li>\n<li>/usr/bin：<br>系统用户使用的应用程序。</li>\n<li>/usr/sbin：<br>超级用户使用的比较高级的管理程序和系统守护程序。</li>\n<li>/usr/src：内核源代码默认的放置目录。</li>\n<li>/var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。<br>在linux系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。<br>/etc： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。<br>/bin, /sbin, /usr/bin, /usr/sbin: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。<br>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。<br>/var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。</li>\n</ul>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"mac显示隐藏文件夹","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n打开终端，输入：defaults write com.apple.finder AppleShowAllFiles -bool true 此命令显示隐藏文件defaults write com.apple.finder AppleShowAllFiles -bool false 此命令关闭显示隐藏文件\n命令运行之后需要重新加载Finder：快捷键option+command+esc，选中Finder，重新启动即可","source":"_posts/system/mac显示隐藏文件夹.md","raw":"---\ntitle: mac显示隐藏文件夹\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n打开终端，输入：defaults write com.apple.finder AppleShowAllFiles -bool true 此命令显示隐藏文件defaults write com.apple.finder AppleShowAllFiles -bool false 此命令关闭显示隐藏文件\n命令运行之后需要重新加载Finder：快捷键option+command+esc，选中Finder，重新启动即可","slug":"system/mac显示隐藏文件夹","published":1,"updated":"2016-10-08T09:09:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9ax009521xwlm5t7jj1","content":"<a id=\"more\"></a>\n<p>打开终端，输入：defaults write com.apple.finder AppleShowAllFiles -bool true 此命令显示隐藏文件defaults write com.apple.finder AppleShowAllFiles -bool false 此命令关闭显示隐藏文件<br>命令运行之后需要重新加载Finder：快捷键option+command+esc，选中Finder，重新启动即可</p>\n","excerpt":"","more":"<p>打开终端，输入：defaults write com.apple.finder AppleShowAllFiles -bool true 此命令显示隐藏文件defaults write com.apple.finder AppleShowAllFiles -bool false 此命令关闭显示隐藏文件<br>命令运行之后需要重新加载Finder：快捷键option+command+esc，选中Finder，重新启动即可</p>"},{"title":"nginx","date":"2016-11-25T03:20:45.000Z","_content":"nginx\n<!-- more -->\n\n```markdown\n\napt-get install nginx\nservice nginx start\nservice nginx stop\n\n\napt-get install openssl\n\n\n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/system/nginx.md","raw":"---\ntitle: nginx\ndate: 2016-11-25 11:20:45\ncategories:\n---\nnginx\n<!-- more -->\n\n```markdown\n\napt-get install nginx\nservice nginx start\nservice nginx stop\n\n\napt-get install openssl\n\n\n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"system/nginx","published":1,"updated":"2016-11-25T03:36:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9ay009821xwn81f2bno","content":"<p>nginx<br><a id=\"more\"></a></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">apt-get install nginx</div><div class=\"line\">service nginx start</div><div class=\"line\">service nginx stop</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">apt-get install openssl</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>nginx<br>","more":"</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">apt-get install nginx</div><div class=\"line\">service nginx start</div><div class=\"line\">service nginx stop</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">apt-get install openssl</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"postgresql","date":"2016-11-18T14:06:40.000Z","_content":"postgresql\n<!-- more -->\n<h3>允许远程访问</h3>\n<h4>一</h4>\npostgresql.conf\n```markdown\n修改\n#listen_addresses ='localhost'为\nlisten_addresses ='*'\n```\n<h4>二</h4>\npg_hba.conf\n```markdown\n添加一行\nhost    all    all    0.0.0.0/0    md5\n这样就是允许全部ip的任意访问了\n```\n\n\n```markdown\ngem install pg -- --with-pg-config=/Applications/Postgres.app/Contents/Version‌​s/9.6/bin/pg_config\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/system/postgresql.md","raw":"---\ntitle: postgresql\ndate: 2016-11-18 22:06:40\ncategories:\n---\npostgresql\n<!-- more -->\n<h3>允许远程访问</h3>\n<h4>一</h4>\npostgresql.conf\n```markdown\n修改\n#listen_addresses ='localhost'为\nlisten_addresses ='*'\n```\n<h4>二</h4>\npg_hba.conf\n```markdown\n添加一行\nhost    all    all    0.0.0.0/0    md5\n这样就是允许全部ip的任意访问了\n```\n\n\n```markdown\ngem install pg -- --with-pg-config=/Applications/Postgres.app/Contents/Version‌​s/9.6/bin/pg_config\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"system/postgresql","published":1,"updated":"2016-11-23T04:06:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9az009b21xw5msd537p","content":"<p>postgresql<br><a id=\"more\"></a></p>\n<p></p><h3>允许远程访问</h3><p></p>\n<p></p><h4>一</h4><br>postgresql.conf<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">修改</div><div class=\"line\"><span class=\"section\">#listen_addresses ='localhost'为</span></div><div class=\"line\">listen_addresses ='*'</div></pre></td></tr></table></figure><p></p>\n<p></p><h4>二</h4><br>pg_hba.conf<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">添加一行</div><div class=\"line\">host    all    all    0.0.0.0/0    md5</div><div class=\"line\">这样就是允许全部ip的任意访问了</div></pre></td></tr></table></figure><p></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install pg -- --with-pg-config=/Applications/Postgres.app/Contents/Version‌​s/9.6/bin/pg_config</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>postgresql<br>","more":"</p>\n<p><h3>允许远程访问</h3></p>\n<p><h4>一</h4><br>postgresql.conf<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">修改</div><div class=\"line\"><span class=\"section\">#listen_addresses ='localhost'为</span></div><div class=\"line\">listen_addresses ='*'</div></pre></td></tr></table></figure></p>\n<p><h4>二</h4><br>pg_hba.conf<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">添加一行</div><div class=\"line\">host    all    all    0.0.0.0/0    md5</div><div class=\"line\">这样就是允许全部ip的任意访问了</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install pg -- --with-pg-config=/Applications/Postgres.app/Contents/Version‌​s/9.6/bin/pg_config</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"ssh","date":"2016-11-15T05:37:55.000Z","_content":"debian下的ssh\n<!-- more -->\n\n<h3>开启ssh服务</h3>\n默认请况下，ubuntu是不允许远程登陆的。（因为服务没有开，可以这么理解。）\n想要用ssh登陆的话，要在需要登陆的系统上启动服务。即，安装ssh的服务器端\n```markdown\n# apt-get install openssh-server\n```\n然后，启动服务。\n```markdown\n# service ssh start\n```\n或者是：\n```markdown\n# /etc/init.d/ssh restart\n```\n<h3>开机自动开启ssh服务</h3>\n修改配置文件/etc/rc.local\n```bash\nvim /etc/rc.local\n```\n加入\n```bash\nservice ssh start\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/system/ssh.md","raw":"---\ntitle: ssh\ndate: 2016-11-15 13:37:55\ncategories: linux\n---\ndebian下的ssh\n<!-- more -->\n\n<h3>开启ssh服务</h3>\n默认请况下，ubuntu是不允许远程登陆的。（因为服务没有开，可以这么理解。）\n想要用ssh登陆的话，要在需要登陆的系统上启动服务。即，安装ssh的服务器端\n```markdown\n# apt-get install openssh-server\n```\n然后，启动服务。\n```markdown\n# service ssh start\n```\n或者是：\n```markdown\n# /etc/init.d/ssh restart\n```\n<h3>开机自动开启ssh服务</h3>\n修改配置文件/etc/rc.local\n```bash\nvim /etc/rc.local\n```\n加入\n```bash\nservice ssh start\n```\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"system/ssh","published":1,"updated":"2017-03-22T09:00:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9b1009e21xwuc0qsi4i","content":"<p>debian下的ssh<br><a id=\"more\"></a></p>\n<p></p><h3>开启ssh服务</h3><br>默认请况下，ubuntu是不允许远程登陆的。（因为服务没有开，可以这么理解。）<br>想要用ssh登陆的话，要在需要登陆的系统上启动服务。即，安装ssh的服务器端<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># apt-get install openssh-server</span></div></pre></td></tr></table></figure><p></p>\n<p>然后，启动服务。<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># service ssh start</span></div></pre></td></tr></table></figure></p>\n<p>或者是：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># /etc/init.d/ssh restart</span></div></pre></td></tr></table></figure></p>\n<p></p><h3>开机自动开启ssh服务</h3><br>修改配置文件/etc/rc.local<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/rc.local</div></pre></td></tr></table></figure><p></p>\n<p>加入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service ssh start</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>debian下的ssh<br>","more":"</p>\n<p><h3>开启ssh服务</h3><br>默认请况下，ubuntu是不允许远程登陆的。（因为服务没有开，可以这么理解。）<br>想要用ssh登陆的话，要在需要登陆的系统上启动服务。即，安装ssh的服务器端<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># apt-get install openssh-server</span></div></pre></td></tr></table></figure></p>\n<p>然后，启动服务。<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># service ssh start</span></div></pre></td></tr></table></figure></p>\n<p>或者是：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># /etc/init.d/ssh restart</span></div></pre></td></tr></table></figure></p>\n<p><h3>开机自动开启ssh服务</h3><br>修改配置文件/etc/rc.local<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/rc.local</div></pre></td></tr></table></figure></p>\n<p>加入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service ssh start</div></pre></td></tr></table></figure></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"supervisor","date":"2016-11-17T06:23:32.000Z","_content":"supervisor\n<!-- more -->\n[http://liyangliang.me/posts/2015/06/using-supervisor/](http://liyangliang.me/posts/2015/06/using-supervisor/)\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/system/supervisor.md","raw":"---\ntitle: supervisor\ndate: 2016-11-17 14:23:32\ncategories:\n---\nsupervisor\n<!-- more -->\n[http://liyangliang.me/posts/2015/06/using-supervisor/](http://liyangliang.me/posts/2015/06/using-supervisor/)\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"system/supervisor","published":1,"updated":"2016-11-17T06:24:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9b2009h21xw3fw8tul5","content":"<p>supervisor<br><a id=\"more\"></a><br><a href=\"http://liyangliang.me/posts/2015/06/using-supervisor/\" target=\"_blank\" rel=\"external\">http://liyangliang.me/posts/2015/06/using-supervisor/</a></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>supervisor<br>","more":"<br><a href=\"http://liyangliang.me/posts/2015/06/using-supervisor/\">http://liyangliang.me/posts/2015/06/using-supervisor/</a></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"sublime text3","date":"2016-10-11T02:39:57.000Z","_content":"关于sublime text的使用 插件配置 \n<!-- more -->\n\nsublime text 安装\n----\n[官网下载https://www.sublimetext.com/](https://www.sublimetext.com/)\n\nconvertToUTF8和ColorPicker快捷键冲突\n----\nconvertoUTF8的默认转换GBK的快捷键 和 ColorPicker打开调色板的快捷键都是ctrl+shift+c 。\n当装了2个插件后小伙伴就会发现都不好使了\n\n解决方法是修改冲突的快捷键\n打开Sublime Text --> Preferences --> Browse Packages，找到ConvertToUTF8文件夹并进入，根据系统修改相应的keymap文件\n<img src=\"/images/6.png\" width=\"800\" height=\"263\" />\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/system/sublime text3.md","raw":"---\ntitle: sublime text3\ndate: 2016-10-11 10:39:57\ncategories: sublime text\n---\n关于sublime text的使用 插件配置 \n<!-- more -->\n\nsublime text 安装\n----\n[官网下载https://www.sublimetext.com/](https://www.sublimetext.com/)\n\nconvertToUTF8和ColorPicker快捷键冲突\n----\nconvertoUTF8的默认转换GBK的快捷键 和 ColorPicker打开调色板的快捷键都是ctrl+shift+c 。\n当装了2个插件后小伙伴就会发现都不好使了\n\n解决方法是修改冲突的快捷键\n打开Sublime Text --> Preferences --> Browse Packages，找到ConvertToUTF8文件夹并进入，根据系统修改相应的keymap文件\n<img src=\"/images/6.png\" width=\"800\" height=\"263\" />\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"system/sublime text3","published":1,"updated":"2016-10-11T03:29:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9b3009k21xwyjpzgz0k","content":"<p>关于sublime text的使用 插件配置<br><a id=\"more\"></a></p>\n<h2 id=\"sublime-text-安装\"><a href=\"#sublime-text-安装\" class=\"headerlink\" title=\"sublime text 安装\"></a>sublime text 安装</h2><p><a href=\"https://www.sublimetext.com/\" target=\"_blank\" rel=\"external\">官网下载https://www.sublimetext.com/</a></p>\n<h2 id=\"convertToUTF8和ColorPicker快捷键冲突\"><a href=\"#convertToUTF8和ColorPicker快捷键冲突\" class=\"headerlink\" title=\"convertToUTF8和ColorPicker快捷键冲突\"></a>convertToUTF8和ColorPicker快捷键冲突</h2><p>convertoUTF8的默认转换GBK的快捷键 和 ColorPicker打开调色板的快捷键都是ctrl+shift+c 。<br>当装了2个插件后小伙伴就会发现都不好使了</p>\n<p>解决方法是修改冲突的快捷键<br>打开Sublime Text –&gt; Preferences –&gt; Browse Packages，找到ConvertToUTF8文件夹并进入，根据系统修改相应的keymap文件<br><img src=\"/images/6.png\" width=\"800\" height=\"263\"></p>\n","excerpt":"<p>关于sublime text的使用 插件配置<br>","more":"</p>\n<h2 id=\"sublime-text-安装\"><a href=\"#sublime-text-安装\" class=\"headerlink\" title=\"sublime text 安装\"></a>sublime text 安装</h2><p><a href=\"https://www.sublimetext.com/\">官网下载https://www.sublimetext.com/</a></p>\n<h2 id=\"convertToUTF8和ColorPicker快捷键冲突\"><a href=\"#convertToUTF8和ColorPicker快捷键冲突\" class=\"headerlink\" title=\"convertToUTF8和ColorPicker快捷键冲突\"></a>convertToUTF8和ColorPicker快捷键冲突</h2><p>convertoUTF8的默认转换GBK的快捷键 和 ColorPicker打开调色板的快捷键都是ctrl+shift+c 。<br>当装了2个插件后小伙伴就会发现都不好使了</p>\n<p>解决方法是修改冲突的快捷键<br>打开Sublime Text –&gt; Preferences –&gt; Browse Packages，找到ConvertToUTF8文件夹并进入，根据系统修改相应的keymap文件<br><img src=\"/images/6.png\" width=\"800\" height=\"263\" /></p>"},{"title":"virtualbox共享文件夹","date":"2016-11-27T10:03:10.000Z","_content":"\n<!-- more -->\n\n```markdown\nsh ./VBoxLinuxAdditions.run\n\nmount -t vboxsf share_with_deiban  /mnt/shared\n\n```\n```markdown\napt-cache search linux-headers-$(uname -r)\n\napt-get install linux-headers-$(uname -r)\n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/system/virtualbox共享文件夹.md","raw":"---\ntitle: virtualbox共享文件夹\ndate: 2016-11-27 18:03:10\ncategories: linux\n---\n\n<!-- more -->\n\n```markdown\nsh ./VBoxLinuxAdditions.run\n\nmount -t vboxsf share_with_deiban  /mnt/shared\n\n```\n```markdown\napt-cache search linux-headers-$(uname -r)\n\napt-get install linux-headers-$(uname -r)\n```\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"system/virtualbox共享文件夹","published":1,"updated":"2016-11-27T10:12:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9b5009m21xwsbflzc4k","content":"<a id=\"more\"></a>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sh ./VBoxLinuxAdditions.run</div><div class=\"line\"></div><div class=\"line\">mount -t vboxsf share<span class=\"emphasis\">_with_</span>deiban  /mnt/shared</div></pre></td></tr></table></figure>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-cache search linux-headers-$(uname -r)</div><div class=\"line\"></div><div class=\"line\">apt-get install linux-headers-$(uname -r)</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"","more":"<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sh ./VBoxLinuxAdditions.run</div><div class=\"line\"></div><div class=\"line\">mount -t vboxsf share<span class=\"emphasis\">_with_</span>deiban  /mnt/shared</div></pre></td></tr></table></figure>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-cache search linux-headers-$(uname -r)</div><div class=\"line\"></div><div class=\"line\">apt-get install linux-headers-$(uname -r)</div></pre></td></tr></table></figure>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"virtualbox安装debian","date":"2016-10-19T07:43:03.000Z","_content":"mac系统下安装virtualbox virtualbox中安装debian\n<!-- more -->\n\n<h2>下载virtualbox</h2>\n[官网下载](https://www.virtualbox.org/)\n\n<h2>安装virtualbox</h2>\n<h3>打开 双击VirtualBox.pkg</h3>\n<img src=\"/images/9.png\" width=\"800\" height=\"465\" />\n\n<h3>运行一个测试程序 点击继续</h3>\n<img src=\"/images/10.png\" width=\"800\" height=\"465\" />\n一路继续 安装完成\n\n<h2>新建一个虚拟电脑</h2>\n<h3>点击新建 命名 选择相应的类型和版本</h3>\n<img src=\"/images/11.png\" width=\"800\" height=\"586\" />\n\n<h3>内存大小</h3>\n<img src=\"/images/12.png\" width=\"800\" height=\"586\" />\n\n<h3>虚拟硬盘</h3>\n<img src=\"/images/13.png\" width=\"800\" height=\"586\" />\n\n<h3>虚拟硬盘文件类型</h3>\n<img src=\"/images/14.png\" width=\"800\" height=\"586\" />\n\n<h3>动态分配</h3>\n<img src=\"/images/15.png\" width=\"800\" height=\"586\" />\n\n<h3>保存的位置</h3>\n<img src=\"/images/16.png\" width=\"800\" height=\"586\" />\n这是虚拟电脑就一创建成功\n\n<h2>安装debian系统</h2>\n<h3>下载debian镜像</h3>\n[官网下载](https://www.debian.org/index.zh-cn.html)\n\n选择<font color=#FF6666> 取得 Debian </font>下的<font color=#FF6666> CD/USB ISO 映像</font>\n\n选择<font color=#FF6666> 通过 BitTorrent 下载光盘映像文件</font>\n\n选择<font color=#FF6666>CD</font>下的<font color=#FF6666>amd64</font>\n\n选择<font color=#FF6666> debian-8.6.0-amd64-xfce-CD-1.iso.torrent</font>\n\n<h3>选择虚拟盘</h3>\n<img src=\"/images/17.png\" width=\"800\" height=\"586\" />\n\n<h3>启动</h3>\n\n<h3>Graphical install</h3>\n<img src=\"/images/18.png\" width=\"800\" height=\"648\" />\n\n<h3>设置语言</h3>\n<img src=\"/images/19.png\" width=\"800\" height=\"648\" />\n\n<h3>设置位置</h3>\n<img src=\"/images/20.png\" width=\"800\" height=\"648\" />\n\n<h3>设置键盘</h3>\n<img src=\"/images/21.png\" width=\"800\" height=\"648\" />\n\n<h3>设置网络 可不变</h3>\n<img src=\"/images/22.png\" width=\"800\" height=\"648\" />\n\n<h3>设置网络 可不填</h3>\n<img src=\"/images/23.png\" width=\"800\" height=\"648\" />\n\n<h3>设置root用户密码</h3>\n<img src=\"/images/24.png\" width=\"800\" height=\"648\" />\n\n<h3>创建一个新用户</h3>\n<img src=\"/images/25.png\" width=\"800\" height=\"648\" />\n\n<h3>确认新用户名字</h3>\n\n<h3>设置新用户用户密码</h3>\n<img src=\"/images/26.png\" width=\"800\" height=\"648\" />\n\n<img src=\"/images/27.png\" width=\"800\" height=\"648\" />\n<img src=\"/images/28.png\" width=\"800\" height=\"648\" />\n<img src=\"/images/29.png\" width=\"800\" height=\"648\" />\n<img src=\"/images/30.png\" width=\"800\" height=\"648\" />\n<img src=\"/images/31.png\" width=\"800\" height=\"648\" />\n<img src=\"/images/32.png\" width=\"800\" height=\"648\" />\n<img src=\"/images/33.png\" width=\"800\" height=\"648\" />\n<img src=\"/images/34.png\" width=\"800\" height=\"648\" />\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/system/virtualbox安装debian.md","raw":"---\ntitle: virtualbox安装debian\ndate: 2016-10-19 15:43:03\ncategories: linux\n---\nmac系统下安装virtualbox virtualbox中安装debian\n<!-- more -->\n\n<h2>下载virtualbox</h2>\n[官网下载](https://www.virtualbox.org/)\n\n<h2>安装virtualbox</h2>\n<h3>打开 双击VirtualBox.pkg</h3>\n<img src=\"/images/9.png\" width=\"800\" height=\"465\" />\n\n<h3>运行一个测试程序 点击继续</h3>\n<img src=\"/images/10.png\" width=\"800\" height=\"465\" />\n一路继续 安装完成\n\n<h2>新建一个虚拟电脑</h2>\n<h3>点击新建 命名 选择相应的类型和版本</h3>\n<img src=\"/images/11.png\" width=\"800\" height=\"586\" />\n\n<h3>内存大小</h3>\n<img src=\"/images/12.png\" width=\"800\" height=\"586\" />\n\n<h3>虚拟硬盘</h3>\n<img src=\"/images/13.png\" width=\"800\" height=\"586\" />\n\n<h3>虚拟硬盘文件类型</h3>\n<img src=\"/images/14.png\" width=\"800\" height=\"586\" />\n\n<h3>动态分配</h3>\n<img src=\"/images/15.png\" width=\"800\" height=\"586\" />\n\n<h3>保存的位置</h3>\n<img src=\"/images/16.png\" width=\"800\" height=\"586\" />\n这是虚拟电脑就一创建成功\n\n<h2>安装debian系统</h2>\n<h3>下载debian镜像</h3>\n[官网下载](https://www.debian.org/index.zh-cn.html)\n\n选择<font color=#FF6666> 取得 Debian </font>下的<font color=#FF6666> CD/USB ISO 映像</font>\n\n选择<font color=#FF6666> 通过 BitTorrent 下载光盘映像文件</font>\n\n选择<font color=#FF6666>CD</font>下的<font color=#FF6666>amd64</font>\n\n选择<font color=#FF6666> debian-8.6.0-amd64-xfce-CD-1.iso.torrent</font>\n\n<h3>选择虚拟盘</h3>\n<img src=\"/images/17.png\" width=\"800\" height=\"586\" />\n\n<h3>启动</h3>\n\n<h3>Graphical install</h3>\n<img src=\"/images/18.png\" width=\"800\" height=\"648\" />\n\n<h3>设置语言</h3>\n<img src=\"/images/19.png\" width=\"800\" height=\"648\" />\n\n<h3>设置位置</h3>\n<img src=\"/images/20.png\" width=\"800\" height=\"648\" />\n\n<h3>设置键盘</h3>\n<img src=\"/images/21.png\" width=\"800\" height=\"648\" />\n\n<h3>设置网络 可不变</h3>\n<img src=\"/images/22.png\" width=\"800\" height=\"648\" />\n\n<h3>设置网络 可不填</h3>\n<img src=\"/images/23.png\" width=\"800\" height=\"648\" />\n\n<h3>设置root用户密码</h3>\n<img src=\"/images/24.png\" width=\"800\" height=\"648\" />\n\n<h3>创建一个新用户</h3>\n<img src=\"/images/25.png\" width=\"800\" height=\"648\" />\n\n<h3>确认新用户名字</h3>\n\n<h3>设置新用户用户密码</h3>\n<img src=\"/images/26.png\" width=\"800\" height=\"648\" />\n\n<img src=\"/images/27.png\" width=\"800\" height=\"648\" />\n<img src=\"/images/28.png\" width=\"800\" height=\"648\" />\n<img src=\"/images/29.png\" width=\"800\" height=\"648\" />\n<img src=\"/images/30.png\" width=\"800\" height=\"648\" />\n<img src=\"/images/31.png\" width=\"800\" height=\"648\" />\n<img src=\"/images/32.png\" width=\"800\" height=\"648\" />\n<img src=\"/images/33.png\" width=\"800\" height=\"648\" />\n<img src=\"/images/34.png\" width=\"800\" height=\"648\" />\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"system/virtualbox安装debian","published":1,"updated":"2016-10-19T23:34:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9b6009p21xwd7vnu7zy","content":"<p>mac系统下安装virtualbox virtualbox中安装debian<br><a id=\"more\"></a></p>\n<p></p><h2>下载virtualbox</h2><br><a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"external\">官网下载</a><p></p>\n<p></p><h2>安装virtualbox</h2><p></p>\n<h3>打开 双击VirtualBox.pkg</h3><br><img src=\"/images/9.png\" width=\"800\" height=\"465\"><br><br><h3>运行一个测试程序 点击继续</h3><br><img src=\"/images/10.png\" width=\"800\" height=\"465\"><br>一路继续 安装完成<br><br><h2>新建一个虚拟电脑</h2><br><h3>点击新建 命名 选择相应的类型和版本</h3><br><img src=\"/images/11.png\" width=\"800\" height=\"586\"><br><br><h3>内存大小</h3><br><img src=\"/images/12.png\" width=\"800\" height=\"586\"><br><br><h3>虚拟硬盘</h3><br><img src=\"/images/13.png\" width=\"800\" height=\"586\"><br><br><h3>虚拟硬盘文件类型</h3><br><img src=\"/images/14.png\" width=\"800\" height=\"586\"><br><br><h3>动态分配</h3><br><img src=\"/images/15.png\" width=\"800\" height=\"586\"><br><br><h3>保存的位置</h3><br><img src=\"/images/16.png\" width=\"800\" height=\"586\"><br>这是虚拟电脑就一创建成功<br><br><h2>安装debian系统</h2><br><h3>下载debian镜像</h3><br><a href=\"https://www.debian.org/index.zh-cn.html\" target=\"_blank\" rel=\"external\">官网下载</a><br><br>选择<font color=\"#FF6666\"> 取得 Debian </font>下的<font color=\"#FF6666\"> CD/USB ISO 映像</font><br><br>选择<font color=\"#FF6666\"> 通过 BitTorrent 下载光盘映像文件</font><br><br>选择<font color=\"#FF6666\">CD</font>下的<font color=\"#FF6666\">amd64</font><br><br>选择<font color=\"#FF6666\"> debian-8.6.0-amd64-xfce-CD-1.iso.torrent</font><br><br><h3>选择虚拟盘</h3><br><img src=\"/images/17.png\" width=\"800\" height=\"586\"><br><br><h3>启动</h3>\n\n<h3>Graphical install</h3><br><img src=\"/images/18.png\" width=\"800\" height=\"648\"><br><br><h3>设置语言</h3><br><img src=\"/images/19.png\" width=\"800\" height=\"648\"><br><br><h3>设置位置</h3><br><img src=\"/images/20.png\" width=\"800\" height=\"648\"><br><br><h3>设置键盘</h3><br><img src=\"/images/21.png\" width=\"800\" height=\"648\"><br><br><h3>设置网络 可不变</h3><br><img src=\"/images/22.png\" width=\"800\" height=\"648\"><br><br><h3>设置网络 可不填</h3><br><img src=\"/images/23.png\" width=\"800\" height=\"648\"><br><br><h3>设置root用户密码</h3><br><img src=\"/images/24.png\" width=\"800\" height=\"648\"><br><br><h3>创建一个新用户</h3><br><img src=\"/images/25.png\" width=\"800\" height=\"648\"><br><br><h3>确认新用户名字</h3>\n\n<p></p><h3>设置新用户用户密码</h3><br><img src=\"/images/26.png\" width=\"800\" height=\"648\"><p></p>\n<p><img src=\"/images/27.png\" width=\"800\" height=\"648\"><br><img src=\"/images/28.png\" width=\"800\" height=\"648\"><br><img src=\"/images/29.png\" width=\"800\" height=\"648\"><br><img src=\"/images/30.png\" width=\"800\" height=\"648\"><br><img src=\"/images/31.png\" width=\"800\" height=\"648\"><br><img src=\"/images/32.png\" width=\"800\" height=\"648\"><br><img src=\"/images/33.png\" width=\"800\" height=\"648\"><br><img src=\"/images/34.png\" width=\"800\" height=\"648\"></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>mac系统下安装virtualbox virtualbox中安装debian<br>","more":"</p>\n<p><h2>下载virtualbox</h2><br><a href=\"https://www.virtualbox.org/\">官网下载</a></p>\n<p><h2>安装virtualbox</h2></p>\n<h3>打开 双击VirtualBox.pkg</h3><br><img src=\"/images/9.png\" width=\"800\" height=\"465\" /><br><br><h3>运行一个测试程序 点击继续</h3><br><img src=\"/images/10.png\" width=\"800\" height=\"465\" /><br>一路继续 安装完成<br><br><h2>新建一个虚拟电脑</h2><br><h3>点击新建 命名 选择相应的类型和版本</h3><br><img src=\"/images/11.png\" width=\"800\" height=\"586\" /><br><br><h3>内存大小</h3><br><img src=\"/images/12.png\" width=\"800\" height=\"586\" /><br><br><h3>虚拟硬盘</h3><br><img src=\"/images/13.png\" width=\"800\" height=\"586\" /><br><br><h3>虚拟硬盘文件类型</h3><br><img src=\"/images/14.png\" width=\"800\" height=\"586\" /><br><br><h3>动态分配</h3><br><img src=\"/images/15.png\" width=\"800\" height=\"586\" /><br><br><h3>保存的位置</h3><br><img src=\"/images/16.png\" width=\"800\" height=\"586\" /><br>这是虚拟电脑就一创建成功<br><br><h2>安装debian系统</h2><br><h3>下载debian镜像</h3><br><a href=\"https://www.debian.org/index.zh-cn.html\">官网下载</a><br><br>选择<font color=#FF6666> 取得 Debian </font>下的<font color=#FF6666> CD/USB ISO 映像</font><br><br>选择<font color=#FF6666> 通过 BitTorrent 下载光盘映像文件</font><br><br>选择<font color=#FF6666>CD</font>下的<font color=#FF6666>amd64</font><br><br>选择<font color=#FF6666> debian-8.6.0-amd64-xfce-CD-1.iso.torrent</font><br><br><h3>选择虚拟盘</h3><br><img src=\"/images/17.png\" width=\"800\" height=\"586\" /><br><br><h3>启动</h3>\n\n<h3>Graphical install</h3><br><img src=\"/images/18.png\" width=\"800\" height=\"648\" /><br><br><h3>设置语言</h3><br><img src=\"/images/19.png\" width=\"800\" height=\"648\" /><br><br><h3>设置位置</h3><br><img src=\"/images/20.png\" width=\"800\" height=\"648\" /><br><br><h3>设置键盘</h3><br><img src=\"/images/21.png\" width=\"800\" height=\"648\" /><br><br><h3>设置网络 可不变</h3><br><img src=\"/images/22.png\" width=\"800\" height=\"648\" /><br><br><h3>设置网络 可不填</h3><br><img src=\"/images/23.png\" width=\"800\" height=\"648\" /><br><br><h3>设置root用户密码</h3><br><img src=\"/images/24.png\" width=\"800\" height=\"648\" /><br><br><h3>创建一个新用户</h3><br><img src=\"/images/25.png\" width=\"800\" height=\"648\" /><br><br><h3>确认新用户名字</h3>\n\n<p><h3>设置新用户用户密码</h3><br><img src=\"/images/26.png\" width=\"800\" height=\"648\" /></p>\n<p><img src=\"/images/27.png\" width=\"800\" height=\"648\" /><br><img src=\"/images/28.png\" width=\"800\" height=\"648\" /><br><img src=\"/images/29.png\" width=\"800\" height=\"648\" /><br><img src=\"/images/30.png\" width=\"800\" height=\"648\" /><br><img src=\"/images/31.png\" width=\"800\" height=\"648\" /><br><img src=\"/images/32.png\" width=\"800\" height=\"648\" /><br><img src=\"/images/33.png\" width=\"800\" height=\"648\" /><br><img src=\"/images/34.png\" width=\"800\" height=\"648\" /></p>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"删除Xcode插件","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\t直接进入插件所在的目录，将插件删除即可。\n\t\n插件路径为：~/Library/Application Support/Developer/Shared/Xcode/Plug-ins\tLibrary文件夹（即资源库）默认是隐藏的，所以你可以使用一下方法打开该路径：\n\t\nFinder 前往->前往文件夹(快捷键cmd+Shift+G)，输入以上路径，回车，找到Fuzzy Aotocomplete插件，删除。","source":"_posts/system/删除Xcode插件.md","raw":"---\ntitle: 删除Xcode插件\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\t直接进入插件所在的目录，将插件删除即可。\n\t\n插件路径为：~/Library/Application Support/Developer/Shared/Xcode/Plug-ins\tLibrary文件夹（即资源库）默认是隐藏的，所以你可以使用一下方法打开该路径：\n\t\nFinder 前往->前往文件夹(快捷键cmd+Shift+G)，输入以上路径，回车，找到Fuzzy Aotocomplete插件，删除。","slug":"system/删除Xcode插件","published":1,"updated":"2016-10-08T09:04:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9b7009q21xwd6h0ycx5","content":"<a id=\"more\"></a>\n<pre><code>直接进入插件所在的目录，将插件删除即可。\n</code></pre><p>插件路径为：~/Library/Application Support/Developer/Shared/Xcode/Plug-ins    Library文件夹（即资源库）默认是隐藏的，所以你可以使用一下方法打开该路径：</p>\n<p>Finder 前往-&gt;前往文件夹(快捷键cmd+Shift+G)，输入以上路径，回车，找到Fuzzy Aotocomplete插件，删除。</p>\n","excerpt":"","more":"<pre><code>直接进入插件所在的目录，将插件删除即可。\n</code></pre><p>插件路径为：~/Library/Application Support/Developer/Shared/Xcode/Plug-ins    Library文件夹（即资源库）默认是隐藏的，所以你可以使用一下方法打开该路径：</p>\n<p>Finder 前往-&gt;前往文件夹(快捷键cmd+Shift+G)，输入以上路径，回车，找到Fuzzy Aotocomplete插件，删除。</p>"},{"title":"欢迎使用CSDN-markdown编辑器","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n安装soucetree后，启动\n1添加账户.\n![这里写图片描述](http://img.blog.csdn.net/20151214154736709 \"\")\n设置托管主机，用户名，密码，协议方式\n![这里写图片描述](http://img.blog.csdn.net/20151214154943293 \"\")\n2.克隆到本地\n点击远程，这时就可以看见远程仓库中内容\n![这里写图片描述](http://img.blog.csdn.net/20151214155310766 \"\")\n点击克隆，选择要克隆的目标路径，与克隆名称，点击克隆\n![这里写图片描述](http://img.blog.csdn.net/20151214155442212 \"\")\n3.在本地管理项目\n点击已经克隆到本地的项目\n![这里写图片描述](http://img.blog.csdn.net/20151214155652034 \"\")\n此时是在主分支master分支下\n双击一条远程分支\n![这里写图片描述](http://img.blog.csdn.net/20151214155957907 \"\")\n将其他的远程分支克隆到本地\n","source":"_posts/system/欢迎使用CSDN-markdown编辑器.md","raw":"---\ntitle: 欢迎使用CSDN-markdown编辑器\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n安装soucetree后，启动\n1添加账户.\n![这里写图片描述](http://img.blog.csdn.net/20151214154736709 \"\")\n设置托管主机，用户名，密码，协议方式\n![这里写图片描述](http://img.blog.csdn.net/20151214154943293 \"\")\n2.克隆到本地\n点击远程，这时就可以看见远程仓库中内容\n![这里写图片描述](http://img.blog.csdn.net/20151214155310766 \"\")\n点击克隆，选择要克隆的目标路径，与克隆名称，点击克隆\n![这里写图片描述](http://img.blog.csdn.net/20151214155442212 \"\")\n3.在本地管理项目\n点击已经克隆到本地的项目\n![这里写图片描述](http://img.blog.csdn.net/20151214155652034 \"\")\n此时是在主分支master分支下\n双击一条远程分支\n![这里写图片描述](http://img.blog.csdn.net/20151214155957907 \"\")\n将其他的远程分支克隆到本地\n","slug":"system/欢迎使用CSDN-markdown编辑器","published":1,"updated":"2016-10-08T09:12:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9b8009s21xwnps39ppa","content":"<a id=\"more\"></a>\n<p>安装soucetree后，启动<br>1添加账户.<br><img src=\"http://img.blog.csdn.net/20151214154736709\" alt=\"这里写图片描述\"><br>设置托管主机，用户名，密码，协议方式<br><img src=\"http://img.blog.csdn.net/20151214154943293\" alt=\"这里写图片描述\"><br>2.克隆到本地<br>点击远程，这时就可以看见远程仓库中内容<br><img src=\"http://img.blog.csdn.net/20151214155310766\" alt=\"这里写图片描述\"><br>点击克隆，选择要克隆的目标路径，与克隆名称，点击克隆<br><img src=\"http://img.blog.csdn.net/20151214155442212\" alt=\"这里写图片描述\"><br>3.在本地管理项目<br>点击已经克隆到本地的项目<br><img src=\"http://img.blog.csdn.net/20151214155652034\" alt=\"这里写图片描述\"><br>此时是在主分支master分支下<br>双击一条远程分支<br><img src=\"http://img.blog.csdn.net/20151214155957907\" alt=\"这里写图片描述\"><br>将其他的远程分支克隆到本地</p>\n","excerpt":"","more":"<p>安装soucetree后，启动<br>1添加账户.<br><img src=\"http://img.blog.csdn.net/20151214154736709\" alt=\"这里写图片描述\"><br>设置托管主机，用户名，密码，协议方式<br><img src=\"http://img.blog.csdn.net/20151214154943293\" alt=\"这里写图片描述\"><br>2.克隆到本地<br>点击远程，这时就可以看见远程仓库中内容<br><img src=\"http://img.blog.csdn.net/20151214155310766\" alt=\"这里写图片描述\"><br>点击克隆，选择要克隆的目标路径，与克隆名称，点击克隆<br><img src=\"http://img.blog.csdn.net/20151214155442212\" alt=\"这里写图片描述\"><br>3.在本地管理项目<br>点击已经克隆到本地的项目<br><img src=\"http://img.blog.csdn.net/20151214155652034\" alt=\"这里写图片描述\"><br>此时是在主分支master分支下<br>双击一条远程分支<br><img src=\"http://img.blog.csdn.net/20151214155957907\" alt=\"这里写图片描述\"><br>将其他的远程分支克隆到本地</p>"},{"title":"移动UI/UX设计师和PM使用的原型工具","date":"2016-10-08T03:39:43.000Z","_content":"<!-- more -->\n\n【编者按】本文转载自个人博客—[羽化博客](http://www.zhangping.name/)，原作者通过对页面原型设计的理解来介绍四款原型设计工具。\n与一般针对产品功能的介绍不同，本文以亲身的设计需求为出发点，通过对产品整理和提供相关的链接，帮助解决从业人群对做产品页面原型的直接需求。可以为做产品设计的童鞋提供一些参考和下载帮助。\n天天和产品打交道，不时要做一些页面原型、离不开各种工具，工欲善其事必先利其器，好的工具软件可以大大提高工作效率，工具各有优劣，大家按需取之。原型设计工具我暂时把它分为两类，Web应用原型设计工具及软件应用原型设计工具、微软的visio就不说了：\nWeb应用原型设计工具：先来看看这个几个：[Axure RP](http://www.axure.com/) 、[Balsamiq Mockups](http://www.balsamiq.com/) 、 [Pencil\n Project](http://pencil.evolus.vn/en-US/Home.aspx) 以及[OmniGraffle](http://www.omnigroup.com/)试用感觉：\n###**第一个、Axure RP：**\n[![](http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/Axure-RP.jpg \"Axure-RP\")](http://www.leiphone.com/wp-content/uploads/2012/06/Axure-RP.jpg)\n来这里看看视频简介：[http://www.axure.com/tour.aspx](http://www.axure.com/tour.aspx)\n- Axure的发音是”Ack-sure”，RP则是”Rapid Prototyping”快速原型的缩写。Axure RP Pro是美国Axure Software Solution公司的精心杰作，可以说Axure是Windows上最出色的原型设计软件，亦是web产品前期设计的首选，原因是：够简单、上手快，能帮助网站需求设计者，快捷而简便的创建 基于目录组织的原型文档、功能说明、交互界面以及带注释的wireframe网页，并可自动生成用于演示的网页文件和word文档，以提供演示与开发；\n- Axure RP六合一功能：网站构架图、示意图、流程图、交互设计、自动输出网站原型、自动输出word格式规格文件；\n- 国内都有很多教程了，看看这些：[悠识网站的教程](http://cn.userxper.com/axure_tutorial)\n- Windows版：[http://axure.cachefly.net/AxureRP-Pro-Setup.exe](http://axure.cachefly.net/AxureRP-Pro-Setup.exe)\nMAC版：[http://axure.cachefly.net/AxureRP-Pro-Setup.dmg](http://axure.cachefly.net/AxureRP-Pro-Setup.dmg)\nAxure6.5汉化语言包下载地址：[http://www.axure.us/283/](http://www.axure.us/283/)\n\n###**第二个、Balsamiq Mockups：**\n** [![](http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/Balsamiq-Mockups.jpg \"Balsamiq-Mockups\")](http://www.leiphone.com/wp-content/uploads/2012/06/Balsamiq-Mockups.jpg)**\n** **[Balsamiq Mockups 视频简介](http://www.balsamiq.com/products/mockups)\n- Balsamiq Mokups是用Flex和Air实现的，在Mac OS, Linux和Windows下都能使用，有桌面版本、Confluence，JIRA，和XWiki中的版本；\n- 涂鸦风格、使用起来也很简单、各模块工具也很齐全，详细说明可见官方博客：[http://www.balsamiq.com/blogs](http://www.balsamiq.com/blogs)\n\n[![](http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/iphonedemo.jpg \"iphonedemo\")](http://www.leiphone.com/wp-content/uploads/2012/06/iphonedemo.jpg)\n[![](http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/iphoneexamples.png \"iphoneexamples\")](http://www.leiphone.com/wp-content/uploads/2012/06/iphoneexamples.png)\n- 有人提到不能输入中文的问题，很简单：在Mockups的菜单里选择 View -> Use System Font 就可以了；\n- 该软件的桌面版售价78美刀。作者意大利人Peldi说这款软件的设计就是用它自己来设计的，满足自己的需求。而在经济寒冷的2008年，从1,322位付费用户那获得了162,302美元的收入（其中12月份就有39,000美元）;\n- windows版本下载地址 [http://www.balsamiq.com/download](http://www.balsamiq.com/download)\n\n###**\n第三个、Pencil Project：**\n[![](http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/pencil-project.jpg \"pencil-project\")](http://www.leiphone.com/wp-content/uploads/2012/06/pencil-project.jpg)- 查看官网简介：[http://www.evolus.vn/Pencil/Screenshots.html](http://www.evolus.vn/Pencil/Screenshots.html)\n- 一个firefox插件，比较小的工具，画简单的界面基本上可以满足了；\n- 安装地址：[https://addons.mozilla.org/en-US/firefox/addon/8487](https://addons.mozilla.org/en-US/firefox/addon/8487)\n\n###**第四个、OmniGraffle**\n[![](http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/OmniGraffle.png \"OmniGraffle\")](http://www.leiphone.com/wp-content/uploads/2012/06/OmniGraffle.png)\n- 很不幸的是，这个软件只有Mac版；\n- [Omni Group](http://www.omnigroup.com/)这家只有[26个人](http://www.omnigroup.com/company/people/)的小公司，他们人数虽少，但却产出了像[OmniWeb](http://www.omnigroup.com/applications/omniweb/)、[OmniGraffle](http://www.omnigroup.com/applications/omnigraffle/)、[OmniPlan](http://www.omnigroup.com/applications/omniplan/)和[OmniOutliner](http://www.omnigroup.com/applications/omnioutliner/)等等一系列深受用户欢迎的精品软件，实力绝对不容小觑；\n- 漂亮的界面、能轻而易举的绘制出漂亮的图形、丰富、精致的模板（Stencil/Template）、辅助对齐和尺寸调整功能；\n- 下载地址 [http://www.omnigroup.com/applications/omnigraffle/](http://www.omnigroup.com/applications/omnigraffle/)\n\n","source":"_posts/system/移动UIUX设计师和PM使用的原型工具.md","raw":"---\ntitle: 移动UI/UX设计师和PM使用的原型工具\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n<!-- more -->\n\n【编者按】本文转载自个人博客—[羽化博客](http://www.zhangping.name/)，原作者通过对页面原型设计的理解来介绍四款原型设计工具。\n与一般针对产品功能的介绍不同，本文以亲身的设计需求为出发点，通过对产品整理和提供相关的链接，帮助解决从业人群对做产品页面原型的直接需求。可以为做产品设计的童鞋提供一些参考和下载帮助。\n天天和产品打交道，不时要做一些页面原型、离不开各种工具，工欲善其事必先利其器，好的工具软件可以大大提高工作效率，工具各有优劣，大家按需取之。原型设计工具我暂时把它分为两类，Web应用原型设计工具及软件应用原型设计工具、微软的visio就不说了：\nWeb应用原型设计工具：先来看看这个几个：[Axure RP](http://www.axure.com/) 、[Balsamiq Mockups](http://www.balsamiq.com/) 、 [Pencil\n Project](http://pencil.evolus.vn/en-US/Home.aspx) 以及[OmniGraffle](http://www.omnigroup.com/)试用感觉：\n###**第一个、Axure RP：**\n[![](http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/Axure-RP.jpg \"Axure-RP\")](http://www.leiphone.com/wp-content/uploads/2012/06/Axure-RP.jpg)\n来这里看看视频简介：[http://www.axure.com/tour.aspx](http://www.axure.com/tour.aspx)\n- Axure的发音是”Ack-sure”，RP则是”Rapid Prototyping”快速原型的缩写。Axure RP Pro是美国Axure Software Solution公司的精心杰作，可以说Axure是Windows上最出色的原型设计软件，亦是web产品前期设计的首选，原因是：够简单、上手快，能帮助网站需求设计者，快捷而简便的创建 基于目录组织的原型文档、功能说明、交互界面以及带注释的wireframe网页，并可自动生成用于演示的网页文件和word文档，以提供演示与开发；\n- Axure RP六合一功能：网站构架图、示意图、流程图、交互设计、自动输出网站原型、自动输出word格式规格文件；\n- 国内都有很多教程了，看看这些：[悠识网站的教程](http://cn.userxper.com/axure_tutorial)\n- Windows版：[http://axure.cachefly.net/AxureRP-Pro-Setup.exe](http://axure.cachefly.net/AxureRP-Pro-Setup.exe)\nMAC版：[http://axure.cachefly.net/AxureRP-Pro-Setup.dmg](http://axure.cachefly.net/AxureRP-Pro-Setup.dmg)\nAxure6.5汉化语言包下载地址：[http://www.axure.us/283/](http://www.axure.us/283/)\n\n###**第二个、Balsamiq Mockups：**\n** [![](http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/Balsamiq-Mockups.jpg \"Balsamiq-Mockups\")](http://www.leiphone.com/wp-content/uploads/2012/06/Balsamiq-Mockups.jpg)**\n** **[Balsamiq Mockups 视频简介](http://www.balsamiq.com/products/mockups)\n- Balsamiq Mokups是用Flex和Air实现的，在Mac OS, Linux和Windows下都能使用，有桌面版本、Confluence，JIRA，和XWiki中的版本；\n- 涂鸦风格、使用起来也很简单、各模块工具也很齐全，详细说明可见官方博客：[http://www.balsamiq.com/blogs](http://www.balsamiq.com/blogs)\n\n[![](http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/iphonedemo.jpg \"iphonedemo\")](http://www.leiphone.com/wp-content/uploads/2012/06/iphonedemo.jpg)\n[![](http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/iphoneexamples.png \"iphoneexamples\")](http://www.leiphone.com/wp-content/uploads/2012/06/iphoneexamples.png)\n- 有人提到不能输入中文的问题，很简单：在Mockups的菜单里选择 View -> Use System Font 就可以了；\n- 该软件的桌面版售价78美刀。作者意大利人Peldi说这款软件的设计就是用它自己来设计的，满足自己的需求。而在经济寒冷的2008年，从1,322位付费用户那获得了162,302美元的收入（其中12月份就有39,000美元）;\n- windows版本下载地址 [http://www.balsamiq.com/download](http://www.balsamiq.com/download)\n\n###**\n第三个、Pencil Project：**\n[![](http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/pencil-project.jpg \"pencil-project\")](http://www.leiphone.com/wp-content/uploads/2012/06/pencil-project.jpg)- 查看官网简介：[http://www.evolus.vn/Pencil/Screenshots.html](http://www.evolus.vn/Pencil/Screenshots.html)\n- 一个firefox插件，比较小的工具，画简单的界面基本上可以满足了；\n- 安装地址：[https://addons.mozilla.org/en-US/firefox/addon/8487](https://addons.mozilla.org/en-US/firefox/addon/8487)\n\n###**第四个、OmniGraffle**\n[![](http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/OmniGraffle.png \"OmniGraffle\")](http://www.leiphone.com/wp-content/uploads/2012/06/OmniGraffle.png)\n- 很不幸的是，这个软件只有Mac版；\n- [Omni Group](http://www.omnigroup.com/)这家只有[26个人](http://www.omnigroup.com/company/people/)的小公司，他们人数虽少，但却产出了像[OmniWeb](http://www.omnigroup.com/applications/omniweb/)、[OmniGraffle](http://www.omnigroup.com/applications/omnigraffle/)、[OmniPlan](http://www.omnigroup.com/applications/omniplan/)和[OmniOutliner](http://www.omnigroup.com/applications/omnioutliner/)等等一系列深受用户欢迎的精品软件，实力绝对不容小觑；\n- 漂亮的界面、能轻而易举的绘制出漂亮的图形、丰富、精致的模板（Stencil/Template）、辅助对齐和尺寸调整功能；\n- 下载地址 [http://www.omnigroup.com/applications/omnigraffle/](http://www.omnigroup.com/applications/omnigraffle/)\n\n","slug":"system/移动UIUX设计师和PM使用的原型工具","published":1,"updated":"2016-10-08T09:13:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9b8009u21xw8c1tyqcg","content":"<a id=\"more\"></a>\n<p>【编者按】本文转载自个人博客—<a href=\"http://www.zhangping.name/\" target=\"_blank\" rel=\"external\">羽化博客</a>，原作者通过对页面原型设计的理解来介绍四款原型设计工具。<br>与一般针对产品功能的介绍不同，本文以亲身的设计需求为出发点，通过对产品整理和提供相关的链接，帮助解决从业人群对做产品页面原型的直接需求。可以为做产品设计的童鞋提供一些参考和下载帮助。<br>天天和产品打交道，不时要做一些页面原型、离不开各种工具，工欲善其事必先利其器，好的工具软件可以大大提高工作效率，工具各有优劣，大家按需取之。原型设计工具我暂时把它分为两类，Web应用原型设计工具及软件应用原型设计工具、微软的visio就不说了：<br>Web应用原型设计工具：先来看看这个几个：<a href=\"http://www.axure.com/\" target=\"_blank\" rel=\"external\">Axure RP</a> 、<a href=\"http://www.balsamiq.com/\" target=\"_blank\" rel=\"external\">Balsamiq Mockups</a> 、 <a href=\"http://pencil.evolus.vn/en-US/Home.aspx\" target=\"_blank\" rel=\"external\">Pencil<br> Project</a> 以及<a href=\"http://www.omnigroup.com/\" target=\"_blank\" rel=\"external\">OmniGraffle</a>试用感觉：</p>\n<p>###<strong>第一个、Axure RP：</strong><br><a href=\"http://www.leiphone.com/wp-content/uploads/2012/06/Axure-RP.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/Axure-RP.jpg\" alt=\"\" title=\"Axure-RP\"></a><br>来这里看看视频简介：<a href=\"http://www.axure.com/tour.aspx\" target=\"_blank\" rel=\"external\">http://www.axure.com/tour.aspx</a></p>\n<ul>\n<li>Axure的发音是”Ack-sure”，RP则是”Rapid Prototyping”快速原型的缩写。Axure RP Pro是美国Axure Software Solution公司的精心杰作，可以说Axure是Windows上最出色的原型设计软件，亦是web产品前期设计的首选，原因是：够简单、上手快，能帮助网站需求设计者，快捷而简便的创建 基于目录组织的原型文档、功能说明、交互界面以及带注释的wireframe网页，并可自动生成用于演示的网页文件和word文档，以提供演示与开发；</li>\n<li>Axure RP六合一功能：网站构架图、示意图、流程图、交互设计、自动输出网站原型、自动输出word格式规格文件；</li>\n<li>国内都有很多教程了，看看这些：<a href=\"http://cn.userxper.com/axure_tutorial\" target=\"_blank\" rel=\"external\">悠识网站的教程</a></li>\n<li>Windows版：<a href=\"http://axure.cachefly.net/AxureRP-Pro-Setup.exe\" target=\"_blank\" rel=\"external\">http://axure.cachefly.net/AxureRP-Pro-Setup.exe</a><br>MAC版：<a href=\"http://axure.cachefly.net/AxureRP-Pro-Setup.dmg\" target=\"_blank\" rel=\"external\">http://axure.cachefly.net/AxureRP-Pro-Setup.dmg</a><br>Axure6.5汉化语言包下载地址：<a href=\"http://www.axure.us/283/\" target=\"_blank\" rel=\"external\">http://www.axure.us/283/</a></li>\n</ul>\n<p>###<strong>第二个、Balsamiq Mockups：</strong><br><strong> <a href=\"http://www.leiphone.com/wp-content/uploads/2012/06/Balsamiq-Mockups.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/Balsamiq-Mockups.jpg\" alt=\"\" title=\"Balsamiq-Mockups\"></a></strong><br><strong> </strong><a href=\"http://www.balsamiq.com/products/mockups\" target=\"_blank\" rel=\"external\">Balsamiq Mockups 视频简介</a></p>\n<ul>\n<li>Balsamiq Mokups是用Flex和Air实现的，在Mac OS, Linux和Windows下都能使用，有桌面版本、Confluence，JIRA，和XWiki中的版本；</li>\n<li>涂鸦风格、使用起来也很简单、各模块工具也很齐全，详细说明可见官方博客：<a href=\"http://www.balsamiq.com/blogs\" target=\"_blank\" rel=\"external\">http://www.balsamiq.com/blogs</a></li>\n</ul>\n<p><a href=\"http://www.leiphone.com/wp-content/uploads/2012/06/iphonedemo.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/iphonedemo.jpg\" alt=\"\" title=\"iphonedemo\"></a><br><a href=\"http://www.leiphone.com/wp-content/uploads/2012/06/iphoneexamples.png\" target=\"_blank\" rel=\"external\"><img src=\"http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/iphoneexamples.png\" alt=\"\" title=\"iphoneexamples\"></a></p>\n<ul>\n<li>有人提到不能输入中文的问题，很简单：在Mockups的菜单里选择 View -&gt; Use System Font 就可以了；</li>\n<li>该软件的桌面版售价78美刀。作者意大利人Peldi说这款软件的设计就是用它自己来设计的，满足自己的需求。而在经济寒冷的2008年，从1,322位付费用户那获得了162,302美元的收入（其中12月份就有39,000美元）;</li>\n<li>windows版本下载地址 <a href=\"http://www.balsamiq.com/download\" target=\"_blank\" rel=\"external\">http://www.balsamiq.com/download</a></li>\n</ul>\n<p>###<strong><br>第三个、Pencil Project：</strong><br><a href=\"http://www.leiphone.com/wp-content/uploads/2012/06/pencil-project.jpg\" target=\"_blank\" rel=\"external\"><img src=\"http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/pencil-project.jpg\" alt=\"\" title=\"pencil-project\"></a>- 查看官网简介：<a href=\"http://www.evolus.vn/Pencil/Screenshots.html\" target=\"_blank\" rel=\"external\">http://www.evolus.vn/Pencil/Screenshots.html</a></p>\n<ul>\n<li>一个firefox插件，比较小的工具，画简单的界面基本上可以满足了；</li>\n<li>安装地址：<a href=\"https://addons.mozilla.org/en-US/firefox/addon/8487\" target=\"_blank\" rel=\"external\">https://addons.mozilla.org/en-US/firefox/addon/8487</a></li>\n</ul>\n<p>###<strong>第四个、OmniGraffle</strong><br><a href=\"http://www.leiphone.com/wp-content/uploads/2012/06/OmniGraffle.png\" target=\"_blank\" rel=\"external\"><img src=\"http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/OmniGraffle.png\" alt=\"\" title=\"OmniGraffle\"></a></p>\n<ul>\n<li>很不幸的是，这个软件只有Mac版；</li>\n<li><a href=\"http://www.omnigroup.com/\" target=\"_blank\" rel=\"external\">Omni Group</a>这家只有<a href=\"http://www.omnigroup.com/company/people/\" target=\"_blank\" rel=\"external\">26个人</a>的小公司，他们人数虽少，但却产出了像<a href=\"http://www.omnigroup.com/applications/omniweb/\" target=\"_blank\" rel=\"external\">OmniWeb</a>、<a href=\"http://www.omnigroup.com/applications/omnigraffle/\" target=\"_blank\" rel=\"external\">OmniGraffle</a>、<a href=\"http://www.omnigroup.com/applications/omniplan/\" target=\"_blank\" rel=\"external\">OmniPlan</a>和<a href=\"http://www.omnigroup.com/applications/omnioutliner/\" target=\"_blank\" rel=\"external\">OmniOutliner</a>等等一系列深受用户欢迎的精品软件，实力绝对不容小觑；</li>\n<li>漂亮的界面、能轻而易举的绘制出漂亮的图形、丰富、精致的模板（Stencil/Template）、辅助对齐和尺寸调整功能；</li>\n<li>下载地址 <a href=\"http://www.omnigroup.com/applications/omnigraffle/\" target=\"_blank\" rel=\"external\">http://www.omnigroup.com/applications/omnigraffle/</a></li>\n</ul>\n","excerpt":"","more":"<p>【编者按】本文转载自个人博客—<a href=\"http://www.zhangping.name/\">羽化博客</a>，原作者通过对页面原型设计的理解来介绍四款原型设计工具。<br>与一般针对产品功能的介绍不同，本文以亲身的设计需求为出发点，通过对产品整理和提供相关的链接，帮助解决从业人群对做产品页面原型的直接需求。可以为做产品设计的童鞋提供一些参考和下载帮助。<br>天天和产品打交道，不时要做一些页面原型、离不开各种工具，工欲善其事必先利其器，好的工具软件可以大大提高工作效率，工具各有优劣，大家按需取之。原型设计工具我暂时把它分为两类，Web应用原型设计工具及软件应用原型设计工具、微软的visio就不说了：<br>Web应用原型设计工具：先来看看这个几个：<a href=\"http://www.axure.com/\">Axure RP</a> 、<a href=\"http://www.balsamiq.com/\">Balsamiq Mockups</a> 、 <a href=\"http://pencil.evolus.vn/en-US/Home.aspx\">Pencil<br> Project</a> 以及<a href=\"http://www.omnigroup.com/\">OmniGraffle</a>试用感觉：</p>\n<p>###<strong>第一个、Axure RP：</strong><br><a href=\"http://www.leiphone.com/wp-content/uploads/2012/06/Axure-RP.jpg\"><img src=\"http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/Axure-RP.jpg\" alt=\"\" title=\"Axure-RP\"></a><br>来这里看看视频简介：<a href=\"http://www.axure.com/tour.aspx\">http://www.axure.com/tour.aspx</a></p>\n<ul>\n<li>Axure的发音是”Ack-sure”，RP则是”Rapid Prototyping”快速原型的缩写。Axure RP Pro是美国Axure Software Solution公司的精心杰作，可以说Axure是Windows上最出色的原型设计软件，亦是web产品前期设计的首选，原因是：够简单、上手快，能帮助网站需求设计者，快捷而简便的创建 基于目录组织的原型文档、功能说明、交互界面以及带注释的wireframe网页，并可自动生成用于演示的网页文件和word文档，以提供演示与开发；</li>\n<li>Axure RP六合一功能：网站构架图、示意图、流程图、交互设计、自动输出网站原型、自动输出word格式规格文件；</li>\n<li>国内都有很多教程了，看看这些：<a href=\"http://cn.userxper.com/axure_tutorial\">悠识网站的教程</a></li>\n<li>Windows版：<a href=\"http://axure.cachefly.net/AxureRP-Pro-Setup.exe\">http://axure.cachefly.net/AxureRP-Pro-Setup.exe</a><br>MAC版：<a href=\"http://axure.cachefly.net/AxureRP-Pro-Setup.dmg\">http://axure.cachefly.net/AxureRP-Pro-Setup.dmg</a><br>Axure6.5汉化语言包下载地址：<a href=\"http://www.axure.us/283/\">http://www.axure.us/283/</a></li>\n</ul>\n<p>###<strong>第二个、Balsamiq Mockups：</strong><br><strong> <a href=\"http://www.leiphone.com/wp-content/uploads/2012/06/Balsamiq-Mockups.jpg\"><img src=\"http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/Balsamiq-Mockups.jpg\" alt=\"\" title=\"Balsamiq-Mockups\"></a></strong><br><strong> </strong><a href=\"http://www.balsamiq.com/products/mockups\">Balsamiq Mockups 视频简介</a></p>\n<ul>\n<li>Balsamiq Mokups是用Flex和Air实现的，在Mac OS, Linux和Windows下都能使用，有桌面版本、Confluence，JIRA，和XWiki中的版本；</li>\n<li>涂鸦风格、使用起来也很简单、各模块工具也很齐全，详细说明可见官方博客：<a href=\"http://www.balsamiq.com/blogs\">http://www.balsamiq.com/blogs</a></li>\n</ul>\n<p><a href=\"http://www.leiphone.com/wp-content/uploads/2012/06/iphonedemo.jpg\"><img src=\"http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/iphonedemo.jpg\" alt=\"\" title=\"iphonedemo\"></a><br><a href=\"http://www.leiphone.com/wp-content/uploads/2012/06/iphoneexamples.png\"><img src=\"http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/iphoneexamples.png\" alt=\"\" title=\"iphoneexamples\"></a></p>\n<ul>\n<li>有人提到不能输入中文的问题，很简单：在Mockups的菜单里选择 View -&gt; Use System Font 就可以了；</li>\n<li>该软件的桌面版售价78美刀。作者意大利人Peldi说这款软件的设计就是用它自己来设计的，满足自己的需求。而在经济寒冷的2008年，从1,322位付费用户那获得了162,302美元的收入（其中12月份就有39,000美元）;</li>\n<li>windows版本下载地址 <a href=\"http://www.balsamiq.com/download\">http://www.balsamiq.com/download</a></li>\n</ul>\n<p>###<strong><br>第三个、Pencil Project：</strong><br><a href=\"http://www.leiphone.com/wp-content/uploads/2012/06/pencil-project.jpg\"><img src=\"http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/pencil-project.jpg\" alt=\"\" title=\"pencil-project\"></a>- 查看官网简介：<a href=\"http://www.evolus.vn/Pencil/Screenshots.html\">http://www.evolus.vn/Pencil/Screenshots.html</a></p>\n<ul>\n<li>一个firefox插件，比较小的工具，画简单的界面基本上可以满足了；</li>\n<li>安装地址：<a href=\"https://addons.mozilla.org/en-US/firefox/addon/8487\">https://addons.mozilla.org/en-US/firefox/addon/8487</a></li>\n</ul>\n<p>###<strong>第四个、OmniGraffle</strong><br><a href=\"http://www.leiphone.com/wp-content/uploads/2012/06/OmniGraffle.png\"><img src=\"http://7te8bu.com1.z0.glb.clouddn.com/uploads/2012/06/OmniGraffle.png\" alt=\"\" title=\"OmniGraffle\"></a></p>\n<ul>\n<li>很不幸的是，这个软件只有Mac版；</li>\n<li><a href=\"http://www.omnigroup.com/\">Omni Group</a>这家只有<a href=\"http://www.omnigroup.com/company/people/\">26个人</a>的小公司，他们人数虽少，但却产出了像<a href=\"http://www.omnigroup.com/applications/omniweb/\">OmniWeb</a>、<a href=\"http://www.omnigroup.com/applications/omnigraffle/\">OmniGraffle</a>、<a href=\"http://www.omnigroup.com/applications/omniplan/\">OmniPlan</a>和<a href=\"http://www.omnigroup.com/applications/omnioutliner/\">OmniOutliner</a>等等一系列深受用户欢迎的精品软件，实力绝对不容小觑；</li>\n<li>漂亮的界面、能轻而易举的绘制出漂亮的图形、丰富、精致的模板（Stencil/Template）、辅助对齐和尺寸调整功能；</li>\n<li>下载地址 <a href=\"http://www.omnigroup.com/applications/omnigraffle/\">http://www.omnigroup.com/applications/omnigraffle/</a></li>\n</ul>"},{"title":"编程思想","date":"2016-11-12T04:06:58.000Z","_content":"编程思想\n<!-- more -->\n+ POP 面向过程编程 process oriented programming\n+ OOP 面向对象编程 object oriented programming\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","source":"_posts/system/编程思想.md","raw":"---\ntitle: 编程思想\ndate: 2016-11-12 12:06:58\ncategories: ruby\n---\n编程思想\n<!-- more -->\n+ POP 面向过程编程 process oriented programming\n+ OOP 面向对象编程 object oriented programming\n\n\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","slug":"system/编程思想","published":1,"updated":"2016-11-12T04:11:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9b9009w21xwe7j335l8","content":"<p>编程思想<br><a id=\"more\"></a></p>\n<ul>\n<li>POP 面向过程编程 process oriented programming</li>\n<li>OOP 面向对象编程 object oriented programming</li>\n</ul>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->\n","excerpt":"<p>编程思想<br>","more":"</p>\n<ul>\n<li>POP 面向过程编程 process oriented programming</li>\n<li>OOP 面向对象编程 object oriented programming</li>\n</ul>\n<!--<img src=\"/images/6.png\" width=\"800\" height=\"263\" />-->\n<!--<font color=#FF6666></font>-->"},{"title":"iOS开发系列--音频播放、录音、视频播放、拍照、视频录制","date":"2016-10-08T03:39:43.000Z","_content":"在iOS中音频播放从形式上可以分为音效播放和音乐播放。前者主要指的是一些短音频播放，通常作为点缀音频，对于这类音频不需要进行进度、循环等控制。后者指的是一些较长的音频，通常是主音频，对于这些音频的播放通常需要进行精确的控制。\n<!-- more -->\n\n```objc\n转自：http://blog.csdn.net/jianxin160/article/details/47753241\n音频\n在iOS中音频播放从形式上可以分为音效播放和音乐播放。前者主要指的是一些短音频播放，通常作为点缀音频，对于这类音频不需要进行进度、循环等控制。后者指的是一些较长的音频，通常是主音频，对于这些音频的播放通常需要进行精确的控制。在iOS中播放两类音频分别使用AudioToolbox.framework和AVFoundation.framework来完成音效和音乐播放。\n音效\nAudioToolbox.framework是一套基于C语言的框架，使用它来播放音效其本质是将短音频注册到系统声音服务（System Sound Service）。System Sound Service是一种简单、底层的声音播放服务，但是它本身也存在着一些限制：\n音频播放时间不能超过30s\n数据必须是PCM或者IMA4格式\n音频文件必须打包成.caf、.aif、.wav中的一种（注意这是官方文档的说法，实际测试发现一些.mp3也可以播放）\n使用System Sound Service 播放音效的步骤如下：\n调用AudioServicesCreateSystemSoundID(   CFURLRef  inFileURL, SystemSoundID*   outSystemSoundID)函数获得系统声音ID。\n如果需要监听播放完成操作，则使用AudioServicesAddSystemSoundCompletion(  SystemSoundID inSystemSoundID,\nCFRunLoopRef  inRunLoop, CFStringRef  inRunLoopMode, AudioServicesSystemSoundCompletionProc  inCompletionRoutine, void*  inClientData)方法注册回调函数。\n调用AudioServicesPlaySystemSound(SystemSoundID inSystemSoundID) 或者AudioServicesPlayAlertSound(SystemSoundID inSystemSoundID) 方法播放音效（后者带有震动效果）。\n下面是一个简单的示例程序：\n//\n//  KCMainViewController.m\n//  Audio\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//  音效播放\n\n#import \"KCMainViewController.h\"\n#import <AudioToolbox/AudioToolbox.h>\n\n@interface KCMainViewController ()\n\n@end\n\n@implementation KCMainViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    [self playSoundEffect:@\"videoRing.caf\"];\n}\n\n/**\n *  播放完成回调函数\n *\n *  @param soundID    系统声音ID\n *  @param clientData 回调时传递的数据\n */\nvoid soundCompleteCallback(SystemSoundID soundID,void * clientData){\n    NSLog(@\"播放完成...\");\n}\n\n/**\n *  播放音效文件\n *\n *  @param name 音频文件名称\n */\n-(void)playSoundEffect:(NSString *)name{\n    NSString *audioFile=[[NSBundle mainBundle] pathForResource:name ofType:nil];\n    NSURL *fileUrl=[NSURL fileURLWithPath:audioFile];\n    //1.获得系统声音ID\n    SystemSoundID soundID=0;\n    /**\n     * inFileUrl:音频文件url\n     * outSystemSoundID:声音id（此函数会将音效文件加入到系统音频服务中并返回一个长整形ID）\n     */\n    AudioServicesCreateSystemSoundID((__bridge CFURLRef)(fileUrl), &soundID);\n    //如果需要在播放完之后执行某些操作，可以调用如下方法注册一个播放完成回调函数\n    AudioServicesAddSystemSoundCompletion(soundID, NULL, NULL, soundCompleteCallback, NULL);\n    //2.播放音频\n    AudioServicesPlaySystemSound(soundID);//播放音效\n//    AudioServicesPlayAlertSound(soundID);//播放音效并震动\n}\n\n@end\n音乐\n如果播放较大的音频或者要对音频有精确的控制则System Sound Service可能就很难满足实际需求了，通常这种情况会选择使用AVFoundation.framework中的AVAudioPlayer来实现。AVAudioPlayer可以看成一个播放器，它支持多种音频格式，而且能够进行进度、音量、播放速度等控制。首先简单看一下AVAudioPlayer常用的属性和方法：\n属性\t说明\n@property(readonly, getter=isPlaying) BOOL playing\t是否正在播放，只读\n@property(readonly) NSUInteger numberOfChannels\t音频声道数，只读\n@property(readonly) NSTimeInterval duration\t音频时长\n@property(readonly) NSURL *url\t音频文件路径，只读\n@property(readonly) NSData *data\t音频数据，只读\n@property float pan\t立体声平衡，如果为-1.0则完全左声道，如果0.0则左右声道平衡，如果为1.0则完全为右声道\n@property float volume\t音量大小，范围0-1.0\n@property BOOL enableRate\t是否允许改变播放速率\n@property float rate\t播放速率，范围0.5-2.0，如果为1.0则正常播放，如果要修改播放速率则必须设置enableRate为YES\n@property NSTimeInterval currentTime\t当前播放时长\n@property(readonly) NSTimeInterval deviceCurrentTime\t输出设备播放音频的时间，注意如果播放中被暂停此时间也会继续累加\n@property NSInteger numberOfLoops\t循环播放次数，如果为0则不循环，如果小于0则无限循环，大于0则表示循环次数\n@property(readonly) NSDictionary *settings\t音频播放设置信息，只读\n@property(getter=isMeteringEnabled) BOOL meteringEnabled\t是否启用音频测量，默认为NO，一旦启用音频测量可以通过updateMeters方法更新测量值\n对象方法\t说明\n- (instancetype)initWithContentsOfURL:(NSURL *)url error:(NSError **)outError\t使用文件URL初始化播放器，注意这个URL不能是HTTP URL，AVAudioPlayer不支持加载网络媒体流，只能播放本地文件\n- (instancetype)initWithData:(NSData *)data error:(NSError **)outError\t使用NSData初始化播放器，注意使用此方法时必须文件格式和文件后缀一致，否则出错，所以相比此方法更推荐使用上述方法或- (instancetype)initWithData:(NSData *)data fileTypeHint:(NSString *)utiString error:(NSError **)outError方法进行初始化\n- (BOOL)prepareToPlay;\t加载音频文件到缓冲区，注意即使在播放之前音频文件没有加载到缓冲区程序也会隐式调用此方法。\n- (BOOL)play;\t播放音频文件\n- (BOOL)playAtTime:(NSTimeInterval)time\t在指定的时间开始播放音频\n- (void)pause;\t暂停播放\n- (void)stop;\t停止播放\n- (void)updateMeters\t更新音频测量值，注意如果要更新音频测量值必须设置meteringEnabled为YES，通过音频测量值可以即时获得音频分贝等信息\n- (float)peakPowerForChannel:(NSUInteger)channelNumber;\t获得指定声道的分贝峰值，注意如果要获得分贝峰值必须在此之前调用updateMeters方法\n- (float)averagePowerForChannel:(NSUInteger)channelNumber\t获得指定声道的分贝平均值，注意如果要获得分贝平均值必须在此之前调用updateMeters方法\n@property(nonatomic, copy) NSArray *channelAssignments\t获得或设置播放声道\n代理方法\t说明\n- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer *)player successfully:(BOOL)flag\t音频播放完成\n- (void)audioPlayerDecodeErrorDidOccur:(AVAudioPlayer *)player error:(NSError *)error\t音频解码发生错误\nAVAudioPlayer的使用比较简单：\n初始化AVAudioPlayer对象，此时通常指定本地文件路径。\n设置播放器属性，例如重复次数、音量大小等。\n调用play方法播放。\n下面就使用AVAudioPlayer实现一个简单播放器，在这个播放器中实现了播放、暂停、显示播放进度功能，当然例如调节音量、设置循环模式、甚至是声波图像（通过分析音频分贝值）等功能都可以实现，这里就不再一一演示。界面效果如下：\nAudioPlayerScreen\n当然由于AVAudioPlayer一次只能播放一个音频文件，所有上一曲、下一曲其实可以通过创建多个播放器对象来完成，这里暂不实现。播放进度的实现主要依靠一个定时器实时计算当前播放时长和音频总时长的比例，另外为了演示委托方法，下面的代码中也实现了播放完成委托方法，通常如果有下一曲功能的话播放完可以触发下一曲音乐播放。下面是主要代码：\n//\n//  ViewController.m\n//  KCAVAudioPlayer\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"ViewController.h\"\n#import <AVFoundation/AVFoundation.h>\n#define kMusicFile @\"刘若英 - 原来你也在这里.mp3\"\n#define kMusicSinger @\"刘若英\"\n#define kMusicTitle @\"原来你也在这里\"\n\n@interface ViewController ()<AVAudioPlayerDelegate>\n\n@property (nonatomic,strong) AVAudioPlayer *audioPlayer;//播放器\n@property (weak, nonatomic) IBOutlet UILabel *controlPanel; //控制面板\n@property (weak, nonatomic) IBOutlet UIProgressView *playProgress;//播放进度\n@property (weak, nonatomic) IBOutlet UILabel *musicSinger; //演唱者\n@property (weak, nonatomic) IBOutlet UIButton *playOrPause; //播放/暂停按钮(如果tag为0认为是暂停状态，1是播放状态)\n\n@property (weak ,nonatomic) NSTimer *timer;//进度更新定时器\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    [self setupUI];\n    \n}\n\n/**\n *  初始化UI\n */\n-(void)setupUI{\n    self.title=kMusicTitle;\n    self.musicSinger.text=kMusicSinger;\n}\n\n-(NSTimer *)timer{\n    if (!_timer) {\n        _timer=[NSTimer scheduledTimerWithTimeInterval:0.5 target:self selector:@selector(updateProgress) userInfo:nil repeats:true];\n    }\n    return _timer;\n}\n\n/**\n *  创建播放器\n *\n *  @return 音频播放器\n */\n-(AVAudioPlayer *)audioPlayer{\n    if (!_audioPlayer) {\n        NSString *urlStr=[[NSBundle mainBundle]pathForResource:kMusicFile ofType:nil];\n        NSURL *url=[NSURL fileURLWithPath:urlStr];\n        NSError *error=nil;\n        //初始化播放器，注意这里的Url参数只能时文件路径，不支持HTTP Url\n        _audioPlayer=[[AVAudioPlayer alloc]initWithContentsOfURL:url error:&error];\n        //设置播放器属性\n        _audioPlayer.numberOfLoops=0;//设置为0不循环\n        _audioPlayer.delegate=self;\n        [_audioPlayer prepareToPlay];//加载音频文件到缓存\n        if(error){\n            NSLog(@\"初始化播放器过程发生错误,错误信息:%@\",error.localizedDescription);\n            return nil;\n        }\n    }\n    return _audioPlayer;\n}\n\n/**\n *  播放音频\n */\n-(void)play{\n    if (![self.audioPlayer isPlaying]) {\n        [self.audioPlayer play];\n        self.timer.fireDate=[NSDate distantPast];//恢复定时器\n    }\n}\n\n/**\n *  暂停播放\n */\n-(void)pause{\n    if ([self.audioPlayer isPlaying]) {\n        [self.audioPlayer pause];\n        self.timer.fireDate=[NSDate distantFuture];//暂停定时器，注意不能调用invalidate方法，此方法会取消，之后无法恢复\n        \n    }\n}\n\n/**\n *  点击播放/暂停按钮\n *\n *  @param sender 播放/暂停按钮\n */\n- (IBAction)playClick:(UIButton *)sender {\n    if(sender.tag){\n        sender.tag=0;\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_play_n\"] forState:UIControlStateNormal];\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_play_h\"] forState:UIControlStateHighlighted];\n        [self pause];\n    }else{\n        sender.tag=1;\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_pause_n\"] forState:UIControlStateNormal];\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_pause_h\"] forState:UIControlStateHighlighted];\n        [self play];\n    }\n}\n\n/**\n *  更新播放进度\n */\n-(void)updateProgress{\n    float progress= self.audioPlayer.currentTime /self.audioPlayer.duration;\n    [self.playProgress setProgress:progress animated:true];\n}\n\n#pragma mark - 播放器代理方法\n-(void)audioPlayerDidFinishPlaying:(AVAudioPlayer *)player successfully:(BOOL)flag{\n    NSLog(@\"音乐播放完成...\");\n}\n\n@end\n运行效果：\nAVAudioPlayer\n音频会话\n事实上上面的播放器还存在一些问题，例如通常我们看到的播放器即使退出到后台也是可以播放的，而这个播放器如果退出到后台它会自动暂停。如果要支持后台播放需要做下面几件事情：\n1.设置后台运行模式：在plist文件中添加Required background modes，并且设置item 0=App plays audio or streams audio/video using AirPlay（其实可以直接通过Xcode在Project Targets-Capabilities-Background Modes中设置）\nBackgroundModes\n2.设置AVAudioSession的类型为AVAudioSessionCategoryPlayback并且调用setActive::方法启动会话。\n    AVAudioSession *audioSession=[AVAudioSession sharedInstance];\n    [audioSession setCategory:AVAudioSessionCategoryPlayback error:nil];\n    [audioSession setActive:YES error:nil];\n3.为了能够让应用退到后台之后支持耳机控制，建议添加远程控制事件（这一步不是后台播放必须的）\n前两步是后台播放所必须设置的，第三步主要用于接收远程事件，这部分内容之前的文章中有详细介绍，如果这一步不设置虽让也能够在后台播放，但是无法获得音频控制权（如果在使用当前应用之前使用其他播放器播放音乐的话，此时如果按耳机播放键或者控制中心的播放按钮则会播放前一个应用的音频），并且不能使用耳机进行音频控制。第一步操作相信大家都很容易理解，如果应用程序要允许运行到后台必须设置，正常情况下应用如果进入后台会被挂起，通过该设置可以上应用程序继续在后台运行。但是第二步使用的AVAudioSession有必要进行一下详细的说明。\n在iOS中每个应用都有一个音频会话，这个会话就通过AVAudioSession来表示。AVAudioSession同样存在于AVFoundation框架中，它是单例模式设计，通过sharedInstance进行访问。在使用Apple设备时大家会发现有些应用只要打开其他音频播放就会终止，而有些应用却可以和其他应用同时播放，在多种音频环境中如何去控制播放的方式就是通过音频会话来完成的。下面是音频会话的几种会话模式：\n会话类型\t说明\t是否要求输入\t是否要求输出\t是否遵从静音键\nAVAudioSessionCategoryAmbient\t混音播放，可以与其他音频应用同时播放\t否\t是\t是\nAVAudioSessionCategorySoloAmbient\t独占播放\t否\t是\t是\nAVAudioSessionCategoryPlayback\t后台播放，也是独占的\t否\t是\t否\nAVAudioSessionCategoryRecord\t录音模式，用于录音时使用\t是\t否\t否\nAVAudioSessionCategoryPlayAndRecord\t播放和录音，此时可以录音也可以播放\t是\t是\t否\nAVAudioSessionCategoryAudioProcessing\t硬件解码音频，此时不能播放和录制\t否\t否\t否\nAVAudioSessionCategoryMultiRoute\t多种输入输出，例如可以耳机、USB设备同时播放\t是\t是\t否\n注意：是否遵循静音键表示在播放过程中如果用户通过硬件设置为静音是否能关闭声音。\n根据前面对音频会话的理解，相信大家开发出能够在后台播放的音频播放器并不难，但是注意一下，在前面的代码中也提到设置完音频会话类型之后需要调用setActive::方法将会话激活才能起作用。类似的，如果一个应用已经在播放音频，打开我们的应用之后设置了在后台播放的会话类型，此时其他应用的音频会停止而播放我们的音频，如果希望我们的程序音频播放完之后（关闭或退出到后台之后）能够继续播放其他应用的音频的话则可以调用setActive::方法关闭会话。代码如下：\n//\n//  ViewController.m\n//  KCAVAudioPlayer\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//  AVAudioSession 音频会话\n\n#import \"ViewController.h\"\n#import <AVFoundation/AVFoundation.h>\n#define kMusicFile @\"刘若英 - 原来你也在这里.mp3\"\n#define kMusicSinger @\"刘若英\"\n#define kMusicTitle @\"原来你也在这里\"\n\n@interface ViewController ()<AVAudioPlayerDelegate>\n\n@property (nonatomic,strong) AVAudioPlayer *audioPlayer;//播放器\n@property (weak, nonatomic) IBOutlet UILabel *controlPanel; //控制面板\n@property (weak, nonatomic) IBOutlet UIProgressView *playProgress;//播放进度\n@property (weak, nonatomic) IBOutlet UILabel *musicSinger; //演唱者\n@property (weak, nonatomic) IBOutlet UIButton *playOrPause; //播放/暂停按钮(如果tag为0认为是暂停状态，1是播放状态)\n\n@property (weak ,nonatomic) NSTimer *timer;//进度更新定时器\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    [self setupUI];\n    \n}\n\n/**\n *  显示当面视图控制器时注册远程事件\n *\n *  @param animated 是否以动画的形式显示\n */\n-(void)viewWillAppear:(BOOL)animated{\n    [super viewWillAppear:animated];\n    //开启远程控制\n    [[UIApplication sharedApplication] beginReceivingRemoteControlEvents];\n    //作为第一响应者\n    //[self becomeFirstResponder];\n}\n/**\n *  当前控制器视图不显示时取消远程控制\n *\n *  @param animated 是否以动画的形式消失\n */\n-(void)viewWillDisappear:(BOOL)animated{\n    [super viewWillDisappear:animated];\n    [[UIApplication sharedApplication] endReceivingRemoteControlEvents];\n    //[self resignFirstResponder];\n}\n\n/**\n *  初始化UI\n */\n-(void)setupUI{\n    self.title=kMusicTitle;\n    self.musicSinger.text=kMusicSinger;\n}\n\n-(NSTimer *)timer{\n    if (!_timer) {\n        _timer=[NSTimer scheduledTimerWithTimeInterval:0.5 target:self selector:@selector(updateProgress) userInfo:nil repeats:true];\n    }\n    return _timer;\n}\n\n/**\n *  创建播放器\n *\n *  @return 音频播放器\n */\n-(AVAudioPlayer *)audioPlayer{\n    if (!_audioPlayer) {\n        NSString *urlStr=[[NSBundle mainBundle]pathForResource:kMusicFile ofType:nil];\n        NSURL *url=[NSURL fileURLWithPath:urlStr];\n        NSError *error=nil;\n        //初始化播放器，注意这里的Url参数只能时文件路径，不支持HTTP Url\n        _audioPlayer=[[AVAudioPlayer alloc]initWithContentsOfURL:url error:&error];\n        //设置播放器属性\n        _audioPlayer.numberOfLoops=0;//设置为0不循环\n        _audioPlayer.delegate=self;\n        [_audioPlayer prepareToPlay];//加载音频文件到缓存\n        if(error){\n            NSLog(@\"初始化播放器过程发生错误,错误信息:%@\",error.localizedDescription);\n            return nil;\n        }\n        //设置后台播放模式\n        AVAudioSession *audioSession=[AVAudioSession sharedInstance];\n        [audioSession setCategory:AVAudioSessionCategoryPlayback error:nil];\n//        [audioSession setCategory:AVAudioSessionCategoryPlayback withOptions:AVAudioSessionCategoryOptionAllowBluetooth error:nil];\n        [audioSession setActive:YES error:nil];\n        //添加通知，拔出耳机后暂停播放\n        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(routeChange:) name:AVAudioSessionRouteChangeNotification object:nil];\n    }\n    return _audioPlayer;\n}\n\n/**\n *  播放音频\n */\n-(void)play{\n    if (![self.audioPlayer isPlaying]) {\n        [self.audioPlayer play];\n        self.timer.fireDate=[NSDate distantPast];//恢复定时器\n    }\n}\n\n/**\n *  暂停播放\n */\n-(void)pause{\n    if ([self.audioPlayer isPlaying]) {\n        [self.audioPlayer pause];\n        self.timer.fireDate=[NSDate distantFuture];//暂停定时器，注意不能调用invalidate方法，此方法会取消，之后无法恢复\n        \n    }\n}\n\n/**\n *  点击播放/暂停按钮\n *\n *  @param sender 播放/暂停按钮\n */\n- (IBAction)playClick:(UIButton *)sender {\n    if(sender.tag){\n        sender.tag=0;\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_play_n\"] forState:UIControlStateNormal];\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_play_h\"] forState:UIControlStateHighlighted];\n        [self pause];\n    }else{\n        sender.tag=1;\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_pause_n\"] forState:UIControlStateNormal];\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_pause_h\"] forState:UIControlStateHighlighted];\n        [self play];\n    }\n}\n\n/**\n *  更新播放进度\n */\n-(void)updateProgress{\n    float progress= self.audioPlayer.currentTime /self.audioPlayer.duration;\n    [self.playProgress setProgress:progress animated:true];\n}\n\n/**\n *  一旦输出改变则执行此方法\n *\n *  @param notification 输出改变通知对象\n */\n-(void)routeChange:(NSNotification *)notification{\n    NSDictionary *dic=notification.userInfo;\n    int changeReason= [dic[AVAudioSessionRouteChangeReasonKey] intValue];\n    //等于AVAudioSessionRouteChangeReasonOldDeviceUnavailable表示旧输出不可用\n    if (changeReason==AVAudioSessionRouteChangeReasonOldDeviceUnavailable) {\n        AVAudioSessionRouteDescription *routeDescription=dic[AVAudioSessionRouteChangePreviousRouteKey];\n        AVAudioSessionPortDescription *portDescription= [routeDescription.outputs firstObject];\n        //原设备为耳机则暂停\n        if ([portDescription.portType isEqualToString:@\"Headphones\"]) {\n            [self pause];\n        }\n    }\n    \n//    [dic enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {\n//        NSLog(@\"%@:%@\",key,obj);\n//    }];\n}\n\n-(void)dealloc{\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:AVAudioSessionRouteChangeNotification object:nil];\n}\n\n#pragma mark - 播放器代理方法\n-(void)audioPlayerDidFinishPlaying:(AVAudioPlayer *)player successfully:(BOOL)flag{\n    NSLog(@\"音乐播放完成...\");\n    //根据实际情况播放完成可以将会话关闭，其他音频应用继续播放\n    [[AVAudioSession sharedInstance]setActive:NO error:nil];\n}\n\n@end\n在上面的代码中还实现了拔出耳机暂停音乐播放的功能，这也是一个比较常见的功能。在iOS7及以后的版本中可以通过通知获得输出改变的通知，然后拿到通知对象后根据userInfo获得是何种改变类型，进而根据情况对音乐进行暂停操作。\n扩展--播放音乐库中的音乐\n众所周知音乐是iOS的重要组成播放，无论是iPod、iTouch、iPhone还是iPad都可以在iTunes购买音乐或添加本地音乐到音乐库中同步到你的iOS设备。在MediaPlayer.frameowork中有一个MPMusicPlayerController用于播放音乐库中的音乐。\n下面先来看一下MPMusicPlayerController的常用属性和方法：\n属性\t说明\n@property (nonatomic, readonly) MPMusicPlaybackState playbackState\t播放器状态，枚举类型：\nMPMusicPlaybackStateStopped：停止播放 MPMusicPlaybackStatePlaying：正在播放\nMPMusicPlaybackStatePaused：暂停播放\nMPMusicPlaybackStateInterrupted：播放中断\nMPMusicPlaybackStateSeekingForward：向前查找\nMPMusicPlaybackStateSeekingBackward：向后查找\n@property (nonatomic) MPMusicRepeatMode repeatMode\t重复模式，枚举类型：\nMPMusicRepeatModeDefault：默认模式，使用用户的首选项（系统音乐程序设置）\nMPMusicRepeatModeNone：不重复\nMPMusicRepeatModeOne：单曲循环\nMPMusicRepeatModeAll：在当前列表内循环\n@property (nonatomic) MPMusicShuffleMode shuffleMode\t随机播放模式，枚举类型：\nMPMusicShuffleModeDefault：默认模式，使用用户首选项（系统音乐程序设置）\nMPMusicShuffleModeOff：不随机播放\nMPMusicShuffleModeSongs：按歌曲随机播放\nMPMusicShuffleModeAlbums：按专辑随机播放\n@property (nonatomic, copy) MPMediaItem *nowPlayingItem\t正在播放的音乐项\n@property (nonatomic, readonly) NSUInteger indexOfNowPlayingItem\t当前正在播放的音乐在播放队列中的索引\n@property(nonatomic, readonly) BOOL isPreparedToPlay\t是否准好播放准备\n@property(nonatomic) NSTimeInterval currentPlaybackTime\t当前已播放时间，单位：秒\n@property(nonatomic) float currentPlaybackRate\t当前播放速度，是一个播放速度倍率，0表示暂停播放，1代表正常速度\n类方法\t说明\n+ (MPMusicPlayerController *)applicationMusicPlayer;\t获取应用播放器，注意此类播放器无法在后台播放\n+ (MPMusicPlayerController *)systemMusicPlayer\t获取系统播放器，支持后台播放\n对象方法\t说明\n- (void)setQueueWithQuery:(MPMediaQuery *)query\t使用媒体队列设置播放源媒体队列\n- (void)setQueueWithItemCollection:(MPMediaItemCollection *)itemCollection\t使用媒体项集合设置播放源媒体队列\n- (void)skipToNextItem\t下一曲\n- (void)skipToBeginning\t从起始位置播放\n- (void)skipToPreviousItem\t上一曲\n- (void)beginGeneratingPlaybackNotifications\t开启播放通知，注意不同于其他播放器，MPMusicPlayerController要想获得通知必须首先开启，默认情况无法获得通知\n- (void)endGeneratingPlaybackNotifications\t关闭播放通知\n- (void)prepareToPlay\t做好播放准备（加载音频到缓冲区），在使用play方法播放时如果没有做好准备回自动调用该方法\n- (void)play\t开始播放\n- (void)pause\t暂停播放\n- (void)stop\t停止播放\n- (void)beginSeekingForward\t开始向前查找（快进）\n- (void)beginSeekingBackward\t开始向后查找（快退）\n- (void)endSeeking\t结束查找\n通知\t说明\n（注意：要想获得MPMusicPlayerController通知必须首先调用beginGeneratingPlaybackNotifications开启通知）\nMPMusicPlayerControllerPlaybackStateDidChangeNotification\t播放状态改变\nMPMusicPlayerControllerNowPlayingItemDidChangeNotification\t当前播放音频改变\nMPMusicPlayerControllerVolumeDidChangeNotification\t声音大小改变\nMPMediaPlaybackIsPreparedToPlayDidChangeNotification\t准备好播放\nMPMusicPlayerController有两种播放器：applicationMusicPlayer和systemMusicPlayer，前者在应用退出后音乐播放会自动停止，后者在应用停止后不会退出播放状态。\nMPMusicPlayerController加载音乐不同于前面的AVAudioPlayer是通过一个文件路径来加载，而是需要一个播放队列。在MPMusicPlayerController中提供了两个方法来加载播放队列：- (void)setQueueWithQuery:(MPMediaQuery *)query和- (void)setQueueWithItemCollection:(MPMediaItemCollection *)itemCollection，正是由于它的播放音频来源是一个队列，因此MPMusicPlayerController支持上一曲、下一曲等操作。\n那么接下来的问题就是如何获取MPMediaQueue或者MPMediaItemCollection？MPMediaQueue对象有一系列的类方法来获得媒体队列：\n+ (MPMediaQuery *)albumsQuery;\n+ (MPMediaQuery *)artistsQuery;\n+ (MPMediaQuery *)songsQuery;\n+ (MPMediaQuery *)playlistsQuery;\n+ (MPMediaQuery *)podcastsQuery;\n+ (MPMediaQuery *)audiobooksQuery;\n+ (MPMediaQuery *)compilationsQuery;\n+ (MPMediaQuery *)composersQuery;\n+ (MPMediaQuery *)genresQuery;\n有了这些方法，就可以很容易获到歌曲、播放列表、专辑媒体等媒体队列了，这样就可以通过：- (void)setQueueWithQuery:(MPMediaQuery *)query方法设置音乐来源了。又或者得到MPMediaQueue之后创建MPMediaItemCollection，使用- (void)setQueueWithItemCollection:(MPMediaItemCollection *)itemCollection设置音乐来源。\n有时候可能希望用户自己来选择要播放的音乐，这时可以使用MPMediaPickerController，它是一个视图控制器，类似于UIImagePickerController，选择完播放来源后可以在其代理方法中获得MPMediaItemCollection对象。\n无论是通过哪种方式获得MPMusicPlayerController的媒体源，可能都希望将每个媒体的信息显示出来，这时候可以通过MPMediaItem对象获得。一个MPMediaItem代表一个媒体文件，通过它可以访问媒体标题、专辑名称、专辑封面、音乐时长等等。无论是MPMediaQueue还是MPMediaItemCollection都有一个items属性，它是MPMediaItem数组，通过这个属性可以获得MPMediaItem对象。\n下面就简单看一下MPMusicPlayerController的使用，在下面的例子中简单演示了音乐的选择、播放、暂停、通知、下一曲、上一曲功能，相信有了上面的概念，代码读起来并不复杂（示例中是直接通过MPMeidaPicker进行音乐选择的，但是仍然提供了两个方法getLocalMediaQuery和getLocalMediaItemCollection来演示如何直接通过MPMediaQueue获得媒体队列或媒体集合）：\n//\n//  ViewController.m\n//  MPMusicPlayerController\n//\n//  Created by Kenshin Cui 14/03/30\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"ViewController.h\"\n#import <MediaPlayer/MediaPlayer.h>\n\n@interface ViewController ()<MPMediaPickerControllerDelegate>\n\n@property (nonatomic,strong) MPMediaPickerController *mediaPicker;//媒体选择控制器\n@property (nonatomic,strong) MPMusicPlayerController *musicPlayer; //音乐播放器\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n}\n\n-(void)dealloc{\n    [self.musicPlayer endGeneratingPlaybackNotifications];\n}\n\n/**\n *  获得音乐播放器\n *\n *  @return 音乐播放器\n */\n-(MPMusicPlayerController *)musicPlayer{\n    if (!_musicPlayer) {\n        _musicPlayer=[MPMusicPlayerController systemMusicPlayer];\n        [_musicPlayer beginGeneratingPlaybackNotifications];//开启通知，否则监控不到MPMusicPlayerController的通知\n        [self addNotification];//添加通知\n        //如果不使用MPMediaPickerController可以使用如下方法获得音乐库媒体队列\n        //[_musicPlayer setQueueWithItemCollection:[self getLocalMediaItemCollection]];\n    }\n    return _musicPlayer;\n}\n\n/**\n *  创建媒体选择器\n *\n *  @return 媒体选择器\n */\n-(MPMediaPickerController *)mediaPicker{\n    if (!_mediaPicker) {\n        //初始化媒体选择器，这里设置媒体类型为音乐，其实这里也可以选择视频、广播等\n//        _mediaPicker=[[MPMediaPickerController alloc]initWithMediaTypes:MPMediaTypeMusic];\n        _mediaPicker=[[MPMediaPickerController alloc]initWithMediaTypes:MPMediaTypeAny];\n        _mediaPicker.allowsPickingMultipleItems=YES;//允许多选\n//        _mediaPicker.showsCloudItems=YES;//显示icloud选项\n        _mediaPicker.prompt=@\"请选择要播放的音乐\";\n        _mediaPicker.delegate=self;//设置选择器代理\n    }\n    return _mediaPicker;\n}\n\n/**\n *  取得媒体队列\n *\n *  @return 媒体队列\n */\n-(MPMediaQuery *)getLocalMediaQuery{\n    MPMediaQuery *mediaQueue=[MPMediaQuery songsQuery];\n    for (MPMediaItem *item in mediaQueue.items) {\n        NSLog(@\"标题：%@,%@\",item.title,item.albumTitle);\n    }\n    return mediaQueue;\n}\n\n/**\n *  取得媒体集合\n *\n *  @return 媒体集合\n */\n-(MPMediaItemCollection *)getLocalMediaItemCollection{\n    MPMediaQuery *mediaQueue=[MPMediaQuery songsQuery];\n    NSMutableArray *array=[NSMutableArray array];\n    for (MPMediaItem *item in mediaQueue.items) {\n        [array addObject:item];\n        NSLog(@\"标题：%@,%@\",item.title,item.albumTitle);\n    }\n    MPMediaItemCollection *mediaItemCollection=[[MPMediaItemCollection alloc]initWithItems:[array copy]];\n    return mediaItemCollection;\n}\n\n#pragma mark - MPMediaPickerController代理方法\n//选择完成\n-(void)mediaPicker:(MPMediaPickerController *)mediaPicker didPickMediaItems:(MPMediaItemCollection *)mediaItemCollection{\n    MPMediaItem *mediaItem=[mediaItemCollection.items firstObject];//第一个播放音乐\n    //注意很多音乐信息如标题、专辑、表演者、封面、时长等信息都可以通过MPMediaItem的valueForKey:方法得到,但是从iOS7开始都有对应的属性可以直接访问\n//    NSString *title= [mediaItem valueForKey:MPMediaItemPropertyAlbumTitle];\n//    NSString *artist= [mediaItem valueForKey:MPMediaItemPropertyAlbumArtist];\n//    MPMediaItemArtwork *artwork= [mediaItem valueForKey:MPMediaItemPropertyArtwork];\n    //UIImage *image=[artwork imageWithSize:CGSizeMake(100, 100)];//专辑图片\n    NSLog(@\"标题：%@,表演者：%@,专辑：%@\",mediaItem.title ,mediaItem.artist,mediaItem.albumTitle);\n    [self.musicPlayer setQueueWithItemCollection:mediaItemCollection];\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n//取消选择\n-(void)mediaPickerDidCancel:(MPMediaPickerController *)mediaPicker{\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\n#pragma mark - 通知\n/**\n *  添加通知\n */\n-(void)addNotification{\n    NSNotificationCenter *notificationCenter=[NSNotificationCenter defaultCenter];\n    [notificationCenter addObserver:self selector:@selector(playbackStateChange:) name:MPMusicPlayerControllerPlaybackStateDidChangeNotification object:self.musicPlayer];\n}\n\n/**\n *  播放状态改变通知\n *\n *  @param notification 通知对象\n */\n-(void)playbackStateChange:(NSNotification *)notification{\n    switch (self.musicPlayer.playbackState) {\n        case MPMusicPlaybackStatePlaying:\n            NSLog(@\"正在播放...\");\n            break;\n        case MPMusicPlaybackStatePaused:\n            NSLog(@\"播放暂停.\");\n            break;\n        case MPMusicPlaybackStateStopped:\n            NSLog(@\"播放停止.\");\n            break;\n        default:\n            break;\n    }\n}\n\n#pragma mark - UI事件\n- (IBAction)selectClick:(UIButton *)sender {\n    [self presentViewController:self.mediaPicker animated:YES completion:nil];\n}\n\n- (IBAction)playClick:(UIButton *)sender {\n    [self.musicPlayer play];\n}\n\n- (IBAction)puaseClick:(UIButton *)sender {\n    [self.musicPlayer pause];\n}\n\n- (IBAction)stopClick:(UIButton *)sender {\n    [self.musicPlayer stop];\n}\n\n- (IBAction)nextClick:(UIButton *)sender {\n    [self.musicPlayer skipToNextItem];\n}\n\n- (IBAction)prevClick:(UIButton *)sender {\n    [self.musicPlayer skipToPreviousItem];\n}\n\n@end\n录音\n除了上面说的，在AVFoundation框架中还要一个AVAudioRecorder类专门处理录音操作，它同样支持多种音频格式。与AVAudioPlayer类似，你完全可以将它看成是一个录音机控制类，下面是常用的属性和方法：\n属性\t说明\n@property(readonly, getter=isRecording) BOOL recording;\t是否正在录音，只读\n@property(readonly) NSURL *url\t录音文件地址，只读\n@property(readonly) NSDictionary *settings\t录音文件设置，只读\n@property(readonly) NSTimeInterval currentTime\t录音时长，只读，注意仅仅在录音状态可用\n@property(readonly) NSTimeInterval deviceCurrentTime\t输入设置的时间长度，只读，注意此属性一直可访问\n@property(getter=isMeteringEnabled) BOOL meteringEnabled;\t是否启用录音测量，如果启用录音测量可以获得录音分贝等数据信息\n@property(nonatomic, copy) NSArray *channelAssignments\t当前录音的通道\n对象方法\t说明\n- (instancetype)initWithURL:(NSURL *)url settings:(NSDictionary *)settings error:(NSError **)outError\t录音机对象初始化方法，注意其中的url必须是本地文件url，settings是录音格式、编码等设置\n- (BOOL)prepareToRecord\t准备录音，主要用于创建缓冲区，如果不手动调用，在调用record录音时也会自动调用\n- (BOOL)record\t开始录音\n- (BOOL)recordAtTime:(NSTimeInterval)time\t在指定的时间开始录音，一般用于录音暂停再恢复录音\n- (BOOL)recordForDuration:(NSTimeInterval) duration\t按指定的时长开始录音\n- (BOOL)recordAtTime:(NSTimeInterval)time forDuration:(NSTimeInterval) duration\t在指定的时间开始录音，并指定录音时长\n- (void)pause;\t暂停录音\n- (void)stop;\t停止录音\n- (BOOL)deleteRecording;\t删除录音，注意要删除录音此时录音机必须处于停止状态\n- (void)updateMeters;\t更新测量数据，注意只有meteringEnabled为YES此方法才可用\n- (float)peakPowerForChannel:(NSUInteger)channelNumber;\t指定通道的测量峰值，注意只有调用完updateMeters才有值\n- (float)averagePowerForChannel:(NSUInteger)channelNumber\t指定通道的测量平均值，注意只有调用完updateMeters才有值\n代理方法\t说明\n- (void)audioRecorderDidFinishRecording:(AVAudioRecorder *)recorder successfully:(BOOL)flag\t完成录音\n- (void)audioRecorderEncodeErrorDidOccur:(AVAudioRecorder *)recorder error:(NSError *)error\t录音编码发生错误\nAVAudioRecorder很多属性和方法跟AVAudioPlayer都是类似的,但是它的创建有所不同，在创建录音机时除了指定路径外还必须指定录音设置信息，因为录音机必须知道录音文件的格式、采样率、通道数、每个采样点的位数等信息，但是也并不是所有的信息都必须设置，通常只需要几个常用设置。关于录音设置详见帮助文档中的“AV Foundation Audio Settings Constants”。\n下面就使用AVAudioRecorder创建一个录音机，实现了录音、暂停、停止、播放等功能，实现效果大致如下：\nAVAudioRecorderSnapshot\n在这个示例中将实行一个完整的录音控制，包括录音、暂停、恢复、停止，同时还会实时展示用户录音的声音波动，当用户点击完停止按钮还会自动播放录音文件。程序的构建主要分为以下几步：\n设置音频会话类型为AVAudioSessionCategoryPlayAndRecord，因为程序中牵扯到录音和播放操作。\n创建录音机AVAudioRecorder，指定录音保存的路径并且设置录音属性，注意对于一般的录音文件要求的采样率、位数并不高，需要适当设置以保证录音文件的大小和效果。\n设置录音机代理以便在录音完成后播放录音，打开录音测量保证能够实时获得录音时的声音强度。（注意声音强度范围-160到0,0代表最大输入）\n创建音频播放器AVAudioPlayer，用于在录音完成之后播放录音。\n创建一个定时器以便实时刷新录音测量值并更新录音强度到UIProgressView中显示。\n添加录音、暂停、恢复、停止操作，需要注意录音的恢复操作其实是有音频会话管理的，恢复时只要再次调用record方法即可，无需手动管理恢复时间等。\n下面是主要代码：\n//\n//  ViewController.m\n//  AVAudioRecorder\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"ViewController.h\"\n#import <AVFoundation/AVFoundation.h>\n#define kRecordAudioFile @\"myRecord.caf\"\n\n@interface ViewController ()<AVAudioRecorderDelegate>\n\n@property (nonatomic,strong) AVAudioRecorder *audioRecorder;//音频录音机\n@property (nonatomic,strong) AVAudioPlayer *audioPlayer;//音频播放器，用于播放录音文件\n@property (nonatomic,strong) NSTimer *timer;//录音声波监控（注意这里暂时不对播放进行监控）\n\n@property (weak, nonatomic) IBOutlet UIButton *record;//开始录音\n@property (weak, nonatomic) IBOutlet UIButton *pause;//暂停录音\n@property (weak, nonatomic) IBOutlet UIButton *resume;//恢复录音\n@property (weak, nonatomic) IBOutlet UIButton *stop;//停止录音\n@property (weak, nonatomic) IBOutlet UIProgressView *audioPower;//音频波动\n\n@end\n\n@implementation ViewController\n\n#pragma mark - 控制器视图方法\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    [self setAudioSession];\n}\n\n#pragma mark - 私有方法\n/**\n *  设置音频会话\n */\n-(void)setAudioSession{\n    AVAudioSession *audioSession=[AVAudioSession sharedInstance];\n    //设置为播放和录音状态，以便可以在录制完之后播放录音\n    [audioSession setCategory:AVAudioSessionCategoryPlayAndRecord error:nil];\n    [audioSession setActive:YES error:nil];\n}\n\n/**\n *  取得录音文件保存路径\n *\n *  @return 录音文件路径\n */\n-(NSURL *)getSavePath{\n    NSString *urlStr=[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];\n    urlStr=[urlStr stringByAppendingPathComponent:kRecordAudioFile];\n    NSLog(@\"file path:%@\",urlStr);\n    NSURL *url=[NSURL fileURLWithPath:urlStr];\n    return url;\n}\n\n/**\n *  取得录音文件设置\n *\n *  @return 录音设置\n */\n-(NSDictionary *)getAudioSetting{\n    NSMutableDictionary *dicM=[NSMutableDictionary dictionary];\n    //设置录音格式\n    [dicM setObject:@(kAudioFormatLinearPCM) forKey:AVFormatIDKey];\n    //设置录音采样率，8000是电话采样率，对于一般录音已经够了\n    [dicM setObject:@(8000) forKey:AVSampleRateKey];\n    //设置通道,这里采用单声道\n    [dicM setObject:@(1) forKey:AVNumberOfChannelsKey];\n    //每个采样点位数,分为8、16、24、32\n    [dicM setObject:@(8) forKey:AVLinearPCMBitDepthKey];\n    //是否使用浮点数采样\n    [dicM setObject:@(YES) forKey:AVLinearPCMIsFloatKey];\n    //....其他设置等\n    return dicM;\n}\n\n/**\n *  获得录音机对象\n *\n *  @return 录音机对象\n */\n-(AVAudioRecorder *)audioRecorder{\n    if (!_audioRecorder) {\n        //创建录音文件保存路径\n        NSURL *url=[self getSavePath];\n        //创建录音格式设置\n        NSDictionary *setting=[self getAudioSetting];\n        //创建录音机\n        NSError *error=nil;\n        _audioRecorder=[[AVAudioRecorder alloc]initWithURL:url settings:setting error:&error];\n        _audioRecorder.delegate=self;\n        _audioRecorder.meteringEnabled=YES;//如果要监控声波则必须设置为YES\n        if (error) {\n            NSLog(@\"创建录音机对象时发生错误，错误信息：%@\",error.localizedDescription);\n            return nil;\n        }\n    }\n    return _audioRecorder;\n}\n\n/**\n *  创建播放器\n *\n *  @return 播放器\n */\n-(AVAudioPlayer *)audioPlayer{\n    if (!_audioPlayer) {\n        NSURL *url=[self getSavePath];\n        NSError *error=nil;\n        _audioPlayer=[[AVAudioPlayer alloc]initWithContentsOfURL:url error:&error];\n        _audioPlayer.numberOfLoops=0;\n        [_audioPlayer prepareToPlay];\n        if (error) {\n            NSLog(@\"创建播放器过程中发生错误，错误信息：%@\",error.localizedDescription);\n            return nil;\n        }\n    }\n    return _audioPlayer;\n}\n\n/**\n *  录音声波监控定制器\n *\n *  @return 定时器\n */\n-(NSTimer *)timer{\n    if (!_timer) {\n        _timer=[NSTimer scheduledTimerWithTimeInterval:0.1f target:self selector:@selector(audioPowerChange) userInfo:nil repeats:YES];\n    }\n    return _timer;\n}\n\n/**\n *  录音声波状态设置\n */\n-(void)audioPowerChange{\n    [self.audioRecorder updateMeters];//更新测量值\n    float power= [self.audioRecorder averagePowerForChannel:0];//取得第一个通道的音频，注意音频强度范围时-160到0\n    CGFloat progress=(1.0/160.0)*(power+160.0);\n    [self.audioPower setProgress:progress];\n}\n#pragma mark - UI事件\n/**\n *  点击录音按钮\n *\n *  @param sender 录音按钮\n */\n- (IBAction)recordClick:(UIButton *)sender {\n    if (![self.audioRecorder isRecording]) {\n        [self.audioRecorder record];//首次使用应用时如果调用record方法会询问用户是否允许使用麦克风\n        self.timer.fireDate=[NSDate distantPast];\n    }\n}\n\n/**\n *  点击暂定按钮\n *\n *  @param sender 暂停按钮\n */\n- (IBAction)pauseClick:(UIButton *)sender {\n    if ([self.audioRecorder isRecording]) {\n        [self.audioRecorder pause];\n        self.timer.fireDate=[NSDate distantFuture];\n    }\n}\n\n/**\n *  点击恢复按钮\n *  恢复录音只需要再次调用record，AVAudioSession会帮助你记录上次录音位置并追加录音\n *\n *  @param sender 恢复按钮\n */\n- (IBAction)resumeClick:(UIButton *)sender {\n    [self recordClick:sender];\n}\n\n/**\n *  点击停止按钮\n *\n *  @param sender 停止按钮\n */\n- (IBAction)stopClick:(UIButton *)sender {\n    [self.audioRecorder stop];\n    self.timer.fireDate=[NSDate distantFuture];\n    self.audioPower.progress=0.0;\n}\n\n#pragma mark - 录音机代理方法\n/**\n *  录音完成，录音完成后播放录音\n *\n *  @param recorder 录音机对象\n *  @param flag     是否成功\n */\n-(void)audioRecorderDidFinishRecording:(AVAudioRecorder *)recorder successfully:(BOOL)flag{\n    if (![self.audioPlayer isPlaying]) {\n        [self.audioPlayer play];\n    }\n    NSLog(@\"录音完成!\");\n}\n\n@end\n运行效果：\nAVAudioRecorder\n音频队列服务\n大家应该已经注意到了，无论是前面的录音还是音频播放均不支持网络流媒体播放，当然对于录音来说这种需求可能不大，但是对于音频播放来说有时候就很有必要了。AVAudioPlayer只能播放本地文件，并且是一次性加载所以音频数据，初始化AVAudioPlayer时指定的URL也只能是File URL而不能是HTTP URL。当然，将音频文件下载到本地然后再调用AVAudioPlayer来播放也是一种播放网络音频的办法，但是这种方式最大的弊端就是必须等到整个音频播放完成才能播放，而不能使用流式播放，这往往在实际开发中是不切实际的。那么在iOS中如何播放网络流媒体呢？就是使用AudioToolbox框架中的音频队列服务Audio Queue Services。\n使用音频队列服务完全可以做到音频播放和录制，首先看一下录音音频服务队列：\nrecording_architecture_2x\n一个音频服务队列Audio Queue有三部分组成：\n三个缓冲器Buffers:每个缓冲器都是一个存储音频数据的临时仓库。\n一个缓冲队列Buffer Queue:一个包含音频缓冲器的有序队列。\n一个回调Callback:一个自定义的队列回调函数。\n声音通过输入设备进入缓冲队列中，首先填充第一个缓冲器；当第一个缓冲器填充满之后自动填充下一个缓冲器，同时会调用回调函数；在回调函数中需要将缓冲器中的音频数据写入磁盘，同时将缓冲器放回到缓冲队列中以便重用。下面是Apple官方关于音频队列服务的流程示意图：\nrecording_callback_function_2x\n类似的，看一下音频播放缓冲队列，其组成部分和录音缓冲队列类似。\nplayback_architecture_2x\n但是在音频播放缓冲队列中，回调函数调用的时机不同于音频录制缓冲队列，流程刚好相反。将音频读取到缓冲器中，一旦一个缓冲器填充满之后就放到缓冲队列中，然后继续填充其他缓冲器；当开始播放时，则从第一个缓冲器中读取音频进行播放；一旦播放完之后就会触发回调函数，开始播放下一个缓冲器中的音频，同时填充第一个缓冲器放；填充满之后再次放回到缓冲队列。下面是详细的流程：\nplayback_callback_function_2x\n当然，要明白音频队列服务的原理并不难，问题是如何实现这个自定义的回调函数，这其中我们有大量的工作要做，控制播放状态、处理异常中断、进行音频编码等等。由于牵扯内容过多，而且不是本文目的，如果以后有时间将另开一篇文章重点介绍，目前有很多第三方优秀框架可以直接使用，例如AudioStreamer、FreeStreamer。由于前者当前只有非ARC版本，所以下面不妨使用FreeStreamer来简单演示在线音频播放的过程，当然在使用之前要做如下准备工作：\n1.拷贝FreeStreamer中的Reachability.h、Reachability.m和Common、astreamer两个文件夹中的内容到项目中。\n2.添加FreeStreamer使用的类库：CFNetwork.framework、AudioToolbox.framework、AVFoundation.framework\n、libxml2.dylib、MediaPlayer.framework。\n3.如果引用libxml2.dylib编译不通过，需要在Xcode的Targets-Build Settings-Header Build Path中添加$(SDKROOT)/usr/include/libxml2。\n4.将FreeStreamer中的FreeStreamerMobile-Prefix.pch文件添加到项目中并将Targets-Build Settings-Precompile Prefix Header设置为YES，在Targets-Build Settings-Prefix Header设置为$(SRCROOT)/项目名称/FreeStreamerMobile-Prefix.pch（因为Xcode6默认没有pch文件）\n然后就可以编写代码播放网络音频了：\n//\n//  ViewController.m\n//  AudioQueueServices\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//  使用FreeStreamer实现网络音频播放\n\n#import \"ViewController.h\"\n#import \"FSAudioStream.h\"\n\n@interface ViewController ()\n\n@property (nonatomic,strong) FSAudioStream *audioStream;\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    [self.audioStream play];\n}\n\n/**\n *  取得本地文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getFileUrl{\n    NSString *urlStr=[[NSBundle mainBundle]pathForResource:@\"刘若英 - 原来你也在这里.mp3\" ofType:nil];\n    NSURL *url=[NSURL fileURLWithPath:urlStr];\n    return url;\n}\n-(NSURL *)getNetworkUrl{\n    NSString *urlStr=@\"http://192.168.1.102/liu.mp3\";\n    NSURL *url=[NSURL URLWithString:urlStr];\n    return url;\n}\n\n/**\n *  创建FSAudioStream对象\n *\n *  @return FSAudioStream对象\n */\n-(FSAudioStream *)audioStream{\n    if (!_audioStream) {\n        NSURL *url=[self getNetworkUrl];\n        //创建FSAudioStream对象\n        _audioStream=[[FSAudioStream alloc]initWithUrl:url];\n        _audioStream.onFailure=^(FSAudioStreamError error,NSString *description){\n            NSLog(@\"播放过程中发生错误，错误信息：%@\",description);\n        };\n        _audioStream.onCompletion=^(){\n            NSLog(@\"播放完成!\");\n        };\n        [_audioStream setVolume:0.5];//设置声音\n    }\n    return _audioStream;\n}\n\n@end\n其实FreeStreamer的功能很强大，不仅仅是播放本地、网络音频那么简单，它还支持播放列表、检查包内容、RSS订阅、播放中断等很多强大的功能，甚至还包含了一个音频分析器，有兴趣的朋友可以访问官网查看详细用法\n视频\nMPMoviePlayerController\n在iOS中播放视频可以使用MediaPlayer.framework种的MPMoviePlayerController类来完成，它支持本地视频和网络视频播放。这个类实现了MPMediaPlayback协议，因此具备一般的播放器控制功能，例如播放、暂停、停止等。但是MPMediaPlayerController自身并不是一个完整的视图控制器，如果要在UI中展示视频需要将view属性添加到界面中。下面列出了MPMoviePlayerController的常用属性和方法：\n属性\t说明\n@property (nonatomic, copy) NSURL *contentURL\t播放媒体URL，这个URL可以是本地路径，也可以是网络路径\n@property (nonatomic, readonly) UIView *view\t播放器视图，如果要显示视频必须将此视图添加到控制器视图中\n@property (nonatomic, readonly) UIView *backgroundView\t播放器背景视图\n@property (nonatomic, readonly) MPMoviePlaybackState playbackState\t媒体播放状态，枚举类型：\nMPMoviePlaybackStateStopped：停止播放\nMPMoviePlaybackStatePlaying：正在播放\nMPMoviePlaybackStatePaused：暂停\nMPMoviePlaybackStateInterrupted：中断\nMPMoviePlaybackStateSeekingForward：向前定位\nMPMoviePlaybackStateSeekingBackward：向后定位\n@property (nonatomic, readonly) MPMovieLoadState loadState\t网络媒体加载状态，枚举类型：\nMPMovieLoadStateUnknown：位置类型\nMPMovieLoadStatePlayable：\nMPMovieLoadStatePlaythroughOK：这种状态如果shouldAutoPlay为YES将自动播放\nMPMovieLoadStateStalled：停滞状态\n@property (nonatomic) MPMovieControlStyle controlStyle\t控制面板风格，枚举类型：\nMPMovieControlStyleNone：无控制面板 \nMPMovieControlStyleEmbedded：嵌入视频风格 \nMPMovieControlStyleFullscreen：全屏 \nMPMovieControlStyleDefault：默认风格\n@property (nonatomic) MPMovieRepeatMode repeatMode;\t重复播放模式，枚举类型:\nMPMovieRepeatModeNone:不重复，默认值\nMPMovieRepeatModeOne:重复播放\n@property (nonatomic) BOOL shouldAutoplay\t当网络媒体缓存到一定数据时是否自动播放，默认为YES\n@property (nonatomic, getter=isFullscreen) BOOL fullscreen\t是否全屏展示，默认为NO，注意如果要通过此属性设置全屏必须在视图显示完成后设置，否则无效\n@property (nonatomic) MPMovieScalingMode scalingMode\t视频缩放填充模式，枚举类型：\nMPMovieScalingModeNone：不进行任何缩放\nMPMovieScalingModeAspectFit：固定缩放比例并且尽量全部展示视频，不会裁切视频\nMPMovieScalingModeAspectFill：固定缩放比例并填充满整个视图展示，可能会裁切视频\nMPMovieScalingModeFill：不固定缩放比例压缩填充整个视图，视频不会被裁切但是比例失衡\n@property (nonatomic, readonly) BOOL readyForDisplay\t是否有相关媒体被播放\n@property (nonatomic, readonly) MPMovieMediaTypeMask movieMediaTypes\t媒体类别，枚举类型：\nMPMovieMediaTypeMaskNone：未知类型\nMPMovieMediaTypeMaskVideo：视频\nMPMovieMediaTypeMaskAudio：音频\n@property (nonatomic) MPMovieSourceType movieSourceType\t媒体源，枚举类型：\nMPMovieSourceTypeUnknown：未知来源\nMPMovieSourceTypeFile：本地文件\nMPMovieSourceTypeStreaming：流媒体（直播或点播）\n@property (nonatomic, readonly) NSTimeInterval duration\t媒体时长，如果未知则返回0\n@property (nonatomic, readonly) NSTimeInterval playableDuration\t媒体可播放时长，主要用于表示网络媒体已下载视频时长\n@property (nonatomic, readonly) CGSize naturalSize\t视频实际尺寸，如果未知则返回CGSizeZero\n@property (nonatomic) NSTimeInterval initialPlaybackTime\t起始播放时间\n@property (nonatomic) NSTimeInterval endPlaybackTime\t终止播放时间\n@property (nonatomic) BOOL allowsAirPlay\t是否允许无线播放，默认为YES\n@property (nonatomic, readonly, getter=isAirPlayVideoActive) BOOL airPlayVideoActive\t当前媒体是否正在通过AirPlay播放\n@property(nonatomic, readonly) BOOL isPreparedToPlay\t是否准备好播放\n@property(nonatomic) NSTimeInterval currentPlaybackTime\t当前播放时间，单位：秒\n@property(nonatomic) float currentPlaybackRate\t当前播放速度，如果暂停则为0，正常速度为1.0，非0数据表示倍率\n对象方法\t说明\n- (instancetype)initWithContentURL:(NSURL *)url\t使用指定的URL初始化媒体播放控制器对象\n- (void)setFullscreen:(BOOL)fullscreen animated:(BOOL)animated\t设置视频全屏，注意如果要通过此方法设置全屏则必须在其视图显示之后设置，否则无效\n- (void)requestThumbnailImagesAtTimes:(NSArray *)playbackTimes timeOption:(MPMovieTimeOption)option\t获取在指定播放时间的视频缩略图，第一个参数是获取缩略图的时间点数组；第二个参数代表时间点精度，枚举类型：\nMPMovieTimeOptionNearestKeyFrame：时间点附近\nMPMovieTimeOptionExact：准确时间\n- (void)cancelAllThumbnailImageRequests\t取消所有缩略图获取请求\n- (void)prepareToPlay\t准备播放，加载视频数据到缓存，当调用play方法时如果没有准备好会自动调用此方法\n- (void)play\t开始播放\n- (void)pause\t暂停播放\n- (void)stop\t停止播放\n- (void)beginSeekingForward\t向前定位\n- (void)beginSeekingBackward\t向后定位\n- (void)endSeeking\t停止快进/快退\n通知\t说明\nMPMoviePlayerScalingModeDidChangeNotification\t视频缩放填充模式发生改变\nMPMoviePlayerPlaybackDidFinishNotification\t媒体播放完成或用户手动退出，具体完成原因可以通过通知userInfo中的key为MPMoviePlayerPlaybackDidFinishReasonUserInfoKey的对象获取\nMPMoviePlayerPlaybackStateDidChangeNotification\t播放状态改变，可配合playbakcState属性获取具体状态\nMPMoviePlayerLoadStateDidChangeNotification\t媒体网络加载状态改变\nMPMoviePlayerNowPlayingMovieDidChangeNotification\t当前播放的媒体内容发生改变\nMPMoviePlayerWillEnterFullscreenNotification\t将要进入全屏\nMPMoviePlayerDidEnterFullscreenNotification\t进入全屏后\nMPMoviePlayerWillExitFullscreenNotification\t将要退出全屏\nMPMoviePlayerDidExitFullscreenNotification\t退出全屏后\nMPMoviePlayerIsAirPlayVideoActiveDidChangeNotification\t当媒体开始通过AirPlay播放或者结束AirPlay播放\nMPMoviePlayerReadyForDisplayDidChangeNotification\t视频显示状态改变\nMPMovieMediaTypesAvailableNotification\t确定了媒体可用类型后\nMPMovieSourceTypeAvailableNotification\t确定了媒体来源后\nMPMovieDurationAvailableNotification\t确定了媒体播放时长后\nMPMovieNaturalSizeAvailableNotification\t确定了媒体的实际尺寸后\nMPMoviePlayerThumbnailImageRequestDidFinishNotification\t缩略图请求完成之后\nMPMediaPlaybackIsPreparedToPlayDidChangeNotification\t做好播放准备后\n注意MPMediaPlayerController的状态等信息并不是通过代理来和外界交互的，而是通过通知中心，因此从上面的列表中可以看到常用的一些通知。由于MPMoviePlayerController本身对于媒体播放做了深度的封装，使用起来就相当简单：创建MPMoviePlayerController对象，设置frame属性，将MPMoviePlayerController的view添加到控制器视图中。下面的示例中将创建一个播放控制器并添加播放状态改变及播放完成的通知：\n//\n//  ViewController.m\n//  MPMoviePlayerController\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"ViewController.h\"\n#import <MediaPlayer/MediaPlayer.h>\n\n@interface ViewController ()\n\n@property (nonatomic,strong) MPMoviePlayerController *moviePlayer;//视频播放控制器\n\n@end\n\n@implementation ViewController\n\n#pragma mark - 控制器视图方法\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    //播放\n    [self.moviePlayer play];\n    \n    //添加通知\n    [self addNotification];\n    \n}\n\n-(void)dealloc{\n    //移除所有通知监控\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n\n#pragma mark - 私有方法\n/**\n *  取得本地文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getFileUrl{\n    NSString *urlStr=[[NSBundle mainBundle] pathForResource:@\"The New Look of OS X Yosemite.mp4\" ofType:nil];\n    NSURL *url=[NSURL fileURLWithPath:urlStr];\n    return url;\n}\n\n/**\n *  取得网络文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getNetworkUrl{\n    NSString *urlStr=@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\";\n    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    NSURL *url=[NSURL URLWithString:urlStr];\n    return url;\n}\n\n/**\n *  创建媒体播放控制器\n *\n *  @return 媒体播放控制器\n */\n-(MPMoviePlayerController *)moviePlayer{\n    if (!_moviePlayer) {\n        NSURL *url=[self getNetworkUrl];\n        _moviePlayer=[[MPMoviePlayerController alloc]initWithContentURL:url];\n        _moviePlayer.view.frame=self.view.bounds;\n        _moviePlayer.view.autoresizingMask=UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;\n        [self.view addSubview:_moviePlayer.view];\n    }\n    return _moviePlayer;\n}\n\n/**\n *  添加通知监控媒体播放控制器状态\n */\n-(void)addNotification{\n    NSNotificationCenter *notificationCenter=[NSNotificationCenter defaultCenter];\n    [notificationCenter addObserver:self selector:@selector(mediaPlayerPlaybackStateChange:) name:MPMoviePlayerPlaybackStateDidChangeNotification object:self.moviePlayer];\n    [notificationCenter addObserver:self selector:@selector(mediaPlayerPlaybackFinished:) name:MPMoviePlayerPlaybackDidFinishNotification object:self.moviePlayer];\n    \n}\n\n/**\n *  播放状态改变，注意播放完成时的状态是暂停\n *\n *  @param notification 通知对象\n */\n-(void)mediaPlayerPlaybackStateChange:(NSNotification *)notification{\n    switch (self.moviePlayer.playbackState) {\n        case MPMoviePlaybackStatePlaying:\n            NSLog(@\"正在播放...\");\n            break;\n        case MPMoviePlaybackStatePaused:\n            NSLog(@\"暂停播放.\");\n            break;\n        case MPMoviePlaybackStateStopped:\n            NSLog(@\"停止播放.\");\n            break;\n        default:\n            NSLog(@\"播放状态:%li\",self.moviePlayer.playbackState);\n            break;\n    }\n}\n\n/**\n *  播放完成\n *\n *  @param notification 通知对象\n */\n-(void)mediaPlayerPlaybackFinished:(NSNotification *)notification{\n    NSLog(@\"播放完成.%li\",self.moviePlayer.playbackState);\n}\n\n\n@end\n运行效果：\nMPMoviePlayerController\n从上面的API大家也不难看出其实MPMoviePlayerController功能相当强大，日常开发中作为一般的媒体播放器也完全没有问题。MPMoviePlayerController除了一般的视频播放和控制外还有一些强大的功能，例如截取视频缩略图。请求视频缩略图时只要调用- (void)requestThumbnailImagesAtTimes:(NSArray *)playbackTimes timeOption:(MPMovieTimeOption)option方法指定获得缩略图的时间点，然后监控MPMoviePlayerThumbnailImageRequestDidFinishNotification通知，每个时间点的缩略图请求完成就会调用通知，在通知调用方法中可以通过MPMoviePlayerThumbnailImageKey获得UIImage对象处理即可。例如下面的程序演示了在程序启动后获得两个时间点的缩略图的过程，截图成功后保存到相册：\n//\n//  ViewController.m\n//  MPMoviePlayerController\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//  视频截图\n\n#import \"ViewController.h\"\n#import <MediaPlayer/MediaPlayer.h>\n\n@interface ViewController ()\n\n@property (nonatomic,strong) MPMoviePlayerController *moviePlayer;//视频播放控制器\n\n@end\n\n@implementation ViewController\n\n#pragma mark - 控制器视图方法\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    //播放\n    [self.moviePlayer play];\n    \n    //添加通知\n    [self addNotification];\n    \n    //获取缩略图\n    [self thumbnailImageRequest];\n}\n\n-(void)dealloc{\n    //移除所有通知监控\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n\n#pragma mark - 私有方法\n/**\n *  取得本地文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getFileUrl{\n    NSString *urlStr=[[NSBundle mainBundle] pathForResource:@\"The New Look of OS X Yosemite.mp4\" ofType:nil];\n    NSURL *url=[NSURL fileURLWithPath:urlStr];\n    return url;\n}\n\n/**\n *  取得网络文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getNetworkUrl{\n    NSString *urlStr=@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\";\n    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    NSURL *url=[NSURL URLWithString:urlStr];\n    return url;\n}\n\n/**\n *  创建媒体播放控制器\n *\n *  @return 媒体播放控制器\n */\n-(MPMoviePlayerController *)moviePlayer{\n    if (!_moviePlayer) {\n        NSURL *url=[self getNetworkUrl];\n        _moviePlayer=[[MPMoviePlayerController alloc]initWithContentURL:url];\n        _moviePlayer.view.frame=self.view.bounds;\n        _moviePlayer.view.autoresizingMask=UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;\n        [self.view addSubview:_moviePlayer.view];\n    }\n    return _moviePlayer;\n}\n\n/**\n *  获取视频缩略图\n */\n-(void)thumbnailImageRequest{\n    //获取13.0s、21.5s的缩略图\n    [self.moviePlayer requestThumbnailImagesAtTimes:@[@13.0,@21.5] timeOption:MPMovieTimeOptionNearestKeyFrame];\n}\n\n#pragma mark - 控制器通知\n/**\n *  添加通知监控媒体播放控制器状态\n */\n-(void)addNotification{\n    NSNotificationCenter *notificationCenter=[NSNotificationCenter defaultCenter];\n    [notificationCenter addObserver:self selector:@selector(mediaPlayerPlaybackStateChange:) name:MPMoviePlayerPlaybackStateDidChangeNotification object:self.moviePlayer];\n    [notificationCenter addObserver:self selector:@selector(mediaPlayerPlaybackFinished:) name:MPMoviePlayerPlaybackDidFinishNotification object:self.moviePlayer];\n    [notificationCenter addObserver:self selector:@selector(mediaPlayerThumbnailRequestFinished:) name:MPMoviePlayerThumbnailImageRequestDidFinishNotification object:self.moviePlayer];\n    \n}\n\n/**\n *  播放状态改变，注意播放完成时的状态是暂停\n *\n *  @param notification 通知对象\n */\n-(void)mediaPlayerPlaybackStateChange:(NSNotification *)notification{\n    switch (self.moviePlayer.playbackState) {\n        case MPMoviePlaybackStatePlaying:\n            NSLog(@\"正在播放...\");\n            break;\n        case MPMoviePlaybackStatePaused:\n            NSLog(@\"暂停播放.\");\n            break;\n        case MPMoviePlaybackStateStopped:\n            NSLog(@\"停止播放.\");\n            break;\n        default:\n            NSLog(@\"播放状态:%li\",self.moviePlayer.playbackState);\n            break;\n    }\n}\n\n/**\n *  播放完成\n *\n *  @param notification 通知对象\n */\n-(void)mediaPlayerPlaybackFinished:(NSNotification *)notification{\n    NSLog(@\"播放完成.%li\",self.moviePlayer.playbackState);\n}\n\n/**\n *  缩略图请求完成,此方法每次截图成功都会调用一次\n *\n *  @param notification 通知对象\n */\n-(void)mediaPlayerThumbnailRequestFinished:(NSNotification *)notification{\n    NSLog(@\"视频截图完成.\");\n    UIImage *image=notification.userInfo[MPMoviePlayerThumbnailImageKey];\n    //保存图片到相册(首次调用会请求用户获得访问相册权限)\n    UIImageWriteToSavedPhotosAlbum(image, nil, nil, nil);\n}\n\n@end\n截图效果：\nMPMoviePlayerController_Thumbnail1     MPMoviePlayerController_Thumbnail2\n扩展--使用AVFoundation生成缩略图\n通过前面的方法大家应该已经看到，使用MPMoviePlayerController来生成缩略图足够简单，但是如果仅仅是是为了生成缩略图而不进行视频播放的话，此刻使用MPMoviePlayerController就有点大材小用了。其实使用AVFundation框架中的AVAssetImageGenerator就可以获取视频缩略图。使用AVAssetImageGenerator获取缩略图大致分为三个步骤：\n创建AVURLAsset对象（此类主要用于获取媒体信息，包括视频、声音等）。\n根据AVURLAsset创建AVAssetImageGenerator对象。\n使用AVAssetImageGenerator的copyCGImageAtTime::方法获得指定时间点的截图。\n//\n//  ViewController.m\n//  AVAssetImageGenerator\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"ViewController.h\"\n#import <AVFoundation/AVFoundation.h>\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    //获取第13.0s的缩略图\n    [self thumbnailImageRequest:13.0];\n}\n\n#pragma mark - 私有方法\n/**\n *  取得本地文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getFileUrl{\n    NSString *urlStr=[[NSBundle mainBundle] pathForResource:@\"The New Look of OS X Yosemite.mp4\" ofType:nil];\n    NSURL *url=[NSURL fileURLWithPath:urlStr];\n    return url;\n}\n\n/**\n *  取得网络文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getNetworkUrl{\n    NSString *urlStr=@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\";\n    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    NSURL *url=[NSURL URLWithString:urlStr];\n    return url;\n}\n\n/**\n *  截取指定时间的视频缩略图\n *\n *  @param timeBySecond 时间点\n */\n-(void)thumbnailImageRequest:(CGFloat )timeBySecond{\n    //创建URL\n    NSURL *url=[self getNetworkUrl];\n    //根据url创建AVURLAsset\n    AVURLAsset *urlAsset=[AVURLAsset assetWithURL:url];\n    //根据AVURLAsset创建AVAssetImageGenerator\n    AVAssetImageGenerator *imageGenerator=[AVAssetImageGenerator assetImageGeneratorWithAsset:urlAsset];\n    /*截图\n     * requestTime:缩略图创建时间\n     * actualTime:缩略图实际生成的时间\n     */\n    NSError *error=nil;\n    CMTime time=CMTimeMakeWithSeconds(timeBySecond, 10);//CMTime是表示电影时间信息的结构体，第一个参数表示是视频第几秒，第二个参数表示每秒帧数.(如果要活的某一秒的第几帧可以使用CMTimeMake方法)\n    CMTime actualTime;\n    CGImageRef cgImage= [imageGenerator copyCGImageAtTime:time actualTime:&actualTime error:&error];\n    if(error){\n        NSLog(@\"截取视频缩略图时发生错误，错误信息：%@\",error.localizedDescription);\n        return;\n    }\n    CMTimeShow(actualTime);\n    UIImage *image=[UIImage imageWithCGImage:cgImage];//转化为UIImage\n    //保存到相册\n    UIImageWriteToSavedPhotosAlbum(image,nil, nil, nil);\n    CGImageRelease(cgImage);\n}\n\n@end\n生成的缩略图效果：\nAVAssetImageGenerator_Thumbnail\nMPMoviePlayerViewController\n其实MPMoviePlayerController如果不作为嵌入视频来播放（例如在新闻中嵌入一个视频），通常在播放时都是占满一个屏幕的，特别是在iPhone、iTouch上。因此从iOS3.2以后苹果也在思考既然MPMoviePlayerController在使用时通常都是将其视图view添加到另外一个视图控制器中作为子视图，那么何不直接创建一个控制器视图内部创建一个MPMoviePlayerController属性并且默认全屏播放，开发者在开发的时候直接使用这个视图控制器。这个内部有一个MPMoviePlayerController的视图控制器就是MPMoviePlayerViewController，它继承于UIViewController。MPMoviePlayerViewController内部多了一个moviePlayer属性和一个带有url的初始化方法，同时它内部实现了一些作为模态视图展示所特有的功能，例如默认是全屏模式展示、弹出后自动播放、作为模态窗口展示时如果点击“Done”按钮会自动退出模态窗口等。在下面的示例中就不直接将播放器放到主视图控制器，而是放到一个模态视图控制器中，简单演示MPMoviePlayerViewController的使用。\n//\n//  ViewController.m\n//  MPMoviePlayerViewController\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//  MPMoviePlayerViewController使用\n\n#import \"ViewController.h\"\n#import <MediaPlayer/MediaPlayer.h>\n\n@interface ViewController ()\n\n//播放器视图控制器\n@property (nonatomic,strong) MPMoviePlayerViewController *moviePlayerViewController;\n\n@end\n\n@implementation ViewController\n\n#pragma mark - 控制器视图方法\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n}\n\n-(void)dealloc{\n    //移除所有通知监控\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n\n#pragma mark - 私有方法\n/**\n *  取得本地文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getFileUrl{\n    NSString *urlStr=[[NSBundle mainBundle] pathForResource:@\"The New Look of OS X Yosemite.mp4\" ofType:nil];\n    NSURL *url=[NSURL fileURLWithPath:urlStr];\n    return url;\n}\n\n/**\n *  取得网络文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getNetworkUrl{\n    NSString *urlStr=@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\";\n    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    NSURL *url=[NSURL URLWithString:urlStr];\n    return url;\n}\n\n-(MPMoviePlayerViewController *)moviePlayerViewController{\n    if (!_moviePlayerViewController) {\n        NSURL *url=[self getNetworkUrl];\n        _moviePlayerViewController=[[MPMoviePlayerViewController alloc]initWithContentURL:url];\n        [self addNotification];\n    }\n    return _moviePlayerViewController;\n}\n#pragma mark - UI事件\n- (IBAction)playClick:(UIButton *)sender {\n    self.moviePlayerViewController=nil;//保证每次点击都重新创建视频播放控制器视图，避免再次点击时由于不播放的问题\n//    [self presentViewController:self.moviePlayerViewController animated:YES completion:nil];\n    //注意，在MPMoviePlayerViewController.h中对UIViewController扩展两个用于模态展示和关闭MPMoviePlayerViewController的方法，增加了一种下拉展示动画效果\n    [self presentMoviePlayerViewControllerAnimated:self.moviePlayerViewController];\n}\n\n#pragma mark - 控制器通知\n/**\n *  添加通知监控媒体播放控制器状态\n */\n-(void)addNotification{\n    NSNotificationCenter *notificationCenter=[NSNotificationCenter defaultCenter];\n    [notificationCenter addObserver:self selector:@selector(mediaPlayerPlaybackStateChange:) name:MPMoviePlayerPlaybackStateDidChangeNotification object:self.moviePlayerViewController.moviePlayer];\n    [notificationCenter addObserver:self selector:@selector(mediaPlayerPlaybackFinished:) name:MPMoviePlayerPlaybackDidFinishNotification object:self.moviePlayerViewController.moviePlayer];\n    \n}\n\n/**\n *  播放状态改变，注意播放完成时的状态是暂停\n *\n *  @param notification 通知对象\n */\n-(void)mediaPlayerPlaybackStateChange:(NSNotification *)notification{\n    switch (self.moviePlayerViewController.moviePlayer.playbackState) {\n        case MPMoviePlaybackStatePlaying:\n            NSLog(@\"正在播放...\");\n            break;\n        case MPMoviePlaybackStatePaused:\n            NSLog(@\"暂停播放.\");\n            break;\n        case MPMoviePlaybackStateStopped:\n            NSLog(@\"停止播放.\");\n            break;\n        default:\n            NSLog(@\"播放状态:%li\",self.moviePlayerViewController.moviePlayer.playbackState);\n            break;\n    }\n}\n\n/**\n *  播放完成\n *\n *  @param notification 通知对象\n */\n-(void)mediaPlayerPlaybackFinished:(NSNotification *)notification{\n    NSLog(@\"播放完成.%li\",self.moviePlayerViewController.moviePlayer.playbackState);\n}\n\n@end\n运行效果：\nMPMoviePlayerViewController\n这里需要强调一下，由于MPMoviePlayerViewController的初始化方法做了大量工作（例如设置URL、自动播放、添加点击Done完成的监控等），所以当再次点击播放弹出新的模态窗口的时如果不销毁之前的MPMoviePlayerViewController，那么新的对象就无法完成初始化，这样也就不能再次进行播放。\nAVPlayer\nMPMoviePlayerController足够强大，几乎不用写几行代码就能完成一个播放器，但是正是由于它的高度封装使得要自定义这个播放器变得很复杂，甚至是不可能完成。例如有些时候需要自定义播放器的样式，那么如果要使用MPMoviePlayerController就不合适了，如果要对视频有自由的控制则可以使用AVPlayer。AVPlayer存在于AVFoundation中，它更加接近于底层，所以灵活性也更强：\nAVFoundation_Framework\nAVPlayer本身并不能显示视频，而且它也不像MPMoviePlayerController有一个view属性。如果AVPlayer要显示必须创建一个播放器层AVPlayerLayer用于展示，播放器层继承于CALayer，有了AVPlayerLayer之添加到控制器视图的layer中即可。要使用AVPlayer首先了解一下几个常用的类：\nAVAsset：主要用于获取多媒体信息，是一个抽象类，不能直接使用。\nAVURLAsset：AVAsset的子类，可以根据一个URL路径创建一个包含媒体信息的AVURLAsset对象。\nAVPlayerItem：一个媒体资源管理对象，管理者视频的一些基本信息和状态，一个AVPlayerItem对应着一个视频资源。\n下面简单通过一个播放器来演示AVPlayer的使用，播放器的效果如下：\nAVPlayer_Thumbnail\n在这个自定义的播放器中实现了视频播放、暂停、进度展示和视频列表功能，下面将对这些功能一一介绍。\n首先说一下视频的播放、暂停功能，这也是最基本的功能，AVPlayer对应着两个方法play、pause来实现。但是关键问题是如何判断当前视频是否在播放，在前面的内容中无论是音频播放器还是视频播放器都有对应的状态来判断，但是AVPlayer却没有这样的状态属性，通常情况下可以通过判断播放器的播放速度来获得播放状态。如果rate为0说明是停止状态，1是则是正常播放状态。\n其次要展示播放进度就没有其他播放器那么简单了。在前面的播放器中通常是使用通知来获得播放器的状态，媒体加载状态等，但是无论是AVPlayer还是AVPlayerItem（AVPlayer有一个属性currentItem是AVPlayerItem类型，表示当前播放的视频对象）都无法获得这些信息。当然AVPlayerItem是有通知的，但是对于获得播放状态和加载状态有用的通知只有一个：播放完成通知AVPlayerItemDidPlayToEndTimeNotification。在播放视频时，特别是播放网络视频往往需要知道视频加载情况、缓冲情况、播放情况，这些信息可以通过KVO监控AVPlayerItem的status、loadedTimeRanges属性来获得。当AVPlayerItem的status属性为AVPlayerStatusReadyToPlay是说明正在播放，只有处于这个状态时才能获得视频时长等信息；当loadedTimeRanges的改变时（每缓冲一部分数据就会更新此属性）可以获得本次缓冲加载的视频范围（包含起始时间、本次加载时长），这样一来就可以实时获得缓冲情况。然后就是依靠AVPlayer的- (id)addPeriodicTimeObserverForInterval:(CMTime)interval queue:(dispatch_queue_t)queue usingBlock:(void (^)(CMTime time))block方法获得播放进度，这个方法会在设定的时间间隔内定时更新播放进度，通过time参数通知客户端。相信有了这些视频信息播放进度就不成问题了，事实上通过这些信息就算是平时看到的其他播放器的缓冲进度显示以及拖动播放的功能也可以顺利的实现。\n最后就是视频切换的功能，在前面介绍的所有播放器中每个播放器对象一次只能播放一个视频，如果要切换视频只能重新创建一个对象，但是AVPlayer却提供了- (void)replaceCurrentItemWithPlayerItem:(AVPlayerItem *)item方法用于在不同的视频之间切换（事实上在AVFoundation内部还有一个AVQueuePlayer专门处理播放列表切换，有兴趣的朋友可以自行研究，这里不再赘述）。\n下面附上代码：\n//\n//  ViewController.m\n//  AVPlayer\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"ViewController.h\"\n#import <AVFoundation/AVFoundation.h>\n\n@interface ViewController ()\n\n@property (nonatomic,strong) AVPlayer *player;//播放器对象\n\n@property (weak, nonatomic) IBOutlet UIView *container; //播放器容器\n@property (weak, nonatomic) IBOutlet UIButton *playOrPause; //播放/暂停按钮\n@property (weak, nonatomic) IBOutlet UIProgressView *progress;//播放进度\n\n@end\n\n@implementation ViewController\n\n#pragma mark - 控制器视图方法\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self setupUI];\n    [self.player play];\n}\n\n-(void)dealloc{\n    [self removeObserverFromPlayerItem:self.player.currentItem];\n    [self removeNotification];\n}\n\n#pragma mark - 私有方法\n-(void)setupUI{\n    //创建播放器层\n    AVPlayerLayer *playerLayer=[AVPlayerLayer playerLayerWithPlayer:self.player];\n    playerLayer.frame=self.container.frame;\n    //playerLayer.videoGravity=AVLayerVideoGravityResizeAspect;//视频填充模式\n    [self.container.layer addSublayer:playerLayer];\n}\n\n/**\n *  截取指定时间的视频缩略图\n *\n *  @param timeBySecond 时间点\n */\n\n/**\n *  初始化播放器\n *\n *  @return 播放器对象\n */\n-(AVPlayer *)player{\n    if (!_player) {\n        AVPlayerItem *playerItem=[self getPlayItem:0];\n        _player=[AVPlayer playerWithPlayerItem:playerItem];\n        [self addProgressObserver];\n        [self addObserverToPlayerItem:playerItem];\n    }\n    return _player;\n}\n\n/**\n *  根据视频索引取得AVPlayerItem对象\n *\n *  @param videoIndex 视频顺序索引\n *\n *  @return AVPlayerItem对象\n */\n-(AVPlayerItem *)getPlayItem:(int)videoIndex{\n    NSString *urlStr=[NSString stringWithFormat:@\"http://192.168.1.161/%i.mp4\",videoIndex];\n    urlStr =[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    NSURL *url=[NSURL URLWithString:urlStr];\n    AVPlayerItem *playerItem=[AVPlayerItem playerItemWithURL:url];\n    return playerItem;\n}\n#pragma mark - 通知\n/**\n *  添加播放器通知\n */\n-(void)addNotification{\n    //给AVPlayerItem添加播放完成通知\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(playbackFinished:) name:AVPlayerItemDidPlayToEndTimeNotification object:self.player.currentItem];\n}\n\n-(void)removeNotification{\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n/**\n *  播放完成通知\n *\n *  @param notification 通知对象\n */\n-(void)playbackFinished:(NSNotification *)notification{\n    NSLog(@\"视频播放完成.\");\n}\n\n#pragma mark - 监控\n/**\n *  给播放器添加进度更新\n */\n-(void)addProgressObserver{\n    AVPlayerItem *playerItem=self.player.currentItem;\n    UIProgressView *progress=self.progress;\n    //这里设置每秒执行一次\n    [self.player addPeriodicTimeObserverForInterval:CMTimeMake(1.0, 1.0) queue:dispatch_get_main_queue() usingBlock:^(CMTime time) {\n        float current=CMTimeGetSeconds(time);\n        float total=CMTimeGetSeconds([playerItem duration]);\n        NSLog(@\"当前已经播放%.2fs.\",current);\n        if (current) {\n            [progress setProgress:(current/total) animated:YES];\n        }\n    }];\n}\n\n/**\n *  给AVPlayerItem添加监控\n *\n *  @param playerItem AVPlayerItem对象\n */\n-(void)addObserverToPlayerItem:(AVPlayerItem *)playerItem{\n    //监控状态属性，注意AVPlayer也有一个status属性，通过监控它的status也可以获得播放状态\n    [playerItem addObserver:self forKeyPath:@\"status\" options:NSKeyValueObservingOptionNew context:nil];\n    //监控网络加载情况属性\n    [playerItem addObserver:self forKeyPath:@\"loadedTimeRanges\" options:NSKeyValueObservingOptionNew context:nil];\n}\n-(void)removeObserverFromPlayerItem:(AVPlayerItem *)playerItem{\n    [playerItem removeObserver:self forKeyPath:@\"status\"];\n    [playerItem removeObserver:self forKeyPath:@\"loadedTimeRanges\"];\n}\n/**\n *  通过KVO监控播放器状态\n *\n *  @param keyPath 监控属性\n *  @param object  监视器\n *  @param change  状态改变\n *  @param context 上下文\n */\n-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context{\n    AVPlayerItem *playerItem=object;\n    if ([keyPath isEqualToString:@\"status\"]) {\n        AVPlayerStatus status= [[change objectForKey:@\"new\"] intValue];\n        if(status==AVPlayerStatusReadyToPlay){\n            NSLog(@\"正在播放...，视频总长度:%.2f\",CMTimeGetSeconds(playerItem.duration));\n        }\n    }else if([keyPath isEqualToString:@\"loadedTimeRanges\"]){\n        NSArray *array=playerItem.loadedTimeRanges;\n        CMTimeRange timeRange = [array.firstObject CMTimeRangeValue];//本次缓冲时间范围\n        float startSeconds = CMTimeGetSeconds(timeRange.start);\n        float durationSeconds = CMTimeGetSeconds(timeRange.duration);\n        NSTimeInterval totalBuffer = startSeconds + durationSeconds;//缓冲总长度\n        NSLog(@\"共缓冲：%.2f\",totalBuffer);\n//\n    }\n}\n\n#pragma mark - UI事件\n/**\n *  点击播放/暂停按钮\n *\n *  @param sender 播放/暂停按钮\n */\n- (IBAction)playClick:(UIButton *)sender {\n//    AVPlayerItemDidPlayToEndTimeNotification\n    //AVPlayerItem *playerItem= self.player.currentItem;\n    if(self.player.rate==0){ //说明时暂停\n        [sender setImage:[UIImage imageNamed:@\"player_pause\"] forState:UIControlStateNormal];\n        [self.player play];\n    }else if(self.player.rate==1){//正在播放\n        [self.player pause];\n        [sender setImage:[UIImage imageNamed:@\"player_play\"] forState:UIControlStateNormal];\n    }\n}\n\n\n/**\n *  切换选集，这里使用按钮的tag代表视频名称\n *\n *  @param sender 点击按钮对象\n */\n- (IBAction)navigationButtonClick:(UIButton *)sender {\n    [self removeNotification];\n    [self removeObserverFromPlayerItem:self.player.currentItem];\n    AVPlayerItem *playerItem=[self getPlayItem:sender.tag];\n    [self addObserverToPlayerItem:playerItem];\n    //切换视频\n    [self.player replaceCurrentItemWithPlayerItem:playerItem];\n    [self addNotification];\n}\n\n@end\n运行效果：\nAVPlayer\n到目前为止无论是MPMoviePlayerController还是AVPlayer来播放视频都相当强大，但是它也存在着一些不可回避的问题，那就是支持的视频编码格式很有限：H.264、MPEG-4，扩展名（压缩格式）：.mp4、.mov、.m4v、.m2v、.3gp、.3g2等。但是无论是MPMoviePlayerController还是AVPlayer它们都支持绝大多数音频编码，所以大家如果纯粹是为了播放音乐的话也可以考虑使用这两个播放器。那么如何支持更多视频编码格式呢？目前来说主要还是依靠第三方框架，在iOS上常用的视频编码、解码框架有：VLC、ffmpeg， 具体使用方式今天就不再做详细介绍。\n```\n\n","source":"_posts/oc/iOS开发系列--音频播放、录音、视频播放、拍照、视频录制.md","raw":"---\ntitle: iOS开发系列--音频播放、录音、视频播放、拍照、视频录制\ndate: 2016-10-08 11:39:43\ncategories: objective-c\n---\n在iOS中音频播放从形式上可以分为音效播放和音乐播放。前者主要指的是一些短音频播放，通常作为点缀音频，对于这类音频不需要进行进度、循环等控制。后者指的是一些较长的音频，通常是主音频，对于这些音频的播放通常需要进行精确的控制。\n<!-- more -->\n\n```objc\n转自：http://blog.csdn.net/jianxin160/article/details/47753241\n音频\n在iOS中音频播放从形式上可以分为音效播放和音乐播放。前者主要指的是一些短音频播放，通常作为点缀音频，对于这类音频不需要进行进度、循环等控制。后者指的是一些较长的音频，通常是主音频，对于这些音频的播放通常需要进行精确的控制。在iOS中播放两类音频分别使用AudioToolbox.framework和AVFoundation.framework来完成音效和音乐播放。\n音效\nAudioToolbox.framework是一套基于C语言的框架，使用它来播放音效其本质是将短音频注册到系统声音服务（System Sound Service）。System Sound Service是一种简单、底层的声音播放服务，但是它本身也存在着一些限制：\n音频播放时间不能超过30s\n数据必须是PCM或者IMA4格式\n音频文件必须打包成.caf、.aif、.wav中的一种（注意这是官方文档的说法，实际测试发现一些.mp3也可以播放）\n使用System Sound Service 播放音效的步骤如下：\n调用AudioServicesCreateSystemSoundID(   CFURLRef  inFileURL, SystemSoundID*   outSystemSoundID)函数获得系统声音ID。\n如果需要监听播放完成操作，则使用AudioServicesAddSystemSoundCompletion(  SystemSoundID inSystemSoundID,\nCFRunLoopRef  inRunLoop, CFStringRef  inRunLoopMode, AudioServicesSystemSoundCompletionProc  inCompletionRoutine, void*  inClientData)方法注册回调函数。\n调用AudioServicesPlaySystemSound(SystemSoundID inSystemSoundID) 或者AudioServicesPlayAlertSound(SystemSoundID inSystemSoundID) 方法播放音效（后者带有震动效果）。\n下面是一个简单的示例程序：\n//\n//  KCMainViewController.m\n//  Audio\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//  音效播放\n\n#import \"KCMainViewController.h\"\n#import <AudioToolbox/AudioToolbox.h>\n\n@interface KCMainViewController ()\n\n@end\n\n@implementation KCMainViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    [self playSoundEffect:@\"videoRing.caf\"];\n}\n\n/**\n *  播放完成回调函数\n *\n *  @param soundID    系统声音ID\n *  @param clientData 回调时传递的数据\n */\nvoid soundCompleteCallback(SystemSoundID soundID,void * clientData){\n    NSLog(@\"播放完成...\");\n}\n\n/**\n *  播放音效文件\n *\n *  @param name 音频文件名称\n */\n-(void)playSoundEffect:(NSString *)name{\n    NSString *audioFile=[[NSBundle mainBundle] pathForResource:name ofType:nil];\n    NSURL *fileUrl=[NSURL fileURLWithPath:audioFile];\n    //1.获得系统声音ID\n    SystemSoundID soundID=0;\n    /**\n     * inFileUrl:音频文件url\n     * outSystemSoundID:声音id（此函数会将音效文件加入到系统音频服务中并返回一个长整形ID）\n     */\n    AudioServicesCreateSystemSoundID((__bridge CFURLRef)(fileUrl), &soundID);\n    //如果需要在播放完之后执行某些操作，可以调用如下方法注册一个播放完成回调函数\n    AudioServicesAddSystemSoundCompletion(soundID, NULL, NULL, soundCompleteCallback, NULL);\n    //2.播放音频\n    AudioServicesPlaySystemSound(soundID);//播放音效\n//    AudioServicesPlayAlertSound(soundID);//播放音效并震动\n}\n\n@end\n音乐\n如果播放较大的音频或者要对音频有精确的控制则System Sound Service可能就很难满足实际需求了，通常这种情况会选择使用AVFoundation.framework中的AVAudioPlayer来实现。AVAudioPlayer可以看成一个播放器，它支持多种音频格式，而且能够进行进度、音量、播放速度等控制。首先简单看一下AVAudioPlayer常用的属性和方法：\n属性\t说明\n@property(readonly, getter=isPlaying) BOOL playing\t是否正在播放，只读\n@property(readonly) NSUInteger numberOfChannels\t音频声道数，只读\n@property(readonly) NSTimeInterval duration\t音频时长\n@property(readonly) NSURL *url\t音频文件路径，只读\n@property(readonly) NSData *data\t音频数据，只读\n@property float pan\t立体声平衡，如果为-1.0则完全左声道，如果0.0则左右声道平衡，如果为1.0则完全为右声道\n@property float volume\t音量大小，范围0-1.0\n@property BOOL enableRate\t是否允许改变播放速率\n@property float rate\t播放速率，范围0.5-2.0，如果为1.0则正常播放，如果要修改播放速率则必须设置enableRate为YES\n@property NSTimeInterval currentTime\t当前播放时长\n@property(readonly) NSTimeInterval deviceCurrentTime\t输出设备播放音频的时间，注意如果播放中被暂停此时间也会继续累加\n@property NSInteger numberOfLoops\t循环播放次数，如果为0则不循环，如果小于0则无限循环，大于0则表示循环次数\n@property(readonly) NSDictionary *settings\t音频播放设置信息，只读\n@property(getter=isMeteringEnabled) BOOL meteringEnabled\t是否启用音频测量，默认为NO，一旦启用音频测量可以通过updateMeters方法更新测量值\n对象方法\t说明\n- (instancetype)initWithContentsOfURL:(NSURL *)url error:(NSError **)outError\t使用文件URL初始化播放器，注意这个URL不能是HTTP URL，AVAudioPlayer不支持加载网络媒体流，只能播放本地文件\n- (instancetype)initWithData:(NSData *)data error:(NSError **)outError\t使用NSData初始化播放器，注意使用此方法时必须文件格式和文件后缀一致，否则出错，所以相比此方法更推荐使用上述方法或- (instancetype)initWithData:(NSData *)data fileTypeHint:(NSString *)utiString error:(NSError **)outError方法进行初始化\n- (BOOL)prepareToPlay;\t加载音频文件到缓冲区，注意即使在播放之前音频文件没有加载到缓冲区程序也会隐式调用此方法。\n- (BOOL)play;\t播放音频文件\n- (BOOL)playAtTime:(NSTimeInterval)time\t在指定的时间开始播放音频\n- (void)pause;\t暂停播放\n- (void)stop;\t停止播放\n- (void)updateMeters\t更新音频测量值，注意如果要更新音频测量值必须设置meteringEnabled为YES，通过音频测量值可以即时获得音频分贝等信息\n- (float)peakPowerForChannel:(NSUInteger)channelNumber;\t获得指定声道的分贝峰值，注意如果要获得分贝峰值必须在此之前调用updateMeters方法\n- (float)averagePowerForChannel:(NSUInteger)channelNumber\t获得指定声道的分贝平均值，注意如果要获得分贝平均值必须在此之前调用updateMeters方法\n@property(nonatomic, copy) NSArray *channelAssignments\t获得或设置播放声道\n代理方法\t说明\n- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer *)player successfully:(BOOL)flag\t音频播放完成\n- (void)audioPlayerDecodeErrorDidOccur:(AVAudioPlayer *)player error:(NSError *)error\t音频解码发生错误\nAVAudioPlayer的使用比较简单：\n初始化AVAudioPlayer对象，此时通常指定本地文件路径。\n设置播放器属性，例如重复次数、音量大小等。\n调用play方法播放。\n下面就使用AVAudioPlayer实现一个简单播放器，在这个播放器中实现了播放、暂停、显示播放进度功能，当然例如调节音量、设置循环模式、甚至是声波图像（通过分析音频分贝值）等功能都可以实现，这里就不再一一演示。界面效果如下：\nAudioPlayerScreen\n当然由于AVAudioPlayer一次只能播放一个音频文件，所有上一曲、下一曲其实可以通过创建多个播放器对象来完成，这里暂不实现。播放进度的实现主要依靠一个定时器实时计算当前播放时长和音频总时长的比例，另外为了演示委托方法，下面的代码中也实现了播放完成委托方法，通常如果有下一曲功能的话播放完可以触发下一曲音乐播放。下面是主要代码：\n//\n//  ViewController.m\n//  KCAVAudioPlayer\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"ViewController.h\"\n#import <AVFoundation/AVFoundation.h>\n#define kMusicFile @\"刘若英 - 原来你也在这里.mp3\"\n#define kMusicSinger @\"刘若英\"\n#define kMusicTitle @\"原来你也在这里\"\n\n@interface ViewController ()<AVAudioPlayerDelegate>\n\n@property (nonatomic,strong) AVAudioPlayer *audioPlayer;//播放器\n@property (weak, nonatomic) IBOutlet UILabel *controlPanel; //控制面板\n@property (weak, nonatomic) IBOutlet UIProgressView *playProgress;//播放进度\n@property (weak, nonatomic) IBOutlet UILabel *musicSinger; //演唱者\n@property (weak, nonatomic) IBOutlet UIButton *playOrPause; //播放/暂停按钮(如果tag为0认为是暂停状态，1是播放状态)\n\n@property (weak ,nonatomic) NSTimer *timer;//进度更新定时器\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    [self setupUI];\n    \n}\n\n/**\n *  初始化UI\n */\n-(void)setupUI{\n    self.title=kMusicTitle;\n    self.musicSinger.text=kMusicSinger;\n}\n\n-(NSTimer *)timer{\n    if (!_timer) {\n        _timer=[NSTimer scheduledTimerWithTimeInterval:0.5 target:self selector:@selector(updateProgress) userInfo:nil repeats:true];\n    }\n    return _timer;\n}\n\n/**\n *  创建播放器\n *\n *  @return 音频播放器\n */\n-(AVAudioPlayer *)audioPlayer{\n    if (!_audioPlayer) {\n        NSString *urlStr=[[NSBundle mainBundle]pathForResource:kMusicFile ofType:nil];\n        NSURL *url=[NSURL fileURLWithPath:urlStr];\n        NSError *error=nil;\n        //初始化播放器，注意这里的Url参数只能时文件路径，不支持HTTP Url\n        _audioPlayer=[[AVAudioPlayer alloc]initWithContentsOfURL:url error:&error];\n        //设置播放器属性\n        _audioPlayer.numberOfLoops=0;//设置为0不循环\n        _audioPlayer.delegate=self;\n        [_audioPlayer prepareToPlay];//加载音频文件到缓存\n        if(error){\n            NSLog(@\"初始化播放器过程发生错误,错误信息:%@\",error.localizedDescription);\n            return nil;\n        }\n    }\n    return _audioPlayer;\n}\n\n/**\n *  播放音频\n */\n-(void)play{\n    if (![self.audioPlayer isPlaying]) {\n        [self.audioPlayer play];\n        self.timer.fireDate=[NSDate distantPast];//恢复定时器\n    }\n}\n\n/**\n *  暂停播放\n */\n-(void)pause{\n    if ([self.audioPlayer isPlaying]) {\n        [self.audioPlayer pause];\n        self.timer.fireDate=[NSDate distantFuture];//暂停定时器，注意不能调用invalidate方法，此方法会取消，之后无法恢复\n        \n    }\n}\n\n/**\n *  点击播放/暂停按钮\n *\n *  @param sender 播放/暂停按钮\n */\n- (IBAction)playClick:(UIButton *)sender {\n    if(sender.tag){\n        sender.tag=0;\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_play_n\"] forState:UIControlStateNormal];\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_play_h\"] forState:UIControlStateHighlighted];\n        [self pause];\n    }else{\n        sender.tag=1;\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_pause_n\"] forState:UIControlStateNormal];\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_pause_h\"] forState:UIControlStateHighlighted];\n        [self play];\n    }\n}\n\n/**\n *  更新播放进度\n */\n-(void)updateProgress{\n    float progress= self.audioPlayer.currentTime /self.audioPlayer.duration;\n    [self.playProgress setProgress:progress animated:true];\n}\n\n#pragma mark - 播放器代理方法\n-(void)audioPlayerDidFinishPlaying:(AVAudioPlayer *)player successfully:(BOOL)flag{\n    NSLog(@\"音乐播放完成...\");\n}\n\n@end\n运行效果：\nAVAudioPlayer\n音频会话\n事实上上面的播放器还存在一些问题，例如通常我们看到的播放器即使退出到后台也是可以播放的，而这个播放器如果退出到后台它会自动暂停。如果要支持后台播放需要做下面几件事情：\n1.设置后台运行模式：在plist文件中添加Required background modes，并且设置item 0=App plays audio or streams audio/video using AirPlay（其实可以直接通过Xcode在Project Targets-Capabilities-Background Modes中设置）\nBackgroundModes\n2.设置AVAudioSession的类型为AVAudioSessionCategoryPlayback并且调用setActive::方法启动会话。\n    AVAudioSession *audioSession=[AVAudioSession sharedInstance];\n    [audioSession setCategory:AVAudioSessionCategoryPlayback error:nil];\n    [audioSession setActive:YES error:nil];\n3.为了能够让应用退到后台之后支持耳机控制，建议添加远程控制事件（这一步不是后台播放必须的）\n前两步是后台播放所必须设置的，第三步主要用于接收远程事件，这部分内容之前的文章中有详细介绍，如果这一步不设置虽让也能够在后台播放，但是无法获得音频控制权（如果在使用当前应用之前使用其他播放器播放音乐的话，此时如果按耳机播放键或者控制中心的播放按钮则会播放前一个应用的音频），并且不能使用耳机进行音频控制。第一步操作相信大家都很容易理解，如果应用程序要允许运行到后台必须设置，正常情况下应用如果进入后台会被挂起，通过该设置可以上应用程序继续在后台运行。但是第二步使用的AVAudioSession有必要进行一下详细的说明。\n在iOS中每个应用都有一个音频会话，这个会话就通过AVAudioSession来表示。AVAudioSession同样存在于AVFoundation框架中，它是单例模式设计，通过sharedInstance进行访问。在使用Apple设备时大家会发现有些应用只要打开其他音频播放就会终止，而有些应用却可以和其他应用同时播放，在多种音频环境中如何去控制播放的方式就是通过音频会话来完成的。下面是音频会话的几种会话模式：\n会话类型\t说明\t是否要求输入\t是否要求输出\t是否遵从静音键\nAVAudioSessionCategoryAmbient\t混音播放，可以与其他音频应用同时播放\t否\t是\t是\nAVAudioSessionCategorySoloAmbient\t独占播放\t否\t是\t是\nAVAudioSessionCategoryPlayback\t后台播放，也是独占的\t否\t是\t否\nAVAudioSessionCategoryRecord\t录音模式，用于录音时使用\t是\t否\t否\nAVAudioSessionCategoryPlayAndRecord\t播放和录音，此时可以录音也可以播放\t是\t是\t否\nAVAudioSessionCategoryAudioProcessing\t硬件解码音频，此时不能播放和录制\t否\t否\t否\nAVAudioSessionCategoryMultiRoute\t多种输入输出，例如可以耳机、USB设备同时播放\t是\t是\t否\n注意：是否遵循静音键表示在播放过程中如果用户通过硬件设置为静音是否能关闭声音。\n根据前面对音频会话的理解，相信大家开发出能够在后台播放的音频播放器并不难，但是注意一下，在前面的代码中也提到设置完音频会话类型之后需要调用setActive::方法将会话激活才能起作用。类似的，如果一个应用已经在播放音频，打开我们的应用之后设置了在后台播放的会话类型，此时其他应用的音频会停止而播放我们的音频，如果希望我们的程序音频播放完之后（关闭或退出到后台之后）能够继续播放其他应用的音频的话则可以调用setActive::方法关闭会话。代码如下：\n//\n//  ViewController.m\n//  KCAVAudioPlayer\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//  AVAudioSession 音频会话\n\n#import \"ViewController.h\"\n#import <AVFoundation/AVFoundation.h>\n#define kMusicFile @\"刘若英 - 原来你也在这里.mp3\"\n#define kMusicSinger @\"刘若英\"\n#define kMusicTitle @\"原来你也在这里\"\n\n@interface ViewController ()<AVAudioPlayerDelegate>\n\n@property (nonatomic,strong) AVAudioPlayer *audioPlayer;//播放器\n@property (weak, nonatomic) IBOutlet UILabel *controlPanel; //控制面板\n@property (weak, nonatomic) IBOutlet UIProgressView *playProgress;//播放进度\n@property (weak, nonatomic) IBOutlet UILabel *musicSinger; //演唱者\n@property (weak, nonatomic) IBOutlet UIButton *playOrPause; //播放/暂停按钮(如果tag为0认为是暂停状态，1是播放状态)\n\n@property (weak ,nonatomic) NSTimer *timer;//进度更新定时器\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    [self setupUI];\n    \n}\n\n/**\n *  显示当面视图控制器时注册远程事件\n *\n *  @param animated 是否以动画的形式显示\n */\n-(void)viewWillAppear:(BOOL)animated{\n    [super viewWillAppear:animated];\n    //开启远程控制\n    [[UIApplication sharedApplication] beginReceivingRemoteControlEvents];\n    //作为第一响应者\n    //[self becomeFirstResponder];\n}\n/**\n *  当前控制器视图不显示时取消远程控制\n *\n *  @param animated 是否以动画的形式消失\n */\n-(void)viewWillDisappear:(BOOL)animated{\n    [super viewWillDisappear:animated];\n    [[UIApplication sharedApplication] endReceivingRemoteControlEvents];\n    //[self resignFirstResponder];\n}\n\n/**\n *  初始化UI\n */\n-(void)setupUI{\n    self.title=kMusicTitle;\n    self.musicSinger.text=kMusicSinger;\n}\n\n-(NSTimer *)timer{\n    if (!_timer) {\n        _timer=[NSTimer scheduledTimerWithTimeInterval:0.5 target:self selector:@selector(updateProgress) userInfo:nil repeats:true];\n    }\n    return _timer;\n}\n\n/**\n *  创建播放器\n *\n *  @return 音频播放器\n */\n-(AVAudioPlayer *)audioPlayer{\n    if (!_audioPlayer) {\n        NSString *urlStr=[[NSBundle mainBundle]pathForResource:kMusicFile ofType:nil];\n        NSURL *url=[NSURL fileURLWithPath:urlStr];\n        NSError *error=nil;\n        //初始化播放器，注意这里的Url参数只能时文件路径，不支持HTTP Url\n        _audioPlayer=[[AVAudioPlayer alloc]initWithContentsOfURL:url error:&error];\n        //设置播放器属性\n        _audioPlayer.numberOfLoops=0;//设置为0不循环\n        _audioPlayer.delegate=self;\n        [_audioPlayer prepareToPlay];//加载音频文件到缓存\n        if(error){\n            NSLog(@\"初始化播放器过程发生错误,错误信息:%@\",error.localizedDescription);\n            return nil;\n        }\n        //设置后台播放模式\n        AVAudioSession *audioSession=[AVAudioSession sharedInstance];\n        [audioSession setCategory:AVAudioSessionCategoryPlayback error:nil];\n//        [audioSession setCategory:AVAudioSessionCategoryPlayback withOptions:AVAudioSessionCategoryOptionAllowBluetooth error:nil];\n        [audioSession setActive:YES error:nil];\n        //添加通知，拔出耳机后暂停播放\n        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(routeChange:) name:AVAudioSessionRouteChangeNotification object:nil];\n    }\n    return _audioPlayer;\n}\n\n/**\n *  播放音频\n */\n-(void)play{\n    if (![self.audioPlayer isPlaying]) {\n        [self.audioPlayer play];\n        self.timer.fireDate=[NSDate distantPast];//恢复定时器\n    }\n}\n\n/**\n *  暂停播放\n */\n-(void)pause{\n    if ([self.audioPlayer isPlaying]) {\n        [self.audioPlayer pause];\n        self.timer.fireDate=[NSDate distantFuture];//暂停定时器，注意不能调用invalidate方法，此方法会取消，之后无法恢复\n        \n    }\n}\n\n/**\n *  点击播放/暂停按钮\n *\n *  @param sender 播放/暂停按钮\n */\n- (IBAction)playClick:(UIButton *)sender {\n    if(sender.tag){\n        sender.tag=0;\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_play_n\"] forState:UIControlStateNormal];\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_play_h\"] forState:UIControlStateHighlighted];\n        [self pause];\n    }else{\n        sender.tag=1;\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_pause_n\"] forState:UIControlStateNormal];\n        [sender setImage:[UIImage imageNamed:@\"playing_btn_pause_h\"] forState:UIControlStateHighlighted];\n        [self play];\n    }\n}\n\n/**\n *  更新播放进度\n */\n-(void)updateProgress{\n    float progress= self.audioPlayer.currentTime /self.audioPlayer.duration;\n    [self.playProgress setProgress:progress animated:true];\n}\n\n/**\n *  一旦输出改变则执行此方法\n *\n *  @param notification 输出改变通知对象\n */\n-(void)routeChange:(NSNotification *)notification{\n    NSDictionary *dic=notification.userInfo;\n    int changeReason= [dic[AVAudioSessionRouteChangeReasonKey] intValue];\n    //等于AVAudioSessionRouteChangeReasonOldDeviceUnavailable表示旧输出不可用\n    if (changeReason==AVAudioSessionRouteChangeReasonOldDeviceUnavailable) {\n        AVAudioSessionRouteDescription *routeDescription=dic[AVAudioSessionRouteChangePreviousRouteKey];\n        AVAudioSessionPortDescription *portDescription= [routeDescription.outputs firstObject];\n        //原设备为耳机则暂停\n        if ([portDescription.portType isEqualToString:@\"Headphones\"]) {\n            [self pause];\n        }\n    }\n    \n//    [dic enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {\n//        NSLog(@\"%@:%@\",key,obj);\n//    }];\n}\n\n-(void)dealloc{\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:AVAudioSessionRouteChangeNotification object:nil];\n}\n\n#pragma mark - 播放器代理方法\n-(void)audioPlayerDidFinishPlaying:(AVAudioPlayer *)player successfully:(BOOL)flag{\n    NSLog(@\"音乐播放完成...\");\n    //根据实际情况播放完成可以将会话关闭，其他音频应用继续播放\n    [[AVAudioSession sharedInstance]setActive:NO error:nil];\n}\n\n@end\n在上面的代码中还实现了拔出耳机暂停音乐播放的功能，这也是一个比较常见的功能。在iOS7及以后的版本中可以通过通知获得输出改变的通知，然后拿到通知对象后根据userInfo获得是何种改变类型，进而根据情况对音乐进行暂停操作。\n扩展--播放音乐库中的音乐\n众所周知音乐是iOS的重要组成播放，无论是iPod、iTouch、iPhone还是iPad都可以在iTunes购买音乐或添加本地音乐到音乐库中同步到你的iOS设备。在MediaPlayer.frameowork中有一个MPMusicPlayerController用于播放音乐库中的音乐。\n下面先来看一下MPMusicPlayerController的常用属性和方法：\n属性\t说明\n@property (nonatomic, readonly) MPMusicPlaybackState playbackState\t播放器状态，枚举类型：\nMPMusicPlaybackStateStopped：停止播放 MPMusicPlaybackStatePlaying：正在播放\nMPMusicPlaybackStatePaused：暂停播放\nMPMusicPlaybackStateInterrupted：播放中断\nMPMusicPlaybackStateSeekingForward：向前查找\nMPMusicPlaybackStateSeekingBackward：向后查找\n@property (nonatomic) MPMusicRepeatMode repeatMode\t重复模式，枚举类型：\nMPMusicRepeatModeDefault：默认模式，使用用户的首选项（系统音乐程序设置）\nMPMusicRepeatModeNone：不重复\nMPMusicRepeatModeOne：单曲循环\nMPMusicRepeatModeAll：在当前列表内循环\n@property (nonatomic) MPMusicShuffleMode shuffleMode\t随机播放模式，枚举类型：\nMPMusicShuffleModeDefault：默认模式，使用用户首选项（系统音乐程序设置）\nMPMusicShuffleModeOff：不随机播放\nMPMusicShuffleModeSongs：按歌曲随机播放\nMPMusicShuffleModeAlbums：按专辑随机播放\n@property (nonatomic, copy) MPMediaItem *nowPlayingItem\t正在播放的音乐项\n@property (nonatomic, readonly) NSUInteger indexOfNowPlayingItem\t当前正在播放的音乐在播放队列中的索引\n@property(nonatomic, readonly) BOOL isPreparedToPlay\t是否准好播放准备\n@property(nonatomic) NSTimeInterval currentPlaybackTime\t当前已播放时间，单位：秒\n@property(nonatomic) float currentPlaybackRate\t当前播放速度，是一个播放速度倍率，0表示暂停播放，1代表正常速度\n类方法\t说明\n+ (MPMusicPlayerController *)applicationMusicPlayer;\t获取应用播放器，注意此类播放器无法在后台播放\n+ (MPMusicPlayerController *)systemMusicPlayer\t获取系统播放器，支持后台播放\n对象方法\t说明\n- (void)setQueueWithQuery:(MPMediaQuery *)query\t使用媒体队列设置播放源媒体队列\n- (void)setQueueWithItemCollection:(MPMediaItemCollection *)itemCollection\t使用媒体项集合设置播放源媒体队列\n- (void)skipToNextItem\t下一曲\n- (void)skipToBeginning\t从起始位置播放\n- (void)skipToPreviousItem\t上一曲\n- (void)beginGeneratingPlaybackNotifications\t开启播放通知，注意不同于其他播放器，MPMusicPlayerController要想获得通知必须首先开启，默认情况无法获得通知\n- (void)endGeneratingPlaybackNotifications\t关闭播放通知\n- (void)prepareToPlay\t做好播放准备（加载音频到缓冲区），在使用play方法播放时如果没有做好准备回自动调用该方法\n- (void)play\t开始播放\n- (void)pause\t暂停播放\n- (void)stop\t停止播放\n- (void)beginSeekingForward\t开始向前查找（快进）\n- (void)beginSeekingBackward\t开始向后查找（快退）\n- (void)endSeeking\t结束查找\n通知\t说明\n（注意：要想获得MPMusicPlayerController通知必须首先调用beginGeneratingPlaybackNotifications开启通知）\nMPMusicPlayerControllerPlaybackStateDidChangeNotification\t播放状态改变\nMPMusicPlayerControllerNowPlayingItemDidChangeNotification\t当前播放音频改变\nMPMusicPlayerControllerVolumeDidChangeNotification\t声音大小改变\nMPMediaPlaybackIsPreparedToPlayDidChangeNotification\t准备好播放\nMPMusicPlayerController有两种播放器：applicationMusicPlayer和systemMusicPlayer，前者在应用退出后音乐播放会自动停止，后者在应用停止后不会退出播放状态。\nMPMusicPlayerController加载音乐不同于前面的AVAudioPlayer是通过一个文件路径来加载，而是需要一个播放队列。在MPMusicPlayerController中提供了两个方法来加载播放队列：- (void)setQueueWithQuery:(MPMediaQuery *)query和- (void)setQueueWithItemCollection:(MPMediaItemCollection *)itemCollection，正是由于它的播放音频来源是一个队列，因此MPMusicPlayerController支持上一曲、下一曲等操作。\n那么接下来的问题就是如何获取MPMediaQueue或者MPMediaItemCollection？MPMediaQueue对象有一系列的类方法来获得媒体队列：\n+ (MPMediaQuery *)albumsQuery;\n+ (MPMediaQuery *)artistsQuery;\n+ (MPMediaQuery *)songsQuery;\n+ (MPMediaQuery *)playlistsQuery;\n+ (MPMediaQuery *)podcastsQuery;\n+ (MPMediaQuery *)audiobooksQuery;\n+ (MPMediaQuery *)compilationsQuery;\n+ (MPMediaQuery *)composersQuery;\n+ (MPMediaQuery *)genresQuery;\n有了这些方法，就可以很容易获到歌曲、播放列表、专辑媒体等媒体队列了，这样就可以通过：- (void)setQueueWithQuery:(MPMediaQuery *)query方法设置音乐来源了。又或者得到MPMediaQueue之后创建MPMediaItemCollection，使用- (void)setQueueWithItemCollection:(MPMediaItemCollection *)itemCollection设置音乐来源。\n有时候可能希望用户自己来选择要播放的音乐，这时可以使用MPMediaPickerController，它是一个视图控制器，类似于UIImagePickerController，选择完播放来源后可以在其代理方法中获得MPMediaItemCollection对象。\n无论是通过哪种方式获得MPMusicPlayerController的媒体源，可能都希望将每个媒体的信息显示出来，这时候可以通过MPMediaItem对象获得。一个MPMediaItem代表一个媒体文件，通过它可以访问媒体标题、专辑名称、专辑封面、音乐时长等等。无论是MPMediaQueue还是MPMediaItemCollection都有一个items属性，它是MPMediaItem数组，通过这个属性可以获得MPMediaItem对象。\n下面就简单看一下MPMusicPlayerController的使用，在下面的例子中简单演示了音乐的选择、播放、暂停、通知、下一曲、上一曲功能，相信有了上面的概念，代码读起来并不复杂（示例中是直接通过MPMeidaPicker进行音乐选择的，但是仍然提供了两个方法getLocalMediaQuery和getLocalMediaItemCollection来演示如何直接通过MPMediaQueue获得媒体队列或媒体集合）：\n//\n//  ViewController.m\n//  MPMusicPlayerController\n//\n//  Created by Kenshin Cui 14/03/30\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"ViewController.h\"\n#import <MediaPlayer/MediaPlayer.h>\n\n@interface ViewController ()<MPMediaPickerControllerDelegate>\n\n@property (nonatomic,strong) MPMediaPickerController *mediaPicker;//媒体选择控制器\n@property (nonatomic,strong) MPMusicPlayerController *musicPlayer; //音乐播放器\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n}\n\n-(void)dealloc{\n    [self.musicPlayer endGeneratingPlaybackNotifications];\n}\n\n/**\n *  获得音乐播放器\n *\n *  @return 音乐播放器\n */\n-(MPMusicPlayerController *)musicPlayer{\n    if (!_musicPlayer) {\n        _musicPlayer=[MPMusicPlayerController systemMusicPlayer];\n        [_musicPlayer beginGeneratingPlaybackNotifications];//开启通知，否则监控不到MPMusicPlayerController的通知\n        [self addNotification];//添加通知\n        //如果不使用MPMediaPickerController可以使用如下方法获得音乐库媒体队列\n        //[_musicPlayer setQueueWithItemCollection:[self getLocalMediaItemCollection]];\n    }\n    return _musicPlayer;\n}\n\n/**\n *  创建媒体选择器\n *\n *  @return 媒体选择器\n */\n-(MPMediaPickerController *)mediaPicker{\n    if (!_mediaPicker) {\n        //初始化媒体选择器，这里设置媒体类型为音乐，其实这里也可以选择视频、广播等\n//        _mediaPicker=[[MPMediaPickerController alloc]initWithMediaTypes:MPMediaTypeMusic];\n        _mediaPicker=[[MPMediaPickerController alloc]initWithMediaTypes:MPMediaTypeAny];\n        _mediaPicker.allowsPickingMultipleItems=YES;//允许多选\n//        _mediaPicker.showsCloudItems=YES;//显示icloud选项\n        _mediaPicker.prompt=@\"请选择要播放的音乐\";\n        _mediaPicker.delegate=self;//设置选择器代理\n    }\n    return _mediaPicker;\n}\n\n/**\n *  取得媒体队列\n *\n *  @return 媒体队列\n */\n-(MPMediaQuery *)getLocalMediaQuery{\n    MPMediaQuery *mediaQueue=[MPMediaQuery songsQuery];\n    for (MPMediaItem *item in mediaQueue.items) {\n        NSLog(@\"标题：%@,%@\",item.title,item.albumTitle);\n    }\n    return mediaQueue;\n}\n\n/**\n *  取得媒体集合\n *\n *  @return 媒体集合\n */\n-(MPMediaItemCollection *)getLocalMediaItemCollection{\n    MPMediaQuery *mediaQueue=[MPMediaQuery songsQuery];\n    NSMutableArray *array=[NSMutableArray array];\n    for (MPMediaItem *item in mediaQueue.items) {\n        [array addObject:item];\n        NSLog(@\"标题：%@,%@\",item.title,item.albumTitle);\n    }\n    MPMediaItemCollection *mediaItemCollection=[[MPMediaItemCollection alloc]initWithItems:[array copy]];\n    return mediaItemCollection;\n}\n\n#pragma mark - MPMediaPickerController代理方法\n//选择完成\n-(void)mediaPicker:(MPMediaPickerController *)mediaPicker didPickMediaItems:(MPMediaItemCollection *)mediaItemCollection{\n    MPMediaItem *mediaItem=[mediaItemCollection.items firstObject];//第一个播放音乐\n    //注意很多音乐信息如标题、专辑、表演者、封面、时长等信息都可以通过MPMediaItem的valueForKey:方法得到,但是从iOS7开始都有对应的属性可以直接访问\n//    NSString *title= [mediaItem valueForKey:MPMediaItemPropertyAlbumTitle];\n//    NSString *artist= [mediaItem valueForKey:MPMediaItemPropertyAlbumArtist];\n//    MPMediaItemArtwork *artwork= [mediaItem valueForKey:MPMediaItemPropertyArtwork];\n    //UIImage *image=[artwork imageWithSize:CGSizeMake(100, 100)];//专辑图片\n    NSLog(@\"标题：%@,表演者：%@,专辑：%@\",mediaItem.title ,mediaItem.artist,mediaItem.albumTitle);\n    [self.musicPlayer setQueueWithItemCollection:mediaItemCollection];\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n//取消选择\n-(void)mediaPickerDidCancel:(MPMediaPickerController *)mediaPicker{\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\n#pragma mark - 通知\n/**\n *  添加通知\n */\n-(void)addNotification{\n    NSNotificationCenter *notificationCenter=[NSNotificationCenter defaultCenter];\n    [notificationCenter addObserver:self selector:@selector(playbackStateChange:) name:MPMusicPlayerControllerPlaybackStateDidChangeNotification object:self.musicPlayer];\n}\n\n/**\n *  播放状态改变通知\n *\n *  @param notification 通知对象\n */\n-(void)playbackStateChange:(NSNotification *)notification{\n    switch (self.musicPlayer.playbackState) {\n        case MPMusicPlaybackStatePlaying:\n            NSLog(@\"正在播放...\");\n            break;\n        case MPMusicPlaybackStatePaused:\n            NSLog(@\"播放暂停.\");\n            break;\n        case MPMusicPlaybackStateStopped:\n            NSLog(@\"播放停止.\");\n            break;\n        default:\n            break;\n    }\n}\n\n#pragma mark - UI事件\n- (IBAction)selectClick:(UIButton *)sender {\n    [self presentViewController:self.mediaPicker animated:YES completion:nil];\n}\n\n- (IBAction)playClick:(UIButton *)sender {\n    [self.musicPlayer play];\n}\n\n- (IBAction)puaseClick:(UIButton *)sender {\n    [self.musicPlayer pause];\n}\n\n- (IBAction)stopClick:(UIButton *)sender {\n    [self.musicPlayer stop];\n}\n\n- (IBAction)nextClick:(UIButton *)sender {\n    [self.musicPlayer skipToNextItem];\n}\n\n- (IBAction)prevClick:(UIButton *)sender {\n    [self.musicPlayer skipToPreviousItem];\n}\n\n@end\n录音\n除了上面说的，在AVFoundation框架中还要一个AVAudioRecorder类专门处理录音操作，它同样支持多种音频格式。与AVAudioPlayer类似，你完全可以将它看成是一个录音机控制类，下面是常用的属性和方法：\n属性\t说明\n@property(readonly, getter=isRecording) BOOL recording;\t是否正在录音，只读\n@property(readonly) NSURL *url\t录音文件地址，只读\n@property(readonly) NSDictionary *settings\t录音文件设置，只读\n@property(readonly) NSTimeInterval currentTime\t录音时长，只读，注意仅仅在录音状态可用\n@property(readonly) NSTimeInterval deviceCurrentTime\t输入设置的时间长度，只读，注意此属性一直可访问\n@property(getter=isMeteringEnabled) BOOL meteringEnabled;\t是否启用录音测量，如果启用录音测量可以获得录音分贝等数据信息\n@property(nonatomic, copy) NSArray *channelAssignments\t当前录音的通道\n对象方法\t说明\n- (instancetype)initWithURL:(NSURL *)url settings:(NSDictionary *)settings error:(NSError **)outError\t录音机对象初始化方法，注意其中的url必须是本地文件url，settings是录音格式、编码等设置\n- (BOOL)prepareToRecord\t准备录音，主要用于创建缓冲区，如果不手动调用，在调用record录音时也会自动调用\n- (BOOL)record\t开始录音\n- (BOOL)recordAtTime:(NSTimeInterval)time\t在指定的时间开始录音，一般用于录音暂停再恢复录音\n- (BOOL)recordForDuration:(NSTimeInterval) duration\t按指定的时长开始录音\n- (BOOL)recordAtTime:(NSTimeInterval)time forDuration:(NSTimeInterval) duration\t在指定的时间开始录音，并指定录音时长\n- (void)pause;\t暂停录音\n- (void)stop;\t停止录音\n- (BOOL)deleteRecording;\t删除录音，注意要删除录音此时录音机必须处于停止状态\n- (void)updateMeters;\t更新测量数据，注意只有meteringEnabled为YES此方法才可用\n- (float)peakPowerForChannel:(NSUInteger)channelNumber;\t指定通道的测量峰值，注意只有调用完updateMeters才有值\n- (float)averagePowerForChannel:(NSUInteger)channelNumber\t指定通道的测量平均值，注意只有调用完updateMeters才有值\n代理方法\t说明\n- (void)audioRecorderDidFinishRecording:(AVAudioRecorder *)recorder successfully:(BOOL)flag\t完成录音\n- (void)audioRecorderEncodeErrorDidOccur:(AVAudioRecorder *)recorder error:(NSError *)error\t录音编码发生错误\nAVAudioRecorder很多属性和方法跟AVAudioPlayer都是类似的,但是它的创建有所不同，在创建录音机时除了指定路径外还必须指定录音设置信息，因为录音机必须知道录音文件的格式、采样率、通道数、每个采样点的位数等信息，但是也并不是所有的信息都必须设置，通常只需要几个常用设置。关于录音设置详见帮助文档中的“AV Foundation Audio Settings Constants”。\n下面就使用AVAudioRecorder创建一个录音机，实现了录音、暂停、停止、播放等功能，实现效果大致如下：\nAVAudioRecorderSnapshot\n在这个示例中将实行一个完整的录音控制，包括录音、暂停、恢复、停止，同时还会实时展示用户录音的声音波动，当用户点击完停止按钮还会自动播放录音文件。程序的构建主要分为以下几步：\n设置音频会话类型为AVAudioSessionCategoryPlayAndRecord，因为程序中牵扯到录音和播放操作。\n创建录音机AVAudioRecorder，指定录音保存的路径并且设置录音属性，注意对于一般的录音文件要求的采样率、位数并不高，需要适当设置以保证录音文件的大小和效果。\n设置录音机代理以便在录音完成后播放录音，打开录音测量保证能够实时获得录音时的声音强度。（注意声音强度范围-160到0,0代表最大输入）\n创建音频播放器AVAudioPlayer，用于在录音完成之后播放录音。\n创建一个定时器以便实时刷新录音测量值并更新录音强度到UIProgressView中显示。\n添加录音、暂停、恢复、停止操作，需要注意录音的恢复操作其实是有音频会话管理的，恢复时只要再次调用record方法即可，无需手动管理恢复时间等。\n下面是主要代码：\n//\n//  ViewController.m\n//  AVAudioRecorder\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"ViewController.h\"\n#import <AVFoundation/AVFoundation.h>\n#define kRecordAudioFile @\"myRecord.caf\"\n\n@interface ViewController ()<AVAudioRecorderDelegate>\n\n@property (nonatomic,strong) AVAudioRecorder *audioRecorder;//音频录音机\n@property (nonatomic,strong) AVAudioPlayer *audioPlayer;//音频播放器，用于播放录音文件\n@property (nonatomic,strong) NSTimer *timer;//录音声波监控（注意这里暂时不对播放进行监控）\n\n@property (weak, nonatomic) IBOutlet UIButton *record;//开始录音\n@property (weak, nonatomic) IBOutlet UIButton *pause;//暂停录音\n@property (weak, nonatomic) IBOutlet UIButton *resume;//恢复录音\n@property (weak, nonatomic) IBOutlet UIButton *stop;//停止录音\n@property (weak, nonatomic) IBOutlet UIProgressView *audioPower;//音频波动\n\n@end\n\n@implementation ViewController\n\n#pragma mark - 控制器视图方法\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    [self setAudioSession];\n}\n\n#pragma mark - 私有方法\n/**\n *  设置音频会话\n */\n-(void)setAudioSession{\n    AVAudioSession *audioSession=[AVAudioSession sharedInstance];\n    //设置为播放和录音状态，以便可以在录制完之后播放录音\n    [audioSession setCategory:AVAudioSessionCategoryPlayAndRecord error:nil];\n    [audioSession setActive:YES error:nil];\n}\n\n/**\n *  取得录音文件保存路径\n *\n *  @return 录音文件路径\n */\n-(NSURL *)getSavePath{\n    NSString *urlStr=[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];\n    urlStr=[urlStr stringByAppendingPathComponent:kRecordAudioFile];\n    NSLog(@\"file path:%@\",urlStr);\n    NSURL *url=[NSURL fileURLWithPath:urlStr];\n    return url;\n}\n\n/**\n *  取得录音文件设置\n *\n *  @return 录音设置\n */\n-(NSDictionary *)getAudioSetting{\n    NSMutableDictionary *dicM=[NSMutableDictionary dictionary];\n    //设置录音格式\n    [dicM setObject:@(kAudioFormatLinearPCM) forKey:AVFormatIDKey];\n    //设置录音采样率，8000是电话采样率，对于一般录音已经够了\n    [dicM setObject:@(8000) forKey:AVSampleRateKey];\n    //设置通道,这里采用单声道\n    [dicM setObject:@(1) forKey:AVNumberOfChannelsKey];\n    //每个采样点位数,分为8、16、24、32\n    [dicM setObject:@(8) forKey:AVLinearPCMBitDepthKey];\n    //是否使用浮点数采样\n    [dicM setObject:@(YES) forKey:AVLinearPCMIsFloatKey];\n    //....其他设置等\n    return dicM;\n}\n\n/**\n *  获得录音机对象\n *\n *  @return 录音机对象\n */\n-(AVAudioRecorder *)audioRecorder{\n    if (!_audioRecorder) {\n        //创建录音文件保存路径\n        NSURL *url=[self getSavePath];\n        //创建录音格式设置\n        NSDictionary *setting=[self getAudioSetting];\n        //创建录音机\n        NSError *error=nil;\n        _audioRecorder=[[AVAudioRecorder alloc]initWithURL:url settings:setting error:&error];\n        _audioRecorder.delegate=self;\n        _audioRecorder.meteringEnabled=YES;//如果要监控声波则必须设置为YES\n        if (error) {\n            NSLog(@\"创建录音机对象时发生错误，错误信息：%@\",error.localizedDescription);\n            return nil;\n        }\n    }\n    return _audioRecorder;\n}\n\n/**\n *  创建播放器\n *\n *  @return 播放器\n */\n-(AVAudioPlayer *)audioPlayer{\n    if (!_audioPlayer) {\n        NSURL *url=[self getSavePath];\n        NSError *error=nil;\n        _audioPlayer=[[AVAudioPlayer alloc]initWithContentsOfURL:url error:&error];\n        _audioPlayer.numberOfLoops=0;\n        [_audioPlayer prepareToPlay];\n        if (error) {\n            NSLog(@\"创建播放器过程中发生错误，错误信息：%@\",error.localizedDescription);\n            return nil;\n        }\n    }\n    return _audioPlayer;\n}\n\n/**\n *  录音声波监控定制器\n *\n *  @return 定时器\n */\n-(NSTimer *)timer{\n    if (!_timer) {\n        _timer=[NSTimer scheduledTimerWithTimeInterval:0.1f target:self selector:@selector(audioPowerChange) userInfo:nil repeats:YES];\n    }\n    return _timer;\n}\n\n/**\n *  录音声波状态设置\n */\n-(void)audioPowerChange{\n    [self.audioRecorder updateMeters];//更新测量值\n    float power= [self.audioRecorder averagePowerForChannel:0];//取得第一个通道的音频，注意音频强度范围时-160到0\n    CGFloat progress=(1.0/160.0)*(power+160.0);\n    [self.audioPower setProgress:progress];\n}\n#pragma mark - UI事件\n/**\n *  点击录音按钮\n *\n *  @param sender 录音按钮\n */\n- (IBAction)recordClick:(UIButton *)sender {\n    if (![self.audioRecorder isRecording]) {\n        [self.audioRecorder record];//首次使用应用时如果调用record方法会询问用户是否允许使用麦克风\n        self.timer.fireDate=[NSDate distantPast];\n    }\n}\n\n/**\n *  点击暂定按钮\n *\n *  @param sender 暂停按钮\n */\n- (IBAction)pauseClick:(UIButton *)sender {\n    if ([self.audioRecorder isRecording]) {\n        [self.audioRecorder pause];\n        self.timer.fireDate=[NSDate distantFuture];\n    }\n}\n\n/**\n *  点击恢复按钮\n *  恢复录音只需要再次调用record，AVAudioSession会帮助你记录上次录音位置并追加录音\n *\n *  @param sender 恢复按钮\n */\n- (IBAction)resumeClick:(UIButton *)sender {\n    [self recordClick:sender];\n}\n\n/**\n *  点击停止按钮\n *\n *  @param sender 停止按钮\n */\n- (IBAction)stopClick:(UIButton *)sender {\n    [self.audioRecorder stop];\n    self.timer.fireDate=[NSDate distantFuture];\n    self.audioPower.progress=0.0;\n}\n\n#pragma mark - 录音机代理方法\n/**\n *  录音完成，录音完成后播放录音\n *\n *  @param recorder 录音机对象\n *  @param flag     是否成功\n */\n-(void)audioRecorderDidFinishRecording:(AVAudioRecorder *)recorder successfully:(BOOL)flag{\n    if (![self.audioPlayer isPlaying]) {\n        [self.audioPlayer play];\n    }\n    NSLog(@\"录音完成!\");\n}\n\n@end\n运行效果：\nAVAudioRecorder\n音频队列服务\n大家应该已经注意到了，无论是前面的录音还是音频播放均不支持网络流媒体播放，当然对于录音来说这种需求可能不大，但是对于音频播放来说有时候就很有必要了。AVAudioPlayer只能播放本地文件，并且是一次性加载所以音频数据，初始化AVAudioPlayer时指定的URL也只能是File URL而不能是HTTP URL。当然，将音频文件下载到本地然后再调用AVAudioPlayer来播放也是一种播放网络音频的办法，但是这种方式最大的弊端就是必须等到整个音频播放完成才能播放，而不能使用流式播放，这往往在实际开发中是不切实际的。那么在iOS中如何播放网络流媒体呢？就是使用AudioToolbox框架中的音频队列服务Audio Queue Services。\n使用音频队列服务完全可以做到音频播放和录制，首先看一下录音音频服务队列：\nrecording_architecture_2x\n一个音频服务队列Audio Queue有三部分组成：\n三个缓冲器Buffers:每个缓冲器都是一个存储音频数据的临时仓库。\n一个缓冲队列Buffer Queue:一个包含音频缓冲器的有序队列。\n一个回调Callback:一个自定义的队列回调函数。\n声音通过输入设备进入缓冲队列中，首先填充第一个缓冲器；当第一个缓冲器填充满之后自动填充下一个缓冲器，同时会调用回调函数；在回调函数中需要将缓冲器中的音频数据写入磁盘，同时将缓冲器放回到缓冲队列中以便重用。下面是Apple官方关于音频队列服务的流程示意图：\nrecording_callback_function_2x\n类似的，看一下音频播放缓冲队列，其组成部分和录音缓冲队列类似。\nplayback_architecture_2x\n但是在音频播放缓冲队列中，回调函数调用的时机不同于音频录制缓冲队列，流程刚好相反。将音频读取到缓冲器中，一旦一个缓冲器填充满之后就放到缓冲队列中，然后继续填充其他缓冲器；当开始播放时，则从第一个缓冲器中读取音频进行播放；一旦播放完之后就会触发回调函数，开始播放下一个缓冲器中的音频，同时填充第一个缓冲器放；填充满之后再次放回到缓冲队列。下面是详细的流程：\nplayback_callback_function_2x\n当然，要明白音频队列服务的原理并不难，问题是如何实现这个自定义的回调函数，这其中我们有大量的工作要做，控制播放状态、处理异常中断、进行音频编码等等。由于牵扯内容过多，而且不是本文目的，如果以后有时间将另开一篇文章重点介绍，目前有很多第三方优秀框架可以直接使用，例如AudioStreamer、FreeStreamer。由于前者当前只有非ARC版本，所以下面不妨使用FreeStreamer来简单演示在线音频播放的过程，当然在使用之前要做如下准备工作：\n1.拷贝FreeStreamer中的Reachability.h、Reachability.m和Common、astreamer两个文件夹中的内容到项目中。\n2.添加FreeStreamer使用的类库：CFNetwork.framework、AudioToolbox.framework、AVFoundation.framework\n、libxml2.dylib、MediaPlayer.framework。\n3.如果引用libxml2.dylib编译不通过，需要在Xcode的Targets-Build Settings-Header Build Path中添加$(SDKROOT)/usr/include/libxml2。\n4.将FreeStreamer中的FreeStreamerMobile-Prefix.pch文件添加到项目中并将Targets-Build Settings-Precompile Prefix Header设置为YES，在Targets-Build Settings-Prefix Header设置为$(SRCROOT)/项目名称/FreeStreamerMobile-Prefix.pch（因为Xcode6默认没有pch文件）\n然后就可以编写代码播放网络音频了：\n//\n//  ViewController.m\n//  AudioQueueServices\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//  使用FreeStreamer实现网络音频播放\n\n#import \"ViewController.h\"\n#import \"FSAudioStream.h\"\n\n@interface ViewController ()\n\n@property (nonatomic,strong) FSAudioStream *audioStream;\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    [self.audioStream play];\n}\n\n/**\n *  取得本地文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getFileUrl{\n    NSString *urlStr=[[NSBundle mainBundle]pathForResource:@\"刘若英 - 原来你也在这里.mp3\" ofType:nil];\n    NSURL *url=[NSURL fileURLWithPath:urlStr];\n    return url;\n}\n-(NSURL *)getNetworkUrl{\n    NSString *urlStr=@\"http://192.168.1.102/liu.mp3\";\n    NSURL *url=[NSURL URLWithString:urlStr];\n    return url;\n}\n\n/**\n *  创建FSAudioStream对象\n *\n *  @return FSAudioStream对象\n */\n-(FSAudioStream *)audioStream{\n    if (!_audioStream) {\n        NSURL *url=[self getNetworkUrl];\n        //创建FSAudioStream对象\n        _audioStream=[[FSAudioStream alloc]initWithUrl:url];\n        _audioStream.onFailure=^(FSAudioStreamError error,NSString *description){\n            NSLog(@\"播放过程中发生错误，错误信息：%@\",description);\n        };\n        _audioStream.onCompletion=^(){\n            NSLog(@\"播放完成!\");\n        };\n        [_audioStream setVolume:0.5];//设置声音\n    }\n    return _audioStream;\n}\n\n@end\n其实FreeStreamer的功能很强大，不仅仅是播放本地、网络音频那么简单，它还支持播放列表、检查包内容、RSS订阅、播放中断等很多强大的功能，甚至还包含了一个音频分析器，有兴趣的朋友可以访问官网查看详细用法\n视频\nMPMoviePlayerController\n在iOS中播放视频可以使用MediaPlayer.framework种的MPMoviePlayerController类来完成，它支持本地视频和网络视频播放。这个类实现了MPMediaPlayback协议，因此具备一般的播放器控制功能，例如播放、暂停、停止等。但是MPMediaPlayerController自身并不是一个完整的视图控制器，如果要在UI中展示视频需要将view属性添加到界面中。下面列出了MPMoviePlayerController的常用属性和方法：\n属性\t说明\n@property (nonatomic, copy) NSURL *contentURL\t播放媒体URL，这个URL可以是本地路径，也可以是网络路径\n@property (nonatomic, readonly) UIView *view\t播放器视图，如果要显示视频必须将此视图添加到控制器视图中\n@property (nonatomic, readonly) UIView *backgroundView\t播放器背景视图\n@property (nonatomic, readonly) MPMoviePlaybackState playbackState\t媒体播放状态，枚举类型：\nMPMoviePlaybackStateStopped：停止播放\nMPMoviePlaybackStatePlaying：正在播放\nMPMoviePlaybackStatePaused：暂停\nMPMoviePlaybackStateInterrupted：中断\nMPMoviePlaybackStateSeekingForward：向前定位\nMPMoviePlaybackStateSeekingBackward：向后定位\n@property (nonatomic, readonly) MPMovieLoadState loadState\t网络媒体加载状态，枚举类型：\nMPMovieLoadStateUnknown：位置类型\nMPMovieLoadStatePlayable：\nMPMovieLoadStatePlaythroughOK：这种状态如果shouldAutoPlay为YES将自动播放\nMPMovieLoadStateStalled：停滞状态\n@property (nonatomic) MPMovieControlStyle controlStyle\t控制面板风格，枚举类型：\nMPMovieControlStyleNone：无控制面板 \nMPMovieControlStyleEmbedded：嵌入视频风格 \nMPMovieControlStyleFullscreen：全屏 \nMPMovieControlStyleDefault：默认风格\n@property (nonatomic) MPMovieRepeatMode repeatMode;\t重复播放模式，枚举类型:\nMPMovieRepeatModeNone:不重复，默认值\nMPMovieRepeatModeOne:重复播放\n@property (nonatomic) BOOL shouldAutoplay\t当网络媒体缓存到一定数据时是否自动播放，默认为YES\n@property (nonatomic, getter=isFullscreen) BOOL fullscreen\t是否全屏展示，默认为NO，注意如果要通过此属性设置全屏必须在视图显示完成后设置，否则无效\n@property (nonatomic) MPMovieScalingMode scalingMode\t视频缩放填充模式，枚举类型：\nMPMovieScalingModeNone：不进行任何缩放\nMPMovieScalingModeAspectFit：固定缩放比例并且尽量全部展示视频，不会裁切视频\nMPMovieScalingModeAspectFill：固定缩放比例并填充满整个视图展示，可能会裁切视频\nMPMovieScalingModeFill：不固定缩放比例压缩填充整个视图，视频不会被裁切但是比例失衡\n@property (nonatomic, readonly) BOOL readyForDisplay\t是否有相关媒体被播放\n@property (nonatomic, readonly) MPMovieMediaTypeMask movieMediaTypes\t媒体类别，枚举类型：\nMPMovieMediaTypeMaskNone：未知类型\nMPMovieMediaTypeMaskVideo：视频\nMPMovieMediaTypeMaskAudio：音频\n@property (nonatomic) MPMovieSourceType movieSourceType\t媒体源，枚举类型：\nMPMovieSourceTypeUnknown：未知来源\nMPMovieSourceTypeFile：本地文件\nMPMovieSourceTypeStreaming：流媒体（直播或点播）\n@property (nonatomic, readonly) NSTimeInterval duration\t媒体时长，如果未知则返回0\n@property (nonatomic, readonly) NSTimeInterval playableDuration\t媒体可播放时长，主要用于表示网络媒体已下载视频时长\n@property (nonatomic, readonly) CGSize naturalSize\t视频实际尺寸，如果未知则返回CGSizeZero\n@property (nonatomic) NSTimeInterval initialPlaybackTime\t起始播放时间\n@property (nonatomic) NSTimeInterval endPlaybackTime\t终止播放时间\n@property (nonatomic) BOOL allowsAirPlay\t是否允许无线播放，默认为YES\n@property (nonatomic, readonly, getter=isAirPlayVideoActive) BOOL airPlayVideoActive\t当前媒体是否正在通过AirPlay播放\n@property(nonatomic, readonly) BOOL isPreparedToPlay\t是否准备好播放\n@property(nonatomic) NSTimeInterval currentPlaybackTime\t当前播放时间，单位：秒\n@property(nonatomic) float currentPlaybackRate\t当前播放速度，如果暂停则为0，正常速度为1.0，非0数据表示倍率\n对象方法\t说明\n- (instancetype)initWithContentURL:(NSURL *)url\t使用指定的URL初始化媒体播放控制器对象\n- (void)setFullscreen:(BOOL)fullscreen animated:(BOOL)animated\t设置视频全屏，注意如果要通过此方法设置全屏则必须在其视图显示之后设置，否则无效\n- (void)requestThumbnailImagesAtTimes:(NSArray *)playbackTimes timeOption:(MPMovieTimeOption)option\t获取在指定播放时间的视频缩略图，第一个参数是获取缩略图的时间点数组；第二个参数代表时间点精度，枚举类型：\nMPMovieTimeOptionNearestKeyFrame：时间点附近\nMPMovieTimeOptionExact：准确时间\n- (void)cancelAllThumbnailImageRequests\t取消所有缩略图获取请求\n- (void)prepareToPlay\t准备播放，加载视频数据到缓存，当调用play方法时如果没有准备好会自动调用此方法\n- (void)play\t开始播放\n- (void)pause\t暂停播放\n- (void)stop\t停止播放\n- (void)beginSeekingForward\t向前定位\n- (void)beginSeekingBackward\t向后定位\n- (void)endSeeking\t停止快进/快退\n通知\t说明\nMPMoviePlayerScalingModeDidChangeNotification\t视频缩放填充模式发生改变\nMPMoviePlayerPlaybackDidFinishNotification\t媒体播放完成或用户手动退出，具体完成原因可以通过通知userInfo中的key为MPMoviePlayerPlaybackDidFinishReasonUserInfoKey的对象获取\nMPMoviePlayerPlaybackStateDidChangeNotification\t播放状态改变，可配合playbakcState属性获取具体状态\nMPMoviePlayerLoadStateDidChangeNotification\t媒体网络加载状态改变\nMPMoviePlayerNowPlayingMovieDidChangeNotification\t当前播放的媒体内容发生改变\nMPMoviePlayerWillEnterFullscreenNotification\t将要进入全屏\nMPMoviePlayerDidEnterFullscreenNotification\t进入全屏后\nMPMoviePlayerWillExitFullscreenNotification\t将要退出全屏\nMPMoviePlayerDidExitFullscreenNotification\t退出全屏后\nMPMoviePlayerIsAirPlayVideoActiveDidChangeNotification\t当媒体开始通过AirPlay播放或者结束AirPlay播放\nMPMoviePlayerReadyForDisplayDidChangeNotification\t视频显示状态改变\nMPMovieMediaTypesAvailableNotification\t确定了媒体可用类型后\nMPMovieSourceTypeAvailableNotification\t确定了媒体来源后\nMPMovieDurationAvailableNotification\t确定了媒体播放时长后\nMPMovieNaturalSizeAvailableNotification\t确定了媒体的实际尺寸后\nMPMoviePlayerThumbnailImageRequestDidFinishNotification\t缩略图请求完成之后\nMPMediaPlaybackIsPreparedToPlayDidChangeNotification\t做好播放准备后\n注意MPMediaPlayerController的状态等信息并不是通过代理来和外界交互的，而是通过通知中心，因此从上面的列表中可以看到常用的一些通知。由于MPMoviePlayerController本身对于媒体播放做了深度的封装，使用起来就相当简单：创建MPMoviePlayerController对象，设置frame属性，将MPMoviePlayerController的view添加到控制器视图中。下面的示例中将创建一个播放控制器并添加播放状态改变及播放完成的通知：\n//\n//  ViewController.m\n//  MPMoviePlayerController\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"ViewController.h\"\n#import <MediaPlayer/MediaPlayer.h>\n\n@interface ViewController ()\n\n@property (nonatomic,strong) MPMoviePlayerController *moviePlayer;//视频播放控制器\n\n@end\n\n@implementation ViewController\n\n#pragma mark - 控制器视图方法\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    //播放\n    [self.moviePlayer play];\n    \n    //添加通知\n    [self addNotification];\n    \n}\n\n-(void)dealloc{\n    //移除所有通知监控\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n\n#pragma mark - 私有方法\n/**\n *  取得本地文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getFileUrl{\n    NSString *urlStr=[[NSBundle mainBundle] pathForResource:@\"The New Look of OS X Yosemite.mp4\" ofType:nil];\n    NSURL *url=[NSURL fileURLWithPath:urlStr];\n    return url;\n}\n\n/**\n *  取得网络文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getNetworkUrl{\n    NSString *urlStr=@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\";\n    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    NSURL *url=[NSURL URLWithString:urlStr];\n    return url;\n}\n\n/**\n *  创建媒体播放控制器\n *\n *  @return 媒体播放控制器\n */\n-(MPMoviePlayerController *)moviePlayer{\n    if (!_moviePlayer) {\n        NSURL *url=[self getNetworkUrl];\n        _moviePlayer=[[MPMoviePlayerController alloc]initWithContentURL:url];\n        _moviePlayer.view.frame=self.view.bounds;\n        _moviePlayer.view.autoresizingMask=UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;\n        [self.view addSubview:_moviePlayer.view];\n    }\n    return _moviePlayer;\n}\n\n/**\n *  添加通知监控媒体播放控制器状态\n */\n-(void)addNotification{\n    NSNotificationCenter *notificationCenter=[NSNotificationCenter defaultCenter];\n    [notificationCenter addObserver:self selector:@selector(mediaPlayerPlaybackStateChange:) name:MPMoviePlayerPlaybackStateDidChangeNotification object:self.moviePlayer];\n    [notificationCenter addObserver:self selector:@selector(mediaPlayerPlaybackFinished:) name:MPMoviePlayerPlaybackDidFinishNotification object:self.moviePlayer];\n    \n}\n\n/**\n *  播放状态改变，注意播放完成时的状态是暂停\n *\n *  @param notification 通知对象\n */\n-(void)mediaPlayerPlaybackStateChange:(NSNotification *)notification{\n    switch (self.moviePlayer.playbackState) {\n        case MPMoviePlaybackStatePlaying:\n            NSLog(@\"正在播放...\");\n            break;\n        case MPMoviePlaybackStatePaused:\n            NSLog(@\"暂停播放.\");\n            break;\n        case MPMoviePlaybackStateStopped:\n            NSLog(@\"停止播放.\");\n            break;\n        default:\n            NSLog(@\"播放状态:%li\",self.moviePlayer.playbackState);\n            break;\n    }\n}\n\n/**\n *  播放完成\n *\n *  @param notification 通知对象\n */\n-(void)mediaPlayerPlaybackFinished:(NSNotification *)notification{\n    NSLog(@\"播放完成.%li\",self.moviePlayer.playbackState);\n}\n\n\n@end\n运行效果：\nMPMoviePlayerController\n从上面的API大家也不难看出其实MPMoviePlayerController功能相当强大，日常开发中作为一般的媒体播放器也完全没有问题。MPMoviePlayerController除了一般的视频播放和控制外还有一些强大的功能，例如截取视频缩略图。请求视频缩略图时只要调用- (void)requestThumbnailImagesAtTimes:(NSArray *)playbackTimes timeOption:(MPMovieTimeOption)option方法指定获得缩略图的时间点，然后监控MPMoviePlayerThumbnailImageRequestDidFinishNotification通知，每个时间点的缩略图请求完成就会调用通知，在通知调用方法中可以通过MPMoviePlayerThumbnailImageKey获得UIImage对象处理即可。例如下面的程序演示了在程序启动后获得两个时间点的缩略图的过程，截图成功后保存到相册：\n//\n//  ViewController.m\n//  MPMoviePlayerController\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//  视频截图\n\n#import \"ViewController.h\"\n#import <MediaPlayer/MediaPlayer.h>\n\n@interface ViewController ()\n\n@property (nonatomic,strong) MPMoviePlayerController *moviePlayer;//视频播放控制器\n\n@end\n\n@implementation ViewController\n\n#pragma mark - 控制器视图方法\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    //播放\n    [self.moviePlayer play];\n    \n    //添加通知\n    [self addNotification];\n    \n    //获取缩略图\n    [self thumbnailImageRequest];\n}\n\n-(void)dealloc{\n    //移除所有通知监控\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n\n#pragma mark - 私有方法\n/**\n *  取得本地文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getFileUrl{\n    NSString *urlStr=[[NSBundle mainBundle] pathForResource:@\"The New Look of OS X Yosemite.mp4\" ofType:nil];\n    NSURL *url=[NSURL fileURLWithPath:urlStr];\n    return url;\n}\n\n/**\n *  取得网络文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getNetworkUrl{\n    NSString *urlStr=@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\";\n    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    NSURL *url=[NSURL URLWithString:urlStr];\n    return url;\n}\n\n/**\n *  创建媒体播放控制器\n *\n *  @return 媒体播放控制器\n */\n-(MPMoviePlayerController *)moviePlayer{\n    if (!_moviePlayer) {\n        NSURL *url=[self getNetworkUrl];\n        _moviePlayer=[[MPMoviePlayerController alloc]initWithContentURL:url];\n        _moviePlayer.view.frame=self.view.bounds;\n        _moviePlayer.view.autoresizingMask=UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;\n        [self.view addSubview:_moviePlayer.view];\n    }\n    return _moviePlayer;\n}\n\n/**\n *  获取视频缩略图\n */\n-(void)thumbnailImageRequest{\n    //获取13.0s、21.5s的缩略图\n    [self.moviePlayer requestThumbnailImagesAtTimes:@[@13.0,@21.5] timeOption:MPMovieTimeOptionNearestKeyFrame];\n}\n\n#pragma mark - 控制器通知\n/**\n *  添加通知监控媒体播放控制器状态\n */\n-(void)addNotification{\n    NSNotificationCenter *notificationCenter=[NSNotificationCenter defaultCenter];\n    [notificationCenter addObserver:self selector:@selector(mediaPlayerPlaybackStateChange:) name:MPMoviePlayerPlaybackStateDidChangeNotification object:self.moviePlayer];\n    [notificationCenter addObserver:self selector:@selector(mediaPlayerPlaybackFinished:) name:MPMoviePlayerPlaybackDidFinishNotification object:self.moviePlayer];\n    [notificationCenter addObserver:self selector:@selector(mediaPlayerThumbnailRequestFinished:) name:MPMoviePlayerThumbnailImageRequestDidFinishNotification object:self.moviePlayer];\n    \n}\n\n/**\n *  播放状态改变，注意播放完成时的状态是暂停\n *\n *  @param notification 通知对象\n */\n-(void)mediaPlayerPlaybackStateChange:(NSNotification *)notification{\n    switch (self.moviePlayer.playbackState) {\n        case MPMoviePlaybackStatePlaying:\n            NSLog(@\"正在播放...\");\n            break;\n        case MPMoviePlaybackStatePaused:\n            NSLog(@\"暂停播放.\");\n            break;\n        case MPMoviePlaybackStateStopped:\n            NSLog(@\"停止播放.\");\n            break;\n        default:\n            NSLog(@\"播放状态:%li\",self.moviePlayer.playbackState);\n            break;\n    }\n}\n\n/**\n *  播放完成\n *\n *  @param notification 通知对象\n */\n-(void)mediaPlayerPlaybackFinished:(NSNotification *)notification{\n    NSLog(@\"播放完成.%li\",self.moviePlayer.playbackState);\n}\n\n/**\n *  缩略图请求完成,此方法每次截图成功都会调用一次\n *\n *  @param notification 通知对象\n */\n-(void)mediaPlayerThumbnailRequestFinished:(NSNotification *)notification{\n    NSLog(@\"视频截图完成.\");\n    UIImage *image=notification.userInfo[MPMoviePlayerThumbnailImageKey];\n    //保存图片到相册(首次调用会请求用户获得访问相册权限)\n    UIImageWriteToSavedPhotosAlbum(image, nil, nil, nil);\n}\n\n@end\n截图效果：\nMPMoviePlayerController_Thumbnail1     MPMoviePlayerController_Thumbnail2\n扩展--使用AVFoundation生成缩略图\n通过前面的方法大家应该已经看到，使用MPMoviePlayerController来生成缩略图足够简单，但是如果仅仅是是为了生成缩略图而不进行视频播放的话，此刻使用MPMoviePlayerController就有点大材小用了。其实使用AVFundation框架中的AVAssetImageGenerator就可以获取视频缩略图。使用AVAssetImageGenerator获取缩略图大致分为三个步骤：\n创建AVURLAsset对象（此类主要用于获取媒体信息，包括视频、声音等）。\n根据AVURLAsset创建AVAssetImageGenerator对象。\n使用AVAssetImageGenerator的copyCGImageAtTime::方法获得指定时间点的截图。\n//\n//  ViewController.m\n//  AVAssetImageGenerator\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"ViewController.h\"\n#import <AVFoundation/AVFoundation.h>\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    //获取第13.0s的缩略图\n    [self thumbnailImageRequest:13.0];\n}\n\n#pragma mark - 私有方法\n/**\n *  取得本地文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getFileUrl{\n    NSString *urlStr=[[NSBundle mainBundle] pathForResource:@\"The New Look of OS X Yosemite.mp4\" ofType:nil];\n    NSURL *url=[NSURL fileURLWithPath:urlStr];\n    return url;\n}\n\n/**\n *  取得网络文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getNetworkUrl{\n    NSString *urlStr=@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\";\n    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    NSURL *url=[NSURL URLWithString:urlStr];\n    return url;\n}\n\n/**\n *  截取指定时间的视频缩略图\n *\n *  @param timeBySecond 时间点\n */\n-(void)thumbnailImageRequest:(CGFloat )timeBySecond{\n    //创建URL\n    NSURL *url=[self getNetworkUrl];\n    //根据url创建AVURLAsset\n    AVURLAsset *urlAsset=[AVURLAsset assetWithURL:url];\n    //根据AVURLAsset创建AVAssetImageGenerator\n    AVAssetImageGenerator *imageGenerator=[AVAssetImageGenerator assetImageGeneratorWithAsset:urlAsset];\n    /*截图\n     * requestTime:缩略图创建时间\n     * actualTime:缩略图实际生成的时间\n     */\n    NSError *error=nil;\n    CMTime time=CMTimeMakeWithSeconds(timeBySecond, 10);//CMTime是表示电影时间信息的结构体，第一个参数表示是视频第几秒，第二个参数表示每秒帧数.(如果要活的某一秒的第几帧可以使用CMTimeMake方法)\n    CMTime actualTime;\n    CGImageRef cgImage= [imageGenerator copyCGImageAtTime:time actualTime:&actualTime error:&error];\n    if(error){\n        NSLog(@\"截取视频缩略图时发生错误，错误信息：%@\",error.localizedDescription);\n        return;\n    }\n    CMTimeShow(actualTime);\n    UIImage *image=[UIImage imageWithCGImage:cgImage];//转化为UIImage\n    //保存到相册\n    UIImageWriteToSavedPhotosAlbum(image,nil, nil, nil);\n    CGImageRelease(cgImage);\n}\n\n@end\n生成的缩略图效果：\nAVAssetImageGenerator_Thumbnail\nMPMoviePlayerViewController\n其实MPMoviePlayerController如果不作为嵌入视频来播放（例如在新闻中嵌入一个视频），通常在播放时都是占满一个屏幕的，特别是在iPhone、iTouch上。因此从iOS3.2以后苹果也在思考既然MPMoviePlayerController在使用时通常都是将其视图view添加到另外一个视图控制器中作为子视图，那么何不直接创建一个控制器视图内部创建一个MPMoviePlayerController属性并且默认全屏播放，开发者在开发的时候直接使用这个视图控制器。这个内部有一个MPMoviePlayerController的视图控制器就是MPMoviePlayerViewController，它继承于UIViewController。MPMoviePlayerViewController内部多了一个moviePlayer属性和一个带有url的初始化方法，同时它内部实现了一些作为模态视图展示所特有的功能，例如默认是全屏模式展示、弹出后自动播放、作为模态窗口展示时如果点击“Done”按钮会自动退出模态窗口等。在下面的示例中就不直接将播放器放到主视图控制器，而是放到一个模态视图控制器中，简单演示MPMoviePlayerViewController的使用。\n//\n//  ViewController.m\n//  MPMoviePlayerViewController\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//  MPMoviePlayerViewController使用\n\n#import \"ViewController.h\"\n#import <MediaPlayer/MediaPlayer.h>\n\n@interface ViewController ()\n\n//播放器视图控制器\n@property (nonatomic,strong) MPMoviePlayerViewController *moviePlayerViewController;\n\n@end\n\n@implementation ViewController\n\n#pragma mark - 控制器视图方法\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n}\n\n-(void)dealloc{\n    //移除所有通知监控\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n\n#pragma mark - 私有方法\n/**\n *  取得本地文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getFileUrl{\n    NSString *urlStr=[[NSBundle mainBundle] pathForResource:@\"The New Look of OS X Yosemite.mp4\" ofType:nil];\n    NSURL *url=[NSURL fileURLWithPath:urlStr];\n    return url;\n}\n\n/**\n *  取得网络文件路径\n *\n *  @return 文件路径\n */\n-(NSURL *)getNetworkUrl{\n    NSString *urlStr=@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\";\n    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    NSURL *url=[NSURL URLWithString:urlStr];\n    return url;\n}\n\n-(MPMoviePlayerViewController *)moviePlayerViewController{\n    if (!_moviePlayerViewController) {\n        NSURL *url=[self getNetworkUrl];\n        _moviePlayerViewController=[[MPMoviePlayerViewController alloc]initWithContentURL:url];\n        [self addNotification];\n    }\n    return _moviePlayerViewController;\n}\n#pragma mark - UI事件\n- (IBAction)playClick:(UIButton *)sender {\n    self.moviePlayerViewController=nil;//保证每次点击都重新创建视频播放控制器视图，避免再次点击时由于不播放的问题\n//    [self presentViewController:self.moviePlayerViewController animated:YES completion:nil];\n    //注意，在MPMoviePlayerViewController.h中对UIViewController扩展两个用于模态展示和关闭MPMoviePlayerViewController的方法，增加了一种下拉展示动画效果\n    [self presentMoviePlayerViewControllerAnimated:self.moviePlayerViewController];\n}\n\n#pragma mark - 控制器通知\n/**\n *  添加通知监控媒体播放控制器状态\n */\n-(void)addNotification{\n    NSNotificationCenter *notificationCenter=[NSNotificationCenter defaultCenter];\n    [notificationCenter addObserver:self selector:@selector(mediaPlayerPlaybackStateChange:) name:MPMoviePlayerPlaybackStateDidChangeNotification object:self.moviePlayerViewController.moviePlayer];\n    [notificationCenter addObserver:self selector:@selector(mediaPlayerPlaybackFinished:) name:MPMoviePlayerPlaybackDidFinishNotification object:self.moviePlayerViewController.moviePlayer];\n    \n}\n\n/**\n *  播放状态改变，注意播放完成时的状态是暂停\n *\n *  @param notification 通知对象\n */\n-(void)mediaPlayerPlaybackStateChange:(NSNotification *)notification{\n    switch (self.moviePlayerViewController.moviePlayer.playbackState) {\n        case MPMoviePlaybackStatePlaying:\n            NSLog(@\"正在播放...\");\n            break;\n        case MPMoviePlaybackStatePaused:\n            NSLog(@\"暂停播放.\");\n            break;\n        case MPMoviePlaybackStateStopped:\n            NSLog(@\"停止播放.\");\n            break;\n        default:\n            NSLog(@\"播放状态:%li\",self.moviePlayerViewController.moviePlayer.playbackState);\n            break;\n    }\n}\n\n/**\n *  播放完成\n *\n *  @param notification 通知对象\n */\n-(void)mediaPlayerPlaybackFinished:(NSNotification *)notification{\n    NSLog(@\"播放完成.%li\",self.moviePlayerViewController.moviePlayer.playbackState);\n}\n\n@end\n运行效果：\nMPMoviePlayerViewController\n这里需要强调一下，由于MPMoviePlayerViewController的初始化方法做了大量工作（例如设置URL、自动播放、添加点击Done完成的监控等），所以当再次点击播放弹出新的模态窗口的时如果不销毁之前的MPMoviePlayerViewController，那么新的对象就无法完成初始化，这样也就不能再次进行播放。\nAVPlayer\nMPMoviePlayerController足够强大，几乎不用写几行代码就能完成一个播放器，但是正是由于它的高度封装使得要自定义这个播放器变得很复杂，甚至是不可能完成。例如有些时候需要自定义播放器的样式，那么如果要使用MPMoviePlayerController就不合适了，如果要对视频有自由的控制则可以使用AVPlayer。AVPlayer存在于AVFoundation中，它更加接近于底层，所以灵活性也更强：\nAVFoundation_Framework\nAVPlayer本身并不能显示视频，而且它也不像MPMoviePlayerController有一个view属性。如果AVPlayer要显示必须创建一个播放器层AVPlayerLayer用于展示，播放器层继承于CALayer，有了AVPlayerLayer之添加到控制器视图的layer中即可。要使用AVPlayer首先了解一下几个常用的类：\nAVAsset：主要用于获取多媒体信息，是一个抽象类，不能直接使用。\nAVURLAsset：AVAsset的子类，可以根据一个URL路径创建一个包含媒体信息的AVURLAsset对象。\nAVPlayerItem：一个媒体资源管理对象，管理者视频的一些基本信息和状态，一个AVPlayerItem对应着一个视频资源。\n下面简单通过一个播放器来演示AVPlayer的使用，播放器的效果如下：\nAVPlayer_Thumbnail\n在这个自定义的播放器中实现了视频播放、暂停、进度展示和视频列表功能，下面将对这些功能一一介绍。\n首先说一下视频的播放、暂停功能，这也是最基本的功能，AVPlayer对应着两个方法play、pause来实现。但是关键问题是如何判断当前视频是否在播放，在前面的内容中无论是音频播放器还是视频播放器都有对应的状态来判断，但是AVPlayer却没有这样的状态属性，通常情况下可以通过判断播放器的播放速度来获得播放状态。如果rate为0说明是停止状态，1是则是正常播放状态。\n其次要展示播放进度就没有其他播放器那么简单了。在前面的播放器中通常是使用通知来获得播放器的状态，媒体加载状态等，但是无论是AVPlayer还是AVPlayerItem（AVPlayer有一个属性currentItem是AVPlayerItem类型，表示当前播放的视频对象）都无法获得这些信息。当然AVPlayerItem是有通知的，但是对于获得播放状态和加载状态有用的通知只有一个：播放完成通知AVPlayerItemDidPlayToEndTimeNotification。在播放视频时，特别是播放网络视频往往需要知道视频加载情况、缓冲情况、播放情况，这些信息可以通过KVO监控AVPlayerItem的status、loadedTimeRanges属性来获得。当AVPlayerItem的status属性为AVPlayerStatusReadyToPlay是说明正在播放，只有处于这个状态时才能获得视频时长等信息；当loadedTimeRanges的改变时（每缓冲一部分数据就会更新此属性）可以获得本次缓冲加载的视频范围（包含起始时间、本次加载时长），这样一来就可以实时获得缓冲情况。然后就是依靠AVPlayer的- (id)addPeriodicTimeObserverForInterval:(CMTime)interval queue:(dispatch_queue_t)queue usingBlock:(void (^)(CMTime time))block方法获得播放进度，这个方法会在设定的时间间隔内定时更新播放进度，通过time参数通知客户端。相信有了这些视频信息播放进度就不成问题了，事实上通过这些信息就算是平时看到的其他播放器的缓冲进度显示以及拖动播放的功能也可以顺利的实现。\n最后就是视频切换的功能，在前面介绍的所有播放器中每个播放器对象一次只能播放一个视频，如果要切换视频只能重新创建一个对象，但是AVPlayer却提供了- (void)replaceCurrentItemWithPlayerItem:(AVPlayerItem *)item方法用于在不同的视频之间切换（事实上在AVFoundation内部还有一个AVQueuePlayer专门处理播放列表切换，有兴趣的朋友可以自行研究，这里不再赘述）。\n下面附上代码：\n//\n//  ViewController.m\n//  AVPlayer\n//\n//  Created by Kenshin Cui on 14/03/30.\n//  Copyright (c) 2014年 cmjstudio. All rights reserved.\n//\n\n#import \"ViewController.h\"\n#import <AVFoundation/AVFoundation.h>\n\n@interface ViewController ()\n\n@property (nonatomic,strong) AVPlayer *player;//播放器对象\n\n@property (weak, nonatomic) IBOutlet UIView *container; //播放器容器\n@property (weak, nonatomic) IBOutlet UIButton *playOrPause; //播放/暂停按钮\n@property (weak, nonatomic) IBOutlet UIProgressView *progress;//播放进度\n\n@end\n\n@implementation ViewController\n\n#pragma mark - 控制器视图方法\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self setupUI];\n    [self.player play];\n}\n\n-(void)dealloc{\n    [self removeObserverFromPlayerItem:self.player.currentItem];\n    [self removeNotification];\n}\n\n#pragma mark - 私有方法\n-(void)setupUI{\n    //创建播放器层\n    AVPlayerLayer *playerLayer=[AVPlayerLayer playerLayerWithPlayer:self.player];\n    playerLayer.frame=self.container.frame;\n    //playerLayer.videoGravity=AVLayerVideoGravityResizeAspect;//视频填充模式\n    [self.container.layer addSublayer:playerLayer];\n}\n\n/**\n *  截取指定时间的视频缩略图\n *\n *  @param timeBySecond 时间点\n */\n\n/**\n *  初始化播放器\n *\n *  @return 播放器对象\n */\n-(AVPlayer *)player{\n    if (!_player) {\n        AVPlayerItem *playerItem=[self getPlayItem:0];\n        _player=[AVPlayer playerWithPlayerItem:playerItem];\n        [self addProgressObserver];\n        [self addObserverToPlayerItem:playerItem];\n    }\n    return _player;\n}\n\n/**\n *  根据视频索引取得AVPlayerItem对象\n *\n *  @param videoIndex 视频顺序索引\n *\n *  @return AVPlayerItem对象\n */\n-(AVPlayerItem *)getPlayItem:(int)videoIndex{\n    NSString *urlStr=[NSString stringWithFormat:@\"http://192.168.1.161/%i.mp4\",videoIndex];\n    urlStr =[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n    NSURL *url=[NSURL URLWithString:urlStr];\n    AVPlayerItem *playerItem=[AVPlayerItem playerItemWithURL:url];\n    return playerItem;\n}\n#pragma mark - 通知\n/**\n *  添加播放器通知\n */\n-(void)addNotification{\n    //给AVPlayerItem添加播放完成通知\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(playbackFinished:) name:AVPlayerItemDidPlayToEndTimeNotification object:self.player.currentItem];\n}\n\n-(void)removeNotification{\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n\n/**\n *  播放完成通知\n *\n *  @param notification 通知对象\n */\n-(void)playbackFinished:(NSNotification *)notification{\n    NSLog(@\"视频播放完成.\");\n}\n\n#pragma mark - 监控\n/**\n *  给播放器添加进度更新\n */\n-(void)addProgressObserver{\n    AVPlayerItem *playerItem=self.player.currentItem;\n    UIProgressView *progress=self.progress;\n    //这里设置每秒执行一次\n    [self.player addPeriodicTimeObserverForInterval:CMTimeMake(1.0, 1.0) queue:dispatch_get_main_queue() usingBlock:^(CMTime time) {\n        float current=CMTimeGetSeconds(time);\n        float total=CMTimeGetSeconds([playerItem duration]);\n        NSLog(@\"当前已经播放%.2fs.\",current);\n        if (current) {\n            [progress setProgress:(current/total) animated:YES];\n        }\n    }];\n}\n\n/**\n *  给AVPlayerItem添加监控\n *\n *  @param playerItem AVPlayerItem对象\n */\n-(void)addObserverToPlayerItem:(AVPlayerItem *)playerItem{\n    //监控状态属性，注意AVPlayer也有一个status属性，通过监控它的status也可以获得播放状态\n    [playerItem addObserver:self forKeyPath:@\"status\" options:NSKeyValueObservingOptionNew context:nil];\n    //监控网络加载情况属性\n    [playerItem addObserver:self forKeyPath:@\"loadedTimeRanges\" options:NSKeyValueObservingOptionNew context:nil];\n}\n-(void)removeObserverFromPlayerItem:(AVPlayerItem *)playerItem{\n    [playerItem removeObserver:self forKeyPath:@\"status\"];\n    [playerItem removeObserver:self forKeyPath:@\"loadedTimeRanges\"];\n}\n/**\n *  通过KVO监控播放器状态\n *\n *  @param keyPath 监控属性\n *  @param object  监视器\n *  @param change  状态改变\n *  @param context 上下文\n */\n-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context{\n    AVPlayerItem *playerItem=object;\n    if ([keyPath isEqualToString:@\"status\"]) {\n        AVPlayerStatus status= [[change objectForKey:@\"new\"] intValue];\n        if(status==AVPlayerStatusReadyToPlay){\n            NSLog(@\"正在播放...，视频总长度:%.2f\",CMTimeGetSeconds(playerItem.duration));\n        }\n    }else if([keyPath isEqualToString:@\"loadedTimeRanges\"]){\n        NSArray *array=playerItem.loadedTimeRanges;\n        CMTimeRange timeRange = [array.firstObject CMTimeRangeValue];//本次缓冲时间范围\n        float startSeconds = CMTimeGetSeconds(timeRange.start);\n        float durationSeconds = CMTimeGetSeconds(timeRange.duration);\n        NSTimeInterval totalBuffer = startSeconds + durationSeconds;//缓冲总长度\n        NSLog(@\"共缓冲：%.2f\",totalBuffer);\n//\n    }\n}\n\n#pragma mark - UI事件\n/**\n *  点击播放/暂停按钮\n *\n *  @param sender 播放/暂停按钮\n */\n- (IBAction)playClick:(UIButton *)sender {\n//    AVPlayerItemDidPlayToEndTimeNotification\n    //AVPlayerItem *playerItem= self.player.currentItem;\n    if(self.player.rate==0){ //说明时暂停\n        [sender setImage:[UIImage imageNamed:@\"player_pause\"] forState:UIControlStateNormal];\n        [self.player play];\n    }else if(self.player.rate==1){//正在播放\n        [self.player pause];\n        [sender setImage:[UIImage imageNamed:@\"player_play\"] forState:UIControlStateNormal];\n    }\n}\n\n\n/**\n *  切换选集，这里使用按钮的tag代表视频名称\n *\n *  @param sender 点击按钮对象\n */\n- (IBAction)navigationButtonClick:(UIButton *)sender {\n    [self removeNotification];\n    [self removeObserverFromPlayerItem:self.player.currentItem];\n    AVPlayerItem *playerItem=[self getPlayItem:sender.tag];\n    [self addObserverToPlayerItem:playerItem];\n    //切换视频\n    [self.player replaceCurrentItemWithPlayerItem:playerItem];\n    [self addNotification];\n}\n\n@end\n运行效果：\nAVPlayer\n到目前为止无论是MPMoviePlayerController还是AVPlayer来播放视频都相当强大，但是它也存在着一些不可回避的问题，那就是支持的视频编码格式很有限：H.264、MPEG-4，扩展名（压缩格式）：.mp4、.mov、.m4v、.m2v、.3gp、.3g2等。但是无论是MPMoviePlayerController还是AVPlayer它们都支持绝大多数音频编码，所以大家如果纯粹是为了播放音乐的话也可以考虑使用这两个播放器。那么如何支持更多视频编码格式呢？目前来说主要还是依靠第三方框架，在iOS上常用的视频编码、解码框架有：VLC、ffmpeg， 具体使用方式今天就不再做详细介绍。\n```\n\n","slug":"oc/iOS开发系列--音频播放、录音、视频播放、拍照、视频录制","published":1,"updated":"2016-10-08T09:56:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0yms9bi00a121xwvya8si2e","content":"<p>在iOS中音频播放从形式上可以分为音效播放和音乐播放。前者主要指的是一些短音频播放，通常作为点缀音频，对于这类音频不需要进行进度、循环等控制。后者指的是一些较长的音频，通常是主音频，对于这些音频的播放通常需要进行精确的控制。<br><a id=\"more\"></a></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div><div class=\"line\">480</div><div class=\"line\">481</div><div class=\"line\">482</div><div class=\"line\">483</div><div class=\"line\">484</div><div class=\"line\">485</div><div class=\"line\">486</div><div class=\"line\">487</div><div class=\"line\">488</div><div class=\"line\">489</div><div class=\"line\">490</div><div class=\"line\">491</div><div class=\"line\">492</div><div class=\"line\">493</div><div class=\"line\">494</div><div class=\"line\">495</div><div class=\"line\">496</div><div class=\"line\">497</div><div class=\"line\">498</div><div class=\"line\">499</div><div class=\"line\">500</div><div class=\"line\">501</div><div class=\"line\">502</div><div class=\"line\">503</div><div class=\"line\">504</div><div class=\"line\">505</div><div class=\"line\">506</div><div class=\"line\">507</div><div class=\"line\">508</div><div class=\"line\">509</div><div class=\"line\">510</div><div class=\"line\">511</div><div class=\"line\">512</div><div class=\"line\">513</div><div class=\"line\">514</div><div class=\"line\">515</div><div class=\"line\">516</div><div class=\"line\">517</div><div class=\"line\">518</div><div class=\"line\">519</div><div class=\"line\">520</div><div class=\"line\">521</div><div class=\"line\">522</div><div class=\"line\">523</div><div class=\"line\">524</div><div class=\"line\">525</div><div class=\"line\">526</div><div class=\"line\">527</div><div class=\"line\">528</div><div class=\"line\">529</div><div class=\"line\">530</div><div class=\"line\">531</div><div class=\"line\">532</div><div class=\"line\">533</div><div class=\"line\">534</div><div class=\"line\">535</div><div class=\"line\">536</div><div class=\"line\">537</div><div class=\"line\">538</div><div class=\"line\">539</div><div class=\"line\">540</div><div class=\"line\">541</div><div class=\"line\">542</div><div class=\"line\">543</div><div class=\"line\">544</div><div class=\"line\">545</div><div class=\"line\">546</div><div class=\"line\">547</div><div class=\"line\">548</div><div class=\"line\">549</div><div class=\"line\">550</div><div class=\"line\">551</div><div class=\"line\">552</div><div class=\"line\">553</div><div class=\"line\">554</div><div class=\"line\">555</div><div class=\"line\">556</div><div class=\"line\">557</div><div class=\"line\">558</div><div class=\"line\">559</div><div class=\"line\">560</div><div class=\"line\">561</div><div class=\"line\">562</div><div class=\"line\">563</div><div class=\"line\">564</div><div class=\"line\">565</div><div class=\"line\">566</div><div class=\"line\">567</div><div class=\"line\">568</div><div class=\"line\">569</div><div class=\"line\">570</div><div class=\"line\">571</div><div class=\"line\">572</div><div class=\"line\">573</div><div class=\"line\">574</div><div class=\"line\">575</div><div class=\"line\">576</div><div class=\"line\">577</div><div class=\"line\">578</div><div class=\"line\">579</div><div class=\"line\">580</div><div class=\"line\">581</div><div class=\"line\">582</div><div class=\"line\">583</div><div class=\"line\">584</div><div class=\"line\">585</div><div class=\"line\">586</div><div class=\"line\">587</div><div class=\"line\">588</div><div class=\"line\">589</div><div class=\"line\">590</div><div class=\"line\">591</div><div class=\"line\">592</div><div class=\"line\">593</div><div class=\"line\">594</div><div class=\"line\">595</div><div class=\"line\">596</div><div class=\"line\">597</div><div class=\"line\">598</div><div class=\"line\">599</div><div class=\"line\">600</div><div class=\"line\">601</div><div class=\"line\">602</div><div class=\"line\">603</div><div class=\"line\">604</div><div class=\"line\">605</div><div class=\"line\">606</div><div class=\"line\">607</div><div class=\"line\">608</div><div class=\"line\">609</div><div class=\"line\">610</div><div class=\"line\">611</div><div class=\"line\">612</div><div class=\"line\">613</div><div class=\"line\">614</div><div class=\"line\">615</div><div class=\"line\">616</div><div class=\"line\">617</div><div class=\"line\">618</div><div class=\"line\">619</div><div class=\"line\">620</div><div class=\"line\">621</div><div class=\"line\">622</div><div class=\"line\">623</div><div class=\"line\">624</div><div class=\"line\">625</div><div class=\"line\">626</div><div class=\"line\">627</div><div class=\"line\">628</div><div class=\"line\">629</div><div class=\"line\">630</div><div class=\"line\">631</div><div class=\"line\">632</div><div class=\"line\">633</div><div class=\"line\">634</div><div class=\"line\">635</div><div class=\"line\">636</div><div class=\"line\">637</div><div class=\"line\">638</div><div class=\"line\">639</div><div class=\"line\">640</div><div class=\"line\">641</div><div class=\"line\">642</div><div class=\"line\">643</div><div class=\"line\">644</div><div class=\"line\">645</div><div class=\"line\">646</div><div class=\"line\">647</div><div class=\"line\">648</div><div class=\"line\">649</div><div class=\"line\">650</div><div class=\"line\">651</div><div class=\"line\">652</div><div class=\"line\">653</div><div class=\"line\">654</div><div class=\"line\">655</div><div class=\"line\">656</div><div class=\"line\">657</div><div class=\"line\">658</div><div class=\"line\">659</div><div class=\"line\">660</div><div class=\"line\">661</div><div class=\"line\">662</div><div class=\"line\">663</div><div class=\"line\">664</div><div class=\"line\">665</div><div class=\"line\">666</div><div class=\"line\">667</div><div class=\"line\">668</div><div class=\"line\">669</div><div class=\"line\">670</div><div class=\"line\">671</div><div class=\"line\">672</div><div class=\"line\">673</div><div class=\"line\">674</div><div class=\"line\">675</div><div class=\"line\">676</div><div class=\"line\">677</div><div class=\"line\">678</div><div class=\"line\">679</div><div class=\"line\">680</div><div class=\"line\">681</div><div class=\"line\">682</div><div class=\"line\">683</div><div class=\"line\">684</div><div class=\"line\">685</div><div class=\"line\">686</div><div class=\"line\">687</div><div class=\"line\">688</div><div class=\"line\">689</div><div class=\"line\">690</div><div class=\"line\">691</div><div class=\"line\">692</div><div class=\"line\">693</div><div class=\"line\">694</div><div class=\"line\">695</div><div class=\"line\">696</div><div class=\"line\">697</div><div class=\"line\">698</div><div class=\"line\">699</div><div class=\"line\">700</div><div class=\"line\">701</div><div class=\"line\">702</div><div class=\"line\">703</div><div class=\"line\">704</div><div class=\"line\">705</div><div class=\"line\">706</div><div class=\"line\">707</div><div class=\"line\">708</div><div class=\"line\">709</div><div class=\"line\">710</div><div class=\"line\">711</div><div class=\"line\">712</div><div class=\"line\">713</div><div class=\"line\">714</div><div class=\"line\">715</div><div class=\"line\">716</div><div class=\"line\">717</div><div class=\"line\">718</div><div class=\"line\">719</div><div class=\"line\">720</div><div class=\"line\">721</div><div class=\"line\">722</div><div class=\"line\">723</div><div class=\"line\">724</div><div class=\"line\">725</div><div class=\"line\">726</div><div class=\"line\">727</div><div class=\"line\">728</div><div class=\"line\">729</div><div class=\"line\">730</div><div class=\"line\">731</div><div class=\"line\">732</div><div class=\"line\">733</div><div class=\"line\">734</div><div class=\"line\">735</div><div class=\"line\">736</div><div class=\"line\">737</div><div class=\"line\">738</div><div class=\"line\">739</div><div class=\"line\">740</div><div class=\"line\">741</div><div class=\"line\">742</div><div class=\"line\">743</div><div class=\"line\">744</div><div class=\"line\">745</div><div class=\"line\">746</div><div class=\"line\">747</div><div class=\"line\">748</div><div class=\"line\">749</div><div class=\"line\">750</div><div class=\"line\">751</div><div class=\"line\">752</div><div class=\"line\">753</div><div class=\"line\">754</div><div class=\"line\">755</div><div class=\"line\">756</div><div class=\"line\">757</div><div class=\"line\">758</div><div class=\"line\">759</div><div class=\"line\">760</div><div class=\"line\">761</div><div class=\"line\">762</div><div class=\"line\">763</div><div class=\"line\">764</div><div class=\"line\">765</div><div class=\"line\">766</div><div class=\"line\">767</div><div class=\"line\">768</div><div class=\"line\">769</div><div class=\"line\">770</div><div class=\"line\">771</div><div class=\"line\">772</div><div class=\"line\">773</div><div class=\"line\">774</div><div class=\"line\">775</div><div class=\"line\">776</div><div class=\"line\">777</div><div class=\"line\">778</div><div class=\"line\">779</div><div class=\"line\">780</div><div class=\"line\">781</div><div class=\"line\">782</div><div class=\"line\">783</div><div class=\"line\">784</div><div class=\"line\">785</div><div class=\"line\">786</div><div class=\"line\">787</div><div class=\"line\">788</div><div class=\"line\">789</div><div class=\"line\">790</div><div class=\"line\">791</div><div class=\"line\">792</div><div class=\"line\">793</div><div class=\"line\">794</div><div class=\"line\">795</div><div class=\"line\">796</div><div class=\"line\">797</div><div class=\"line\">798</div><div class=\"line\">799</div><div class=\"line\">800</div><div class=\"line\">801</div><div class=\"line\">802</div><div class=\"line\">803</div><div class=\"line\">804</div><div class=\"line\">805</div><div class=\"line\">806</div><div class=\"line\">807</div><div class=\"line\">808</div><div class=\"line\">809</div><div class=\"line\">810</div><div class=\"line\">811</div><div class=\"line\">812</div><div class=\"line\">813</div><div class=\"line\">814</div><div class=\"line\">815</div><div class=\"line\">816</div><div class=\"line\">817</div><div class=\"line\">818</div><div class=\"line\">819</div><div class=\"line\">820</div><div class=\"line\">821</div><div class=\"line\">822</div><div class=\"line\">823</div><div class=\"line\">824</div><div class=\"line\">825</div><div class=\"line\">826</div><div class=\"line\">827</div><div class=\"line\">828</div><div class=\"line\">829</div><div class=\"line\">830</div><div class=\"line\">831</div><div class=\"line\">832</div><div class=\"line\">833</div><div class=\"line\">834</div><div class=\"line\">835</div><div class=\"line\">836</div><div class=\"line\">837</div><div class=\"line\">838</div><div class=\"line\">839</div><div class=\"line\">840</div><div class=\"line\">841</div><div class=\"line\">842</div><div class=\"line\">843</div><div class=\"line\">844</div><div class=\"line\">845</div><div class=\"line\">846</div><div class=\"line\">847</div><div class=\"line\">848</div><div class=\"line\">849</div><div class=\"line\">850</div><div class=\"line\">851</div><div class=\"line\">852</div><div class=\"line\">853</div><div class=\"line\">854</div><div class=\"line\">855</div><div class=\"line\">856</div><div class=\"line\">857</div><div class=\"line\">858</div><div class=\"line\">859</div><div class=\"line\">860</div><div class=\"line\">861</div><div class=\"line\">862</div><div class=\"line\">863</div><div class=\"line\">864</div><div class=\"line\">865</div><div class=\"line\">866</div><div class=\"line\">867</div><div class=\"line\">868</div><div class=\"line\">869</div><div class=\"line\">870</div><div class=\"line\">871</div><div class=\"line\">872</div><div class=\"line\">873</div><div class=\"line\">874</div><div class=\"line\">875</div><div class=\"line\">876</div><div class=\"line\">877</div><div class=\"line\">878</div><div class=\"line\">879</div><div class=\"line\">880</div><div class=\"line\">881</div><div class=\"line\">882</div><div class=\"line\">883</div><div class=\"line\">884</div><div class=\"line\">885</div><div class=\"line\">886</div><div class=\"line\">887</div><div class=\"line\">888</div><div class=\"line\">889</div><div class=\"line\">890</div><div class=\"line\">891</div><div class=\"line\">892</div><div class=\"line\">893</div><div class=\"line\">894</div><div class=\"line\">895</div><div class=\"line\">896</div><div class=\"line\">897</div><div class=\"line\">898</div><div class=\"line\">899</div><div class=\"line\">900</div><div class=\"line\">901</div><div class=\"line\">902</div><div class=\"line\">903</div><div class=\"line\">904</div><div class=\"line\">905</div><div class=\"line\">906</div><div class=\"line\">907</div><div class=\"line\">908</div><div class=\"line\">909</div><div class=\"line\">910</div><div class=\"line\">911</div><div class=\"line\">912</div><div class=\"line\">913</div><div class=\"line\">914</div><div class=\"line\">915</div><div class=\"line\">916</div><div class=\"line\">917</div><div class=\"line\">918</div><div class=\"line\">919</div><div class=\"line\">920</div><div class=\"line\">921</div><div class=\"line\">922</div><div class=\"line\">923</div><div class=\"line\">924</div><div class=\"line\">925</div><div class=\"line\">926</div><div class=\"line\">927</div><div class=\"line\">928</div><div class=\"line\">929</div><div class=\"line\">930</div><div class=\"line\">931</div><div class=\"line\">932</div><div class=\"line\">933</div><div class=\"line\">934</div><div class=\"line\">935</div><div class=\"line\">936</div><div class=\"line\">937</div><div class=\"line\">938</div><div class=\"line\">939</div><div class=\"line\">940</div><div class=\"line\">941</div><div class=\"line\">942</div><div class=\"line\">943</div><div class=\"line\">944</div><div class=\"line\">945</div><div class=\"line\">946</div><div class=\"line\">947</div><div class=\"line\">948</div><div class=\"line\">949</div><div class=\"line\">950</div><div class=\"line\">951</div><div class=\"line\">952</div><div class=\"line\">953</div><div class=\"line\">954</div><div class=\"line\">955</div><div class=\"line\">956</div><div class=\"line\">957</div><div class=\"line\">958</div><div class=\"line\">959</div><div class=\"line\">960</div><div class=\"line\">961</div><div class=\"line\">962</div><div class=\"line\">963</div><div class=\"line\">964</div><div class=\"line\">965</div><div class=\"line\">966</div><div class=\"line\">967</div><div class=\"line\">968</div><div class=\"line\">969</div><div class=\"line\">970</div><div class=\"line\">971</div><div class=\"line\">972</div><div class=\"line\">973</div><div class=\"line\">974</div><div class=\"line\">975</div><div class=\"line\">976</div><div class=\"line\">977</div><div class=\"line\">978</div><div class=\"line\">979</div><div class=\"line\">980</div><div class=\"line\">981</div><div class=\"line\">982</div><div class=\"line\">983</div><div class=\"line\">984</div><div class=\"line\">985</div><div class=\"line\">986</div><div class=\"line\">987</div><div class=\"line\">988</div><div class=\"line\">989</div><div class=\"line\">990</div><div class=\"line\">991</div><div class=\"line\">992</div><div class=\"line\">993</div><div class=\"line\">994</div><div class=\"line\">995</div><div class=\"line\">996</div><div class=\"line\">997</div><div class=\"line\">998</div><div class=\"line\">999</div><div class=\"line\">1000</div><div class=\"line\">1001</div><div class=\"line\">1002</div><div class=\"line\">1003</div><div class=\"line\">1004</div><div class=\"line\">1005</div><div class=\"line\">1006</div><div class=\"line\">1007</div><div class=\"line\">1008</div><div class=\"line\">1009</div><div class=\"line\">1010</div><div class=\"line\">1011</div><div class=\"line\">1012</div><div class=\"line\">1013</div><div class=\"line\">1014</div><div class=\"line\">1015</div><div class=\"line\">1016</div><div class=\"line\">1017</div><div class=\"line\">1018</div><div class=\"line\">1019</div><div class=\"line\">1020</div><div class=\"line\">1021</div><div class=\"line\">1022</div><div class=\"line\">1023</div><div class=\"line\">1024</div><div class=\"line\">1025</div><div class=\"line\">1026</div><div class=\"line\">1027</div><div class=\"line\">1028</div><div class=\"line\">1029</div><div class=\"line\">1030</div><div class=\"line\">1031</div><div class=\"line\">1032</div><div class=\"line\">1033</div><div class=\"line\">1034</div><div class=\"line\">1035</div><div class=\"line\">1036</div><div class=\"line\">1037</div><div class=\"line\">1038</div><div class=\"line\">1039</div><div class=\"line\">1040</div><div class=\"line\">1041</div><div class=\"line\">1042</div><div class=\"line\">1043</div><div class=\"line\">1044</div><div class=\"line\">1045</div><div class=\"line\">1046</div><div class=\"line\">1047</div><div class=\"line\">1048</div><div class=\"line\">1049</div><div class=\"line\">1050</div><div class=\"line\">1051</div><div class=\"line\">1052</div><div class=\"line\">1053</div><div class=\"line\">1054</div><div class=\"line\">1055</div><div class=\"line\">1056</div><div class=\"line\">1057</div><div class=\"line\">1058</div><div class=\"line\">1059</div><div class=\"line\">1060</div><div class=\"line\">1061</div><div class=\"line\">1062</div><div class=\"line\">1063</div><div class=\"line\">1064</div><div class=\"line\">1065</div><div class=\"line\">1066</div><div class=\"line\">1067</div><div class=\"line\">1068</div><div class=\"line\">1069</div><div class=\"line\">1070</div><div class=\"line\">1071</div><div class=\"line\">1072</div><div class=\"line\">1073</div><div class=\"line\">1074</div><div class=\"line\">1075</div><div class=\"line\">1076</div><div class=\"line\">1077</div><div class=\"line\">1078</div><div class=\"line\">1079</div><div class=\"line\">1080</div><div class=\"line\">1081</div><div class=\"line\">1082</div><div class=\"line\">1083</div><div class=\"line\">1084</div><div class=\"line\">1085</div><div class=\"line\">1086</div><div class=\"line\">1087</div><div class=\"line\">1088</div><div class=\"line\">1089</div><div class=\"line\">1090</div><div class=\"line\">1091</div><div class=\"line\">1092</div><div class=\"line\">1093</div><div class=\"line\">1094</div><div class=\"line\">1095</div><div class=\"line\">1096</div><div class=\"line\">1097</div><div class=\"line\">1098</div><div class=\"line\">1099</div><div class=\"line\">1100</div><div class=\"line\">1101</div><div class=\"line\">1102</div><div class=\"line\">1103</div><div class=\"line\">1104</div><div class=\"line\">1105</div><div class=\"line\">1106</div><div class=\"line\">1107</div><div class=\"line\">1108</div><div class=\"line\">1109</div><div class=\"line\">1110</div><div class=\"line\">1111</div><div class=\"line\">1112</div><div class=\"line\">1113</div><div class=\"line\">1114</div><div class=\"line\">1115</div><div class=\"line\">1116</div><div class=\"line\">1117</div><div class=\"line\">1118</div><div class=\"line\">1119</div><div class=\"line\">1120</div><div class=\"line\">1121</div><div class=\"line\">1122</div><div class=\"line\">1123</div><div class=\"line\">1124</div><div class=\"line\">1125</div><div class=\"line\">1126</div><div class=\"line\">1127</div><div class=\"line\">1128</div><div class=\"line\">1129</div><div class=\"line\">1130</div><div class=\"line\">1131</div><div class=\"line\">1132</div><div class=\"line\">1133</div><div class=\"line\">1134</div><div class=\"line\">1135</div><div class=\"line\">1136</div><div class=\"line\">1137</div><div class=\"line\">1138</div><div class=\"line\">1139</div><div class=\"line\">1140</div><div class=\"line\">1141</div><div class=\"line\">1142</div><div class=\"line\">1143</div><div class=\"line\">1144</div><div class=\"line\">1145</div><div class=\"line\">1146</div><div class=\"line\">1147</div><div class=\"line\">1148</div><div class=\"line\">1149</div><div class=\"line\">1150</div><div class=\"line\">1151</div><div class=\"line\">1152</div><div class=\"line\">1153</div><div class=\"line\">1154</div><div class=\"line\">1155</div><div class=\"line\">1156</div><div class=\"line\">1157</div><div class=\"line\">1158</div><div class=\"line\">1159</div><div class=\"line\">1160</div><div class=\"line\">1161</div><div class=\"line\">1162</div><div class=\"line\">1163</div><div class=\"line\">1164</div><div class=\"line\">1165</div><div class=\"line\">1166</div><div class=\"line\">1167</div><div class=\"line\">1168</div><div class=\"line\">1169</div><div class=\"line\">1170</div><div class=\"line\">1171</div><div class=\"line\">1172</div><div class=\"line\">1173</div><div class=\"line\">1174</div><div class=\"line\">1175</div><div class=\"line\">1176</div><div class=\"line\">1177</div><div class=\"line\">1178</div><div class=\"line\">1179</div><div class=\"line\">1180</div><div class=\"line\">1181</div><div class=\"line\">1182</div><div class=\"line\">1183</div><div class=\"line\">1184</div><div class=\"line\">1185</div><div class=\"line\">1186</div><div class=\"line\">1187</div><div class=\"line\">1188</div><div class=\"line\">1189</div><div class=\"line\">1190</div><div class=\"line\">1191</div><div class=\"line\">1192</div><div class=\"line\">1193</div><div class=\"line\">1194</div><div class=\"line\">1195</div><div class=\"line\">1196</div><div class=\"line\">1197</div><div class=\"line\">1198</div><div class=\"line\">1199</div><div class=\"line\">1200</div><div class=\"line\">1201</div><div class=\"line\">1202</div><div class=\"line\">1203</div><div class=\"line\">1204</div><div class=\"line\">1205</div><div class=\"line\">1206</div><div class=\"line\">1207</div><div class=\"line\">1208</div><div class=\"line\">1209</div><div class=\"line\">1210</div><div class=\"line\">1211</div><div class=\"line\">1212</div><div class=\"line\">1213</div><div class=\"line\">1214</div><div class=\"line\">1215</div><div class=\"line\">1216</div><div class=\"line\">1217</div><div class=\"line\">1218</div><div class=\"line\">1219</div><div class=\"line\">1220</div><div class=\"line\">1221</div><div class=\"line\">1222</div><div class=\"line\">1223</div><div class=\"line\">1224</div><div class=\"line\">1225</div><div class=\"line\">1226</div><div class=\"line\">1227</div><div class=\"line\">1228</div><div class=\"line\">1229</div><div class=\"line\">1230</div><div class=\"line\">1231</div><div class=\"line\">1232</div><div class=\"line\">1233</div><div class=\"line\">1234</div><div class=\"line\">1235</div><div class=\"line\">1236</div><div class=\"line\">1237</div><div class=\"line\">1238</div><div class=\"line\">1239</div><div class=\"line\">1240</div><div class=\"line\">1241</div><div class=\"line\">1242</div><div class=\"line\">1243</div><div class=\"line\">1244</div><div class=\"line\">1245</div><div class=\"line\">1246</div><div class=\"line\">1247</div><div class=\"line\">1248</div><div class=\"line\">1249</div><div class=\"line\">1250</div><div class=\"line\">1251</div><div class=\"line\">1252</div><div class=\"line\">1253</div><div class=\"line\">1254</div><div class=\"line\">1255</div><div class=\"line\">1256</div><div class=\"line\">1257</div><div class=\"line\">1258</div><div class=\"line\">1259</div><div class=\"line\">1260</div><div class=\"line\">1261</div><div class=\"line\">1262</div><div class=\"line\">1263</div><div class=\"line\">1264</div><div class=\"line\">1265</div><div class=\"line\">1266</div><div class=\"line\">1267</div><div class=\"line\">1268</div><div class=\"line\">1269</div><div class=\"line\">1270</div><div class=\"line\">1271</div><div class=\"line\">1272</div><div class=\"line\">1273</div><div class=\"line\">1274</div><div class=\"line\">1275</div><div class=\"line\">1276</div><div class=\"line\">1277</div><div class=\"line\">1278</div><div class=\"line\">1279</div><div class=\"line\">1280</div><div class=\"line\">1281</div><div class=\"line\">1282</div><div class=\"line\">1283</div><div class=\"line\">1284</div><div class=\"line\">1285</div><div class=\"line\">1286</div><div class=\"line\">1287</div><div class=\"line\">1288</div><div class=\"line\">1289</div><div class=\"line\">1290</div><div class=\"line\">1291</div><div class=\"line\">1292</div><div class=\"line\">1293</div><div class=\"line\">1294</div><div class=\"line\">1295</div><div class=\"line\">1296</div><div class=\"line\">1297</div><div class=\"line\">1298</div><div class=\"line\">1299</div><div class=\"line\">1300</div><div class=\"line\">1301</div><div class=\"line\">1302</div><div class=\"line\">1303</div><div class=\"line\">1304</div><div class=\"line\">1305</div><div class=\"line\">1306</div><div class=\"line\">1307</div><div class=\"line\">1308</div><div class=\"line\">1309</div><div class=\"line\">1310</div><div class=\"line\">1311</div><div class=\"line\">1312</div><div class=\"line\">1313</div><div class=\"line\">1314</div><div class=\"line\">1315</div><div class=\"line\">1316</div><div class=\"line\">1317</div><div class=\"line\">1318</div><div class=\"line\">1319</div><div class=\"line\">1320</div><div class=\"line\">1321</div><div class=\"line\">1322</div><div class=\"line\">1323</div><div class=\"line\">1324</div><div class=\"line\">1325</div><div class=\"line\">1326</div><div class=\"line\">1327</div><div class=\"line\">1328</div><div class=\"line\">1329</div><div class=\"line\">1330</div><div class=\"line\">1331</div><div class=\"line\">1332</div><div class=\"line\">1333</div><div class=\"line\">1334</div><div class=\"line\">1335</div><div class=\"line\">1336</div><div class=\"line\">1337</div><div class=\"line\">1338</div><div class=\"line\">1339</div><div class=\"line\">1340</div><div class=\"line\">1341</div><div class=\"line\">1342</div><div class=\"line\">1343</div><div class=\"line\">1344</div><div class=\"line\">1345</div><div class=\"line\">1346</div><div class=\"line\">1347</div><div class=\"line\">1348</div><div class=\"line\">1349</div><div class=\"line\">1350</div><div class=\"line\">1351</div><div class=\"line\">1352</div><div class=\"line\">1353</div><div class=\"line\">1354</div><div class=\"line\">1355</div><div class=\"line\">1356</div><div class=\"line\">1357</div><div class=\"line\">1358</div><div class=\"line\">1359</div><div class=\"line\">1360</div><div class=\"line\">1361</div><div class=\"line\">1362</div><div class=\"line\">1363</div><div class=\"line\">1364</div><div class=\"line\">1365</div><div class=\"line\">1366</div><div class=\"line\">1367</div><div class=\"line\">1368</div><div class=\"line\">1369</div><div class=\"line\">1370</div><div class=\"line\">1371</div><div class=\"line\">1372</div><div class=\"line\">1373</div><div class=\"line\">1374</div><div class=\"line\">1375</div><div class=\"line\">1376</div><div class=\"line\">1377</div><div class=\"line\">1378</div><div class=\"line\">1379</div><div class=\"line\">1380</div><div class=\"line\">1381</div><div class=\"line\">1382</div><div class=\"line\">1383</div><div class=\"line\">1384</div><div class=\"line\">1385</div><div class=\"line\">1386</div><div class=\"line\">1387</div><div class=\"line\">1388</div><div class=\"line\">1389</div><div class=\"line\">1390</div><div class=\"line\">1391</div><div class=\"line\">1392</div><div class=\"line\">1393</div><div class=\"line\">1394</div><div class=\"line\">1395</div><div class=\"line\">1396</div><div class=\"line\">1397</div><div class=\"line\">1398</div><div class=\"line\">1399</div><div class=\"line\">1400</div><div class=\"line\">1401</div><div class=\"line\">1402</div><div class=\"line\">1403</div><div class=\"line\">1404</div><div class=\"line\">1405</div><div class=\"line\">1406</div><div class=\"line\">1407</div><div class=\"line\">1408</div><div class=\"line\">1409</div><div class=\"line\">1410</div><div class=\"line\">1411</div><div class=\"line\">1412</div><div class=\"line\">1413</div><div class=\"line\">1414</div><div class=\"line\">1415</div><div class=\"line\">1416</div><div class=\"line\">1417</div><div class=\"line\">1418</div><div class=\"line\">1419</div><div class=\"line\">1420</div><div class=\"line\">1421</div><div class=\"line\">1422</div><div class=\"line\">1423</div><div class=\"line\">1424</div><div class=\"line\">1425</div><div class=\"line\">1426</div><div class=\"line\">1427</div><div class=\"line\">1428</div><div class=\"line\">1429</div><div class=\"line\">1430</div><div class=\"line\">1431</div><div class=\"line\">1432</div><div class=\"line\">1433</div><div class=\"line\">1434</div><div class=\"line\">1435</div><div class=\"line\">1436</div><div class=\"line\">1437</div><div class=\"line\">1438</div><div class=\"line\">1439</div><div class=\"line\">1440</div><div class=\"line\">1441</div><div class=\"line\">1442</div><div class=\"line\">1443</div><div class=\"line\">1444</div><div class=\"line\">1445</div><div class=\"line\">1446</div><div class=\"line\">1447</div><div class=\"line\">1448</div><div class=\"line\">1449</div><div class=\"line\">1450</div><div class=\"line\">1451</div><div class=\"line\">1452</div><div class=\"line\">1453</div><div class=\"line\">1454</div><div class=\"line\">1455</div><div class=\"line\">1456</div><div class=\"line\">1457</div><div class=\"line\">1458</div><div class=\"line\">1459</div><div class=\"line\">1460</div><div class=\"line\">1461</div><div class=\"line\">1462</div><div class=\"line\">1463</div><div class=\"line\">1464</div><div class=\"line\">1465</div><div class=\"line\">1466</div><div class=\"line\">1467</div><div class=\"line\">1468</div><div class=\"line\">1469</div><div class=\"line\">1470</div><div class=\"line\">1471</div><div class=\"line\">1472</div><div class=\"line\">1473</div><div class=\"line\">1474</div><div class=\"line\">1475</div><div class=\"line\">1476</div><div class=\"line\">1477</div><div class=\"line\">1478</div><div class=\"line\">1479</div><div class=\"line\">1480</div><div class=\"line\">1481</div><div class=\"line\">1482</div><div class=\"line\">1483</div><div class=\"line\">1484</div><div class=\"line\">1485</div><div class=\"line\">1486</div><div class=\"line\">1487</div><div class=\"line\">1488</div><div class=\"line\">1489</div><div class=\"line\">1490</div><div class=\"line\">1491</div><div class=\"line\">1492</div><div class=\"line\">1493</div><div class=\"line\">1494</div><div class=\"line\">1495</div><div class=\"line\">1496</div><div class=\"line\">1497</div><div class=\"line\">1498</div><div class=\"line\">1499</div><div class=\"line\">1500</div><div class=\"line\">1501</div><div class=\"line\">1502</div><div class=\"line\">1503</div><div class=\"line\">1504</div><div class=\"line\">1505</div><div class=\"line\">1506</div><div class=\"line\">1507</div><div class=\"line\">1508</div><div class=\"line\">1509</div><div class=\"line\">1510</div><div class=\"line\">1511</div><div class=\"line\">1512</div><div class=\"line\">1513</div><div class=\"line\">1514</div><div class=\"line\">1515</div><div class=\"line\">1516</div><div class=\"line\">1517</div><div class=\"line\">1518</div><div class=\"line\">1519</div><div class=\"line\">1520</div><div class=\"line\">1521</div><div class=\"line\">1522</div><div class=\"line\">1523</div><div class=\"line\">1524</div><div class=\"line\">1525</div><div class=\"line\">1526</div><div class=\"line\">1527</div><div class=\"line\">1528</div><div class=\"line\">1529</div><div class=\"line\">1530</div><div class=\"line\">1531</div><div class=\"line\">1532</div><div class=\"line\">1533</div><div class=\"line\">1534</div><div class=\"line\">1535</div><div class=\"line\">1536</div><div class=\"line\">1537</div><div class=\"line\">1538</div><div class=\"line\">1539</div><div class=\"line\">1540</div><div class=\"line\">1541</div><div class=\"line\">1542</div><div class=\"line\">1543</div><div class=\"line\">1544</div><div class=\"line\">1545</div><div class=\"line\">1546</div><div class=\"line\">1547</div><div class=\"line\">1548</div><div class=\"line\">1549</div><div class=\"line\">1550</div><div class=\"line\">1551</div><div class=\"line\">1552</div><div class=\"line\">1553</div><div class=\"line\">1554</div><div class=\"line\">1555</div><div class=\"line\">1556</div><div class=\"line\">1557</div><div class=\"line\">1558</div><div class=\"line\">1559</div><div class=\"line\">1560</div><div class=\"line\">1561</div><div class=\"line\">1562</div><div class=\"line\">1563</div><div class=\"line\">1564</div><div class=\"line\">1565</div><div class=\"line\">1566</div><div class=\"line\">1567</div><div class=\"line\">1568</div><div class=\"line\">1569</div><div class=\"line\">1570</div><div class=\"line\">1571</div><div class=\"line\">1572</div><div class=\"line\">1573</div><div class=\"line\">1574</div><div class=\"line\">1575</div><div class=\"line\">1576</div><div class=\"line\">1577</div><div class=\"line\">1578</div><div class=\"line\">1579</div><div class=\"line\">1580</div><div class=\"line\">1581</div><div class=\"line\">1582</div><div class=\"line\">1583</div><div class=\"line\">1584</div><div class=\"line\">1585</div><div class=\"line\">1586</div><div class=\"line\">1587</div><div class=\"line\">1588</div><div class=\"line\">1589</div><div class=\"line\">1590</div><div class=\"line\">1591</div><div class=\"line\">1592</div><div class=\"line\">1593</div><div class=\"line\">1594</div><div class=\"line\">1595</div><div class=\"line\">1596</div><div class=\"line\">1597</div><div class=\"line\">1598</div><div class=\"line\">1599</div><div class=\"line\">1600</div><div class=\"line\">1601</div><div class=\"line\">1602</div><div class=\"line\">1603</div><div class=\"line\">1604</div><div class=\"line\">1605</div><div class=\"line\">1606</div><div class=\"line\">1607</div><div class=\"line\">1608</div><div class=\"line\">1609</div><div class=\"line\">1610</div><div class=\"line\">1611</div><div class=\"line\">1612</div><div class=\"line\">1613</div><div class=\"line\">1614</div><div class=\"line\">1615</div><div class=\"line\">1616</div><div class=\"line\">1617</div><div class=\"line\">1618</div><div class=\"line\">1619</div><div class=\"line\">1620</div><div class=\"line\">1621</div><div class=\"line\">1622</div><div class=\"line\">1623</div><div class=\"line\">1624</div><div class=\"line\">1625</div><div class=\"line\">1626</div><div class=\"line\">1627</div><div class=\"line\">1628</div><div class=\"line\">1629</div><div class=\"line\">1630</div><div class=\"line\">1631</div><div class=\"line\">1632</div><div class=\"line\">1633</div><div class=\"line\">1634</div><div class=\"line\">1635</div><div class=\"line\">1636</div><div class=\"line\">1637</div><div class=\"line\">1638</div><div class=\"line\">1639</div><div class=\"line\">1640</div><div class=\"line\">1641</div><div class=\"line\">1642</div><div class=\"line\">1643</div><div class=\"line\">1644</div><div class=\"line\">1645</div><div class=\"line\">1646</div><div class=\"line\">1647</div><div class=\"line\">1648</div><div class=\"line\">1649</div><div class=\"line\">1650</div><div class=\"line\">1651</div><div class=\"line\">1652</div><div class=\"line\">1653</div><div class=\"line\">1654</div><div class=\"line\">1655</div><div class=\"line\">1656</div><div class=\"line\">1657</div><div class=\"line\">1658</div><div class=\"line\">1659</div><div class=\"line\">1660</div><div class=\"line\">1661</div><div class=\"line\">1662</div><div class=\"line\">1663</div><div class=\"line\">1664</div><div class=\"line\">1665</div><div class=\"line\">1666</div><div class=\"line\">1667</div><div class=\"line\">1668</div><div class=\"line\">1669</div><div class=\"line\">1670</div><div class=\"line\">1671</div><div class=\"line\">1672</div><div class=\"line\">1673</div><div class=\"line\">1674</div><div class=\"line\">1675</div><div class=\"line\">1676</div><div class=\"line\">1677</div><div class=\"line\">1678</div><div class=\"line\">1679</div><div class=\"line\">1680</div><div class=\"line\">1681</div><div class=\"line\">1682</div><div class=\"line\">1683</div><div class=\"line\">1684</div><div class=\"line\">1685</div><div class=\"line\">1686</div><div class=\"line\">1687</div><div class=\"line\">1688</div><div class=\"line\">1689</div><div class=\"line\">1690</div><div class=\"line\">1691</div><div class=\"line\">1692</div><div class=\"line\">1693</div><div class=\"line\">1694</div><div class=\"line\">1695</div><div class=\"line\">1696</div><div class=\"line\">1697</div><div class=\"line\">1698</div><div class=\"line\">1699</div><div class=\"line\">1700</div><div class=\"line\">1701</div><div class=\"line\">1702</div><div class=\"line\">1703</div><div class=\"line\">1704</div><div class=\"line\">1705</div><div class=\"line\">1706</div><div class=\"line\">1707</div><div class=\"line\">1708</div><div class=\"line\">1709</div><div class=\"line\">1710</div><div class=\"line\">1711</div><div class=\"line\">1712</div><div class=\"line\">1713</div><div class=\"line\">1714</div><div class=\"line\">1715</div><div class=\"line\">1716</div><div class=\"line\">1717</div><div class=\"line\">1718</div><div class=\"line\">1719</div><div class=\"line\">1720</div><div class=\"line\">1721</div><div class=\"line\">1722</div><div class=\"line\">1723</div><div class=\"line\">1724</div><div class=\"line\">1725</div><div class=\"line\">1726</div><div class=\"line\">1727</div><div class=\"line\">1728</div><div class=\"line\">1729</div><div class=\"line\">1730</div><div class=\"line\">1731</div><div class=\"line\">1732</div><div class=\"line\">1733</div><div class=\"line\">1734</div><div class=\"line\">1735</div><div class=\"line\">1736</div><div class=\"line\">1737</div><div class=\"line\">1738</div><div class=\"line\">1739</div><div class=\"line\">1740</div><div class=\"line\">1741</div><div class=\"line\">1742</div><div class=\"line\">1743</div><div class=\"line\">1744</div><div class=\"line\">1745</div><div class=\"line\">1746</div><div class=\"line\">1747</div><div class=\"line\">1748</div><div class=\"line\">1749</div><div class=\"line\">1750</div><div class=\"line\">1751</div><div class=\"line\">1752</div><div class=\"line\">1753</div><div class=\"line\">1754</div><div class=\"line\">1755</div><div class=\"line\">1756</div><div class=\"line\">1757</div><div class=\"line\">1758</div><div class=\"line\">1759</div><div class=\"line\">1760</div><div class=\"line\">1761</div><div class=\"line\">1762</div><div class=\"line\">1763</div><div class=\"line\">1764</div><div class=\"line\">1765</div><div class=\"line\">1766</div><div class=\"line\">1767</div><div class=\"line\">1768</div><div class=\"line\">1769</div><div class=\"line\">1770</div><div class=\"line\">1771</div><div class=\"line\">1772</div><div class=\"line\">1773</div><div class=\"line\">1774</div><div class=\"line\">1775</div><div class=\"line\">1776</div><div class=\"line\">1777</div><div class=\"line\">1778</div><div class=\"line\">1779</div><div class=\"line\">1780</div><div class=\"line\">1781</div></pre></td><td class=\"code\"><pre><div class=\"line\">转自：http:<span class=\"comment\">//blog.csdn.net/jianxin160/article/details/47753241</span></div><div class=\"line\">音频</div><div class=\"line\">在iOS中音频播放从形式上可以分为音效播放和音乐播放。前者主要指的是一些短音频播放，通常作为点缀音频，对于这类音频不需要进行进度、循环等控制。后者指的是一些较长的音频，通常是主音频，对于这些音频的播放通常需要进行精确的控制。在iOS中播放两类音频分别使用AudioToolbox.framework和<span class=\"built_in\">AVFoundation</span>.framework来完成音效和音乐播放。</div><div class=\"line\">音效</div><div class=\"line\">AudioToolbox.framework是一套基于C语言的框架，使用它来播放音效其本质是将短音频注册到系统声音服务（System Sound Service）。System Sound Service是一种简单、底层的声音播放服务，但是它本身也存在着一些限制：</div><div class=\"line\">音频播放时间不能超过<span class=\"number\">30</span>s</div><div class=\"line\">数据必须是PCM或者IMA4格式</div><div class=\"line\">音频文件必须打包成.caf、.aif、.wav中的一种（注意这是官方文档的说法，实际测试发现一些.mp3也可以播放）</div><div class=\"line\">使用System Sound Service 播放音效的步骤如下：</div><div class=\"line\">调用AudioServicesCreateSystemSoundID(   <span class=\"built_in\">CFURLRef</span>  inFileURL, SystemSoundID*   outSystemSoundID)函数获得系统声音ID。</div><div class=\"line\">如果需要监听播放完成操作，则使用AudioServicesAddSystemSoundCompletion(  SystemSoundID inSystemSoundID,</div><div class=\"line\"><span class=\"built_in\">CFRunLoopRef</span>  inRunLoop, <span class=\"built_in\">CFStringRef</span>  inRunLoopMode, AudioServicesSystemSoundCompletionProc  inCompletionRoutine, <span class=\"keyword\">void</span>*  inClientData)方法注册回调函数。</div><div class=\"line\">调用AudioServicesPlaySystemSound(SystemSoundID inSystemSoundID) 或者AudioServicesPlayAlertSound(SystemSoundID inSystemSoundID) 方法播放音效（后者带有震动效果）。</div><div class=\"line\">下面是一个简单的示例程序：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  KCMainViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  Audio</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//  音效播放</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"KCMainViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AudioToolbox/AudioToolbox.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">KCMainViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">KCMainViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> playSoundEffect:<span class=\"string\">@\"videoRing.caf\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  播放完成回调函数</div><div class=\"line\"> *</div><div class=\"line\"> *  @param soundID    系统声音ID</div><div class=\"line\"> *  @param clientData 回调时传递的数据</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">void</span> soundCompleteCallback(SystemSoundID soundID,<span class=\"keyword\">void</span> * clientData)&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放完成...\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  播放音效文件</div><div class=\"line\"> *</div><div class=\"line\"> *  @param name 音频文件名称</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)playSoundEffect:(<span class=\"built_in\">NSString</span> *)name&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *audioFile=[[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:name ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *fileUrl=[<span class=\"built_in\">NSURL</span> fileURLWithPath:audioFile];</div><div class=\"line\">    <span class=\"comment\">//1.获得系统声音ID</span></div><div class=\"line\">    SystemSoundID soundID=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * inFileUrl:音频文件url</div><div class=\"line\">     * outSystemSoundID:声音id（此函数会将音效文件加入到系统音频服务中并返回一个长整形ID）</div><div class=\"line\">     */</div><div class=\"line\">    AudioServicesCreateSystemSoundID((__bridge <span class=\"built_in\">CFURLRef</span>)(fileUrl), &amp;soundID);</div><div class=\"line\">    <span class=\"comment\">//如果需要在播放完之后执行某些操作，可以调用如下方法注册一个播放完成回调函数</span></div><div class=\"line\">    AudioServicesAddSystemSoundCompletion(soundID, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, soundCompleteCallback, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    <span class=\"comment\">//2.播放音频</span></div><div class=\"line\">    AudioServicesPlaySystemSound(soundID);<span class=\"comment\">//播放音效</span></div><div class=\"line\"><span class=\"comment\">//    AudioServicesPlayAlertSound(soundID);//播放音效并震动</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">音乐</div><div class=\"line\">如果播放较大的音频或者要对音频有精确的控制则System Sound Service可能就很难满足实际需求了，通常这种情况会选择使用<span class=\"built_in\">AVFoundation</span>.framework中的<span class=\"built_in\">AVAudioPlayer</span>来实现。<span class=\"built_in\">AVAudioPlayer</span>可以看成一个播放器，它支持多种音频格式，而且能够进行进度、音量、播放速度等控制。首先简单看一下<span class=\"built_in\">AVAudioPlayer</span>常用的属性和方法：</div><div class=\"line\">属性\t说明</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isPlaying) <span class=\"built_in\">BOOL</span> playing\t是否正在播放，只读</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSUInteger</span> numberOfChannels\t音频声道数，只读</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSTimeInterval</span> duration\t音频时长</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSURL</span> *url\t音频文件路径，只读</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSData</span> *data\t音频数据，只读</div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"keyword\">float</span> pan\t立体声平衡，如果为<span class=\"number\">-1.0</span>则完全左声道，如果<span class=\"number\">0.0</span>则左右声道平衡，如果为<span class=\"number\">1.0</span>则完全为右声道</div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"keyword\">float</span> volume\t音量大小，范围<span class=\"number\">0</span><span class=\"number\">-1.0</span></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">BOOL</span> enableRate\t是否允许改变播放速率</div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"keyword\">float</span> rate\t播放速率，范围<span class=\"number\">0.5</span><span class=\"number\">-2.0</span>，如果为<span class=\"number\">1.0</span>则正常播放，如果要修改播放速率则必须设置enableRate为<span class=\"literal\">YES</span></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSTimeInterval</span> currentTime\t当前播放时长</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSTimeInterval</span> deviceCurrentTime\t输出设备播放音频的时间，注意如果播放中被暂停此时间也会继续累加</div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSInteger</span> numberOfLoops\t循环播放次数，如果为<span class=\"number\">0</span>则不循环，如果小于<span class=\"number\">0</span>则无限循环，大于<span class=\"number\">0</span>则表示循环次数</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSDictionary</span> *settings\t音频播放设置信息，只读</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">getter</span>=isMeteringEnabled) <span class=\"built_in\">BOOL</span> meteringEnabled\t是否启用音频测量，默认为<span class=\"literal\">NO</span>，一旦启用音频测量可以通过updateMeters方法更新测量值</div><div class=\"line\">对象方法\t说明</div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithContentsOfURL:(<span class=\"built_in\">NSURL</span> *)url error:(<span class=\"built_in\">NSError</span> **)outError\t使用文件URL初始化播放器，注意这个URL不能是HTTP URL，<span class=\"built_in\">AVAudioPlayer</span>不支持加载网络媒体流，只能播放本地文件</div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithData:(<span class=\"built_in\">NSData</span> *)data error:(<span class=\"built_in\">NSError</span> **)outError\t使用<span class=\"built_in\">NSData</span>初始化播放器，注意使用此方法时必须文件格式和文件后缀一致，否则出错，所以相比此方法更推荐使用上述方法或- (<span class=\"keyword\">instancetype</span>)initWithData:(<span class=\"built_in\">NSData</span> *)data fileTypeHint:(<span class=\"built_in\">NSString</span> *)utiString error:(<span class=\"built_in\">NSError</span> **)outError方法进行初始化</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)prepareToPlay;\t加载音频文件到缓冲区，注意即使在播放之前音频文件没有加载到缓冲区程序也会隐式调用此方法。</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)play;\t播放音频文件</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)playAtTime:(<span class=\"built_in\">NSTimeInterval</span>)time\t在指定的时间开始播放音频</div><div class=\"line\">- (<span class=\"keyword\">void</span>)pause;\t暂停播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)stop;\t停止播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)updateMeters\t更新音频测量值，注意如果要更新音频测量值必须设置meteringEnabled为<span class=\"literal\">YES</span>，通过音频测量值可以即时获得音频分贝等信息</div><div class=\"line\">- (<span class=\"keyword\">float</span>)peakPowerForChannel:(<span class=\"built_in\">NSUInteger</span>)channelNumber;\t获得指定声道的分贝峰值，注意如果要获得分贝峰值必须在此之前调用updateMeters方法</div><div class=\"line\">- (<span class=\"keyword\">float</span>)averagePowerForChannel:(<span class=\"built_in\">NSUInteger</span>)channelNumber\t获得指定声道的分贝平均值，注意如果要获得分贝平均值必须在此之前调用updateMeters方法</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSArray</span> *channelAssignments\t获得或设置播放声道</div><div class=\"line\">代理方法\t说明</div><div class=\"line\">- (<span class=\"keyword\">void</span>)audioPlayerDidFinishPlaying:(<span class=\"built_in\">AVAudioPlayer</span> *)player successfully:(<span class=\"built_in\">BOOL</span>)flag\t音频播放完成</div><div class=\"line\">- (<span class=\"keyword\">void</span>)audioPlayerDecodeErrorDidOccur:(<span class=\"built_in\">AVAudioPlayer</span> *)player error:(<span class=\"built_in\">NSError</span> *)error\t音频解码发生错误</div><div class=\"line\"><span class=\"built_in\">AVAudioPlayer</span>的使用比较简单：</div><div class=\"line\">初始化<span class=\"built_in\">AVAudioPlayer</span>对象，此时通常指定本地文件路径。</div><div class=\"line\">设置播放器属性，例如重复次数、音量大小等。</div><div class=\"line\">调用play方法播放。</div><div class=\"line\">下面就使用<span class=\"built_in\">AVAudioPlayer</span>实现一个简单播放器，在这个播放器中实现了播放、暂停、显示播放进度功能，当然例如调节音量、设置循环模式、甚至是声波图像（通过分析音频分贝值）等功能都可以实现，这里就不再一一演示。界面效果如下：</div><div class=\"line\">AudioPlayerScreen</div><div class=\"line\">当然由于<span class=\"built_in\">AVAudioPlayer</span>一次只能播放一个音频文件，所有上一曲、下一曲其实可以通过创建多个播放器对象来完成，这里暂不实现。播放进度的实现主要依靠一个定时器实时计算当前播放时长和音频总时长的比例，另外为了演示委托方法，下面的代码中也实现了播放完成委托方法，通常如果有下一曲功能的话播放完可以触发下一曲音乐播放。下面是主要代码：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  KCAVAudioPlayer</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#define kMusicFile @<span class=\"meta-string\">\"刘若英 - 原来你也在这里.mp3\"</span></span></div><div class=\"line\"><span class=\"meta\">#define kMusicSinger @<span class=\"meta-string\">\"刘若英\"</span></span></div><div class=\"line\"><span class=\"meta\">#define kMusicTitle @<span class=\"meta-string\">\"原来你也在这里\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()&lt;<span class=\"title\">AVAudioPlayerDelegate</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">AVAudioPlayer</span> *audioPlayer;<span class=\"comment\">//播放器</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *controlPanel; <span class=\"comment\">//控制面板</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIProgressView</span> *playProgress;<span class=\"comment\">//播放进度</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *musicSinger; <span class=\"comment\">//演唱者</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *playOrPause; <span class=\"comment\">//播放/暂停按钮(如果tag为0认为是暂停状态，1是播放状态)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span> ,<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimer</span> *timer;<span class=\"comment\">//进度更新定时器</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">    [<span class=\"keyword\">self</span> setupUI];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  初始化UI</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)setupUI&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.title=kMusicTitle;</div><div class=\"line\">    <span class=\"keyword\">self</span>.musicSinger.text=kMusicSinger;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">NSTimer</span> *)timer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_timer) &#123;</div><div class=\"line\">        _timer=[<span class=\"built_in\">NSTimer</span> scheduledTimerWithTimeInterval:<span class=\"number\">0.5</span> target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(updateProgress) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">true</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _timer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  创建播放器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 音频播放器</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">AVAudioPlayer</span> *)audioPlayer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_audioPlayer) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *urlStr=[[<span class=\"built_in\">NSBundle</span> mainBundle]pathForResource:kMusicFile ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error=<span class=\"literal\">nil</span>;</div><div class=\"line\">        <span class=\"comment\">//初始化播放器，注意这里的Url参数只能时文件路径，不支持HTTP Url</span></div><div class=\"line\">        _audioPlayer=[[<span class=\"built_in\">AVAudioPlayer</span> alloc]initWithContentsOfURL:url error:&amp;error];</div><div class=\"line\">        <span class=\"comment\">//设置播放器属性</span></div><div class=\"line\">        _audioPlayer.numberOfLoops=<span class=\"number\">0</span>;<span class=\"comment\">//设置为0不循环</span></div><div class=\"line\">        _audioPlayer.delegate=<span class=\"keyword\">self</span>;</div><div class=\"line\">        [_audioPlayer prepareToPlay];<span class=\"comment\">//加载音频文件到缓存</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"初始化播放器过程发生错误,错误信息:%@\"</span>,error.localizedDescription);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _audioPlayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  播放音频</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)play&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (![<span class=\"keyword\">self</span>.audioPlayer isPlaying]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.audioPlayer play];</div><div class=\"line\">        <span class=\"keyword\">self</span>.timer.fireDate=[<span class=\"built_in\">NSDate</span> distantPast];<span class=\"comment\">//恢复定时器</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  暂停播放</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)pause&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.audioPlayer isPlaying]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.audioPlayer pause];</div><div class=\"line\">        <span class=\"keyword\">self</span>.timer.fireDate=[<span class=\"built_in\">NSDate</span> distantFuture];<span class=\"comment\">//暂停定时器，注意不能调用invalidate方法，此方法会取消，之后无法恢复</span></div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  点击播放/暂停按钮</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 播放/暂停按钮</div><div class=\"line\"> */</div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)playClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(sender.tag)&#123;</div><div class=\"line\">        sender.tag=<span class=\"number\">0</span>;</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_play_n\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_play_h\"</span>] forState:<span class=\"built_in\">UIControlStateHighlighted</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span> pause];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        sender.tag=<span class=\"number\">1</span>;</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_pause_n\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_pause_h\"</span>] forState:<span class=\"built_in\">UIControlStateHighlighted</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span> play];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  更新播放进度</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)updateProgress&#123;</div><div class=\"line\">    <span class=\"keyword\">float</span> progress= <span class=\"keyword\">self</span>.audioPlayer.currentTime /<span class=\"keyword\">self</span>.audioPlayer.duration;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.playProgress setProgress:progress animated:<span class=\"literal\">true</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 播放器代理方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)audioPlayerDidFinishPlaying:(<span class=\"built_in\">AVAudioPlayer</span> *)player successfully:(<span class=\"built_in\">BOOL</span>)flag&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"音乐播放完成...\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">运行效果：</div><div class=\"line\"><span class=\"built_in\">AVAudioPlayer</span></div><div class=\"line\">音频会话</div><div class=\"line\">事实上上面的播放器还存在一些问题，例如通常我们看到的播放器即使退出到后台也是可以播放的，而这个播放器如果退出到后台它会自动暂停。如果要支持后台播放需要做下面几件事情：</div><div class=\"line\"><span class=\"number\">1.</span>设置后台运行模式：在plist文件中添加Required background modes，并且设置item <span class=\"number\">0</span>=App plays audio or streams audio/video using AirPlay（其实可以直接通过Xcode在Project Targets-Capabilities-Background Modes中设置）</div><div class=\"line\">BackgroundModes</div><div class=\"line\"><span class=\"number\">2.</span>设置<span class=\"built_in\">AVAudioSession</span>的类型为<span class=\"built_in\">AVAudioSessionCategoryPlayback</span>并且调用setActive::方法启动会话。</div><div class=\"line\">    <span class=\"built_in\">AVAudioSession</span> *audioSession=[<span class=\"built_in\">AVAudioSession</span> sharedInstance];</div><div class=\"line\">    [audioSession setCategory:<span class=\"built_in\">AVAudioSessionCategoryPlayback</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">    [audioSession setActive:<span class=\"literal\">YES</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\"><span class=\"number\">3.</span>为了能够让应用退到后台之后支持耳机控制，建议添加远程控制事件（这一步不是后台播放必须的）</div><div class=\"line\">前两步是后台播放所必须设置的，第三步主要用于接收远程事件，这部分内容之前的文章中有详细介绍，如果这一步不设置虽让也能够在后台播放，但是无法获得音频控制权（如果在使用当前应用之前使用其他播放器播放音乐的话，此时如果按耳机播放键或者控制中心的播放按钮则会播放前一个应用的音频），并且不能使用耳机进行音频控制。第一步操作相信大家都很容易理解，如果应用程序要允许运行到后台必须设置，正常情况下应用如果进入后台会被挂起，通过该设置可以上应用程序继续在后台运行。但是第二步使用的<span class=\"built_in\">AVAudioSession</span>有必要进行一下详细的说明。</div><div class=\"line\">在iOS中每个应用都有一个音频会话，这个会话就通过<span class=\"built_in\">AVAudioSession</span>来表示。<span class=\"built_in\">AVAudioSession</span>同样存在于<span class=\"built_in\">AVFoundation</span>框架中，它是单例模式设计，通过sharedInstance进行访问。在使用Apple设备时大家会发现有些应用只要打开其他音频播放就会终止，而有些应用却可以和其他应用同时播放，在多种音频环境中如何去控制播放的方式就是通过音频会话来完成的。下面是音频会话的几种会话模式：</div><div class=\"line\">会话类型\t说明\t是否要求输入\t是否要求输出\t是否遵从静音键</div><div class=\"line\"><span class=\"built_in\">AVAudioSessionCategoryAmbient</span>\t混音播放，可以与其他音频应用同时播放\t否\t是\t是</div><div class=\"line\"><span class=\"built_in\">AVAudioSessionCategorySoloAmbient</span>\t独占播放\t否\t是\t是</div><div class=\"line\"><span class=\"built_in\">AVAudioSessionCategoryPlayback</span>\t后台播放，也是独占的\t否\t是\t否</div><div class=\"line\"><span class=\"built_in\">AVAudioSessionCategoryRecord</span>\t录音模式，用于录音时使用\t是\t否\t否</div><div class=\"line\"><span class=\"built_in\">AVAudioSessionCategoryPlayAndRecord</span>\t播放和录音，此时可以录音也可以播放\t是\t是\t否</div><div class=\"line\"><span class=\"built_in\">AVAudioSessionCategoryAudioProcessing</span>\t硬件解码音频，此时不能播放和录制\t否\t否\t否</div><div class=\"line\"><span class=\"built_in\">AVAudioSessionCategoryMultiRoute</span>\t多种输入输出，例如可以耳机、USB设备同时播放\t是\t是\t否</div><div class=\"line\">注意：是否遵循静音键表示在播放过程中如果用户通过硬件设置为静音是否能关闭声音。</div><div class=\"line\">根据前面对音频会话的理解，相信大家开发出能够在后台播放的音频播放器并不难，但是注意一下，在前面的代码中也提到设置完音频会话类型之后需要调用setActive::方法将会话激活才能起作用。类似的，如果一个应用已经在播放音频，打开我们的应用之后设置了在后台播放的会话类型，此时其他应用的音频会停止而播放我们的音频，如果希望我们的程序音频播放完之后（关闭或退出到后台之后）能够继续播放其他应用的音频的话则可以调用setActive::方法关闭会话。代码如下：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  KCAVAudioPlayer</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//  AVAudioSession 音频会话</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#define kMusicFile @<span class=\"meta-string\">\"刘若英 - 原来你也在这里.mp3\"</span></span></div><div class=\"line\"><span class=\"meta\">#define kMusicSinger @<span class=\"meta-string\">\"刘若英\"</span></span></div><div class=\"line\"><span class=\"meta\">#define kMusicTitle @<span class=\"meta-string\">\"原来你也在这里\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()&lt;<span class=\"title\">AVAudioPlayerDelegate</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">AVAudioPlayer</span> *audioPlayer;<span class=\"comment\">//播放器</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *controlPanel; <span class=\"comment\">//控制面板</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIProgressView</span> *playProgress;<span class=\"comment\">//播放进度</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *musicSinger; <span class=\"comment\">//演唱者</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *playOrPause; <span class=\"comment\">//播放/暂停按钮(如果tag为0认为是暂停状态，1是播放状态)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span> ,<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimer</span> *timer;<span class=\"comment\">//进度更新定时器</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">    [<span class=\"keyword\">self</span> setupUI];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  显示当面视图控制器时注册远程事件</div><div class=\"line\"> *</div><div class=\"line\"> *  @param animated 是否以动画的形式显示</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)viewWillAppear:(<span class=\"built_in\">BOOL</span>)animated&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewWillAppear:animated];</div><div class=\"line\">    <span class=\"comment\">//开启远程控制</span></div><div class=\"line\">    [[<span class=\"built_in\">UIApplication</span> sharedApplication] beginReceivingRemoteControlEvents];</div><div class=\"line\">    <span class=\"comment\">//作为第一响应者</span></div><div class=\"line\">    <span class=\"comment\">//[self becomeFirstResponder];</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  当前控制器视图不显示时取消远程控制</div><div class=\"line\"> *</div><div class=\"line\"> *  @param animated 是否以动画的形式消失</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)viewWillDisappear:(<span class=\"built_in\">BOOL</span>)animated&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewWillDisappear:animated];</div><div class=\"line\">    [[<span class=\"built_in\">UIApplication</span> sharedApplication] endReceivingRemoteControlEvents];</div><div class=\"line\">    <span class=\"comment\">//[self resignFirstResponder];</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  初始化UI</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)setupUI&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.title=kMusicTitle;</div><div class=\"line\">    <span class=\"keyword\">self</span>.musicSinger.text=kMusicSinger;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">NSTimer</span> *)timer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_timer) &#123;</div><div class=\"line\">        _timer=[<span class=\"built_in\">NSTimer</span> scheduledTimerWithTimeInterval:<span class=\"number\">0.5</span> target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(updateProgress) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">true</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _timer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  创建播放器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 音频播放器</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">AVAudioPlayer</span> *)audioPlayer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_audioPlayer) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *urlStr=[[<span class=\"built_in\">NSBundle</span> mainBundle]pathForResource:kMusicFile ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error=<span class=\"literal\">nil</span>;</div><div class=\"line\">        <span class=\"comment\">//初始化播放器，注意这里的Url参数只能时文件路径，不支持HTTP Url</span></div><div class=\"line\">        _audioPlayer=[[<span class=\"built_in\">AVAudioPlayer</span> alloc]initWithContentsOfURL:url error:&amp;error];</div><div class=\"line\">        <span class=\"comment\">//设置播放器属性</span></div><div class=\"line\">        _audioPlayer.numberOfLoops=<span class=\"number\">0</span>;<span class=\"comment\">//设置为0不循环</span></div><div class=\"line\">        _audioPlayer.delegate=<span class=\"keyword\">self</span>;</div><div class=\"line\">        [_audioPlayer prepareToPlay];<span class=\"comment\">//加载音频文件到缓存</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"初始化播放器过程发生错误,错误信息:%@\"</span>,error.localizedDescription);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//设置后台播放模式</span></div><div class=\"line\">        <span class=\"built_in\">AVAudioSession</span> *audioSession=[<span class=\"built_in\">AVAudioSession</span> sharedInstance];</div><div class=\"line\">        [audioSession setCategory:<span class=\"built_in\">AVAudioSessionCategoryPlayback</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\"><span class=\"comment\">//        [audioSession setCategory:AVAudioSessionCategoryPlayback withOptions:AVAudioSessionCategoryOptionAllowBluetooth error:nil];</span></div><div class=\"line\">        [audioSession setActive:<span class=\"literal\">YES</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">        <span class=\"comment\">//添加通知，拔出耳机后暂停播放</span></div><div class=\"line\">        [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(routeChange:) name:<span class=\"built_in\">AVAudioSessionRouteChangeNotification</span> object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _audioPlayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  播放音频</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)play&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (![<span class=\"keyword\">self</span>.audioPlayer isPlaying]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.audioPlayer play];</div><div class=\"line\">        <span class=\"keyword\">self</span>.timer.fireDate=[<span class=\"built_in\">NSDate</span> distantPast];<span class=\"comment\">//恢复定时器</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  暂停播放</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)pause&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.audioPlayer isPlaying]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.audioPlayer pause];</div><div class=\"line\">        <span class=\"keyword\">self</span>.timer.fireDate=[<span class=\"built_in\">NSDate</span> distantFuture];<span class=\"comment\">//暂停定时器，注意不能调用invalidate方法，此方法会取消，之后无法恢复</span></div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  点击播放/暂停按钮</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 播放/暂停按钮</div><div class=\"line\"> */</div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)playClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(sender.tag)&#123;</div><div class=\"line\">        sender.tag=<span class=\"number\">0</span>;</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_play_n\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_play_h\"</span>] forState:<span class=\"built_in\">UIControlStateHighlighted</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span> pause];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        sender.tag=<span class=\"number\">1</span>;</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_pause_n\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_pause_h\"</span>] forState:<span class=\"built_in\">UIControlStateHighlighted</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span> play];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  更新播放进度</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)updateProgress&#123;</div><div class=\"line\">    <span class=\"keyword\">float</span> progress= <span class=\"keyword\">self</span>.audioPlayer.currentTime /<span class=\"keyword\">self</span>.audioPlayer.duration;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.playProgress setProgress:progress animated:<span class=\"literal\">true</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  一旦输出改变则执行此方法</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 输出改变通知对象</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)routeChange:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSDictionary</span> *dic=notification.userInfo;</div><div class=\"line\">    <span class=\"keyword\">int</span> changeReason= [dic[<span class=\"built_in\">AVAudioSessionRouteChangeReasonKey</span>] intValue];</div><div class=\"line\">    <span class=\"comment\">//等于AVAudioSessionRouteChangeReasonOldDeviceUnavailable表示旧输出不可用</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (changeReason==<span class=\"built_in\">AVAudioSessionRouteChangeReasonOldDeviceUnavailable</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">AVAudioSessionRouteDescription</span> *routeDescription=dic[<span class=\"built_in\">AVAudioSessionRouteChangePreviousRouteKey</span>];</div><div class=\"line\">        <span class=\"built_in\">AVAudioSessionPortDescription</span> *portDescription= [routeDescription.outputs firstObject];</div><div class=\"line\">        <span class=\"comment\">//原设备为耳机则暂停</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ([portDescription.portType isEqualToString:<span class=\"string\">@\"Headphones\"</span>]) &#123;</div><div class=\"line\">            [<span class=\"keyword\">self</span> pause];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//    [dic enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) &#123;</span></div><div class=\"line\"><span class=\"comment\">//        NSLog(@\"%@:%@\",key,obj);</span></div><div class=\"line\"><span class=\"comment\">//    &#125;];</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc&#123;</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span> name:<span class=\"built_in\">AVAudioSessionRouteChangeNotification</span> object:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 播放器代理方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)audioPlayerDidFinishPlaying:(<span class=\"built_in\">AVAudioPlayer</span> *)player successfully:(<span class=\"built_in\">BOOL</span>)flag&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"音乐播放完成...\"</span>);</div><div class=\"line\">    <span class=\"comment\">//根据实际情况播放完成可以将会话关闭，其他音频应用继续播放</span></div><div class=\"line\">    [[<span class=\"built_in\">AVAudioSession</span> sharedInstance]setActive:<span class=\"literal\">NO</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">在上面的代码中还实现了拔出耳机暂停音乐播放的功能，这也是一个比较常见的功能。在iOS7及以后的版本中可以通过通知获得输出改变的通知，然后拿到通知对象后根据userInfo获得是何种改变类型，进而根据情况对音乐进行暂停操作。</div><div class=\"line\">扩展--播放音乐库中的音乐</div><div class=\"line\">众所周知音乐是iOS的重要组成播放，无论是iPod、iTouch、iPhone还是iPad都可以在iTunes购买音乐或添加本地音乐到音乐库中同步到你的iOS设备。在MediaPlayer.frameowork中有一个<span class=\"built_in\">MPMusicPlayerController</span>用于播放音乐库中的音乐。</div><div class=\"line\">下面先来看一下<span class=\"built_in\">MPMusicPlayerController</span>的常用属性和方法：</div><div class=\"line\">属性\t说明</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">MPMusicPlaybackState</span> playbackState\t播放器状态，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMusicPlaybackStateStopped</span>：停止播放 <span class=\"built_in\">MPMusicPlaybackStatePlaying</span>：正在播放</div><div class=\"line\"><span class=\"built_in\">MPMusicPlaybackStatePaused</span>：暂停播放</div><div class=\"line\"><span class=\"built_in\">MPMusicPlaybackStateInterrupted</span>：播放中断</div><div class=\"line\"><span class=\"built_in\">MPMusicPlaybackStateSeekingForward</span>：向前查找</div><div class=\"line\"><span class=\"built_in\">MPMusicPlaybackStateSeekingBackward</span>：向后查找</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">MPMusicRepeatMode</span> repeatMode\t重复模式，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMusicRepeatModeDefault</span>：默认模式，使用用户的首选项（系统音乐程序设置）</div><div class=\"line\"><span class=\"built_in\">MPMusicRepeatModeNone</span>：不重复</div><div class=\"line\"><span class=\"built_in\">MPMusicRepeatModeOne</span>：单曲循环</div><div class=\"line\"><span class=\"built_in\">MPMusicRepeatModeAll</span>：在当前列表内循环</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">MPMusicShuffleMode</span> shuffleMode\t随机播放模式，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMusicShuffleModeDefault</span>：默认模式，使用用户首选项（系统音乐程序设置）</div><div class=\"line\"><span class=\"built_in\">MPMusicShuffleModeOff</span>：不随机播放</div><div class=\"line\"><span class=\"built_in\">MPMusicShuffleModeSongs</span>：按歌曲随机播放</div><div class=\"line\"><span class=\"built_in\">MPMusicShuffleModeAlbums</span>：按专辑随机播放</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">MPMediaItem</span> *nowPlayingItem\t正在播放的音乐项</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSUInteger</span> indexOfNowPlayingItem\t当前正在播放的音乐在播放队列中的索引</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">BOOL</span> isPreparedToPlay\t是否准好播放准备</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> currentPlaybackTime\t当前已播放时间，单位：秒</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">float</span> currentPlaybackRate\t当前播放速度，是一个播放速度倍率，<span class=\"number\">0</span>表示暂停播放，<span class=\"number\">1</span>代表正常速度</div><div class=\"line\">类方法\t说明</div><div class=\"line\">+ (<span class=\"built_in\">MPMusicPlayerController</span> *)applicationMusicPlayer;\t获取应用播放器，注意此类播放器无法在后台播放</div><div class=\"line\">+ (<span class=\"built_in\">MPMusicPlayerController</span> *)systemMusicPlayer\t获取系统播放器，支持后台播放</div><div class=\"line\">对象方法\t说明</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setQueueWithQuery:(<span class=\"built_in\">MPMediaQuery</span> *)query\t使用媒体队列设置播放源媒体队列</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setQueueWithItemCollection:(<span class=\"built_in\">MPMediaItemCollection</span> *)itemCollection\t使用媒体项集合设置播放源媒体队列</div><div class=\"line\">- (<span class=\"keyword\">void</span>)skipToNextItem\t下一曲</div><div class=\"line\">- (<span class=\"keyword\">void</span>)skipToBeginning\t从起始位置播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)skipToPreviousItem\t上一曲</div><div class=\"line\">- (<span class=\"keyword\">void</span>)beginGeneratingPlaybackNotifications\t开启播放通知，注意不同于其他播放器，<span class=\"built_in\">MPMusicPlayerController</span>要想获得通知必须首先开启，默认情况无法获得通知</div><div class=\"line\">- (<span class=\"keyword\">void</span>)endGeneratingPlaybackNotifications\t关闭播放通知</div><div class=\"line\">- (<span class=\"keyword\">void</span>)prepareToPlay\t做好播放准备（加载音频到缓冲区），在使用play方法播放时如果没有做好准备回自动调用该方法</div><div class=\"line\">- (<span class=\"keyword\">void</span>)play\t开始播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)pause\t暂停播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)stop\t停止播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)beginSeekingForward\t开始向前查找（快进）</div><div class=\"line\">- (<span class=\"keyword\">void</span>)beginSeekingBackward\t开始向后查找（快退）</div><div class=\"line\">- (<span class=\"keyword\">void</span>)endSeeking\t结束查找</div><div class=\"line\">通知\t说明</div><div class=\"line\">（注意：要想获得<span class=\"built_in\">MPMusicPlayerController</span>通知必须首先调用beginGeneratingPlaybackNotifications开启通知）</div><div class=\"line\"><span class=\"built_in\">MPMusicPlayerControllerPlaybackStateDidChangeNotification</span>\t播放状态改变</div><div class=\"line\"><span class=\"built_in\">MPMusicPlayerControllerNowPlayingItemDidChangeNotification</span>\t当前播放音频改变</div><div class=\"line\"><span class=\"built_in\">MPMusicPlayerControllerVolumeDidChangeNotification</span>\t声音大小改变</div><div class=\"line\"><span class=\"built_in\">MPMediaPlaybackIsPreparedToPlayDidChangeNotification</span>\t准备好播放</div><div class=\"line\"><span class=\"built_in\">MPMusicPlayerController</span>有两种播放器：applicationMusicPlayer和systemMusicPlayer，前者在应用退出后音乐播放会自动停止，后者在应用停止后不会退出播放状态。</div><div class=\"line\"><span class=\"built_in\">MPMusicPlayerController</span>加载音乐不同于前面的<span class=\"built_in\">AVAudioPlayer</span>是通过一个文件路径来加载，而是需要一个播放队列。在<span class=\"built_in\">MPMusicPlayerController</span>中提供了两个方法来加载播放队列：- (<span class=\"keyword\">void</span>)setQueueWithQuery:(<span class=\"built_in\">MPMediaQuery</span> *)query和- (<span class=\"keyword\">void</span>)setQueueWithItemCollection:(<span class=\"built_in\">MPMediaItemCollection</span> *)itemCollection，正是由于它的播放音频来源是一个队列，因此<span class=\"built_in\">MPMusicPlayerController</span>支持上一曲、下一曲等操作。</div><div class=\"line\">那么接下来的问题就是如何获取<span class=\"built_in\">MPMediaQueue</span>或者<span class=\"built_in\">MPMediaItemCollection</span>？<span class=\"built_in\">MPMediaQueue</span>对象有一系列的类方法来获得媒体队列：</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)albumsQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)artistsQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)songsQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)playlistsQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)podcastsQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)audiobooksQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)compilationsQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)composersQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)genresQuery;</div><div class=\"line\">有了这些方法，就可以很容易获到歌曲、播放列表、专辑媒体等媒体队列了，这样就可以通过：- (<span class=\"keyword\">void</span>)setQueueWithQuery:(<span class=\"built_in\">MPMediaQuery</span> *)query方法设置音乐来源了。又或者得到<span class=\"built_in\">MPMediaQueue</span>之后创建<span class=\"built_in\">MPMediaItemCollection</span>，使用- (<span class=\"keyword\">void</span>)setQueueWithItemCollection:(<span class=\"built_in\">MPMediaItemCollection</span> *)itemCollection设置音乐来源。</div><div class=\"line\">有时候可能希望用户自己来选择要播放的音乐，这时可以使用<span class=\"built_in\">MPMediaPickerController</span>，它是一个视图控制器，类似于<span class=\"built_in\">UIImagePickerController</span>，选择完播放来源后可以在其代理方法中获得<span class=\"built_in\">MPMediaItemCollection</span>对象。</div><div class=\"line\">无论是通过哪种方式获得<span class=\"built_in\">MPMusicPlayerController</span>的媒体源，可能都希望将每个媒体的信息显示出来，这时候可以通过<span class=\"built_in\">MPMediaItem</span>对象获得。一个<span class=\"built_in\">MPMediaItem</span>代表一个媒体文件，通过它可以访问媒体标题、专辑名称、专辑封面、音乐时长等等。无论是<span class=\"built_in\">MPMediaQueue</span>还是<span class=\"built_in\">MPMediaItemCollection</span>都有一个items属性，它是<span class=\"built_in\">MPMediaItem</span>数组，通过这个属性可以获得<span class=\"built_in\">MPMediaItem</span>对象。</div><div class=\"line\">下面就简单看一下<span class=\"built_in\">MPMusicPlayerController</span>的使用，在下面的例子中简单演示了音乐的选择、播放、暂停、通知、下一曲、上一曲功能，相信有了上面的概念，代码读起来并不复杂（示例中是直接通过<span class=\"built_in\">MPMeidaPicker</span>进行音乐选择的，但是仍然提供了两个方法getLocalMediaQuery和getLocalMediaItemCollection来演示如何直接通过<span class=\"built_in\">MPMediaQueue</span>获得媒体队列或媒体集合）：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  MPMusicPlayerController</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui 14/03/30</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()&lt;<span class=\"title\">MPMediaPickerControllerDelegate</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">MPMediaPickerController</span> *mediaPicker;<span class=\"comment\">//媒体选择控制器</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">MPMusicPlayerController</span> *musicPlayer; <span class=\"comment\">//音乐播放器</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.musicPlayer endGeneratingPlaybackNotifications];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  获得音乐播放器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 音乐播放器</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">MPMusicPlayerController</span> *)musicPlayer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_musicPlayer) &#123;</div><div class=\"line\">        _musicPlayer=[<span class=\"built_in\">MPMusicPlayerController</span> systemMusicPlayer];</div><div class=\"line\">        [_musicPlayer beginGeneratingPlaybackNotifications];<span class=\"comment\">//开启通知，否则监控不到MPMusicPlayerController的通知</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> addNotification];<span class=\"comment\">//添加通知</span></div><div class=\"line\">        <span class=\"comment\">//如果不使用MPMediaPickerController可以使用如下方法获得音乐库媒体队列</span></div><div class=\"line\">        <span class=\"comment\">//[_musicPlayer setQueueWithItemCollection:[self getLocalMediaItemCollection]];</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _musicPlayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  创建媒体选择器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 媒体选择器</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">MPMediaPickerController</span> *)mediaPicker&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_mediaPicker) &#123;</div><div class=\"line\">        <span class=\"comment\">//初始化媒体选择器，这里设置媒体类型为音乐，其实这里也可以选择视频、广播等</span></div><div class=\"line\"><span class=\"comment\">//        _mediaPicker=[[MPMediaPickerController alloc]initWithMediaTypes:MPMediaTypeMusic];</span></div><div class=\"line\">        _mediaPicker=[[<span class=\"built_in\">MPMediaPickerController</span> alloc]initWithMediaTypes:<span class=\"built_in\">MPMediaTypeAny</span>];</div><div class=\"line\">        _mediaPicker.allowsPickingMultipleItems=<span class=\"literal\">YES</span>;<span class=\"comment\">//允许多选</span></div><div class=\"line\"><span class=\"comment\">//        _mediaPicker.showsCloudItems=YES;//显示icloud选项</span></div><div class=\"line\">        _mediaPicker.prompt=<span class=\"string\">@\"请选择要播放的音乐\"</span>;</div><div class=\"line\">        _mediaPicker.delegate=<span class=\"keyword\">self</span>;<span class=\"comment\">//设置选择器代理</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _mediaPicker;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  取得媒体队列</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 媒体队列</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">MPMediaQuery</span> *)getLocalMediaQuery&#123;</div><div class=\"line\">    <span class=\"built_in\">MPMediaQuery</span> *mediaQueue=[<span class=\"built_in\">MPMediaQuery</span> songsQuery];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">MPMediaItem</span> *item <span class=\"keyword\">in</span> mediaQueue.items) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"标题：%@,%@\"</span>,item.title,item.albumTitle);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> mediaQueue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  取得媒体集合</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 媒体集合</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">MPMediaItemCollection</span> *)getLocalMediaItemCollection&#123;</div><div class=\"line\">    <span class=\"built_in\">MPMediaQuery</span> *mediaQueue=[<span class=\"built_in\">MPMediaQuery</span> songsQuery];</div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *array=[<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">MPMediaItem</span> *item <span class=\"keyword\">in</span> mediaQueue.items) &#123;</div><div class=\"line\">        [array addObject:item];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"标题：%@,%@\"</span>,item.title,item.albumTitle);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">MPMediaItemCollection</span> *mediaItemCollection=[[<span class=\"built_in\">MPMediaItemCollection</span> alloc]initWithItems:[array <span class=\"keyword\">copy</span>]];</div><div class=\"line\">    <span class=\"keyword\">return</span> mediaItemCollection;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - MPMediaPickerController代理方法</span></div><div class=\"line\"><span class=\"comment\">//选择完成</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPicker:(<span class=\"built_in\">MPMediaPickerController</span> *)mediaPicker didPickMediaItems:(<span class=\"built_in\">MPMediaItemCollection</span> *)mediaItemCollection&#123;</div><div class=\"line\">    <span class=\"built_in\">MPMediaItem</span> *mediaItem=[mediaItemCollection.items firstObject];<span class=\"comment\">//第一个播放音乐</span></div><div class=\"line\">    <span class=\"comment\">//注意很多音乐信息如标题、专辑、表演者、封面、时长等信息都可以通过MPMediaItem的valueForKey:方法得到,但是从iOS7开始都有对应的属性可以直接访问</span></div><div class=\"line\"><span class=\"comment\">//    NSString *title= [mediaItem valueForKey:MPMediaItemPropertyAlbumTitle];</span></div><div class=\"line\"><span class=\"comment\">//    NSString *artist= [mediaItem valueForKey:MPMediaItemPropertyAlbumArtist];</span></div><div class=\"line\"><span class=\"comment\">//    MPMediaItemArtwork *artwork= [mediaItem valueForKey:MPMediaItemPropertyArtwork];</span></div><div class=\"line\">    <span class=\"comment\">//UIImage *image=[artwork imageWithSize:CGSizeMake(100, 100)];//专辑图片</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"标题：%@,表演者：%@,专辑：%@\"</span>,mediaItem.title ,mediaItem.artist,mediaItem.albumTitle);</div><div class=\"line\">    [<span class=\"keyword\">self</span>.musicPlayer setQueueWithItemCollection:mediaItemCollection];</div><div class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//取消选择</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPickerDidCancel:(<span class=\"built_in\">MPMediaPickerController</span> *)mediaPicker&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 通知</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  添加通知</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)addNotification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSNotificationCenter</span> *notificationCenter=[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(playbackStateChange:) name:<span class=\"built_in\">MPMusicPlayerControllerPlaybackStateDidChangeNotification</span> object:<span class=\"keyword\">self</span>.musicPlayer];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  播放状态改变通知</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)playbackStateChange:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">self</span>.musicPlayer.playbackState) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMusicPlaybackStatePlaying</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"正在播放...\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMusicPlaybackStatePaused</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放暂停.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMusicPlaybackStateStopped</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放停止.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - UI事件</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)selectClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> presentViewController:<span class=\"keyword\">self</span>.mediaPicker animated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)playClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.musicPlayer play];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)puaseClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.musicPlayer pause];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)stopClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.musicPlayer stop];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)nextClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.musicPlayer skipToNextItem];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)prevClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.musicPlayer skipToPreviousItem];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">录音</div><div class=\"line\">除了上面说的，在<span class=\"built_in\">AVFoundation</span>框架中还要一个<span class=\"built_in\">AVAudioRecorder</span>类专门处理录音操作，它同样支持多种音频格式。与<span class=\"built_in\">AVAudioPlayer</span>类似，你完全可以将它看成是一个录音机控制类，下面是常用的属性和方法：</div><div class=\"line\">属性\t说明</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isRecording) <span class=\"built_in\">BOOL</span> recording;\t是否正在录音，只读</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSURL</span> *url\t录音文件地址，只读</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSDictionary</span> *settings\t录音文件设置，只读</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSTimeInterval</span> currentTime\t录音时长，只读，注意仅仅在录音状态可用</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSTimeInterval</span> deviceCurrentTime\t输入设置的时间长度，只读，注意此属性一直可访问</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">getter</span>=isMeteringEnabled) <span class=\"built_in\">BOOL</span> meteringEnabled;\t是否启用录音测量，如果启用录音测量可以获得录音分贝等数据信息</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSArray</span> *channelAssignments\t当前录音的通道</div><div class=\"line\">对象方法\t说明</div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithURL:(<span class=\"built_in\">NSURL</span> *)url settings:(<span class=\"built_in\">NSDictionary</span> *)settings error:(<span class=\"built_in\">NSError</span> **)outError\t录音机对象初始化方法，注意其中的url必须是本地文件url，settings是录音格式、编码等设置</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)prepareToRecord\t准备录音，主要用于创建缓冲区，如果不手动调用，在调用record录音时也会自动调用</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)record\t开始录音</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)recordAtTime:(<span class=\"built_in\">NSTimeInterval</span>)time\t在指定的时间开始录音，一般用于录音暂停再恢复录音</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)recordForDuration:(<span class=\"built_in\">NSTimeInterval</span>) duration\t按指定的时长开始录音</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)recordAtTime:(<span class=\"built_in\">NSTimeInterval</span>)time forDuration:(<span class=\"built_in\">NSTimeInterval</span>) duration\t在指定的时间开始录音，并指定录音时长</div><div class=\"line\">- (<span class=\"keyword\">void</span>)pause;\t暂停录音</div><div class=\"line\">- (<span class=\"keyword\">void</span>)stop;\t停止录音</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)deleteRecording;\t删除录音，注意要删除录音此时录音机必须处于停止状态</div><div class=\"line\">- (<span class=\"keyword\">void</span>)updateMeters;\t更新测量数据，注意只有meteringEnabled为<span class=\"literal\">YES</span>此方法才可用</div><div class=\"line\">- (<span class=\"keyword\">float</span>)peakPowerForChannel:(<span class=\"built_in\">NSUInteger</span>)channelNumber;\t指定通道的测量峰值，注意只有调用完updateMeters才有值</div><div class=\"line\">- (<span class=\"keyword\">float</span>)averagePowerForChannel:(<span class=\"built_in\">NSUInteger</span>)channelNumber\t指定通道的测量平均值，注意只有调用完updateMeters才有值</div><div class=\"line\">代理方法\t说明</div><div class=\"line\">- (<span class=\"keyword\">void</span>)audioRecorderDidFinishRecording:(<span class=\"built_in\">AVAudioRecorder</span> *)recorder successfully:(<span class=\"built_in\">BOOL</span>)flag\t完成录音</div><div class=\"line\">- (<span class=\"keyword\">void</span>)audioRecorderEncodeErrorDidOccur:(<span class=\"built_in\">AVAudioRecorder</span> *)recorder error:(<span class=\"built_in\">NSError</span> *)error\t录音编码发生错误</div><div class=\"line\"><span class=\"built_in\">AVAudioRecorder</span>很多属性和方法跟<span class=\"built_in\">AVAudioPlayer</span>都是类似的,但是它的创建有所不同，在创建录音机时除了指定路径外还必须指定录音设置信息，因为录音机必须知道录音文件的格式、采样率、通道数、每个采样点的位数等信息，但是也并不是所有的信息都必须设置，通常只需要几个常用设置。关于录音设置详见帮助文档中的“AV Foundation Audio Settings Constants”。</div><div class=\"line\">下面就使用<span class=\"built_in\">AVAudioRecorder</span>创建一个录音机，实现了录音、暂停、停止、播放等功能，实现效果大致如下：</div><div class=\"line\"><span class=\"built_in\">AVAudioRecorderSnapshot</span></div><div class=\"line\">在这个示例中将实行一个完整的录音控制，包括录音、暂停、恢复、停止，同时还会实时展示用户录音的声音波动，当用户点击完停止按钮还会自动播放录音文件。程序的构建主要分为以下几步：</div><div class=\"line\">设置音频会话类型为<span class=\"built_in\">AVAudioSessionCategoryPlayAndRecord</span>，因为程序中牵扯到录音和播放操作。</div><div class=\"line\">创建录音机<span class=\"built_in\">AVAudioRecorder</span>，指定录音保存的路径并且设置录音属性，注意对于一般的录音文件要求的采样率、位数并不高，需要适当设置以保证录音文件的大小和效果。</div><div class=\"line\">设置录音机代理以便在录音完成后播放录音，打开录音测量保证能够实时获得录音时的声音强度。（注意声音强度范围<span class=\"number\">-160</span>到<span class=\"number\">0</span>,<span class=\"number\">0</span>代表最大输入）</div><div class=\"line\">创建音频播放器<span class=\"built_in\">AVAudioPlayer</span>，用于在录音完成之后播放录音。</div><div class=\"line\">创建一个定时器以便实时刷新录音测量值并更新录音强度到<span class=\"built_in\">UIProgressView</span>中显示。</div><div class=\"line\">添加录音、暂停、恢复、停止操作，需要注意录音的恢复操作其实是有音频会话管理的，恢复时只要再次调用record方法即可，无需手动管理恢复时间等。</div><div class=\"line\">下面是主要代码：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  AVAudioRecorder</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#define kRecordAudioFile @<span class=\"meta-string\">\"myRecord.caf\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()&lt;<span class=\"title\">AVAudioRecorderDelegate</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">AVAudioRecorder</span> *audioRecorder;<span class=\"comment\">//音频录音机</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">AVAudioPlayer</span> *audioPlayer;<span class=\"comment\">//音频播放器，用于播放录音文件</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">NSTimer</span> *timer;<span class=\"comment\">//录音声波监控（注意这里暂时不对播放进行监控）</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *record;<span class=\"comment\">//开始录音</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *pause;<span class=\"comment\">//暂停录音</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *resume;<span class=\"comment\">//恢复录音</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *stop;<span class=\"comment\">//停止录音</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIProgressView</span> *audioPower;<span class=\"comment\">//音频波动</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器视图方法</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> setAudioSession];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  设置音频会话</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)setAudioSession&#123;</div><div class=\"line\">    <span class=\"built_in\">AVAudioSession</span> *audioSession=[<span class=\"built_in\">AVAudioSession</span> sharedInstance];</div><div class=\"line\">    <span class=\"comment\">//设置为播放和录音状态，以便可以在录制完之后播放录音</span></div><div class=\"line\">    [audioSession setCategory:<span class=\"built_in\">AVAudioSessionCategoryPlayAndRecord</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">    [audioSession setActive:<span class=\"literal\">YES</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  取得录音文件保存路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 录音文件路径</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getSavePath&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=[<span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>) lastObject];</div><div class=\"line\">    urlStr=[urlStr stringByAppendingPathComponent:kRecordAudioFile];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"file path:%@\"</span>,urlStr);</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  取得录音文件设置</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 录音设置</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">NSDictionary</span> *)getAudioSetting&#123;</div><div class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *dicM=[<span class=\"built_in\">NSMutableDictionary</span> dictionary];</div><div class=\"line\">    <span class=\"comment\">//设置录音格式</span></div><div class=\"line\">    [dicM setObject:@(kAudioFormatLinearPCM) forKey:<span class=\"built_in\">AVFormatIDKey</span>];</div><div class=\"line\">    <span class=\"comment\">//设置录音采样率，8000是电话采样率，对于一般录音已经够了</span></div><div class=\"line\">    [dicM setObject:@(<span class=\"number\">8000</span>) forKey:<span class=\"built_in\">AVSampleRateKey</span>];</div><div class=\"line\">    <span class=\"comment\">//设置通道,这里采用单声道</span></div><div class=\"line\">    [dicM setObject:@(<span class=\"number\">1</span>) forKey:<span class=\"built_in\">AVNumberOfChannelsKey</span>];</div><div class=\"line\">    <span class=\"comment\">//每个采样点位数,分为8、16、24、32</span></div><div class=\"line\">    [dicM setObject:@(<span class=\"number\">8</span>) forKey:<span class=\"built_in\">AVLinearPCMBitDepthKey</span>];</div><div class=\"line\">    <span class=\"comment\">//是否使用浮点数采样</span></div><div class=\"line\">    [dicM setObject:@(<span class=\"literal\">YES</span>) forKey:<span class=\"built_in\">AVLinearPCMIsFloatKey</span>];</div><div class=\"line\">    <span class=\"comment\">//....其他设置等</span></div><div class=\"line\">    <span class=\"keyword\">return</span> dicM;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  获得录音机对象</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 录音机对象</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">AVAudioRecorder</span> *)audioRecorder&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_audioRecorder) &#123;</div><div class=\"line\">        <span class=\"comment\">//创建录音文件保存路径</span></div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"keyword\">self</span> getSavePath];</div><div class=\"line\">        <span class=\"comment\">//创建录音格式设置</span></div><div class=\"line\">        <span class=\"built_in\">NSDictionary</span> *setting=[<span class=\"keyword\">self</span> getAudioSetting];</div><div class=\"line\">        <span class=\"comment\">//创建录音机</span></div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error=<span class=\"literal\">nil</span>;</div><div class=\"line\">        _audioRecorder=[[<span class=\"built_in\">AVAudioRecorder</span> alloc]initWithURL:url settings:setting error:&amp;error];</div><div class=\"line\">        _audioRecorder.delegate=<span class=\"keyword\">self</span>;</div><div class=\"line\">        _audioRecorder.meteringEnabled=<span class=\"literal\">YES</span>;<span class=\"comment\">//如果要监控声波则必须设置为YES</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"创建录音机对象时发生错误，错误信息：%@\"</span>,error.localizedDescription);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _audioRecorder;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  创建播放器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 播放器</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">AVAudioPlayer</span> *)audioPlayer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_audioPlayer) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"keyword\">self</span> getSavePath];</div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error=<span class=\"literal\">nil</span>;</div><div class=\"line\">        _audioPlayer=[[<span class=\"built_in\">AVAudioPlayer</span> alloc]initWithContentsOfURL:url error:&amp;error];</div><div class=\"line\">        _audioPlayer.numberOfLoops=<span class=\"number\">0</span>;</div><div class=\"line\">        [_audioPlayer prepareToPlay];</div><div class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"创建播放器过程中发生错误，错误信息：%@\"</span>,error.localizedDescription);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _audioPlayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  录音声波监控定制器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 定时器</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">NSTimer</span> *)timer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_timer) &#123;</div><div class=\"line\">        _timer=[<span class=\"built_in\">NSTimer</span> scheduledTimerWithTimeInterval:<span class=\"number\">0.1</span>f target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(audioPowerChange) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">YES</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _timer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  录音声波状态设置</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)audioPowerChange&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.audioRecorder updateMeters];<span class=\"comment\">//更新测量值</span></div><div class=\"line\">    <span class=\"keyword\">float</span> power= [<span class=\"keyword\">self</span>.audioRecorder averagePowerForChannel:<span class=\"number\">0</span>];<span class=\"comment\">//取得第一个通道的音频，注意音频强度范围时-160到0</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> progress=(<span class=\"number\">1.0</span>/<span class=\"number\">160.0</span>)*(power+<span class=\"number\">160.0</span>);</div><div class=\"line\">    [<span class=\"keyword\">self</span>.audioPower setProgress:progress];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark - UI事件</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  点击录音按钮</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 录音按钮</div><div class=\"line\"> */</div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)recordClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (![<span class=\"keyword\">self</span>.audioRecorder isRecording]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.audioRecorder record];<span class=\"comment\">//首次使用应用时如果调用record方法会询问用户是否允许使用麦克风</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.timer.fireDate=[<span class=\"built_in\">NSDate</span> distantPast];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  点击暂定按钮</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 暂停按钮</div><div class=\"line\"> */</div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)pauseClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.audioRecorder isRecording]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.audioRecorder pause];</div><div class=\"line\">        <span class=\"keyword\">self</span>.timer.fireDate=[<span class=\"built_in\">NSDate</span> distantFuture];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  点击恢复按钮</div><div class=\"line\"> *  恢复录音只需要再次调用record，AVAudioSession会帮助你记录上次录音位置并追加录音</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 恢复按钮</div><div class=\"line\"> */</div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)resumeClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> recordClick:sender];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  点击停止按钮</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 停止按钮</div><div class=\"line\"> */</div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)stopClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.audioRecorder stop];</div><div class=\"line\">    <span class=\"keyword\">self</span>.timer.fireDate=[<span class=\"built_in\">NSDate</span> distantFuture];</div><div class=\"line\">    <span class=\"keyword\">self</span>.audioPower.progress=<span class=\"number\">0.0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 录音机代理方法</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  录音完成，录音完成后播放录音</div><div class=\"line\"> *</div><div class=\"line\"> *  @param recorder 录音机对象</div><div class=\"line\"> *  @param flag     是否成功</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)audioRecorderDidFinishRecording:(<span class=\"built_in\">AVAudioRecorder</span> *)recorder successfully:(<span class=\"built_in\">BOOL</span>)flag&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (![<span class=\"keyword\">self</span>.audioPlayer isPlaying]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.audioPlayer play];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"录音完成!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">运行效果：</div><div class=\"line\"><span class=\"built_in\">AVAudioRecorder</span></div><div class=\"line\">音频队列服务</div><div class=\"line\">大家应该已经注意到了，无论是前面的录音还是音频播放均不支持网络流媒体播放，当然对于录音来说这种需求可能不大，但是对于音频播放来说有时候就很有必要了。<span class=\"built_in\">AVAudioPlayer</span>只能播放本地文件，并且是一次性加载所以音频数据，初始化<span class=\"built_in\">AVAudioPlayer</span>时指定的URL也只能是File URL而不能是HTTP URL。当然，将音频文件下载到本地然后再调用<span class=\"built_in\">AVAudioPlayer</span>来播放也是一种播放网络音频的办法，但是这种方式最大的弊端就是必须等到整个音频播放完成才能播放，而不能使用流式播放，这往往在实际开发中是不切实际的。那么在iOS中如何播放网络流媒体呢？就是使用AudioToolbox框架中的音频队列服务Audio Queue Services。</div><div class=\"line\">使用音频队列服务完全可以做到音频播放和录制，首先看一下录音音频服务队列：</div><div class=\"line\">recording_architecture_2x</div><div class=\"line\">一个音频服务队列Audio Queue有三部分组成：</div><div class=\"line\">三个缓冲器Buffers:每个缓冲器都是一个存储音频数据的临时仓库。</div><div class=\"line\">一个缓冲队列Buffer Queue:一个包含音频缓冲器的有序队列。</div><div class=\"line\">一个回调Callback:一个自定义的队列回调函数。</div><div class=\"line\">声音通过输入设备进入缓冲队列中，首先填充第一个缓冲器；当第一个缓冲器填充满之后自动填充下一个缓冲器，同时会调用回调函数；在回调函数中需要将缓冲器中的音频数据写入磁盘，同时将缓冲器放回到缓冲队列中以便重用。下面是Apple官方关于音频队列服务的流程示意图：</div><div class=\"line\">recording_callback_function_2x</div><div class=\"line\">类似的，看一下音频播放缓冲队列，其组成部分和录音缓冲队列类似。</div><div class=\"line\">playback_architecture_2x</div><div class=\"line\">但是在音频播放缓冲队列中，回调函数调用的时机不同于音频录制缓冲队列，流程刚好相反。将音频读取到缓冲器中，一旦一个缓冲器填充满之后就放到缓冲队列中，然后继续填充其他缓冲器；当开始播放时，则从第一个缓冲器中读取音频进行播放；一旦播放完之后就会触发回调函数，开始播放下一个缓冲器中的音频，同时填充第一个缓冲器放；填充满之后再次放回到缓冲队列。下面是详细的流程：</div><div class=\"line\">playback_callback_function_2x</div><div class=\"line\">当然，要明白音频队列服务的原理并不难，问题是如何实现这个自定义的回调函数，这其中我们有大量的工作要做，控制播放状态、处理异常中断、进行音频编码等等。由于牵扯内容过多，而且不是本文目的，如果以后有时间将另开一篇文章重点介绍，目前有很多第三方优秀框架可以直接使用，例如AudioStreamer、FreeStreamer。由于前者当前只有非ARC版本，所以下面不妨使用FreeStreamer来简单演示在线音频播放的过程，当然在使用之前要做如下准备工作：</div><div class=\"line\"><span class=\"number\">1.</span>拷贝FreeStreamer中的Reachability.h、Reachability.m和Common、astreamer两个文件夹中的内容到项目中。</div><div class=\"line\"><span class=\"number\">2.</span>添加FreeStreamer使用的类库：<span class=\"built_in\">CFNetwork</span>.framework、AudioToolbox.framework、<span class=\"built_in\">AVFoundation</span>.framework</div><div class=\"line\">、libxml2.dylib、MediaPlayer.framework。</div><div class=\"line\"><span class=\"number\">3.</span>如果引用libxml2.dylib编译不通过，需要在Xcode的Targets-Build Settings-Header Build Path中添加$(SDKROOT)/usr/include/libxml2。</div><div class=\"line\"><span class=\"number\">4.</span>将FreeStreamer中的FreeStreamerMobile-Prefix.pch文件添加到项目中并将Targets-Build Settings-Precompile Prefix Header设置为<span class=\"literal\">YES</span>，在Targets-Build Settings-Prefix Header设置为$(SRCROOT)/项目名称/FreeStreamerMobile-Prefix.pch（因为Xcode6默认没有pch文件）</div><div class=\"line\">然后就可以编写代码播放网络音频了：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  AudioQueueServices</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//  使用FreeStreamer实现网络音频播放</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"FSAudioStream.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) FSAudioStream *audioStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">    [<span class=\"keyword\">self</span>.audioStream play];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  取得本地文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getFileUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=[[<span class=\"built_in\">NSBundle</span> mainBundle]pathForResource:<span class=\"string\">@\"刘若英 - 原来你也在这里.mp3\"</span> ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getNetworkUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=<span class=\"string\">@\"http://192.168.1.102/liu.mp3\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> URLWithString:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  创建FSAudioStream对象</div><div class=\"line\"> *</div><div class=\"line\"> *  @return FSAudioStream对象</div><div class=\"line\"> */</div><div class=\"line\">-(FSAudioStream *)audioStream&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_audioStream) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"keyword\">self</span> getNetworkUrl];</div><div class=\"line\">        <span class=\"comment\">//创建FSAudioStream对象</span></div><div class=\"line\">        _audioStream=[[FSAudioStream alloc]initWithUrl:url];</div><div class=\"line\">        _audioStream.onFailure=^(FSAudioStreamError error,<span class=\"built_in\">NSString</span> *description)&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放过程中发生错误，错误信息：%@\"</span>,description);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        _audioStream.onCompletion=^()&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放完成!\"</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        [_audioStream setVolume:<span class=\"number\">0.5</span>];<span class=\"comment\">//设置声音</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _audioStream;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">其实FreeStreamer的功能很强大，不仅仅是播放本地、网络音频那么简单，它还支持播放列表、检查包内容、RSS订阅、播放中断等很多强大的功能，甚至还包含了一个音频分析器，有兴趣的朋友可以访问官网查看详细用法</div><div class=\"line\">视频</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerController</span></div><div class=\"line\">在iOS中播放视频可以使用MediaPlayer.framework种的<span class=\"built_in\">MPMoviePlayerController</span>类来完成，它支持本地视频和网络视频播放。这个类实现了<span class=\"built_in\">MPMediaPlayback</span>协议，因此具备一般的播放器控制功能，例如播放、暂停、停止等。但是<span class=\"built_in\">MPMediaPlayerController</span>自身并不是一个完整的视图控制器，如果要在UI中展示视频需要将view属性添加到界面中。下面列出了<span class=\"built_in\">MPMoviePlayerController</span>的常用属性和方法：</div><div class=\"line\">属性\t说明</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSURL</span> *contentURL\t播放媒体URL，这个URL可以是本地路径，也可以是网络路径</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UIView</span> *view\t播放器视图，如果要显示视频必须将此视图添加到控制器视图中</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UIView</span> *backgroundView\t播放器背景视图</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">MPMoviePlaybackState</span> playbackState\t媒体播放状态，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMoviePlaybackStateStopped</span>：停止播放</div><div class=\"line\"><span class=\"built_in\">MPMoviePlaybackStatePlaying</span>：正在播放</div><div class=\"line\"><span class=\"built_in\">MPMoviePlaybackStatePaused</span>：暂停</div><div class=\"line\"><span class=\"built_in\">MPMoviePlaybackStateInterrupted</span>：中断</div><div class=\"line\"><span class=\"built_in\">MPMoviePlaybackStateSeekingForward</span>：向前定位</div><div class=\"line\"><span class=\"built_in\">MPMoviePlaybackStateSeekingBackward</span>：向后定位</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">MPMovieLoadState</span> loadState\t网络媒体加载状态，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMovieLoadStateUnknown</span>：位置类型</div><div class=\"line\"><span class=\"built_in\">MPMovieLoadStatePlayable</span>：</div><div class=\"line\"><span class=\"built_in\">MPMovieLoadStatePlaythroughOK</span>：这种状态如果shouldAutoPlay为<span class=\"literal\">YES</span>将自动播放</div><div class=\"line\"><span class=\"built_in\">MPMovieLoadStateStalled</span>：停滞状态</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">MPMovieControlStyle</span> controlStyle\t控制面板风格，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMovieControlStyleNone</span>：无控制面板 </div><div class=\"line\"><span class=\"built_in\">MPMovieControlStyleEmbedded</span>：嵌入视频风格 </div><div class=\"line\"><span class=\"built_in\">MPMovieControlStyleFullscreen</span>：全屏 </div><div class=\"line\"><span class=\"built_in\">MPMovieControlStyleDefault</span>：默认风格</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">MPMovieRepeatMode</span> repeatMode;\t重复播放模式，枚举类型:</div><div class=\"line\"><span class=\"built_in\">MPMovieRepeatModeNone</span>:不重复，默认值</div><div class=\"line\"><span class=\"built_in\">MPMovieRepeatModeOne</span>:重复播放</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">BOOL</span> shouldAutoplay\t当网络媒体缓存到一定数据时是否自动播放，默认为<span class=\"literal\">YES</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">getter</span>=isFullscreen) <span class=\"built_in\">BOOL</span> fullscreen\t是否全屏展示，默认为<span class=\"literal\">NO</span>，注意如果要通过此属性设置全屏必须在视图显示完成后设置，否则无效</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">MPMovieScalingMode</span> scalingMode\t视频缩放填充模式，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMovieScalingModeNone</span>：不进行任何缩放</div><div class=\"line\"><span class=\"built_in\">MPMovieScalingModeAspectFit</span>：固定缩放比例并且尽量全部展示视频，不会裁切视频</div><div class=\"line\"><span class=\"built_in\">MPMovieScalingModeAspectFill</span>：固定缩放比例并填充满整个视图展示，可能会裁切视频</div><div class=\"line\"><span class=\"built_in\">MPMovieScalingModeFill</span>：不固定缩放比例压缩填充整个视图，视频不会被裁切但是比例失衡</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">BOOL</span> readyForDisplay\t是否有相关媒体被播放</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">MPMovieMediaTypeMask</span> movieMediaTypes\t媒体类别，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMovieMediaTypeMaskNone</span>：未知类型</div><div class=\"line\"><span class=\"built_in\">MPMovieMediaTypeMaskVideo</span>：视频</div><div class=\"line\"><span class=\"built_in\">MPMovieMediaTypeMaskAudio</span>：音频</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">MPMovieSourceType</span> movieSourceType\t媒体源，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMovieSourceTypeUnknown</span>：未知来源</div><div class=\"line\"><span class=\"built_in\">MPMovieSourceTypeFile</span>：本地文件</div><div class=\"line\"><span class=\"built_in\">MPMovieSourceTypeStreaming</span>：流媒体（直播或点播）</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSTimeInterval</span> duration\t媒体时长，如果未知则返回<span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSTimeInterval</span> playableDuration\t媒体可播放时长，主要用于表示网络媒体已下载视频时长</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">CGSize</span> naturalSize\t视频实际尺寸，如果未知则返回<span class=\"built_in\">CGSizeZero</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> initialPlaybackTime\t起始播放时间</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> endPlaybackTime\t终止播放时间</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">BOOL</span> allowsAirPlay\t是否允许无线播放，默认为<span class=\"literal\">YES</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isAirPlayVideoActive) <span class=\"built_in\">BOOL</span> airPlayVideoActive\t当前媒体是否正在通过AirPlay播放</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">BOOL</span> isPreparedToPlay\t是否准备好播放</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> currentPlaybackTime\t当前播放时间，单位：秒</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">float</span> currentPlaybackRate\t当前播放速度，如果暂停则为<span class=\"number\">0</span>，正常速度为<span class=\"number\">1.0</span>，非<span class=\"number\">0</span>数据表示倍率</div><div class=\"line\">对象方法\t说明</div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithContentURL:(<span class=\"built_in\">NSURL</span> *)url\t使用指定的URL初始化媒体播放控制器对象</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setFullscreen:(<span class=\"built_in\">BOOL</span>)fullscreen animated:(<span class=\"built_in\">BOOL</span>)animated\t设置视频全屏，注意如果要通过此方法设置全屏则必须在其视图显示之后设置，否则无效</div><div class=\"line\">- (<span class=\"keyword\">void</span>)requestThumbnailImagesAtTimes:(<span class=\"built_in\">NSArray</span> *)playbackTimes timeOption:(<span class=\"built_in\">MPMovieTimeOption</span>)option\t获取在指定播放时间的视频缩略图，第一个参数是获取缩略图的时间点数组；第二个参数代表时间点精度，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMovieTimeOptionNearestKeyFrame</span>：时间点附近</div><div class=\"line\"><span class=\"built_in\">MPMovieTimeOptionExact</span>：准确时间</div><div class=\"line\">- (<span class=\"keyword\">void</span>)cancelAllThumbnailImageRequests\t取消所有缩略图获取请求</div><div class=\"line\">- (<span class=\"keyword\">void</span>)prepareToPlay\t准备播放，加载视频数据到缓存，当调用play方法时如果没有准备好会自动调用此方法</div><div class=\"line\">- (<span class=\"keyword\">void</span>)play\t开始播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)pause\t暂停播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)stop\t停止播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)beginSeekingForward\t向前定位</div><div class=\"line\">- (<span class=\"keyword\">void</span>)beginSeekingBackward\t向后定位</div><div class=\"line\">- (<span class=\"keyword\">void</span>)endSeeking\t停止快进/快退</div><div class=\"line\">通知\t说明</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerScalingModeDidChangeNotification</span>\t视频缩放填充模式发生改变</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span>\t媒体播放完成或用户手动退出，具体完成原因可以通过通知userInfo中的key为<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishReasonUserInfoKey</span>的对象获取</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerPlaybackStateDidChangeNotification</span>\t播放状态改变，可配合playbakcState属性获取具体状态</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerLoadStateDidChangeNotification</span>\t媒体网络加载状态改变</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerNowPlayingMovieDidChangeNotification</span>\t当前播放的媒体内容发生改变</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerWillEnterFullscreenNotification</span>\t将要进入全屏</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerDidEnterFullscreenNotification</span>\t进入全屏后</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerWillExitFullscreenNotification</span>\t将要退出全屏</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerDidExitFullscreenNotification</span>\t退出全屏后</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerIsAirPlayVideoActiveDidChangeNotification</span>\t当媒体开始通过AirPlay播放或者结束AirPlay播放</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerReadyForDisplayDidChangeNotification</span>\t视频显示状态改变</div><div class=\"line\"><span class=\"built_in\">MPMovieMediaTypesAvailableNotification</span>\t确定了媒体可用类型后</div><div class=\"line\"><span class=\"built_in\">MPMovieSourceTypeAvailableNotification</span>\t确定了媒体来源后</div><div class=\"line\"><span class=\"built_in\">MPMovieDurationAvailableNotification</span>\t确定了媒体播放时长后</div><div class=\"line\"><span class=\"built_in\">MPMovieNaturalSizeAvailableNotification</span>\t确定了媒体的实际尺寸后</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerThumbnailImageRequestDidFinishNotification</span>\t缩略图请求完成之后</div><div class=\"line\"><span class=\"built_in\">MPMediaPlaybackIsPreparedToPlayDidChangeNotification</span>\t做好播放准备后</div><div class=\"line\">注意<span class=\"built_in\">MPMediaPlayerController</span>的状态等信息并不是通过代理来和外界交互的，而是通过通知中心，因此从上面的列表中可以看到常用的一些通知。由于<span class=\"built_in\">MPMoviePlayerController</span>本身对于媒体播放做了深度的封装，使用起来就相当简单：创建<span class=\"built_in\">MPMoviePlayerController</span>对象，设置frame属性，将<span class=\"built_in\">MPMoviePlayerController</span>的view添加到控制器视图中。下面的示例中将创建一个播放控制器并添加播放状态改变及播放完成的通知：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  MPMoviePlayerController</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">MPMoviePlayerController</span> *moviePlayer;<span class=\"comment\">//视频播放控制器</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器视图方法</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//播放</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.moviePlayer play];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//添加通知</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> addNotification];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc&#123;</div><div class=\"line\">    <span class=\"comment\">//移除所有通知监控</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  取得本地文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getFileUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=[[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"The New Look of OS X Yosemite.mp4\"</span> ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  取得网络文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getNetworkUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=<span class=\"string\">@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\"</span>;</div><div class=\"line\">    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> URLWithString:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  创建媒体播放控制器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 媒体播放控制器</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">MPMoviePlayerController</span> *)moviePlayer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_moviePlayer) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"keyword\">self</span> getNetworkUrl];</div><div class=\"line\">        _moviePlayer=[[<span class=\"built_in\">MPMoviePlayerController</span> alloc]initWithContentURL:url];</div><div class=\"line\">        _moviePlayer.view.frame=<span class=\"keyword\">self</span>.view.bounds;</div><div class=\"line\">        _moviePlayer.view.autoresizingMask=<span class=\"built_in\">UIViewAutoresizingFlexibleWidth</span>|<span class=\"built_in\">UIViewAutoresizingFlexibleHeight</span>;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.view addSubview:_moviePlayer.view];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _moviePlayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  添加通知监控媒体播放控制器状态</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)addNotification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSNotificationCenter</span> *notificationCenter=[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(mediaPlayerPlaybackStateChange:) name:<span class=\"built_in\">MPMoviePlayerPlaybackStateDidChangeNotification</span> object:<span class=\"keyword\">self</span>.moviePlayer];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(mediaPlayerPlaybackFinished:) name:<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span> object:<span class=\"keyword\">self</span>.moviePlayer];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  播放状态改变，注意播放完成时的状态是暂停</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPlayerPlaybackStateChange:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">self</span>.moviePlayer.playbackState) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStatePlaying</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"正在播放...\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStatePaused</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"暂停播放.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStateStopped</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"停止播放.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放状态:%li\"</span>,<span class=\"keyword\">self</span>.moviePlayer.playbackState);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  播放完成</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPlayerPlaybackFinished:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放完成.%li\"</span>,<span class=\"keyword\">self</span>.moviePlayer.playbackState);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">运行效果：</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerController</span></div><div class=\"line\">从上面的API大家也不难看出其实<span class=\"built_in\">MPMoviePlayerController</span>功能相当强大，日常开发中作为一般的媒体播放器也完全没有问题。<span class=\"built_in\">MPMoviePlayerController</span>除了一般的视频播放和控制外还有一些强大的功能，例如截取视频缩略图。请求视频缩略图时只要调用- (<span class=\"keyword\">void</span>)requestThumbnailImagesAtTimes:(<span class=\"built_in\">NSArray</span> *)playbackTimes timeOption:(<span class=\"built_in\">MPMovieTimeOption</span>)option方法指定获得缩略图的时间点，然后监控<span class=\"built_in\">MPMoviePlayerThumbnailImageRequestDidFinishNotification</span>通知，每个时间点的缩略图请求完成就会调用通知，在通知调用方法中可以通过<span class=\"built_in\">MPMoviePlayerThumbnailImageKey</span>获得<span class=\"built_in\">UIImage</span>对象处理即可。例如下面的程序演示了在程序启动后获得两个时间点的缩略图的过程，截图成功后保存到相册：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  MPMoviePlayerController</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//  视频截图</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">MPMoviePlayerController</span> *moviePlayer;<span class=\"comment\">//视频播放控制器</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器视图方法</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//播放</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.moviePlayer play];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//添加通知</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> addNotification];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//获取缩略图</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> thumbnailImageRequest];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc&#123;</div><div class=\"line\">    <span class=\"comment\">//移除所有通知监控</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  取得本地文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getFileUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=[[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"The New Look of OS X Yosemite.mp4\"</span> ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  取得网络文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getNetworkUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=<span class=\"string\">@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\"</span>;</div><div class=\"line\">    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> URLWithString:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  创建媒体播放控制器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 媒体播放控制器</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">MPMoviePlayerController</span> *)moviePlayer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_moviePlayer) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"keyword\">self</span> getNetworkUrl];</div><div class=\"line\">        _moviePlayer=[[<span class=\"built_in\">MPMoviePlayerController</span> alloc]initWithContentURL:url];</div><div class=\"line\">        _moviePlayer.view.frame=<span class=\"keyword\">self</span>.view.bounds;</div><div class=\"line\">        _moviePlayer.view.autoresizingMask=<span class=\"built_in\">UIViewAutoresizingFlexibleWidth</span>|<span class=\"built_in\">UIViewAutoresizingFlexibleHeight</span>;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.view addSubview:_moviePlayer.view];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _moviePlayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  获取视频缩略图</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)thumbnailImageRequest&#123;</div><div class=\"line\">    <span class=\"comment\">//获取13.0s、21.5s的缩略图</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.moviePlayer requestThumbnailImagesAtTimes:@[@<span class=\"number\">13.0</span>,@<span class=\"number\">21.5</span>] timeOption:<span class=\"built_in\">MPMovieTimeOptionNearestKeyFrame</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器通知</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  添加通知监控媒体播放控制器状态</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)addNotification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSNotificationCenter</span> *notificationCenter=[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(mediaPlayerPlaybackStateChange:) name:<span class=\"built_in\">MPMoviePlayerPlaybackStateDidChangeNotification</span> object:<span class=\"keyword\">self</span>.moviePlayer];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(mediaPlayerPlaybackFinished:) name:<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span> object:<span class=\"keyword\">self</span>.moviePlayer];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(mediaPlayerThumbnailRequestFinished:) name:<span class=\"built_in\">MPMoviePlayerThumbnailImageRequestDidFinishNotification</span> object:<span class=\"keyword\">self</span>.moviePlayer];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  播放状态改变，注意播放完成时的状态是暂停</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPlayerPlaybackStateChange:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">self</span>.moviePlayer.playbackState) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStatePlaying</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"正在播放...\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStatePaused</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"暂停播放.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStateStopped</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"停止播放.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放状态:%li\"</span>,<span class=\"keyword\">self</span>.moviePlayer.playbackState);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  播放完成</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPlayerPlaybackFinished:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放完成.%li\"</span>,<span class=\"keyword\">self</span>.moviePlayer.playbackState);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  缩略图请求完成,此方法每次截图成功都会调用一次</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPlayerThumbnailRequestFinished:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"视频截图完成.\"</span>);</div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image=notification.userInfo[<span class=\"built_in\">MPMoviePlayerThumbnailImageKey</span>];</div><div class=\"line\">    <span class=\"comment\">//保存图片到相册(首次调用会请求用户获得访问相册权限)</span></div><div class=\"line\">    <span class=\"built_in\">UIImageWriteToSavedPhotosAlbum</span>(image, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">截图效果：</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerController_Thumbnail1</span>     <span class=\"built_in\">MPMoviePlayerController_Thumbnail2</span></div><div class=\"line\">扩展--使用<span class=\"built_in\">AVFoundation</span>生成缩略图</div><div class=\"line\">通过前面的方法大家应该已经看到，使用<span class=\"built_in\">MPMoviePlayerController</span>来生成缩略图足够简单，但是如果仅仅是是为了生成缩略图而不进行视频播放的话，此刻使用<span class=\"built_in\">MPMoviePlayerController</span>就有点大材小用了。其实使用<span class=\"built_in\">AVFundation</span>框架中的<span class=\"built_in\">AVAssetImageGenerator</span>就可以获取视频缩略图。使用<span class=\"built_in\">AVAssetImageGenerator</span>获取缩略图大致分为三个步骤：</div><div class=\"line\">创建<span class=\"built_in\">AVURLAsset</span>对象（此类主要用于获取媒体信息，包括视频、声音等）。</div><div class=\"line\">根据<span class=\"built_in\">AVURLAsset</span>创建<span class=\"built_in\">AVAssetImageGenerator</span>对象。</div><div class=\"line\">使用<span class=\"built_in\">AVAssetImageGenerator</span>的copyCGImageAtTime::方法获得指定时间点的截图。</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  AVAssetImageGenerator</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//获取第13.0s的缩略图</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> thumbnailImageRequest:<span class=\"number\">13.0</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  取得本地文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getFileUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=[[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"The New Look of OS X Yosemite.mp4\"</span> ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  取得网络文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getNetworkUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=<span class=\"string\">@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\"</span>;</div><div class=\"line\">    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> URLWithString:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  截取指定时间的视频缩略图</div><div class=\"line\"> *</div><div class=\"line\"> *  @param timeBySecond 时间点</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)thumbnailImageRequest:(<span class=\"built_in\">CGFloat</span> )timeBySecond&#123;</div><div class=\"line\">    <span class=\"comment\">//创建URL</span></div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"keyword\">self</span> getNetworkUrl];</div><div class=\"line\">    <span class=\"comment\">//根据url创建AVURLAsset</span></div><div class=\"line\">    <span class=\"built_in\">AVURLAsset</span> *urlAsset=[<span class=\"built_in\">AVURLAsset</span> assetWithURL:url];</div><div class=\"line\">    <span class=\"comment\">//根据AVURLAsset创建AVAssetImageGenerator</span></div><div class=\"line\">    <span class=\"built_in\">AVAssetImageGenerator</span> *imageGenerator=[<span class=\"built_in\">AVAssetImageGenerator</span> assetImageGeneratorWithAsset:urlAsset];</div><div class=\"line\">    <span class=\"comment\">/*截图</span></div><div class=\"line\">     * requestTime:缩略图创建时间</div><div class=\"line\">     * actualTime:缩略图实际生成的时间</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"built_in\">NSError</span> *error=<span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"built_in\">CMTime</span> time=<span class=\"built_in\">CMTimeMakeWithSeconds</span>(timeBySecond, <span class=\"number\">10</span>);<span class=\"comment\">//CMTime是表示电影时间信息的结构体，第一个参数表示是视频第几秒，第二个参数表示每秒帧数.(如果要活的某一秒的第几帧可以使用CMTimeMake方法)</span></div><div class=\"line\">    <span class=\"built_in\">CMTime</span> actualTime;</div><div class=\"line\">    <span class=\"built_in\">CGImageRef</span> cgImage= [imageGenerator copyCGImageAtTime:time actualTime:&amp;actualTime error:&amp;error];</div><div class=\"line\">    <span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"截取视频缩略图时发生错误，错误信息：%@\"</span>,error.localizedDescription);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">CMTimeShow</span>(actualTime);</div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image=[<span class=\"built_in\">UIImage</span> imageWithCGImage:cgImage];<span class=\"comment\">//转化为UIImage</span></div><div class=\"line\">    <span class=\"comment\">//保存到相册</span></div><div class=\"line\">    <span class=\"built_in\">UIImageWriteToSavedPhotosAlbum</span>(image,<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>);</div><div class=\"line\">    <span class=\"built_in\">CGImageRelease</span>(cgImage);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">生成的缩略图效果：</div><div class=\"line\"><span class=\"built_in\">AVAssetImageGenerator_Thumbnail</span></div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerViewController</span></div><div class=\"line\">其实<span class=\"built_in\">MPMoviePlayerController</span>如果不作为嵌入视频来播放（例如在新闻中嵌入一个视频），通常在播放时都是占满一个屏幕的，特别是在iPhone、iTouch上。因此从iOS3<span class=\"number\">.2</span>以后苹果也在思考既然<span class=\"built_in\">MPMoviePlayerController</span>在使用时通常都是将其视图view添加到另外一个视图控制器中作为子视图，那么何不直接创建一个控制器视图内部创建一个<span class=\"built_in\">MPMoviePlayerController</span>属性并且默认全屏播放，开发者在开发的时候直接使用这个视图控制器。这个内部有一个<span class=\"built_in\">MPMoviePlayerController</span>的视图控制器就是<span class=\"built_in\">MPMoviePlayerViewController</span>，它继承于<span class=\"built_in\">UIViewController</span>。<span class=\"built_in\">MPMoviePlayerViewController</span>内部多了一个moviePlayer属性和一个带有url的初始化方法，同时它内部实现了一些作为模态视图展示所特有的功能，例如默认是全屏模式展示、弹出后自动播放、作为模态窗口展示时如果点击“Done”按钮会自动退出模态窗口等。在下面的示例中就不直接将播放器放到主视图控制器，而是放到一个模态视图控制器中，简单演示<span class=\"built_in\">MPMoviePlayerViewController</span>的使用。</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  MPMoviePlayerViewController</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//  MPMoviePlayerViewController使用</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//播放器视图控制器</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">MPMoviePlayerViewController</span> *moviePlayerViewController;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器视图方法</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc&#123;</div><div class=\"line\">    <span class=\"comment\">//移除所有通知监控</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  取得本地文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getFileUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=[[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"The New Look of OS X Yosemite.mp4\"</span> ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  取得网络文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getNetworkUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=<span class=\"string\">@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\"</span>;</div><div class=\"line\">    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> URLWithString:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">MPMoviePlayerViewController</span> *)moviePlayerViewController&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_moviePlayerViewController) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"keyword\">self</span> getNetworkUrl];</div><div class=\"line\">        _moviePlayerViewController=[[<span class=\"built_in\">MPMoviePlayerViewController</span> alloc]initWithContentURL:url];</div><div class=\"line\">        [<span class=\"keyword\">self</span> addNotification];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _moviePlayerViewController;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark - UI事件</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)playClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.moviePlayerViewController=<span class=\"literal\">nil</span>;<span class=\"comment\">//保证每次点击都重新创建视频播放控制器视图，避免再次点击时由于不播放的问题</span></div><div class=\"line\"><span class=\"comment\">//    [self presentViewController:self.moviePlayerViewController animated:YES completion:nil];</span></div><div class=\"line\">    <span class=\"comment\">//注意，在MPMoviePlayerViewController.h中对UIViewController扩展两个用于模态展示和关闭MPMoviePlayerViewController的方法，增加了一种下拉展示动画效果</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> presentMoviePlayerViewControllerAnimated:<span class=\"keyword\">self</span>.moviePlayerViewController];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器通知</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  添加通知监控媒体播放控制器状态</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)addNotification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSNotificationCenter</span> *notificationCenter=[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(mediaPlayerPlaybackStateChange:) name:<span class=\"built_in\">MPMoviePlayerPlaybackStateDidChangeNotification</span> object:<span class=\"keyword\">self</span>.moviePlayerViewController.moviePlayer];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(mediaPlayerPlaybackFinished:) name:<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span> object:<span class=\"keyword\">self</span>.moviePlayerViewController.moviePlayer];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  播放状态改变，注意播放完成时的状态是暂停</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPlayerPlaybackStateChange:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">self</span>.moviePlayerViewController.moviePlayer.playbackState) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStatePlaying</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"正在播放...\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStatePaused</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"暂停播放.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStateStopped</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"停止播放.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放状态:%li\"</span>,<span class=\"keyword\">self</span>.moviePlayerViewController.moviePlayer.playbackState);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  播放完成</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPlayerPlaybackFinished:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放完成.%li\"</span>,<span class=\"keyword\">self</span>.moviePlayerViewController.moviePlayer.playbackState);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">运行效果：</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerViewController</span></div><div class=\"line\">这里需要强调一下，由于<span class=\"built_in\">MPMoviePlayerViewController</span>的初始化方法做了大量工作（例如设置URL、自动播放、添加点击Done完成的监控等），所以当再次点击播放弹出新的模态窗口的时如果不销毁之前的<span class=\"built_in\">MPMoviePlayerViewController</span>，那么新的对象就无法完成初始化，这样也就不能再次进行播放。</div><div class=\"line\"><span class=\"built_in\">AVPlayer</span></div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerController</span>足够强大，几乎不用写几行代码就能完成一个播放器，但是正是由于它的高度封装使得要自定义这个播放器变得很复杂，甚至是不可能完成。例如有些时候需要自定义播放器的样式，那么如果要使用<span class=\"built_in\">MPMoviePlayerController</span>就不合适了，如果要对视频有自由的控制则可以使用<span class=\"built_in\">AVPlayer</span>。<span class=\"built_in\">AVPlayer</span>存在于<span class=\"built_in\">AVFoundation</span>中，它更加接近于底层，所以灵活性也更强：</div><div class=\"line\"><span class=\"built_in\">AVFoundation_Framework</span></div><div class=\"line\"><span class=\"built_in\">AVPlayer</span>本身并不能显示视频，而且它也不像<span class=\"built_in\">MPMoviePlayerController</span>有一个view属性。如果<span class=\"built_in\">AVPlayer</span>要显示必须创建一个播放器层<span class=\"built_in\">AVPlayerLayer</span>用于展示，播放器层继承于<span class=\"built_in\">CALayer</span>，有了<span class=\"built_in\">AVPlayerLayer</span>之添加到控制器视图的layer中即可。要使用<span class=\"built_in\">AVPlayer</span>首先了解一下几个常用的类：</div><div class=\"line\"><span class=\"built_in\">AVAsset</span>：主要用于获取多媒体信息，是一个抽象类，不能直接使用。</div><div class=\"line\"><span class=\"built_in\">AVURLAsset</span>：<span class=\"built_in\">AVAsset</span>的子类，可以根据一个URL路径创建一个包含媒体信息的<span class=\"built_in\">AVURLAsset</span>对象。</div><div class=\"line\"><span class=\"built_in\">AVPlayerItem</span>：一个媒体资源管理对象，管理者视频的一些基本信息和状态，一个<span class=\"built_in\">AVPlayerItem</span>对应着一个视频资源。</div><div class=\"line\">下面简单通过一个播放器来演示<span class=\"built_in\">AVPlayer</span>的使用，播放器的效果如下：</div><div class=\"line\"><span class=\"built_in\">AVPlayer_Thumbnail</span></div><div class=\"line\">在这个自定义的播放器中实现了视频播放、暂停、进度展示和视频列表功能，下面将对这些功能一一介绍。</div><div class=\"line\">首先说一下视频的播放、暂停功能，这也是最基本的功能，<span class=\"built_in\">AVPlayer</span>对应着两个方法play、pause来实现。但是关键问题是如何判断当前视频是否在播放，在前面的内容中无论是音频播放器还是视频播放器都有对应的状态来判断，但是<span class=\"built_in\">AVPlayer</span>却没有这样的状态属性，通常情况下可以通过判断播放器的播放速度来获得播放状态。如果rate为<span class=\"number\">0</span>说明是停止状态，<span class=\"number\">1</span>是则是正常播放状态。</div><div class=\"line\">其次要展示播放进度就没有其他播放器那么简单了。在前面的播放器中通常是使用通知来获得播放器的状态，媒体加载状态等，但是无论是<span class=\"built_in\">AVPlayer</span>还是<span class=\"built_in\">AVPlayerItem</span>（<span class=\"built_in\">AVPlayer</span>有一个属性currentItem是<span class=\"built_in\">AVPlayerItem</span>类型，表示当前播放的视频对象）都无法获得这些信息。当然<span class=\"built_in\">AVPlayerItem</span>是有通知的，但是对于获得播放状态和加载状态有用的通知只有一个：播放完成通知<span class=\"built_in\">AVPlayerItemDidPlayToEndTimeNotification</span>。在播放视频时，特别是播放网络视频往往需要知道视频加载情况、缓冲情况、播放情况，这些信息可以通过KVO监控<span class=\"built_in\">AVPlayerItem</span>的status、loadedTimeRanges属性来获得。当<span class=\"built_in\">AVPlayerItem</span>的status属性为<span class=\"built_in\">AVPlayerStatusReadyToPlay</span>是说明正在播放，只有处于这个状态时才能获得视频时长等信息；当loadedTimeRanges的改变时（每缓冲一部分数据就会更新此属性）可以获得本次缓冲加载的视频范围（包含起始时间、本次加载时长），这样一来就可以实时获得缓冲情况。然后就是依靠<span class=\"built_in\">AVPlayer</span>的- (<span class=\"keyword\">id</span>)addPeriodicTimeObserverForInterval:(<span class=\"built_in\">CMTime</span>)interval queue:(<span class=\"built_in\">dispatch_queue_t</span>)queue usingBlock:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">CMTime</span> time))block方法获得播放进度，这个方法会在设定的时间间隔内定时更新播放进度，通过time参数通知客户端。相信有了这些视频信息播放进度就不成问题了，事实上通过这些信息就算是平时看到的其他播放器的缓冲进度显示以及拖动播放的功能也可以顺利的实现。</div><div class=\"line\">最后就是视频切换的功能，在前面介绍的所有播放器中每个播放器对象一次只能播放一个视频，如果要切换视频只能重新创建一个对象，但是<span class=\"built_in\">AVPlayer</span>却提供了- (<span class=\"keyword\">void</span>)replaceCurrentItemWithPlayerItem:(<span class=\"built_in\">AVPlayerItem</span> *)item方法用于在不同的视频之间切换（事实上在<span class=\"built_in\">AVFoundation</span>内部还有一个<span class=\"built_in\">AVQueuePlayer</span>专门处理播放列表切换，有兴趣的朋友可以自行研究，这里不再赘述）。</div><div class=\"line\">下面附上代码：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  AVPlayer</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">AVPlayer</span> *player;<span class=\"comment\">//播放器对象</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIView</span> *container; <span class=\"comment\">//播放器容器</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *playOrPause; <span class=\"comment\">//播放/暂停按钮</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIProgressView</span> *progress;<span class=\"comment\">//播放进度</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器视图方法</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    [<span class=\"keyword\">self</span> setupUI];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.player play];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> removeObserverFromPlayerItem:<span class=\"keyword\">self</span>.player.currentItem];</div><div class=\"line\">    [<span class=\"keyword\">self</span> removeNotification];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)setupUI&#123;</div><div class=\"line\">    <span class=\"comment\">//创建播放器层</span></div><div class=\"line\">    <span class=\"built_in\">AVPlayerLayer</span> *playerLayer=[<span class=\"built_in\">AVPlayerLayer</span> playerLayerWithPlayer:<span class=\"keyword\">self</span>.player];</div><div class=\"line\">    playerLayer.frame=<span class=\"keyword\">self</span>.container.frame;</div><div class=\"line\">    <span class=\"comment\">//playerLayer.videoGravity=AVLayerVideoGravityResizeAspect;//视频填充模式</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.container.layer addSublayer:playerLayer];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  截取指定时间的视频缩略图</div><div class=\"line\"> *</div><div class=\"line\"> *  @param timeBySecond 时间点</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  初始化播放器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 播放器对象</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">AVPlayer</span> *)player&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_player) &#123;</div><div class=\"line\">        <span class=\"built_in\">AVPlayerItem</span> *playerItem=[<span class=\"keyword\">self</span> getPlayItem:<span class=\"number\">0</span>];</div><div class=\"line\">        _player=[<span class=\"built_in\">AVPlayer</span> playerWithPlayerItem:playerItem];</div><div class=\"line\">        [<span class=\"keyword\">self</span> addProgressObserver];</div><div class=\"line\">        [<span class=\"keyword\">self</span> addObserverToPlayerItem:playerItem];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _player;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  根据视频索引取得AVPlayerItem对象</div><div class=\"line\"> *</div><div class=\"line\"> *  @param videoIndex 视频顺序索引</div><div class=\"line\"> *</div><div class=\"line\"> *  @return AVPlayerItem对象</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"built_in\">AVPlayerItem</span> *)getPlayItem:(<span class=\"keyword\">int</span>)videoIndex&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"http://192.168.1.161/%i.mp4\"</span>,videoIndex];</div><div class=\"line\">    urlStr =[urlStr stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> URLWithString:urlStr];</div><div class=\"line\">    <span class=\"built_in\">AVPlayerItem</span> *playerItem=[<span class=\"built_in\">AVPlayerItem</span> playerItemWithURL:url];</div><div class=\"line\">    <span class=\"keyword\">return</span> playerItem;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark - 通知</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  添加播放器通知</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)addNotification&#123;</div><div class=\"line\">    <span class=\"comment\">//给AVPlayerItem添加播放完成通知</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(playbackFinished:) name:<span class=\"built_in\">AVPlayerItemDidPlayToEndTimeNotification</span> object:<span class=\"keyword\">self</span>.player.currentItem];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)removeNotification&#123;</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  播放完成通知</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)playbackFinished:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"视频播放完成.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 监控</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  给播放器添加进度更新</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)addProgressObserver&#123;</div><div class=\"line\">    <span class=\"built_in\">AVPlayerItem</span> *playerItem=<span class=\"keyword\">self</span>.player.currentItem;</div><div class=\"line\">    <span class=\"built_in\">UIProgressView</span> *progress=<span class=\"keyword\">self</span>.progress;</div><div class=\"line\">    <span class=\"comment\">//这里设置每秒执行一次</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.player addPeriodicTimeObserverForInterval:<span class=\"built_in\">CMTimeMake</span>(<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>) queue:dispatch_get_main_queue() usingBlock:^(<span class=\"built_in\">CMTime</span> time) &#123;</div><div class=\"line\">        <span class=\"keyword\">float</span> current=<span class=\"built_in\">CMTimeGetSeconds</span>(time);</div><div class=\"line\">        <span class=\"keyword\">float</span> total=<span class=\"built_in\">CMTimeGetSeconds</span>([playerItem duration]);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"当前已经播放%.2fs.\"</span>,current);</div><div class=\"line\">        <span class=\"keyword\">if</span> (current) &#123;</div><div class=\"line\">            [progress setProgress:(current/total) animated:<span class=\"literal\">YES</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  给AVPlayerItem添加监控</div><div class=\"line\"> *</div><div class=\"line\"> *  @param playerItem AVPlayerItem对象</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)addObserverToPlayerItem:(<span class=\"built_in\">AVPlayerItem</span> *)playerItem&#123;</div><div class=\"line\">    <span class=\"comment\">//监控状态属性，注意AVPlayer也有一个status属性，通过监控它的status也可以获得播放状态</span></div><div class=\"line\">    [playerItem addObserver:<span class=\"keyword\">self</span> forKeyPath:<span class=\"string\">@\"status\"</span> options:<span class=\"built_in\">NSKeyValueObservingOptionNew</span> context:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"comment\">//监控网络加载情况属性</span></div><div class=\"line\">    [playerItem addObserver:<span class=\"keyword\">self</span> forKeyPath:<span class=\"string\">@\"loadedTimeRanges\"</span> options:<span class=\"built_in\">NSKeyValueObservingOptionNew</span> context:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)removeObserverFromPlayerItem:(<span class=\"built_in\">AVPlayerItem</span> *)playerItem&#123;</div><div class=\"line\">    [playerItem removeObserver:<span class=\"keyword\">self</span> forKeyPath:<span class=\"string\">@\"status\"</span>];</div><div class=\"line\">    [playerItem removeObserver:<span class=\"keyword\">self</span> forKeyPath:<span class=\"string\">@\"loadedTimeRanges\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  通过KVO监控播放器状态</div><div class=\"line\"> *</div><div class=\"line\"> *  @param keyPath 监控属性</div><div class=\"line\"> *  @param object  监视器</div><div class=\"line\"> *  @param change  状态改变</div><div class=\"line\"> *  @param context 上下文</div><div class=\"line\"> */</div><div class=\"line\">-(<span class=\"keyword\">void</span>)observeValueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath ofObject:(<span class=\"keyword\">id</span>)object change:(<span class=\"built_in\">NSDictionary</span> *)change context:(<span class=\"keyword\">void</span> *)context&#123;</div><div class=\"line\">    <span class=\"built_in\">AVPlayerItem</span> *playerItem=object;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([keyPath isEqualToString:<span class=\"string\">@\"status\"</span>]) &#123;</div><div class=\"line\">        <span class=\"built_in\">AVPlayerStatus</span> status= [[change objectForKey:<span class=\"string\">@\"new\"</span>] intValue];</div><div class=\"line\">        <span class=\"keyword\">if</span>(status==<span class=\"built_in\">AVPlayerStatusReadyToPlay</span>)&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"正在播放...，视频总长度:%.2f\"</span>,<span class=\"built_in\">CMTimeGetSeconds</span>(playerItem.duration));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([keyPath isEqualToString:<span class=\"string\">@\"loadedTimeRanges\"</span>])&#123;</div><div class=\"line\">        <span class=\"built_in\">NSArray</span> *array=playerItem.loadedTimeRanges;</div><div class=\"line\">        <span class=\"built_in\">CMTimeRange</span> timeRange = [array.firstObject <span class=\"built_in\">CMTimeRangeValue</span>];<span class=\"comment\">//本次缓冲时间范围</span></div><div class=\"line\">        <span class=\"keyword\">float</span> startSeconds = <span class=\"built_in\">CMTimeGetSeconds</span>(timeRange.start);</div><div class=\"line\">        <span class=\"keyword\">float</span> durationSeconds = <span class=\"built_in\">CMTimeGetSeconds</span>(timeRange.duration);</div><div class=\"line\">        <span class=\"built_in\">NSTimeInterval</span> totalBuffer = startSeconds + durationSeconds;<span class=\"comment\">//缓冲总长度</span></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"共缓冲：%.2f\"</span>,totalBuffer);</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - UI事件</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  点击播放/暂停按钮</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 播放/暂停按钮</div><div class=\"line\"> */</div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)playClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\"><span class=\"comment\">//    AVPlayerItemDidPlayToEndTimeNotification</span></div><div class=\"line\">    <span class=\"comment\">//AVPlayerItem *playerItem= self.player.currentItem;</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">self</span>.player.rate==<span class=\"number\">0</span>)&#123; <span class=\"comment\">//说明时暂停</span></div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"player_pause\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.player play];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">self</span>.player.rate==<span class=\"number\">1</span>)&#123;<span class=\"comment\">//正在播放</span></div><div class=\"line\">        [<span class=\"keyword\">self</span>.player pause];</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"player_play\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  切换选集，这里使用按钮的tag代表视频名称</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 点击按钮对象</div><div class=\"line\"> */</div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)navigationButtonClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> removeNotification];</div><div class=\"line\">    [<span class=\"keyword\">self</span> removeObserverFromPlayerItem:<span class=\"keyword\">self</span>.player.currentItem];</div><div class=\"line\">    <span class=\"built_in\">AVPlayerItem</span> *playerItem=[<span class=\"keyword\">self</span> getPlayItem:sender.tag];</div><div class=\"line\">    [<span class=\"keyword\">self</span> addObserverToPlayerItem:playerItem];</div><div class=\"line\">    <span class=\"comment\">//切换视频</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.player replaceCurrentItemWithPlayerItem:playerItem];</div><div class=\"line\">    [<span class=\"keyword\">self</span> addNotification];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">运行效果：</div><div class=\"line\"><span class=\"built_in\">AVPlayer</span></div><div class=\"line\">到目前为止无论是<span class=\"built_in\">MPMoviePlayerController</span>还是<span class=\"built_in\">AVPlayer</span>来播放视频都相当强大，但是它也存在着一些不可回避的问题，那就是支持的视频编码格式很有限：H<span class=\"number\">.264</span>、<span class=\"built_in\">MPEG</span><span class=\"number\">-4</span>，扩展名（压缩格式）：.mp4、.mov、.m4v、.m2v、<span class=\"number\">.3</span>gp、<span class=\"number\">.3</span>g2等。但是无论是<span class=\"built_in\">MPMoviePlayerController</span>还是<span class=\"built_in\">AVPlayer</span>它们都支持绝大多数音频编码，所以大家如果纯粹是为了播放音乐的话也可以考虑使用这两个播放器。那么如何支持更多视频编码格式呢？目前来说主要还是依靠第三方框架，在iOS上常用的视频编码、解码框架有：VLC、ffmpeg， 具体使用方式今天就不再做详细介绍。</div></pre></td></tr></table></figure>\n","excerpt":"<p>在iOS中音频播放从形式上可以分为音效播放和音乐播放。前者主要指的是一些短音频播放，通常作为点缀音频，对于这类音频不需要进行进度、循环等控制。后者指的是一些较长的音频，通常是主音频，对于这些音频的播放通常需要进行精确的控制。<br>","more":"</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div><div class=\"line\">480</div><div class=\"line\">481</div><div class=\"line\">482</div><div class=\"line\">483</div><div class=\"line\">484</div><div class=\"line\">485</div><div class=\"line\">486</div><div class=\"line\">487</div><div class=\"line\">488</div><div class=\"line\">489</div><div class=\"line\">490</div><div class=\"line\">491</div><div class=\"line\">492</div><div class=\"line\">493</div><div class=\"line\">494</div><div class=\"line\">495</div><div class=\"line\">496</div><div class=\"line\">497</div><div class=\"line\">498</div><div class=\"line\">499</div><div class=\"line\">500</div><div class=\"line\">501</div><div class=\"line\">502</div><div class=\"line\">503</div><div class=\"line\">504</div><div class=\"line\">505</div><div class=\"line\">506</div><div class=\"line\">507</div><div class=\"line\">508</div><div class=\"line\">509</div><div class=\"line\">510</div><div class=\"line\">511</div><div class=\"line\">512</div><div class=\"line\">513</div><div class=\"line\">514</div><div class=\"line\">515</div><div class=\"line\">516</div><div class=\"line\">517</div><div class=\"line\">518</div><div class=\"line\">519</div><div class=\"line\">520</div><div class=\"line\">521</div><div class=\"line\">522</div><div class=\"line\">523</div><div class=\"line\">524</div><div class=\"line\">525</div><div class=\"line\">526</div><div class=\"line\">527</div><div class=\"line\">528</div><div class=\"line\">529</div><div class=\"line\">530</div><div class=\"line\">531</div><div class=\"line\">532</div><div class=\"line\">533</div><div class=\"line\">534</div><div class=\"line\">535</div><div class=\"line\">536</div><div class=\"line\">537</div><div class=\"line\">538</div><div class=\"line\">539</div><div class=\"line\">540</div><div class=\"line\">541</div><div class=\"line\">542</div><div class=\"line\">543</div><div class=\"line\">544</div><div class=\"line\">545</div><div class=\"line\">546</div><div class=\"line\">547</div><div class=\"line\">548</div><div class=\"line\">549</div><div class=\"line\">550</div><div class=\"line\">551</div><div class=\"line\">552</div><div class=\"line\">553</div><div class=\"line\">554</div><div class=\"line\">555</div><div class=\"line\">556</div><div class=\"line\">557</div><div class=\"line\">558</div><div class=\"line\">559</div><div class=\"line\">560</div><div class=\"line\">561</div><div class=\"line\">562</div><div class=\"line\">563</div><div class=\"line\">564</div><div class=\"line\">565</div><div class=\"line\">566</div><div class=\"line\">567</div><div class=\"line\">568</div><div class=\"line\">569</div><div class=\"line\">570</div><div class=\"line\">571</div><div class=\"line\">572</div><div class=\"line\">573</div><div class=\"line\">574</div><div class=\"line\">575</div><div class=\"line\">576</div><div class=\"line\">577</div><div class=\"line\">578</div><div class=\"line\">579</div><div class=\"line\">580</div><div class=\"line\">581</div><div class=\"line\">582</div><div class=\"line\">583</div><div class=\"line\">584</div><div class=\"line\">585</div><div class=\"line\">586</div><div class=\"line\">587</div><div class=\"line\">588</div><div class=\"line\">589</div><div class=\"line\">590</div><div class=\"line\">591</div><div class=\"line\">592</div><div class=\"line\">593</div><div class=\"line\">594</div><div class=\"line\">595</div><div class=\"line\">596</div><div class=\"line\">597</div><div class=\"line\">598</div><div class=\"line\">599</div><div class=\"line\">600</div><div class=\"line\">601</div><div class=\"line\">602</div><div class=\"line\">603</div><div class=\"line\">604</div><div class=\"line\">605</div><div class=\"line\">606</div><div class=\"line\">607</div><div class=\"line\">608</div><div class=\"line\">609</div><div class=\"line\">610</div><div class=\"line\">611</div><div class=\"line\">612</div><div class=\"line\">613</div><div class=\"line\">614</div><div class=\"line\">615</div><div class=\"line\">616</div><div class=\"line\">617</div><div class=\"line\">618</div><div class=\"line\">619</div><div class=\"line\">620</div><div class=\"line\">621</div><div class=\"line\">622</div><div class=\"line\">623</div><div class=\"line\">624</div><div class=\"line\">625</div><div class=\"line\">626</div><div class=\"line\">627</div><div class=\"line\">628</div><div class=\"line\">629</div><div class=\"line\">630</div><div class=\"line\">631</div><div class=\"line\">632</div><div class=\"line\">633</div><div class=\"line\">634</div><div class=\"line\">635</div><div class=\"line\">636</div><div class=\"line\">637</div><div class=\"line\">638</div><div class=\"line\">639</div><div class=\"line\">640</div><div class=\"line\">641</div><div class=\"line\">642</div><div class=\"line\">643</div><div class=\"line\">644</div><div class=\"line\">645</div><div class=\"line\">646</div><div class=\"line\">647</div><div class=\"line\">648</div><div class=\"line\">649</div><div class=\"line\">650</div><div class=\"line\">651</div><div class=\"line\">652</div><div class=\"line\">653</div><div class=\"line\">654</div><div class=\"line\">655</div><div class=\"line\">656</div><div class=\"line\">657</div><div class=\"line\">658</div><div class=\"line\">659</div><div class=\"line\">660</div><div class=\"line\">661</div><div class=\"line\">662</div><div class=\"line\">663</div><div class=\"line\">664</div><div class=\"line\">665</div><div class=\"line\">666</div><div class=\"line\">667</div><div class=\"line\">668</div><div class=\"line\">669</div><div class=\"line\">670</div><div class=\"line\">671</div><div class=\"line\">672</div><div class=\"line\">673</div><div class=\"line\">674</div><div class=\"line\">675</div><div class=\"line\">676</div><div class=\"line\">677</div><div class=\"line\">678</div><div class=\"line\">679</div><div class=\"line\">680</div><div class=\"line\">681</div><div class=\"line\">682</div><div class=\"line\">683</div><div class=\"line\">684</div><div class=\"line\">685</div><div class=\"line\">686</div><div class=\"line\">687</div><div class=\"line\">688</div><div class=\"line\">689</div><div class=\"line\">690</div><div class=\"line\">691</div><div class=\"line\">692</div><div class=\"line\">693</div><div class=\"line\">694</div><div class=\"line\">695</div><div class=\"line\">696</div><div class=\"line\">697</div><div class=\"line\">698</div><div class=\"line\">699</div><div class=\"line\">700</div><div class=\"line\">701</div><div class=\"line\">702</div><div class=\"line\">703</div><div class=\"line\">704</div><div class=\"line\">705</div><div class=\"line\">706</div><div class=\"line\">707</div><div class=\"line\">708</div><div class=\"line\">709</div><div class=\"line\">710</div><div class=\"line\">711</div><div class=\"line\">712</div><div class=\"line\">713</div><div class=\"line\">714</div><div class=\"line\">715</div><div class=\"line\">716</div><div class=\"line\">717</div><div class=\"line\">718</div><div class=\"line\">719</div><div class=\"line\">720</div><div class=\"line\">721</div><div class=\"line\">722</div><div class=\"line\">723</div><div class=\"line\">724</div><div class=\"line\">725</div><div class=\"line\">726</div><div class=\"line\">727</div><div class=\"line\">728</div><div class=\"line\">729</div><div class=\"line\">730</div><div class=\"line\">731</div><div class=\"line\">732</div><div class=\"line\">733</div><div class=\"line\">734</div><div class=\"line\">735</div><div class=\"line\">736</div><div class=\"line\">737</div><div class=\"line\">738</div><div class=\"line\">739</div><div class=\"line\">740</div><div class=\"line\">741</div><div class=\"line\">742</div><div class=\"line\">743</div><div class=\"line\">744</div><div class=\"line\">745</div><div class=\"line\">746</div><div class=\"line\">747</div><div class=\"line\">748</div><div class=\"line\">749</div><div class=\"line\">750</div><div class=\"line\">751</div><div class=\"line\">752</div><div class=\"line\">753</div><div class=\"line\">754</div><div class=\"line\">755</div><div class=\"line\">756</div><div class=\"line\">757</div><div class=\"line\">758</div><div class=\"line\">759</div><div class=\"line\">760</div><div class=\"line\">761</div><div class=\"line\">762</div><div class=\"line\">763</div><div class=\"line\">764</div><div class=\"line\">765</div><div class=\"line\">766</div><div class=\"line\">767</div><div class=\"line\">768</div><div class=\"line\">769</div><div class=\"line\">770</div><div class=\"line\">771</div><div class=\"line\">772</div><div class=\"line\">773</div><div class=\"line\">774</div><div class=\"line\">775</div><div class=\"line\">776</div><div class=\"line\">777</div><div class=\"line\">778</div><div class=\"line\">779</div><div class=\"line\">780</div><div class=\"line\">781</div><div class=\"line\">782</div><div class=\"line\">783</div><div class=\"line\">784</div><div class=\"line\">785</div><div class=\"line\">786</div><div class=\"line\">787</div><div class=\"line\">788</div><div class=\"line\">789</div><div class=\"line\">790</div><div class=\"line\">791</div><div class=\"line\">792</div><div class=\"line\">793</div><div class=\"line\">794</div><div class=\"line\">795</div><div class=\"line\">796</div><div class=\"line\">797</div><div class=\"line\">798</div><div class=\"line\">799</div><div class=\"line\">800</div><div class=\"line\">801</div><div class=\"line\">802</div><div class=\"line\">803</div><div class=\"line\">804</div><div class=\"line\">805</div><div class=\"line\">806</div><div class=\"line\">807</div><div class=\"line\">808</div><div class=\"line\">809</div><div class=\"line\">810</div><div class=\"line\">811</div><div class=\"line\">812</div><div class=\"line\">813</div><div class=\"line\">814</div><div class=\"line\">815</div><div class=\"line\">816</div><div class=\"line\">817</div><div class=\"line\">818</div><div class=\"line\">819</div><div class=\"line\">820</div><div class=\"line\">821</div><div class=\"line\">822</div><div class=\"line\">823</div><div class=\"line\">824</div><div class=\"line\">825</div><div class=\"line\">826</div><div class=\"line\">827</div><div class=\"line\">828</div><div class=\"line\">829</div><div class=\"line\">830</div><div class=\"line\">831</div><div class=\"line\">832</div><div class=\"line\">833</div><div class=\"line\">834</div><div class=\"line\">835</div><div class=\"line\">836</div><div class=\"line\">837</div><div class=\"line\">838</div><div class=\"line\">839</div><div class=\"line\">840</div><div class=\"line\">841</div><div class=\"line\">842</div><div class=\"line\">843</div><div class=\"line\">844</div><div class=\"line\">845</div><div class=\"line\">846</div><div class=\"line\">847</div><div class=\"line\">848</div><div class=\"line\">849</div><div class=\"line\">850</div><div class=\"line\">851</div><div class=\"line\">852</div><div class=\"line\">853</div><div class=\"line\">854</div><div class=\"line\">855</div><div class=\"line\">856</div><div class=\"line\">857</div><div class=\"line\">858</div><div class=\"line\">859</div><div class=\"line\">860</div><div class=\"line\">861</div><div class=\"line\">862</div><div class=\"line\">863</div><div class=\"line\">864</div><div class=\"line\">865</div><div class=\"line\">866</div><div class=\"line\">867</div><div class=\"line\">868</div><div class=\"line\">869</div><div class=\"line\">870</div><div class=\"line\">871</div><div class=\"line\">872</div><div class=\"line\">873</div><div class=\"line\">874</div><div class=\"line\">875</div><div class=\"line\">876</div><div class=\"line\">877</div><div class=\"line\">878</div><div class=\"line\">879</div><div class=\"line\">880</div><div class=\"line\">881</div><div class=\"line\">882</div><div class=\"line\">883</div><div class=\"line\">884</div><div class=\"line\">885</div><div class=\"line\">886</div><div class=\"line\">887</div><div class=\"line\">888</div><div class=\"line\">889</div><div class=\"line\">890</div><div class=\"line\">891</div><div class=\"line\">892</div><div class=\"line\">893</div><div class=\"line\">894</div><div class=\"line\">895</div><div class=\"line\">896</div><div class=\"line\">897</div><div class=\"line\">898</div><div class=\"line\">899</div><div class=\"line\">900</div><div class=\"line\">901</div><div class=\"line\">902</div><div class=\"line\">903</div><div class=\"line\">904</div><div class=\"line\">905</div><div class=\"line\">906</div><div class=\"line\">907</div><div class=\"line\">908</div><div class=\"line\">909</div><div class=\"line\">910</div><div class=\"line\">911</div><div class=\"line\">912</div><div class=\"line\">913</div><div class=\"line\">914</div><div class=\"line\">915</div><div class=\"line\">916</div><div class=\"line\">917</div><div class=\"line\">918</div><div class=\"line\">919</div><div class=\"line\">920</div><div class=\"line\">921</div><div class=\"line\">922</div><div class=\"line\">923</div><div class=\"line\">924</div><div class=\"line\">925</div><div class=\"line\">926</div><div class=\"line\">927</div><div class=\"line\">928</div><div class=\"line\">929</div><div class=\"line\">930</div><div class=\"line\">931</div><div class=\"line\">932</div><div class=\"line\">933</div><div class=\"line\">934</div><div class=\"line\">935</div><div class=\"line\">936</div><div class=\"line\">937</div><div class=\"line\">938</div><div class=\"line\">939</div><div class=\"line\">940</div><div class=\"line\">941</div><div class=\"line\">942</div><div class=\"line\">943</div><div class=\"line\">944</div><div class=\"line\">945</div><div class=\"line\">946</div><div class=\"line\">947</div><div class=\"line\">948</div><div class=\"line\">949</div><div class=\"line\">950</div><div class=\"line\">951</div><div class=\"line\">952</div><div class=\"line\">953</div><div class=\"line\">954</div><div class=\"line\">955</div><div class=\"line\">956</div><div class=\"line\">957</div><div class=\"line\">958</div><div class=\"line\">959</div><div class=\"line\">960</div><div class=\"line\">961</div><div class=\"line\">962</div><div class=\"line\">963</div><div class=\"line\">964</div><div class=\"line\">965</div><div class=\"line\">966</div><div class=\"line\">967</div><div class=\"line\">968</div><div class=\"line\">969</div><div class=\"line\">970</div><div class=\"line\">971</div><div class=\"line\">972</div><div class=\"line\">973</div><div class=\"line\">974</div><div class=\"line\">975</div><div class=\"line\">976</div><div class=\"line\">977</div><div class=\"line\">978</div><div class=\"line\">979</div><div class=\"line\">980</div><div class=\"line\">981</div><div class=\"line\">982</div><div class=\"line\">983</div><div class=\"line\">984</div><div class=\"line\">985</div><div class=\"line\">986</div><div class=\"line\">987</div><div class=\"line\">988</div><div class=\"line\">989</div><div class=\"line\">990</div><div class=\"line\">991</div><div class=\"line\">992</div><div class=\"line\">993</div><div class=\"line\">994</div><div class=\"line\">995</div><div class=\"line\">996</div><div class=\"line\">997</div><div class=\"line\">998</div><div class=\"line\">999</div><div class=\"line\">1000</div><div class=\"line\">1001</div><div class=\"line\">1002</div><div class=\"line\">1003</div><div class=\"line\">1004</div><div class=\"line\">1005</div><div class=\"line\">1006</div><div class=\"line\">1007</div><div class=\"line\">1008</div><div class=\"line\">1009</div><div class=\"line\">1010</div><div class=\"line\">1011</div><div class=\"line\">1012</div><div class=\"line\">1013</div><div class=\"line\">1014</div><div class=\"line\">1015</div><div class=\"line\">1016</div><div class=\"line\">1017</div><div class=\"line\">1018</div><div class=\"line\">1019</div><div class=\"line\">1020</div><div class=\"line\">1021</div><div class=\"line\">1022</div><div class=\"line\">1023</div><div class=\"line\">1024</div><div class=\"line\">1025</div><div class=\"line\">1026</div><div class=\"line\">1027</div><div class=\"line\">1028</div><div class=\"line\">1029</div><div class=\"line\">1030</div><div class=\"line\">1031</div><div class=\"line\">1032</div><div class=\"line\">1033</div><div class=\"line\">1034</div><div class=\"line\">1035</div><div class=\"line\">1036</div><div class=\"line\">1037</div><div class=\"line\">1038</div><div class=\"line\">1039</div><div class=\"line\">1040</div><div class=\"line\">1041</div><div class=\"line\">1042</div><div class=\"line\">1043</div><div class=\"line\">1044</div><div class=\"line\">1045</div><div class=\"line\">1046</div><div class=\"line\">1047</div><div class=\"line\">1048</div><div class=\"line\">1049</div><div class=\"line\">1050</div><div class=\"line\">1051</div><div class=\"line\">1052</div><div class=\"line\">1053</div><div class=\"line\">1054</div><div class=\"line\">1055</div><div class=\"line\">1056</div><div class=\"line\">1057</div><div class=\"line\">1058</div><div class=\"line\">1059</div><div class=\"line\">1060</div><div class=\"line\">1061</div><div class=\"line\">1062</div><div class=\"line\">1063</div><div class=\"line\">1064</div><div class=\"line\">1065</div><div class=\"line\">1066</div><div class=\"line\">1067</div><div class=\"line\">1068</div><div class=\"line\">1069</div><div class=\"line\">1070</div><div class=\"line\">1071</div><div class=\"line\">1072</div><div class=\"line\">1073</div><div class=\"line\">1074</div><div class=\"line\">1075</div><div class=\"line\">1076</div><div class=\"line\">1077</div><div class=\"line\">1078</div><div class=\"line\">1079</div><div class=\"line\">1080</div><div class=\"line\">1081</div><div class=\"line\">1082</div><div class=\"line\">1083</div><div class=\"line\">1084</div><div class=\"line\">1085</div><div class=\"line\">1086</div><div class=\"line\">1087</div><div class=\"line\">1088</div><div class=\"line\">1089</div><div class=\"line\">1090</div><div class=\"line\">1091</div><div class=\"line\">1092</div><div class=\"line\">1093</div><div class=\"line\">1094</div><div class=\"line\">1095</div><div class=\"line\">1096</div><div class=\"line\">1097</div><div class=\"line\">1098</div><div class=\"line\">1099</div><div class=\"line\">1100</div><div class=\"line\">1101</div><div class=\"line\">1102</div><div class=\"line\">1103</div><div class=\"line\">1104</div><div class=\"line\">1105</div><div class=\"line\">1106</div><div class=\"line\">1107</div><div class=\"line\">1108</div><div class=\"line\">1109</div><div class=\"line\">1110</div><div class=\"line\">1111</div><div class=\"line\">1112</div><div class=\"line\">1113</div><div class=\"line\">1114</div><div class=\"line\">1115</div><div class=\"line\">1116</div><div class=\"line\">1117</div><div class=\"line\">1118</div><div class=\"line\">1119</div><div class=\"line\">1120</div><div class=\"line\">1121</div><div class=\"line\">1122</div><div class=\"line\">1123</div><div class=\"line\">1124</div><div class=\"line\">1125</div><div class=\"line\">1126</div><div class=\"line\">1127</div><div class=\"line\">1128</div><div class=\"line\">1129</div><div class=\"line\">1130</div><div class=\"line\">1131</div><div class=\"line\">1132</div><div class=\"line\">1133</div><div class=\"line\">1134</div><div class=\"line\">1135</div><div class=\"line\">1136</div><div class=\"line\">1137</div><div class=\"line\">1138</div><div class=\"line\">1139</div><div class=\"line\">1140</div><div class=\"line\">1141</div><div class=\"line\">1142</div><div class=\"line\">1143</div><div class=\"line\">1144</div><div class=\"line\">1145</div><div class=\"line\">1146</div><div class=\"line\">1147</div><div class=\"line\">1148</div><div class=\"line\">1149</div><div class=\"line\">1150</div><div class=\"line\">1151</div><div class=\"line\">1152</div><div class=\"line\">1153</div><div class=\"line\">1154</div><div class=\"line\">1155</div><div class=\"line\">1156</div><div class=\"line\">1157</div><div class=\"line\">1158</div><div class=\"line\">1159</div><div class=\"line\">1160</div><div class=\"line\">1161</div><div class=\"line\">1162</div><div class=\"line\">1163</div><div class=\"line\">1164</div><div class=\"line\">1165</div><div class=\"line\">1166</div><div class=\"line\">1167</div><div class=\"line\">1168</div><div class=\"line\">1169</div><div class=\"line\">1170</div><div class=\"line\">1171</div><div class=\"line\">1172</div><div class=\"line\">1173</div><div class=\"line\">1174</div><div class=\"line\">1175</div><div class=\"line\">1176</div><div class=\"line\">1177</div><div class=\"line\">1178</div><div class=\"line\">1179</div><div class=\"line\">1180</div><div class=\"line\">1181</div><div class=\"line\">1182</div><div class=\"line\">1183</div><div class=\"line\">1184</div><div class=\"line\">1185</div><div class=\"line\">1186</div><div class=\"line\">1187</div><div class=\"line\">1188</div><div class=\"line\">1189</div><div class=\"line\">1190</div><div class=\"line\">1191</div><div class=\"line\">1192</div><div class=\"line\">1193</div><div class=\"line\">1194</div><div class=\"line\">1195</div><div class=\"line\">1196</div><div class=\"line\">1197</div><div class=\"line\">1198</div><div class=\"line\">1199</div><div class=\"line\">1200</div><div class=\"line\">1201</div><div class=\"line\">1202</div><div class=\"line\">1203</div><div class=\"line\">1204</div><div class=\"line\">1205</div><div class=\"line\">1206</div><div class=\"line\">1207</div><div class=\"line\">1208</div><div class=\"line\">1209</div><div class=\"line\">1210</div><div class=\"line\">1211</div><div class=\"line\">1212</div><div class=\"line\">1213</div><div class=\"line\">1214</div><div class=\"line\">1215</div><div class=\"line\">1216</div><div class=\"line\">1217</div><div class=\"line\">1218</div><div class=\"line\">1219</div><div class=\"line\">1220</div><div class=\"line\">1221</div><div class=\"line\">1222</div><div class=\"line\">1223</div><div class=\"line\">1224</div><div class=\"line\">1225</div><div class=\"line\">1226</div><div class=\"line\">1227</div><div class=\"line\">1228</div><div class=\"line\">1229</div><div class=\"line\">1230</div><div class=\"line\">1231</div><div class=\"line\">1232</div><div class=\"line\">1233</div><div class=\"line\">1234</div><div class=\"line\">1235</div><div class=\"line\">1236</div><div class=\"line\">1237</div><div class=\"line\">1238</div><div class=\"line\">1239</div><div class=\"line\">1240</div><div class=\"line\">1241</div><div class=\"line\">1242</div><div class=\"line\">1243</div><div class=\"line\">1244</div><div class=\"line\">1245</div><div class=\"line\">1246</div><div class=\"line\">1247</div><div class=\"line\">1248</div><div class=\"line\">1249</div><div class=\"line\">1250</div><div class=\"line\">1251</div><div class=\"line\">1252</div><div class=\"line\">1253</div><div class=\"line\">1254</div><div class=\"line\">1255</div><div class=\"line\">1256</div><div class=\"line\">1257</div><div class=\"line\">1258</div><div class=\"line\">1259</div><div class=\"line\">1260</div><div class=\"line\">1261</div><div class=\"line\">1262</div><div class=\"line\">1263</div><div class=\"line\">1264</div><div class=\"line\">1265</div><div class=\"line\">1266</div><div class=\"line\">1267</div><div class=\"line\">1268</div><div class=\"line\">1269</div><div class=\"line\">1270</div><div class=\"line\">1271</div><div class=\"line\">1272</div><div class=\"line\">1273</div><div class=\"line\">1274</div><div class=\"line\">1275</div><div class=\"line\">1276</div><div class=\"line\">1277</div><div class=\"line\">1278</div><div class=\"line\">1279</div><div class=\"line\">1280</div><div class=\"line\">1281</div><div class=\"line\">1282</div><div class=\"line\">1283</div><div class=\"line\">1284</div><div class=\"line\">1285</div><div class=\"line\">1286</div><div class=\"line\">1287</div><div class=\"line\">1288</div><div class=\"line\">1289</div><div class=\"line\">1290</div><div class=\"line\">1291</div><div class=\"line\">1292</div><div class=\"line\">1293</div><div class=\"line\">1294</div><div class=\"line\">1295</div><div class=\"line\">1296</div><div class=\"line\">1297</div><div class=\"line\">1298</div><div class=\"line\">1299</div><div class=\"line\">1300</div><div class=\"line\">1301</div><div class=\"line\">1302</div><div class=\"line\">1303</div><div class=\"line\">1304</div><div class=\"line\">1305</div><div class=\"line\">1306</div><div class=\"line\">1307</div><div class=\"line\">1308</div><div class=\"line\">1309</div><div class=\"line\">1310</div><div class=\"line\">1311</div><div class=\"line\">1312</div><div class=\"line\">1313</div><div class=\"line\">1314</div><div class=\"line\">1315</div><div class=\"line\">1316</div><div class=\"line\">1317</div><div class=\"line\">1318</div><div class=\"line\">1319</div><div class=\"line\">1320</div><div class=\"line\">1321</div><div class=\"line\">1322</div><div class=\"line\">1323</div><div class=\"line\">1324</div><div class=\"line\">1325</div><div class=\"line\">1326</div><div class=\"line\">1327</div><div class=\"line\">1328</div><div class=\"line\">1329</div><div class=\"line\">1330</div><div class=\"line\">1331</div><div class=\"line\">1332</div><div class=\"line\">1333</div><div class=\"line\">1334</div><div class=\"line\">1335</div><div class=\"line\">1336</div><div class=\"line\">1337</div><div class=\"line\">1338</div><div class=\"line\">1339</div><div class=\"line\">1340</div><div class=\"line\">1341</div><div class=\"line\">1342</div><div class=\"line\">1343</div><div class=\"line\">1344</div><div class=\"line\">1345</div><div class=\"line\">1346</div><div class=\"line\">1347</div><div class=\"line\">1348</div><div class=\"line\">1349</div><div class=\"line\">1350</div><div class=\"line\">1351</div><div class=\"line\">1352</div><div class=\"line\">1353</div><div class=\"line\">1354</div><div class=\"line\">1355</div><div class=\"line\">1356</div><div class=\"line\">1357</div><div class=\"line\">1358</div><div class=\"line\">1359</div><div class=\"line\">1360</div><div class=\"line\">1361</div><div class=\"line\">1362</div><div class=\"line\">1363</div><div class=\"line\">1364</div><div class=\"line\">1365</div><div class=\"line\">1366</div><div class=\"line\">1367</div><div class=\"line\">1368</div><div class=\"line\">1369</div><div class=\"line\">1370</div><div class=\"line\">1371</div><div class=\"line\">1372</div><div class=\"line\">1373</div><div class=\"line\">1374</div><div class=\"line\">1375</div><div class=\"line\">1376</div><div class=\"line\">1377</div><div class=\"line\">1378</div><div class=\"line\">1379</div><div class=\"line\">1380</div><div class=\"line\">1381</div><div class=\"line\">1382</div><div class=\"line\">1383</div><div class=\"line\">1384</div><div class=\"line\">1385</div><div class=\"line\">1386</div><div class=\"line\">1387</div><div class=\"line\">1388</div><div class=\"line\">1389</div><div class=\"line\">1390</div><div class=\"line\">1391</div><div class=\"line\">1392</div><div class=\"line\">1393</div><div class=\"line\">1394</div><div class=\"line\">1395</div><div class=\"line\">1396</div><div class=\"line\">1397</div><div class=\"line\">1398</div><div class=\"line\">1399</div><div class=\"line\">1400</div><div class=\"line\">1401</div><div class=\"line\">1402</div><div class=\"line\">1403</div><div class=\"line\">1404</div><div class=\"line\">1405</div><div class=\"line\">1406</div><div class=\"line\">1407</div><div class=\"line\">1408</div><div class=\"line\">1409</div><div class=\"line\">1410</div><div class=\"line\">1411</div><div class=\"line\">1412</div><div class=\"line\">1413</div><div class=\"line\">1414</div><div class=\"line\">1415</div><div class=\"line\">1416</div><div class=\"line\">1417</div><div class=\"line\">1418</div><div class=\"line\">1419</div><div class=\"line\">1420</div><div class=\"line\">1421</div><div class=\"line\">1422</div><div class=\"line\">1423</div><div class=\"line\">1424</div><div class=\"line\">1425</div><div class=\"line\">1426</div><div class=\"line\">1427</div><div class=\"line\">1428</div><div class=\"line\">1429</div><div class=\"line\">1430</div><div class=\"line\">1431</div><div class=\"line\">1432</div><div class=\"line\">1433</div><div class=\"line\">1434</div><div class=\"line\">1435</div><div class=\"line\">1436</div><div class=\"line\">1437</div><div class=\"line\">1438</div><div class=\"line\">1439</div><div class=\"line\">1440</div><div class=\"line\">1441</div><div class=\"line\">1442</div><div class=\"line\">1443</div><div class=\"line\">1444</div><div class=\"line\">1445</div><div class=\"line\">1446</div><div class=\"line\">1447</div><div class=\"line\">1448</div><div class=\"line\">1449</div><div class=\"line\">1450</div><div class=\"line\">1451</div><div class=\"line\">1452</div><div class=\"line\">1453</div><div class=\"line\">1454</div><div class=\"line\">1455</div><div class=\"line\">1456</div><div class=\"line\">1457</div><div class=\"line\">1458</div><div class=\"line\">1459</div><div class=\"line\">1460</div><div class=\"line\">1461</div><div class=\"line\">1462</div><div class=\"line\">1463</div><div class=\"line\">1464</div><div class=\"line\">1465</div><div class=\"line\">1466</div><div class=\"line\">1467</div><div class=\"line\">1468</div><div class=\"line\">1469</div><div class=\"line\">1470</div><div class=\"line\">1471</div><div class=\"line\">1472</div><div class=\"line\">1473</div><div class=\"line\">1474</div><div class=\"line\">1475</div><div class=\"line\">1476</div><div class=\"line\">1477</div><div class=\"line\">1478</div><div class=\"line\">1479</div><div class=\"line\">1480</div><div class=\"line\">1481</div><div class=\"line\">1482</div><div class=\"line\">1483</div><div class=\"line\">1484</div><div class=\"line\">1485</div><div class=\"line\">1486</div><div class=\"line\">1487</div><div class=\"line\">1488</div><div class=\"line\">1489</div><div class=\"line\">1490</div><div class=\"line\">1491</div><div class=\"line\">1492</div><div class=\"line\">1493</div><div class=\"line\">1494</div><div class=\"line\">1495</div><div class=\"line\">1496</div><div class=\"line\">1497</div><div class=\"line\">1498</div><div class=\"line\">1499</div><div class=\"line\">1500</div><div class=\"line\">1501</div><div class=\"line\">1502</div><div class=\"line\">1503</div><div class=\"line\">1504</div><div class=\"line\">1505</div><div class=\"line\">1506</div><div class=\"line\">1507</div><div class=\"line\">1508</div><div class=\"line\">1509</div><div class=\"line\">1510</div><div class=\"line\">1511</div><div class=\"line\">1512</div><div class=\"line\">1513</div><div class=\"line\">1514</div><div class=\"line\">1515</div><div class=\"line\">1516</div><div class=\"line\">1517</div><div class=\"line\">1518</div><div class=\"line\">1519</div><div class=\"line\">1520</div><div class=\"line\">1521</div><div class=\"line\">1522</div><div class=\"line\">1523</div><div class=\"line\">1524</div><div class=\"line\">1525</div><div class=\"line\">1526</div><div class=\"line\">1527</div><div class=\"line\">1528</div><div class=\"line\">1529</div><div class=\"line\">1530</div><div class=\"line\">1531</div><div class=\"line\">1532</div><div class=\"line\">1533</div><div class=\"line\">1534</div><div class=\"line\">1535</div><div class=\"line\">1536</div><div class=\"line\">1537</div><div class=\"line\">1538</div><div class=\"line\">1539</div><div class=\"line\">1540</div><div class=\"line\">1541</div><div class=\"line\">1542</div><div class=\"line\">1543</div><div class=\"line\">1544</div><div class=\"line\">1545</div><div class=\"line\">1546</div><div class=\"line\">1547</div><div class=\"line\">1548</div><div class=\"line\">1549</div><div class=\"line\">1550</div><div class=\"line\">1551</div><div class=\"line\">1552</div><div class=\"line\">1553</div><div class=\"line\">1554</div><div class=\"line\">1555</div><div class=\"line\">1556</div><div class=\"line\">1557</div><div class=\"line\">1558</div><div class=\"line\">1559</div><div class=\"line\">1560</div><div class=\"line\">1561</div><div class=\"line\">1562</div><div class=\"line\">1563</div><div class=\"line\">1564</div><div class=\"line\">1565</div><div class=\"line\">1566</div><div class=\"line\">1567</div><div class=\"line\">1568</div><div class=\"line\">1569</div><div class=\"line\">1570</div><div class=\"line\">1571</div><div class=\"line\">1572</div><div class=\"line\">1573</div><div class=\"line\">1574</div><div class=\"line\">1575</div><div class=\"line\">1576</div><div class=\"line\">1577</div><div class=\"line\">1578</div><div class=\"line\">1579</div><div class=\"line\">1580</div><div class=\"line\">1581</div><div class=\"line\">1582</div><div class=\"line\">1583</div><div class=\"line\">1584</div><div class=\"line\">1585</div><div class=\"line\">1586</div><div class=\"line\">1587</div><div class=\"line\">1588</div><div class=\"line\">1589</div><div class=\"line\">1590</div><div class=\"line\">1591</div><div class=\"line\">1592</div><div class=\"line\">1593</div><div class=\"line\">1594</div><div class=\"line\">1595</div><div class=\"line\">1596</div><div class=\"line\">1597</div><div class=\"line\">1598</div><div class=\"line\">1599</div><div class=\"line\">1600</div><div class=\"line\">1601</div><div class=\"line\">1602</div><div class=\"line\">1603</div><div class=\"line\">1604</div><div class=\"line\">1605</div><div class=\"line\">1606</div><div class=\"line\">1607</div><div class=\"line\">1608</div><div class=\"line\">1609</div><div class=\"line\">1610</div><div class=\"line\">1611</div><div class=\"line\">1612</div><div class=\"line\">1613</div><div class=\"line\">1614</div><div class=\"line\">1615</div><div class=\"line\">1616</div><div class=\"line\">1617</div><div class=\"line\">1618</div><div class=\"line\">1619</div><div class=\"line\">1620</div><div class=\"line\">1621</div><div class=\"line\">1622</div><div class=\"line\">1623</div><div class=\"line\">1624</div><div class=\"line\">1625</div><div class=\"line\">1626</div><div class=\"line\">1627</div><div class=\"line\">1628</div><div class=\"line\">1629</div><div class=\"line\">1630</div><div class=\"line\">1631</div><div class=\"line\">1632</div><div class=\"line\">1633</div><div class=\"line\">1634</div><div class=\"line\">1635</div><div class=\"line\">1636</div><div class=\"line\">1637</div><div class=\"line\">1638</div><div class=\"line\">1639</div><div class=\"line\">1640</div><div class=\"line\">1641</div><div class=\"line\">1642</div><div class=\"line\">1643</div><div class=\"line\">1644</div><div class=\"line\">1645</div><div class=\"line\">1646</div><div class=\"line\">1647</div><div class=\"line\">1648</div><div class=\"line\">1649</div><div class=\"line\">1650</div><div class=\"line\">1651</div><div class=\"line\">1652</div><div class=\"line\">1653</div><div class=\"line\">1654</div><div class=\"line\">1655</div><div class=\"line\">1656</div><div class=\"line\">1657</div><div class=\"line\">1658</div><div class=\"line\">1659</div><div class=\"line\">1660</div><div class=\"line\">1661</div><div class=\"line\">1662</div><div class=\"line\">1663</div><div class=\"line\">1664</div><div class=\"line\">1665</div><div class=\"line\">1666</div><div class=\"line\">1667</div><div class=\"line\">1668</div><div class=\"line\">1669</div><div class=\"line\">1670</div><div class=\"line\">1671</div><div class=\"line\">1672</div><div class=\"line\">1673</div><div class=\"line\">1674</div><div class=\"line\">1675</div><div class=\"line\">1676</div><div class=\"line\">1677</div><div class=\"line\">1678</div><div class=\"line\">1679</div><div class=\"line\">1680</div><div class=\"line\">1681</div><div class=\"line\">1682</div><div class=\"line\">1683</div><div class=\"line\">1684</div><div class=\"line\">1685</div><div class=\"line\">1686</div><div class=\"line\">1687</div><div class=\"line\">1688</div><div class=\"line\">1689</div><div class=\"line\">1690</div><div class=\"line\">1691</div><div class=\"line\">1692</div><div class=\"line\">1693</div><div class=\"line\">1694</div><div class=\"line\">1695</div><div class=\"line\">1696</div><div class=\"line\">1697</div><div class=\"line\">1698</div><div class=\"line\">1699</div><div class=\"line\">1700</div><div class=\"line\">1701</div><div class=\"line\">1702</div><div class=\"line\">1703</div><div class=\"line\">1704</div><div class=\"line\">1705</div><div class=\"line\">1706</div><div class=\"line\">1707</div><div class=\"line\">1708</div><div class=\"line\">1709</div><div class=\"line\">1710</div><div class=\"line\">1711</div><div class=\"line\">1712</div><div class=\"line\">1713</div><div class=\"line\">1714</div><div class=\"line\">1715</div><div class=\"line\">1716</div><div class=\"line\">1717</div><div class=\"line\">1718</div><div class=\"line\">1719</div><div class=\"line\">1720</div><div class=\"line\">1721</div><div class=\"line\">1722</div><div class=\"line\">1723</div><div class=\"line\">1724</div><div class=\"line\">1725</div><div class=\"line\">1726</div><div class=\"line\">1727</div><div class=\"line\">1728</div><div class=\"line\">1729</div><div class=\"line\">1730</div><div class=\"line\">1731</div><div class=\"line\">1732</div><div class=\"line\">1733</div><div class=\"line\">1734</div><div class=\"line\">1735</div><div class=\"line\">1736</div><div class=\"line\">1737</div><div class=\"line\">1738</div><div class=\"line\">1739</div><div class=\"line\">1740</div><div class=\"line\">1741</div><div class=\"line\">1742</div><div class=\"line\">1743</div><div class=\"line\">1744</div><div class=\"line\">1745</div><div class=\"line\">1746</div><div class=\"line\">1747</div><div class=\"line\">1748</div><div class=\"line\">1749</div><div class=\"line\">1750</div><div class=\"line\">1751</div><div class=\"line\">1752</div><div class=\"line\">1753</div><div class=\"line\">1754</div><div class=\"line\">1755</div><div class=\"line\">1756</div><div class=\"line\">1757</div><div class=\"line\">1758</div><div class=\"line\">1759</div><div class=\"line\">1760</div><div class=\"line\">1761</div><div class=\"line\">1762</div><div class=\"line\">1763</div><div class=\"line\">1764</div><div class=\"line\">1765</div><div class=\"line\">1766</div><div class=\"line\">1767</div><div class=\"line\">1768</div><div class=\"line\">1769</div><div class=\"line\">1770</div><div class=\"line\">1771</div><div class=\"line\">1772</div><div class=\"line\">1773</div><div class=\"line\">1774</div><div class=\"line\">1775</div><div class=\"line\">1776</div><div class=\"line\">1777</div><div class=\"line\">1778</div><div class=\"line\">1779</div><div class=\"line\">1780</div><div class=\"line\">1781</div></pre></td><td class=\"code\"><pre><div class=\"line\">转自：http:<span class=\"comment\">//blog.csdn.net/jianxin160/article/details/47753241</span></div><div class=\"line\">音频</div><div class=\"line\">在iOS中音频播放从形式上可以分为音效播放和音乐播放。前者主要指的是一些短音频播放，通常作为点缀音频，对于这类音频不需要进行进度、循环等控制。后者指的是一些较长的音频，通常是主音频，对于这些音频的播放通常需要进行精确的控制。在iOS中播放两类音频分别使用AudioToolbox.framework和<span class=\"built_in\">AVFoundation</span>.framework来完成音效和音乐播放。</div><div class=\"line\">音效</div><div class=\"line\">AudioToolbox.framework是一套基于C语言的框架，使用它来播放音效其本质是将短音频注册到系统声音服务（System Sound Service）。System Sound Service是一种简单、底层的声音播放服务，但是它本身也存在着一些限制：</div><div class=\"line\">音频播放时间不能超过<span class=\"number\">30</span>s</div><div class=\"line\">数据必须是PCM或者IMA4格式</div><div class=\"line\">音频文件必须打包成.caf、.aif、.wav中的一种（注意这是官方文档的说法，实际测试发现一些.mp3也可以播放）</div><div class=\"line\">使用System Sound Service 播放音效的步骤如下：</div><div class=\"line\">调用AudioServicesCreateSystemSoundID(   <span class=\"built_in\">CFURLRef</span>  inFileURL, SystemSoundID*   outSystemSoundID)函数获得系统声音ID。</div><div class=\"line\">如果需要监听播放完成操作，则使用AudioServicesAddSystemSoundCompletion(  SystemSoundID inSystemSoundID,</div><div class=\"line\"><span class=\"built_in\">CFRunLoopRef</span>  inRunLoop, <span class=\"built_in\">CFStringRef</span>  inRunLoopMode, AudioServicesSystemSoundCompletionProc  inCompletionRoutine, <span class=\"keyword\">void</span>*  inClientData)方法注册回调函数。</div><div class=\"line\">调用AudioServicesPlaySystemSound(SystemSoundID inSystemSoundID) 或者AudioServicesPlayAlertSound(SystemSoundID inSystemSoundID) 方法播放音效（后者带有震动效果）。</div><div class=\"line\">下面是一个简单的示例程序：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  KCMainViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  Audio</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//  音效播放</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"KCMainViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AudioToolbox/AudioToolbox.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">KCMainViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">KCMainViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> playSoundEffect:<span class=\"string\">@\"videoRing.caf\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  播放完成回调函数</div><div class=\"line\"> *</div><div class=\"line\"> *  @param soundID    系统声音ID</div><div class=\"line\"> *  @param clientData 回调时传递的数据</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">void</span> soundCompleteCallback(SystemSoundID soundID,<span class=\"keyword\">void</span> * clientData)&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放完成...\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  播放音效文件</div><div class=\"line\"> *</div><div class=\"line\"> *  @param name 音频文件名称</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)playSoundEffect:(<span class=\"built_in\">NSString</span> *)name&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *audioFile=[[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:name ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *fileUrl=[<span class=\"built_in\">NSURL</span> fileURLWithPath:audioFile];</div><div class=\"line\">    <span class=\"comment\">//1.获得系统声音ID</span></div><div class=\"line\">    SystemSoundID soundID=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * inFileUrl:音频文件url</div><div class=\"line\">     * outSystemSoundID:声音id（此函数会将音效文件加入到系统音频服务中并返回一个长整形ID）</div><div class=\"line\">     */</span></div><div class=\"line\">    AudioServicesCreateSystemSoundID((__bridge <span class=\"built_in\">CFURLRef</span>)(fileUrl), &amp;soundID);</div><div class=\"line\">    <span class=\"comment\">//如果需要在播放完之后执行某些操作，可以调用如下方法注册一个播放完成回调函数</span></div><div class=\"line\">    AudioServicesAddSystemSoundCompletion(soundID, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, soundCompleteCallback, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    <span class=\"comment\">//2.播放音频</span></div><div class=\"line\">    AudioServicesPlaySystemSound(soundID);<span class=\"comment\">//播放音效</span></div><div class=\"line\"><span class=\"comment\">//    AudioServicesPlayAlertSound(soundID);//播放音效并震动</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">音乐</div><div class=\"line\">如果播放较大的音频或者要对音频有精确的控制则System Sound Service可能就很难满足实际需求了，通常这种情况会选择使用<span class=\"built_in\">AVFoundation</span>.framework中的<span class=\"built_in\">AVAudioPlayer</span>来实现。<span class=\"built_in\">AVAudioPlayer</span>可以看成一个播放器，它支持多种音频格式，而且能够进行进度、音量、播放速度等控制。首先简单看一下<span class=\"built_in\">AVAudioPlayer</span>常用的属性和方法：</div><div class=\"line\">属性\t说明</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isPlaying) <span class=\"built_in\">BOOL</span> playing\t是否正在播放，只读</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSUInteger</span> numberOfChannels\t音频声道数，只读</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSTimeInterval</span> duration\t音频时长</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSURL</span> *url\t音频文件路径，只读</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSData</span> *data\t音频数据，只读</div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"keyword\">float</span> pan\t立体声平衡，如果为<span class=\"number\">-1.0</span>则完全左声道，如果<span class=\"number\">0.0</span>则左右声道平衡，如果为<span class=\"number\">1.0</span>则完全为右声道</div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"keyword\">float</span> volume\t音量大小，范围<span class=\"number\">0</span><span class=\"number\">-1.0</span></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">BOOL</span> enableRate\t是否允许改变播放速率</div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"keyword\">float</span> rate\t播放速率，范围<span class=\"number\">0.5</span><span class=\"number\">-2.0</span>，如果为<span class=\"number\">1.0</span>则正常播放，如果要修改播放速率则必须设置enableRate为<span class=\"literal\">YES</span></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSTimeInterval</span> currentTime\t当前播放时长</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSTimeInterval</span> deviceCurrentTime\t输出设备播放音频的时间，注意如果播放中被暂停此时间也会继续累加</div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSInteger</span> numberOfLoops\t循环播放次数，如果为<span class=\"number\">0</span>则不循环，如果小于<span class=\"number\">0</span>则无限循环，大于<span class=\"number\">0</span>则表示循环次数</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSDictionary</span> *settings\t音频播放设置信息，只读</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">getter</span>=isMeteringEnabled) <span class=\"built_in\">BOOL</span> meteringEnabled\t是否启用音频测量，默认为<span class=\"literal\">NO</span>，一旦启用音频测量可以通过updateMeters方法更新测量值</div><div class=\"line\">对象方法\t说明</div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithContentsOfURL:(<span class=\"built_in\">NSURL</span> *)url error:(<span class=\"built_in\">NSError</span> **)outError\t使用文件URL初始化播放器，注意这个URL不能是HTTP URL，<span class=\"built_in\">AVAudioPlayer</span>不支持加载网络媒体流，只能播放本地文件</div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithData:(<span class=\"built_in\">NSData</span> *)data error:(<span class=\"built_in\">NSError</span> **)outError\t使用<span class=\"built_in\">NSData</span>初始化播放器，注意使用此方法时必须文件格式和文件后缀一致，否则出错，所以相比此方法更推荐使用上述方法或- (<span class=\"keyword\">instancetype</span>)initWithData:(<span class=\"built_in\">NSData</span> *)data fileTypeHint:(<span class=\"built_in\">NSString</span> *)utiString error:(<span class=\"built_in\">NSError</span> **)outError方法进行初始化</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)prepareToPlay;\t加载音频文件到缓冲区，注意即使在播放之前音频文件没有加载到缓冲区程序也会隐式调用此方法。</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)play;\t播放音频文件</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)playAtTime:(<span class=\"built_in\">NSTimeInterval</span>)time\t在指定的时间开始播放音频</div><div class=\"line\">- (<span class=\"keyword\">void</span>)pause;\t暂停播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)stop;\t停止播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)updateMeters\t更新音频测量值，注意如果要更新音频测量值必须设置meteringEnabled为<span class=\"literal\">YES</span>，通过音频测量值可以即时获得音频分贝等信息</div><div class=\"line\">- (<span class=\"keyword\">float</span>)peakPowerForChannel:(<span class=\"built_in\">NSUInteger</span>)channelNumber;\t获得指定声道的分贝峰值，注意如果要获得分贝峰值必须在此之前调用updateMeters方法</div><div class=\"line\">- (<span class=\"keyword\">float</span>)averagePowerForChannel:(<span class=\"built_in\">NSUInteger</span>)channelNumber\t获得指定声道的分贝平均值，注意如果要获得分贝平均值必须在此之前调用updateMeters方法</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSArray</span> *channelAssignments\t获得或设置播放声道</div><div class=\"line\">代理方法\t说明</div><div class=\"line\">- (<span class=\"keyword\">void</span>)audioPlayerDidFinishPlaying:(<span class=\"built_in\">AVAudioPlayer</span> *)player successfully:(<span class=\"built_in\">BOOL</span>)flag\t音频播放完成</div><div class=\"line\">- (<span class=\"keyword\">void</span>)audioPlayerDecodeErrorDidOccur:(<span class=\"built_in\">AVAudioPlayer</span> *)player error:(<span class=\"built_in\">NSError</span> *)error\t音频解码发生错误</div><div class=\"line\"><span class=\"built_in\">AVAudioPlayer</span>的使用比较简单：</div><div class=\"line\">初始化<span class=\"built_in\">AVAudioPlayer</span>对象，此时通常指定本地文件路径。</div><div class=\"line\">设置播放器属性，例如重复次数、音量大小等。</div><div class=\"line\">调用play方法播放。</div><div class=\"line\">下面就使用<span class=\"built_in\">AVAudioPlayer</span>实现一个简单播放器，在这个播放器中实现了播放、暂停、显示播放进度功能，当然例如调节音量、设置循环模式、甚至是声波图像（通过分析音频分贝值）等功能都可以实现，这里就不再一一演示。界面效果如下：</div><div class=\"line\">AudioPlayerScreen</div><div class=\"line\">当然由于<span class=\"built_in\">AVAudioPlayer</span>一次只能播放一个音频文件，所有上一曲、下一曲其实可以通过创建多个播放器对象来完成，这里暂不实现。播放进度的实现主要依靠一个定时器实时计算当前播放时长和音频总时长的比例，另外为了演示委托方法，下面的代码中也实现了播放完成委托方法，通常如果有下一曲功能的话播放完可以触发下一曲音乐播放。下面是主要代码：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  KCAVAudioPlayer</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#define kMusicFile @<span class=\"meta-string\">\"刘若英 - 原来你也在这里.mp3\"</span></span></div><div class=\"line\"><span class=\"meta\">#define kMusicSinger @<span class=\"meta-string\">\"刘若英\"</span></span></div><div class=\"line\"><span class=\"meta\">#define kMusicTitle @<span class=\"meta-string\">\"原来你也在这里\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()&lt;<span class=\"title\">AVAudioPlayerDelegate</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">AVAudioPlayer</span> *audioPlayer;<span class=\"comment\">//播放器</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *controlPanel; <span class=\"comment\">//控制面板</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIProgressView</span> *playProgress;<span class=\"comment\">//播放进度</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *musicSinger; <span class=\"comment\">//演唱者</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *playOrPause; <span class=\"comment\">//播放/暂停按钮(如果tag为0认为是暂停状态，1是播放状态)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span> ,<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimer</span> *timer;<span class=\"comment\">//进度更新定时器</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">    [<span class=\"keyword\">self</span> setupUI];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  初始化UI</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)setupUI&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.title=kMusicTitle;</div><div class=\"line\">    <span class=\"keyword\">self</span>.musicSinger.text=kMusicSinger;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">NSTimer</span> *)timer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_timer) &#123;</div><div class=\"line\">        _timer=[<span class=\"built_in\">NSTimer</span> scheduledTimerWithTimeInterval:<span class=\"number\">0.5</span> target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(updateProgress) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">true</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _timer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  创建播放器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 音频播放器</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">AVAudioPlayer</span> *)audioPlayer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_audioPlayer) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *urlStr=[[<span class=\"built_in\">NSBundle</span> mainBundle]pathForResource:kMusicFile ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error=<span class=\"literal\">nil</span>;</div><div class=\"line\">        <span class=\"comment\">//初始化播放器，注意这里的Url参数只能时文件路径，不支持HTTP Url</span></div><div class=\"line\">        _audioPlayer=[[<span class=\"built_in\">AVAudioPlayer</span> alloc]initWithContentsOfURL:url error:&amp;error];</div><div class=\"line\">        <span class=\"comment\">//设置播放器属性</span></div><div class=\"line\">        _audioPlayer.numberOfLoops=<span class=\"number\">0</span>;<span class=\"comment\">//设置为0不循环</span></div><div class=\"line\">        _audioPlayer.delegate=<span class=\"keyword\">self</span>;</div><div class=\"line\">        [_audioPlayer prepareToPlay];<span class=\"comment\">//加载音频文件到缓存</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"初始化播放器过程发生错误,错误信息:%@\"</span>,error.localizedDescription);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _audioPlayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  播放音频</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)play&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (![<span class=\"keyword\">self</span>.audioPlayer isPlaying]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.audioPlayer play];</div><div class=\"line\">        <span class=\"keyword\">self</span>.timer.fireDate=[<span class=\"built_in\">NSDate</span> distantPast];<span class=\"comment\">//恢复定时器</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  暂停播放</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)pause&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.audioPlayer isPlaying]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.audioPlayer pause];</div><div class=\"line\">        <span class=\"keyword\">self</span>.timer.fireDate=[<span class=\"built_in\">NSDate</span> distantFuture];<span class=\"comment\">//暂停定时器，注意不能调用invalidate方法，此方法会取消，之后无法恢复</span></div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  点击播放/暂停按钮</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 播放/暂停按钮</div><div class=\"line\"> */</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)playClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(sender.tag)&#123;</div><div class=\"line\">        sender.tag=<span class=\"number\">0</span>;</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_play_n\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_play_h\"</span>] forState:<span class=\"built_in\">UIControlStateHighlighted</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span> pause];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        sender.tag=<span class=\"number\">1</span>;</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_pause_n\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_pause_h\"</span>] forState:<span class=\"built_in\">UIControlStateHighlighted</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span> play];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  更新播放进度</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)updateProgress&#123;</div><div class=\"line\">    <span class=\"keyword\">float</span> progress= <span class=\"keyword\">self</span>.audioPlayer.currentTime /<span class=\"keyword\">self</span>.audioPlayer.duration;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.playProgress setProgress:progress animated:<span class=\"literal\">true</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 播放器代理方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)audioPlayerDidFinishPlaying:(<span class=\"built_in\">AVAudioPlayer</span> *)player successfully:(<span class=\"built_in\">BOOL</span>)flag&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"音乐播放完成...\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">运行效果：</div><div class=\"line\"><span class=\"built_in\">AVAudioPlayer</span></div><div class=\"line\">音频会话</div><div class=\"line\">事实上上面的播放器还存在一些问题，例如通常我们看到的播放器即使退出到后台也是可以播放的，而这个播放器如果退出到后台它会自动暂停。如果要支持后台播放需要做下面几件事情：</div><div class=\"line\"><span class=\"number\">1.</span>设置后台运行模式：在plist文件中添加Required background modes，并且设置item <span class=\"number\">0</span>=App plays audio or streams audio/video using AirPlay（其实可以直接通过Xcode在Project Targets-Capabilities-Background Modes中设置）</div><div class=\"line\">BackgroundModes</div><div class=\"line\"><span class=\"number\">2.</span>设置<span class=\"built_in\">AVAudioSession</span>的类型为<span class=\"built_in\">AVAudioSessionCategoryPlayback</span>并且调用setActive::方法启动会话。</div><div class=\"line\">    <span class=\"built_in\">AVAudioSession</span> *audioSession=[<span class=\"built_in\">AVAudioSession</span> sharedInstance];</div><div class=\"line\">    [audioSession setCategory:<span class=\"built_in\">AVAudioSessionCategoryPlayback</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">    [audioSession setActive:<span class=\"literal\">YES</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\"><span class=\"number\">3.</span>为了能够让应用退到后台之后支持耳机控制，建议添加远程控制事件（这一步不是后台播放必须的）</div><div class=\"line\">前两步是后台播放所必须设置的，第三步主要用于接收远程事件，这部分内容之前的文章中有详细介绍，如果这一步不设置虽让也能够在后台播放，但是无法获得音频控制权（如果在使用当前应用之前使用其他播放器播放音乐的话，此时如果按耳机播放键或者控制中心的播放按钮则会播放前一个应用的音频），并且不能使用耳机进行音频控制。第一步操作相信大家都很容易理解，如果应用程序要允许运行到后台必须设置，正常情况下应用如果进入后台会被挂起，通过该设置可以上应用程序继续在后台运行。但是第二步使用的<span class=\"built_in\">AVAudioSession</span>有必要进行一下详细的说明。</div><div class=\"line\">在iOS中每个应用都有一个音频会话，这个会话就通过<span class=\"built_in\">AVAudioSession</span>来表示。<span class=\"built_in\">AVAudioSession</span>同样存在于<span class=\"built_in\">AVFoundation</span>框架中，它是单例模式设计，通过sharedInstance进行访问。在使用Apple设备时大家会发现有些应用只要打开其他音频播放就会终止，而有些应用却可以和其他应用同时播放，在多种音频环境中如何去控制播放的方式就是通过音频会话来完成的。下面是音频会话的几种会话模式：</div><div class=\"line\">会话类型\t说明\t是否要求输入\t是否要求输出\t是否遵从静音键</div><div class=\"line\"><span class=\"built_in\">AVAudioSessionCategoryAmbient</span>\t混音播放，可以与其他音频应用同时播放\t否\t是\t是</div><div class=\"line\"><span class=\"built_in\">AVAudioSessionCategorySoloAmbient</span>\t独占播放\t否\t是\t是</div><div class=\"line\"><span class=\"built_in\">AVAudioSessionCategoryPlayback</span>\t后台播放，也是独占的\t否\t是\t否</div><div class=\"line\"><span class=\"built_in\">AVAudioSessionCategoryRecord</span>\t录音模式，用于录音时使用\t是\t否\t否</div><div class=\"line\"><span class=\"built_in\">AVAudioSessionCategoryPlayAndRecord</span>\t播放和录音，此时可以录音也可以播放\t是\t是\t否</div><div class=\"line\"><span class=\"built_in\">AVAudioSessionCategoryAudioProcessing</span>\t硬件解码音频，此时不能播放和录制\t否\t否\t否</div><div class=\"line\"><span class=\"built_in\">AVAudioSessionCategoryMultiRoute</span>\t多种输入输出，例如可以耳机、USB设备同时播放\t是\t是\t否</div><div class=\"line\">注意：是否遵循静音键表示在播放过程中如果用户通过硬件设置为静音是否能关闭声音。</div><div class=\"line\">根据前面对音频会话的理解，相信大家开发出能够在后台播放的音频播放器并不难，但是注意一下，在前面的代码中也提到设置完音频会话类型之后需要调用setActive::方法将会话激活才能起作用。类似的，如果一个应用已经在播放音频，打开我们的应用之后设置了在后台播放的会话类型，此时其他应用的音频会停止而播放我们的音频，如果希望我们的程序音频播放完之后（关闭或退出到后台之后）能够继续播放其他应用的音频的话则可以调用setActive::方法关闭会话。代码如下：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  KCAVAudioPlayer</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//  AVAudioSession 音频会话</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#define kMusicFile @<span class=\"meta-string\">\"刘若英 - 原来你也在这里.mp3\"</span></span></div><div class=\"line\"><span class=\"meta\">#define kMusicSinger @<span class=\"meta-string\">\"刘若英\"</span></span></div><div class=\"line\"><span class=\"meta\">#define kMusicTitle @<span class=\"meta-string\">\"原来你也在这里\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()&lt;<span class=\"title\">AVAudioPlayerDelegate</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">AVAudioPlayer</span> *audioPlayer;<span class=\"comment\">//播放器</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *controlPanel; <span class=\"comment\">//控制面板</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIProgressView</span> *playProgress;<span class=\"comment\">//播放进度</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *musicSinger; <span class=\"comment\">//演唱者</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *playOrPause; <span class=\"comment\">//播放/暂停按钮(如果tag为0认为是暂停状态，1是播放状态)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span> ,<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimer</span> *timer;<span class=\"comment\">//进度更新定时器</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">    [<span class=\"keyword\">self</span> setupUI];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  显示当面视图控制器时注册远程事件</div><div class=\"line\"> *</div><div class=\"line\"> *  @param animated 是否以动画的形式显示</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)viewWillAppear:(<span class=\"built_in\">BOOL</span>)animated&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewWillAppear:animated];</div><div class=\"line\">    <span class=\"comment\">//开启远程控制</span></div><div class=\"line\">    [[<span class=\"built_in\">UIApplication</span> sharedApplication] beginReceivingRemoteControlEvents];</div><div class=\"line\">    <span class=\"comment\">//作为第一响应者</span></div><div class=\"line\">    <span class=\"comment\">//[self becomeFirstResponder];</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  当前控制器视图不显示时取消远程控制</div><div class=\"line\"> *</div><div class=\"line\"> *  @param animated 是否以动画的形式消失</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)viewWillDisappear:(<span class=\"built_in\">BOOL</span>)animated&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewWillDisappear:animated];</div><div class=\"line\">    [[<span class=\"built_in\">UIApplication</span> sharedApplication] endReceivingRemoteControlEvents];</div><div class=\"line\">    <span class=\"comment\">//[self resignFirstResponder];</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  初始化UI</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)setupUI&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.title=kMusicTitle;</div><div class=\"line\">    <span class=\"keyword\">self</span>.musicSinger.text=kMusicSinger;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">NSTimer</span> *)timer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_timer) &#123;</div><div class=\"line\">        _timer=[<span class=\"built_in\">NSTimer</span> scheduledTimerWithTimeInterval:<span class=\"number\">0.5</span> target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(updateProgress) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">true</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _timer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  创建播放器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 音频播放器</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">AVAudioPlayer</span> *)audioPlayer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_audioPlayer) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *urlStr=[[<span class=\"built_in\">NSBundle</span> mainBundle]pathForResource:kMusicFile ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error=<span class=\"literal\">nil</span>;</div><div class=\"line\">        <span class=\"comment\">//初始化播放器，注意这里的Url参数只能时文件路径，不支持HTTP Url</span></div><div class=\"line\">        _audioPlayer=[[<span class=\"built_in\">AVAudioPlayer</span> alloc]initWithContentsOfURL:url error:&amp;error];</div><div class=\"line\">        <span class=\"comment\">//设置播放器属性</span></div><div class=\"line\">        _audioPlayer.numberOfLoops=<span class=\"number\">0</span>;<span class=\"comment\">//设置为0不循环</span></div><div class=\"line\">        _audioPlayer.delegate=<span class=\"keyword\">self</span>;</div><div class=\"line\">        [_audioPlayer prepareToPlay];<span class=\"comment\">//加载音频文件到缓存</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"初始化播放器过程发生错误,错误信息:%@\"</span>,error.localizedDescription);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//设置后台播放模式</span></div><div class=\"line\">        <span class=\"built_in\">AVAudioSession</span> *audioSession=[<span class=\"built_in\">AVAudioSession</span> sharedInstance];</div><div class=\"line\">        [audioSession setCategory:<span class=\"built_in\">AVAudioSessionCategoryPlayback</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\"><span class=\"comment\">//        [audioSession setCategory:AVAudioSessionCategoryPlayback withOptions:AVAudioSessionCategoryOptionAllowBluetooth error:nil];</span></div><div class=\"line\">        [audioSession setActive:<span class=\"literal\">YES</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">        <span class=\"comment\">//添加通知，拔出耳机后暂停播放</span></div><div class=\"line\">        [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(routeChange:) name:<span class=\"built_in\">AVAudioSessionRouteChangeNotification</span> object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _audioPlayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  播放音频</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)play&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (![<span class=\"keyword\">self</span>.audioPlayer isPlaying]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.audioPlayer play];</div><div class=\"line\">        <span class=\"keyword\">self</span>.timer.fireDate=[<span class=\"built_in\">NSDate</span> distantPast];<span class=\"comment\">//恢复定时器</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  暂停播放</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)pause&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.audioPlayer isPlaying]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.audioPlayer pause];</div><div class=\"line\">        <span class=\"keyword\">self</span>.timer.fireDate=[<span class=\"built_in\">NSDate</span> distantFuture];<span class=\"comment\">//暂停定时器，注意不能调用invalidate方法，此方法会取消，之后无法恢复</span></div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  点击播放/暂停按钮</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 播放/暂停按钮</div><div class=\"line\"> */</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)playClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(sender.tag)&#123;</div><div class=\"line\">        sender.tag=<span class=\"number\">0</span>;</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_play_n\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_play_h\"</span>] forState:<span class=\"built_in\">UIControlStateHighlighted</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span> pause];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        sender.tag=<span class=\"number\">1</span>;</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_pause_n\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"playing_btn_pause_h\"</span>] forState:<span class=\"built_in\">UIControlStateHighlighted</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span> play];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  更新播放进度</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)updateProgress&#123;</div><div class=\"line\">    <span class=\"keyword\">float</span> progress= <span class=\"keyword\">self</span>.audioPlayer.currentTime /<span class=\"keyword\">self</span>.audioPlayer.duration;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.playProgress setProgress:progress animated:<span class=\"literal\">true</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  一旦输出改变则执行此方法</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 输出改变通知对象</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)routeChange:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSDictionary</span> *dic=notification.userInfo;</div><div class=\"line\">    <span class=\"keyword\">int</span> changeReason= [dic[<span class=\"built_in\">AVAudioSessionRouteChangeReasonKey</span>] intValue];</div><div class=\"line\">    <span class=\"comment\">//等于AVAudioSessionRouteChangeReasonOldDeviceUnavailable表示旧输出不可用</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (changeReason==<span class=\"built_in\">AVAudioSessionRouteChangeReasonOldDeviceUnavailable</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">AVAudioSessionRouteDescription</span> *routeDescription=dic[<span class=\"built_in\">AVAudioSessionRouteChangePreviousRouteKey</span>];</div><div class=\"line\">        <span class=\"built_in\">AVAudioSessionPortDescription</span> *portDescription= [routeDescription.outputs firstObject];</div><div class=\"line\">        <span class=\"comment\">//原设备为耳机则暂停</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ([portDescription.portType isEqualToString:<span class=\"string\">@\"Headphones\"</span>]) &#123;</div><div class=\"line\">            [<span class=\"keyword\">self</span> pause];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">//    [dic enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) &#123;</span></div><div class=\"line\"><span class=\"comment\">//        NSLog(@\"%@:%@\",key,obj);</span></div><div class=\"line\"><span class=\"comment\">//    &#125;];</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc&#123;</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span> name:<span class=\"built_in\">AVAudioSessionRouteChangeNotification</span> object:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 播放器代理方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)audioPlayerDidFinishPlaying:(<span class=\"built_in\">AVAudioPlayer</span> *)player successfully:(<span class=\"built_in\">BOOL</span>)flag&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"音乐播放完成...\"</span>);</div><div class=\"line\">    <span class=\"comment\">//根据实际情况播放完成可以将会话关闭，其他音频应用继续播放</span></div><div class=\"line\">    [[<span class=\"built_in\">AVAudioSession</span> sharedInstance]setActive:<span class=\"literal\">NO</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">在上面的代码中还实现了拔出耳机暂停音乐播放的功能，这也是一个比较常见的功能。在iOS7及以后的版本中可以通过通知获得输出改变的通知，然后拿到通知对象后根据userInfo获得是何种改变类型，进而根据情况对音乐进行暂停操作。</div><div class=\"line\">扩展--播放音乐库中的音乐</div><div class=\"line\">众所周知音乐是iOS的重要组成播放，无论是iPod、iTouch、iPhone还是iPad都可以在iTunes购买音乐或添加本地音乐到音乐库中同步到你的iOS设备。在MediaPlayer.frameowork中有一个<span class=\"built_in\">MPMusicPlayerController</span>用于播放音乐库中的音乐。</div><div class=\"line\">下面先来看一下<span class=\"built_in\">MPMusicPlayerController</span>的常用属性和方法：</div><div class=\"line\">属性\t说明</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">MPMusicPlaybackState</span> playbackState\t播放器状态，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMusicPlaybackStateStopped</span>：停止播放 <span class=\"built_in\">MPMusicPlaybackStatePlaying</span>：正在播放</div><div class=\"line\"><span class=\"built_in\">MPMusicPlaybackStatePaused</span>：暂停播放</div><div class=\"line\"><span class=\"built_in\">MPMusicPlaybackStateInterrupted</span>：播放中断</div><div class=\"line\"><span class=\"built_in\">MPMusicPlaybackStateSeekingForward</span>：向前查找</div><div class=\"line\"><span class=\"built_in\">MPMusicPlaybackStateSeekingBackward</span>：向后查找</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">MPMusicRepeatMode</span> repeatMode\t重复模式，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMusicRepeatModeDefault</span>：默认模式，使用用户的首选项（系统音乐程序设置）</div><div class=\"line\"><span class=\"built_in\">MPMusicRepeatModeNone</span>：不重复</div><div class=\"line\"><span class=\"built_in\">MPMusicRepeatModeOne</span>：单曲循环</div><div class=\"line\"><span class=\"built_in\">MPMusicRepeatModeAll</span>：在当前列表内循环</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">MPMusicShuffleMode</span> shuffleMode\t随机播放模式，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMusicShuffleModeDefault</span>：默认模式，使用用户首选项（系统音乐程序设置）</div><div class=\"line\"><span class=\"built_in\">MPMusicShuffleModeOff</span>：不随机播放</div><div class=\"line\"><span class=\"built_in\">MPMusicShuffleModeSongs</span>：按歌曲随机播放</div><div class=\"line\"><span class=\"built_in\">MPMusicShuffleModeAlbums</span>：按专辑随机播放</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">MPMediaItem</span> *nowPlayingItem\t正在播放的音乐项</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSUInteger</span> indexOfNowPlayingItem\t当前正在播放的音乐在播放队列中的索引</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">BOOL</span> isPreparedToPlay\t是否准好播放准备</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> currentPlaybackTime\t当前已播放时间，单位：秒</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">float</span> currentPlaybackRate\t当前播放速度，是一个播放速度倍率，<span class=\"number\">0</span>表示暂停播放，<span class=\"number\">1</span>代表正常速度</div><div class=\"line\">类方法\t说明</div><div class=\"line\">+ (<span class=\"built_in\">MPMusicPlayerController</span> *)applicationMusicPlayer;\t获取应用播放器，注意此类播放器无法在后台播放</div><div class=\"line\">+ (<span class=\"built_in\">MPMusicPlayerController</span> *)systemMusicPlayer\t获取系统播放器，支持后台播放</div><div class=\"line\">对象方法\t说明</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setQueueWithQuery:(<span class=\"built_in\">MPMediaQuery</span> *)query\t使用媒体队列设置播放源媒体队列</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setQueueWithItemCollection:(<span class=\"built_in\">MPMediaItemCollection</span> *)itemCollection\t使用媒体项集合设置播放源媒体队列</div><div class=\"line\">- (<span class=\"keyword\">void</span>)skipToNextItem\t下一曲</div><div class=\"line\">- (<span class=\"keyword\">void</span>)skipToBeginning\t从起始位置播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)skipToPreviousItem\t上一曲</div><div class=\"line\">- (<span class=\"keyword\">void</span>)beginGeneratingPlaybackNotifications\t开启播放通知，注意不同于其他播放器，<span class=\"built_in\">MPMusicPlayerController</span>要想获得通知必须首先开启，默认情况无法获得通知</div><div class=\"line\">- (<span class=\"keyword\">void</span>)endGeneratingPlaybackNotifications\t关闭播放通知</div><div class=\"line\">- (<span class=\"keyword\">void</span>)prepareToPlay\t做好播放准备（加载音频到缓冲区），在使用play方法播放时如果没有做好准备回自动调用该方法</div><div class=\"line\">- (<span class=\"keyword\">void</span>)play\t开始播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)pause\t暂停播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)stop\t停止播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)beginSeekingForward\t开始向前查找（快进）</div><div class=\"line\">- (<span class=\"keyword\">void</span>)beginSeekingBackward\t开始向后查找（快退）</div><div class=\"line\">- (<span class=\"keyword\">void</span>)endSeeking\t结束查找</div><div class=\"line\">通知\t说明</div><div class=\"line\">（注意：要想获得<span class=\"built_in\">MPMusicPlayerController</span>通知必须首先调用beginGeneratingPlaybackNotifications开启通知）</div><div class=\"line\"><span class=\"built_in\">MPMusicPlayerControllerPlaybackStateDidChangeNotification</span>\t播放状态改变</div><div class=\"line\"><span class=\"built_in\">MPMusicPlayerControllerNowPlayingItemDidChangeNotification</span>\t当前播放音频改变</div><div class=\"line\"><span class=\"built_in\">MPMusicPlayerControllerVolumeDidChangeNotification</span>\t声音大小改变</div><div class=\"line\"><span class=\"built_in\">MPMediaPlaybackIsPreparedToPlayDidChangeNotification</span>\t准备好播放</div><div class=\"line\"><span class=\"built_in\">MPMusicPlayerController</span>有两种播放器：applicationMusicPlayer和systemMusicPlayer，前者在应用退出后音乐播放会自动停止，后者在应用停止后不会退出播放状态。</div><div class=\"line\"><span class=\"built_in\">MPMusicPlayerController</span>加载音乐不同于前面的<span class=\"built_in\">AVAudioPlayer</span>是通过一个文件路径来加载，而是需要一个播放队列。在<span class=\"built_in\">MPMusicPlayerController</span>中提供了两个方法来加载播放队列：- (<span class=\"keyword\">void</span>)setQueueWithQuery:(<span class=\"built_in\">MPMediaQuery</span> *)query和- (<span class=\"keyword\">void</span>)setQueueWithItemCollection:(<span class=\"built_in\">MPMediaItemCollection</span> *)itemCollection，正是由于它的播放音频来源是一个队列，因此<span class=\"built_in\">MPMusicPlayerController</span>支持上一曲、下一曲等操作。</div><div class=\"line\">那么接下来的问题就是如何获取<span class=\"built_in\">MPMediaQueue</span>或者<span class=\"built_in\">MPMediaItemCollection</span>？<span class=\"built_in\">MPMediaQueue</span>对象有一系列的类方法来获得媒体队列：</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)albumsQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)artistsQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)songsQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)playlistsQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)podcastsQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)audiobooksQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)compilationsQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)composersQuery;</div><div class=\"line\">+ (<span class=\"built_in\">MPMediaQuery</span> *)genresQuery;</div><div class=\"line\">有了这些方法，就可以很容易获到歌曲、播放列表、专辑媒体等媒体队列了，这样就可以通过：- (<span class=\"keyword\">void</span>)setQueueWithQuery:(<span class=\"built_in\">MPMediaQuery</span> *)query方法设置音乐来源了。又或者得到<span class=\"built_in\">MPMediaQueue</span>之后创建<span class=\"built_in\">MPMediaItemCollection</span>，使用- (<span class=\"keyword\">void</span>)setQueueWithItemCollection:(<span class=\"built_in\">MPMediaItemCollection</span> *)itemCollection设置音乐来源。</div><div class=\"line\">有时候可能希望用户自己来选择要播放的音乐，这时可以使用<span class=\"built_in\">MPMediaPickerController</span>，它是一个视图控制器，类似于<span class=\"built_in\">UIImagePickerController</span>，选择完播放来源后可以在其代理方法中获得<span class=\"built_in\">MPMediaItemCollection</span>对象。</div><div class=\"line\">无论是通过哪种方式获得<span class=\"built_in\">MPMusicPlayerController</span>的媒体源，可能都希望将每个媒体的信息显示出来，这时候可以通过<span class=\"built_in\">MPMediaItem</span>对象获得。一个<span class=\"built_in\">MPMediaItem</span>代表一个媒体文件，通过它可以访问媒体标题、专辑名称、专辑封面、音乐时长等等。无论是<span class=\"built_in\">MPMediaQueue</span>还是<span class=\"built_in\">MPMediaItemCollection</span>都有一个items属性，它是<span class=\"built_in\">MPMediaItem</span>数组，通过这个属性可以获得<span class=\"built_in\">MPMediaItem</span>对象。</div><div class=\"line\">下面就简单看一下<span class=\"built_in\">MPMusicPlayerController</span>的使用，在下面的例子中简单演示了音乐的选择、播放、暂停、通知、下一曲、上一曲功能，相信有了上面的概念，代码读起来并不复杂（示例中是直接通过<span class=\"built_in\">MPMeidaPicker</span>进行音乐选择的，但是仍然提供了两个方法getLocalMediaQuery和getLocalMediaItemCollection来演示如何直接通过<span class=\"built_in\">MPMediaQueue</span>获得媒体队列或媒体集合）：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  MPMusicPlayerController</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui 14/03/30</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()&lt;<span class=\"title\">MPMediaPickerControllerDelegate</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">MPMediaPickerController</span> *mediaPicker;<span class=\"comment\">//媒体选择控制器</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">MPMusicPlayerController</span> *musicPlayer; <span class=\"comment\">//音乐播放器</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.musicPlayer endGeneratingPlaybackNotifications];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  获得音乐播放器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 音乐播放器</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">MPMusicPlayerController</span> *)musicPlayer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_musicPlayer) &#123;</div><div class=\"line\">        _musicPlayer=[<span class=\"built_in\">MPMusicPlayerController</span> systemMusicPlayer];</div><div class=\"line\">        [_musicPlayer beginGeneratingPlaybackNotifications];<span class=\"comment\">//开启通知，否则监控不到MPMusicPlayerController的通知</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> addNotification];<span class=\"comment\">//添加通知</span></div><div class=\"line\">        <span class=\"comment\">//如果不使用MPMediaPickerController可以使用如下方法获得音乐库媒体队列</span></div><div class=\"line\">        <span class=\"comment\">//[_musicPlayer setQueueWithItemCollection:[self getLocalMediaItemCollection]];</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _musicPlayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  创建媒体选择器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 媒体选择器</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">MPMediaPickerController</span> *)mediaPicker&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_mediaPicker) &#123;</div><div class=\"line\">        <span class=\"comment\">//初始化媒体选择器，这里设置媒体类型为音乐，其实这里也可以选择视频、广播等</span></div><div class=\"line\"><span class=\"comment\">//        _mediaPicker=[[MPMediaPickerController alloc]initWithMediaTypes:MPMediaTypeMusic];</span></div><div class=\"line\">        _mediaPicker=[[<span class=\"built_in\">MPMediaPickerController</span> alloc]initWithMediaTypes:<span class=\"built_in\">MPMediaTypeAny</span>];</div><div class=\"line\">        _mediaPicker.allowsPickingMultipleItems=<span class=\"literal\">YES</span>;<span class=\"comment\">//允许多选</span></div><div class=\"line\"><span class=\"comment\">//        _mediaPicker.showsCloudItems=YES;//显示icloud选项</span></div><div class=\"line\">        _mediaPicker.prompt=<span class=\"string\">@\"请选择要播放的音乐\"</span>;</div><div class=\"line\">        _mediaPicker.delegate=<span class=\"keyword\">self</span>;<span class=\"comment\">//设置选择器代理</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _mediaPicker;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  取得媒体队列</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 媒体队列</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">MPMediaQuery</span> *)getLocalMediaQuery&#123;</div><div class=\"line\">    <span class=\"built_in\">MPMediaQuery</span> *mediaQueue=[<span class=\"built_in\">MPMediaQuery</span> songsQuery];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">MPMediaItem</span> *item <span class=\"keyword\">in</span> mediaQueue.items) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"标题：%@,%@\"</span>,item.title,item.albumTitle);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> mediaQueue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  取得媒体集合</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 媒体集合</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">MPMediaItemCollection</span> *)getLocalMediaItemCollection&#123;</div><div class=\"line\">    <span class=\"built_in\">MPMediaQuery</span> *mediaQueue=[<span class=\"built_in\">MPMediaQuery</span> songsQuery];</div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *array=[<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">MPMediaItem</span> *item <span class=\"keyword\">in</span> mediaQueue.items) &#123;</div><div class=\"line\">        [array addObject:item];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"标题：%@,%@\"</span>,item.title,item.albumTitle);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">MPMediaItemCollection</span> *mediaItemCollection=[[<span class=\"built_in\">MPMediaItemCollection</span> alloc]initWithItems:[array <span class=\"keyword\">copy</span>]];</div><div class=\"line\">    <span class=\"keyword\">return</span> mediaItemCollection;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - MPMediaPickerController代理方法</span></div><div class=\"line\"><span class=\"comment\">//选择完成</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPicker:(<span class=\"built_in\">MPMediaPickerController</span> *)mediaPicker didPickMediaItems:(<span class=\"built_in\">MPMediaItemCollection</span> *)mediaItemCollection&#123;</div><div class=\"line\">    <span class=\"built_in\">MPMediaItem</span> *mediaItem=[mediaItemCollection.items firstObject];<span class=\"comment\">//第一个播放音乐</span></div><div class=\"line\">    <span class=\"comment\">//注意很多音乐信息如标题、专辑、表演者、封面、时长等信息都可以通过MPMediaItem的valueForKey:方法得到,但是从iOS7开始都有对应的属性可以直接访问</span></div><div class=\"line\"><span class=\"comment\">//    NSString *title= [mediaItem valueForKey:MPMediaItemPropertyAlbumTitle];</span></div><div class=\"line\"><span class=\"comment\">//    NSString *artist= [mediaItem valueForKey:MPMediaItemPropertyAlbumArtist];</span></div><div class=\"line\"><span class=\"comment\">//    MPMediaItemArtwork *artwork= [mediaItem valueForKey:MPMediaItemPropertyArtwork];</span></div><div class=\"line\">    <span class=\"comment\">//UIImage *image=[artwork imageWithSize:CGSizeMake(100, 100)];//专辑图片</span></div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"标题：%@,表演者：%@,专辑：%@\"</span>,mediaItem.title ,mediaItem.artist,mediaItem.albumTitle);</div><div class=\"line\">    [<span class=\"keyword\">self</span>.musicPlayer setQueueWithItemCollection:mediaItemCollection];</div><div class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//取消选择</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPickerDidCancel:(<span class=\"built_in\">MPMediaPickerController</span> *)mediaPicker&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 通知</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  添加通知</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)addNotification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSNotificationCenter</span> *notificationCenter=[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(playbackStateChange:) name:<span class=\"built_in\">MPMusicPlayerControllerPlaybackStateDidChangeNotification</span> object:<span class=\"keyword\">self</span>.musicPlayer];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  播放状态改变通知</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)playbackStateChange:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">self</span>.musicPlayer.playbackState) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMusicPlaybackStatePlaying</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"正在播放...\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMusicPlaybackStatePaused</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放暂停.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMusicPlaybackStateStopped</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放停止.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - UI事件</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)selectClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> presentViewController:<span class=\"keyword\">self</span>.mediaPicker animated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)playClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.musicPlayer play];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)puaseClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.musicPlayer pause];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)stopClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.musicPlayer stop];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)nextClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.musicPlayer skipToNextItem];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)prevClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.musicPlayer skipToPreviousItem];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">录音</div><div class=\"line\">除了上面说的，在<span class=\"built_in\">AVFoundation</span>框架中还要一个<span class=\"built_in\">AVAudioRecorder</span>类专门处理录音操作，它同样支持多种音频格式。与<span class=\"built_in\">AVAudioPlayer</span>类似，你完全可以将它看成是一个录音机控制类，下面是常用的属性和方法：</div><div class=\"line\">属性\t说明</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isRecording) <span class=\"built_in\">BOOL</span> recording;\t是否正在录音，只读</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSURL</span> *url\t录音文件地址，只读</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSDictionary</span> *settings\t录音文件设置，只读</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSTimeInterval</span> currentTime\t录音时长，只读，注意仅仅在录音状态可用</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSTimeInterval</span> deviceCurrentTime\t输入设置的时间长度，只读，注意此属性一直可访问</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">getter</span>=isMeteringEnabled) <span class=\"built_in\">BOOL</span> meteringEnabled;\t是否启用录音测量，如果启用录音测量可以获得录音分贝等数据信息</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSArray</span> *channelAssignments\t当前录音的通道</div><div class=\"line\">对象方法\t说明</div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithURL:(<span class=\"built_in\">NSURL</span> *)url settings:(<span class=\"built_in\">NSDictionary</span> *)settings error:(<span class=\"built_in\">NSError</span> **)outError\t录音机对象初始化方法，注意其中的url必须是本地文件url，settings是录音格式、编码等设置</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)prepareToRecord\t准备录音，主要用于创建缓冲区，如果不手动调用，在调用record录音时也会自动调用</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)record\t开始录音</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)recordAtTime:(<span class=\"built_in\">NSTimeInterval</span>)time\t在指定的时间开始录音，一般用于录音暂停再恢复录音</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)recordForDuration:(<span class=\"built_in\">NSTimeInterval</span>) duration\t按指定的时长开始录音</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)recordAtTime:(<span class=\"built_in\">NSTimeInterval</span>)time forDuration:(<span class=\"built_in\">NSTimeInterval</span>) duration\t在指定的时间开始录音，并指定录音时长</div><div class=\"line\">- (<span class=\"keyword\">void</span>)pause;\t暂停录音</div><div class=\"line\">- (<span class=\"keyword\">void</span>)stop;\t停止录音</div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)deleteRecording;\t删除录音，注意要删除录音此时录音机必须处于停止状态</div><div class=\"line\">- (<span class=\"keyword\">void</span>)updateMeters;\t更新测量数据，注意只有meteringEnabled为<span class=\"literal\">YES</span>此方法才可用</div><div class=\"line\">- (<span class=\"keyword\">float</span>)peakPowerForChannel:(<span class=\"built_in\">NSUInteger</span>)channelNumber;\t指定通道的测量峰值，注意只有调用完updateMeters才有值</div><div class=\"line\">- (<span class=\"keyword\">float</span>)averagePowerForChannel:(<span class=\"built_in\">NSUInteger</span>)channelNumber\t指定通道的测量平均值，注意只有调用完updateMeters才有值</div><div class=\"line\">代理方法\t说明</div><div class=\"line\">- (<span class=\"keyword\">void</span>)audioRecorderDidFinishRecording:(<span class=\"built_in\">AVAudioRecorder</span> *)recorder successfully:(<span class=\"built_in\">BOOL</span>)flag\t完成录音</div><div class=\"line\">- (<span class=\"keyword\">void</span>)audioRecorderEncodeErrorDidOccur:(<span class=\"built_in\">AVAudioRecorder</span> *)recorder error:(<span class=\"built_in\">NSError</span> *)error\t录音编码发生错误</div><div class=\"line\"><span class=\"built_in\">AVAudioRecorder</span>很多属性和方法跟<span class=\"built_in\">AVAudioPlayer</span>都是类似的,但是它的创建有所不同，在创建录音机时除了指定路径外还必须指定录音设置信息，因为录音机必须知道录音文件的格式、采样率、通道数、每个采样点的位数等信息，但是也并不是所有的信息都必须设置，通常只需要几个常用设置。关于录音设置详见帮助文档中的“AV Foundation Audio Settings Constants”。</div><div class=\"line\">下面就使用<span class=\"built_in\">AVAudioRecorder</span>创建一个录音机，实现了录音、暂停、停止、播放等功能，实现效果大致如下：</div><div class=\"line\"><span class=\"built_in\">AVAudioRecorderSnapshot</span></div><div class=\"line\">在这个示例中将实行一个完整的录音控制，包括录音、暂停、恢复、停止，同时还会实时展示用户录音的声音波动，当用户点击完停止按钮还会自动播放录音文件。程序的构建主要分为以下几步：</div><div class=\"line\">设置音频会话类型为<span class=\"built_in\">AVAudioSessionCategoryPlayAndRecord</span>，因为程序中牵扯到录音和播放操作。</div><div class=\"line\">创建录音机<span class=\"built_in\">AVAudioRecorder</span>，指定录音保存的路径并且设置录音属性，注意对于一般的录音文件要求的采样率、位数并不高，需要适当设置以保证录音文件的大小和效果。</div><div class=\"line\">设置录音机代理以便在录音完成后播放录音，打开录音测量保证能够实时获得录音时的声音强度。（注意声音强度范围<span class=\"number\">-160</span>到<span class=\"number\">0</span>,<span class=\"number\">0</span>代表最大输入）</div><div class=\"line\">创建音频播放器<span class=\"built_in\">AVAudioPlayer</span>，用于在录音完成之后播放录音。</div><div class=\"line\">创建一个定时器以便实时刷新录音测量值并更新录音强度到<span class=\"built_in\">UIProgressView</span>中显示。</div><div class=\"line\">添加录音、暂停、恢复、停止操作，需要注意录音的恢复操作其实是有音频会话管理的，恢复时只要再次调用record方法即可，无需手动管理恢复时间等。</div><div class=\"line\">下面是主要代码：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  AVAudioRecorder</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#define kRecordAudioFile @<span class=\"meta-string\">\"myRecord.caf\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()&lt;<span class=\"title\">AVAudioRecorderDelegate</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">AVAudioRecorder</span> *audioRecorder;<span class=\"comment\">//音频录音机</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">AVAudioPlayer</span> *audioPlayer;<span class=\"comment\">//音频播放器，用于播放录音文件</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">NSTimer</span> *timer;<span class=\"comment\">//录音声波监控（注意这里暂时不对播放进行监控）</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *record;<span class=\"comment\">//开始录音</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *pause;<span class=\"comment\">//暂停录音</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *resume;<span class=\"comment\">//恢复录音</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *stop;<span class=\"comment\">//停止录音</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIProgressView</span> *audioPower;<span class=\"comment\">//音频波动</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器视图方法</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span> setAudioSession];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  设置音频会话</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)setAudioSession&#123;</div><div class=\"line\">    <span class=\"built_in\">AVAudioSession</span> *audioSession=[<span class=\"built_in\">AVAudioSession</span> sharedInstance];</div><div class=\"line\">    <span class=\"comment\">//设置为播放和录音状态，以便可以在录制完之后播放录音</span></div><div class=\"line\">    [audioSession setCategory:<span class=\"built_in\">AVAudioSessionCategoryPlayAndRecord</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">    [audioSession setActive:<span class=\"literal\">YES</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  取得录音文件保存路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 录音文件路径</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getSavePath&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=[<span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>) lastObject];</div><div class=\"line\">    urlStr=[urlStr stringByAppendingPathComponent:kRecordAudioFile];</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"file path:%@\"</span>,urlStr);</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  取得录音文件设置</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 录音设置</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">NSDictionary</span> *)getAudioSetting&#123;</div><div class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *dicM=[<span class=\"built_in\">NSMutableDictionary</span> dictionary];</div><div class=\"line\">    <span class=\"comment\">//设置录音格式</span></div><div class=\"line\">    [dicM setObject:@(kAudioFormatLinearPCM) forKey:<span class=\"built_in\">AVFormatIDKey</span>];</div><div class=\"line\">    <span class=\"comment\">//设置录音采样率，8000是电话采样率，对于一般录音已经够了</span></div><div class=\"line\">    [dicM setObject:@(<span class=\"number\">8000</span>) forKey:<span class=\"built_in\">AVSampleRateKey</span>];</div><div class=\"line\">    <span class=\"comment\">//设置通道,这里采用单声道</span></div><div class=\"line\">    [dicM setObject:@(<span class=\"number\">1</span>) forKey:<span class=\"built_in\">AVNumberOfChannelsKey</span>];</div><div class=\"line\">    <span class=\"comment\">//每个采样点位数,分为8、16、24、32</span></div><div class=\"line\">    [dicM setObject:@(<span class=\"number\">8</span>) forKey:<span class=\"built_in\">AVLinearPCMBitDepthKey</span>];</div><div class=\"line\">    <span class=\"comment\">//是否使用浮点数采样</span></div><div class=\"line\">    [dicM setObject:@(<span class=\"literal\">YES</span>) forKey:<span class=\"built_in\">AVLinearPCMIsFloatKey</span>];</div><div class=\"line\">    <span class=\"comment\">//....其他设置等</span></div><div class=\"line\">    <span class=\"keyword\">return</span> dicM;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  获得录音机对象</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 录音机对象</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">AVAudioRecorder</span> *)audioRecorder&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_audioRecorder) &#123;</div><div class=\"line\">        <span class=\"comment\">//创建录音文件保存路径</span></div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"keyword\">self</span> getSavePath];</div><div class=\"line\">        <span class=\"comment\">//创建录音格式设置</span></div><div class=\"line\">        <span class=\"built_in\">NSDictionary</span> *setting=[<span class=\"keyword\">self</span> getAudioSetting];</div><div class=\"line\">        <span class=\"comment\">//创建录音机</span></div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error=<span class=\"literal\">nil</span>;</div><div class=\"line\">        _audioRecorder=[[<span class=\"built_in\">AVAudioRecorder</span> alloc]initWithURL:url settings:setting error:&amp;error];</div><div class=\"line\">        _audioRecorder.delegate=<span class=\"keyword\">self</span>;</div><div class=\"line\">        _audioRecorder.meteringEnabled=<span class=\"literal\">YES</span>;<span class=\"comment\">//如果要监控声波则必须设置为YES</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"创建录音机对象时发生错误，错误信息：%@\"</span>,error.localizedDescription);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _audioRecorder;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  创建播放器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 播放器</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">AVAudioPlayer</span> *)audioPlayer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_audioPlayer) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"keyword\">self</span> getSavePath];</div><div class=\"line\">        <span class=\"built_in\">NSError</span> *error=<span class=\"literal\">nil</span>;</div><div class=\"line\">        _audioPlayer=[[<span class=\"built_in\">AVAudioPlayer</span> alloc]initWithContentsOfURL:url error:&amp;error];</div><div class=\"line\">        _audioPlayer.numberOfLoops=<span class=\"number\">0</span>;</div><div class=\"line\">        [_audioPlayer prepareToPlay];</div><div class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"创建播放器过程中发生错误，错误信息：%@\"</span>,error.localizedDescription);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _audioPlayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  录音声波监控定制器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 定时器</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">NSTimer</span> *)timer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_timer) &#123;</div><div class=\"line\">        _timer=[<span class=\"built_in\">NSTimer</span> scheduledTimerWithTimeInterval:<span class=\"number\">0.1</span>f target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(audioPowerChange) userInfo:<span class=\"literal\">nil</span> repeats:<span class=\"literal\">YES</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _timer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  录音声波状态设置</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)audioPowerChange&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.audioRecorder updateMeters];<span class=\"comment\">//更新测量值</span></div><div class=\"line\">    <span class=\"keyword\">float</span> power= [<span class=\"keyword\">self</span>.audioRecorder averagePowerForChannel:<span class=\"number\">0</span>];<span class=\"comment\">//取得第一个通道的音频，注意音频强度范围时-160到0</span></div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> progress=(<span class=\"number\">1.0</span>/<span class=\"number\">160.0</span>)*(power+<span class=\"number\">160.0</span>);</div><div class=\"line\">    [<span class=\"keyword\">self</span>.audioPower setProgress:progress];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark - UI事件</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  点击录音按钮</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 录音按钮</div><div class=\"line\"> */</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)recordClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (![<span class=\"keyword\">self</span>.audioRecorder isRecording]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.audioRecorder record];<span class=\"comment\">//首次使用应用时如果调用record方法会询问用户是否允许使用麦克风</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.timer.fireDate=[<span class=\"built_in\">NSDate</span> distantPast];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  点击暂定按钮</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 暂停按钮</div><div class=\"line\"> */</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)pauseClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.audioRecorder isRecording]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.audioRecorder pause];</div><div class=\"line\">        <span class=\"keyword\">self</span>.timer.fireDate=[<span class=\"built_in\">NSDate</span> distantFuture];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  点击恢复按钮</div><div class=\"line\"> *  恢复录音只需要再次调用record，AVAudioSession会帮助你记录上次录音位置并追加录音</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 恢复按钮</div><div class=\"line\"> */</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)resumeClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> recordClick:sender];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  点击停止按钮</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 停止按钮</div><div class=\"line\"> */</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)stopClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.audioRecorder stop];</div><div class=\"line\">    <span class=\"keyword\">self</span>.timer.fireDate=[<span class=\"built_in\">NSDate</span> distantFuture];</div><div class=\"line\">    <span class=\"keyword\">self</span>.audioPower.progress=<span class=\"number\">0.0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 录音机代理方法</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  录音完成，录音完成后播放录音</div><div class=\"line\"> *</div><div class=\"line\"> *  @param recorder 录音机对象</div><div class=\"line\"> *  @param flag     是否成功</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)audioRecorderDidFinishRecording:(<span class=\"built_in\">AVAudioRecorder</span> *)recorder successfully:(<span class=\"built_in\">BOOL</span>)flag&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (![<span class=\"keyword\">self</span>.audioPlayer isPlaying]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.audioPlayer play];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"录音完成!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">运行效果：</div><div class=\"line\"><span class=\"built_in\">AVAudioRecorder</span></div><div class=\"line\">音频队列服务</div><div class=\"line\">大家应该已经注意到了，无论是前面的录音还是音频播放均不支持网络流媒体播放，当然对于录音来说这种需求可能不大，但是对于音频播放来说有时候就很有必要了。<span class=\"built_in\">AVAudioPlayer</span>只能播放本地文件，并且是一次性加载所以音频数据，初始化<span class=\"built_in\">AVAudioPlayer</span>时指定的URL也只能是File URL而不能是HTTP URL。当然，将音频文件下载到本地然后再调用<span class=\"built_in\">AVAudioPlayer</span>来播放也是一种播放网络音频的办法，但是这种方式最大的弊端就是必须等到整个音频播放完成才能播放，而不能使用流式播放，这往往在实际开发中是不切实际的。那么在iOS中如何播放网络流媒体呢？就是使用AudioToolbox框架中的音频队列服务Audio Queue Services。</div><div class=\"line\">使用音频队列服务完全可以做到音频播放和录制，首先看一下录音音频服务队列：</div><div class=\"line\">recording_architecture_2x</div><div class=\"line\">一个音频服务队列Audio Queue有三部分组成：</div><div class=\"line\">三个缓冲器Buffers:每个缓冲器都是一个存储音频数据的临时仓库。</div><div class=\"line\">一个缓冲队列Buffer Queue:一个包含音频缓冲器的有序队列。</div><div class=\"line\">一个回调Callback:一个自定义的队列回调函数。</div><div class=\"line\">声音通过输入设备进入缓冲队列中，首先填充第一个缓冲器；当第一个缓冲器填充满之后自动填充下一个缓冲器，同时会调用回调函数；在回调函数中需要将缓冲器中的音频数据写入磁盘，同时将缓冲器放回到缓冲队列中以便重用。下面是Apple官方关于音频队列服务的流程示意图：</div><div class=\"line\">recording_callback_function_2x</div><div class=\"line\">类似的，看一下音频播放缓冲队列，其组成部分和录音缓冲队列类似。</div><div class=\"line\">playback_architecture_2x</div><div class=\"line\">但是在音频播放缓冲队列中，回调函数调用的时机不同于音频录制缓冲队列，流程刚好相反。将音频读取到缓冲器中，一旦一个缓冲器填充满之后就放到缓冲队列中，然后继续填充其他缓冲器；当开始播放时，则从第一个缓冲器中读取音频进行播放；一旦播放完之后就会触发回调函数，开始播放下一个缓冲器中的音频，同时填充第一个缓冲器放；填充满之后再次放回到缓冲队列。下面是详细的流程：</div><div class=\"line\">playback_callback_function_2x</div><div class=\"line\">当然，要明白音频队列服务的原理并不难，问题是如何实现这个自定义的回调函数，这其中我们有大量的工作要做，控制播放状态、处理异常中断、进行音频编码等等。由于牵扯内容过多，而且不是本文目的，如果以后有时间将另开一篇文章重点介绍，目前有很多第三方优秀框架可以直接使用，例如AudioStreamer、FreeStreamer。由于前者当前只有非ARC版本，所以下面不妨使用FreeStreamer来简单演示在线音频播放的过程，当然在使用之前要做如下准备工作：</div><div class=\"line\"><span class=\"number\">1.</span>拷贝FreeStreamer中的Reachability.h、Reachability.m和Common、astreamer两个文件夹中的内容到项目中。</div><div class=\"line\"><span class=\"number\">2.</span>添加FreeStreamer使用的类库：<span class=\"built_in\">CFNetwork</span>.framework、AudioToolbox.framework、<span class=\"built_in\">AVFoundation</span>.framework</div><div class=\"line\">、libxml2.dylib、MediaPlayer.framework。</div><div class=\"line\"><span class=\"number\">3.</span>如果引用libxml2.dylib编译不通过，需要在Xcode的Targets-Build Settings-Header Build Path中添加$(SDKROOT)/usr/include/libxml2。</div><div class=\"line\"><span class=\"number\">4.</span>将FreeStreamer中的FreeStreamerMobile-Prefix.pch文件添加到项目中并将Targets-Build Settings-Precompile Prefix Header设置为<span class=\"literal\">YES</span>，在Targets-Build Settings-Prefix Header设置为$(SRCROOT)/项目名称/FreeStreamerMobile-Prefix.pch（因为Xcode6默认没有pch文件）</div><div class=\"line\">然后就可以编写代码播放网络音频了：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  AudioQueueServices</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//  使用FreeStreamer实现网络音频播放</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"FSAudioStream.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) FSAudioStream *audioStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">    [<span class=\"keyword\">self</span>.audioStream play];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  取得本地文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getFileUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=[[<span class=\"built_in\">NSBundle</span> mainBundle]pathForResource:<span class=\"string\">@\"刘若英 - 原来你也在这里.mp3\"</span> ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getNetworkUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=<span class=\"string\">@\"http://192.168.1.102/liu.mp3\"</span>;</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> URLWithString:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  创建FSAudioStream对象</div><div class=\"line\"> *</div><div class=\"line\"> *  @return FSAudioStream对象</div><div class=\"line\"> */</span></div><div class=\"line\">-(FSAudioStream *)audioStream&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_audioStream) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"keyword\">self</span> getNetworkUrl];</div><div class=\"line\">        <span class=\"comment\">//创建FSAudioStream对象</span></div><div class=\"line\">        _audioStream=[[FSAudioStream alloc]initWithUrl:url];</div><div class=\"line\">        _audioStream.onFailure=^(FSAudioStreamError error,<span class=\"built_in\">NSString</span> *description)&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放过程中发生错误，错误信息：%@\"</span>,description);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        _audioStream.onCompletion=^()&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放完成!\"</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        [_audioStream setVolume:<span class=\"number\">0.5</span>];<span class=\"comment\">//设置声音</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _audioStream;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">其实FreeStreamer的功能很强大，不仅仅是播放本地、网络音频那么简单，它还支持播放列表、检查包内容、RSS订阅、播放中断等很多强大的功能，甚至还包含了一个音频分析器，有兴趣的朋友可以访问官网查看详细用法</div><div class=\"line\">视频</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerController</span></div><div class=\"line\">在iOS中播放视频可以使用MediaPlayer.framework种的<span class=\"built_in\">MPMoviePlayerController</span>类来完成，它支持本地视频和网络视频播放。这个类实现了<span class=\"built_in\">MPMediaPlayback</span>协议，因此具备一般的播放器控制功能，例如播放、暂停、停止等。但是<span class=\"built_in\">MPMediaPlayerController</span>自身并不是一个完整的视图控制器，如果要在UI中展示视频需要将view属性添加到界面中。下面列出了<span class=\"built_in\">MPMoviePlayerController</span>的常用属性和方法：</div><div class=\"line\">属性\t说明</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSURL</span> *contentURL\t播放媒体URL，这个URL可以是本地路径，也可以是网络路径</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UIView</span> *view\t播放器视图，如果要显示视频必须将此视图添加到控制器视图中</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UIView</span> *backgroundView\t播放器背景视图</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">MPMoviePlaybackState</span> playbackState\t媒体播放状态，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMoviePlaybackStateStopped</span>：停止播放</div><div class=\"line\"><span class=\"built_in\">MPMoviePlaybackStatePlaying</span>：正在播放</div><div class=\"line\"><span class=\"built_in\">MPMoviePlaybackStatePaused</span>：暂停</div><div class=\"line\"><span class=\"built_in\">MPMoviePlaybackStateInterrupted</span>：中断</div><div class=\"line\"><span class=\"built_in\">MPMoviePlaybackStateSeekingForward</span>：向前定位</div><div class=\"line\"><span class=\"built_in\">MPMoviePlaybackStateSeekingBackward</span>：向后定位</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">MPMovieLoadState</span> loadState\t网络媒体加载状态，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMovieLoadStateUnknown</span>：位置类型</div><div class=\"line\"><span class=\"built_in\">MPMovieLoadStatePlayable</span>：</div><div class=\"line\"><span class=\"built_in\">MPMovieLoadStatePlaythroughOK</span>：这种状态如果shouldAutoPlay为<span class=\"literal\">YES</span>将自动播放</div><div class=\"line\"><span class=\"built_in\">MPMovieLoadStateStalled</span>：停滞状态</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">MPMovieControlStyle</span> controlStyle\t控制面板风格，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMovieControlStyleNone</span>：无控制面板 </div><div class=\"line\"><span class=\"built_in\">MPMovieControlStyleEmbedded</span>：嵌入视频风格 </div><div class=\"line\"><span class=\"built_in\">MPMovieControlStyleFullscreen</span>：全屏 </div><div class=\"line\"><span class=\"built_in\">MPMovieControlStyleDefault</span>：默认风格</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">MPMovieRepeatMode</span> repeatMode;\t重复播放模式，枚举类型:</div><div class=\"line\"><span class=\"built_in\">MPMovieRepeatModeNone</span>:不重复，默认值</div><div class=\"line\"><span class=\"built_in\">MPMovieRepeatModeOne</span>:重复播放</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">BOOL</span> shouldAutoplay\t当网络媒体缓存到一定数据时是否自动播放，默认为<span class=\"literal\">YES</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">getter</span>=isFullscreen) <span class=\"built_in\">BOOL</span> fullscreen\t是否全屏展示，默认为<span class=\"literal\">NO</span>，注意如果要通过此属性设置全屏必须在视图显示完成后设置，否则无效</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">MPMovieScalingMode</span> scalingMode\t视频缩放填充模式，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMovieScalingModeNone</span>：不进行任何缩放</div><div class=\"line\"><span class=\"built_in\">MPMovieScalingModeAspectFit</span>：固定缩放比例并且尽量全部展示视频，不会裁切视频</div><div class=\"line\"><span class=\"built_in\">MPMovieScalingModeAspectFill</span>：固定缩放比例并填充满整个视图展示，可能会裁切视频</div><div class=\"line\"><span class=\"built_in\">MPMovieScalingModeFill</span>：不固定缩放比例压缩填充整个视图，视频不会被裁切但是比例失衡</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">BOOL</span> readyForDisplay\t是否有相关媒体被播放</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">MPMovieMediaTypeMask</span> movieMediaTypes\t媒体类别，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMovieMediaTypeMaskNone</span>：未知类型</div><div class=\"line\"><span class=\"built_in\">MPMovieMediaTypeMaskVideo</span>：视频</div><div class=\"line\"><span class=\"built_in\">MPMovieMediaTypeMaskAudio</span>：音频</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">MPMovieSourceType</span> movieSourceType\t媒体源，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMovieSourceTypeUnknown</span>：未知来源</div><div class=\"line\"><span class=\"built_in\">MPMovieSourceTypeFile</span>：本地文件</div><div class=\"line\"><span class=\"built_in\">MPMovieSourceTypeStreaming</span>：流媒体（直播或点播）</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSTimeInterval</span> duration\t媒体时长，如果未知则返回<span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSTimeInterval</span> playableDuration\t媒体可播放时长，主要用于表示网络媒体已下载视频时长</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">CGSize</span> naturalSize\t视频实际尺寸，如果未知则返回<span class=\"built_in\">CGSizeZero</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> initialPlaybackTime\t起始播放时间</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> endPlaybackTime\t终止播放时间</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">BOOL</span> allowsAirPlay\t是否允许无线播放，默认为<span class=\"literal\">YES</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isAirPlayVideoActive) <span class=\"built_in\">BOOL</span> airPlayVideoActive\t当前媒体是否正在通过AirPlay播放</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">BOOL</span> isPreparedToPlay\t是否准备好播放</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSTimeInterval</span> currentPlaybackTime\t当前播放时间，单位：秒</div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">float</span> currentPlaybackRate\t当前播放速度，如果暂停则为<span class=\"number\">0</span>，正常速度为<span class=\"number\">1.0</span>，非<span class=\"number\">0</span>数据表示倍率</div><div class=\"line\">对象方法\t说明</div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithContentURL:(<span class=\"built_in\">NSURL</span> *)url\t使用指定的URL初始化媒体播放控制器对象</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setFullscreen:(<span class=\"built_in\">BOOL</span>)fullscreen animated:(<span class=\"built_in\">BOOL</span>)animated\t设置视频全屏，注意如果要通过此方法设置全屏则必须在其视图显示之后设置，否则无效</div><div class=\"line\">- (<span class=\"keyword\">void</span>)requestThumbnailImagesAtTimes:(<span class=\"built_in\">NSArray</span> *)playbackTimes timeOption:(<span class=\"built_in\">MPMovieTimeOption</span>)option\t获取在指定播放时间的视频缩略图，第一个参数是获取缩略图的时间点数组；第二个参数代表时间点精度，枚举类型：</div><div class=\"line\"><span class=\"built_in\">MPMovieTimeOptionNearestKeyFrame</span>：时间点附近</div><div class=\"line\"><span class=\"built_in\">MPMovieTimeOptionExact</span>：准确时间</div><div class=\"line\">- (<span class=\"keyword\">void</span>)cancelAllThumbnailImageRequests\t取消所有缩略图获取请求</div><div class=\"line\">- (<span class=\"keyword\">void</span>)prepareToPlay\t准备播放，加载视频数据到缓存，当调用play方法时如果没有准备好会自动调用此方法</div><div class=\"line\">- (<span class=\"keyword\">void</span>)play\t开始播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)pause\t暂停播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)stop\t停止播放</div><div class=\"line\">- (<span class=\"keyword\">void</span>)beginSeekingForward\t向前定位</div><div class=\"line\">- (<span class=\"keyword\">void</span>)beginSeekingBackward\t向后定位</div><div class=\"line\">- (<span class=\"keyword\">void</span>)endSeeking\t停止快进/快退</div><div class=\"line\">通知\t说明</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerScalingModeDidChangeNotification</span>\t视频缩放填充模式发生改变</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span>\t媒体播放完成或用户手动退出，具体完成原因可以通过通知userInfo中的key为<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishReasonUserInfoKey</span>的对象获取</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerPlaybackStateDidChangeNotification</span>\t播放状态改变，可配合playbakcState属性获取具体状态</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerLoadStateDidChangeNotification</span>\t媒体网络加载状态改变</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerNowPlayingMovieDidChangeNotification</span>\t当前播放的媒体内容发生改变</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerWillEnterFullscreenNotification</span>\t将要进入全屏</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerDidEnterFullscreenNotification</span>\t进入全屏后</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerWillExitFullscreenNotification</span>\t将要退出全屏</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerDidExitFullscreenNotification</span>\t退出全屏后</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerIsAirPlayVideoActiveDidChangeNotification</span>\t当媒体开始通过AirPlay播放或者结束AirPlay播放</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerReadyForDisplayDidChangeNotification</span>\t视频显示状态改变</div><div class=\"line\"><span class=\"built_in\">MPMovieMediaTypesAvailableNotification</span>\t确定了媒体可用类型后</div><div class=\"line\"><span class=\"built_in\">MPMovieSourceTypeAvailableNotification</span>\t确定了媒体来源后</div><div class=\"line\"><span class=\"built_in\">MPMovieDurationAvailableNotification</span>\t确定了媒体播放时长后</div><div class=\"line\"><span class=\"built_in\">MPMovieNaturalSizeAvailableNotification</span>\t确定了媒体的实际尺寸后</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerThumbnailImageRequestDidFinishNotification</span>\t缩略图请求完成之后</div><div class=\"line\"><span class=\"built_in\">MPMediaPlaybackIsPreparedToPlayDidChangeNotification</span>\t做好播放准备后</div><div class=\"line\">注意<span class=\"built_in\">MPMediaPlayerController</span>的状态等信息并不是通过代理来和外界交互的，而是通过通知中心，因此从上面的列表中可以看到常用的一些通知。由于<span class=\"built_in\">MPMoviePlayerController</span>本身对于媒体播放做了深度的封装，使用起来就相当简单：创建<span class=\"built_in\">MPMoviePlayerController</span>对象，设置frame属性，将<span class=\"built_in\">MPMoviePlayerController</span>的view添加到控制器视图中。下面的示例中将创建一个播放控制器并添加播放状态改变及播放完成的通知：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  MPMoviePlayerController</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">MPMoviePlayerController</span> *moviePlayer;<span class=\"comment\">//视频播放控制器</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器视图方法</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//播放</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.moviePlayer play];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//添加通知</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> addNotification];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc&#123;</div><div class=\"line\">    <span class=\"comment\">//移除所有通知监控</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  取得本地文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getFileUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=[[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"The New Look of OS X Yosemite.mp4\"</span> ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  取得网络文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getNetworkUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=<span class=\"string\">@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\"</span>;</div><div class=\"line\">    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> URLWithString:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  创建媒体播放控制器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 媒体播放控制器</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">MPMoviePlayerController</span> *)moviePlayer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_moviePlayer) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"keyword\">self</span> getNetworkUrl];</div><div class=\"line\">        _moviePlayer=[[<span class=\"built_in\">MPMoviePlayerController</span> alloc]initWithContentURL:url];</div><div class=\"line\">        _moviePlayer.view.frame=<span class=\"keyword\">self</span>.view.bounds;</div><div class=\"line\">        _moviePlayer.view.autoresizingMask=<span class=\"built_in\">UIViewAutoresizingFlexibleWidth</span>|<span class=\"built_in\">UIViewAutoresizingFlexibleHeight</span>;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.view addSubview:_moviePlayer.view];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _moviePlayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  添加通知监控媒体播放控制器状态</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)addNotification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSNotificationCenter</span> *notificationCenter=[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(mediaPlayerPlaybackStateChange:) name:<span class=\"built_in\">MPMoviePlayerPlaybackStateDidChangeNotification</span> object:<span class=\"keyword\">self</span>.moviePlayer];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(mediaPlayerPlaybackFinished:) name:<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span> object:<span class=\"keyword\">self</span>.moviePlayer];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  播放状态改变，注意播放完成时的状态是暂停</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPlayerPlaybackStateChange:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">self</span>.moviePlayer.playbackState) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStatePlaying</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"正在播放...\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStatePaused</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"暂停播放.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStateStopped</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"停止播放.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放状态:%li\"</span>,<span class=\"keyword\">self</span>.moviePlayer.playbackState);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  播放完成</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPlayerPlaybackFinished:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放完成.%li\"</span>,<span class=\"keyword\">self</span>.moviePlayer.playbackState);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">运行效果：</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerController</span></div><div class=\"line\">从上面的API大家也不难看出其实<span class=\"built_in\">MPMoviePlayerController</span>功能相当强大，日常开发中作为一般的媒体播放器也完全没有问题。<span class=\"built_in\">MPMoviePlayerController</span>除了一般的视频播放和控制外还有一些强大的功能，例如截取视频缩略图。请求视频缩略图时只要调用- (<span class=\"keyword\">void</span>)requestThumbnailImagesAtTimes:(<span class=\"built_in\">NSArray</span> *)playbackTimes timeOption:(<span class=\"built_in\">MPMovieTimeOption</span>)option方法指定获得缩略图的时间点，然后监控<span class=\"built_in\">MPMoviePlayerThumbnailImageRequestDidFinishNotification</span>通知，每个时间点的缩略图请求完成就会调用通知，在通知调用方法中可以通过<span class=\"built_in\">MPMoviePlayerThumbnailImageKey</span>获得<span class=\"built_in\">UIImage</span>对象处理即可。例如下面的程序演示了在程序启动后获得两个时间点的缩略图的过程，截图成功后保存到相册：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  MPMoviePlayerController</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//  视频截图</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">MPMoviePlayerController</span> *moviePlayer;<span class=\"comment\">//视频播放控制器</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器视图方法</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//播放</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.moviePlayer play];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//添加通知</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> addNotification];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//获取缩略图</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> thumbnailImageRequest];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc&#123;</div><div class=\"line\">    <span class=\"comment\">//移除所有通知监控</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  取得本地文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getFileUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=[[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"The New Look of OS X Yosemite.mp4\"</span> ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  取得网络文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getNetworkUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=<span class=\"string\">@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\"</span>;</div><div class=\"line\">    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> URLWithString:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  创建媒体播放控制器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 媒体播放控制器</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">MPMoviePlayerController</span> *)moviePlayer&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_moviePlayer) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"keyword\">self</span> getNetworkUrl];</div><div class=\"line\">        _moviePlayer=[[<span class=\"built_in\">MPMoviePlayerController</span> alloc]initWithContentURL:url];</div><div class=\"line\">        _moviePlayer.view.frame=<span class=\"keyword\">self</span>.view.bounds;</div><div class=\"line\">        _moviePlayer.view.autoresizingMask=<span class=\"built_in\">UIViewAutoresizingFlexibleWidth</span>|<span class=\"built_in\">UIViewAutoresizingFlexibleHeight</span>;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.view addSubview:_moviePlayer.view];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _moviePlayer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  获取视频缩略图</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)thumbnailImageRequest&#123;</div><div class=\"line\">    <span class=\"comment\">//获取13.0s、21.5s的缩略图</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.moviePlayer requestThumbnailImagesAtTimes:@[@<span class=\"number\">13.0</span>,@<span class=\"number\">21.5</span>] timeOption:<span class=\"built_in\">MPMovieTimeOptionNearestKeyFrame</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器通知</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  添加通知监控媒体播放控制器状态</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)addNotification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSNotificationCenter</span> *notificationCenter=[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(mediaPlayerPlaybackStateChange:) name:<span class=\"built_in\">MPMoviePlayerPlaybackStateDidChangeNotification</span> object:<span class=\"keyword\">self</span>.moviePlayer];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(mediaPlayerPlaybackFinished:) name:<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span> object:<span class=\"keyword\">self</span>.moviePlayer];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(mediaPlayerThumbnailRequestFinished:) name:<span class=\"built_in\">MPMoviePlayerThumbnailImageRequestDidFinishNotification</span> object:<span class=\"keyword\">self</span>.moviePlayer];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  播放状态改变，注意播放完成时的状态是暂停</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPlayerPlaybackStateChange:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">self</span>.moviePlayer.playbackState) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStatePlaying</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"正在播放...\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStatePaused</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"暂停播放.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStateStopped</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"停止播放.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放状态:%li\"</span>,<span class=\"keyword\">self</span>.moviePlayer.playbackState);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  播放完成</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPlayerPlaybackFinished:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放完成.%li\"</span>,<span class=\"keyword\">self</span>.moviePlayer.playbackState);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  缩略图请求完成,此方法每次截图成功都会调用一次</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPlayerThumbnailRequestFinished:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"视频截图完成.\"</span>);</div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image=notification.userInfo[<span class=\"built_in\">MPMoviePlayerThumbnailImageKey</span>];</div><div class=\"line\">    <span class=\"comment\">//保存图片到相册(首次调用会请求用户获得访问相册权限)</span></div><div class=\"line\">    <span class=\"built_in\">UIImageWriteToSavedPhotosAlbum</span>(image, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">截图效果：</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerController_Thumbnail1</span>     <span class=\"built_in\">MPMoviePlayerController_Thumbnail2</span></div><div class=\"line\">扩展--使用<span class=\"built_in\">AVFoundation</span>生成缩略图</div><div class=\"line\">通过前面的方法大家应该已经看到，使用<span class=\"built_in\">MPMoviePlayerController</span>来生成缩略图足够简单，但是如果仅仅是是为了生成缩略图而不进行视频播放的话，此刻使用<span class=\"built_in\">MPMoviePlayerController</span>就有点大材小用了。其实使用<span class=\"built_in\">AVFundation</span>框架中的<span class=\"built_in\">AVAssetImageGenerator</span>就可以获取视频缩略图。使用<span class=\"built_in\">AVAssetImageGenerator</span>获取缩略图大致分为三个步骤：</div><div class=\"line\">创建<span class=\"built_in\">AVURLAsset</span>对象（此类主要用于获取媒体信息，包括视频、声音等）。</div><div class=\"line\">根据<span class=\"built_in\">AVURLAsset</span>创建<span class=\"built_in\">AVAssetImageGenerator</span>对象。</div><div class=\"line\">使用<span class=\"built_in\">AVAssetImageGenerator</span>的copyCGImageAtTime::方法获得指定时间点的截图。</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  AVAssetImageGenerator</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//获取第13.0s的缩略图</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> thumbnailImageRequest:<span class=\"number\">13.0</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  取得本地文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getFileUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=[[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"The New Look of OS X Yosemite.mp4\"</span> ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  取得网络文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getNetworkUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=<span class=\"string\">@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\"</span>;</div><div class=\"line\">    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> URLWithString:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  截取指定时间的视频缩略图</div><div class=\"line\"> *</div><div class=\"line\"> *  @param timeBySecond 时间点</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)thumbnailImageRequest:(<span class=\"built_in\">CGFloat</span> )timeBySecond&#123;</div><div class=\"line\">    <span class=\"comment\">//创建URL</span></div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"keyword\">self</span> getNetworkUrl];</div><div class=\"line\">    <span class=\"comment\">//根据url创建AVURLAsset</span></div><div class=\"line\">    <span class=\"built_in\">AVURLAsset</span> *urlAsset=[<span class=\"built_in\">AVURLAsset</span> assetWithURL:url];</div><div class=\"line\">    <span class=\"comment\">//根据AVURLAsset创建AVAssetImageGenerator</span></div><div class=\"line\">    <span class=\"built_in\">AVAssetImageGenerator</span> *imageGenerator=[<span class=\"built_in\">AVAssetImageGenerator</span> assetImageGeneratorWithAsset:urlAsset];</div><div class=\"line\">    <span class=\"comment\">/*截图</div><div class=\"line\">     * requestTime:缩略图创建时间</div><div class=\"line\">     * actualTime:缩略图实际生成的时间</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"built_in\">NSError</span> *error=<span class=\"literal\">nil</span>;</div><div class=\"line\">    <span class=\"built_in\">CMTime</span> time=<span class=\"built_in\">CMTimeMakeWithSeconds</span>(timeBySecond, <span class=\"number\">10</span>);<span class=\"comment\">//CMTime是表示电影时间信息的结构体，第一个参数表示是视频第几秒，第二个参数表示每秒帧数.(如果要活的某一秒的第几帧可以使用CMTimeMake方法)</span></div><div class=\"line\">    <span class=\"built_in\">CMTime</span> actualTime;</div><div class=\"line\">    <span class=\"built_in\">CGImageRef</span> cgImage= [imageGenerator copyCGImageAtTime:time actualTime:&amp;actualTime error:&amp;error];</div><div class=\"line\">    <span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"截取视频缩略图时发生错误，错误信息：%@\"</span>,error.localizedDescription);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">CMTimeShow</span>(actualTime);</div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image=[<span class=\"built_in\">UIImage</span> imageWithCGImage:cgImage];<span class=\"comment\">//转化为UIImage</span></div><div class=\"line\">    <span class=\"comment\">//保存到相册</span></div><div class=\"line\">    <span class=\"built_in\">UIImageWriteToSavedPhotosAlbum</span>(image,<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>);</div><div class=\"line\">    <span class=\"built_in\">CGImageRelease</span>(cgImage);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">生成的缩略图效果：</div><div class=\"line\"><span class=\"built_in\">AVAssetImageGenerator_Thumbnail</span></div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerViewController</span></div><div class=\"line\">其实<span class=\"built_in\">MPMoviePlayerController</span>如果不作为嵌入视频来播放（例如在新闻中嵌入一个视频），通常在播放时都是占满一个屏幕的，特别是在iPhone、iTouch上。因此从iOS3<span class=\"number\">.2</span>以后苹果也在思考既然<span class=\"built_in\">MPMoviePlayerController</span>在使用时通常都是将其视图view添加到另外一个视图控制器中作为子视图，那么何不直接创建一个控制器视图内部创建一个<span class=\"built_in\">MPMoviePlayerController</span>属性并且默认全屏播放，开发者在开发的时候直接使用这个视图控制器。这个内部有一个<span class=\"built_in\">MPMoviePlayerController</span>的视图控制器就是<span class=\"built_in\">MPMoviePlayerViewController</span>，它继承于<span class=\"built_in\">UIViewController</span>。<span class=\"built_in\">MPMoviePlayerViewController</span>内部多了一个moviePlayer属性和一个带有url的初始化方法，同时它内部实现了一些作为模态视图展示所特有的功能，例如默认是全屏模式展示、弹出后自动播放、作为模态窗口展示时如果点击“Done”按钮会自动退出模态窗口等。在下面的示例中就不直接将播放器放到主视图控制器，而是放到一个模态视图控制器中，简单演示<span class=\"built_in\">MPMoviePlayerViewController</span>的使用。</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  MPMoviePlayerViewController</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//  MPMoviePlayerViewController使用</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//播放器视图控制器</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">MPMoviePlayerViewController</span> *moviePlayerViewController;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器视图方法</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc&#123;</div><div class=\"line\">    <span class=\"comment\">//移除所有通知监控</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  取得本地文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getFileUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=[[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"The New Look of OS X Yosemite.mp4\"</span> ofType:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> fileURLWithPath:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  取得网络文件路径</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 文件路径</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">NSURL</span> *)getNetworkUrl&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=<span class=\"string\">@\"http://192.168.1.161/The New Look of OS X Yosemite.mp4\"</span>;</div><div class=\"line\">    urlStr=[urlStr stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> URLWithString:urlStr];</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">MPMoviePlayerViewController</span> *)moviePlayerViewController&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_moviePlayerViewController) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *url=[<span class=\"keyword\">self</span> getNetworkUrl];</div><div class=\"line\">        _moviePlayerViewController=[[<span class=\"built_in\">MPMoviePlayerViewController</span> alloc]initWithContentURL:url];</div><div class=\"line\">        [<span class=\"keyword\">self</span> addNotification];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _moviePlayerViewController;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark - UI事件</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)playClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.moviePlayerViewController=<span class=\"literal\">nil</span>;<span class=\"comment\">//保证每次点击都重新创建视频播放控制器视图，避免再次点击时由于不播放的问题</span></div><div class=\"line\"><span class=\"comment\">//    [self presentViewController:self.moviePlayerViewController animated:YES completion:nil];</span></div><div class=\"line\">    <span class=\"comment\">//注意，在MPMoviePlayerViewController.h中对UIViewController扩展两个用于模态展示和关闭MPMoviePlayerViewController的方法，增加了一种下拉展示动画效果</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> presentMoviePlayerViewControllerAnimated:<span class=\"keyword\">self</span>.moviePlayerViewController];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器通知</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  添加通知监控媒体播放控制器状态</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)addNotification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSNotificationCenter</span> *notificationCenter=[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(mediaPlayerPlaybackStateChange:) name:<span class=\"built_in\">MPMoviePlayerPlaybackStateDidChangeNotification</span> object:<span class=\"keyword\">self</span>.moviePlayerViewController.moviePlayer];</div><div class=\"line\">    [notificationCenter addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(mediaPlayerPlaybackFinished:) name:<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span> object:<span class=\"keyword\">self</span>.moviePlayerViewController.moviePlayer];</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  播放状态改变，注意播放完成时的状态是暂停</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPlayerPlaybackStateChange:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">self</span>.moviePlayerViewController.moviePlayer.playbackState) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStatePlaying</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"正在播放...\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStatePaused</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"暂停播放.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">MPMoviePlaybackStateStopped</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"停止播放.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放状态:%li\"</span>,<span class=\"keyword\">self</span>.moviePlayerViewController.moviePlayer.playbackState);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  播放完成</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)mediaPlayerPlaybackFinished:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"播放完成.%li\"</span>,<span class=\"keyword\">self</span>.moviePlayerViewController.moviePlayer.playbackState);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">运行效果：</div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerViewController</span></div><div class=\"line\">这里需要强调一下，由于<span class=\"built_in\">MPMoviePlayerViewController</span>的初始化方法做了大量工作（例如设置URL、自动播放、添加点击Done完成的监控等），所以当再次点击播放弹出新的模态窗口的时如果不销毁之前的<span class=\"built_in\">MPMoviePlayerViewController</span>，那么新的对象就无法完成初始化，这样也就不能再次进行播放。</div><div class=\"line\"><span class=\"built_in\">AVPlayer</span></div><div class=\"line\"><span class=\"built_in\">MPMoviePlayerController</span>足够强大，几乎不用写几行代码就能完成一个播放器，但是正是由于它的高度封装使得要自定义这个播放器变得很复杂，甚至是不可能完成。例如有些时候需要自定义播放器的样式，那么如果要使用<span class=\"built_in\">MPMoviePlayerController</span>就不合适了，如果要对视频有自由的控制则可以使用<span class=\"built_in\">AVPlayer</span>。<span class=\"built_in\">AVPlayer</span>存在于<span class=\"built_in\">AVFoundation</span>中，它更加接近于底层，所以灵活性也更强：</div><div class=\"line\"><span class=\"built_in\">AVFoundation_Framework</span></div><div class=\"line\"><span class=\"built_in\">AVPlayer</span>本身并不能显示视频，而且它也不像<span class=\"built_in\">MPMoviePlayerController</span>有一个view属性。如果<span class=\"built_in\">AVPlayer</span>要显示必须创建一个播放器层<span class=\"built_in\">AVPlayerLayer</span>用于展示，播放器层继承于<span class=\"built_in\">CALayer</span>，有了<span class=\"built_in\">AVPlayerLayer</span>之添加到控制器视图的layer中即可。要使用<span class=\"built_in\">AVPlayer</span>首先了解一下几个常用的类：</div><div class=\"line\"><span class=\"built_in\">AVAsset</span>：主要用于获取多媒体信息，是一个抽象类，不能直接使用。</div><div class=\"line\"><span class=\"built_in\">AVURLAsset</span>：<span class=\"built_in\">AVAsset</span>的子类，可以根据一个URL路径创建一个包含媒体信息的<span class=\"built_in\">AVURLAsset</span>对象。</div><div class=\"line\"><span class=\"built_in\">AVPlayerItem</span>：一个媒体资源管理对象，管理者视频的一些基本信息和状态，一个<span class=\"built_in\">AVPlayerItem</span>对应着一个视频资源。</div><div class=\"line\">下面简单通过一个播放器来演示<span class=\"built_in\">AVPlayer</span>的使用，播放器的效果如下：</div><div class=\"line\"><span class=\"built_in\">AVPlayer_Thumbnail</span></div><div class=\"line\">在这个自定义的播放器中实现了视频播放、暂停、进度展示和视频列表功能，下面将对这些功能一一介绍。</div><div class=\"line\">首先说一下视频的播放、暂停功能，这也是最基本的功能，<span class=\"built_in\">AVPlayer</span>对应着两个方法play、pause来实现。但是关键问题是如何判断当前视频是否在播放，在前面的内容中无论是音频播放器还是视频播放器都有对应的状态来判断，但是<span class=\"built_in\">AVPlayer</span>却没有这样的状态属性，通常情况下可以通过判断播放器的播放速度来获得播放状态。如果rate为<span class=\"number\">0</span>说明是停止状态，<span class=\"number\">1</span>是则是正常播放状态。</div><div class=\"line\">其次要展示播放进度就没有其他播放器那么简单了。在前面的播放器中通常是使用通知来获得播放器的状态，媒体加载状态等，但是无论是<span class=\"built_in\">AVPlayer</span>还是<span class=\"built_in\">AVPlayerItem</span>（<span class=\"built_in\">AVPlayer</span>有一个属性currentItem是<span class=\"built_in\">AVPlayerItem</span>类型，表示当前播放的视频对象）都无法获得这些信息。当然<span class=\"built_in\">AVPlayerItem</span>是有通知的，但是对于获得播放状态和加载状态有用的通知只有一个：播放完成通知<span class=\"built_in\">AVPlayerItemDidPlayToEndTimeNotification</span>。在播放视频时，特别是播放网络视频往往需要知道视频加载情况、缓冲情况、播放情况，这些信息可以通过KVO监控<span class=\"built_in\">AVPlayerItem</span>的status、loadedTimeRanges属性来获得。当<span class=\"built_in\">AVPlayerItem</span>的status属性为<span class=\"built_in\">AVPlayerStatusReadyToPlay</span>是说明正在播放，只有处于这个状态时才能获得视频时长等信息；当loadedTimeRanges的改变时（每缓冲一部分数据就会更新此属性）可以获得本次缓冲加载的视频范围（包含起始时间、本次加载时长），这样一来就可以实时获得缓冲情况。然后就是依靠<span class=\"built_in\">AVPlayer</span>的- (<span class=\"keyword\">id</span>)addPeriodicTimeObserverForInterval:(<span class=\"built_in\">CMTime</span>)interval queue:(<span class=\"built_in\">dispatch_queue_t</span>)queue usingBlock:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">CMTime</span> time))block方法获得播放进度，这个方法会在设定的时间间隔内定时更新播放进度，通过time参数通知客户端。相信有了这些视频信息播放进度就不成问题了，事实上通过这些信息就算是平时看到的其他播放器的缓冲进度显示以及拖动播放的功能也可以顺利的实现。</div><div class=\"line\">最后就是视频切换的功能，在前面介绍的所有播放器中每个播放器对象一次只能播放一个视频，如果要切换视频只能重新创建一个对象，但是<span class=\"built_in\">AVPlayer</span>却提供了- (<span class=\"keyword\">void</span>)replaceCurrentItemWithPlayerItem:(<span class=\"built_in\">AVPlayerItem</span> *)item方法用于在不同的视频之间切换（事实上在<span class=\"built_in\">AVFoundation</span>内部还有一个<span class=\"built_in\">AVQueuePlayer</span>专门处理播放列表切换，有兴趣的朋友可以自行研究，这里不再赘述）。</div><div class=\"line\">下面附上代码：</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  ViewController.m</span></div><div class=\"line\"><span class=\"comment\">//  AVPlayer</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by Kenshin Cui on 14/03/30.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright (c) 2014年 cmjstudio. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>) <span class=\"built_in\">AVPlayer</span> *player;<span class=\"comment\">//播放器对象</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIView</span> *container; <span class=\"comment\">//播放器容器</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *playOrPause; <span class=\"comment\">//播放/暂停按钮</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIProgressView</span> *progress;<span class=\"comment\">//播放进度</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 控制器视图方法</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    [<span class=\"keyword\">self</span> setupUI];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.player play];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)dealloc&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> removeObserverFromPlayerItem:<span class=\"keyword\">self</span>.player.currentItem];</div><div class=\"line\">    [<span class=\"keyword\">self</span> removeNotification];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 私有方法</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)setupUI&#123;</div><div class=\"line\">    <span class=\"comment\">//创建播放器层</span></div><div class=\"line\">    <span class=\"built_in\">AVPlayerLayer</span> *playerLayer=[<span class=\"built_in\">AVPlayerLayer</span> playerLayerWithPlayer:<span class=\"keyword\">self</span>.player];</div><div class=\"line\">    playerLayer.frame=<span class=\"keyword\">self</span>.container.frame;</div><div class=\"line\">    <span class=\"comment\">//playerLayer.videoGravity=AVLayerVideoGravityResizeAspect;//视频填充模式</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.container.layer addSublayer:playerLayer];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  截取指定时间的视频缩略图</div><div class=\"line\"> *</div><div class=\"line\"> *  @param timeBySecond 时间点</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  初始化播放器</div><div class=\"line\"> *</div><div class=\"line\"> *  @return 播放器对象</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">AVPlayer</span> *)player&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!_player) &#123;</div><div class=\"line\">        <span class=\"built_in\">AVPlayerItem</span> *playerItem=[<span class=\"keyword\">self</span> getPlayItem:<span class=\"number\">0</span>];</div><div class=\"line\">        _player=[<span class=\"built_in\">AVPlayer</span> playerWithPlayerItem:playerItem];</div><div class=\"line\">        [<span class=\"keyword\">self</span> addProgressObserver];</div><div class=\"line\">        [<span class=\"keyword\">self</span> addObserverToPlayerItem:playerItem];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> _player;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  根据视频索引取得AVPlayerItem对象</div><div class=\"line\"> *</div><div class=\"line\"> *  @param videoIndex 视频顺序索引</div><div class=\"line\"> *</div><div class=\"line\"> *  @return AVPlayerItem对象</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"built_in\">AVPlayerItem</span> *)getPlayItem:(<span class=\"keyword\">int</span>)videoIndex&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *urlStr=[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"http://192.168.1.161/%i.mp4\"</span>,videoIndex];</div><div class=\"line\">    urlStr =[urlStr stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</div><div class=\"line\">    <span class=\"built_in\">NSURL</span> *url=[<span class=\"built_in\">NSURL</span> URLWithString:urlStr];</div><div class=\"line\">    <span class=\"built_in\">AVPlayerItem</span> *playerItem=[<span class=\"built_in\">AVPlayerItem</span> playerItemWithURL:url];</div><div class=\"line\">    <span class=\"keyword\">return</span> playerItem;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#pragma mark - 通知</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  添加播放器通知</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)addNotification&#123;</div><div class=\"line\">    <span class=\"comment\">//给AVPlayerItem添加播放完成通知</span></div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(playbackFinished:) name:<span class=\"built_in\">AVPlayerItemDidPlayToEndTimeNotification</span> object:<span class=\"keyword\">self</span>.player.currentItem];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)removeNotification&#123;</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  播放完成通知</div><div class=\"line\"> *</div><div class=\"line\"> *  @param notification 通知对象</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)playbackFinished:(<span class=\"built_in\">NSNotification</span> *)notification&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"视频播放完成.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - 监控</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  给播放器添加进度更新</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)addProgressObserver&#123;</div><div class=\"line\">    <span class=\"built_in\">AVPlayerItem</span> *playerItem=<span class=\"keyword\">self</span>.player.currentItem;</div><div class=\"line\">    <span class=\"built_in\">UIProgressView</span> *progress=<span class=\"keyword\">self</span>.progress;</div><div class=\"line\">    <span class=\"comment\">//这里设置每秒执行一次</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.player addPeriodicTimeObserverForInterval:<span class=\"built_in\">CMTimeMake</span>(<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>) queue:dispatch_get_main_queue() usingBlock:^(<span class=\"built_in\">CMTime</span> time) &#123;</div><div class=\"line\">        <span class=\"keyword\">float</span> current=<span class=\"built_in\">CMTimeGetSeconds</span>(time);</div><div class=\"line\">        <span class=\"keyword\">float</span> total=<span class=\"built_in\">CMTimeGetSeconds</span>([playerItem duration]);</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"当前已经播放%.2fs.\"</span>,current);</div><div class=\"line\">        <span class=\"keyword\">if</span> (current) &#123;</div><div class=\"line\">            [progress setProgress:(current/total) animated:<span class=\"literal\">YES</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  给AVPlayerItem添加监控</div><div class=\"line\"> *</div><div class=\"line\"> *  @param playerItem AVPlayerItem对象</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)addObserverToPlayerItem:(<span class=\"built_in\">AVPlayerItem</span> *)playerItem&#123;</div><div class=\"line\">    <span class=\"comment\">//监控状态属性，注意AVPlayer也有一个status属性，通过监控它的status也可以获得播放状态</span></div><div class=\"line\">    [playerItem addObserver:<span class=\"keyword\">self</span> forKeyPath:<span class=\"string\">@\"status\"</span> options:<span class=\"built_in\">NSKeyValueObservingOptionNew</span> context:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"comment\">//监控网络加载情况属性</span></div><div class=\"line\">    [playerItem addObserver:<span class=\"keyword\">self</span> forKeyPath:<span class=\"string\">@\"loadedTimeRanges\"</span> options:<span class=\"built_in\">NSKeyValueObservingOptionNew</span> context:<span class=\"literal\">nil</span>];</div><div class=\"line\">&#125;</div><div class=\"line\">-(<span class=\"keyword\">void</span>)removeObserverFromPlayerItem:(<span class=\"built_in\">AVPlayerItem</span> *)playerItem&#123;</div><div class=\"line\">    [playerItem removeObserver:<span class=\"keyword\">self</span> forKeyPath:<span class=\"string\">@\"status\"</span>];</div><div class=\"line\">    [playerItem removeObserver:<span class=\"keyword\">self</span> forKeyPath:<span class=\"string\">@\"loadedTimeRanges\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  通过KVO监控播放器状态</div><div class=\"line\"> *</div><div class=\"line\"> *  @param keyPath 监控属性</div><div class=\"line\"> *  @param object  监视器</div><div class=\"line\"> *  @param change  状态改变</div><div class=\"line\"> *  @param context 上下文</div><div class=\"line\"> */</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)observeValueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath ofObject:(<span class=\"keyword\">id</span>)object change:(<span class=\"built_in\">NSDictionary</span> *)change context:(<span class=\"keyword\">void</span> *)context&#123;</div><div class=\"line\">    <span class=\"built_in\">AVPlayerItem</span> *playerItem=object;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([keyPath isEqualToString:<span class=\"string\">@\"status\"</span>]) &#123;</div><div class=\"line\">        <span class=\"built_in\">AVPlayerStatus</span> status= [[change objectForKey:<span class=\"string\">@\"new\"</span>] intValue];</div><div class=\"line\">        <span class=\"keyword\">if</span>(status==<span class=\"built_in\">AVPlayerStatusReadyToPlay</span>)&#123;</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"正在播放...，视频总长度:%.2f\"</span>,<span class=\"built_in\">CMTimeGetSeconds</span>(playerItem.duration));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([keyPath isEqualToString:<span class=\"string\">@\"loadedTimeRanges\"</span>])&#123;</div><div class=\"line\">        <span class=\"built_in\">NSArray</span> *array=playerItem.loadedTimeRanges;</div><div class=\"line\">        <span class=\"built_in\">CMTimeRange</span> timeRange = [array.firstObject <span class=\"built_in\">CMTimeRangeValue</span>];<span class=\"comment\">//本次缓冲时间范围</span></div><div class=\"line\">        <span class=\"keyword\">float</span> startSeconds = <span class=\"built_in\">CMTimeGetSeconds</span>(timeRange.start);</div><div class=\"line\">        <span class=\"keyword\">float</span> durationSeconds = <span class=\"built_in\">CMTimeGetSeconds</span>(timeRange.duration);</div><div class=\"line\">        <span class=\"built_in\">NSTimeInterval</span> totalBuffer = startSeconds + durationSeconds;<span class=\"comment\">//缓冲总长度</span></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"共缓冲：%.2f\"</span>,totalBuffer);</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - UI事件</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  点击播放/暂停按钮</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 播放/暂停按钮</div><div class=\"line\"> */</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)playClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\"><span class=\"comment\">//    AVPlayerItemDidPlayToEndTimeNotification</span></div><div class=\"line\">    <span class=\"comment\">//AVPlayerItem *playerItem= self.player.currentItem;</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">self</span>.player.rate==<span class=\"number\">0</span>)&#123; <span class=\"comment\">//说明时暂停</span></div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"player_pause\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.player play];</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">self</span>.player.rate==<span class=\"number\">1</span>)&#123;<span class=\"comment\">//正在播放</span></div><div class=\"line\">        [<span class=\"keyword\">self</span>.player pause];</div><div class=\"line\">        [sender setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"player_play\"</span>] forState:<span class=\"built_in\">UIControlStateNormal</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  切换选集，这里使用按钮的tag代表视频名称</div><div class=\"line\"> *</div><div class=\"line\"> *  @param sender 点击按钮对象</div><div class=\"line\"> */</span></div><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)navigationButtonClick:(<span class=\"built_in\">UIButton</span> *)sender &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> removeNotification];</div><div class=\"line\">    [<span class=\"keyword\">self</span> removeObserverFromPlayerItem:<span class=\"keyword\">self</span>.player.currentItem];</div><div class=\"line\">    <span class=\"built_in\">AVPlayerItem</span> *playerItem=[<span class=\"keyword\">self</span> getPlayItem:sender.tag];</div><div class=\"line\">    [<span class=\"keyword\">self</span> addObserverToPlayerItem:playerItem];</div><div class=\"line\">    <span class=\"comment\">//切换视频</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.player replaceCurrentItemWithPlayerItem:playerItem];</div><div class=\"line\">    [<span class=\"keyword\">self</span> addNotification];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\">运行效果：</div><div class=\"line\"><span class=\"built_in\">AVPlayer</span></div><div class=\"line\">到目前为止无论是<span class=\"built_in\">MPMoviePlayerController</span>还是<span class=\"built_in\">AVPlayer</span>来播放视频都相当强大，但是它也存在着一些不可回避的问题，那就是支持的视频编码格式很有限：H<span class=\"number\">.264</span>、<span class=\"built_in\">MPEG</span><span class=\"number\">-4</span>，扩展名（压缩格式）：.mp4、.mov、.m4v、.m2v、<span class=\"number\">.3</span>gp、<span class=\"number\">.3</span>g2等。但是无论是<span class=\"built_in\">MPMoviePlayerController</span>还是<span class=\"built_in\">AVPlayer</span>它们都支持绝大多数音频编码，所以大家如果纯粹是为了播放音乐的话也可以考虑使用这两个播放器。那么如何支持更多视频编码格式呢？目前来说主要还是依靠第三方框架，在iOS上常用的视频编码、解码框架有：VLC、ffmpeg， 具体使用方式今天就不再做详细介绍。</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0yms95r000321xw61s80edz","category_id":"cj0yms95u000521xw4qk3e8gj","_id":"cj0yms965000b21xwhm2r3a88"},{"post_id":"cj0yms95t000421xwow5xdi94","category_id":"cj0yms95u000521xw4qk3e8gj","_id":"cj0yms968000f21xwm3prazi2"},{"post_id":"cj0yms95w000621xwb9nrjvsj","category_id":"cj0yms966000d21xwoks97xd6","_id":"cj0yms96g000k21xw8mtr70sb"},{"post_id":"cj0yms960000821xwimnpsxp1","category_id":"cj0yms969000h21xw7c4mim9v","_id":"cj0yms96x000o21xwtl7wdqtj"},{"post_id":"cj0yms96s000m21xwg3hffc9l","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms96z000r21xwg1me8gl3"},{"post_id":"cj0yms963000a21xwv62ngfye","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms970000t21xwmx1690zk"},{"post_id":"cj0yms96v000n21xw9ncy0tst","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms971000w21xwtjq9c7j7"},{"post_id":"cj0yms96y000q21xwaookor9p","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms973000y21xwwisixl85"},{"post_id":"cj0yms965000c21xwb9y53jya","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms974001121xwqncngpjj"},{"post_id":"cj0yms96z000s21xwga1rsjbi","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms976001321xwusmwgxvn"},{"post_id":"cj0yms970000v21xwt65xxqs7","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms977001621xwt9owu1gk"},{"post_id":"cj0yms967000e21xwovpnwc7t","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms978001821xwldndq05r"},{"post_id":"cj0yms971000x21xw4jqee7vg","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms979001b21xwi19baoca"},{"post_id":"cj0yms973001021xwmppz19xx","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97a001d21xwlxtc40kl"},{"post_id":"cj0yms968000g21xwsea3b0g3","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97b001f21xwixykmywh"},{"post_id":"cj0yms975001221xw517xhpjn","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97e001h21xwy19bdfsv"},{"post_id":"cj0yms976001521xwlckgxybg","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97g001j21xwfq10fiuf"},{"post_id":"cj0yms96a000i21xwcj4iom5c","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97h001l21xwko4n7oqg"},{"post_id":"cj0yms977001721xwjnc82ix1","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97i001n21xwt16iyq6u"},{"post_id":"cj0yms978001a21xw7rrbuhqm","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97l001p21xw6a5m28ct"},{"post_id":"cj0yms96c000j21xwvxqplq3m","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97m001r21xwlmvdg96y"},{"post_id":"cj0yms979001c21xwf71778be","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97n001t21xwai54cozi"},{"post_id":"cj0yms97a001e21xwp8osz8ax","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97o001v21xw6t4lcdlo"},{"post_id":"cj0yms97d001g21xwbfswvr40","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97o001x21xw0t5l95al"},{"post_id":"cj0yms97e001i21xwvbfvo9vg","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97q001z21xwbi7y187e"},{"post_id":"cj0yms97g001k21xwuu88m9h0","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97r002121xwbfkz87ma"},{"post_id":"cj0yms97h001m21xwn5n2ms7y","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97t002321xw37kybf81"},{"post_id":"cj0yms97k001o21xwfshhdpkc","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97u002521xwacy8kzl0"},{"post_id":"cj0yms97l001q21xwweedyjmp","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97v002721xwgp33srye"},{"post_id":"cj0yms97m001s21xwefleqmtf","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97w002921xwo4xr0a51"},{"post_id":"cj0yms97n001u21xwa4mwox29","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97w002b21xw6gtn3ejd"},{"post_id":"cj0yms97o001w21xw3d7fgw6b","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97x002d21xwawe8veee"},{"post_id":"cj0yms97p001y21xwbyhjk6z2","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97x002f21xwx2a0mb6p"},{"post_id":"cj0yms97q002021xwvpp5xt8h","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97y002h21xw5us6z93p"},{"post_id":"cj0yms97s002221xwsjqqafg5","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms97z002j21xwxlna63yg"},{"post_id":"cj0yms97t002421xw43fle5fg","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms980002l21xwo7dyd7n0"},{"post_id":"cj0yms97u002621xwmdlj71m4","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms980002n21xwigkfqscy"},{"post_id":"cj0yms97v002821xw4vmg6hvo","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms981002p21xwux1nic6i"},{"post_id":"cj0yms97w002a21xwgbs4mhn4","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms982002r21xw67m6hffs"},{"post_id":"cj0yms97w002c21xwug62gh8y","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms983002t21xwhdktchfa"},{"post_id":"cj0yms97x002e21xwff5kgxga","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms984002v21xwl0d1mnoa"},{"post_id":"cj0yms97x002g21xwhgzmx502","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms985002x21xw6wp7sdrc"},{"post_id":"cj0yms97y002i21xwejceh4f0","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms985002z21xwp2hkk9fh"},{"post_id":"cj0yms97z002k21xw24oujang","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms986003121xw0bvqaqg3"},{"post_id":"cj0yms980002m21xw6pxuu7uf","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms988003321xwt5e2xdp5"},{"post_id":"cj0yms980002o21xw84q6xs5v","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98a003521xwnk8cn0r9"},{"post_id":"cj0yms981002q21xws7ovnupl","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98b003721xwtf9cj08a"},{"post_id":"cj0yms982002s21xwis317i6c","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98c003921xwz1oifrit"},{"post_id":"cj0yms983002u21xwmaqatzy2","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98d003b21xw9vtsednx"},{"post_id":"cj0yms984002w21xwyde1biip","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98e003d21xw59fio66d"},{"post_id":"cj0yms985002y21xwkvmewn9e","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98g003f21xw6qeyxjpk"},{"post_id":"cj0yms985003021xwhvez7cg5","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98h003h21xw55zqhqtc"},{"post_id":"cj0yms987003221xwh6ny5k98","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98j003j21xwurn64kmt"},{"post_id":"cj0yms989003421xwltwc90n5","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98l003l21xwz3p6giom"},{"post_id":"cj0yms98a003621xwvjh5hxrt","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98m003n21xw8qw72twr"},{"post_id":"cj0yms98b003821xw0de87915","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98o003p21xwivxar9el"},{"post_id":"cj0yms98c003a21xw8qlngto6","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98q003r21xw3rk26vvu"},{"post_id":"cj0yms98d003c21xwnanqe7b4","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98t003t21xwp8a280sb"},{"post_id":"cj0yms98f003e21xwf64nngrj","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98w003v21xwr9xfu2kp"},{"post_id":"cj0yms98g003g21xwoe02kctq","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98w003x21xwvb30uazw"},{"post_id":"cj0yms98h003i21xwyjb64u1e","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98x003z21xw3k8flq5s"},{"post_id":"cj0yms98j003k21xwrsl1knls","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98y004121xw80yd2dmi"},{"post_id":"cj0yms98l003m21xwiudaiss2","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98z004321xwbjxgisqu"},{"post_id":"cj0yms98n003o21xwo6tec2km","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms98z004521xwj2nx8ovs"},{"post_id":"cj0yms98p003q21xwlyil9pxi","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms990004721xwritg5dyy"},{"post_id":"cj0yms98q003s21xwq5dev0pn","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms991004921xwkbfdf53v"},{"post_id":"cj0yms98v003u21xwklo08fpf","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms992004b21xww7itea11"},{"post_id":"cj0yms98w003w21xwfhouxrp8","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms994004d21xwr45v5gl7"},{"post_id":"cj0yms98x003y21xw7m875skh","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms994004f21xw3te6t6ii"},{"post_id":"cj0yms98x004021xwg5p03j1t","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms996004j21xw8yzqclst"},{"post_id":"cj0yms98y004221xwi3gu7348","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms998004l21xw5s242zf6"},{"post_id":"cj0yms98z004421xw2olzfs8d","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms999004n21xw7t9pw5e7"},{"post_id":"cj0yms990004621xwi6azkvhc","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms99b004q21xwzrwamv0j"},{"post_id":"cj0yms990004821xw38tzt2gr","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms99c004s21xwr9rejwto"},{"post_id":"cj0yms991004a21xw2euxhkh5","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms99d004u21xww11xbqon"},{"post_id":"cj0yms992004c21xwr85j5r9r","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms99d004w21xww8y0zpmc"},{"post_id":"cj0yms995004g21xwejh25l5a","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms99f004y21xw52pzfcvq"},{"post_id":"cj0yms997004k21xw9y9ylaja","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms99g005021xwvs5j13d2"},{"post_id":"cj0yms998004m21xwwpjwzrm3","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms99i005221xws8dgd9k7"},{"post_id":"cj0yms994004e21xwqllr2qfl","category_id":"cj0yms996004h21xwi2xftzny","_id":"cj0yms99i005421xwl4cd2bh7"},{"post_id":"cj0yms99a004o21xwcyz381gu","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms99j005721xwa1k6uly1"},{"post_id":"cj0yms99b004r21xwb14iir9t","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms99k005921xw0d848v3i"},{"post_id":"cj0yms99c004t21xw4i4oay29","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms99m005b21xwnmd7o2om"},{"post_id":"cj0yms99d004v21xww57j6br4","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms99n005e21xwlnlkvy7j"},{"post_id":"cj0yms99d004x21xw1s24neg6","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms99o005g21xwx5w5nwcy"},{"post_id":"cj0yms99f004z21xwq2e4qubg","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms99p005i21xwhp4q0z9g"},{"post_id":"cj0yms99h005121xwu2sn4kl2","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms99q005k21xw5uu5mlcw"},{"post_id":"cj0yms99l005a21xwhyvhk7fo","category_id":"cj0yms99j005621xwarx25w66","_id":"cj0yms99r005m21xwg8227ruf"},{"post_id":"cj0yms99i005321xwjj0b4qk2","category_id":"cj0yms99j005621xwarx25w66","_id":"cj0yms99s005o21xw9m3ws22x"},{"post_id":"cj0yms99m005c21xwhgq93z0x","category_id":"cj0yms99j005621xwarx25w66","_id":"cj0yms99t005q21xw5ds0p2gm"},{"post_id":"cj0yms99n005f21xw3azjafls","category_id":"cj0yms99j005621xwarx25w66","_id":"cj0yms99u005s21xwvi36vjzz"},{"post_id":"cj0yms99j005821xwvioq6uxu","category_id":"cj0yms99j005621xwarx25w66","_id":"cj0yms99u005u21xwvp670n9z"},{"post_id":"cj0yms99q005j21xwywv2rdkr","category_id":"cj0yms99j005621xwarx25w66","_id":"cj0yms99w005w21xwql9ass8k"},{"post_id":"cj0yms99q005l21xwa0d1thqb","category_id":"cj0yms99j005621xwarx25w66","_id":"cj0yms99x005y21xwos419r62"},{"post_id":"cj0yms99r005n21xw2dvkicj7","category_id":"cj0yms99j005621xwarx25w66","_id":"cj0yms99x006021xwk5ltrktr"},{"post_id":"cj0yms99t005r21xwtl97c4qd","category_id":"cj0yms99j005621xwarx25w66","_id":"cj0yms99y006221xwk35z5hzy"},{"post_id":"cj0yms99u005t21xwgacp9wzn","category_id":"cj0yms99j005621xwarx25w66","_id":"cj0yms99z006621xw5s4t8m88"},{"post_id":"cj0yms99v005v21xw86tcpvaw","category_id":"cj0yms99j005621xwarx25w66","_id":"cj0yms99z006821xw9oa9xtbs"},{"post_id":"cj0yms99w005x21xwd1p7wa1f","category_id":"cj0yms99j005621xwarx25w66","_id":"cj0yms9a0006a21xwn8t6abnq"},{"post_id":"cj0yms99x005z21xwq1bo9ldw","category_id":"cj0yms99j005621xwarx25w66","_id":"cj0yms9a1006e21xwds7l5hij"},{"post_id":"cj0yms99z006921xwmbx6s2d7","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9a2006g21xwf9ujmwl3"},{"post_id":"cj0yms99x006121xwrsfjfwsb","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9a4006k21xwp59q2uvn"},{"post_id":"cj0yms9a0006b21xw0jrgn3u1","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9a5006n21xw7bvue290"},{"post_id":"cj0yms9a1006f21xwyzzbmlbo","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9a6006r21xw4vyabuzg"},{"post_id":"cj0yms99y006321xwpc9gr86q","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9a8006u21xwiwijbx60"},{"post_id":"cj0yms99z006721xwo729euoe","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9a9006y21xwfvact3f1"},{"post_id":"cj0yms9a5006o21xw27xtasww","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9aa007121xw92mordjb"},{"post_id":"cj0yms9a6006s21xwc4k7on5a","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9ab007521xwxnfle3ob"},{"post_id":"cj0yms9a8006v21xwbpkwxhf7","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9ab007821xwqhh9040k"},{"post_id":"cj0yms9a9006z21xwj7ugjwh1","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9ac007c21xw1d123jwf"},{"post_id":"cj0yms9aa007221xwsqqjd1yf","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9ad007f21xwscxbzesk"},{"post_id":"cj0yms9ab007621xwn3s95nc0","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9ae007j21xw5l9oalc1"},{"post_id":"cj0yms9ab007921xwysrn9gf5","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9af007m21xwdjoqwitp"},{"post_id":"cj0yms9ac007d21xw7zdx1e2c","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9ag007q21xwrc4bubz9"},{"post_id":"cj0yms9ad007g21xwqh3le3ps","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9ah007t21xwmt5wpyvm"},{"post_id":"cj0yms9ae007k21xwxvouo5ia","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9ai007x21xwzbpey4hx"},{"post_id":"cj0yms9af007n21xwbj6vo438","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9ai008021xwuwevfn0r"},{"post_id":"cj0yms9ag007r21xwzv9g8tf4","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9ak008521xwu5t2f4qo"},{"post_id":"cj0yms9ah007u21xwvc7noqaz","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9al008821xw1kvx77ty"},{"post_id":"cj0yms9ai007y21xwhqawb7fv","category_id":"cj0yms9ak008221xwnntxgli3","_id":"cj0yms9ap008g21xwu91kcl8z"},{"post_id":"cj0yms9an008f21xwscr9pspj","category_id":"cj0yms9am008c21xwjc6tx5ws","_id":"cj0yms9ar008n21xw37kf9kmm"},{"post_id":"cj0yms9aj008121xwjo4uygch","category_id":"cj0yms9am008c21xwjc6tx5ws","_id":"cj0yms9as008s21xw7i4hdi1y"},{"post_id":"cj0yms9ar008m21xwk7k4fpn6","category_id":"cj0yms9am008c21xwjc6tx5ws","_id":"cj0yms9at008v21xw8q4mdjnp"},{"post_id":"cj0yms9ak008621xwn07clixj","category_id":"cj0yms9aq008j21xwd7rxi3jk","_id":"cj0yms9av008z21xw9v6un2d9"},{"post_id":"cj0yms9ar008p21xwtnplvhki","category_id":"cj0yms9am008c21xwjc6tx5ws","_id":"cj0yms9ax009321xwqb9y0xsj"},{"post_id":"cj0yms9as008u21xwjix7986u","category_id":"cj0yms9am008c21xwjc6tx5ws","_id":"cj0yms9ay009621xwi0q2psgc"},{"post_id":"cj0yms9al008921xw160mr9cg","category_id":"cj0yms9am008c21xwjc6tx5ws","_id":"cj0yms9az009921xw7uddzbpt"},{"post_id":"cj0yms9au008x21xwmmkgzf6e","category_id":"cj0yms9am008c21xwjc6tx5ws","_id":"cj0yms9b0009c21xw9b8tszw2"},{"post_id":"cj0yms9aw009221xwu2ttqs7m","category_id":"cj0yms9am008c21xwjc6tx5ws","_id":"cj0yms9b2009f21xwc1djvmom"},{"post_id":"cj0yms9am008b21xwzt240jpf","category_id":"cj0yms9am008c21xwjc6tx5ws","_id":"cj0yms9b3009i21xw3j3ou332"},{"post_id":"cj0yms9ax009521xwlm5t7jj1","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms9b4009l21xwss8a0syu"},{"post_id":"cj0yms9b1009e21xwuc0qsi4i","category_id":"cj0yms9am008c21xwjc6tx5ws","_id":"cj0yms9b6009o21xwo0ehm26q"},{"post_id":"cj0yms9b5009m21xwsbflzc4k","category_id":"cj0yms9am008c21xwjc6tx5ws","_id":"cj0yms9b8009r21xwn24zjpns"},{"post_id":"cj0yms9b6009p21xwd7vnu7zy","category_id":"cj0yms9am008c21xwjc6tx5ws","_id":"cj0yms9b8009t21xwkxb8v6ns"},{"post_id":"cj0yms9b7009q21xwd6h0ycx5","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms9b9009v21xwrcf3yd8d"},{"post_id":"cj0yms9b3009k21xwyjpzgz0k","category_id":"cj0yms9b6009n21xw7dgobg42","_id":"cj0yms9ba009x21xw037gv3do"},{"post_id":"cj0yms9b8009s21xwnps39ppa","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms9ba009y21xwcwkl1mpk"},{"post_id":"cj0yms9b8009u21xw8c1tyqcg","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms9ba009z21xwlont16ma"},{"post_id":"cj0yms9b9009w21xwe7j335l8","category_id":"cj0yms99y006421xwhy1nf90p","_id":"cj0yms9bb00a021xwpmuhg426"},{"post_id":"cj0yms9bi00a121xwvya8si2e","category_id":"cj0yms96r000l21xwl36a8zfs","_id":"cj0yms9bj00a221xw0i9b7u04"}],"PostTag":[{"post_id":"cj0yms994004e21xwqllr2qfl","tag_id":"cj0yms996004i21xwqhqtapxp","_id":"cj0yms99b004p21xwa3d8uyb1"},{"post_id":"cj0yms99x006121xwrsfjfwsb","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9a4006m21xwtx6uzqgc"},{"post_id":"cj0yms99x006121xwrsfjfwsb","tag_id":"cj0yms9a1006d21xwvhkiyljo","_id":"cj0yms9a5006p21xwz0le05so"},{"post_id":"cj0yms9a5006o21xw27xtasww","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9a8006t21xwu3c4x3l8"},{"post_id":"cj0yms9a5006o21xw27xtasww","tag_id":"cj0yms9a1006d21xwvhkiyljo","_id":"cj0yms9a9006x21xw91anksc6"},{"post_id":"cj0yms99y006321xwpc9gr86q","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9aa007021xwbpl46idp"},{"post_id":"cj0yms99y006321xwpc9gr86q","tag_id":"cj0yms9a1006d21xwvhkiyljo","_id":"cj0yms9ab007421xw8w17isyh"},{"post_id":"cj0yms9aa007221xwsqqjd1yf","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9ab007721xw0c5gaby5"},{"post_id":"cj0yms9ab007621xwn3s95nc0","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9ac007b21xwgcv7i61k"},{"post_id":"cj0yms99z006721xwo729euoe","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9ad007e21xwk84ttv8b"},{"post_id":"cj0yms99z006721xwo729euoe","tag_id":"cj0yms9a1006d21xwvhkiyljo","_id":"cj0yms9ae007i21xwr0zkfc8n"},{"post_id":"cj0yms9ab007921xwysrn9gf5","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9af007l21xw1z5md8xk"},{"post_id":"cj0yms9ac007d21xw7zdx1e2c","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9ag007p21xwl5nvcpb6"},{"post_id":"cj0yms99z006921xwmbx6s2d7","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9ah007s21xwafluunrf"},{"post_id":"cj0yms99z006921xwmbx6s2d7","tag_id":"cj0yms9a1006d21xwvhkiyljo","_id":"cj0yms9ai007w21xwevq26qj2"},{"post_id":"cj0yms9ad007g21xwqh3le3ps","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9ai007z21xwmss6gm82"},{"post_id":"cj0yms9ae007k21xwxvouo5ia","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9ak008321xw6z0u967c"},{"post_id":"cj0yms9ae007k21xwxvouo5ia","tag_id":"cj0yms9a1006d21xwvhkiyljo","_id":"cj0yms9al008721xwetcptjlr"},{"post_id":"cj0yms9a6006s21xwc4k7on5a","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9am008a21xw0dvbuu36"},{"post_id":"cj0yms9a6006s21xwc4k7on5a","tag_id":"cj0yms9ae007h21xwmdj4nhxn","_id":"cj0yms9an008e21xwwysiqd30"},{"post_id":"cj0yms9af007n21xwbj6vo438","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9ap008h21xwsed3yomf"},{"post_id":"cj0yms9a8006v21xwbpkwxhf7","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9aq008l21xwih0n7pxw"},{"post_id":"cj0yms9a8006v21xwbpkwxhf7","tag_id":"cj0yms9ae007h21xwmdj4nhxn","_id":"cj0yms9ar008o21xwuu6qw2ug"},{"post_id":"cj0yms9ah007u21xwvc7noqaz","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9as008t21xwq0cei699"},{"post_id":"cj0yms9ah007u21xwvc7noqaz","tag_id":"cj0yms9a1006d21xwvhkiyljo","_id":"cj0yms9au008w21xwomde44il"},{"post_id":"cj0yms9a9006z21xwj7ugjwh1","tag_id":"cj0yms99z006521xwch1dytop","_id":"cj0yms9av009021xwtfwav0cj"},{"post_id":"cj0yms9a9006z21xwj7ugjwh1","tag_id":"cj0yms9ah007v21xwoz5gklto","_id":"cj0yms9ax009421xw399n875k"},{"post_id":"cj0yms9ag007r21xwzv9g8tf4","tag_id":"cj0yms9ak008421xwbegktnge","_id":"cj0yms9ay009721xwzta8zkv3"},{"post_id":"cj0yms9ai007y21xwhqawb7fv","tag_id":"cj0yms9an008d21xwmxvmgygg","_id":"cj0yms9az009a21xw8qy5bv0v"},{"post_id":"cj0yms9ak008621xwn07clixj","tag_id":"cj0yms9aq008k21xw57sy8vue","_id":"cj0yms9b0009d21xwu3o0zdjn"},{"post_id":"cj0yms9am008b21xwzt240jpf","tag_id":"cj0yms9as008r21xw0pf5hzlp","_id":"cj0yms9b2009g21xwxq1k5eff"},{"post_id":"cj0yms9am008b21xwzt240jpf","tag_id":"cj0yms9av009121xw4pjyirnt","_id":"cj0yms9b3009j21xw77t5kwjv"}],"Tag":[{"name":"oc","_id":"cj0yms996004i21xwqhqtapxp"},{"name":"ruby","_id":"cj0yms99z006521xwch1dytop"},{"name":"rails","_id":"cj0yms9a1006d21xwvhkiyljo"},{"name":"rake","_id":"cj0yms9ae007h21xwmdj4nhxn"},{"name":"rspec","_id":"cj0yms9ah007v21xwoz5gklto"},{"name":"rvm","_id":"cj0yms9ak008421xwbegktnge"},{"name":"Security","_id":"cj0yms9an008d21xwmxvmgygg"},{"name":"swift","_id":"cj0yms9aq008k21xw57sy8vue"},{"name":"linux","_id":"cj0yms9as008r21xw0pf5hzlp"},{"name":"apt","_id":"cj0yms9av009121xw4pjyirnt"}]}}